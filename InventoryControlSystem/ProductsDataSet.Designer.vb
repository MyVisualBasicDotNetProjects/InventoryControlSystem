'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.312
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("ProductsDataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ProductsDataSet
    Inherits System.Data.DataSet
    
    Private tableProducts As ProductsDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Products")) Is Nothing) Then
                MyBase.Tables.Add(New ProductsDataTable(ds.Tables("Products")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Products() As ProductsDataTable
        Get
            Return Me.tableProducts
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As ProductsDataSet = CType(MyBase.Clone,ProductsDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Products")) Is Nothing) Then
                MyBase.Tables.Add(New ProductsDataTable(ds.Tables("Products")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableProducts = CType(MyBase.Tables("Products"),ProductsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProducts) Is Nothing) Then
                Me.tableProducts.InitVars
            End If
        End If ~dulla^@204~ ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
    Private Sub InitClass()
     ~dulla^@204~ Name = "ProductsDataSet"
        Me.~dulla^@204~         Me.Namespace = "http://tempur~dulla^@204~ sDataSet.xsd"
        Me.EnforceCons~dulla^@204~ e
        Me.SchemaSerializationMode~dulla^@204~ a.SchemaSerializationMode.IncludeSche~dulla^@204~ e.tableProducts = New ProductsDataTab~dulla^@204~ yBase.Tables.Add(Me.tableProducts)
 ~dulla^@204~    
    <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
    Private Function S~dulla^@204~ eProducts() As Boolean
        Retur~dulla^@204~ End Function
    
    <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
    Pri~dulla^@204~ maChanged(ByVal sender As Object, ByV~dulla^@204~ m.ComponentModel.CollectionChangeEven~dulla^@204~    If (e.Action = System.ComponentMod~dulla^@204~ ChangeAction.Remove) Then
          ~dulla^@204~ 
        End If
    End Sub
    
~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~  Public Shared Function GetTypedDataS~dulla^@204~ l xs As System.Xml.Schema.XmlSchemaSe~dulla^@204~ Xml.Schema.XmlSchemaComplexType
    ~dulla^@204~  ProductsDataSet = New ProductsDataSe~dulla^@204~ m type As System.Xml.Schema.XmlSchema~dulla^@204~  New System.Xml.Schema.XmlSchemaCompl~dulla^@204~    Dim sequence As System.Xml.Schema.~dulla^@204~ ence = New System.Xml.Schema.XmlSchem~dulla^@204~       xs.Add(ds.GetSchemaSerializable~dulla^@204~ m any As System.Xml.Schema.XmlSchemaA~dulla^@204~ em.Xml.Schema.XmlSchemaAny
        a~dulla^@204~ = ds.Namespace
        sequence.Item~dulla^@204~        type.Particle = sequence
    ~dulla^@204~ pe
    End Function
    
    Publi~dulla^@204~ b ProductsRowChangeEventHandler(ByVal~dulla^@204~ ject, ByVal e As ProductsRowChangeEve~dulla^@204~   <System.CodeDom.Compiler.GeneratedC~dulla^@204~ "System.Data.Design.TypedDataSetGener~dulla^@204~ .0"),  _
     System.Serializable(),~dulla^@204~ tem.Xml.Serialization.XmlSchemaProvid~dulla^@204~ GetTypedTableSchema")>  _
    Partia~dulla^@204~ s ProductsDataTable
        Inherits~dulla^@204~ DataTable
        Implements System.~dulla^@204~ Enumerable
        
        Private~dulla^@204~  As System.Data.DataColumn
        ~dulla^@204~ ate columnDescription As System.Data.~dulla^@204~        
        Private columnPrice ~dulla^@204~ a.DataColumn
        
        Priva~dulla^@204~ ingPrice1 As System.Data.DataColumn
~dulla^@204~      Private columnSellingPrice2 As S~dulla^@204~ taColumn
        
        Private c~dulla^@204~ p1 As System.Data.DataColumn
       ~dulla^@204~ ivate columnQtyAtShop2 As System.Data~dulla^@204~         
        Private columnQtyAt~dulla^@204~ em.Data.DataColumn
        
       ~dulla^@204~ mnTotalQuantity As System.Data.DataCo~dulla^@204~  
        Private columnReorderLevel~dulla^@204~ ta.DataColumn
        
        Priv~dulla^@204~ lfNo As System.Data.DataColumn
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Sub New()
     ~dulla^@204~ .New
            Me.TableName = "Pro~dulla^@204~        Me.BeginInit
            Me.I~dulla^@204~          Me.EndInit
        End Sub~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Friend Sub New(By~dulla^@204~ System.Data.DataTable)
            M~dulla^@204~           Me.TableName = table.TableN~dulla^@204~     If (table.CaseSensitive <> table.~dulla^@204~ ensitive) Then
                Me.Ca~dulla^@204~  table.CaseSensitive
            End~dulla^@204~     If (table.Locale.ToString <> tabl~dulla^@204~ ale.ToString) Then
                M~dulla^@204~ ble.Locale
            End If
     ~dulla^@204~ ble.Namespace <> table.DataSet.Namesp~dulla^@204~               Me.Namespace = table.Na~dulla^@204~         End If
            Me.Prefix~dulla^@204~ ix
            Me.MinimumCapacity = ~dulla^@204~ Capacity
        End Sub
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Protected Sub New(ByVal info~dulla^@204~ ntime.Serialization.SerializationInfo~dulla^@204~ xt As System.Runtime.Serialization.St~dulla^@204~ t)
            MyBase.New(info, cont~dulla^@204~      Me.InitVars
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public ReadOnly Prop~dulla^@204~ lumn() As System.Data.DataColumn
   ~dulla^@204~ 
                Return Me.columnPart~dulla^@204~    End Get
        End Property
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public ReadOnly Prope~dulla^@204~ onColumn() As System.Data.DataColumn~dulla^@204~ Get
                Return Me.column~dulla^@204~             End Get
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public ReadO~dulla^@204~ PriceColumn() As System.Data.DataColu~dulla^@204~    Get
                Return Me.col~dulla^@204~          End Get
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public ReadOnly~dulla^@204~ lingPrice1Column() As System.Data.Dat~dulla^@204~         Get
                Return M~dulla^@204~ ngPrice1
            End Get
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  Property SellingPrice2Column() As Sy~dulla^@204~ aColumn
            Get
           ~dulla^@204~ e.columnSellingPrice2
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic ReadOnly Property QtyAtShop1Colu~dulla^@204~ m.Data.DataColumn
            Get
 ~dulla^@204~   Return Me.columnQtyAtShop1
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public ReadOnly Property QtyAtSh~dulla^@204~ s System.Data.DataColumn
           ~dulla^@204~          Return Me.columnQtyAtShop2
~dulla^@204~ nd Get
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public ReadOnly Property ~dulla^@204~ umn() As System.Data.DataColumn
    ~dulla^@204~                 Return Me.columnQtyAt~dulla^@204~       End Get
        End Property
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public ReadOnly Pr~dulla^@204~ uantityColumn() As System.Data.DataCo~dulla^@204~      Get
                Return Me.c~dulla^@204~ ntity
            End Get
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ operty ReorderLevelColumn() As System~dulla^@204~ umn
            Get
               ~dulla^@204~ lumnReorderLevel
            End Get~dulla^@204~  Property
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ ReadOnly Property ShelfNoColumn() As ~dulla^@204~ ataColumn
            Get
         ~dulla^@204~  Me.columnShelfNo
            End Ge~dulla^@204~ d Property
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute(),  _
 ~dulla^@204~ m.ComponentModel.Browsable(false)>  _~dulla^@204~ lic ReadOnly Property Count() As Inte~dulla^@204~     Get
                Return Me.Ro~dulla^@204~          End Get
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Default ~dulla^@204~ erty Item(ByVal index As Integer) As ~dulla^@204~             Get
                Retu~dulla^@204~ ows(index),ProductsRow)
            ~dulla^@204~     End Property
        
        P~dulla^@204~ roductsRowChanging As ProductsRowChan~dulla^@204~ r
        
        Public Event Pro~dulla^@204~ ed As ProductsRowChangeEventHandler
~dulla^@204~      Public Event ProductsRowDeleting~dulla^@204~ owChangeEventHandler
        
     ~dulla^@204~ nt ProductsRowDeleted As ProductsRowC~dulla^@204~ dler
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ oads Sub AddProductsRow(ByVal row As ~dulla^@204~ 
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ oads Function AddProductsRow(ByVal Pa~dulla^@204~ g, ByVal Description As String, ByVal~dulla^@204~ ing, ByVal SellingPrice1 As String, B~dulla^@204~ rice2 As String, ByVal QtyAtShop1 As ~dulla^@204~  QtyAtShop2 As String, ByVal QtyAtSto~dulla^@204~  ByVal TotalQuantity As String, ByVal~dulla^@204~  As String, ByVal ShelfNo As String) ~dulla^@204~ w
            Dim rowProductsRow As ~dulla^@204~  CType(Me.NewRow,ProductsRow)
      ~dulla^@204~ uctsRow.ItemArray = New Object() {Par~dulla^@204~ ion, Price, SellingPrice1, SellingPri~dulla^@204~ p1, QtyAtShop2, QtyAtStore, TotalQuan~dulla^@204~ Level, ShelfNo}
            Me.Rows.~dulla^@204~ tsRow)
            Return rowProduct~dulla^@204~  End Function
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Function FindByPartNo(ByVal PartN~dulla^@204~ As ProductsRow
            Return CT~dulla^@204~ ind(New Object() {PartNo}),ProductsRo~dulla^@204~ nd Function
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Overridable Function GetEnumerator(~dulla^@204~ ollections.IEnumerator Implements Sys~dulla^@204~ ns.IEnumerable.GetEnumerator
       ~dulla^@204~ e.Rows.GetEnumerator
        End Fun~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Over~dulla^@204~ n Clone() As System.Data.DataTable
 ~dulla^@204~ m cln As ProductsDataTable = CType(My~dulla^@204~ oductsDataTable)
            cln.Ini~dulla^@204~       Return cln
        End Functio~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Protected Overr~dulla^@204~  CreateInstance() As System.Data.Data~dulla^@204~       Return New ProductsDataTable
 ~dulla^@204~ nction
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~  InitVars()
            Me.columnPar~dulla^@204~ Columns("PartNo")
            Me.col~dulla^@204~ n = MyBase.Columns("Description")
  ~dulla^@204~ columnPrice = MyBase.Columns("Price")~dulla^@204~  Me.columnSellingPrice1 = MyBase.Colu~dulla^@204~ rice1")
            Me.columnSelling~dulla^@204~ se.Columns("SellingPrice2")
        ~dulla^@204~ QtyAtShop1 = MyBase.Columns("QtyAtSho~dulla^@204~      Me.columnQtyAtShop2 = MyBase.Col~dulla^@204~ op2")
            Me.columnQtyAtStor~dulla^@204~ lumns("QtyAtStore")
            Me.c~dulla^@204~ ntity = MyBase.Columns("TotalQuantity~dulla^@204~    Me.columnReorderLevel = MyBase.Col~dulla^@204~ Level")
            Me.columnShelfNo~dulla^@204~ umns("ShelfNo")
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Private Sub InitClass~dulla^@204~    Me.columnPartNo = New System.Data.~dulla^@204~ artNo", GetType(String), Nothing, Sys~dulla^@204~ ingType.Element)
            MyBase.~dulla^@204~ e.columnPartNo)
            Me.colum~dulla^@204~ = New System.Data.DataColumn("Descrip~dulla^@204~ e(String), Nothing, System.Data.Mappi~dulla^@204~ t)
            MyBase.Columns.Add(Me~dulla^@204~ ption)
            Me.columnPrice = ~dulla^@204~ ta.DataColumn("Price", GetType(String~dulla^@204~ ystem.Data.MappingType.Element)
    ~dulla^@204~ e.Columns.Add(Me.columnPrice)
      ~dulla^@204~ mnSellingPrice1 = New System.Data.Dat~dulla^@204~ ingPrice1", GetType(String), Nothing,~dulla^@204~ MappingType.Element)
            MyB~dulla^@204~ dd(Me.columnSellingPrice1)
         ~dulla^@204~ ellingPrice2 = New System.Data.DataCo~dulla^@204~ Price2", GetType(String), Nothing, Sy~dulla^@204~ pingType.Element)
            MyBase~dulla^@204~ Me.columnSellingPrice2)
            ~dulla^@204~ tShop1 = New System.Data.DataColumn("~dulla^@204~ GetType(String), Nothing, System.Data~dulla^@204~ Element)
            MyBase.Columns.~dulla^@204~ QtyAtShop1)
            Me.columnQty~dulla^@204~  System.Data.DataColumn("QtyAtShop2",~dulla^@204~ ng), Nothing, System.Data.MappingType~dulla^@204~           MyBase.Columns.Add(Me.colum~dulla^@204~ 
            Me.columnQtyAtStore = Ne~dulla^@204~ .DataColumn("QtyAtStore", GetType(Str~dulla^@204~ , System.Data.MappingType.Element)
 ~dulla^@204~ Base.Columns.Add(Me.columnQtyAtStore)~dulla^@204~  Me.columnTotalQuantity = New System.~dulla^@204~ mn("TotalQuantity", GetType(String), ~dulla^@204~ em.Data.MappingType.Element)
       ~dulla^@204~ olumns.Add(Me.columnTotalQuantity)
 ~dulla^@204~ .columnReorderLevel = New System.Data~dulla^@204~ ReorderLevel", GetType(String), Nothi~dulla^@204~ ta.MappingType.Element)
            ~dulla^@204~ s.Add(Me.columnReorderLevel)
       ~dulla^@204~ nShelfNo = New System.Data.DataColumn~dulla^@204~ etType(String), Nothing, System.Data.~dulla^@204~ lement)
            MyBase.Columns.A~dulla^@204~ helfNo)
            Me.Constraints.A~dulla^@204~ .Data.UniqueConstraint("Constraint1",~dulla^@204~ ata.DataColumn() {Me.columnPartNo}, t~dulla^@204~       Me.columnPartNo.AllowDBNull = f~dulla^@204~      Me.columnPartNo.Unique = true
 ~dulla^@204~ .columnPartNo.MaxLength = 20
       ~dulla^@204~ nDescription.AllowDBNull = false
   ~dulla^@204~ olumnDescription.MaxLength = 20
    ~dulla^@204~ lumnPrice.MaxLength = 53
           ~dulla^@204~ lingPrice1.MaxLength = 53
          ~dulla^@204~ llingPrice2.MaxLength = 53
         ~dulla^@204~ tyAtShop1.MaxLength = 10
           ~dulla^@204~ AtShop2.MaxLength = 10
            M~dulla^@204~ Store.MaxLength = 10
            Me.~dulla^@204~ antity.MaxLength = 10
            Me~dulla^@204~ rLevel.MaxLength = 10
            Me~dulla^@204~ o.MaxLength = 20
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Function NewP~dulla^@204~ As ProductsRow
            Return CT~dulla^@204~ ,ProductsRow)
        End Function
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Protected Override~dulla^@204~ wRowFromBuilder(ByVal builder As Syst~dulla^@204~ owBuilder) As System.Data.DataRow
  ~dulla^@204~ urn New ProductsRow(builder)
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pro~dulla^@204~ des Function GetRowType() As System.T~dulla^@204~     Return GetType(ProductsRow)
    ~dulla^@204~ ion
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ rrides Sub OnRowChanged(ByVal e As Sy~dulla^@204~ aRowChangeEventArgs)
            MyB~dulla^@204~ ged(e)
            If (Not (Me.Produ~dulla^@204~ Event) Is Nothing) Then
            ~dulla^@204~ t ProductsRowChanged(Me, New Products~dulla^@204~ t(CType(e.Row,ProductsRow), e.Action)~dulla^@204~   End If
        End Sub
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Protected Overrides Sub OnRo~dulla^@204~ al e As System.Data.DataRowChangeEven~dulla^@204~        MyBase.OnRowChanging(e)
     ~dulla^@204~ t (Me.ProductsRowChangingEvent) Is No~dulla^@204~                 RaiseEvent ProductsRo~dulla^@204~  New ProductsRowChangeEvent(CType(e.R~dulla^@204~ w), e.Action))
            End If
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pr~dulla^@204~ ides Sub OnRowDeleted(ByVal e As Syst~dulla^@204~ owChangeEventArgs)
            MyBas~dulla^@204~ d(e)
            If (Not (Me.Product~dulla^@204~ ent) Is Nothing) Then
              ~dulla^@204~ ProductsRowDeleted(Me, New ProductsRo~dulla^@204~ CType(e.Row,ProductsRow), e.Action))~dulla^@204~ End If
        End Sub
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Protected Overrides Sub OnRowD~dulla^@204~  e As System.Data.DataRowChangeEventA~dulla^@204~      MyBase.OnRowDeleting(e)
       ~dulla^@204~ (Me.ProductsRowDeletingEvent) Is Noth~dulla^@204~               RaiseEvent ProductsRowD~dulla^@204~ ew ProductsRowChangeEvent(CType(e.Row~dulla^@204~ , e.Action))
            End If
   ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ ProductsRow(ByVal row As ProductsRow)
            Me.Rows.Remove(row)
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public S~dulla^@204~ n GetTypedTableSchema(ByVal xs As Sys~dulla^@204~ a.XmlSchemaSet) As System.Xml.Schema.~dulla^@204~ lexType
            Dim type As Syst~dulla^@204~ .XmlSchemaComplexType = New System.Xm~dulla^@204~ chemaComplexType
            Dim seq~dulla^@204~ em.Xml.Schema.XmlSchemaSequence = New~dulla^@204~ chema.XmlSchemaSequence
            ~dulla^@204~ ductsDataSet = New ProductsDataSet
 ~dulla^@204~ .Add(ds.GetSchemaSerializable)
     ~dulla^@204~ y1 As System.Xml.Schema.XmlSchemaAny ~dulla^@204~ Xml.Schema.XmlSchemaAny
            ~dulla^@204~ e = "http://www.w3.org/2001/XMLSchema~dulla^@204~   any1.MinOccurs = New Decimal(0)
  ~dulla^@204~ 1.MaxOccurs = Decimal.MaxValue
     ~dulla^@204~ rocessContents = System.Xml.Schema.Xm~dulla^@204~ tProcessing.Lax
            sequence~dulla^@204~ y1)
            Dim any2 As System.X~dulla^@204~ SchemaAny = New System.Xml.Schema.Xml~dulla^@204~           any2.Namespace = "urn:schem~dulla^@204~ com:xml-diffgram-v1"
            any~dulla^@204~  New Decimal(1)
            any2.Pro~dulla^@204~ = System.Xml.Schema.XmlSchemaContentP~dulla^@204~ 
            sequence.Items.Add(any2~dulla^@204~   Dim attribute1 As System.Xml.Schema~dulla^@204~ ribute = New System.Xml.Schema.XmlSch~dulla^@204~ 
            attribute1.Name = "names~dulla^@204~       attribute1.FixedValue = ds.Name~dulla^@204~       type.Attributes.Add(attribute1)~dulla^@204~  Dim attribute2 As System.Xml.Schema.~dulla^@204~ ibute = New System.Xml.Schema.XmlSche~dulla^@204~             attribute2.Name = "tableT~dulla^@204~          attribute2.FixedValue = "Pro~dulla^@204~ e"
            type.Attributes.Add(a~dulla^@204~            type.Particle = sequence
~dulla^@204~ eturn type
        End Function
   ~dulla^@204~    
    <System.CodeDom.Compiler.Gen~dulla^@204~ ribute("System.Data.Design.TypedDataS~dulla^@204~  "2.0.0.0")>  _
    Partial Public C~dulla^@204~ Row
        Inherits System.Data.Dat~dulla^@204~  
        Private tableProducts As P~dulla^@204~ ble
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ w(ByVal rb As System.Data.DataRowBuil~dulla^@204~      MyBase.New(rb)
            Me.t~dulla^@204~ = CType(Me.Table,ProductsDataTable)
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y PartNo() As String
            Get~dulla^@204~      Return CType(Me(Me.tableProducts~dulla^@204~ ),String)
            End Get
     ~dulla^@204~                Me(Me.tableProducts.Pa~dulla^@204~  value
            End Set
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ escription() As String
            G~dulla^@204~        Return CType(Me(Me.tableProduc~dulla^@204~ nColumn),String)
            End Get~dulla^@204~  Set
                Me(Me.tableProd~dulla^@204~ ionColumn) = value
            End S~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Property Price() As String
       ~dulla^@204~              Try 
                  ~dulla^@204~ e(Me(Me.tableProducts.PriceColumn),St~dulla^@204~           Catch e As System.InvalidCa~dulla^@204~                     Throw New System.~dulla^@204~ pingException("The value for column '~dulla^@204~ le 'Products' is DBNull.", e)
      ~dulla^@204~  Try
            End Get
          ~dulla^@204~           Me(Me.tableProducts.PriceCo~dulla^@204~ 
            End Set
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Pro~dulla^@204~ Price1() As String
            Get
~dulla^@204~    Try 
                    Return C~dulla^@204~ bleProducts.SellingPrice1Column),Stri~dulla^@204~         Catch e As System.InvalidCast~dulla^@204~                   Throw New System.Da~dulla^@204~ ngException("The value for column 'Se~dulla^@204~ in table 'Products' is DBNull.", e)
~dulla^@204~    End Try
            End Get
    ~dulla^@204~                 Me(Me.tableProducts.S~dulla^@204~ olumn) = value
            End Set
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ operty SellingPrice2() As String
   ~dulla^@204~ 
                Try 
              ~dulla^@204~ CType(Me(Me.tableProducts.SellingPric~dulla^@204~ ing)
                Catch e As Syst~dulla^@204~ tException
                    Throw~dulla^@204~ ata.StrongTypingException("The value ~dulla^@204~ ellingPrice2' in table 'Products' is ~dulla^@204~ 
                End Try
           ~dulla^@204~          Set
                Me(Me.t~dulla^@204~ SellingPrice2Column) = value
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Property QtyAtShop1() As ~dulla^@204~        Get
                Try 
   ~dulla^@204~     Return CType(Me(Me.tableProducts.~dulla^@204~ umn),String)
                Catch e~dulla^@204~ validCastException
                 ~dulla^@204~ System.Data.StrongTypingException("Th~dulla^@204~ olumn 'QtyAtShop1' in table 'Products~dulla^@204~ , e)
                End Try
      ~dulla^@204~ 
            Set
                Me~dulla^@204~ ucts.QtyAtShop1Column) = value
     ~dulla^@204~ t
        End Property
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Property QtyAtShop2() A~dulla^@204~          Get
                Try 
 ~dulla^@204~       Return CType(Me(Me.tableProduct~dulla^@204~ olumn),String)
                Catch~dulla^@204~ InvalidCastException
               ~dulla^@204~ w System.Data.StrongTypingException("~dulla^@204~  column 'QtyAtShop2' in table 'Produc~dulla^@204~ .", e)
                End Try
    ~dulla^@204~ et
            Set
                ~dulla^@204~ oducts.QtyAtShop2Column) = value
   ~dulla^@204~ Set
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Property QtyAtStore()~dulla^@204~            Get
                Try ~dulla^@204~         Return CType(Me(Me.tableProdu~dulla^@204~ eColumn),String)
                Cat~dulla^@204~ m.InvalidCastException
             ~dulla^@204~ New System.Data.StrongTypingException~dulla^@204~ or column 'QtyAtStore' in table 'Prod~dulla^@204~ ll.", e)
                End Try
  ~dulla^@204~  Get
            Set
              ~dulla^@204~ Products.QtyAtStoreColumn) = value
 ~dulla^@204~ d Set
        End Property
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Property TotalQuant~dulla^@204~ ng
            Get
                ~dulla^@204~              Return CType(Me(Me.table~dulla^@204~ lQuantityColumn),String)
           ~dulla^@204~ As System.InvalidCastException
     ~dulla^@204~   Throw New System.Data.StrongTypingE~dulla^@204~  value for column 'TotalQuantity' in ~dulla^@204~ ts' is DBNull.", e)
                ~dulla^@204~         End Get
            Set
   ~dulla^@204~ Me(Me.tableProducts.TotalQuantityColu~dulla^@204~             End Set
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Prope~dulla^@204~ vel() As String
            Get
   ~dulla^@204~ Try 
                    Return CTyp~dulla^@204~ Products.ReorderLevelColumn),String)~dulla^@204~     Catch e As System.InvalidCastExce~dulla^@204~               Throw New System.Data.S~dulla^@204~ ception("The value for column 'Reorde~dulla^@204~ ble 'Products' is DBNull.", e)
     ~dulla^@204~ d Try
            End Get
         ~dulla^@204~            Me(Me.tableProducts.Reorde~dulla^@204~  = value
            End Set
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  ShelfNo() As String
            Get~dulla^@204~      Try 
                    Return~dulla^@204~ tableProducts.ShelfNoColumn),String)
                Catch e As System.Invalid~dulla^@204~ 
                    Throw New Syste~dulla^@204~ TypingException("The value for column~dulla^@204~  table 'Products' is DBNull.", e)
  ~dulla^@204~  End Try
            End Get
      ~dulla^@204~               Me(Me.tableProducts.She~dulla^@204~  value
            End Set
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ sPriceNull() As Boolean
            ~dulla^@204~ ull(Me.tableProducts.PriceColumn)
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ SetPriceNull()
            Me(Me.tab~dulla^@204~ iceColumn) = System.Convert.DBNull
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  IsSellingPrice1Null() As Boolean
  ~dulla^@204~ urn Me.IsNull(Me.tableProducts.Sellin~dulla^@204~ )
        End Function
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Sub SetSellingPrice1Nul~dulla^@204~     Me(Me.tableProducts.SellingPrice1~dulla^@204~ tem.Convert.DBNull
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Function Is~dulla^@204~ Null() As Boolean
            Return~dulla^@204~ .tableProducts.SellingPrice2Column)
~dulla^@204~ unction
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ b SetSellingPrice2Null()
           ~dulla^@204~ roducts.SellingPrice2Column) = System~dulla^@204~ ll
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Function IsQtyAtShop1Null()~dulla^@204~             Return Me.IsNull(Me.table~dulla^@204~ tShop1Column)
        End Function
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Sub SetQtyA~dulla^@204~ 
            Me(Me.tableProducts.QtyA~dulla^@204~  = System.Convert.DBNull
        End~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Funct~dulla^@204~ op2Null() As Boolean
            Ret~dulla^@204~ (Me.tableProducts.QtyAtShop2Column)
~dulla^@204~ unction
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ b SetQtyAtShop2Null()
            Me~dulla^@204~ ucts.QtyAtShop2Column) = System.Conve~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Function IsQtyAtStoreNull() As Bo~dulla^@204~       Return Me.IsNull(Me.tableProduc~dulla^@204~ Column)
        End Function
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Sub SetQtyAtStore~dulla^@204~        Me(Me.tableProducts.QtyAtStore~dulla^@204~ tem.Convert.DBNull
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Function Is~dulla^@204~ Null() As Boolean
            Return~dulla^@204~ .tableProducts.TotalQuantityColumn)
~dulla^@204~ unction
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ b SetTotalQuantityNull()
           ~dulla^@204~ roducts.TotalQuantityColumn) = System~dulla^@204~ ll
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Function IsReorderLevelNull~dulla^@204~ 
            Return Me.IsNull(Me.tab~dulla^@204~ orderLevelColumn)
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Sub Set~dulla^@204~ ull()
            Me(Me.tableProduct~dulla^@204~ lColumn) = System.Convert.DBNull
   ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ sShelfNoNull() As Boolean
          ~dulla^@204~ sNull(Me.tableProducts.ShelfNoColumn)~dulla^@204~  Function
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Sub SetShelfNoNull()
            Me(~dulla^@204~ cts.ShelfNoColumn) = System.Convert.D~dulla^@204~   End Sub
    End Class
    
    <~dulla^@204~ m.Compiler.GeneratedCodeAttribute("Sy~dulla^@204~ ign.TypedDataSetGenerator", "2.0.0.0"~dulla^@204~ blic Class ProductsRowChangeEvent
  ~dulla^@204~ s System.EventArgs
        
       ~dulla^@204~ tRow As ProductsRow
        
      ~dulla^@204~ ntAction As System.Data.DataRowAction~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Sub New(B~dulla^@204~ roductsRow, ByVal action As System.Da~dulla^@204~ ion)
            MyBase.New
       ~dulla^@204~ Row = row
            Me.eventAction~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic ReadOnly Property Row() As Produc~dulla^@204~       Get
                Return Me.~dulla^@204~          End Get
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public ReadOnly~dulla^@204~ ion() As System.Data.DataRowAction
 ~dulla^@204~ t
                Return Me.eventAct~dulla^@204~     End Get
        End Property
  ~dulla^@204~ End Class

Namespace ProductsDataSe~dulla^@204~ s
    
    <System.CodeDom.Compiler~dulla^@204~ eAttribute("System.Data.Design.TypedD~dulla^@204~ or", "2.0.0.0"),  _
     System.Comp~dulla^@204~ signerCategoryAttribute("code"),  _
~dulla^@204~ omponentModel.ToolboxItem(true),  _
~dulla^@204~ omponentModel.DataObjectAttribute(tru~dulla^@204~ System.ComponentModel.DesignerAttribu~dulla^@204~ .VSDesigner.DataSource.Design.TableAd~dulla^@204~ , Microsoft.VSDesigner"& _ 
        ~dulla^@204~ 0.0.0, Culture=neutral, PublicKeyToke~dulla^@204~ 50a3a"),  _
     System.ComponentMod~dulla^@204~ pKeywordAttribute("vs.data.TableAdapt~dulla^@204~  Partial Public Class ProductsTableAd~dulla^@204~   Inherits System.ComponentModel.Comp~dulla^@204~   
        Private WithEvents _adapt~dulla^@204~ Data.SqlClient.SqlDataAdapter
      ~dulla^@204~ rivate _connection As System.Data.Sql~dulla^@204~ nection
        
        Private _c~dulla^@204~ ion() As System.Data.SqlClient.SqlCom~dulla^@204~  
        Private _clearBeforeFill A~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~           MyBase.New
            Me.~dulla^@204~ ll = true
        End Sub
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Private ReadOnly Property A~dulla^@204~ ystem.Data.SqlClient.SqlDataAdapter
~dulla^@204~ et
                If (Me._adapter I~dulla^@204~ en
                    Me.InitAdapte~dulla^@204~       End If
                Return ~dulla^@204~             End Get
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Friend Prope~dulla^@204~ n() As System.Data.SqlClient.SqlConne~dulla^@204~       Get
                If (Me._co~dulla^@204~ othing) Then
                    Me.~dulla^@204~ n
                End If
          ~dulla^@204~ Me._connection
            End Get
~dulla^@204~ et
                Me._connection = ~dulla^@204~           If (Not (Me.Adapter.InsertC~dulla^@204~ thing) Then
                    Me.A~dulla^@204~ Command.Connection = value
         ~dulla^@204~ 
                If (Not (Me.Adapter~dulla^@204~ d) Is Nothing) Then
                ~dulla^@204~ r.DeleteCommand.Connection = value
 ~dulla^@204~   End If
                If (Not (Me~dulla^@204~ teCommand) Is Nothing) Then
        ~dulla^@204~ e.Adapter.UpdateCommand.Connection = ~dulla^@204~           End If
                Dim~dulla^@204~  = 0
                Do While (i < M~dulla^@204~ ection.Length)
                    I~dulla^@204~ mmandCollection(i)) Is Nothing) Then~dulla^@204~             CType(Me.CommandCollectio~dulla^@204~ ata.SqlClient.SqlCommand).Connection ~dulla^@204~                 End If
             ~dulla^@204~  + 1)
                Loop
        ~dulla^@204~         End Property
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Proper~dulla^@204~ lection() As System.Data.SqlClient.Sq~dulla^@204~            Get
                If (M~dulla^@204~ lection Is Nothing) Then
           ~dulla^@204~ nitCommandCollection
               ~dulla^@204~             Return Me._commandCollect~dulla^@204~     End Get
        End Property
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Property Clea~dulla^@204~  As Boolean
            Get
       ~dulla^@204~ rn Me._clearBeforeFill
            E~dulla^@204~        Set
                Me._clear~dulla^@204~ value
            End Set
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Priva~dulla^@204~ apter()
            Me._adapter = Ne~dulla^@204~ .SqlClient.SqlDataAdapter
          ~dulla^@204~ pping As System.Data.Common.DataTable~dulla^@204~  System.Data.Common.DataTableMapping~dulla^@204~ tableMapping.SourceTable = "Table"
 ~dulla^@204~ bleMapping.DataSetTable = "Products"~dulla^@204~ tableMapping.ColumnMappings.Add("Part~dulla^@204~ )
            tableMapping.ColumnMap~dulla^@204~ scription", "Description")
         ~dulla^@204~ ng.ColumnMappings.Add("Price", "Price~dulla^@204~    tableMapping.ColumnMappings.Add("S~dulla^@204~ , "SellingPrice1")
            table~dulla^@204~ nMappings.Add("SellingPrice2", "Selli~dulla^@204~            tableMapping.ColumnMapping~dulla^@204~ hop1", "QtyAtShop1")
            tab~dulla^@204~ umnMappings.Add("QtyAtShop2", "QtyAtS~dulla^@204~        tableMapping.ColumnMappings.Ad~dulla^@204~ ", "QtyAtStore")
            tableMa~dulla^@204~ appings.Add("TotalQuantity", "TotalQu~dulla^@204~          tableMapping.ColumnMappings.~dulla^@204~ evel", "ReorderLevel")
            t~dulla^@204~ olumnMappings.Add("ShelfNo", "ShelfNo~dulla^@204~    Me._adapter.TableMappings.Add(tabl~dulla^@204~           Me._adapter.DeleteCommand =~dulla^@204~ ata.SqlClient.SqlCommand
           ~dulla^@204~ DeleteCommand.Connection = Me.Connect~dulla^@204~     Me._adapter.DeleteCommand.Command~dulla^@204~ E FROM [dbo].[Products] WHERE (([Part~dulla^@204~ al_PartNo) AND ([Descripti"& _ 
    ~dulla^@204~ on] = @Original_Description) AND ((@I~dulla^@204~  1 AND [Price] IS NULL) OR ([P"& _ 
~dulla^@204~    "rice] = @Original_Price)) AND ((@~dulla^@204~ gPrice1 = 1 AND [SellingPrice1] IS"& ~dulla^@204~        " NULL) OR ([SellingPrice1] = ~dulla^@204~ lingPrice1)) AND ((@IsNull_SellingPri~dulla^@204~            "e2 = 1 AND [SellingPrice2~dulla^@204~  ([SellingPrice2] = @Original_Selling~dulla^@204~                "2)) AND ((@IsNull_Qty~dulla^@204~ ND [QtyAtShop1] IS NULL) OR ([QtyAtSh~dulla^@204~  
                "riginal_QtyAtShop~dulla^@204~ Null_QtyAtShop2 = 1 AND [QtyAtShop2] ~dulla^@204~ "& _ 
                "[QtyAtShop2] ~dulla^@204~ tyAtShop2)) AND ((@IsNull_QtyAtStore ~dulla^@204~ tSto"& _ 
                "re] IS NU~dulla^@204~ tStore] = @Original_QtyAtStore)) AND ~dulla^@204~ alQuanti"& _ 
                "ty = ~dulla^@204~ uantity] IS NULL) OR ([TotalQuantity]~dulla^@204~ TotalQuantit"& _ 
                "y~dulla^@204~ ull_ReorderLevel = 1 AND [ReorderLeve~dulla^@204~ R ([ReorderLevel"& _ 
              ~dulla^@204~ nal_ReorderLevel)) AND ((@IsNull_Shel~dulla^@204~ ShelfNo] IS NULL) OR"& _ 
          ~dulla^@204~ lfNo] = @Original_ShelfNo)))"
      ~dulla^@204~ pter.DeleteCommand.CommandType = Syst~dulla^@204~ ndType.Text
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Original_PartNo", System.Data.~dulla^@204~ rChar, 0, System.Data.ParameterDirect~dulla^@204~  0, "PartNo", System.Data.DataRowVers~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.DeleteCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@Original_Des~dulla^@204~ stem.Data.SqlDbType.[Char], 0, System~dulla^@204~ erDirection.Input, 0, 0, "Description~dulla^@204~ a.DataRowVersion.Original, false, Not~dulla^@204~  ""))
            Me._adapter.Delete~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @IsNull_Price", System.Data.SqlDbType~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ ystem.Data.DataRowVersion.Original, t~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Original_Price", System.Data~dulla^@204~ har], 0, System.Data.ParameterDirecti~dulla^@204~ 0, "Price", System.Data.DataRowVersio~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.DeleteCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@IsNull_Selling~dulla^@204~ em.Data.SqlDbType.Int, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "SellingPrice1", ~dulla^@204~ ataRowVersion.Original, true, Nothing~dulla^@204~ )
            Me._adapter.DeleteComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ginal_SellingPrice1", System.Data.Sql~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ SellingPrice1", System.Data.DataRowVe~dulla^@204~ l, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.DeleteCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@IsNull_Sel~dulla^@204~ System.Data.SqlDbType.Int, 0, System.~dulla^@204~ rDirection.Input, 0, 0, "SellingPrice~dulla^@204~ ta.DataRowVersion.Original, true, Not~dulla^@204~  ""))
            Me._adapter.Delete~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @Original_SellingPrice2", System.Data~dulla^@204~ har], 0, System.Data.ParameterDirecti~dulla^@204~ 0, "SellingPrice2", System.Data.DataR~dulla^@204~ ginal, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.DeleteCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@IsNull~dulla^@204~  System.Data.SqlDbType.Int, 0, System~dulla^@204~ erDirection.Input, 0, 0, "QtyAtShop1"~dulla^@204~ .DataRowVersion.Original, true, Nothi~dulla^@204~ "))
            Me._adapter.DeleteCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ riginal_QtyAtShop1", System.Data.SqlD~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ tyAtShop1", System.Data.DataRowVersio~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.DeleteCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@IsNull_QtyAtSh~dulla^@204~ Data.SqlDbType.Int, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "QtyAtShop2", System~dulla^@204~ Version.Original, true, Nothing, "", ~dulla^@204~          Me._adapter.DeleteCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ QtyAtShop2", System.Data.SqlDbType.[C~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ 2", System.Data.DataRowVersion.Origin~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@IsNull_QtyAtStore", Sy~dulla^@204~ DbType.Int, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "QtyAtStore", System.Data.Da~dulla^@204~ Original, true, Nothing, "", "", ""))~dulla^@204~  Me._adapter.DeleteCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Orig~dulla^@204~ re", System.Data.SqlDbType.[Char], 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "QtyA~dulla^@204~ em.Data.DataRowVersion.Original, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@IsNull_TotalQuantity", System.~dulla^@204~ e.Int, 0, System.Data.ParameterDirect~dulla^@204~  0, "TotalQuantity", System.Data.Data~dulla^@204~ iginal, true, Nothing, "", "", ""))
~dulla^@204~ e._adapter.DeleteCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@Origin~dulla^@204~ ity", System.Data.SqlDbType.[Char], 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Tot~dulla^@204~ System.Data.DataRowVersion.Original, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@IsNull_ReorderLevel", Syst~dulla^@204~ Type.Int, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "ReorderLevel", System.Data.Da~dulla^@204~ Original, true, Nothing, "", "", ""))~dulla^@204~  Me._adapter.DeleteCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Original_ReorderLevel", System.Data.SqlDbType.~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ Level", System.Data.DataRowVersion.Or~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ eleteCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@IsNull_ShelfNo", S~dulla^@204~ lDbType.Int, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "ShelfNo", System.Data.Data~dulla^@204~ iginal, true, Nothing, "", "", ""))
~dulla^@204~ e._adapter.DeleteCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@Origin~dulla^@204~ System.Data.SqlDbType.NVarChar, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "ShelfNo~dulla^@204~ a.DataRowVersion.Original, false, Not~dulla^@204~  ""))
            Me._adapter.Insert~dulla^@204~  System.Data.SqlClient.SqlCommand
  ~dulla^@204~ _adapter.InsertCommand.Connection = M~dulla^@204~ 
            Me._adapter.InsertComman~dulla^@204~  = "INSERT INTO [dbo].[Products] ([Pa~dulla^@204~ iption], [Price], [SellingPrice1], "&~dulla^@204~         "[SellingPrice2], [QtyAtShop1~dulla^@204~ 2], [QtyAtStore], [TotalQuantity], [R~dulla^@204~             "rderLevel], [ShelfNo]) V~dulla^@204~ o, @Description, @Price, @SellingPric~dulla^@204~                 "ellingPrice2, @QtyAt~dulla^@204~ Shop2, @QtyAtStore, @TotalQuantity, @~dulla^@204~ _ 
                "el, @ShelfNo);"&~dulla^@204~ oft.VisualBasic.ChrW(13)&Global.Micro~dulla^@204~ sic.ChrW(10)&"SELECT PartNo, Descript~dulla^@204~ ellingPrice1, SellingPrice2,"& _ 
  ~dulla^@204~  " QtyAtShop1, QtyAtShop2, QtyAtStore~dulla^@204~ ty, ReorderLevel, ShelfNo FROM P"& _ ~dulla^@204~      "roducts WHERE (PartNo = @PartNo~dulla^@204~    Me._adapter.InsertCommand.CommandT~dulla^@204~ Data.CommandType.Text
            Me~dulla^@204~ ertCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@PartNo", System.Data~dulla^@204~ arChar, 0, System.Data.ParameterDirec~dulla^@204~ , 0, "PartNo", System.Data.DataRowVer~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.InsertCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@Description"~dulla^@204~ .SqlDbType.[Char], 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "Description", System~dulla^@204~ Version.Current, false, Nothing, "", ~dulla^@204~          Me._adapter.InsertCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ ystem.Data.SqlDbType.[Char], 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "Price", Sy~dulla^@204~ aRowVersion.Current, false, Nothing, ~dulla^@204~ 
            Me._adapter.InsertComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ ngPrice1", System.Data.SqlDbType.[Cha~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ e1", System.Data.DataRowVersion.Curre~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ tCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@SellingPrice2", System~dulla^@204~ pe.[Char], 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "SellingPrice2", System.Data.~dulla^@204~ n.Current, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.InsertCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Qt~dulla^@204~ stem.Data.SqlDbType.[Char], 0, System~dulla^@204~ erDirection.Input, 0, 0, "QtyAtShop1"~dulla^@204~ .DataRowVersion.Current, false, Nothi~dulla^@204~ "))
            Me._adapter.InsertCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ tyAtShop2", System.Data.SqlDbType.[Ch~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ ", System.Data.DataRowVersion.Current~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@QtyAtStore", System.Data~dulla^@204~ har], 0, System.Data.ParameterDirecti~dulla^@204~ 0, "QtyAtStore", System.Data.DataRowV~dulla^@204~ t, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.InsertCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@TotalQuant~dulla^@204~ Data.SqlDbType.[Char], 0, System.Data~dulla^@204~ ection.Input, 0, 0, "TotalQuantity", ~dulla^@204~ ataRowVersion.Current, false, Nothing~dulla^@204~ )
            Me._adapter.InsertComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ rderLevel", System.Data.SqlDbType.[Ch~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ el", System.Data.DataRowVersion.Curre~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ tCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@ShelfNo", System.Data.~dulla^@204~ rChar, 0, System.Data.ParameterDirect~dulla^@204~  0, "ShelfNo", System.Data.DataRowVer~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.UpdateCommand = New System.Data.~dulla^@204~ Command
            Me._adapter.Upda~dulla^@204~ nection = Me.Connection
            ~dulla^@204~ pdateCommand.CommandText = "UPDATE [d~dulla^@204~ ] SET [PartNo] = @PartNo, [Descriptio~dulla^@204~ tion, [Pr"& _ 
                "ice]~dulla^@204~ ellingPrice1] = @SellingPrice1, [Sell~dulla^@204~ @SellingPrice"& _ 
                "~dulla^@204~ 1] = @QtyAtShop1, [QtyAtShop2] = @Qty~dulla^@204~ AtStore] = @QtyAt"& _ 
             ~dulla^@204~ otalQuantity] = @TotalQuantity, [Reor~dulla^@204~ ReorderLevel, [ShelfN"& _ 
         ~dulla^@204~ @ShelfNo WHERE (([PartNo] = @Original~dulla^@204~ ([Description] = @Origina"& _ 
     ~dulla^@204~ _Description) AND ((@IsNull_Price = 1~dulla^@204~ IS NULL) OR ([Price] = @Origi"& _ 
 ~dulla^@204~   "nal_Price)) AND ((@IsNull_SellingP~dulla^@204~  [SellingPrice1] IS NULL) OR ([Se"& _~dulla^@204~       "llingPrice1] = @Original_Selli~dulla^@204~ D ((@IsNull_SellingPrice2 = 1 AND [Se~dulla^@204~           "llingPrice2] IS NULL) OR (~dulla^@204~ 2] = @Original_SellingPrice2)) AND ((~dulla^@204~               "ull_QtyAtShop1 = 1 AND~dulla^@204~  IS NULL) OR ([QtyAtShop1] = @Origina~dulla^@204~ 
                "hop1)) AND ((@IsNu~dulla^@204~  = 1 AND [QtyAtShop2] IS NULL) OR ([Q~dulla^@204~ & _ 
                " @Original_Qty~dulla^@204~  ((@IsNull_QtyAtStore = 1 AND [QtyAtS~dulla^@204~ ) O"& _ 
                "R ([QtyAtS~dulla^@204~ inal_QtyAtStore)) AND ((@IsNull_Total~dulla^@204~ AND [To"& _ 
                "talQua~dulla^@204~ L) OR ([TotalQuantity] = @Original_To~dulla^@204~  AND ((@IsN"& _ 
                "ul~dulla^@204~ l = 1 AND [ReorderLevel] IS NULL) OR ~dulla^@204~ l] = @Original_"& _ 
               ~dulla^@204~ l)) AND ((@IsNull_ShelfNo = 1 AND [Sh~dulla^@204~ L) OR ([ShelfNo] = "& _ 
           ~dulla^@204~ al_ShelfNo)));"&Global.Microsoft.Visu~dulla^@204~ 13)&Global.Microsoft.VisualBasic.ChrW~dulla^@204~ PartNo, Description, Price, SellingPr~dulla^@204~ "& _ 
                "Price2, QtyAt~dulla^@204~ hop2, QtyAtStore, TotalQuantity, Reor~dulla^@204~ lfNo"& _ 
                " FROM Pro~dulla^@204~ PartNo = @PartNo)"
            Me._a~dulla^@204~ Command.CommandType = System.Data.Com~dulla^@204~ 
            Me._adapter.UpdateComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ No", System.Data.SqlDbType.NVarChar, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "Pa~dulla^@204~ .Data.DataRowVersion.Current, false, ~dulla^@204~ "", ""))
            Me._adapter.Upd~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@Description", System.Data.SqlDbTy~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ ription", System.Data.DataRowVersion.~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ UpdateCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@Price", System.Da~dulla^@204~ [Char], 0, System.Data.ParameterDirec~dulla^@204~ , 0, "Price", System.Data.DataRowVers~dulla^@204~ false, Nothing, "", "", ""))
       ~dulla^@204~ ter.UpdateCommand.Parameters.Add(New ~dulla^@204~ qlClient.SqlParameter("@SellingPrice1~dulla^@204~ a.SqlDbType.[Char], 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "SellingPrice1", Sys~dulla^@204~ RowVersion.Current, false, Nothing, "~dulla^@204~             Me._adapter.UpdateCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ gPrice2", System.Data.SqlDbType.[Char~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ 2", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
         ~dulla^@204~ r.UpdateCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@QtyAtShop1", Sy~dulla^@204~ DbType.[Char], 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "QtyAtShop1", System.Data~dulla^@204~ on.Current, false, Nothing, "", "", "~dulla^@204~     Me._adapter.UpdateCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@Q~dulla^@204~ ystem.Data.SqlDbType.[Char], 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "QtyAtShop2~dulla^@204~ a.DataRowVersion.Current, false, Noth~dulla^@204~ ""))
            Me._adapter.UpdateC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ QtyAtStore", System.Data.SqlDbType.[C~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ e", System.Data.DataRowVersion.Curren~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@TotalQuantity", System.~dulla^@204~ e.[Char], 0, System.Data.ParameterDir~dulla^@204~  0, 0, "TotalQuantity", System.Data.D~dulla^@204~ .Current, false, Nothing, "", "", "")~dulla^@204~   Me._adapter.UpdateCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@Reo~dulla^@204~ ystem.Data.SqlDbType.[Char], 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "ReorderLev~dulla^@204~ ata.DataRowVersion.Current, false, No~dulla^@204~ , ""))
            Me._adapter.Updat~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@ShelfNo", System.Data.SqlDbType.NVa~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ , System.Data.DataRowVersion.Current,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@Original_PartNo", System.~dulla^@204~ e.NVarChar, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "PartNo", System.Data.DataRo~dulla^@204~ inal, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.UpdateCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Origina~dulla^@204~ ", System.Data.SqlDbType.[Char], 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "Descri~dulla^@204~ m.Data.DataRowVersion.Original, false~dulla^@204~ , "", ""))
            Me._adapter.U~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@IsNull_Price", System.Data.SqlD~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ e", System.Data.DataRowVersion.Origin~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@Original_Price", System~dulla^@204~ pe.[Char], 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "Price", System.Data.DataRowV~dulla^@204~ al, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.UpdateCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@IsNull_Se~dulla^@204~  System.Data.SqlDbType.Int, 0, System~dulla^@204~ erDirection.Input, 0, 0, "SellingPric~dulla^@204~ ata.DataRowVersion.Original, true, No~dulla^@204~ , ""))
            Me._adapter.Updat~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@Original_SellingPrice1", System.Dat~dulla^@204~ Char], 0, System.Data.ParameterDirect~dulla^@204~  0, "SellingPrice1", System.Data.Data~dulla^@204~ iginal, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.UpdateCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@IsNul~dulla^@204~ e2", System.Data.SqlDbType.Int, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "Selling~dulla^@204~ em.Data.DataRowVersion.Original, true~dulla^@204~ , "", ""))
            Me._adapter.U~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@Original_SellingPrice2", System~dulla^@204~ pe.[Char], 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "SellingPrice2", System.Data.~dulla^@204~ n.Original, false, Nothing, "", "", "~dulla^@204~     Me._adapter.UpdateCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@I~dulla^@204~ op1", System.Data.SqlDbType.Int, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "QtyAtS~dulla^@204~ .Data.DataRowVersion.Original, true, ~dulla^@204~ "", ""))
            Me._adapter.Upd~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@Original_QtyAtShop1", System.Data~dulla^@204~ har], 0, System.Data.ParameterDirecti~dulla^@204~ 0, "QtyAtShop1", System.Data.DataRowV~dulla^@204~ al, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.UpdateCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@IsNull_Qt~dulla^@204~ stem.Data.SqlDbType.Int, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "QtyAtShop2", S~dulla^@204~ taRowVersion.Original, true, Nothing,~dulla^@204~ 
            Me._adapter.UpdateComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ inal_QtyAtShop2", System.Data.SqlDbTy~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ tShop2", System.Data.DataRowVersion.O~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ UpdateCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@IsNull_QtyAtStore~dulla^@204~ a.SqlDbType.Int, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "QtyAtStore", System.Da~dulla^@204~ sion.Original, true, Nothing, "", "",~dulla^@204~       Me._adapter.UpdateCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ AtStore", System.Data.SqlDbType.[Char~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@IsNull_TotalQuantity", Sy~dulla^@204~ DbType.Int, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "TotalQuantity", System.Data~dulla^@204~ on.Original, true, Nothing, "", "", "~dulla^@204~     Me._adapter.UpdateCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@O~dulla^@204~ Quantity", System.Data.SqlDbType.[Cha~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ ty", System.Data.DataRowVersion.Origi~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@IsNull_ReorderLevel",~dulla^@204~ SqlDbType.Int, 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "ReorderLevel", System.Da~dulla^@204~ sion.Original, true, Nothing, "", "",~dulla^@204~       Me._adapter.UpdateCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ rderLevel", System.Data.SqlDbType.[Ch~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ el", System.Data.DataRowVersion.Origi~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@IsNull_ShelfNo", Syst~dulla^@204~ Type.Int, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "ShelfNo", System.Data.DataRow~dulla^@204~ nal, true, Nothing, "", "", ""))
   ~dulla^@204~ adapter.UpdateCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Original_~dulla^@204~ tem.Data.SqlDbType.NVarChar, 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "ShelfNo", ~dulla^@204~ ataRowVersion.Original, false, Nothin~dulla^@204~ ))
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Private Sub InitConnection()
    ~dulla^@204~ onnection = New System.Data.SqlClient~dulla^@204~ n
            Me._connection.Connect~dulla^@204~ lobal.InventoryControlSystem.My.MySet~dulla^@204~ .PurchaseInfoConnection
        End ~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Private Sub I~dulla^@204~ lection()
            Me._commandCol~dulla^@204~  System.Data.SqlClient.SqlCommand(0) ~dulla^@204~    Me._commandCollection(0) = New Sys~dulla^@204~ lient.SqlCommand
            Me._com~dulla^@204~ n(0).Connection = Me.Connection
    ~dulla^@204~ ommandCollection(0).CommandText = "SE~dulla^@204~ Description, Price, SellingPrice1, Se~dulla^@204~ QtyAtShop1, QtyA"& _ 
              ~dulla^@204~ yAtStore, TotalQuantity, ReorderLevel~dulla^@204~ M dbo.Products"
            Me._comm~dulla^@204~ (0).CommandType = System.Data.Command~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ stem.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
  ~dulla^@204~ .ComponentModel.DataObjectMethodAttri~dulla^@204~ omponentModel.DataObjectMethodType.Fi~dulla^@204~ 
        Public Overloads Overridabl~dulla^@204~ ll(ByVal dataTable As ProductsDataSet~dulla^@204~ Table) As Integer
            Me.Ada~dulla^@204~ mmand = Me.CommandCollection(0)
    ~dulla^@204~ e.ClearBeforeFill = true) Then
     ~dulla^@204~ taTable.Clear
            End If
  ~dulla^@204~  returnValue As Integer = Me.Adapter.~dulla^@204~ e)
            Return returnValue
 ~dulla^@204~ nction
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute(),  _
     ~dulla^@204~ mponentModel.Design.HelpKeywordAttrib~dulla^@204~ TableAdapter"),  _
         System.C~dulla^@204~ .DataObjectMethodAttribute(System.Com~dulla^@204~ ataObjectMethodType.[Select], true)> ~dulla^@204~ ublic Overloads Overridable Function ~dulla^@204~ ProductsDataSet.ProductsDataTable
  ~dulla^@204~ Adapter.SelectCommand = Me.CommandCol~dulla^@204~            Dim dataTable As ProductsD~dulla^@204~ tsDataTable = New ProductsDataSet.Pro~dulla^@204~ e
            Me.Adapter.Fill(dataTa~dulla^@204~      Return dataTable
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute(),  _
         System.Co~dulla^@204~ Design.HelpKeywordAttribute("vs.data.~dulla^@204~ )>  _
        Public Overloads Overr~dulla^@204~ on Update(ByVal dataTable As Products~dulla^@204~ ctsDataTable) As Integer
           ~dulla^@204~ apter.Update(dataTable)
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute(),  _
         System.~dulla^@204~ l.Design.HelpKeywordAttribute("vs.dat~dulla^@204~ r")>  _
        Public Overloads Ove~dulla^@204~ tion Update(ByVal dataSet As Products~dulla^@204~ nteger
            Return Me.Adapter~dulla^@204~ et, "Products")
        End Function~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute(),  _
         System.Componen~dulla^@204~ .HelpKeywordAttribute("vs.data.TableA~dulla^@204~ 
        Public Overloads Overridable~dulla^@204~ ate(ByVal dataRow As System.Data.Data~dulla^@204~ er
            Return Me.Adapter.Upd~dulla^@204~ m.Data.DataRow() {dataRow})
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute(),  _
         Sys~dulla^@204~ Model.Design.HelpKeywordAttribute("vs~dulla^@204~ apter")>  _
        Public Overloads~dulla^@204~ Function Update(ByVal dataRows() As S~dulla^@204~ taRow) As Integer
            Return~dulla^@204~ pdate(dataRows)
        End Function~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute(),  _
         System.Componen~dulla^@204~ .HelpKeywordAttribute("vs.data.TableA~dulla^@204~ 
         System.ComponentModel.DataO~dulla^@204~ tribute(System.ComponentModel.DataObj~dulla^@204~ .Delete, true)>  _
        Public Ov~dulla^@204~ idable Function Delete(ByVal Original~dulla^@204~ ring, ByVal Original_Description As S~dulla^@204~ Original_Price As String, ByVal Origi~dulla^@204~ ice1 As String, ByVal Original_Sellin~dulla^@204~ ring, ByVal Original_QtyAtShop1 As St~dulla^@204~ riginal_QtyAtShop2 As String, ByVal O~dulla^@204~ Store As String, ByVal Original_Total~dulla^@204~ tring, ByVal Original_ReorderLevel As~dulla^@204~ l Original_ShelfNo As String) As Inte~dulla^@204~     If (Original_PartNo Is Nothing) T~dulla^@204~         Throw New System.ArgumentNull~dulla^@204~ iginal_PartNo")
            Else
  ~dulla^@204~  Me.Adapter.DeleteCommand.Parameters(~dulla^@204~ ype(Original_PartNo,String)
        ~dulla^@204~            If (Original_Description I~dulla^@204~ en
                Throw New System.~dulla^@204~ xception("Original_Description")
   ~dulla^@204~ 
                Me.Adapter.DeleteCo~dulla^@204~ ers(1).Value = CType(Original_Descrip~dulla^@204~ 
            End If
            If (~dulla^@204~ e Is Nothing) Then
                M~dulla^@204~ eteCommand.Parameters(2).Value = CTyp~dulla^@204~                 Me.Adapter.DeleteComm~dulla^@204~ s(3).Value = System.DBNull.Value
   ~dulla^@204~ 
                Me.Adapter.DeleteCo~dulla^@204~ ers(2).Value = CType(0,Object)
     ~dulla^@204~ .Adapter.DeleteCommand.Parameters(3).~dulla^@204~ (Original_Price,String)
            ~dulla^@204~        If (Original_SellingPrice1 Is ~dulla^@204~ 
                Me.Adapter.DeleteCo~dulla^@204~ ers(4).Value = CType(1,Object)
     ~dulla^@204~ .Adapter.DeleteCommand.Parameters(5).~dulla^@204~ m.DBNull.Value
            Else
   ~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(4~dulla^@204~ pe(0,Object)
                Me.Adap~dulla^@204~ mand.Parameters(5).Value = CType(Orig~dulla^@204~ rice1,String)
            End If
  ~dulla^@204~ (Original_SellingPrice2 Is Nothing) T~dulla^@204~         Me.Adapter.DeleteCommand.Para~dulla^@204~ ue = CType(1,Object)
               ~dulla^@204~ eleteCommand.Parameters(7).Value = Sy~dulla^@204~ alue
            Else
             ~dulla^@204~ .DeleteCommand.Parameters(6).Value = ~dulla^@204~ t)
                Me.Adapter.Delete~dulla^@204~ eters(7).Value = CType(Original_Selli~dulla^@204~ ng)
            End If
            ~dulla^@204~ QtyAtShop1 Is Nothing) Then
        ~dulla^@204~ apter.DeleteCommand.Parameters(8).Val~dulla^@204~ Object)
                Me.Adapter.D~dulla^@204~ Parameters(9).Value = System.DBNull.V~dulla^@204~      Else
                Me.Adapter~dulla^@204~ d.Parameters(8).Value = CType(0,Objec~dulla^@204~        Me.Adapter.DeleteCommand.Param~dulla^@204~ e = CType(Original_QtyAtShop1,String)~dulla^@204~  End If
            If (Original_Qty~dulla^@204~ thing) Then
                Me.Adapt~dulla^@204~ and.Parameters(10).Value = CType(1,Ob~dulla^@204~           Me.Adapter.DeleteCommand.Pa~dulla^@204~ Value = System.DBNull.Value
        ~dulla^@204~              Me.Adapter.DeleteCommand~dulla^@204~ 0).Value = CType(0,Object)
         ~dulla^@204~ pter.DeleteCommand.Parameters(11).Val~dulla^@204~ iginal_QtyAtShop2,String)
          ~dulla^@204~          If (Original_QtyAtStore Is N~dulla^@204~ 
                Me.Adapter.DeleteCom~dulla^@204~ rs(12).Value = CType(1,Object)
     ~dulla^@204~ .Adapter.DeleteCommand.Parameters(13)~dulla^@204~ em.DBNull.Value
            Else
  ~dulla^@204~  Me.Adapter.DeleteCommand.Parameters(~dulla^@204~ Type(0,Object)
                Me.Ad~dulla^@204~ ommand.Parameters(13).Value = CType(O~dulla^@204~ Store,String)
            End If
  ~dulla^@204~ (Original_TotalQuantity Is Nothing) T~dulla^@204~         Me.Adapter.DeleteCommand.Para~dulla^@204~ lue = CType(1,Object)
              ~dulla^@204~ DeleteCommand.Parameters(15).Value = ~dulla^@204~ .Value
            Else
           ~dulla^@204~ er.DeleteCommand.Parameters(14).Value~dulla^@204~ ject)
                Me.Adapter.Del~dulla^@204~ rameters(15).Value = CType(Original_T~dulla^@204~ String)
            End If
        ~dulla^@204~ nal_ReorderLevel Is Nothing) Then
  ~dulla^@204~  Me.Adapter.DeleteCommand.Parameters(~dulla^@204~ Type(1,Object)
                Me.Ad~dulla^@204~ ommand.Parameters(17).Value = System.~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(16).Value = CTyp~dulla^@204~                 Me.Adapter.DeleteComm~dulla^@204~ s(17).Value = CType(Original_ReorderL~dulla^@204~ 
            End If
            If (~dulla^@204~ fNo Is Nothing) Then
               ~dulla^@204~ eleteCommand.Parameters(18).Value = C~dulla^@204~ )
                Me.Adapter.DeleteC~dulla^@204~ ters(19).Value = System.DBNull.Value~dulla^@204~ Else
                Me.Adapter.Dele~dulla^@204~ ameters(18).Value = CType(0,Object)
~dulla^@204~    Me.Adapter.DeleteCommand.Parameter~dulla^@204~  CType(Original_ShelfNo,String)
    ~dulla^@204~ f
            Dim previousConnection~dulla^@204~ em.Data.ConnectionState = Me.Adapter.~dulla^@204~ .Connection.State
            If ((M~dulla^@204~ eteCommand.Connection.State And Syste~dulla^@204~ tionState.Open)  _
                 ~dulla^@204~ tem.Data.ConnectionState.Open) Then
~dulla^@204~    Me.Adapter.DeleteCommand.Connectio~dulla^@204~        End If
            Try 
                Dim returnValue As Integer = M~dulla^@204~ eteCommand.ExecuteNonQuery
         ~dulla^@204~  returnValue
            Finally
  ~dulla^@204~  If (previousConnectionState = System~dulla^@204~ ionState.Closed) Then
              ~dulla^@204~ ter.DeleteCommand.Connection.Close
 ~dulla^@204~   End If
            End Try
      ~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute(),  _
         S~dulla^@204~ ntModel.Design.HelpKeywordAttribute("~dulla^@204~ Adapter"),  _
         System.Compon~dulla^@204~ ObjectMethodAttribute(System.Componen~dulla^@204~ jectMethodType.Insert, true)>  _
   ~dulla^@204~ verloads Overridable Function Insert(~dulla^@204~ As String, ByVal Description As Strin~dulla^@204~ e As String, ByVal SellingPrice1 As S~dulla^@204~ SellingPrice2 As String, ByVal QtyAtS~dulla^@204~ g, ByVal QtyAtShop2 As String, ByVal ~dulla^@204~  String, ByVal TotalQuantity As Strin~dulla^@204~ derLevel As String, ByVal ShelfNo As ~dulla^@204~ teger
            If (PartNo Is Noth~dulla^@204~               Throw New System.Argume~dulla^@204~ on("PartNo")
            Else
     ~dulla^@204~ .Adapter.InsertCommand.Parameters(0).~dulla^@204~ (PartNo,String)
            End If
~dulla^@204~ f (Description Is Nothing) Then
    ~dulla^@204~ hrow New System.ArgumentNullException~dulla^@204~ ")
            Else
               ~dulla^@204~ nsertCommand.Parameters(1).Value = CT~dulla^@204~ on,String)
            End If
     ~dulla^@204~ ice Is Nothing) Then
               ~dulla^@204~ nsertCommand.Parameters(2).Value = Sy~dulla^@204~ alue
            Else
             ~dulla^@204~ .InsertCommand.Parameters(2).Value = ~dulla^@204~ tring)
            End If
         ~dulla^@204~ gPrice1 Is Nothing) Then
           ~dulla^@204~ er.InsertCommand.Parameters(3).Value ~dulla^@204~ ll.Value
            Else
         ~dulla^@204~ pter.InsertCommand.Parameters(3).Valu~dulla^@204~ lingPrice1,String)
            End I~dulla^@204~   If (SellingPrice2 Is Nothing) Then~dulla^@204~     Me.Adapter.InsertCommand.Paramete~dulla^@204~  System.DBNull.Value
            Els~dulla^@204~       Me.Adapter.InsertCommand.Parame~dulla^@204~  = CType(SellingPrice2,String)
     ~dulla^@204~ 
            If (QtyAtShop1 Is Nothi~dulla^@204~              Me.Adapter.InsertCommand~dulla^@204~ ).Value = System.DBNull.Value
      ~dulla^@204~                Me.Adapter.InsertComma~dulla^@204~ (5).Value = CType(QtyAtShop1,String)~dulla^@204~ End If
            If (QtyAtShop2 Is~dulla^@204~ n
                Me.Adapter.InsertC~dulla^@204~ ters(6).Value = System.DBNull.Value
~dulla^@204~ lse
                Me.Adapter.Inser~dulla^@204~ meters(6).Value = CType(QtyAtShop2,St~dulla^@204~       End If
            If (QtyAtSt~dulla^@204~ g) Then
                Me.Adapter.I~dulla^@204~ Parameters(7).Value = System.DBNull.V~dulla^@204~      Else
                Me.Adapter~dulla^@204~ d.Parameters(7).Value = CType(QtyAtSt~dulla^@204~             End If
            If (T~dulla^@204~ Is Nothing) Then
                Me.~dulla^@204~ tCommand.Parameters(8).Value = System~dulla^@204~ 
            Else
                M~dulla^@204~ ertCommand.Parameters(8).Value = CTyp~dulla^@204~ ty,String)
            End If
     ~dulla^@204~ orderLevel Is Nothing) Then
        ~dulla^@204~ apter.InsertCommand.Parameters(9).Val~dulla^@204~ BNull.Value
            Else
      ~dulla^@204~ Adapter.InsertCommand.Parameters(9).V~dulla^@204~ ReorderLevel,String)
            End~dulla^@204~     If (ShelfNo Is Nothing) Then
   ~dulla^@204~ Me.Adapter.InsertCommand.Parameters(1~dulla^@204~ stem.DBNull.Value
            Else
~dulla^@204~    Me.Adapter.InsertCommand.Parameter~dulla^@204~  CType(ShelfNo,String)
            E~dulla^@204~       Dim previousConnectionState As ~dulla^@204~ onnectionState = Me.Adapter.InsertCom~dulla^@204~ on.State
            If ((Me.Adapter~dulla^@204~ d.Connection.State And System.Data.Co~dulla^@204~ .Open)  _
                        <>~dulla^@204~ ConnectionState.Open) Then
         ~dulla^@204~ pter.InsertCommand.Connection.Open
 ~dulla^@204~ d If
            Try 
             ~dulla^@204~ Value As Integer = Me.Adapter.InsertC~dulla^@204~ eNonQuery
                Return ret~dulla^@204~          Finally
                If ~dulla^@204~ ectionState = System.Data.ConnectionS~dulla^@204~ Then
                    Me.Adapter.~dulla^@204~ .Connection.Close
                En~dulla^@204~      End Try
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te(),  _
         System.ComponentMo~dulla^@204~ lpKeywordAttribute("vs.data.TableAdap~dulla^@204~        System.ComponentModel.DataObje~dulla^@204~ bute(System.ComponentModel.DataObject~dulla^@204~ date, true)>  _
        Public Overl~dulla^@204~ ble Function Update( _
             ~dulla^@204~ PartNo As String,  _
               ~dulla^@204~ scription As String,  _
            ~dulla^@204~  Price As String,  _
               ~dulla^@204~ llingPrice1 As String,  _
          ~dulla^@204~ al SellingPrice2 As String,  _
     ~dulla^@204~   ByVal QtyAtShop1 As String,  _
   ~dulla^@204~     ByVal QtyAtShop2 As String,  _
 ~dulla^@204~       ByVal QtyAtStore As String,  _~dulla^@204~         ByVal TotalQuantity As String~dulla^@204~              ByVal ReorderLevel As St~dulla^@204~                  ByVal ShelfNo As Str~dulla^@204~                 ByVal Original_PartNo~dulla^@204~ _
                    ByVal Original~dulla^@204~ As String,  _
                    By~dulla^@204~ Price As String,  _
                ~dulla^@204~ ginal_SellingPrice1 As String,  _
  ~dulla^@204~      ByVal Original_SellingPrice2 As ~dulla^@204~                    ByVal Original_Qty~dulla^@204~ ring,  _
                    ByVal O~dulla^@204~ Shop2 As String,  _
                ~dulla^@204~ ginal_QtyAtStore As String,  _
     ~dulla^@204~   ByVal Original_TotalQuantity As Str~dulla^@204~                 ByVal Original_Reorde~dulla^@204~ ing,  _
                    ByVal Or~dulla^@204~ o As String) As Integer
            ~dulla^@204~  Nothing) Then
                Throw~dulla^@204~ rgumentNullException("PartNo")
     ~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(0).Value = CType(PartNo,String)
  ~dulla^@204~  If
            If (Description Is N~dulla^@204~ 
                Throw New System.Arg~dulla^@204~ ption("Description")
            Els~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~  = CType(Description,String)
       ~dulla^@204~             If (Price Is Nothing) The~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~  = System.DBNull.Value
            E~dulla^@204~         Me.Adapter.UpdateCommand.Para~dulla^@204~ ue = CType(Price,String)
           ~dulla^@204~         If (SellingPrice1 Is Nothing)~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ alue = System.DBNull.Value
         ~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ .Value = CType(SellingPrice1,String)~dulla^@204~ End If
            If (SellingPrice2~dulla^@204~ Then
                Me.Adapter.Upda~dulla^@204~ ameters(4).Value = System.DBNull.Valu~dulla^@204~   Else
                Me.Adapter.Up~dulla^@204~ arameters(4).Value = CType(SellingPri~dulla^@204~             End If
            If (Q~dulla^@204~ Nothing) Then
                Me.Ada~dulla^@204~ mmand.Parameters(5).Value = System.DB~dulla^@204~            Else
                Me.A~dulla^@204~ Command.Parameters(5).Value = CType(Q~dulla^@204~ ing)
            End If
           ~dulla^@204~ p2 Is Nothing) Then
                ~dulla^@204~ dateCommand.Parameters(6).Value = Sys~dulla^@204~ lue
            Else
              ~dulla^@204~ UpdateCommand.Parameters(6).Value = C~dulla^@204~ p2,String)
            End If
     ~dulla^@204~ yAtStore Is Nothing) Then
          ~dulla^@204~ ter.UpdateCommand.Parameters(7).Value~dulla^@204~ ull.Value
            Else
        ~dulla^@204~ apter.UpdateCommand.Parameters(7).Val~dulla^@204~ yAtStore,String)
            End If~dulla^@204~ If (TotalQuantity Is Nothing) Then
                Me.Adapter.UpdateCommand.Pa~dulla^@204~ alue = System.DBNull.Value
         ~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ .Value = CType(TotalQuantity,String)~dulla^@204~ End If
            If (ReorderLevel ~dulla^@204~ hen
                Me.Adapter.Updat~dulla^@204~ meters(9).Value = System.DBNull.Value~dulla^@204~  Else
                Me.Adapter.Upd~dulla^@204~ rameters(9).Value = CType(ReorderLeve~dulla^@204~           End If
            If (She~dulla^@204~ ng) Then
                Me.Adapter.~dulla^@204~ .Parameters(10).Value = System.DBNull~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(10).Value = CType(Shel~dulla^@204~             End If
            If (O~dulla^@204~ o Is Nothing) Then
                T~dulla^@204~ em.ArgumentNullException("Original_Pa~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(11).Value = CType(Orig~dulla^@204~ tring)
            End If
         ~dulla^@204~ al_Description Is Nothing) Then
    ~dulla^@204~ hrow New System.ArgumentNullException~dulla^@204~ scription")
            Else
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(12).~dulla^@204~ (Original_Description,String)
      ~dulla^@204~ 
            If (Original_Price Is No~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(13).Value = CType(1,Object)
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(14).~dulla^@204~ m.DBNull.Value
            Else
   ~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(1~dulla^@204~ ype(0,Object)
                Me.Ada~dulla^@204~ mmand.Parameters(14).Value = CType(Or~dulla^@204~ String)
            End If
        ~dulla^@204~ nal_SellingPrice1 Is Nothing) Then
 ~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ CType(1,Object)
                Me.A~dulla^@204~ Command.Parameters(16).Value = System~dulla^@204~ 
            Else
                M~dulla^@204~ ateCommand.Parameters(15).Value = CTy~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(16).Value = CType(Original_Selling~dulla^@204~ )
            End If
            If~dulla^@204~ llingPrice2 Is Nothing) Then
       ~dulla^@204~ dapter.UpdateCommand.Parameters(17).V~dulla^@204~ 1,Object)
                Me.Adapter~dulla^@204~ d.Parameters(18).Value = System.DBNul~dulla^@204~         Else
                Me.Adap~dulla^@204~ mand.Parameters(17).Value = CType(0,O~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ .Value = CType(Original_SellingPrice2~dulla^@204~          End If
            If (Orig~dulla^@204~ p1 Is Nothing) Then
                ~dulla^@204~ dateCommand.Parameters(19).Value = CT~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(20).Value = System.DBNull.Value
~dulla^@204~ lse
                Me.Adapter.Updat~dulla^@204~ meters(19).Value = CType(0,Object)
 ~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ CType(Original_QtyAtShop1,String)
  ~dulla^@204~  If
            If (Original_QtyAtSh~dulla^@204~ g) Then
                Me.Adapter.U~dulla^@204~ Parameters(21).Value = CType(1,Object~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~ e = System.DBNull.Value
            ~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ alue = CType(0,Object)
             ~dulla^@204~ .UpdateCommand.Parameters(22).Value =~dulla^@204~ al_QtyAtShop2,String)
            En~dulla^@204~      If (Original_QtyAtStore Is Nothi~dulla^@204~              Me.Adapter.UpdateCommand~dulla^@204~ 3).Value = CType(1,Object)
         ~dulla^@204~ pter.UpdateCommand.Parameters(24).Val~dulla^@204~ BNull.Value
            Else
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(23).~dulla^@204~ (0,Object)
                Me.Adapte~dulla^@204~ nd.Parameters(24).Value = CType(Origi~dulla^@204~ e,String)
            End If
      ~dulla^@204~ ginal_TotalQuantity Is Nothing) Then~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~ = CType(1,Object)
                Me~dulla^@204~ teCommand.Parameters(26).Value = Syst~dulla^@204~ ue
            Else
               ~dulla^@204~ pdateCommand.Parameters(25).Value = C~dulla^@204~ )
                Me.Adapter.UpdateC~dulla^@204~ ters(26).Value = CType(Original_Total~dulla^@204~ ng)
            End If
            ~dulla^@204~ ReorderLevel Is Nothing) Then
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(27).~dulla^@204~ (1,Object)
                Me.Adapte~dulla^@204~ nd.Parameters(28).Value = System.DBNu~dulla^@204~          Else
                Me.Ada~dulla^@204~ mmand.Parameters(27).Value = CType(0,~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ ).Value = CType(Original_ReorderLevel~dulla^@204~          End If
            If (Orig~dulla^@204~ Is Nothing) Then
                Me.~dulla^@204~ eCommand.Parameters(29).Value = CType~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ (30).Value = System.DBNull.Value
   ~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(29).Value = CType(0,Object)
    ~dulla^@204~ e.Adapter.UpdateCommand.Parameters(30~dulla^@204~ pe(Original_ShelfNo,String)
        ~dulla^@204~            Dim previousConnectionStat~dulla^@204~ ata.ConnectionState = Me.Adapter.Upda~dulla^@204~ nection.State
            If ((Me.Ad~dulla^@204~ ommand.Connection.State And System.Da~dulla^@204~ State.Open)  _
                     ~dulla^@204~ Data.ConnectionState.Open) Then
    ~dulla^@204~ e.Adapter.UpdateCommand.Connection.Op~dulla^@204~    End If
            Try 
        ~dulla^@204~ eturnValue As Integer = Me.Adapter.Up~dulla^@204~ xecuteNonQuery
                Retur~dulla^@204~ 
            Finally
              ~dulla^@204~ sConnectionState = System.Data.Connec~dulla^@204~ sed) Then
                    Me.Ada~dulla^@204~ mmand.Connection.Close
             ~dulla^@204~           End Try
        End Function
    End Class
End Namespace
