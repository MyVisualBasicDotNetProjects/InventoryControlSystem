'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.312
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("ProductsTableDataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ProductsTableDataSet
    Inherits System.Data.DataSet
    
    Private tableProducts As ProductsDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Products")) Is Nothing) Then
                MyBase.Tables.Add(New ProductsDataTable(ds.Tables("Products")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Products() As ProductsDataTable
        Get
            Return Me.tableProducts
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As ProductsTableDataSet = CType(MyBase.Clone,ProductsTableDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Products")) Is Nothing) Then
                MyBase.Tables.Add(New ProductsDataTable(ds.Tables("Products")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableProducts = CType(MyBase.Tables("Products"),ProductsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProducts) Is Nothing) Then
                Me.tableProducts.InitVars
            End ~dulla^@204~ ~dulla^@204~ d Sub
    
    <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
    Private Su~dulla^@204~ 
        Me.DataSetName = "ProductsT~dulla^@204~ 
        Me.Prefix = ""
        Me.N~dulla^@204~ ttp://tempuri.org/ProductsTableDataSe~dulla^@204~    Me.EnforceConstraints = true
    ~dulla^@204~ SerializationMode = System.Data.Schem~dulla^@204~ nMode.IncludeSchema
        Me.table~dulla^@204~ w ProductsDataTable
        MyBase.T~dulla^@204~ tableProducts)
    End Sub
    
  ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~ rivate Function ShouldSerializeProduc~dulla^@204~ an
        Return false
    End Fun~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
    Private Sub SchemaChang~dulla^@204~ er As Object, ByVal e As System.Compo~dulla^@204~ lectionChangeEventArgs)
        If (~dulla^@204~ stem.ComponentModel.CollectionChangeA~dulla^@204~  Then
            Me.InitVars
     ~dulla^@204~   End Sub
    
    <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
    Public~dulla^@204~ ion GetTypedDataSetSchema(ByVal xs As~dulla^@204~ chema.XmlSchemaSet) As System.Xml.Sch~dulla^@204~ ComplexType
        Dim ds As Produc~dulla^@204~ t = New ProductsTableDataSet
       ~dulla^@204~ System.Xml.Schema.XmlSchemaComplexTyp~dulla^@204~ m.Xml.Schema.XmlSchemaComplexType
  ~dulla^@204~ uence As System.Xml.Schema.XmlSchemaS~dulla^@204~  System.Xml.Schema.XmlSchemaSequence~dulla^@204~ dd(ds.GetSchemaSerializable)
       ~dulla^@204~ ystem.Xml.Schema.XmlSchemaAny = New S~dulla^@204~ ema.XmlSchemaAny
        any.Namespa~dulla^@204~ pace
        sequence.Items.Add(any)~dulla^@204~ e.Particle = sequence
        Return~dulla^@204~ d Function
    
    Public Delegate~dulla^@204~ RowChangeEventHandler(ByVal sender As~dulla^@204~ l e As ProductsRowChangeEvent)
    ~dulla^@204~ CodeDom.Compiler.GeneratedCodeAttribu~dulla^@204~ ta.Design.TypedDataSetGenerator", "2.~dulla^@204~      System.Serializable(),  _
     ~dulla^@204~ rialization.XmlSchemaProviderAttribut~dulla^@204~ bleSchema")>  _
    Partial Public C~dulla^@204~ DataTable
        Inherits System.Da~dulla^@204~ 
        Implements System.Collection~dulla^@204~ 
        
        Private columnPar~dulla^@204~ .Data.DataColumn
        
        P~dulla^@204~ Description As System.Data.DataColumn~dulla^@204~        Private columnPrice As System.~dulla^@204~ mn
        
        Private columnS~dulla^@204~ As System.Data.DataColumn
        
~dulla^@204~ te columnSellingPrice2 As System.Data~dulla^@204~         
        Private columnQtyAt~dulla^@204~ em.Data.DataColumn
        
       ~dulla^@204~ mnQtyAtShop2 As System.Data.DataColum~dulla^@204~         Private columnQtyAtStore As S~dulla^@204~ taColumn
        
        Private c~dulla^@204~ ntity As System.Data.DataColumn
    ~dulla^@204~  Private columnReorderLevel As System~dulla^@204~ umn
        
        Private column~dulla^@204~ stem.Data.DataColumn
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Sub New()
            MyB~dulla^@204~         Me.TableName = "Products"
  ~dulla^@204~ BeginInit
            Me.InitClass
~dulla^@204~ e.EndInit
        End Sub
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Friend Sub New(ByVal table ~dulla^@204~ a.DataTable)
            MyBase.New~dulla^@204~ Me.TableName = table.TableName
     ~dulla^@204~ ble.CaseSensitive <> table.DataSet.Ca~dulla^@204~ Then
                Me.CaseSensitiv~dulla^@204~ eSensitive
            End If
     ~dulla^@204~ ble.Locale.ToString <> table.DataSet.~dulla^@204~ ng) Then
                Me.Locale =~dulla^@204~ 
            End If
            If ~dulla^@204~ ace <> table.DataSet.Namespace) Then~dulla^@204~     Me.Namespace = table.Namespace
 ~dulla^@204~ d If
            Me.Prefix = table.P~dulla^@204~       Me.MinimumCapacity = table.Mini~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ rotected Sub New(ByVal info As System~dulla^@204~ alization.SerializationInfo, ByVal co~dulla^@204~ em.Runtime.Serialization.StreamingCon~dulla^@204~       MyBase.New(info, context)
    ~dulla^@204~ itVars
        End Sub
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public ReadOnly Property PartN~dulla^@204~ System.Data.DataColumn
            G~dulla^@204~        Return Me.columnPartNo
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public ReadOnly Property Descri~dulla^@204~  As System.Data.DataColumn
         ~dulla^@204~            Return Me.columnDescriptio~dulla^@204~   End Get
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public ReadOnly Proper~dulla^@204~ n() As System.Data.DataColumn
      ~dulla^@204~               Return Me.columnPrice
~dulla^@204~ nd Get
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public ReadOnly Property ~dulla^@204~ Column() As System.Data.DataColumn
 ~dulla^@204~ t
                Return Me.columnSe~dulla^@204~             End Get
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public ReadO~dulla^@204~ SellingPrice2Column() As System.Data.~dulla^@204~            Get
                Retur~dulla^@204~ llingPrice2
            End Get
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ nly Property QtyAtShop1Column() As Sy~dulla^@204~ aColumn
            Get
           ~dulla^@204~ e.columnQtyAtShop1
            End G~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c ReadOnly Property QtyAtShop2Column(~dulla^@204~ ata.DataColumn
            Get
    ~dulla^@204~ eturn Me.columnQtyAtShop2
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public ReadOnly Property QtyAtStore~dulla^@204~ ystem.Data.DataColumn
            Ge~dulla^@204~       Return Me.columnQtyAtStore
   ~dulla^@204~ Get
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public ReadOnly Property Tot~dulla^@204~ umn() As System.Data.DataColumn
    ~dulla^@204~                 Return Me.columnTotal~dulla^@204~          End Get
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public ReadOnly~dulla^@204~ rderLevelColumn() As System.Data.Data~dulla^@204~        Get
                Return Me~dulla^@204~ rLevel
            End Get
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ roperty ShelfNoColumn() As System.Dat~dulla^@204~ 
            Get
                Ret~dulla^@204~ ShelfNo
            End Get
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute(),  _
         Sy~dulla^@204~ tModel.Browsable(false)>  _
        ~dulla^@204~ ly Property Count() As Integer
     ~dulla^@204~                Return Me.Rows.Count
~dulla^@204~ nd Get
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Default ReadOnly P~dulla^@204~ ByVal index As Integer) As ProductsRo~dulla^@204~   Get
                Return CType(M~dulla^@204~ ,ProductsRow)
            End Get
 ~dulla^@204~ operty
        
        Public Even~dulla^@204~ Changing As ProductsRowChangeEventHan~dulla^@204~  
        Public Event ProductsRowCh~dulla^@204~ uctsRowChangeEventHandler
        
~dulla^@204~ c Event ProductsRowDeleting As Produc~dulla^@204~ entHandler
        
        Public ~dulla^@204~ sRowDeleted As ProductsRowChangeEvent~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Ov~dulla^@204~ ddProductsRow(ByVal row As ProductsRow)
            Me.Rows.Add(row)
        ~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Ov~dulla^@204~ ion AddProductsRow(ByVal PartNo As St~dulla^@204~ escription As String, ByVal Price As ~dulla^@204~  SellingPrice1 As String, ByVal Selli~dulla^@204~ tring, ByVal QtyAtShop1 As String, By~dulla^@204~ 2 As String, ByVal QtyAtStore As Stri~dulla^@204~ alQuantity As String, ByVal ReorderLe~dulla^@204~ , ByVal ShelfNo As String) As Product~dulla^@204~      Dim rowProductsRow As ProductsRo~dulla^@204~ NewRow,ProductsRow)
            rowP~dulla^@204~ emArray = New Object() {PartNo, Descr~dulla^@204~ , SellingPrice1, SellingPrice2, QtyAt~dulla^@204~ hop2, QtyAtStore, TotalQuantity, Reor~dulla^@204~ lfNo}
            Me.Rows.Add(rowPro~dulla^@204~           Return rowProductsRow
    ~dulla^@204~ ion
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ on FindByPartNo(ByVal PartNo As Strin~dulla^@204~ sRow
            Return CType(Me.Row~dulla^@204~ ject() {PartNo}),ProductsRow)
      ~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~ ble Function GetEnumerator() As Syste~dulla^@204~ .IEnumerator Implements System.Collec~dulla^@204~ able.GetEnumerator
            Retur~dulla^@204~ Enumerator
        End Function
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public Overrides Func~dulla^@204~ As System.Data.DataTable
           ~dulla^@204~ roductsDataTable = CType(MyBase.Clone~dulla^@204~ Table)
            cln.InitVars
   ~dulla^@204~ rn cln
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Protected Overrides Funct~dulla^@204~ tance() As System.Data.DataTable
   ~dulla^@204~ rn New ProductsDataTable
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Friend ~dulla^@204~ )
            Me.columnPartNo = MyBa~dulla^@204~ artNo")
            Me.columnDescrip~dulla^@204~ .Columns("Description")
            ~dulla^@204~ e = MyBase.Columns("Price")
        ~dulla^@204~ SellingPrice1 = MyBase.Columns("Selli~dulla^@204~            Me.columnSellingPrice2 = M~dulla^@204~ ("SellingPrice2")
            Me.col~dulla^@204~  = MyBase.Columns("QtyAtShop1")
    ~dulla^@204~ lumnQtyAtShop2 = MyBase.Columns("QtyA~dulla^@204~          Me.columnQtyAtStore = MyBase~dulla^@204~ AtStore")
            Me.columnTotal~dulla^@204~ Base.Columns("TotalQuantity")
      ~dulla^@204~ mnReorderLevel = MyBase.Columns("Reor~dulla^@204~            Me.columnShelfNo = MyBase.~dulla^@204~ fNo")
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Private Sub InitClass()
      ~dulla^@204~ mnPartNo = New System.Data.DataColumn~dulla^@204~ tType(String), Nothing, System.Data.M~dulla^@204~ ement)
            MyBase.Columns.Ad~dulla^@204~ rtNo)
            Me.columnDescripti~dulla^@204~ em.Data.DataColumn("Description", Get~dulla^@204~  Nothing, System.Data.MappingType.Ele~dulla^@204~       MyBase.Columns.Add(Me.columnDes~dulla^@204~           Me.columnPrice = New System~dulla^@204~ umn("Price", GetType(String), Nothing~dulla^@204~ .MappingType.Element)
            My~dulla^@204~ Add(Me.columnPrice)
            Me.c~dulla^@204~ rice1 = New System.Data.DataColumn("S~dulla^@204~ , GetType(String), Nothing, System.Da~dulla^@204~ e.Element)
            MyBase.Column~dulla^@204~ mnSellingPrice1)
            Me.colu~dulla^@204~ e2 = New System.Data.DataColumn("Sell~dulla^@204~ etType(String), Nothing, System.Data.~dulla^@204~ lement)
            MyBase.Columns.A~dulla^@204~ ellingPrice2)
            Me.columnQ~dulla^@204~ ew System.Data.DataColumn("QtyAtShop1~dulla^@204~ ring), Nothing, System.Data.MappingTy~dulla^@204~             MyBase.Columns.Add(Me.col~dulla^@204~ )
            Me.columnQtyAtShop2 = ~dulla^@204~ ta.DataColumn("QtyAtShop2", GetType(S~dulla^@204~ ng, System.Data.MappingType.Element)~dulla^@204~ MyBase.Columns.Add(Me.columnQtyAtShop~dulla^@204~    Me.columnQtyAtStore = New System.D~dulla^@204~ n("QtyAtStore", GetType(String), Noth~dulla^@204~ ata.MappingType.Element)
           ~dulla^@204~ ns.Add(Me.columnQtyAtStore)
        ~dulla^@204~ TotalQuantity = New System.Data.DataC~dulla^@204~ uantity", GetType(String), Nothing, S~dulla^@204~ ppingType.Element)
            MyBas~dulla^@204~ (Me.columnTotalQuantity)
           ~dulla^@204~ rderLevel = New System.Data.DataColum~dulla^@204~ el", GetType(String), Nothing, System~dulla^@204~ Type.Element)
            MyBase.Col~dulla^@204~ olumnReorderLevel)
            Me.co~dulla^@204~  New System.Data.DataColumn("ShelfNo"~dulla^@204~ ing), Nothing, System.Data.MappingTyp~dulla^@204~            MyBase.Columns.Add(Me.colu~dulla^@204~            Me.Constraints.Add(New Sys~dulla^@204~ ueConstraint("Constraint1", New Syste~dulla^@204~ lumn() {Me.columnPartNo}, true))
   ~dulla^@204~ olumnPartNo.AllowDBNull = false
    ~dulla^@204~ lumnPartNo.Unique = true
           ~dulla^@204~ tNo.MaxLength = 20
            Me.co~dulla^@204~ on.AllowDBNull = false
            M~dulla^@204~ iption.MaxLength = 20
            Me~dulla^@204~ MaxLength = 53
            Me.column~dulla^@204~ .MaxLength = 53
            Me.colum~dulla^@204~ 2.MaxLength = 53
            Me.colu~dulla^@204~ MaxLength = 10
            Me.column~dulla^@204~ xLength = 10
            Me.columnQt~dulla^@204~ ength = 10
            Me.columnTota~dulla^@204~ Length = 10
            Me.columnReo~dulla^@204~ Length = 10
            Me.columnShe~dulla^@204~ h = 20
        End Sub
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Function NewProductsRow~dulla^@204~ sRow
            Return CType(Me.New~dulla^@204~ ow)
        End Function
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Protected Overrides Function~dulla^@204~ ilder(ByVal builder As System.Data.Da~dulla^@204~  As System.Data.DataRow
            ~dulla^@204~ oductsRow(builder)
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Protected Ove~dulla^@204~ on GetRowType() As System.Type
     ~dulla^@204~  GetType(ProductsRow)
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Protected ~dulla^@204~  OnRowChanged(ByVal e As System.Data.~dulla^@204~ EventArgs)
            MyBase.OnRowC~dulla^@204~           If (Not (Me.ProductsRowChan~dulla^@204~ Nothing) Then
                RaiseE~dulla^@204~ RowChanged(Me, New ProductsRowChangeE~dulla^@204~ Row,ProductsRow), e.Action))
       ~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ rotected Overrides Sub OnRowChanging(~dulla^@204~ stem.Data.DataRowChangeEventArgs)
  ~dulla^@204~ ase.OnRowChanging(e)
            If ~dulla^@204~ uctsRowChangingEvent) Is Nothing) The~dulla^@204~       RaiseEvent ProductsRowChanging(~dulla^@204~ ctsRowChangeEvent(CType(e.Row,Product~dulla^@204~ on))
            End If
        End~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Protected Ov~dulla^@204~ nRowDeleted(ByVal e As System.Data.Da~dulla^@204~ entArgs)
            MyBase.OnRowDel~dulla^@204~         If (Not (Me.ProductsRowDelete~dulla^@204~ thing) Then
                RaiseEve~dulla^@204~ wDeleted(Me, New ProductsRowChangeEve~dulla^@204~ w,ProductsRow), e.Action))
         ~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ tected Overrides Sub OnRowDeleting(By~dulla^@204~ em.Data.DataRowChangeEventArgs)
    ~dulla^@204~ e.OnRowDeleting(e)
            If (N~dulla^@204~ tsRowDeletingEvent) Is Nothing) Then~dulla^@204~     RaiseEvent ProductsRowDeleting(Me~dulla^@204~ sRowChangeEvent(CType(e.Row,ProductsR~dulla^@204~ ))
            End If
        End S~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Sub RemoveProductsRow(ByVal row As ProductsRow)
~dulla^@204~ e.Rows.Remove(row)
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Shared Func~dulla^@204~ TableSchema(ByVal xs As System.Xml.Sc~dulla^@204~ aSet) As System.Xml.Schema.XmlSchemaC~dulla^@204~            Dim type As System.Xml.Sch~dulla^@204~ ComplexType = New System.Xml.Schema.X~dulla^@204~ exType
            Dim sequence As S~dulla^@204~ ema.XmlSchemaSequence = New System.Xm~dulla^@204~ chemaSequence
            Dim ds As ~dulla^@204~ DataSet = New ProductsTableDataSet
 ~dulla^@204~ .Add(ds.GetSchemaSerializable)
     ~dulla^@204~ y1 As System.Xml.Schema.XmlSchemaAny ~dulla^@204~ Xml.Schema.XmlSchemaAny
            ~dulla^@204~ e = "http://www.w3.org/2001/XMLSchema~dulla^@204~   any1.MinOccurs = New Decimal(0)
  ~dulla^@204~ 1.MaxOccurs = Decimal.MaxValue
     ~dulla^@204~ rocessContents = System.Xml.Schema.Xm~dulla^@204~ tProcessing.Lax
            sequence~dulla^@204~ y1)
            Dim any2 As System.X~dulla^@204~ SchemaAny = New System.Xml.Schema.Xml~dulla^@204~           any2.Namespace = "urn:schem~dulla^@204~ com:xml-diffgram-v1"
            any~dulla^@204~  New Decimal(1)
            any2.Pro~dulla^@204~ = System.Xml.Schema.XmlSchemaContentP~dulla^@204~ 
            sequence.Items.Add(any2~dulla^@204~   Dim attribute1 As System.Xml.Schema~dulla^@204~ ribute = New System.Xml.Schema.XmlSch~dulla^@204~ 
            attribute1.Name = "names~dulla^@204~       attribute1.FixedValue = ds.Name~dulla^@204~       type.Attributes.Add(attribute1)~dulla^@204~  Dim attribute2 As System.Xml.Schema.~dulla^@204~ ibute = New System.Xml.Schema.XmlSche~dulla^@204~             attribute2.Name = "tableT~dulla^@204~          attribute2.FixedValue = "Pro~dulla^@204~ e"
            type.Attributes.Add(a~dulla^@204~            type.Particle = sequence
~dulla^@204~ eturn type
        End Function
   ~dulla^@204~    
    <System.CodeDom.Compiler.Gen~dulla^@204~ ribute("System.Data.Design.TypedDataS~dulla^@204~  "2.0.0.0")>  _
    Partial Public C~dulla^@204~ Row
        Inherits System.Data.Dat~dulla^@204~  
        Private tableProducts As P~dulla^@204~ ble
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ w(ByVal rb As System.Data.DataRowBuil~dulla^@204~      MyBase.New(rb)
            Me.t~dulla^@204~ = CType(Me.Table,ProductsDataTable)
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y PartNo() As String
            Get~dulla^@204~      Return CType(Me(Me.tableProducts~dulla^@204~ ),String)
            End Get
     ~dulla^@204~                Me(Me.tableProducts.Pa~dulla^@204~  value
            End Set
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ escription() As String
            G~dulla^@204~        Return CType(Me(Me.tableProduc~dulla^@204~ nColumn),String)
            End Get~dulla^@204~  Set
                Me(Me.tableProd~dulla^@204~ ionColumn) = value
            End S~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Property Price() As String
       ~dulla^@204~              Try 
                  ~dulla^@204~ e(Me(Me.tableProducts.PriceColumn),St~dulla^@204~           Catch e As System.InvalidCa~dulla^@204~                     Throw New System.~dulla^@204~ pingException("The value for column '~dulla^@204~ le 'Products' is DBNull.", e)
      ~dulla^@204~  Try
            End Get
          ~dulla^@204~           Me(Me.tableProducts.PriceCo~dulla^@204~ 
            End Set
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Pro~dulla^@204~ Price1() As String
            Get
~dulla^@204~    Try 
                    Return C~dulla^@204~ bleProducts.SellingPrice1Column),Stri~dulla^@204~         Catch e As System.InvalidCast~dulla^@204~                   Throw New System.Da~dulla^@204~ ngException("The value for column 'Se~dulla^@204~ in table 'Products' is DBNull.", e)
~dulla^@204~    End Try
            End Get
    ~dulla^@204~                 Me(Me.tableProducts.S~dulla^@204~ olumn) = value
            End Set
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ operty SellingPrice2() As String
   ~dulla^@204~ 
                Try 
              ~dulla^@204~ CType(Me(Me.tableProducts.SellingPric~dulla^@204~ ing)
                Catch e As Syst~dulla^@204~ tException
                    Throw~dulla^@204~ ata.StrongTypingException("The value ~dulla^@204~ ellingPrice2' in table 'Products' is ~dulla^@204~ 
                End Try
           ~dulla^@204~          Set
                Me(Me.t~dulla^@204~ SellingPrice2Column) = value
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Property QtyAtShop1() As ~dulla^@204~        Get
                Try 
   ~dulla^@204~     Return CType(Me(Me.tableProducts.~dulla^@204~ umn),String)
                Catch e~dulla^@204~ validCastException
                 ~dulla^@204~ System.Data.StrongTypingException("Th~dulla^@204~ olumn 'QtyAtShop1' in table 'Products~dulla^@204~ , e)
                End Try
      ~dulla^@204~ 
            Set
                Me~dulla^@204~ ucts.QtyAtShop1Column) = value
     ~dulla^@204~ t
        End Property
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Property QtyAtShop2() A~dulla^@204~          Get
                Try 
 ~dulla^@204~       Return CType(Me(Me.tableProduct~dulla^@204~ olumn),String)
                Catch~dulla^@204~ InvalidCastException
               ~dulla^@204~ w System.Data.StrongTypingException("~dulla^@204~  column 'QtyAtShop2' in table 'Produc~dulla^@204~ .", e)
                End Try
    ~dulla^@204~ et
            Set
                ~dulla^@204~ oducts.QtyAtShop2Column) = value
   ~dulla^@204~ Set
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Property QtyAtStore()~dulla^@204~            Get
                Try ~dulla^@204~         Return CType(Me(Me.tableProdu~dulla^@204~ eColumn),String)
                Cat~dulla^@204~ m.InvalidCastException
             ~dulla^@204~ New System.Data.StrongTypingException~dulla^@204~ or column 'QtyAtStore' in table 'Prod~dulla^@204~ ll.", e)
                End Try
  ~dulla^@204~  Get
            Set
              ~dulla^@204~ Products.QtyAtStoreColumn) = value
 ~dulla^@204~ d Set
        End Property
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Property TotalQuant~dulla^@204~ ng
            Get
                ~dulla^@204~              Return CType(Me(Me.table~dulla^@204~ lQuantityColumn),String)
           ~dulla^@204~ As System.InvalidCastException
     ~dulla^@204~   Throw New System.Data.StrongTypingE~dulla^@204~  value for column 'TotalQuantity' in ~dulla^@204~ ts' is DBNull.", e)
                ~dulla^@204~         End Get
            Set
   ~dulla^@204~ Me(Me.tableProducts.TotalQuantityColu~dulla^@204~             End Set
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Prope~dulla^@204~ vel() As String
            Get
   ~dulla^@204~ Try 
                    Return CTyp~dulla^@204~ Products.ReorderLevelColumn),String)~dulla^@204~     Catch e As System.InvalidCastExce~dulla^@204~               Throw New System.Data.S~dulla^@204~ ception("The value for column 'Reorde~dulla^@204~ ble 'Products' is DBNull.", e)
     ~dulla^@204~ d Try
            End Get
         ~dulla^@204~            Me(Me.tableProducts.Reorde~dulla^@204~  = value
            End Set
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  ShelfNo() As String
            Get~dulla^@204~      Try 
                    Return CType(Me(Me.tableProducts.ShelfNoColumn),~dulla^@204~             Catch e As System.Invalid~dulla^@204~ 
                    Throw New Syste~dulla^@204~ TypingException("The value for column~dulla^@204~  table 'Products' is DBNull.", e)
  ~dulla^@204~  End Try
            End Get
      ~dulla^@204~               Me(Me.tableProducts.She~dulla^@204~  value
            End Set
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ sPriceNull() As Boolean
            ~dulla^@204~ ull(Me.tableProducts.PriceColumn)
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ SetPriceNull()
            Me(Me.tab~dulla^@204~ iceColumn) = System.Convert.DBNull
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  IsSellingPrice1Null() As Boolean
  ~dulla^@204~ urn Me.IsNull(Me.tableProducts.Sellin~dulla^@204~ )
        End Function
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Sub SetSellingPrice1Nul~dulla^@204~     Me(Me.tableProducts.SellingPrice1~dulla^@204~ tem.Convert.DBNull
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Function Is~dulla^@204~ Null() As Boolean
            Return~dulla^@204~ .tableProducts.SellingPrice2Column)
~dulla^@204~ unction
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ b SetSellingPrice2Null()
           ~dulla^@204~ roducts.SellingPrice2Column) = System~dulla^@204~ ll
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Function IsQtyAtShop1Null()~dulla^@204~             Return Me.IsNull(Me.table~dulla^@204~ tShop1Column)
        End Function
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Sub SetQtyA~dulla^@204~ 
            Me(Me.tableProducts.QtyA~dulla^@204~  = System.Convert.DBNull
        End~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Funct~dulla^@204~ op2Null() As Boolean
            Ret~dulla^@204~ (Me.tableProducts.QtyAtShop2Column)
~dulla^@204~ unction
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ b SetQtyAtShop2Null()
            Me~dulla^@204~ ucts.QtyAtShop2Column) = System.Conve~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Function IsQtyAtStoreNull() As Bo~dulla^@204~       Return Me.IsNull(Me.tableProduc~dulla^@204~ Column)
        End Function
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Sub SetQtyAtStore~dulla^@204~        Me(Me.tableProducts.QtyAtStore~dulla^@204~ tem.Convert.DBNull
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Function Is~dulla^@204~ Null() As Boolean
            Return~dulla^@204~ .tableProducts.TotalQuantityColumn)
~dulla^@204~ unction
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ b SetTotalQuantityNull()
           ~dulla^@204~ roducts.TotalQuantityColumn) = System~dulla^@204~ ll
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Function IsReorderLevelNull~dulla^@204~ 
            Return Me.IsNull(Me.tab~dulla^@204~ orderLevelColumn)
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Sub Set~dulla^@204~ ull()
            Me(Me.tableProduct~dulla^@204~ lColumn) = System.Convert.DBNull
   ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ sShelfNoNull() As Boolean
          ~dulla^@204~ sNull(Me.tableProducts.ShelfNoColumn)~dulla^@204~  Function
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Sub SetShelfNoNull()
            Me(~dulla^@204~ cts.ShelfNoColumn) = System.Convert.D~dulla^@204~   End Sub
    End Class
    
    <~dulla^@204~ m.Compiler.GeneratedCodeAttribute("Sy~dulla^@204~ ign.TypedDataSetGenerator", "2.0.0.0"~dulla^@204~ blic Class ProductsRowChangeEvent
  ~dulla^@204~ s System.EventArgs
        
       ~dulla^@204~ tRow As ProductsRow
        
      ~dulla^@204~ ntAction As System.Data.DataRowAction~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Sub New(B~dulla^@204~ roductsRow, ByVal action As System.Da~dulla^@204~ ion)
            MyBase.New
       ~dulla^@204~ Row = row
            Me.eventAction~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic ReadOnly Property Row() As Produc~dulla^@204~       Get
                Return Me.~dulla^@204~          End Get
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public ReadOnly~dulla^@204~ ion() As System.Data.DataRowAction
 ~dulla^@204~ t
                Return Me.eventAct~dulla^@204~     End Get
        End Property
  ~dulla^@204~ End Class

Namespace ProductsTableD~dulla^@204~ apters
    
    <System.CodeDom.Com~dulla^@204~ edCodeAttribute("System.Data.Design.T~dulla^@204~ nerator", "2.0.0.0"),  _
     System~dulla^@204~ el.DesignerCategoryAttribute("code"),~dulla^@204~ tem.ComponentModel.ToolboxItem(true),~dulla^@204~ tem.ComponentModel.DataObjectAttribut~dulla^@204~      System.ComponentModel.DesignerAt~dulla^@204~ osoft.VSDesigner.DataSource.Design.Ta~dulla^@204~ igner, Microsoft.VSDesigner"& _ 
   ~dulla^@204~ on=8.0.0.0, Culture=neutral, PublicKe~dulla^@204~ 7f11d50a3a"),  _
     System.Compone~dulla^@204~ n.HelpKeywordAttribute("vs.data.Table~dulla^@204~ 
    Partial Public Class ProductsTa~dulla^@204~        Inherits System.ComponentModel~dulla^@204~        
        Private WithEvents _~dulla^@204~ stem.Data.SqlClient.SqlDataAdapter
 ~dulla^@204~     Private _connection As System.Dat~dulla^@204~ qlConnection
        
        Priva~dulla^@204~ llection() As System.Data.SqlClient.S~dulla^@204~       
        Private _clearBeforeF~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~ )
            MyBase.New
          ~dulla^@204~ oreFill = true
        End Sub
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Private ReadOnly Prope~dulla^@204~  As System.Data.SqlClient.SqlDataAdap~dulla^@204~     Get
                If (Me._adap~dulla^@204~ g) Then
                    Me.InitA~dulla^@204~            End If
                Re~dulla^@204~ ter
            End Get
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Friend ~dulla^@204~ ection() As System.Data.SqlClient.Sql~dulla^@204~            Get
                If (M~dulla^@204~  Is Nothing) Then
                  ~dulla^@204~ ection
                End If
     ~dulla^@204~ turn Me._connection
            End ~dulla^@204~     Set
                Me._connecti~dulla^@204~                If (Not (Me.Adapter.In~dulla^@204~ Is Nothing) Then
                   ~dulla^@204~ nsertCommand.Connection = value
    ~dulla^@204~ nd If
                If (Not (Me.Ad~dulla^@204~ ommand) Is Nothing) Then
           ~dulla^@204~ dapter.DeleteCommand.Connection = val~dulla^@204~        End If
                If (No~dulla^@204~ .UpdateCommand) Is Nothing) Then
   ~dulla^@204~     Me.Adapter.UpdateCommand.Connecti~dulla^@204~                End If
              ~dulla^@204~ teger = 0
                Do While (~dulla^@204~ dCollection.Length)
                ~dulla^@204~ Me.CommandCollection(i)) Is Nothing) ~dulla^@204~                  CType(Me.CommandColl~dulla^@204~ tem.Data.SqlClient.SqlCommand).Connec~dulla^@204~ 
                    End If
        ~dulla^@204~  = (i + 1)
                Loop
   ~dulla^@204~ Set
        End Property
        
        <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Protected ReadOnly P~dulla^@204~ ndCollection() As System.Data.SqlClie~dulla^@204~ ()
            Get
                ~dulla^@204~ ndCollection Is Nothing) Then
      ~dulla^@204~  Me.InitCommandCollection
          ~dulla^@204~ 
                Return Me._commandCo~dulla^@204~          End Get
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Property~dulla^@204~ ill() As Boolean
            Get
  ~dulla^@204~  Return Me._clearBeforeFill
        ~dulla^@204~             Set
                Me._~dulla^@204~ ll = value
            End Set
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ nitAdapter()
            Me._adapter~dulla^@204~ .Data.SqlClient.SqlDataAdapter
     ~dulla^@204~ bleMapping As System.Data.Common.Data~dulla^@204~ = New System.Data.Common.DataTableMap~dulla^@204~      tableMapping.SourceTable = "Tabl~dulla^@204~    tableMapping.DataSetTable = "Produ~dulla^@204~      tableMapping.ColumnMappings.Add(~dulla^@204~ rtNo")
            tableMapping.Colu~dulla^@204~ d("Description", "Description")
    ~dulla^@204~ Mapping.ColumnMappings.Add("Price", "~dulla^@204~         tableMapping.ColumnMappings.A~dulla^@204~ ice1", "SellingPrice1")
            ~dulla^@204~ ColumnMappings.Add("SellingPrice2", "~dulla^@204~ ")
            tableMapping.ColumnMa~dulla^@204~ tyAtShop1", "QtyAtShop1")
          ~dulla^@204~ g.ColumnMappings.Add("QtyAtShop2", "Q~dulla^@204~             tableMapping.ColumnMappin~dulla^@204~ Store", "QtyAtStore")
            ta~dulla^@204~ lumnMappings.Add("TotalQuantity", "To~dulla^@204~ 
            tableMapping.ColumnMapp~dulla^@204~ rderLevel", "ReorderLevel")
        ~dulla^@204~ ing.ColumnMappings.Add("ShelfNo", "Sh~dulla^@204~         Me._adapter.TableMappings.Add~dulla^@204~ )
            Me._adapter.DeleteComm~dulla^@204~ tem.Data.SqlClient.SqlCommand
      ~dulla^@204~ pter.DeleteCommand.Connection = Me.Co~dulla^@204~          Me._adapter.DeleteCommand.Co~dulla^@204~ DELETE FROM [dbo].[Products] WHERE ((~dulla^@204~ riginal_PartNo) AND ([Descripti"& _ ~dulla^@204~     "on] = @Original_Description) AND~dulla^@204~ ice = 1 AND [Price] IS NULL) OR ([P"&~dulla^@204~         "rice] = @Original_Price)) AN~dulla^@204~ ellingPrice1 = 1 AND [SellingPrice1] ~dulla^@204~             " NULL) OR ([SellingPrice~dulla^@204~ l_SellingPrice1)) AND ((@IsNull_Selli~dulla^@204~                 "e2 = 1 AND [SellingP~dulla^@204~ L) OR ([SellingPrice2] = @Original_Se~dulla^@204~ _ 
                "2)) AND ((@IsNul~dulla^@204~ = 1 AND [QtyAtShop1] IS NULL) OR ([Qt~dulla^@204~ O"& _ 
                "riginal_QtyA~dulla^@204~ ((@IsNull_QtyAtShop2 = 1 AND [QtyAtSh~dulla^@204~  OR ("& _ 
                "[QtyAtSh~dulla^@204~ nal_QtyAtShop2)) AND ((@IsNull_QtyAtS~dulla^@204~ [QtyAtSto"& _ 
                "re] ~dulla^@204~ [QtyAtStore] = @Original_QtyAtStore))~dulla^@204~ l_TotalQuanti"& _ 
                "~dulla^@204~ otalQuantity] IS NULL) OR ([TotalQuan~dulla^@204~ inal_TotalQuantit"& _ 
             ~dulla^@204~ (@IsNull_ReorderLevel = 1 AND [Reorde~dulla^@204~ LL) OR ([ReorderLevel"& _ 
         ~dulla^@204~ Original_ReorderLevel)) AND ((@IsNull~dulla^@204~ AND [ShelfNo] IS NULL) OR"& _ 
     ~dulla^@204~ ([ShelfNo] = @Original_ShelfNo)))"
 ~dulla^@204~ ._adapter.DeleteCommand.CommandType =~dulla^@204~ CommandType.Text
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@Original_PartNo", System.~dulla^@204~ e.NVarChar, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "PartNo", System.Data.DataRo~dulla^@204~ inal, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.DeleteCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Origina~dulla^@204~ ", System.Data.SqlDbType.[Char], 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "Descri~dulla^@204~ m.Data.DataRowVersion.Original, false~dulla^@204~ , "", ""))
            Me._adapter.D~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@IsNull_Price", System.Data.SqlD~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ e", System.Data.DataRowVersion.Origin~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@Original_Price", System~dulla^@204~ pe.[Char], 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "Price", System.Data.DataRowV~dulla^@204~ al, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.DeleteCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@IsNull_Se~dulla^@204~  System.Data.SqlDbType.Int, 0, System~dulla^@204~ erDirection.Input, 0, 0, "SellingPric~dulla^@204~ ata.DataRowVersion.Original, true, No~dulla^@204~ , ""))
            Me._adapter.Delet~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@Original_SellingPrice1", System.Dat~dulla^@204~ Char], 0, System.Data.ParameterDirect~dulla^@204~  0, "SellingPrice1", System.Data.Data~dulla^@204~ iginal, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.DeleteCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@IsNul~dulla^@204~ e2", System.Data.SqlDbType.Int, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "Selling~dulla^@204~ em.Data.DataRowVersion.Original, true~dulla^@204~ , "", ""))
            Me._adapter.D~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@Original_SellingPrice2", System~dulla^@204~ pe.[Char], 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "SellingPrice2", System.Data.~dulla^@204~ n.Original, false, Nothing, "", "", "~dulla^@204~     Me._adapter.DeleteCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@I~dulla^@204~ op1", System.Data.SqlDbType.Int, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "QtyAtS~dulla^@204~ .Data.DataRowVersion.Original, true, ~dulla^@204~ "", ""))
            Me._adapter.Del~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@Original_QtyAtShop1", System.Data~dulla^@204~ har], 0, System.Data.ParameterDirecti~dulla^@204~ 0, "QtyAtShop1", System.Data.DataRowV~dulla^@204~ al, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.DeleteCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@IsNull_Qt~dulla^@204~ stem.Data.SqlDbType.Int, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "QtyAtShop2", S~dulla^@204~ taRowVersion.Original, true, Nothing,~dulla^@204~ 
            Me._adapter.DeleteComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ inal_QtyAtShop2", System.Data.SqlDbTy~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ tShop2", System.Data.DataRowVersion.O~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ DeleteCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@IsNull_QtyAtStore~dulla^@204~ a.SqlDbType.Int, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "QtyAtStore", System.Da~dulla^@204~ sion.Original, true, Nothing, "", "",~dulla^@204~       Me._adapter.DeleteCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ AtStore", System.Data.SqlDbType.[Char~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@IsNull_TotalQuantity", Sy~dulla^@204~ DbType.Int, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "TotalQuantity", System.Data~dulla^@204~ on.Original, true, Nothing, "", "", "~dulla^@204~     Me._adapter.DeleteCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@O~dulla^@204~ Quantity", System.Data.SqlDbType.[Cha~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ ty", System.Data.DataRowVersion.Origi~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@IsNull_ReorderLevel",~dulla^@204~ SqlDbType.Int, 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "ReorderLevel", System.Da~dulla^@204~ sion.Original, true, Nothing, "", "",~dulla^@204~       Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlPar~dulla^@204~ inal_ReorderLevel", System.Data.SqlDb~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ orderLevel", System.Data.DataRowVersi~dulla^@204~ false, Nothing, "", "", ""))
       ~dulla^@204~ ter.DeleteCommand.Parameters.Add(New ~dulla^@204~ qlClient.SqlParameter("@IsNull_ShelfN~dulla^@204~ ta.SqlDbType.Int, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "ShelfNo", System.Data~dulla^@204~ on.Original, true, Nothing, "", "", "~dulla^@204~     Me._adapter.DeleteCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@O~dulla^@204~ No", System.Data.SqlDbType.NVarChar, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "Sh~dulla^@204~ m.Data.DataRowVersion.Original, false~dulla^@204~ , "", ""))
            Me._adapter.I~dulla^@204~ = New System.Data.SqlClient.SqlComman~dulla^@204~   Me._adapter.InsertCommand.Connectio~dulla^@204~ tion
            Me._adapter.InsertC~dulla^@204~ dText = "INSERT INTO [dbo].[Products]~dulla^@204~ Description], [Price], [SellingPrice1~dulla^@204~              "[SellingPrice2], [QtyAt~dulla^@204~ tShop2], [QtyAtStore], [TotalQuantity~dulla^@204~ 
                "rderLevel], [ShelfN~dulla^@204~ PartNo, @Description, @Price, @Sellin~dulla^@204~  _ 
                "ellingPrice2, @~dulla^@204~ QtyAtShop2, @QtyAtStore, @TotalQuanti~dulla^@204~ ev"& _ 
                "el, @ShelfN~dulla^@204~ icrosoft.VisualBasic.ChrW(13)&Global.~dulla^@204~ ualBasic.ChrW(10)&"SELECT PartNo, Des~dulla^@204~ ce, SellingPrice1, SellingPrice2,"& _~dulla^@204~       " QtyAtShop1, QtyAtShop2, QtyAt~dulla^@204~ uantity, ReorderLevel, ShelfNo FROM P~dulla^@204~           "roducts WHERE (PartNo = @P~dulla^@204~         Me._adapter.InsertCommand.Com~dulla^@204~ stem.Data.CommandType.Text
         ~dulla^@204~ r.InsertCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@PartNo", System~dulla^@204~ pe.NVarChar, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "PartNo", System.Data.DataR~dulla^@204~ rent, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.InsertCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Descrip~dulla^@204~ .Data.SqlDbType.[Char], 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "Description", S~dulla^@204~ taRowVersion.Current, false, Nothing,~dulla^@204~ 
            Me._adapter.InsertComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ e", System.Data.SqlDbType.[Char], 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Price~dulla^@204~ a.DataRowVersion.Current, false, Noth~dulla^@204~ ""))
            Me._adapter.InsertC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ SellingPrice1", System.Data.SqlDbType~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ gPrice1", System.Data.DataRowVersion.~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ InsertCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@SellingPrice2", S~dulla^@204~ lDbType.[Char], 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "SellingPrice2", System.~dulla^@204~ ersion.Current, false, Nothing, "", "~dulla^@204~         Me._adapter.InsertCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ ", System.Data.SqlDbType.[Char], 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "QtyAtS~dulla^@204~ .Data.DataRowVersion.Current, false, ~dulla^@204~ "", ""))
            Me._adapter.Ins~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@QtyAtShop2", System.Data.SqlDbTyp~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ Shop2", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ sertCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@QtyAtStore", System~dulla^@204~ pe.[Char], 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "QtyAtStore", System.Data.Dat~dulla^@204~ urrent, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.InsertCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@Total~dulla^@204~ stem.Data.SqlDbType.[Char], 0, System~dulla^@204~ erDirection.Input, 0, 0, "TotalQuanti~dulla^@204~ ata.DataRowVersion.Current, false, No~dulla^@204~ , ""))
            Me._adapter.Inser~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@ReorderLevel", System.Data.SqlDbTyp~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ erLevel", System.Data.DataRowVersion.~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ InsertCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@ShelfNo", System.~dulla^@204~ e.NVarChar, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "ShelfNo", System.Data.DataR~dulla^@204~ rent, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.UpdateCommand = New System.~dulla^@204~ t.SqlCommand
            Me._adapter~dulla^@204~ d.Connection = Me.Connection
       ~dulla^@204~ ter.UpdateCommand.CommandText = "UPDA~dulla^@204~ ducts] SET [PartNo] = @PartNo, [Descr~dulla^@204~ scription, [Pr"& _ 
                ~dulla^@204~ e, [SellingPrice1] = @SellingPrice1, ~dulla^@204~ 2] = @SellingPrice"& _ 
            ~dulla^@204~ tShop1] = @QtyAtShop1, [QtyAtShop2] =~dulla^@204~  [QtyAtStore] = @QtyAt"& _ 
        ~dulla^@204~ e, [TotalQuantity] = @TotalQuantity, ~dulla^@204~ ] = @ReorderLevel, [ShelfN"& _ 
    ~dulla^@204~ o] = @ShelfNo WHERE (([PartNo] = @Ori~dulla^@204~  AND ([Description] = @Origina"& _ 
~dulla^@204~    "l_Description) AND ((@IsNull_Pric~dulla^@204~ ice] IS NULL) OR ([Price] = @Origi"& ~dulla^@204~        "nal_Price)) AND ((@IsNull_Sel~dulla^@204~ 1 AND [SellingPrice1] IS NULL) OR ([S~dulla^@204~            "llingPrice1] = @Original_~dulla^@204~ )) AND ((@IsNull_SellingPrice2 = 1 AN~dulla^@204~                "llingPrice2] IS NULL)~dulla^@204~ Price2] = @Original_SellingPrice2)) A~dulla^@204~  
                "ull_QtyAtShop1 = ~dulla^@204~ hop1] IS NULL) OR ([QtyAtShop1] = @Or~dulla^@204~ "& _ 
                "hop1)) AND ((~dulla^@204~ Shop2 = 1 AND [QtyAtShop2] IS NULL) O~dulla^@204~ 2] ="& _ 
                " @Origina~dulla^@204~ ) AND ((@IsNull_QtyAtStore = 1 AND [Q~dulla^@204~  NULL) O"& _ 
                "R ([Q~dulla^@204~ @Original_QtyAtStore)) AND ((@IsNull_~dulla^@204~  = 1 AND [To"& _ 
                "t~dulla^@204~ S NULL) OR ([TotalQuantity] = @Origin~dulla^@204~ ity)) AND ((@IsN"& _ 
              ~dulla^@204~ rLevel = 1 AND [ReorderLevel] IS NULL~dulla^@204~ rLevel] = @Original_"& _ 
          ~dulla^@204~ rLevel)) AND ((@IsNull_ShelfNo = 1 AN~dulla^@204~ S NULL) OR ([ShelfNo] = "& _ 
      ~dulla^@204~ riginal_ShelfNo)));"&Global.Microsoft~dulla^@204~ ChrW(13)&Global.Microsoft.VisualBasic~dulla^@204~ LECT PartNo, Description, Price, Sell~dulla^@204~ lling"& _ 
                "Price2, ~dulla^@204~ tyAtShop2, QtyAtStore, TotalQuantity,~dulla^@204~ , ShelfNo"& _ 
                " FRO~dulla^@204~ ERE (PartNo = @PartNo)"
            ~dulla^@204~ pdateCommand.CommandType = System.Dat~dulla^@204~ .Text
            Me._adapter.Update~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @PartNo", System.Data.SqlDbType.NVarC~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ ystem.Data.DataRowVersion.Current, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Description", System.Data.Sq~dulla^@204~ ], 0, System.Data.ParameterDirection.~dulla^@204~ "Description", System.Data.DataRowVer~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.UpdateCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@Price", Syst~dulla^@204~ Type.[Char], 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "Price", System.Data.DataRo~dulla^@204~ ent, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.UpdateCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@SellingP~dulla^@204~ m.Data.SqlDbType.[Char], 0, System.Da~dulla^@204~ irection.Input, 0, 0, "SellingPrice1"~dulla^@204~ .DataRowVersion.Current, false, Nothi~dulla^@204~ "))
            Me._adapter.UpdateCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ ellingPrice2", System.Data.SqlDbType.~dulla^@204~ stem.Data.ParameterDirection.Input, 0, 0, "SellingPrice2", System.Data.DataRowV~dulla^@204~ t, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@QtyAtShop1~dulla^@204~ a.SqlDbType.[Char], 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "QtyAtShop1", System~dulla^@204~ Version.Current, false, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ 2", System.Data.SqlDbType.[Char], 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "QtyAt~dulla^@204~ m.Data.DataRowVersion.Current, false,~dulla^@204~  "", ""))
            Me._adapter.Up~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@QtyAtStore", System.Data.SqlDbTy~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ tStore", System.Data.DataRowVersion.C~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ pdateCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@TotalQuantity", Sy~dulla^@204~ DbType.[Char], 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "TotalQuantity", System.D~dulla^@204~ rsion.Current, false, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ l", System.Data.SqlDbType.[Char], 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Reord~dulla^@204~ tem.Data.DataRowVersion.Current, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@ShelfNo", System.Data.SqlDbTyp~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ lfNo", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@Original_PartNo", Sy~dulla^@204~ DbType.NVarChar, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "PartNo", System.Data.D~dulla^@204~ .Original, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.UpdateCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Or~dulla^@204~ ption", System.Data.SqlDbType.[Char],~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "D~dulla^@204~ System.Data.DataRowVersion.Original, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@IsNull_Price", System.Data~dulla^@204~ t, 0, System.Data.ParameterDirection.~dulla^@204~ "Price", System.Data.DataRowVersion.O~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ pdateCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@Original_Price", S~dulla^@204~ lDbType.[Char], 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "Price", System.Data.Dat~dulla^@204~ riginal, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@IsNu~dulla^@204~ ce1", System.Data.SqlDbType.Int, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "Sellin~dulla^@204~ tem.Data.DataRowVersion.Original, tru~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Original_SellingPrice1", Syste~dulla^@204~ ype.[Char], 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "SellingPrice1", System.Data~dulla^@204~ on.Original, false, Nothing, "", "", ~dulla^@204~      Me._adapter.UpdateCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ gPrice2", System.Data.SqlDbType.Int, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "Se~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Original_SellingPrice2", S~dulla^@204~ lDbType.[Char], 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "SellingPrice2", System.~dulla^@204~ ersion.Original, false, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ yAtShop1", System.Data.SqlDbType.Int,~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "Q~dulla^@204~ ystem.Data.DataRowVersion.Original, t~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Original_QtyAtShop1", System~dulla^@204~ pe.[Char], 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "QtyAtShop1", System.Data.Dat~dulla^@204~ riginal, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@IsNu~dulla^@204~ ", System.Data.SqlDbType.Int, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "QtyAtShop~dulla^@204~ ta.DataRowVersion.Original, true, Not~dulla^@204~  ""))
            Me._adapter.Update~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @Original_QtyAtShop2", System.Data.Sq~dulla^@204~ ], 0, System.Data.ParameterDirection.~dulla^@204~ "QtyAtShop2", System.Data.DataRowVers~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.UpdateCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@IsNull_QtyAt~dulla^@204~ m.Data.SqlDbType.Int, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "QtyAtStore", Syst~dulla^@204~ owVersion.Original, true, Nothing, ""~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ l_QtyAtStore", System.Data.SqlDbType.~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ ore", System.Data.DataRowVersion.Orig~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@IsNull_TotalQuantity~dulla^@204~ a.SqlDbType.Int, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "TotalQuantity", System~dulla^@204~ Version.Original, true, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ TotalQuantity", System.Data.SqlDbType~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ uantity", System.Data.DataRowVersion.~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@IsNull_ReorderLe~dulla^@204~ Data.SqlDbType.Int, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "ReorderLevel", Syst~dulla^@204~ owVersion.Original, true, Nothing, ""~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ l_ReorderLevel", System.Data.SqlDbTyp~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ erLevel", System.Data.DataRowVersion.~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@IsNull_ShelfNo",~dulla^@204~ SqlDbType.Int, 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "ShelfNo", System.Data.Da~dulla^@204~ Original, true, Nothing, "", "", ""))~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Orig~dulla^@204~ , System.Data.SqlDbType.NVarChar, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Shelf~dulla^@204~ ata.DataRowVersion.Original, false, N~dulla^@204~ ", ""))
        End Sub
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Private Sub InitConnection()~dulla^@204~ Me._connection = New System.Data.SqlC~dulla^@204~ ection
            Me._connection.Co~dulla^@204~ g = Global.InventoryControlSystem.My.~dulla^@204~ fault.PurchaseInfoConnection
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Private ~dulla^@204~ ndCollection()
            Me._comma~dulla^@204~ = New System.Data.SqlClient.SqlComman~dulla^@204~         Me._commandCollection(0) = Ne~dulla^@204~ .SqlClient.SqlCommand
            Me~dulla^@204~ ection(0).Connection = Me.Connection~dulla^@204~ Me._commandCollection(0).CommandText ~dulla^@204~ tNo, Description, Price, SellingPrice~dulla^@204~ ce2, QtyAtShop1, QtyA"& _ 
         ~dulla^@204~ 2, QtyAtStore, TotalQuantity, Reorder~dulla^@204~ o FROM dbo.Products"
            Me.~dulla^@204~ ction(0).CommandType = System.Data.Co~dulla^@204~ t
        End Sub
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Desi~dulla^@204~ dAttribute("vs.data.TableAdapter"),  ~dulla^@204~ ystem.ComponentModel.DataObjectMethod~dulla^@204~ tem.ComponentModel.DataObjectMethodTy~dulla^@204~ )>  _
        Public Overloads Overr~dulla^@204~ on Fill(ByVal dataTable As ProductsTa~dulla^@204~ oductsDataTable) As Integer
        ~dulla^@204~ r.SelectCommand = Me.CommandCollectio~dulla^@204~      If (Me.ClearBeforeFill = true) T~dulla^@204~         dataTable.Clear
            ~dulla^@204~        Dim returnValue As Integer = M~dulla^@204~ l(dataTable)
            Return retu~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute(),~dulla^@204~  System.ComponentModel.Design.HelpKey~dulla^@204~ ("vs.data.TableAdapter"),  _
       ~dulla^@204~ onentModel.DataObjectMethodAttribute(~dulla^@204~ entModel.DataObjectMethodType.[Select~dulla^@204~ 
        Public Overloads Overridable~dulla^@204~ Data() As ProductsTableDataSet.Produc~dulla^@204~             Me.Adapter.SelectCommand ~dulla^@204~ ollection(0)
            Dim dataTab~dulla^@204~ sTableDataSet.ProductsDataTable = New~dulla^@204~ eDataSet.ProductsDataTable
         ~dulla^@204~ .Fill(dataTable)
            Return ~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~    System.ComponentModel.Design.HelpK~dulla^@204~ te("vs.data.TableAdapter")>  _
     ~dulla^@204~ rloads Overridable Function Update(By~dulla^@204~  As ProductsTableDataSet.ProductsData~dulla^@204~ eger
            Return Me.Adapter.U~dulla^@204~ le)
        End Function
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
         System.ComponentModel.Desig~dulla^@204~ Attribute("vs.data.TableAdapter")>  _~dulla^@204~ lic Overloads Overridable Function Up~dulla^@204~ taSet As ProductsTableDataSet) As Int~dulla^@204~      Return Me.Adapter.Update(dataSet~dulla^@204~ 
        End Function
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~        System.ComponentModel.Design.H~dulla^@204~ ribute("vs.data.TableAdapter")>  _
 ~dulla^@204~  Overloads Overridable Function Updat~dulla^@204~ ow As System.Data.DataRow) As Integer~dulla^@204~  Return Me.Adapter.Update(New System.~dulla^@204~ ) {dataRow})
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te(),  _
         System.ComponentMo~dulla^@204~ lpKeywordAttribute("vs.data.TableAdap~dulla^@204~       Public Overloads Overridable Fu~dulla^@204~ (ByVal dataRows() As System.Data.Data~dulla^@204~ er
            Return Me.Adapter.Upd~dulla^@204~ 
        End Function
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~        System.ComponentModel.Design.H~dulla^@204~ ribute("vs.data.TableAdapter"),  _
 ~dulla^@204~ m.ComponentModel.DataObjectMethodAttr~dulla^@204~ ComponentModel.DataObjectMethodType.D~dulla^@204~   _
        Public Overloads Overrid~dulla^@204~  Delete(ByVal Original_PartNo As Stri~dulla^@204~ ginal_Description As String, ByVal Or~dulla^@204~ As String, ByVal Original_SellingPric~dulla^@204~  ByVal Original_SellingPrice2 As Stri~dulla^@204~ ginal_QtyAtShop1 As String, ByVal Ori~dulla^@204~ op2 As String, ByVal Original_QtyAtSt~dulla^@204~ , ByVal Original_TotalQuantity As Str~dulla^@204~ iginal_ReorderLevel As String, ByVal ~dulla^@204~ fNo As String) As Integer
          ~dulla^@204~ l_PartNo Is Nothing) Then
          ~dulla^@204~ ew System.ArgumentNullException("Orig~dulla^@204~ 
            Else
                M~dulla^@204~ eteCommand.Parameters(0).Value = CTyp~dulla^@204~ rtNo,String)
            End If
   ~dulla^@204~ Original_Description Is Nothing) Then~dulla^@204~      Throw New System.ArgumentNullExc~dulla^@204~ nal_Description")
            Else
~dulla^@204~    Me.Adapter.DeleteCommand.Parameter~dulla^@204~ CType(Original_Description,String)
 ~dulla^@204~ d If
            If (Original_Price ~dulla^@204~ hen
                Me.Adapter.Delet~dulla^@204~ meters(2).Value = CType(1,Object)
  ~dulla^@204~  Me.Adapter.DeleteCommand.Parameters(~dulla^@204~ stem.DBNull.Value
            Else
~dulla^@204~    Me.Adapter.DeleteCommand.Parameter~dulla^@204~ CType(0,Object)
                Me.A~dulla^@204~ Command.Parameters(3).Value = CType(O~dulla^@204~ ,String)
            End If
       ~dulla^@204~ inal_SellingPrice1 Is Nothing) Then
~dulla^@204~    Me.Adapter.DeleteCommand.Parameter~dulla^@204~ CType(1,Object)
                Me.A~dulla^@204~ Command.Parameters(5).Value = System.~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(4).Value = CType~dulla^@204~                Me.Adapter.DeleteComma~dulla^@204~ (5).Value = CType(Original_SellingPri~dulla^@204~             End If
            If (O~dulla^@204~ ngPrice2 Is Nothing) Then
          ~dulla^@204~ ter.DeleteCommand.Parameters(6).Value~dulla^@204~ ject)
                Me.Adapter.Del~dulla^@204~ rameters(7).Value = System.DBNull.Val~dulla^@204~    Else
                Me.Adapter.D~dulla^@204~ Parameters(6).Value = CType(0,Object)~dulla^@204~      Me.Adapter.DeleteCommand.Paramet~dulla^@204~ = CType(Original_SellingPrice2,String~dulla^@204~   End If
            If (Original_Qt~dulla^@204~ othing) Then
                Me.Adap~dulla^@204~ mand.Parameters(8).Value = CType(1,Ob~dulla^@204~           Me.Adapter.DeleteCommand.Pa~dulla^@204~ alue = System.DBNull.Value
         ~dulla^@204~             Me.Adapter.DeleteCommand.~dulla^@204~ .Value = CType(0,Object)
           ~dulla^@204~ er.DeleteCommand.Parameters(9).Value ~dulla^@204~ nal_QtyAtShop1,String)
            E~dulla^@204~       If (Original_QtyAtShop2 Is Noth~dulla^@204~               Me.Adapter.DeleteComman~dulla^@204~ 10).Value = CType(1,Object)
        ~dulla^@204~ apter.DeleteCommand.Parameters(11).Va~dulla^@204~ DBNull.Value
            Else
     ~dulla^@204~ .Adapter.DeleteCommand.Parameters(10)~dulla^@204~ e(0,Object)
                Me.Adapt~dulla^@204~ and.Parameters(11).Value = CType(Orig~dulla^@204~ p2,String)
            End If
     ~dulla^@204~ iginal_QtyAtStore Is Nothing) Then
 ~dulla^@204~   Me.Adapter.DeleteCommand.Parameters~dulla^@204~ CType(1,Object)
                Me.A~dulla^@204~ Command.Parameters(13).Value = System~dulla^@204~ 
            Else
                M~dulla^@204~ eteCommand.Parameters(12).Value = CTy~dulla^@204~ 
                Me.Adapter.DeleteCom~dulla^@204~ rs(13).Value = CType(Original_QtyAtSt~dulla^@204~             End If
            If (O~dulla^@204~ Quantity Is Nothing) Then
          ~dulla^@204~ ter.DeleteCommand.Parameters(14).Valu~dulla^@204~ bject)
                Me.Adapter.De~dulla^@204~ arameters(15).Value = System.DBNull.V~dulla^@204~      Else
                Me.Adapter~dulla^@204~ d.Parameters(14).Value = CType(0,Obje~dulla^@204~         Me.Adapter.DeleteCommand.Para~dulla^@204~ lue = CType(Original_TotalQuantity,St~dulla^@204~       End If
            If (Origina~dulla^@204~ l Is Nothing) Then
                M~dulla^@204~ eteCommand.Parameters(16).Value = CTy~dulla^@204~ 
                Me.Adapter.DeleteCom~dulla^@204~ rs(17).Value = System.DBNull.Value
 ~dulla^@204~ se
                Me.Adapter.Delete~dulla^@204~ eters(16).Value = CType(0,Object)
  ~dulla^@204~  Me.Adapter.DeleteCommand.Parameters(~dulla^@204~ Type(Original_ReorderLevel,String)
 ~dulla^@204~ d If
            If (Original_ShelfN~dulla^@204~  Then
                Me.Adapter.Del~dulla^@204~ rameters(18).Value = CType(1,Object)~dulla^@204~     Me.Adapter.DeleteCommand.Paramete~dulla^@204~ = System.DBNull.Value
            El~dulla^@204~        Me.Adapter.DeleteCommand.Param~dulla^@204~ ue = CType(0,Object)
               ~dulla^@204~ eleteCommand.Parameters(19).Value = C~dulla^@204~ _ShelfNo,String)
            End If~dulla^@204~ Dim previousConnectionState As System~dulla^@204~ ionState = Me.Adapter.DeleteCommand.C~dulla^@204~ te
            If ((Me.Adapter.Delet~dulla^@204~ ection.State And System.Data.Connecti~dulla^@204~   _
                        <> Syste~dulla^@204~ tionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open~dulla^@204~ End If
            Try 
           ~dulla^@204~ rnValue As Integer = Me.Adapter.Delet~dulla^@204~ uteNonQuery
                Return r~dulla^@204~            Finally
                I~dulla^@204~ nnectionState = System.Data.Connectio~dulla^@204~ ) Then
                    Me.Adapte~dulla^@204~ nd.Connection.Close
                ~dulla^@204~        End Try
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute(),  _
         System.Component~dulla^@204~ HelpKeywordAttribute("vs.data.TableAd~dulla^@204~          System.ComponentModel.DataOb~dulla^@204~ ribute(System.ComponentModel.DataObje~dulla^@204~ Insert, true)>  _
        Public Ove~dulla^@204~ dable Function Insert(ByVal PartNo As~dulla^@204~ l Description As String, ByVal Price ~dulla^@204~ Val SellingPrice1 As String, ByVal Se~dulla^@204~ s String, ByVal QtyAtShop1 As String,~dulla^@204~ hop2 As String, ByVal QtyAtStore As S~dulla^@204~ TotalQuantity As String, ByVal Reorde~dulla^@204~ ing, ByVal ShelfNo As String) As Inte~dulla^@204~     If (PartNo Is Nothing) Then
    ~dulla^@204~ hrow New System.ArgumentNullException~dulla^@204~            Else
                Me.A~dulla^@204~ Command.Parameters(0).Value = CType(P~dulla^@204~ 
            End If
            If ~dulla^@204~ Is Nothing) Then
                Thr~dulla^@204~ .ArgumentNullException("Description")~dulla^@204~  Else
                Me.Adapter.Ins~dulla^@204~ rameters(1).Value = CType(Description~dulla^@204~          End If
            If (Pric~dulla^@204~  Then
                Me.Adapter.Ins~dulla^@204~ rameters(2).Value = System.DBNull.Val~dulla^@204~    Else
                Me.Adapter.I~dulla^@204~ Parameters(2).Value = CType(Price,Str~dulla^@204~      End If
            If (SellingP~dulla^@204~ ing) Then
                Me.Adapter~dulla^@204~ d.Parameters(3).Value = System.DBNull~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(3).Value = CType(Selli~dulla^@204~ ng)
            End If
            ~dulla^@204~ ice2 Is Nothing) Then
              ~dulla^@204~ InsertCommand.Parameters(4).Value = S~dulla^@204~ Value
            Else
            ~dulla^@204~ r.InsertCommand.Parameters(4).Value =~dulla^@204~ gPrice2,String)
            End If
~dulla^@204~ f (QtyAtShop1 Is Nothing) Then
     ~dulla^@204~ .Adapter.InsertCommand.Parameters(5).~dulla^@204~ m.DBNull.Value
            Else
   ~dulla^@204~ Me.Adapter.InsertCommand.Parameters(5~dulla^@204~ pe(QtyAtShop1,String)
            En~dulla^@204~      If (QtyAtShop2 Is Nothing) Then~dulla^@204~     Me.Adapter.InsertCommand.Paramete~dulla^@204~  System.DBNull.Value
            Els~dulla^@204~       Me.Adapter.InsertCommand.Parame~dulla^@204~  = CType(QtyAtShop2,String)
        ~dulla^@204~            If (QtyAtStore Is Nothing)~dulla^@204~           Me.Adapter.InsertCommand.Pa~dulla^@204~ alue = System.DBNull.Value
         ~dulla^@204~             Me.Adapter.InsertCommand.~dulla^@204~ .Value = CType(QtyAtStore,String)
  ~dulla^@204~  If
            If (TotalQuantity Is~dulla^@204~ n
                Me.Adapter.InsertC~dulla^@204~ ters(8).Value = System.DBNull.Value
~dulla^@204~ lse
                Me.Adapter.Inser~dulla^@204~ meters(8).Value = CType(TotalQuantity~dulla^@204~          End If
            If (Reor~dulla^@204~ othing) Then
                Me.Adap~dulla^@204~ mand.Parameters(9).Value = System.DBN~dulla^@204~           Else
                Me.Ad~dulla^@204~ ommand.Parameters(9).Value = CType(Re~dulla^@204~ ring)
            End If
          ~dulla^@204~  Is Nothing) Then
                Me~dulla^@204~ rtCommand.Parameters(10).Value = Syst~dulla^@204~ ue
            Else
               ~dulla^@204~ nsertCommand.Parameters(10).Value = C~dulla^@204~ String)
            End If
        ~dulla^@204~ ousConnectionState As System.Data.Con~dulla^@204~ = Me.Adapter.InsertCommand.Connection~dulla^@204~        If ((Me.Adapter.InsertCommand.~dulla^@204~ ate And System.Data.ConnectionState.O~dulla^@204~                     <> System.Data.Co~dulla^@204~ .Open) Then
                Me.Adapt~dulla^@204~ and.Connection.Open
            End ~dulla^@204~    Try 
                Dim returnVa~dulla^@204~ r = Me.Adapter.InsertCommand.ExecuteN~dulla^@204~             Return returnValue
     ~dulla^@204~ y
                If (previousConnec~dulla^@204~ ystem.Data.ConnectionState.Closed) Th~dulla^@204~            Me.Adapter.InsertCommand.C~dulla^@204~ se
                End If
         ~dulla^@204~        End Function
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~     System.ComponentModel.Design.Help~dulla^@204~ ute("vs.data.TableAdapter"),  _
    ~dulla^@204~ omponentModel.DataObjectMethodAttribu~dulla^@204~ ponentModel.DataObjectMethodType.Upda~dulla^@204~ 
        Public Overloads Overridabl~dulla^@204~ date( _
                    ByVal Pa~dulla^@204~ g,  _
                    ByVal Desc~dulla^@204~ ring,  _
                    ByVal P~dulla^@204~ g,  _
                    ByVal Sell~dulla^@204~ String,  _
                    ByVal~dulla^@204~ 2 As String,  _
                    ~dulla^@204~ op1 As String,  _
                  ~dulla^@204~ Shop2 As String,  _
                ~dulla^@204~ AtStore As String,  _
              ~dulla^@204~ otalQuantity As String,  _
         ~dulla^@204~ Val ReorderLevel As String,  _
     ~dulla^@204~   ByVal ShelfNo As String,  _
      ~dulla^@204~  ByVal Original_PartNo As String,  _~dulla^@204~         ByVal Original_Description As~dulla^@204~                     ByVal Original_Pr~dulla^@204~ ,  _
                    ByVal Origi~dulla^@204~ ice1 As String,  _
                 ~dulla^@204~ inal_SellingPrice2 As String,  _
   ~dulla^@204~     ByVal Original_QtyAtShop1 As Stri~dulla^@204~                ByVal Original_QtyAtSh~dulla^@204~ ,  _
                    ByVal Origi~dulla^@204~ e As String,  _
                    ~dulla^@204~ l_TotalQuantity As String,  _
      ~dulla^@204~  ByVal Original_ReorderLevel As Strin~dulla^@204~               ByVal Original_ShelfNo ~dulla^@204~  Integer
            If (PartNo Is N~dulla^@204~ 
                Throw New System.Arg~dulla^@204~ ption("PartNo")
            Else
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ ype(PartNo,String)
            End I~dulla^@204~   If (Description Is Nothing) Then
 ~dulla^@204~   Throw New System.ArgumentNullExcept~dulla^@204~ ion")
            Else
            ~dulla^@204~ r.UpdateCommand.Parameters(1).Value =~dulla^@204~ ption,String)
            End If
  ~dulla^@204~ (Price Is Nothing) Then
            ~dulla^@204~ r.UpdateCommand.Parameters(2).Value =~dulla^@204~ l.Value
            Else
          ~dulla^@204~ ter.UpdateCommand.Parameters(2).Value~dulla^@204~ e,String)
            End If
      ~dulla^@204~ lingPrice1 Is Nothing) Then
        ~dulla^@204~ apter.UpdateCommand.Parameters(3).Val~dulla^@204~ BNull.Value
            Else
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(3).V~dulla^@204~ SellingPrice1,String)
            En~dulla^@204~      If (SellingPrice2 Is Nothing) Th~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ e = System.DBNull.Value
            ~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ lue = CType(SellingPrice2,String)
  ~dulla^@204~  If
            If (QtyAtShop1 Is No~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(5).Value = System.DBNull.Value
   ~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(5).Value = CType(QtyAtShop1,Strin~dulla^@204~    End If
            If (QtyAtShop2~dulla^@204~ Then
                Me.Adapter.Upda~dulla^@204~ ameters(6).Value = System.DBNull.Valu~dulla^@204~   Else
                Me.Adapter.Up~dulla^@204~ arameters(6).Value = CType(QtyAtShop2~dulla^@204~          End If
            If (QtyA~dulla^@204~ hing) Then
                Me.Adapte~dulla^@204~ nd.Parameters(7).Value = System.DBNul~dulla^@204~         Else
                Me.Adap~dulla^@204~ mand.Parameters(7).Value = CType(QtyAtStore,String)
            End If
      ~dulla^@204~ alQuantity Is Nothing) Then
        ~dulla^@204~ apter.UpdateCommand.Parameters(8).Val~dulla^@204~ BNull.Value
            Else
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(8).V~dulla^@204~ TotalQuantity,String)
            En~dulla^@204~      If (ReorderLevel Is Nothing) The~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~  = System.DBNull.Value
            E~dulla^@204~         Me.Adapter.UpdateCommand.Para~dulla^@204~ ue = CType(ReorderLevel,String)
    ~dulla^@204~ f
            If (ShelfNo Is Nothing~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ .Value = System.DBNull.Value
       ~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 10).Value = CType(ShelfNo,String)
  ~dulla^@204~  If
            If (Original_PartNo ~dulla^@204~ hen
                Throw New System~dulla^@204~ Exception("Original_PartNo")
       ~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 11).Value = CType(Original_PartNo,Str~dulla^@204~      End If
            If (Original~dulla^@204~ Is Nothing) Then
                Thr~dulla^@204~ .ArgumentNullException("Original_Desc~dulla^@204~           Else
                Me.Ad~dulla^@204~ ommand.Parameters(12).Value = CType(O~dulla^@204~ iption,String)
            End If
 ~dulla^@204~  (Original_Price Is Nothing) Then
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ Type(1,Object)
                Me.Ad~dulla^@204~ ommand.Parameters(14).Value = System.~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(13).Value = CTyp~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(14).Value = CType(Original_Price,St~dulla^@204~       End If
            If (Origina~dulla^@204~ e1 Is Nothing) Then
                ~dulla^@204~ dateCommand.Parameters(15).Value = CT~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(16).Value = System.DBNull.Value
~dulla^@204~ lse
                Me.Adapter.Updat~dulla^@204~ meters(15).Value = CType(0,Object)
 ~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ CType(Original_SellingPrice1,String)~dulla^@204~ End If
            If (Original_Sell~dulla^@204~ Nothing) Then
                Me.Ada~dulla^@204~ mmand.Parameters(17).Value = CType(1,~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ ).Value = System.DBNull.Value
      ~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ (17).Value = CType(0,Object)
       ~dulla^@204~ dapter.UpdateCommand.Parameters(18).V~dulla^@204~ Original_SellingPrice2,String)
     ~dulla^@204~ 
            If (Original_QtyAtShop1~dulla^@204~ Then
                Me.Adapter.Upda~dulla^@204~ ameters(19).Value = CType(1,Object)
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~  System.DBNull.Value
            Els~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~ e = CType(0,Object)
                ~dulla^@204~ dateCommand.Parameters(20).Value = CT~dulla^@204~ QtyAtShop1,String)
            End I~dulla^@204~   If (Original_QtyAtShop2 Is Nothing)~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ Value = CType(1,Object)
            ~dulla^@204~ r.UpdateCommand.Parameters(22).Value ~dulla^@204~ ll.Value
            Else
         ~dulla^@204~ pter.UpdateCommand.Parameters(21).Val~dulla^@204~ Object)
                Me.Adapter.U~dulla^@204~ Parameters(22).Value = CType(Original~dulla^@204~ tring)
            End If
         ~dulla^@204~ al_QtyAtStore Is Nothing) Then
     ~dulla^@204~ .Adapter.UpdateCommand.Parameters(23)~dulla^@204~ e(1,Object)
                Me.Adapt~dulla^@204~ and.Parameters(24).Value = System.DBN~dulla^@204~           Else
                Me.Ad~dulla^@204~ ommand.Parameters(23).Value = CType(0~dulla^@204~              Me.Adapter.UpdateCommand~dulla^@204~ 4).Value = CType(Original_QtyAtStore,~dulla^@204~         End If
            If (Origi~dulla^@204~ tity Is Nothing) Then
              ~dulla^@204~ UpdateCommand.Parameters(25).Value = ~dulla^@204~ t)
                Me.Adapter.Update~dulla^@204~ eters(26).Value = System.DBNull.Value~dulla^@204~  Else
                Me.Adapter.Upd~dulla^@204~ rameters(25).Value = CType(0,Object)~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~ = CType(Original_TotalQuantity,String~dulla^@204~   End If
            If (Original_Re~dulla^@204~  Nothing) Then
                Me.Ad~dulla^@204~ ommand.Parameters(27).Value = CType(1~dulla^@204~              Me.Adapter.UpdateCommand~dulla^@204~ 8).Value = System.DBNull.Value
     ~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(27).Value = CType(0,Object)
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(28).~dulla^@204~ (Original_ReorderLevel,String)
     ~dulla^@204~ 
            If (Original_ShelfNo Is~dulla^@204~ n
                Me.Adapter.UpdateC~dulla^@204~ ters(29).Value = CType(1,Object)
   ~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(3~dulla^@204~ stem.DBNull.Value
            Else
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~  CType(0,Object)
                Me.~dulla^@204~ eCommand.Parameters(30).Value = CType~dulla^@204~ lfNo,String)
            End If
   ~dulla^@204~ previousConnectionState As System.Dat~dulla^@204~ tate = Me.Adapter.UpdateCommand.Conne~dulla^@204~             If ((Me.Adapter.UpdateCom~dulla^@204~ on.State And System.Data.ConnectionSt~dulla^@204~ 
                        <> System.Da~dulla^@204~ State.Open) Then
                Me.~dulla^@204~ eCommand.Connection.Open
           ~dulla^@204~         Try 
                Dim ret~dulla^@204~ nteger = Me.Adapter.UpdateCommand.Exe~dulla^@204~ 
                Return returnValue
~dulla^@204~ inally
                If (previousC~dulla^@204~ e = System.Data.ConnectionState.Close~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ n.Close
                End If
    ~dulla^@204~ ry
        End Function
    End Class
End Namespace
