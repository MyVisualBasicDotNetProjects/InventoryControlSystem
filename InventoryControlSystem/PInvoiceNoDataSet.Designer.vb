'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.312
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("PInvoiceNoDataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class PInvoiceNoDataSet
    Inherits System.Data.DataSet
    
    Private tablePurchase As PurchaseDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Purchase")) Is Nothing) Then
                MyBase.Tables.Add(New PurchaseDataTable(ds.Tables("Purchase")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Purchase() As PurchaseDataTable
        Get
            Return Me.tablePurchase
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As PInvoiceNoDataSet = CType(MyBase.Clone,PInvoiceNoDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Purchase")) Is Nothing) Then
                MyBase.Tables.Add(New PurchaseDataTable(ds.Tables("Purchase")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePurchase = CType(MyBase.Tables("Purchase"),PurchaseDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePurchase) Is Nothing) Then
                Me.tablePurchase.InitVars
            End If
        ~dulla^@204~ ~dulla^@204~ 
    <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
    Private Sub InitClass(~dulla^@204~ .DataSetName = "PInvoiceNoDataSet"
 ~dulla^@204~ fix = ""
        Me.Namespace = "htt~dulla^@204~ rg/PInvoiceNoDataSet.xsd"
        Me~dulla^@204~ raints = true
        Me.SchemaSeria~dulla^@204~ = System.Data.SchemaSerializationMode~dulla^@204~ a
        Me.tablePurchase = New Pur~dulla^@204~ e
        MyBase.Tables.Add(Me.table~dulla^@204~   End Sub
    
    <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
    Privat~dulla^@204~ ouldSerializePurchase() As Boolean
 ~dulla^@204~  false
    End Function
    
    <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ ate Sub SchemaChanged(ByVal sender As~dulla^@204~ l e As System.ComponentModel.Collecti~dulla^@204~ Args)
        If (e.Action = System.~dulla^@204~ l.CollectionChangeAction.Remove) Then~dulla^@204~  Me.InitVars
        End If
    End~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
    Public Shared Function G~dulla^@204~ tSchema(ByVal xs As System.Xml.Schema~dulla^@204~ ) As System.Xml.Schema.XmlSchemaCompl~dulla^@204~    Dim ds As PInvoiceNoDataSet = New ~dulla^@204~ aSet
        Dim type As System.Xml.~dulla^@204~ emaComplexType = New System.Xml.Schem~dulla^@204~ mplexType
        Dim sequence As Sy~dulla^@204~ ma.XmlSchemaSequence = New System.Xml~dulla^@204~ hemaSequence
        xs.Add(ds.GetSc~dulla^@204~ ble)
        Dim any As System.Xml.S~dulla^@204~ maAny = New System.Xml.Schema.XmlSche~dulla^@204~   any.Namespace = ds.Namespace
     ~dulla^@204~ tems.Add(any)
        type.Particle ~dulla^@204~        Return type
    End Function~dulla^@204~ blic Delegate Sub PurchaseRowChangeEv~dulla^@204~ Val sender As Object, ByVal e As Purc~dulla^@204~ Event)
    
    <System.CodeDom.Com~dulla^@204~ edCodeAttribute("System.Data.Design.T~dulla^@204~ nerator", "2.0.0.0"),  _
     System~dulla^@204~ (),  _
     System.Xml.Serialization~dulla^@204~ viderAttribute("GetTypedTableSchema")~dulla^@204~ tial Public Class PurchaseDataTable
~dulla^@204~ its System.Data.DataTable
        Im~dulla^@204~ em.Collections.IEnumerable
        ~dulla^@204~ ate columnPurchaseInvoiceNo As System~dulla^@204~ umn
        
        Private column~dulla^@204~ e As System.Data.DataColumn
        ~dulla^@204~ vate columnTotalAmount As System.Data~dulla^@204~         
        Private columnFrieg~dulla^@204~ ystem.Data.DataColumn
        
    ~dulla^@204~ olumnMiscellaneousCost As System.Data~dulla^@204~         
        Private columnGrand~dulla^@204~ em.Data.DataColumn
        
       ~dulla^@204~ mnSupplierID As System.Data.DataColum~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Sub New(~dulla^@204~   MyBase.New
            Me.TableNam~dulla^@204~ "
            Me.BeginInit
        ~dulla^@204~ ass
            Me.EndInit
        ~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Friend Su~dulla^@204~ able As System.Data.DataTable)
     ~dulla^@204~ .New
            Me.TableName = tabl~dulla^@204~             If (table.CaseSensitive <~dulla^@204~ et.CaseSensitive) Then
             ~dulla^@204~ sitive = table.CaseSensitive
       ~dulla^@204~             If (table.Locale.ToString~dulla^@204~ aSet.Locale.ToString) Then
         ~dulla^@204~ ale = table.Locale
            End I~dulla^@204~   If (table.Namespace <> table.DataSe~dulla^@204~ Then
                Me.Namespace = ~dulla^@204~ ce
            End If
            M~dulla^@204~ ble.Prefix
            Me.MinimumCap~dulla^@204~ .MinimumCapacity
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Protected Sub New(By~dulla^@204~ ystem.Runtime.Serialization.Serializa~dulla^@204~ al context As System.Runtime.Serializ~dulla^@204~ ngContext)
            MyBase.New(in~dulla^@204~ 
            Me.InitVars
        End~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public ReadO~dulla^@204~ PurchaseInvoiceNoColumn() As System.D~dulla^@204~ n
            Get
                R~dulla^@204~ mnPurchaseInvoiceNo
            End ~dulla^@204~ End Property
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic ReadOnly Property DateOfPurchaseCo~dulla^@204~ tem.Data.DataColumn
            Get~dulla^@204~     Return Me.columnDateOfPurchase
 ~dulla^@204~ d Get
        End Property
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public ReadOnly Property T~dulla^@204~ umn() As System.Data.DataColumn
    ~dulla^@204~                 Return Me.columnTotal~dulla^@204~        End Get
        End Property~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public ReadOnly P~dulla^@204~ htChargeColumn() As System.Data.DataC~dulla^@204~       Get
                Return Me.~dulla^@204~ Charge
            End Get
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ roperty MiscellaneousCostColumn() As ~dulla^@204~ ataColumn
            Get
         ~dulla^@204~  Me.columnMiscellaneousCost
        ~dulla^@204~         End Property
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public ReadOnly Property GrandTot~dulla^@204~  System.Data.DataColumn
            ~dulla^@204~         Return Me.columnGrandTotal
 ~dulla^@204~ d Get
        End Property
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public ReadOnly Property S~dulla^@204~ mn() As System.Data.DataColumn
     ~dulla^@204~                Return Me.columnSuppli~dulla^@204~      End Get
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te(),  _
         System.ComponentMo~dulla^@204~ (false)>  _
        Public ReadOnly ~dulla^@204~ t() As Integer
            Get
    ~dulla^@204~ eturn Me.Rows.Count
            End ~dulla^@204~ End Property
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic Default ReadOnly Property Item(ByV~dulla^@204~ nteger) As PurchaseRow
            G~dulla^@204~        Return CType(Me.Rows(index),Pu~dulla^@204~            End Get
        End Prope~dulla^@204~ 
        Public Event PurchaseRowCha~dulla^@204~ haseRowChangeEventHandler
        
~dulla^@204~ c Event PurchaseRowChanged As Purchas~dulla^@204~ ntHandler
        
        Public E~dulla^@204~ RowDeleting As PurchaseRowChangeEvent~dulla^@204~     
        Public Event PurchaseRo~dulla^@204~ urchaseRowChangeEventHandler
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Overloads Sub AddP~dulla^@204~ Val row As PurchaseRow)
            ~dulla^@204~ ow)
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Overloads Function AddPurc~dulla^@204~  PurchaseInvoiceNo As String, ByVal D~dulla^@204~  As Date, ByVal TotalAmount As Decima~dulla^@204~ ghtCharge As Decimal, ByVal Miscellan~dulla^@204~ ecimal, ByVal GrandTotal As Decimal, ~dulla^@204~ rID As String) As PurchaseRow
      ~dulla^@204~ PurchaseRow As PurchaseRow = CType(Me~dulla^@204~ aseRow)
            rowPurchaseRow.I~dulla^@204~ w Object() {PurchaseInvoiceNo, DateOf~dulla^@204~ alAmount, FrieghtCharge, Miscellaneou~dulla^@204~ otal, SupplierID}
            Me.Row~dulla^@204~ haseRow)
            Return rowPurch~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Function FindByPurchaseInvoiceN~dulla^@204~ aseInvoiceNo As String) As PurchaseRo~dulla^@204~   Return CType(Me.Rows.Find(New Objec~dulla^@204~ InvoiceNo}),PurchaseRow)
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ unction GetEnumerator() As System.Col~dulla^@204~ merator Implements System.Collections~dulla^@204~ GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Overrides F~dulla^@204~ () As System.Data.DataTable
        ~dulla^@204~ s PurchaseDataTable = CType(MyBase.Cl~dulla^@204~ ataTable)
            cln.InitVars
~dulla^@204~ eturn cln
        End Function
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Protected Overrides Fu~dulla^@204~ Instance() As System.Data.DataTable
~dulla^@204~ eturn New PurchaseDataTable
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Frie~dulla^@204~ rs()
            Me.columnPurchaseIn~dulla^@204~ ase.Columns("PurchaseInvoiceNo")
   ~dulla^@204~ olumnDateOfPurchase = MyBase.Columns(~dulla^@204~ se")
            Me.columnTotalAmoun~dulla^@204~ lumns("TotalAmount")
            Me.~dulla^@204~ Charge = MyBase.Columns("FrieghtCharg~dulla^@204~     Me.columnMiscellaneousCost = MyBa~dulla^@204~ iscellaneousCost")
            Me.co~dulla^@204~ l = MyBase.Columns("GrandTotal")
   ~dulla^@204~ olumnSupplierID = MyBase.Columns("Sup~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ vate Sub InitClass()
            Me.~dulla^@204~ eInvoiceNo = New System.Data.DataColu~dulla^@204~ nvoiceNo", GetType(String), Nothing, ~dulla^@204~ appingType.Element)
            MyBa~dulla^@204~ d(Me.columnPurchaseInvoiceNo)
      ~dulla^@204~ mnDateOfPurchase = New System.Data.Da~dulla^@204~ eOfPurchase", GetType(Date), Nothing,~dulla^@204~ MappingType.Element)
            MyB~dulla^@204~ dd(Me.columnDateOfPurchase)
        ~dulla^@204~ TotalAmount = New System.Data.DataCol~dulla^@204~ unt", GetType(Decimal), Nothing, Syst~dulla^@204~ ngType.Element)
            MyBase.C~dulla^@204~ .columnTotalAmount)
            Me.c~dulla^@204~ harge = New System.Data.DataColumn("F~dulla^@204~ , GetType(Decimal), Nothing, System.D~dulla^@204~ pe.Element)
            MyBase.Colum~dulla^@204~ umnFrieghtCharge)
            Me.col~dulla^@204~ ousCost = New System.Data.DataColumn(~dulla^@204~ sCost", GetType(Decimal), Nothing, Sy~dulla^@204~ pingType.Element)
            MyBase~dulla^@204~ Me.columnMiscellaneousCost)
        ~dulla^@204~ GrandTotal = New System.Data.DataColu~dulla^@204~ l", GetType(Decimal), Nothing, System~dulla^@204~ Type.Element)
            MyBase.Col~dulla^@204~ olumnGrandTotal)
            Me.colu~dulla^@204~ = New System.Data.DataColumn("Supplie~dulla^@204~ (String), Nothing, System.Data.Mappin~dulla^@204~ )
            MyBase.Columns.Add(Me.~dulla^@204~ rID)
            Me.Constraints.Add(~dulla^@204~ ta.UniqueConstraint("Constraint1", Ne~dulla^@204~ .DataColumn() {Me.columnPurchaseInvoi~dulla^@204~ 
            Me.columnPurchaseInvoic~dulla^@204~ ll = false
            Me.columnPurc~dulla^@204~ .Unique = true
            Me.column~dulla^@204~ ceNo.MaxLength = 20
            Me.c~dulla^@204~ rchase.AllowDBNull = false
         ~dulla^@204~ otalAmount.AllowDBNull = false
     ~dulla^@204~ umnFrieghtCharge.AllowDBNull = false~dulla^@204~ Me.columnMiscellaneousCost.AllowDBNul~dulla^@204~           Me.columnGrandTotal.AllowDB~dulla^@204~ 
            Me.columnSupplierID.Allo~dulla^@204~ se
            Me.columnSupplierID.M~dulla^@204~ 
        End Sub
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Function NewPurchaseRow() As ~dulla^@204~             Return CType(Me.NewRow,Pu~dulla^@204~        End Function
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Protected Overrides Function NewRo~dulla^@204~ ByVal builder As System.Data.DataRowB~dulla^@204~ stem.Data.DataRow
            Return~dulla^@204~ Row(builder)
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Protected Overrides~dulla^@204~ RowType() As System.Type
           ~dulla^@204~ pe(PurchaseRow)
        End Function~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Protected Overri~dulla^@204~ Changed(ByVal e As System.Data.DataRo~dulla^@204~ rgs)
            MyBase.OnRowChanged~dulla^@204~     If (Not (Me.PurchaseRowChangedEve~dulla^@204~ g) Then
                RaiseEvent P~dulla^@204~ nged(Me, New PurchaseRowChangeEvent(C~dulla^@204~ rchaseRow), e.Action))
            E~dulla^@204~   End Sub
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ ed Overrides Sub OnRowChanging(ByVal ~dulla^@204~ ata.DataRowChangeEventArgs)
        ~dulla^@204~ RowChanging(e)
            If (Not (~dulla^@204~ wChangingEvent) Is Nothing) Then
   ~dulla^@204~ RaiseEvent PurchaseRowChanging(Me, Ne~dulla^@204~ ChangeEvent(CType(e.Row,PurchaseRow),~dulla^@204~             End If
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Protected Override~dulla^@204~ leted(ByVal e As System.Data.DataRowC~dulla^@204~ s)
            MyBase.OnRowDeleted(e~dulla^@204~   If (Not (Me.PurchaseRowDeletedEvent~dulla^@204~  Then
                RaiseEvent Pur~dulla^@204~ ed(Me, New PurchaseRowChangeEvent(CTy~dulla^@204~ haseRow), e.Action))
            End~dulla^@204~ End Sub
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~  Overrides Sub OnRowDeleting(ByVal e ~dulla^@204~ a.DataRowChangeEventArgs)
          ~dulla^@204~ wDeleting(e)
            If (Not (Me~dulla^@204~ eletingEvent) Is Nothing) Then
     ~dulla^@204~ iseEvent PurchaseRowDeleting(Me, New ~dulla^@204~ angeEvent(CType(e.Row,PurchaseRow), e~dulla^@204~           End If
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Sub RemovePur~dulla^@204~ l row As PurchaseRow)
            Me~dulla^@204~ row)
        End Sub
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Shared Function GetTypedT~dulla^@204~ Val xs As System.Xml.Schema.XmlSchema~dulla^@204~ m.Xml.Schema.XmlSchemaComplexType
  ~dulla^@204~  type As System.Xml.Schema.XmlSchemaC~dulla^@204~ New System.Xml.Schema.XmlSchemaComple~dulla^@204~       Dim sequence As System.Xml.Sche~dulla^@204~ equence = New System.Xml.Schema.XmlSc~dulla^@204~ 
            Dim ds As PInvoiceNoData~dulla^@204~ voiceNoDataSet
            xs.Add(ds~dulla^@204~ ializable)
            Dim any1 As S~dulla^@204~ ema.XmlSchemaAny = New System.Xml.Sch~dulla^@204~ Any
            any1.Namespace = "ht~dulla^@204~ rg/2001/XMLSchema"
            any1.~dulla^@204~ ew Decimal(0)
            any1.MaxOc~dulla^@204~ l.MaxValue
            any1.ProcessC~dulla^@204~ tem.Xml.Schema.XmlSchemaContentProces~dulla^@204~          sequence.Items.Add(any1)
  ~dulla^@204~  any2 As System.Xml.Schema.XmlSchemaA~dulla^@204~ em.Xml.Schema.XmlSchemaAny
         ~dulla^@204~ pace = "urn:schemas-microsoft-com:xml~dulla^@204~ 
            any2.MinOccurs = New De~dulla^@204~          any2.ProcessContents = Syste~dulla^@204~ XmlSchemaContentProcessing.Lax
     ~dulla^@204~ ce.Items.Add(any2)
            Dim a~dulla^@204~ System.Xml.Schema.XmlSchemaAttribute ~dulla^@204~ Xml.Schema.XmlSchemaAttribute
      ~dulla^@204~ te1.Name = "namespace"
            a~dulla^@204~ edValue = ds.Namespace
            t~dulla^@204~ s.Add(attribute1)
            Dim at~dulla^@204~ ystem.Xml.Schema.XmlSchemaAttribute =~dulla^@204~ ml.Schema.XmlSchemaAttribute
       ~dulla^@204~ e2.Name = "tableTypeName"
          ~dulla^@204~ FixedValue = "PurchaseDataTable"
   ~dulla^@204~ .Attributes.Add(attribute2)
        ~dulla^@204~ icle = sequence
            Return t~dulla^@204~ End Function
    End Class
    
  ~dulla^@204~ eDom.Compiler.GeneratedCodeAttribute(~dulla^@204~ Design.TypedDataSetGenerator", "2.0.0~dulla^@204~  Partial Public Class PurchaseRow
  ~dulla^@204~ s System.Data.DataRow
        
    ~dulla^@204~ ablePurchase As PurchaseDataTable
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Friend Sub New(ByVal~dulla^@204~ .Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePurchase~dulla^@204~ able,PurchaseDataTable)
        End ~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Proper~dulla^@204~ voiceNo() As String
            Get~dulla^@204~     Return CType(Me(Me.tablePurchase.~dulla^@204~ ceNoColumn),String)
            End ~dulla^@204~     Set
                Me(Me.tableP~dulla^@204~ aseInvoiceNoColumn) = value
        ~dulla^@204~         End Property
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Property DateOfPurchase() ~dulla^@204~         Get
                Return C~dulla^@204~ blePurchase.DateOfPurchaseColumn),Dat~dulla^@204~    End Get
            Set
        ~dulla^@204~ .tablePurchase.DateOfPurchaseColumn) ~dulla^@204~         End Set
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Property ~dulla^@204~  As Decimal
            Get
       ~dulla^@204~ rn CType(Me(Me.tablePurchase.TotalAmo~dulla^@204~ cimal)
            End Get
        ~dulla^@204~             Me(Me.tablePurchase.Total~dulla^@204~  = value
            End Set
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  FrieghtCharge() As Decimal
        ~dulla^@204~             Return CType(Me(Me.tableP~dulla^@204~ htChargeColumn),Decimal)
           ~dulla^@204~          Set
                Me(Me.t~dulla^@204~ FrieghtChargeColumn) = value
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Property MiscellaneousCos~dulla^@204~ l
            Get
                R~dulla^@204~ e(Me.tablePurchase.MiscellaneousCostC~dulla^@204~ l)
            End Get
            ~dulla^@204~         Me(Me.tablePurchase.Miscellan~dulla^@204~ n) = value
            End Set
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ty GrandTotal() As Decimal
         ~dulla^@204~            Return CType(Me(Me.tablePu~dulla^@204~ otalColumn),Decimal)
            End~dulla^@204~      Set
                Me(Me.table~dulla^@204~ dTotalColumn) = value
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Property SupplierID() As String~dulla^@204~ Get
                Return CType(Me(~dulla^@204~ ase.SupplierIDColumn),String)
      ~dulla^@204~ 
            Set
                Me~dulla^@204~ hase.SupplierIDColumn) = value
     ~dulla^@204~ t
        End Property
    End Clas~dulla^@204~ <System.CodeDom.Compiler.GeneratedCod~dulla^@204~ ystem.Data.Design.TypedDataSetGenerat~dulla^@204~ ")>  _
    Public Class PurchaseRowC~dulla^@204~        Inherits System.EventArgs
   ~dulla^@204~   Private eventRow As PurchaseRow
  ~dulla^@204~    Private eventAction As System.Data~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~ ByVal row As PurchaseRow, ByVal actio~dulla^@204~ ata.DataRowAction)
            MyBas~dulla^@204~       Me.eventRow = row
            ~dulla^@204~ n = action
        End Sub
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public ReadOnly Property R~dulla^@204~ aseRow
            Get
            ~dulla^@204~ .eventRow
            End Get
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y Property Action() As System.Data.Da~dulla^@204~             Get
                Retu~dulla^@204~ tion
            End Get
        En~dulla^@204~    End Class
End Class

Namespace ~dulla^@204~ aSetTableAdapters
    
    <System.~dulla^@204~ ler.GeneratedCodeAttribute("System.Da~dulla^@204~ edDataSetGenerator", "2.0.0.0"),  _
~dulla^@204~ omponentModel.DesignerCategoryAttribu~dulla^@204~ _
     System.ComponentModel.Toolbox~dulla^@204~ _
     System.ComponentModel.DataObj~dulla^@204~ true),  _
     System.ComponentModel~dulla^@204~ ibute("Microsoft.VSDesigner.DataSourc~dulla^@204~ eAdapterDesigner, Microsoft.VSDesigne~dulla^@204~    ", Version=8.0.0.0, Culture=neutra~dulla^@204~ oken=b03f5f7f11d50a3a"),  _
     Sys~dulla^@204~ Model.Design.HelpKeywordAttribute("vs~dulla^@204~ apter")>  _
    Partial Public Class~dulla^@204~ eAdapter
        Inherits System.Com~dulla^@204~ omponent
        
        Private W~dulla^@204~ apter As System.Data.SqlClient.SqlDat~dulla^@204~      
        Private _connection As~dulla^@204~ SqlClient.SqlConnection
        
  ~dulla^@204~  _commandCollection() As System.Data.~dulla^@204~ Command
        
        Private _c~dulla^@204~ l As Boolean
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic Sub New()
            MyBase.New~dulla^@204~ Me.ClearBeforeFill = true
        En~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Private Rea~dulla^@204~ y Adapter() As System.Data.SqlClient.~dulla^@204~ r
            Get
                I~dulla^@204~ r Is Nothing) Then
                 ~dulla^@204~ pter
                End If
       ~dulla^@204~ rn Me._adapter
            End Get
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ operty Connection() As System.Data.Sq~dulla^@204~ nnection
            Get
          ~dulla^@204~ _connection Is Nothing) Then
       ~dulla^@204~ Me.InitConnection
                En~dulla^@204~          Return Me._connection
     ~dulla^@204~ t
            Set
                M~dulla^@204~  = value
                If (Not (Me~dulla^@204~ rtCommand) Is Nothing) Then
        ~dulla^@204~ e.Adapter.InsertCommand.Connection = ~dulla^@204~           End If
                If ~dulla^@204~ ter.DeleteCommand) Is Nothing) Then
~dulla^@204~        Me.Adapter.DeleteCommand.Conne~dulla^@204~ 
                End If
           ~dulla^@204~ (Me.Adapter.UpdateCommand) Is Nothing~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~  = value
                End If
   ~dulla^@204~ Dim i As Integer = 0
               ~dulla^@204~ < Me.CommandCollection.Length)
     ~dulla^@204~   If (Not (Me.CommandCollection(i)) I~dulla^@204~ en
                        CType(Me.~dulla^@204~ tion(i),System.Data.SqlClient.SqlComm~dulla^@204~ on = value
                    End I~dulla^@204~           i = (i + 1)
              ~dulla^@204~        End Set
        End Property~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Protected ReadOnl~dulla^@204~ mmandCollection() As System.Data.SqlC~dulla^@204~ and()
            Get
             ~dulla^@204~ mmandCollection Is Nothing) Then
   ~dulla^@204~     Me.InitCommandCollection
       ~dulla^@204~ If
                Return Me._comman~dulla^@204~             End Get
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Prope~dulla^@204~ reFill() As Boolean
            Get~dulla^@204~     Return Me._clearBeforeFill
     ~dulla^@204~ t
            Set
                M~dulla^@204~ eFill = value
            End Set
 ~dulla^@204~ operty
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ b InitAdapter()
            Me._adap~dulla^@204~ tem.Data.SqlClient.SqlDataAdapter
  ~dulla^@204~  tableMapping As System.Data.Common.D~dulla^@204~ ng = New System.Data.Common.DataTable~dulla^@204~         tableMapping.SourceTable = "T~dulla^@204~       tableMapping.DataSetTable = "Pu~dulla^@204~         tableMapping.ColumnMappings.A~dulla^@204~ nvoiceNo", "PurchaseInvoiceNo")
    ~dulla^@204~ Mapping.ColumnMappings.Add("DateOfPur~dulla^@204~ OfPurchase")
            tableMappin~dulla^@204~ ngs.Add("TotalAmount", "TotalAmount")~dulla^@204~  tableMapping.ColumnMappings.Add("Fri~dulla^@204~ "FrieghtCharge")
            tableMa~dulla^@204~ appings.Add("MiscellaneousCost", "Mis~dulla^@204~ t")
            tableMapping.ColumnMappings.Add("GrandTotal", "GrandTotal")
 ~dulla^@204~ bleMapping.ColumnMappings.Add("Suppli~dulla^@204~ ierID")
            Me._adapter.Tabl~dulla^@204~ (tableMapping)
            Me._adapt~dulla^@204~ and = New System.Data.SqlClient.SqlCo~dulla^@204~       Me._adapter.DeleteCommand.Conne~dulla^@204~ nnection
            Me._adapter.Del~dulla^@204~ mmandText = "DELETE FROM [dbo].[Purch~dulla^@204~ [PurchaseInvoiceNo] = @Original_Purch~dulla^@204~ 
                "iceNo) AND ([DateOf~dulla^@204~ Original_DateOfPurchase) AND ([TotalA~dulla^@204~  _ 
                "riginal_TotalAm~dulla^@204~ rieghtCharge] = @Original_FrieghtChar~dulla^@204~ ce"& _ 
                "llaneousCos~dulla^@204~ l_MiscellaneousCost) AND ([GrandTotal~dulla^@204~ _Grand"& _ 
                "Total) ~dulla^@204~ rID] = @Original_SupplierID))"
     ~dulla^@204~ apter.DeleteCommand.CommandType = Sys~dulla^@204~ andType.Text
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@Original_PurchaseInvoiceNo", ~dulla^@204~ qlDbType.NVarChar, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "PurchaseInvoiceNo", ~dulla^@204~ ataRowVersion.Original, false, Nothin~dulla^@204~ ))
            Me._adapter.DeleteCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ iginal_DateOfPurchase", System.Data.S~dulla^@204~ Time, 0, System.Data.ParameterDirecti~dulla^@204~ 0, "DateOfPurchase", System.Data.Data~dulla^@204~ iginal, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.DeleteCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@Origi~dulla^@204~ nt", System.Data.SqlDbType.Money, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Total~dulla^@204~ em.Data.DataRowVersion.Original, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Original_FrieghtCharge", Syste~dulla^@204~ ype.Money, 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "FrieghtCharge", System.Data.~dulla^@204~ n.Original, false, Nothing, "", "", "~dulla^@204~     Me._adapter.DeleteCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@O~dulla^@204~ llaneousCost", System.Data.SqlDbType.~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ neousCost", System.Data.DataRowVersio~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.DeleteCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Original_Grand~dulla^@204~ m.Data.SqlDbType.Money, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "GrandTotal", Sy~dulla^@204~ aRowVersion.Original, false, Nothing,~dulla^@204~ 
            Me._adapter.DeleteComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ inal_SupplierID", System.Data.SqlDbTy~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ pplierID", System.Data.DataRowVersion~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.InsertCommand = New System.Data.Sql~dulla^@204~ mand
            Me._adapter.InsertC~dulla^@204~ tion = Me.Connection
            Me.~dulla^@204~ rtCommand.CommandText = "INSERT INTO ~dulla^@204~ se] ([PurchaseInvoiceNo], [DateOfPurc~dulla^@204~ Amount"& _ 
                "], [Fri~dulla^@204~ [MiscellaneousCost], [GrandTotal], [S~dulla^@204~ ALUES (@Pu"& _ 
                "rch~dulla^@204~  @DateOfPurchase, @TotalAmount, @Frie~dulla^@204~ iscellaneousCo"& _ 
                ~dulla^@204~ tal, @SupplierID);"&Global.Microsoft.~dulla^@204~ hrW(13)&Global.Microsoft.VisualBasic.~dulla^@204~ ECT PurchaseInvoiceNo, DateOfPurchase~dulla^@204~ 
                "mount, FrieghtChar~dulla^@204~ eousCost, GrandTotal, SupplierID FROM~dulla^@204~ & _ 
                "ERE (PurchaseI~dulla^@204~ urchaseInvoiceNo)"
            Me._a~dulla^@204~ Command.CommandType = System.Data.Com~dulla^@204~ 
            Me._adapter.InsertComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ haseInvoiceNo", System.Data.SqlDbType~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ haseInvoiceNo", System.Data.DataRowVe~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.InsertCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@DateOfPurch~dulla^@204~ Data.SqlDbType.DateTime, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "DateOfPurchase~dulla^@204~ a.DataRowVersion.Current, false, Noth~dulla^@204~ ""))
            Me._adapter.InsertC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ TotalAmount", System.Data.SqlDbType.M~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ nt", System.Data.DataRowVersion.Curre~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ tCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@FrieghtCharge", System~dulla^@204~ pe.Money, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "FrieghtCharge", System.Data.D~dulla^@204~ .Current, false, Nothing, "", "", "")~dulla^@204~   Me._adapter.InsertCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@Mis~dulla^@204~ t", System.Data.SqlDbType.Money, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "Miscel~dulla^@204~  System.Data.DataRowVersion.Current, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@GrandTotal", System.Data.S~dulla^@204~ y, 0, System.Data.ParameterDirection.~dulla^@204~ "GrandTotal", System.Data.DataRowVers~dulla^@204~ false, Nothing, "", "", ""))
       ~dulla^@204~ ter.InsertCommand.Parameters.Add(New ~dulla^@204~ qlClient.SqlParameter("@SupplierID", ~dulla^@204~ qlDbType.NVarChar, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "SupplierID", System.~dulla^@204~ ersion.Current, false, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand = N~dulla^@204~ a.SqlClient.SqlCommand
            M~dulla^@204~ dateCommand.Connection = Me.Connectio~dulla^@204~   Me._adapter.UpdateCommand.CommandTe~dulla^@204~ [dbo].[Purchase] SET [PurchaseInvoice~dulla^@204~ seInvoiceNo, [DateOfPurc"& _ 
      ~dulla^@204~ se] = @DateOfPurchase, [TotalAmount] ~dulla^@204~ t, [FrieghtCharge] = @Friegh"& _ 
  ~dulla^@204~  "tCharge, [MiscellaneousCost] = @Mis~dulla^@204~ t, [GrandTotal] = @GrandTotal, ["& _ ~dulla^@204~      "SupplierID] = @SupplierID WHERE~dulla^@204~ nvoiceNo] = @Original_PurchaseInvoic"~dulla^@204~          "eNo) AND ([DateOfPurchase] ~dulla^@204~ ateOfPurchase) AND ([TotalAmount] = @~dulla^@204~              "ginal_TotalAmount) AND ~dulla^@204~ ge] = @Original_FrieghtCharge) AND ([~dulla^@204~ 
                "aneousCost] = @Orig~dulla^@204~ neousCost) AND ([GrandTotal] = @Origi~dulla^@204~  _ 
                "tal) AND ([Supp~dulla^@204~ iginal_SupplierID));"&Global.Microsof~dulla^@204~ .ChrW(13)&Global.Microsoft.VisualBasi~dulla^@204~ ELECT PurchaseInvoiceNo, Date"& _ 
 ~dulla^@204~   "OfPurchase, TotalAmount, FrieghtCh~dulla^@204~ aneousCost, GrandTotal, SupplierI"& _~dulla^@204~       "D FROM Purchase WHERE (Purchas~dulla^@204~ @PurchaseInvoiceNo)"
            Me.~dulla^@204~ teCommand.CommandType = System.Data.C~dulla^@204~ xt
            Me._adapter.UpdateCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ rchaseInvoiceNo", System.Data.SqlDbTy~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ rchaseInvoiceNo", System.Data.DataRow~dulla^@204~ nt, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.UpdateCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@DateOfPur~dulla^@204~ m.Data.SqlDbType.DateTime, 0, System.~dulla^@204~ rDirection.Input, 0, 0, "DateOfPurcha~dulla^@204~ ata.DataRowVersion.Current, false, No~dulla^@204~ , ""))
            Me._adapter.Updat~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@TotalAmount", System.Data.SqlDbType~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ ount", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@FrieghtCharge", Syst~dulla^@204~ Type.Money, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "FrieghtCharge", System.Data~dulla^@204~ on.Current, false, Nothing, "", "", "~dulla^@204~     Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParam~dulla^@204~ laneousCost", System.Data.SqlDbType.M~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ eousCost", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@GrandTotal", Sys~dulla^@204~ bType.Money, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "GrandTotal", System.Data.D~dulla^@204~ .Current, false, Nothing, "", "", "")~dulla^@204~   Me._adapter.UpdateCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@Sup~dulla^@204~ tem.Data.SqlDbType.NVarChar, 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "SupplierID~dulla^@204~ a.DataRowVersion.Current, false, Noth~dulla^@204~ ""))
            Me._adapter.UpdateC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ Original_PurchaseInvoiceNo", System.D~dulla^@204~ .NVarChar, 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "PurchaseInvoiceNo", System.D~dulla^@204~ rsion.Original, false, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ ateOfPurchase", System.Data.SqlDbType~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ OfPurchase", System.Data.DataRowVersi~dulla^@204~ false, Nothing, "", "", ""))
       ~dulla^@204~ ter.UpdateCommand.Parameters.Add(New ~dulla^@204~ qlClient.SqlParameter("@Original_Tota~dulla^@204~ tem.Data.SqlDbType.Money, 0, System.D~dulla^@204~ Direction.Input, 0, 0, "TotalAmount",~dulla^@204~ DataRowVersion.Original, false, Nothi~dulla^@204~ "))
            Me._adapter.UpdateCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ riginal_FrieghtCharge", System.Data.S~dulla^@204~ y, 0, System.Data.ParameterDirection.~dulla^@204~ "FrieghtCharge", System.Data.DataRowV~dulla^@204~ al, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.UpdateCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Original_~dulla^@204~ Cost", System.Data.SqlDbType.Money, 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Mis~dulla^@204~ t", System.Data.DataRowVersion.Origin~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@Original_GrandTotal", ~dulla^@204~ qlDbType.Money, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "GrandTotal", System.Dat~dulla^@204~ ion.Original, false, Nothing, "", "",~dulla^@204~       Me._adapter.UpdateCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ plierID", System.Data.SqlDbType.NVarC~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ hing, "", "", ""))
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Private Sub InitCo~dulla^@204~            Me._connection = New Syste~dulla^@204~ ent.SqlConnection
            Me._co~dulla^@204~ ectionString = Global.InventoryContro~dulla^@204~ Settings.Default.PurchaseInfoConnecti~dulla^@204~ nd Sub
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ b InitCommandCollection()
          ~dulla^@204~ Collection = New System.Data.SqlClien~dulla^@204~ 0) {}
            Me._commandCollect~dulla^@204~ System.Data.SqlClient.SqlCommand
   ~dulla^@204~ commandCollection(0).Connection = Me.~dulla^@204~            Me._commandCollection(0).C~dulla^@204~ "SELECT PurchaseInvoiceNo, DateOfPurc~dulla^@204~ ount, FrieghtCharge, Miscellaneo"& _ ~dulla^@204~      "usCost, GrandTotal, SupplierID ~dulla^@204~ hase"
            Me._commandCollect~dulla^@204~ dType = System.Data.CommandType.Text~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute(),  _
        ~dulla^@204~ nentModel.Design.HelpKeywordAttribute~dulla^@204~ leAdapter"),  _
         System.Comp~dulla^@204~ taObjectMethodAttribute(System.Compon~dulla^@204~ ObjectMethodType.Fill, true)>  _
   ~dulla^@204~ verloads Overridable Function Fill(By~dulla^@204~  As PInvoiceNoDataSet.PurchaseDataTab~dulla^@204~ r
            Me.Adapter.SelectComma~dulla^@204~ ndCollection(0)
            If (Me.C~dulla^@204~ l = true) Then
                dataT~dulla^@204~            End If
            Dim re~dulla^@204~ Integer = Me.Adapter.Fill(dataTable)~dulla^@204~ Return returnValue
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute(),  _
         System.Compo~dulla^@204~ ign.HelpKeywordAttribute("vs.data.Tab~dulla^@204~  _
         System.ComponentModel.Da~dulla^@204~ dAttribute(System.ComponentModel.Data~dulla^@204~ ype.[Select], true)>  _
        Publ~dulla^@204~ Overridable Function GetData() As PIn~dulla^@204~ t.PurchaseDataTable
            Me.A~dulla^@204~ Command = Me.CommandCollection(0)
  ~dulla^@204~  dataTable As PInvoiceNoDataSet.Purch~dulla^@204~ = New PInvoiceNoDataSet.PurchaseDataT~dulla^@204~      Me.Adapter.Fill(dataTable)
    ~dulla^@204~ n dataTable
        End Function
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e(),  _
         System.ComponentMod~dulla^@204~ pKeywordAttribute("vs.data.TableAdapt~dulla^@204~      Public Overloads Overridable Fun~dulla^@204~ ByVal dataTable As PInvoiceNoDataSet.~dulla^@204~ able) As Integer
            Return ~dulla^@204~ date(dataTable)
        End Function~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute(),  _
         System.Componen~dulla^@204~ .HelpKeywordAttribute("vs.data.TableA~dulla^@204~ 
        Public Overloads Overridable~dulla^@204~ ate(ByVal dataSet As PInvoiceNoDataSe~dulla^@204~ 
            Return Me.Adapter.Updat~dulla^@204~ urchase")
        End Function
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ ),  _
         System.ComponentModel~dulla^@204~ eywordAttribute("vs.data.TableAdapter~dulla^@204~    Public Overloads Overridable Funct~dulla^@204~ Val dataRow As System.Data.DataRow) A~dulla^@204~           Return Me.Adapter.Update(Ne~dulla^@204~ .DataRow() {dataRow})
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute(),  _
         System.Co~dulla^@204~ Design.HelpKeywordAttribute("vs.data.~dulla^@204~ )>  _
        Public Overloads Overr~dulla^@204~ on Update(ByVal dataRows() As System.~dulla^@204~  As Integer
            Return Me.Ad~dulla^@204~ dataRows)
        End Function
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ ),  _
         System.ComponentModel~dulla^@204~ eywordAttribute("vs.data.TableAdapter~dulla^@204~     System.ComponentModel.DataObjectM~dulla^@204~ e(System.ComponentModel.DataObjectMet~dulla^@204~ e, true)>  _
        Public Overload~dulla^@204~  Function Delete(ByVal Original_Purch~dulla^@204~ As String, ByVal Original_DateOfPurch~dulla^@204~ ByVal Original_TotalAmount As Decimal~dulla^@204~ nal_FrieghtCharge As Decimal, ByVal O~dulla^@204~ llaneousCost As Decimal, ByVal Origin~dulla^@204~  As Decimal, ByVal Original_SupplierI~dulla^@204~ As Integer
            If (Original_~dulla^@204~ ceNo Is Nothing) Then
              ~dulla^@204~ ystem.ArgumentNullException("Original~dulla^@204~ iceNo")
            Else
          ~dulla^@204~ ter.DeleteCommand.Parameters(0).Value~dulla^@204~ inal_PurchaseInvoiceNo,String)
     ~dulla^@204~ 
            Me.Adapter.DeleteComman~dulla^@204~ 1).Value = CType(Original_DateOfPurch~dulla^@204~           Me.Adapter.DeleteCommand.Pa~dulla^@204~ alue = CType(Original_TotalAmount,Dec~dulla^@204~       Me.Adapter.DeleteCommand.Parame~dulla^@204~  = CType(Original_FrieghtCharge,Decim~dulla^@204~     Me.Adapter.DeleteCommand.Paramete~dulla^@204~  CType(Original_MiscellaneousCost,Dec~dulla^@204~       Me.Adapter.DeleteCommand.Parame~dulla^@204~  = CType(Original_GrandTotal,Decimal)~dulla^@204~  If (Original_SupplierID Is Nothing) ~dulla^@204~          Throw New System.ArgumentNul~dulla^@204~ riginal_SupplierID")
            Els~dulla^@204~       Me.Adapter.DeleteCommand.Parame~dulla^@204~  = CType(Original_SupplierID,String)~dulla^@204~ End If
            Dim previousConne~dulla^@204~  System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
     ~dulla^@204~ e.Adapter.DeleteCommand.Connection.St~dulla^@204~ m.Data.ConnectionState.Open)  _
    ~dulla^@204~        <> System.Data.ConnectionState~dulla^@204~                 Me.Adapter.DeleteComm~dulla^@204~ n.Open
            End If
         ~dulla^@204~             Dim returnValue As Intege~dulla^@204~ r.DeleteCommand.ExecuteNonQuery
    ~dulla^@204~ eturn returnValue
            Finall~dulla^@204~       If (previousConnectionState = S~dulla^@204~ nnectionState.Closed) Then
         ~dulla^@204~ .Adapter.DeleteCommand.Connection.Clo~dulla^@204~        End If
            End Try
 ~dulla^@204~ nction
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute(),  _
     ~dulla^@204~ mponentModel.Design.HelpKeywordAttrib~dulla^@204~ TableAdapter"),  _
         System.C~dulla^@204~ .DataObjectMethodAttribute(System.Com~dulla^@204~ ataObjectMethodType.Insert, true)>  _~dulla^@204~ lic Overloads Overridable Function In~dulla^@204~ rchaseInvoiceNo As String, ByVal Date~dulla^@204~  Date, ByVal TotalAmount As Decimal, ~dulla^@204~ Charge As Decimal, ByVal Miscellaneou~dulla^@204~ mal, ByVal GrandTotal As Decimal, ByV~dulla^@204~  As String) As Integer
            I~dulla^@204~ voiceNo Is Nothing) Then
           ~dulla^@204~ w System.ArgumentNullException("Purch~dulla^@204~ )
            Else
                ~dulla^@204~ sertCommand.Parameters(0).Value = CTy~dulla^@204~ voiceNo,String)
            End If
~dulla^@204~ e.Adapter.InsertCommand.Parameters(1)~dulla^@204~ e(DateOfPurchase,Date)
            M~dulla^@204~ ertCommand.Parameters(2).Value = CTyp~dulla^@204~ ,Decimal)
            Me.Adapter.Ins~dulla^@204~ rameters(3).Value = CType(FrieghtChar~dulla^@204~             Me.Adapter.InsertCommand.~dulla^@204~ .Value = CType(MiscellaneousCost,Deci~dulla^@204~      Me.Adapter.InsertCommand.Paramet~dulla^@204~ = CType(GrandTotal,Decimal)
        ~dulla^@204~ ierID Is Nothing) Then
             ~dulla^@204~ System.ArgumentNullException("Supplie~dulla^@204~       Else
                Me.Adapte~dulla^@204~ nd.Parameters(6).Value = CType(Suppli~dulla^@204~ 
            End If
            Dim ~dulla^@204~ ctionState As System.Data.ConnectionS~dulla^@204~ pter.InsertCommand.Connection.State
~dulla^@204~ f ((Me.Adapter.InsertCommand.Connecti~dulla^@204~ System.Data.ConnectionState.Open)  _~dulla^@204~             <> System.Data.Connection~dulla^@204~ hen
                Me.Adapter.Inser~dulla^@204~ ection.Open
            End If
    ~dulla^@204~ 
                Dim returnValue As I~dulla^@204~ dapter.InsertCommand.ExecuteNonQuery~dulla^@204~     Return returnValue
            F~dulla^@204~            If (previousConnectionStat~dulla^@204~ ta.ConnectionState.Closed) Then
    ~dulla^@204~    Me.Adapter.InsertCommand.Connectio~dulla^@204~             End If
            End T~dulla^@204~ nd Function
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute(),  _
~dulla^@204~ em.ComponentModel.Design.HelpKeywordA~dulla^@204~ data.TableAdapter"),  _
         Sys~dulla^@204~ Model.DataObjectMethodAttribute(Syste~dulla^@204~ del.DataObjectMethodType.Update, true~dulla^@204~   Public Overloads Overridable Functi~dulla^@204~ al PurchaseInvoiceNo As String, ByVal~dulla^@204~ se As Date, ByVal TotalAmount As Deci~dulla^@204~ ieghtCharge As Decimal, ByVal Miscell~dulla^@204~  Decimal, ByVal GrandTotal As Decimal~dulla^@204~ ierID As String, ByVal Original_Purch~dulla^@204~ As String, ByVal Original_DateOfPurch~dulla^@204~ ByVal Original_TotalAmount As Decimal~dulla^@204~ nal_FrieghtCharge As Decimal, ByVal O~dulla^@204~ llaneousCost As Decimal, ByVal Origin~dulla^@204~  As Decimal, ByVal Original_SupplierI~dulla^@204~ As Integer
            If (PurchaseI~dulla^@204~ othing) Then
                Throw N~dulla^@204~ umentNullException("PurchaseInvoiceNo~dulla^@204~    Else
                Me.Adapter.U~dulla^@204~ Parameters(0).Value = CType(PurchaseI~dulla^@204~ ng)
            End If
            ~dulla^@204~ dateCommand.Parameters(1).Value = CTy~dulla^@204~ hase,Date)
            Me.Adapter.Up~dulla^@204~ arameters(2).Value = CType(TotalAmoun~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ Value = CType(FrieghtCharge,Decimal)~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(4~dulla^@204~ pe(MiscellaneousCost,Decimal)
      ~dulla^@204~ ter.UpdateCommand.Parameters(5).Value~dulla^@204~ dTotal,Decimal)
            If (Supp~dulla^@204~ hing) Then
                Throw New~dulla^@204~ entNullException("SupplierID")
     ~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(6).Value = CType(SupplierID,String)~dulla^@204~  End If
            If (Original_Pur~dulla^@204~ o Is Nothing) Then
                T~dulla^@204~ em.ArgumentNullException("Original_Pu~dulla^@204~ No")
            Else
             ~dulla^@204~ .UpdateCommand.Parameters(7).Value = ~dulla^@204~ l_PurchaseInvoiceNo,String)
        ~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ Value = CType(Original_DateOfPurchase~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ e = CType(Original_TotalAmount,Decima~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~  CType(Original_FrieghtCharge,Decimal~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ CType(Original_MiscellaneousCost,Deci~dulla^@204~      Me.Adapter.UpdateCommand.Paramet~dulla^@204~  = CType(Original_GrandTotal,Decimal)~dulla^@204~  If (Original_SupplierID Is Nothing) ~dulla^@204~          Throw New System.ArgumentNul~dulla^@204~ riginal_SupplierID")
            Els~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~ e = CType(Original_SupplierID,String)~dulla^@204~  End If
            Dim previousConn~dulla^@204~ s System.Data.ConnectionState = Me.Ad~dulla^@204~ ommand.Connection.State
            ~dulla^@204~ er.UpdateCommand.Connection.State And~dulla^@204~ ConnectionState.Open)  _
           ~dulla^@204~ <> System.Data.ConnectionState.Open) ~dulla^@204~          Me.Adapter.UpdateCommand.Con~dulla^@204~ 
            End If
            Try ~dulla^@204~      Dim returnValue As Integer = Me.~dulla^@204~ eCommand.ExecuteNonQuery
           ~dulla^@204~ eturnValue
            Finally
    ~dulla^@204~ f (previousConnectionState = System.D~dulla^@204~ nState.Closed) Then
                ~dulla^@204~ r.UpdateCommand.Connection.Close
   ~dulla^@204~ End If
            End Try
        End Function
    End Class
End Namespace
