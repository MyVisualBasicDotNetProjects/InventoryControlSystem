'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.312
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("InventoryControlSystemDataSet1"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class InventoryControlSystemDataSet1
    Inherits System.Data.DataSet
    
    Private tableCompanyInfo As CompanyInfoDataTable
    
    Private tableCustomer As CustomerDataTable
    
    Private tableInvoice As InvoiceDataTable
    
    Private tableOrder As OrderDataTable
    
    Private tableProductInfo As ProductInfoDataTable
    
    Private tableProducts As ProductsDataTable
    
    Private tableProductsAvialable As ProductsAvialableDataTable
    
    Private tablePurchase As PurchaseDataTable
    
    Private tablePurchaseInfo As PurchaseInfoDataTable
    
    Private tableSales As SalesDataTable
    
    Private tableSalesInfo As SalesInfoDataTable
    
    Private tableStockCard As StockCardDataTable
    
    Private tableStockCardDetail As StockCardDetailDataTable
    
    Private tableSupplier As SupplierDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CompanyInfo")) Is Nothing) Then
                MyBase.Tables.Add(New CompanyInfoDataTable(ds.Tables("CompanyInfo")))
            End If
            If (Not (ds.Tables("Customer")) Is Nothing) Then
                MyBase.Tables.Add(New CustomerDataTable(ds.Tables("Customer")))
            End If
            If (Not (ds.Tables("Invoice")) Is Nothing) Then
                MyBase.Tables.Add(New InvoiceDataTable(ds.Tables("Invoice")))
            End If
            If (Not (ds.Tables("Order")) Is Nothing) Then
                MyBase.Tables.Add(New OrderDataTable(ds.Tables("Order")))
            End If
            If (Not (ds.Tables("ProductInfo")) Is Nothing) Then
                MyBase.Tables.Add(New ProductInfoDataTable(ds.Tables("ProductInfo")))
            End If
            If (Not (ds.Tables("Products")) Is Nothing) Then
                MyBase.Tables.Add(New ProductsDataTable(ds.Tables("Products")))
            End If
            If (Not (ds.Tables("ProductsAvialable")) Is Nothing) Then
                MyBase.Tables.Add(New ProductsAvialableDataTable(ds.Tables("ProductsAvialable")))
            End If
            If (Not (ds.Tables("Purchase")) Is Nothing) Then
                MyBase.Tables.Add(New PurchaseDataTable(ds.Tables("Purchase")))
            End If
            If (Not (ds.Tables("PurchaseInfo")) Is Nothing) Then
                MyBase.Tables.Add(New PurchaseInfoDataTable(ds.Tables("PurchaseInfo")))
            End If
            If (Not (ds.Tables("Sales")) Is Nothing) Then
                MyBase.Tables.Add(New SalesDataTable(ds.Tables("Sales")))
            End If
            If (Not (ds.Tables("SalesInfo")) Is Nothing) Then
                MyBase.Tables.Add(New SalesInfoDataTable(ds.Tables("SalesInfo")))
            End If
            If (Not (ds.Tables("StockCard")) Is Nothing) Then
                MyBase.Tables.Add(New StockCardDataTable(ds.Tables("StockCard")))
            End If
            If (Not (ds.Tables("StockCardDetail")) Is Nothing) Then
                MyBase.Tables.Add(New StockCardDetailDataTable(ds.Tables("StockCardDetail")))
            End If
            If (Not (ds.Tables("Supplier")) Is Nothing) Then
                MyBase.Tables.Add(New SupplierDataTable(ds.Tables("Supplier")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CompanyInfo() As CompanyInfoDataTable
        Get
            Return Me.tableCompanyInfo
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Customer() As CustomerDataTable
        Get
            Return Me.tableCustomer
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Invoice() As InvoiceDataTable
        Get
            Return Me.tableInvoice
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Order() As OrderDataTable
        Get
            Return Me.tableOrder
        End Get
    End Property
    
    < ~dulla^@204~ ~dulla^@204~ NonUserCodeAttribute(),  _
     Syst~dulla^@204~ odel.Browsable(false),  _
     Syste~dulla^@204~ del.DesignerSerializationVisibility(S~dulla^@204~ ntModel.DesignerSerializationVisibili~dulla^@204~  _
    Public ReadOnly Property Prod~dulla^@204~ ProductInfoDataTable
        Get
  ~dulla^@204~ urn Me.tableProductInfo
        End ~dulla^@204~ Property
    
    <System.Diagnosti~dulla^@204~ nUserCodeAttribute(),  _
     System~dulla^@204~ el.Browsable(false),  _
     System.~dulla^@204~ l.DesignerSerializationVisibility(Sys~dulla^@204~ Model.DesignerSerializationVisibility~dulla^@204~ 
    Public ReadOnly Property Produc~dulla^@204~ ctsDataTable
        Get
          ~dulla^@204~ ableProducts
        End Get
    En~dulla^@204~    
    <System.Diagnostics.Debugger~dulla^@204~ tribute(),  _
     System.ComponentM~dulla^@204~ e(false),  _
     System.ComponentMo~dulla^@204~ erializationVisibility(System.Compone~dulla^@204~ nerSerializationVisibility.Content)> ~dulla^@204~ c ReadOnly Property ProductsAvialable~dulla^@204~ sAvialableDataTable
        Get
   ~dulla^@204~ rn Me.tableProductsAvialable
       ~dulla^@204~  End Property
    
    <System.Diag~dulla^@204~ gerNonUserCodeAttribute(),  _
     S~dulla^@204~ ntModel.Browsable(false),  _
     Sy~dulla^@204~ tModel.DesignerSerializationVisibilit~dulla^@204~ onentModel.DesignerSerializationVisib~dulla^@204~ )>  _
    Public ReadOnly Property P~dulla^@204~ PurchaseDataTable
        Get
     ~dulla^@204~  Me.tablePurchase
        End Get
 ~dulla^@204~ ty
    
    <System.Diagnostics.Deb~dulla^@204~ odeAttribute(),  _
     System.Compo~dulla^@204~ wsable(false),  _
     System.Compon~dulla^@204~ gnerSerializationVisibility(System.Co~dulla^@204~ DesignerSerializationVisibility.Conte~dulla^@204~ Public ReadOnly Property PurchaseInfo~dulla^@204~ eInfoDataTable
        Get
        ~dulla^@204~ .tablePurchaseInfo
        End Get
~dulla^@204~ rty
    
    <System.Diagnostics.De~dulla^@204~ CodeAttribute(),  _
     System.Comp~dulla^@204~ owsable(false),  _
     System.Compo~dulla^@204~ ignerSerializationVisibility(System.C~dulla^@204~ .DesignerSerializationVisibility.Cont~dulla^@204~  Public ReadOnly Property Sales() As ~dulla^@204~ e
        Get
            Return Me~dulla^@204~         End Get
    End Property
  ~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
     System.ComponentModel.Browsable~dulla^@204~      System.ComponentModel.DesignerSe~dulla^@204~ sibility(System.ComponentModel.Design~dulla^@204~ onVisibility.Content)>  _
    Public~dulla^@204~ perty SalesInfo() As SalesInfoDataTab~dulla^@204~ et
            Return Me.tableSalesI~dulla^@204~ End Get
    End Property
    
    ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~ stem.ComponentModel.Browsable(false),~dulla^@204~ tem.ComponentModel.DesignerSerializat~dulla^@204~ (System.ComponentModel.DesignerSerial~dulla^@204~ lity.Content)>  _
    Public ReadOnl~dulla^@204~ ockCard() As StockCardDataTable
    ~dulla^@204~         Return Me.tableStockCard
   ~dulla^@204~ 
    End Property
    
    <System.~dulla^@204~ ebuggerNonUserCodeAttribute(),  _
  ~dulla^@204~ ponentModel.Browsable(false),  _
   ~dulla^@204~ onentModel.DesignerSerializationVisib~dulla^@204~ ComponentModel.DesignerSerializationV~dulla^@204~ tent)>  _
    Public ReadOnly Proper~dulla^@204~ etail() As StockCardDetailDataTable
~dulla^@204~             Return Me.tableStockCardD~dulla^@204~   End Get
    End Property
    
  ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~ System.ComponentModel.Browsable(false~dulla^@204~ ystem.ComponentModel.DesignerSerializ~dulla^@204~ ty(System.ComponentModel.DesignerSeri~dulla^@204~ bility.Content)>  _
    Public ReadO~dulla^@204~ Supplier() As SupplierDataTable
    ~dulla^@204~         Return Me.tableSupplier
    ~dulla^@204~     End Property
    
    <System.D~dulla^@204~ buggerNonUserCodeAttribute(),  _
   ~dulla^@204~ onentModel.BrowsableAttribute(true), ~dulla^@204~ em.ComponentModel.DesignerSerializati~dulla^@204~ ttribute(System.ComponentModel.Design~dulla^@204~ onVisibility.Visible)>  _
    Public~dulla^@204~ operty SchemaSerializationMode() As S~dulla^@204~ hemaSerializationMode
        Get
 ~dulla^@204~ turn Me._schemaSerializationMode
   ~dulla^@204~ 
        Set
            Me._schemaS~dulla^@204~ ode = value
        End Set
    End~dulla^@204~   
    <System.Diagnostics.DebuggerN~dulla^@204~ ribute(),  _
     System.ComponentMo~dulla^@204~ erializationVisibilityAttribute(Syste~dulla^@204~ del.DesignerSerializationVisibility.H~dulla^@204~    Public Shadows ReadOnly Property T~dulla^@204~ stem.Data.DataTableCollection
      ~dulla^@204~       Return MyBase.Tables
        E~dulla^@204~ nd Property
    
    <System.Diagno~dulla^@204~ rNonUserCodeAttribute(),  _
     Sys~dulla^@204~ Model.DesignerSerializationVisibility~dulla^@204~ tem.ComponentModel.DesignerSerializat~dulla^@204~ .Hidden)>  _
    Public Shadows Read~dulla^@204~  Relations() As System.Data.DataRelat~dulla^@204~ 
        Get
            Return MyB~dulla^@204~ 
        End Get
    End Property
~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
    Protected Overrides Sub Initia~dulla^@204~ taSet()
        Me.BeginInit
      ~dulla^@204~ s
        Me.EndInit
    End Sub
 ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
    Public Overrides Function Clone~dulla^@204~ Data.DataSet
        Dim cln As Inve~dulla^@204~ ystemDataSet1 = CType(MyBase.Clone,In~dulla^@204~ lSystemDataSet1)
        cln.InitVar~dulla^@204~ n.SchemaSerializationMode = Me.Schema~dulla^@204~ Mode
        Return cln
    End Fun~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
    Protected Overrides Fun~dulla^@204~ erializeTables() As Boolean
        ~dulla^@204~ 
    End Function
    
    <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ verrides Function ShouldSerializeRela~dulla^@204~ olean
        Return false
    End ~dulla^@204~  
    <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
    Protected Overrides ~dulla^@204~ rializable(ByVal reader As System.Xml~dulla^@204~         If (Me.DetermineSchemaSeriali~dulla^@204~ ader) = System.Data.SchemaSerializati~dulla^@204~ eSchema) Then
            Me.Reset
~dulla^@204~ im ds As System.Data.DataSet = New Sy~dulla^@204~ aSet
            ds.ReadXml(reader)~dulla^@204~ If (Not (ds.Tables("CompanyInfo")) Is~dulla^@204~ n
                MyBase.Tables.Add(~dulla^@204~ foDataTable(ds.Tables("CompanyInfo"))~dulla^@204~   End If
            If (Not (ds.Tab~dulla^@204~ ")) Is Nothing) Then
               ~dulla^@204~ s.Add(New CustomerDataTable(ds.Tables~dulla^@204~ )
            End If
            If~dulla^@204~ les("Invoice")) Is Nothing) Then
   ~dulla^@204~ MyBase.Tables.Add(New InvoiceDataTabl~dulla^@204~ Invoice")))
            End If
    ~dulla^@204~ ot (ds.Tables("Order")) Is Nothing) T~dulla^@204~         MyBase.Tables.Add(New OrderDa~dulla^@204~ bles("Order")))
            End If
~dulla^@204~ f (Not (ds.Tables("ProductInfo")) Is ~dulla^@204~ 
                MyBase.Tables.Add(N~dulla^@204~ oDataTable(ds.Tables("ProductInfo")))~dulla^@204~  End If
            If (Not (ds.Tabl~dulla^@204~ )) Is Nothing) Then
                ~dulla^@204~ .Add(New ProductsDataTable(ds.Tables(~dulla^@204~ 
            End If
            If ~dulla^@204~ es("ProductsAvialable")) Is Nothing) ~dulla^@204~          MyBase.Tables.Add(New Produc~dulla^@204~ taTable(ds.Tables("ProductsAvialable"~dulla^@204~     End If
            If (Not (ds.T~dulla^@204~ se")) Is Nothing) Then
             ~dulla^@204~ les.Add(New PurchaseDataTable(ds.Tabl~dulla^@204~ )))
            End If
            ~dulla^@204~ ables("PurchaseInfo")) Is Nothing) Th~dulla^@204~        MyBase.Tables.Add(New Purchase~dulla^@204~ (ds.Tables("PurchaseInfo")))
       ~dulla^@204~             If (Not (ds.Tables("Sales~dulla^@204~ g) Then
                MyBase.Table~dulla^@204~ esDataTable(ds.Tables("Sales")))
            End If
            If (Not (ds.T~dulla^@204~ nfo")) Is Nothing) Then
            ~dulla^@204~ bles.Add(New SalesInfoDataTable(ds.Ta~dulla^@204~ fo")))
            End If
         ~dulla^@204~ s.Tables("StockCard")) Is Nothing) Th~dulla^@204~        MyBase.Tables.Add(New StockCar~dulla^@204~ .Tables("StockCard")))
            E~dulla^@204~       If (Not (ds.Tables("StockCardDe~dulla^@204~ thing) Then
                MyBase.T~dulla^@204~  StockCardDetailDataTable(ds.Tables("~dulla^@204~ il")))
            End If
         ~dulla^@204~ s.Tables("Supplier")) Is Nothing) The~dulla^@204~       MyBase.Tables.Add(New SupplierD~dulla^@204~ ables("Supplier")))
            End ~dulla^@204~    Me.DataSetName = ds.DataSetName
 ~dulla^@204~ .Prefix = ds.Prefix
            Me.N~dulla^@204~ .Namespace
            Me.Locale = d~dulla^@204~          Me.CaseSensitive = ds.CaseSe~dulla^@204~         Me.EnforceConstraints = ds.En~dulla^@204~ nts
            Me.Merge(ds, false, ~dulla^@204~ issingSchemaAction.Add)
            ~dulla^@204~         Else
            Me.ReadXml(~dulla^@204~         Me.InitVars
        End If
~dulla^@204~     
    <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
    Protected Overrid~dulla^@204~ etSchemaSerializable() As System.Xml.~dulla^@204~ ema
        Dim stream As System.IO.~dulla^@204~ = New System.IO.MemoryStream
       ~dulla^@204~ chema(New System.Xml.XmlTextWriter(st~dulla^@204~ ))
        stream.Position = 0
    ~dulla^@204~ stem.Xml.Schema.XmlSchema.Read(New Sy~dulla^@204~ extReader(stream), Nothing)
    End ~dulla^@204~  
    <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
    Friend Overloads Sub~dulla^@204~         Me.InitVars(true)
    End Su~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
    Friend Overloads Sub InitVa~dulla^@204~ Table As Boolean)
        Me.tableCo~dulla^@204~ Type(MyBase.Tables("CompanyInfo"),Com~dulla^@204~ able)
        If (initTable = true) ~dulla^@204~      If (Not (Me.tableCompanyInfo) Is~dulla^@204~ n
                Me.tableCompanyInf~dulla^@204~            End If
        End If
  ~dulla^@204~ eCustomer = CType(MyBase.Tables("Cust~dulla^@204~ erDataTable)
        If (initTable =~dulla^@204~             If (Not (Me.tableCustomer~dulla^@204~  Then
                Me.tableCustom~dulla^@204~             End If
        End If
 ~dulla^@204~ leInvoice = CType(MyBase.Tables("Invo~dulla^@204~ DataTable)
        If (initTable = t~dulla^@204~           If (Not (Me.tableInvoice) I~dulla^@204~ en
                Me.tableInvoice.I~dulla^@204~         End If
        End If
     ~dulla^@204~ der = CType(MyBase.Tables("Order"),Or~dulla^@204~ 
        If (initTable = true) Then~dulla^@204~ If (Not (Me.tableOrder) Is Nothing) T~dulla^@204~         Me.tableOrder.InitVars
     ~dulla^@204~ 
        End If
        Me.tablePro~dulla^@204~ ype(MyBase.Tables("ProductInfo"),Prod~dulla^@204~ ble)
        If (initTable = true) T~dulla^@204~     If (Not (Me.tableProductInfo) Is ~dulla^@204~ 
                Me.tableProductInfo~dulla^@204~           End If
        End If
   ~dulla^@204~ Products = CType(MyBase.Tables("Produ~dulla^@204~ sDataTable)
        If (initTable = ~dulla^@204~            If (Not (Me.tableProducts)~dulla^@204~ Then
                Me.tableProduct~dulla^@204~            End If
        End If
  ~dulla^@204~ eProductsAvialable = CType(MyBase.Tab~dulla^@204~ Avialable"),ProductsAvialableDataTabl~dulla^@204~ f (initTable = true) Then
          ~dulla^@204~ .tableProductsAvialable) Is Nothing) ~dulla^@204~          Me.tableProductsAvialable.In~dulla^@204~        End If
        End If
      ~dulla^@204~ chase = CType(MyBase.Tables("Purchase~dulla^@204~ taTable)
        If (initTable = tru~dulla^@204~         If (Not (Me.tablePurchase) Is~dulla^@204~ n
                Me.tablePurchase.I~dulla^@204~         End If
        End If
     ~dulla^@204~ rchaseInfo = CType(MyBase.Tables("Pur~dulla^@204~ urchaseInfoDataTable)
        If (in~dulla^@204~ e) Then
            If (Not (Me.tabl~dulla^@204~ ) Is Nothing) Then
                M~dulla^@204~ seInfo.InitVars
            End If
~dulla^@204~ f
        Me.tableSales = CType(MyBa~dulla^@204~ les"),SalesDataTable)
        If (in~dulla^@204~ e) Then
            If (Not (Me.tabl~dulla^@204~ thing) Then
                Me.table~dulla^@204~ s
            End If
        End If~dulla^@204~ tableSalesInfo = CType(MyBase.Tables(~dulla^@204~ SalesInfoDataTable)
        If (init~dulla^@204~  Then
            If (Not (Me.tableS~dulla^@204~ Nothing) Then
                Me.tab~dulla^@204~ nitVars
            End If
        ~dulla^@204~    Me.tableStockCard = CType(MyBase.T~dulla^@204~ ard"),StockCardDataTable)
        If~dulla^@204~  true) Then
            If (Not (Me.~dulla^@204~ d) Is Nothing) Then
                ~dulla^@204~ Card.InitVars
            End If
  ~dulla^@204~ 
        Me.tableStockCardDetail = CT~dulla^@204~ bles("StockCardDetail"),StockCardDeta~dulla^@204~ 
        If (initTable = true) Then
~dulla^@204~ f (Not (Me.tableStockCardDetail) Is N~dulla^@204~ 
                Me.tableStockCardDet~dulla^@204~ 
            End If
        End If
~dulla^@204~ bleSupplier = CType(MyBase.Tables("Su~dulla^@204~ lierDataTable)
        If (initTable~dulla^@204~ 
            If (Not (Me.tableSuppli~dulla^@204~ g) Then
                Me.tableSupp~dulla^@204~ 
            End If
        End If~dulla^@204~ 
    
    <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
    Private Sub Init~dulla^@204~     Me.DataSetName = "InventoryContro~dulla^@204~ t1"
        Me.Prefix = ""
        ~dulla^@204~ = "http://tempuri.org/InventoryContro~dulla^@204~ t1.xsd"
        Me.EnforceConstraint~dulla^@204~      Me.SchemaSerializationMode = Sys~dulla^@204~ maSerializationMode.IncludeSchema
  ~dulla^@204~ eCompanyInfo = New CompanyInfoDataTab~dulla^@204~ yBase.Tables.Add(Me.tableCompanyInfo)~dulla^@204~ tableCustomer = New CustomerDataTable~dulla^@204~ ase.Tables.Add(Me.tableCustomer)
   ~dulla^@204~ Invoice = New InvoiceDataTable
     ~dulla^@204~ les.Add(Me.tableInvoice)
        Me.~dulla^@204~ New OrderDataTable
        MyBase.Ta~dulla^@204~ ableOrder)
        Me.tableProductIn~dulla^@204~ uctInfoDataTable
        MyBase.Tabl~dulla^@204~ leProductInfo)
        Me.tableProdu~dulla^@204~ ductsDataTable
        MyBase.Tables~dulla^@204~ Products)
        Me.tableProductsAv~dulla^@204~  ProductsAvialableDataTable
        ~dulla^@204~ .Add(Me.tableProductsAvialable)
    ~dulla^@204~ urchase = New PurchaseDataTable
    ~dulla^@204~ bles.Add(Me.tablePurchase)
        M~dulla^@204~ seInfo = New PurchaseInfoDataTable
 ~dulla^@204~ .Tables.Add(Me.tablePurchaseInfo)
  ~dulla^@204~ eSales = New SalesDataTable
        ~dulla^@204~ .Add(Me.tableSales)
        Me.table~dulla^@204~ ew SalesInfoDataTable
        MyBase~dulla^@204~ e.tableSalesInfo)
        Me.tableSt~dulla^@204~  StockCardDataTable
        MyBase.T~dulla^@204~ tableStockCard)
        Me.tableStoc~dulla^@204~  New StockCardDetailDataTable
      ~dulla^@204~ es.Add(Me.tableStockCardDetail)
    ~dulla^@204~ upplier = New SupplierDataTable
    ~dulla^@204~ bles.Add(Me.tableSupplier)
    End S~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
    Private Function ShouldSer~dulla^@204~ Info() As Boolean
        Return fal~dulla^@204~ unction
    
    <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
    Private ~dulla^@204~ ldSerializeCustomer() As Boolean
   ~dulla^@204~ alse
    End Function
    
    <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ e Function ShouldSerializeInvoice() A~dulla^@204~       Return false
    End Function~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
    Private Function ShouldSerial~dulla^@204~  Boolean
        Return false
    E~dulla^@204~     
    <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
    Private Function ~dulla^@204~ zeProductInfo() As Boolean
        R~dulla^@204~     End Function
    
    <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProducts(~dulla^@204~ 
        Return false
    End Functi~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
    Private Function ShouldSer~dulla^@204~ sAvialable() As Boolean
        Retu~dulla^@204~  End Function
    
    <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
    Pr~dulla^@204~ n ShouldSerializePurchase() As Boolea~dulla^@204~ turn false
    End Function
    
 ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~ Private Function ShouldSerializePurch~dulla^@204~ Boolean
        Return false
    En~dulla^@204~    
    <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
    Private Function S~dulla^@204~ eSales() As Boolean
        Return f~dulla^@204~  Function
    
    <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
    Privat~dulla^@204~ ouldSerializeSalesInfo() As Boolean
~dulla^@204~ n false
    End Function
    
    ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~ vate Function ShouldSerializeStockCar~dulla^@204~ n
        Return false
    End Func~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
    Private Function ShouldS~dulla^@204~ CardDetail() As Boolean
        Retu~dulla^@204~  End Function
    
    <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
    Pr~dulla^@204~ n ShouldSerializeSupplier() As Boolea~dulla^@204~ turn false
    End Function
    
 ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~ Private Sub SchemaChanged(ByVal sende~dulla^@204~ ByVal e As System.ComponentModel.Coll~dulla^@204~ ventArgs)
        If (e.Action = Sys~dulla^@204~ Model.CollectionChangeAction.Remove) ~dulla^@204~      Me.InitVars
        End If
   ~dulla^@204~  
    <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
    Public Shared Functi~dulla^@204~ taSetSchema(ByVal xs As System.Xml.Sc~dulla^@204~ aSet) As System.Xml.Schema.XmlSchemaC~dulla^@204~        Dim ds As InventoryControlSyst~dulla^@204~ New InventoryControlSystemDataSet1
 ~dulla^@204~ pe As System.Xml.Schema.XmlSchemaComp~dulla^@204~  System.Xml.Schema.XmlSchemaComplexTy~dulla^@204~ im sequence As System.Xml.Schema.XmlS~dulla^@204~  = New System.Xml.Schema.XmlSchemaSeq~dulla^@204~   xs.Add(ds.GetSchemaSerializable)
 ~dulla^@204~ y As System.Xml.Schema.XmlSchemaAny =~dulla^@204~ ml.Schema.XmlSchemaAny
        any.N~dulla^@204~ .Namespace
        sequence.Items.Ad~dulla^@204~    type.Particle = sequence
        ~dulla^@204~     End Function
    
    Public De~dulla^@204~ mpanyInfoRowChangeEventHandler(ByVal ~dulla^@204~ ect, ByVal e As CompanyInfoRowChangeE~dulla^@204~     Public Delegate Sub CustomerRowCh~dulla^@204~ ler(ByVal sender As Object, ByVal e A~dulla^@204~ ChangeEvent)
    
    Public Delega~dulla^@204~ eRowChangeEventHandler(ByVal sender A~dulla^@204~ al e As InvoiceRowChangeEvent)
    ~dulla^@204~ elegate Sub OrderRowChangeEventHandle~dulla^@204~ r As Object, ByVal e As OrderRowChang~dulla^@204~ 
    Public Delegate Sub ProductInfo~dulla^@204~ tHandler(ByVal sender As Object, ByVa~dulla^@204~ tInfoRowChangeEvent)
    
    Publi~dulla^@204~ b ProductsRowChangeEventHandler(ByVal~dulla^@204~ ject, ByVal e As ProductsRowChangeEve~dulla^@204~   Public Delegate Sub ProductsAvialab~dulla^@204~ entHandler(ByVal sender As Object, By~dulla^@204~ uctsAvialableRowChangeEvent)
    
 ~dulla^@204~ egate Sub PurchaseRowChangeEventHandl~dulla^@204~ er As Object, ByVal e As PurchaseRowC~dulla^@204~     
    Public Delegate Sub Purchas~dulla^@204~ eEventHandler(ByVal sender As Object,~dulla^@204~ urchaseInfoRowChangeEvent)
    
   ~dulla^@204~ ate Sub SalesRowChangeEventHandler(By~dulla^@204~  Object, ByVal e As SalesRowChangeEve~dulla^@204~   Public Delegate Sub SalesInfoRowCha~dulla^@204~ er(ByVal sender As Object, ByVal e As~dulla^@204~ ChangeEvent)
    
    Public Delega~dulla^@204~ ardRowChangeEventHandler(ByVal sender~dulla^@204~ yVal e As StockCardRowChangeEvent)
 ~dulla^@204~ ic Delegate Sub StockCardDetailRowCha~dulla^@204~ er(ByVal sender As Object, ByVal e As~dulla^@204~ ailRowChangeEvent)
    
    Public ~dulla^@204~ SupplierRowChangeEventHandler(ByVal s~dulla^@204~ ct, ByVal e As SupplierRowChangeEvent~dulla^@204~ <System.CodeDom.Compiler.GeneratedCod~dulla^@204~ ystem.Data.Design.TypedDataSetGenerat~dulla^@204~ "),  _
     System.Serializable(),  ~dulla^@204~ m.Xml.Serialization.XmlSchemaProvider~dulla^@204~ tTypedTableSchema")>  _
    Partial ~dulla^@204~ CompanyInfoDataTable
        Inherit~dulla^@204~ .DataTable
        Implements System~dulla^@204~ IEnumerable
        
        Privat~dulla^@204~ nyName As System.Data.DataColumn
   ~dulla^@204~   Private columnAddress As System.Dat~dulla^@204~ 
        
        Private columnCity~dulla^@204~ ta.DataColumn
        
        Priv~dulla^@204~ ntry As System.Data.DataColumn
     ~dulla^@204~ Private columnTel As System.Data.Data~dulla^@204~    
        Private columnFax As Sys~dulla^@204~ Column
        
        Private col~dulla^@204~ ess As System.Data.DataColumn
      ~dulla^@204~ rivate columnEmail As System.Data.Dat~dulla^@204~     
        Private columnCompantVA~dulla^@204~ tem.Data.DataColumn
        
      ~dulla^@204~ umnCompanyTINNo As System.Data.DataCo~dulla^@204~  
        Private columnCompanyDateO~dulla^@204~ m.Data.DataColumn
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Sub New()
            MyBase~dulla^@204~      Me.TableName = "CompanyInfo"
  ~dulla^@204~ BeginInit
            Me.InitClass
~dulla^@204~ e.EndInit
        End Sub
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Friend Sub New(ByVal table ~dulla^@204~ a.DataTable)
            MyBase.New~dulla^@204~ Me.TableName = table.TableName
     ~dulla^@204~ ble.CaseSensitive <> table.DataSet.Ca~dulla^@204~ Then
                Me.CaseSensitiv~dulla^@204~ eSensitive
            End If
     ~dulla^@204~ ble.Locale.ToString <> table.DataSet.~dulla^@204~ ng) Then
                Me.Locale =~dulla^@204~ 
            End If
            If ~dulla^@204~ ace <> table.DataSet.Namespace) Then~dulla^@204~     Me.Namespace = table.Namespace
 ~dulla^@204~ d If
            Me.Prefix = table.P~dulla^@204~       Me.MinimumCapacity = table.Mini~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ rotected Sub New(ByVal info As System~dulla^@204~ alization.SerializationInfo, ByVal co~dulla^@204~ em.Runtime.Serialization.StreamingCon~dulla^@204~       MyBase.New(info, context)
    ~dulla^@204~ itVars
        End Sub
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public ReadOnly Property Compa~dulla^@204~ ) As System.Data.DataColumn
        ~dulla^@204~             Return Me.columnCompanyNa~dulla^@204~    End Get
        End Property
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public ReadOnly Prope~dulla^@204~ lumn() As System.Data.DataColumn
   ~dulla^@204~ 
                Return Me.columnAddr~dulla^@204~     End Get
        End Property
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public ReadOnly Prop~dulla^@204~ mn() As System.Data.DataColumn
     ~dulla^@204~                Return Me.columnCity
~dulla^@204~ nd Get
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public ReadOnly Property ~dulla^@204~ () As System.Data.DataColumn
       ~dulla^@204~              Return Me.columnCountry~dulla^@204~ End Get
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public ReadOnly Property~dulla^@204~ As System.Data.DataColumn
          ~dulla^@204~           Return Me.columnTel
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public ReadOnly Property FaxCol~dulla^@204~ em.Data.DataColumn
            Get
~dulla^@204~    Return Me.columnFax
            E~dulla^@204~    End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public ReadOnly Property Posta~dulla^@204~ n() As System.Data.DataColumn
      ~dulla^@204~               Return Me.columnPostalA~dulla^@204~        End Get
        End Property~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public ReadOnly P~dulla^@204~ Column() As System.Data.DataColumn
 ~dulla^@204~ t
                Return Me.columnEm~dulla^@204~     End Get
        End Property
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public ReadOnly Prop~dulla^@204~ ATRegNoColumn() As System.Data.DataCo~dulla^@204~      Get
                Return Me.c~dulla^@204~ ATRegNo
            End Get
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ Property CompanyTINNoColumn() As Syst~dulla^@204~ olumn
            Get
             ~dulla^@204~ columnCompanyTINNo
            End G~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c ReadOnly Property CompanyDateOfRegC~dulla^@204~ stem.Data.DataColumn
            Get~dulla^@204~      Return Me.columnCompanyDateOfReg~dulla^@204~  End Get
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ ,  _
         System.ComponentModel.~dulla^@204~ se)>  _
        Public ReadOnly Prop~dulla^@204~ As Integer
            Get
        ~dulla^@204~ n Me.Rows.Count
            End Get~dulla^@204~ Property
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ efault ReadOnly Property Item(ByVal i~dulla^@204~ er) As CompanyInfoRow
            Ge~dulla^@204~       Return CType(Me.Rows(index),Com~dulla^@204~ 
            End Get
        End Pro~dulla^@204~   
        Public Event CompanyInfoR~dulla^@204~  CompanyInfoRowChangeEventHandler
  ~dulla^@204~    Public Event CompanyInfoRowChanged~dulla^@204~ foRowChangeEventHandler
        
  ~dulla^@204~ Event CompanyInfoRowDeleting As Compa~dulla^@204~ geEventHandler
        
        Pub~dulla^@204~ panyInfoRowDeleted As CompanyInfoRowC~dulla^@204~ dler
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ oads Sub AddCompanyInfoRow(ByVal row ~dulla^@204~ oRow)
            Me.Rows.Add(row)
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ ds Function AddCompanyInfoRow(ByVal C~dulla^@204~  String, ByVal Address As String, ByV~dulla^@204~ ring, ByVal Country As String, ByVal ~dulla^@204~ , ByVal Fax As String, ByVal PostalAd~dulla^@204~ ng, ByVal Email As String, ByVal Comp~dulla^@204~ s Date, ByVal CompanyTINNo As String,~dulla^@204~ yDateOfReg As Date) As CompanyInfoRow~dulla^@204~  Dim rowCompanyInfoRow As CompanyInfo~dulla^@204~ e.NewRow,CompanyInfoRow)
           ~dulla^@204~ foRow.ItemArray = New Object() {Compa~dulla^@204~ ss, City, Country, Tel, Fax, PostalAd~dulla^@204~  CompantVATRegNo, CompanyTINNo, Compa~dulla^@204~ 
            Me.Rows.Add(rowCompanyIn~dulla^@204~        Return rowCompanyInfoRow
    ~dulla^@204~ ion
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ dable Function GetEnumerator() As Sys~dulla^@204~ ns.IEnumerator Implements System.Coll~dulla^@204~ erable.GetEnumerator
            Ret~dulla^@204~ etEnumerator
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public Overrides Fu~dulla^@204~ ) As System.Data.DataTable
         ~dulla^@204~  CompanyInfoDataTable = CType(MyBase.~dulla^@204~ InfoDataTable)
            cln.InitV~dulla^@204~     Return cln
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Protected Overrid~dulla^@204~ reateInstance() As System.Data.DataTa~dulla^@204~     Return New CompanyInfoDataTable
~dulla^@204~ unction
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ b InitVars()
            Me.columnCo~dulla^@204~ yBase.Columns("CompanyName")
       ~dulla^@204~ nAddress = MyBase.Columns("Address")~dulla^@204~ Me.columnCity = MyBase.Columns("City"~dulla^@204~   Me.columnCountry = MyBase.Columns("~dulla^@204~           Me.columnTel = MyBase.Colum~dulla^@204~           Me.columnFax = MyBase.Colum~dulla^@204~           Me.columnPostalAddress = My~dulla^@204~ "PostalAddress")
            Me.colu~dulla^@204~ ase.Columns("Email")
            Me.~dulla^@204~ VATRegNo = MyBase.Columns("CompantVAT~dulla^@204~         Me.columnCompanyTINNo = MyBas~dulla^@204~ mpanyTINNo")
            Me.columnCo~dulla^@204~ g = MyBase.Columns("CompanyDateOfReg"~dulla^@204~ d Sub
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~  InitClass()
            Me.columnCo~dulla^@204~ ew System.Data.DataColumn("CompanyNam~dulla^@204~ tring), Nothing, System.Data.MappingT~dulla^@204~ 
            MyBase.Columns.Add(Me.co~dulla^@204~ me)
            Me.columnAddress = N~dulla^@204~ a.DataColumn("Address", GetType(Strin~dulla^@204~ System.Data.MappingType.Element)
   ~dulla^@204~ se.Columns.Add(Me.columnAddress)
   ~dulla^@204~ olumnCity = New System.Data.DataColum~dulla^@204~ Type(String), Nothing, System.Data.Ma~dulla^@204~ ment)
            MyBase.Columns.Add~dulla^@204~ y)
            Me.columnCountry = Ne~dulla^@204~ .DataColumn("Country", GetType(String~dulla^@204~ ystem.Data.MappingType.Element)
    ~dulla^@204~ e.Columns.Add(Me.columnCountry)
    ~dulla^@204~ lumnTel = New System.Data.DataColumn(~dulla^@204~ e(String), Nothing, System.Data.Mappi~dulla^@204~ t)
            MyBase.Columns.Add(Me~dulla^@204~             Me.columnFax = New System~dulla^@204~ umn("Fax", GetType(String), Nothing, ~dulla^@204~ appingType.Element)
            MyBa~dulla^@204~ d(Me.columnFax)
            Me.colum~dulla^@204~ s = New System.Data.DataColumn("Posta~dulla^@204~ tType(String), Nothing, System.Data.M~dulla^@204~ ement)
            MyBase.Columns.Ad~dulla^@204~ stalAddress)
            Me.columnEm~dulla^@204~ tem.Data.DataColumn("Email", GetType(~dulla^@204~ ing, System.Data.MappingType.Element)~dulla^@204~  MyBase.Columns.Add(Me.columnEmail)
~dulla^@204~ e.columnCompantVATRegNo = New System.~dulla^@204~ mn("CompantVATRegNo", GetType(Date), ~dulla^@204~ em.Data.MappingType.Element)
       ~dulla^@204~ olumns.Add(Me.columnCompantVATRegNo)~dulla^@204~ Me.columnCompanyTINNo = New System.Da~dulla^@204~ ("CompanyTINNo", GetType(String), Not~dulla^@204~ Data.MappingType.Element)
          ~dulla^@204~ mns.Add(Me.columnCompanyTINNo)
     ~dulla^@204~ umnCompanyDateOfReg = New System.Data~dulla^@204~ CompanyDateOfReg", GetType(Date), Not~dulla^@204~ Data.MappingType.Element)
          ~dulla^@204~ mns.Add(Me.columnCompanyDateOfReg)
 ~dulla^@204~ .columnCompanyName.AllowDBNull = fals~dulla^@204~   Me.columnCompanyName.MaxLength = 20~dulla^@204~  Me.columnAddress.AllowDBNull = false~dulla^@204~  Me.columnAddress.MaxLength = 20
   ~dulla^@204~ olumnCity.AllowDBNull = false
      ~dulla^@204~ mnCity.MaxLength = 20
            Me~dulla^@204~ y.AllowDBNull = false
            Me~dulla^@204~ y.MaxLength = 20
            Me.colu~dulla^@204~ th = 20
            Me.columnFax.Max~dulla^@204~             Me.columnPostalAddress.Ma~dulla^@204~ 
            Me.columnEmail.MaxLength~dulla^@204~       Me.columnCompantVATRegNo.AllowD~dulla^@204~ 
            Me.columnCompanyTINNo.A~dulla^@204~ false
            Me.columnCompanyTI~dulla^@204~  = 10
            Me.columnCompanyDa~dulla^@204~ DBNull = false
        End Sub
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Function NewCom~dulla^@204~  As CompanyInfoRow
            Retur~dulla^@204~ wRow,CompanyInfoRow)
        End Fun~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Protected O~dulla^@204~ tion NewRowFromBuilder(ByVal builder ~dulla^@204~ a.DataRowBuilder) As System.Data.Data~dulla^@204~     Return New CompanyInfoRow(builder)
        End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Protected Overrides Function GetRow~dulla^@204~ tem.Type
            Return GetType(~dulla^@204~ w)
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Protected Overrides Sub OnRow~dulla^@204~  e As System.Data.DataRowChangeEventA~dulla^@204~      MyBase.OnRowChanged(e)
        ~dulla^@204~ Me.CompanyInfoRowChangedEvent) Is Not~dulla^@204~                RaiseEvent CompanyInfo~dulla^@204~ , New CompanyInfoRowChangeEvent(CType~dulla^@204~ yInfoRow), e.Action))
            En~dulla^@204~  End Sub
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ d Overrides Sub OnRowChanging(ByVal e~dulla^@204~ ta.DataRowChangeEventArgs)
         ~dulla^@204~ owChanging(e)
            If (Not (M~dulla^@204~ RowChangingEvent) Is Nothing) Then
 ~dulla^@204~   RaiseEvent CompanyInfoRowChanging(M~dulla^@204~ yInfoRowChangeEvent(CType(e.Row,Compa~dulla^@204~ .Action))
            End If
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Protect~dulla^@204~ Sub OnRowDeleted(ByVal e As System.Da~dulla^@204~ ngeEventArgs)
            MyBase.OnR~dulla^@204~ 
            If (Not (Me.CompanyInfoR~dulla^@204~ t) Is Nothing) Then
                ~dulla^@204~ mpanyInfoRowDeleted(Me, New CompanyIn~dulla^@204~ ent(CType(e.Row,CompanyInfoRow), e.Ac~dulla^@204~        End If
        End Sub
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Protected Overrides Sub~dulla^@204~ g(ByVal e As System.Data.DataRowChang~dulla^@204~             MyBase.OnRowDeleting(e)
~dulla^@204~ f (Not (Me.CompanyInfoRowDeletingEven~dulla^@204~ ) Then
                RaiseEvent Co~dulla^@204~ eleting(Me, New CompanyInfoRowChangeE~dulla^@204~ Row,CompanyInfoRow), e.Action))
    ~dulla^@204~ f
        End Sub
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Sub RemoveCompanyInfoRow(ByV~dulla^@204~ panyInfoRow)
            Me.Rows.Rem~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic Shared Function GetTypedTableSchem~dulla^@204~  System.Xml.Schema.XmlSchemaSet) As S~dulla^@204~ ema.XmlSchemaComplexType
           ~dulla^@204~ System.Xml.Schema.XmlSchemaComplexTyp~dulla^@204~ m.Xml.Schema.XmlSchemaComplexType
  ~dulla^@204~  sequence As System.Xml.Schema.XmlSch~dulla^@204~  New System.Xml.Schema.XmlSchemaSeque~dulla^@204~     Dim ds As InventoryControlSystemD~dulla^@204~  InventoryControlSystemDataSet1
    ~dulla^@204~ d(ds.GetSchemaSerializable)
        ~dulla^@204~ As System.Xml.Schema.XmlSchemaAny = N~dulla^@204~ .Schema.XmlSchemaAny
            any~dulla^@204~  "http://www.w3.org/2001/XMLSchema"
~dulla^@204~ ny1.MinOccurs = New Decimal(0)
     ~dulla^@204~ axOccurs = Decimal.MaxValue
        ~dulla^@204~ essContents = System.Xml.Schema.XmlSc~dulla^@204~ ocessing.Lax
            sequence.It~dulla^@204~ 
            Dim any2 As System.Xml.~dulla^@204~ emaAny = New System.Xml.Schema.XmlSch~dulla^@204~        any2.Namespace = "urn:schemas-~dulla^@204~ :xml-diffgram-v1"
            any2.M~dulla^@204~ w Decimal(1)
            any2.Proces~dulla^@204~ ystem.Xml.Schema.XmlSchemaContentProc~dulla^@204~            sequence.Items.Add(any2)
~dulla^@204~ im attribute1 As System.Xml.Schema.Xm~dulla^@204~ ute = New System.Xml.Schema.XmlSchema~dulla^@204~           attribute1.Name = "namespac~dulla^@204~    attribute1.FixedValue = ds.Namespa~dulla^@204~    type.Attributes.Add(attribute1)
 ~dulla^@204~ m attribute2 As System.Xml.Schema.Xml~dulla^@204~ te = New System.Xml.Schema.XmlSchemaA~dulla^@204~          attribute2.Name = "tableType~dulla^@204~       attribute2.FixedValue = "Compan~dulla^@204~ e"
            type.Attributes.Add(a~dulla^@204~            type.Particle = sequence
~dulla^@204~ eturn type
        End Function
   ~dulla^@204~    
    <System.CodeDom.Compiler.Gen~dulla^@204~ ribute("System.Data.Design.TypedDataS~dulla^@204~  "2.0.0.0"),  _
     System.Serializ~dulla^@204~     System.Xml.Serialization.XmlSchem~dulla^@204~ ibute("GetTypedTableSchema")>  _
   ~dulla^@204~ ic Class CustomerDataTable
        I~dulla^@204~ m.Data.DataTable
        Implements ~dulla^@204~ tions.IEnumerable
        
        ~dulla^@204~ nCustomerID As System.Data.DataColumn~dulla^@204~        Private columnCustomerName As ~dulla^@204~ ataColumn
        
        Private ~dulla^@204~  As System.Data.DataColumn
        ~dulla^@204~ ate columnCity As System.Data.DataCol~dulla^@204~ 
        Private columnCountry As Sy~dulla^@204~ aColumn
        
        Private co~dulla^@204~ stem.Data.DataColumn
        
     ~dulla^@204~ lumnFax As System.Data.DataColumn
  ~dulla^@204~    Private columnPostalAddress As Sys~dulla^@204~ Column
        
        Private col~dulla^@204~ ystem.Data.DataColumn
        
    ~dulla^@204~ olumnCustomerVATRegNo As System.Data.~dulla^@204~        
        Private columnCustom~dulla^@204~ stem.Data.DataColumn
        
     ~dulla^@204~ lumnCustomerDateOfReg As System.Data.~dulla^@204~        
        Private columnProduc~dulla^@204~  As System.Data.DataColumn
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Sub New()
         ~dulla^@204~ 
            Me.TableName = "Custome~dulla^@204~    Me.BeginInit
            Me.InitC~dulla^@204~      Me.EndInit
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Friend Sub New(ByVal ~dulla^@204~ em.Data.DataTable)
            MyBas~dulla^@204~       Me.TableName = table.TableName~dulla^@204~ If (table.CaseSensitive <> table.Data~dulla^@204~ tive) Then
                Me.CaseSe~dulla^@204~ le.CaseSensitive
            End If~dulla^@204~ If (table.Locale.ToString <> table.Da~dulla^@204~ ToString) Then
                Me.Lo~dulla^@204~ Locale
            End If
         ~dulla^@204~ Namespace <> table.DataSet.Namespace)~dulla^@204~           Me.Namespace = table.Namesp~dulla^@204~     End If
            Me.Prefix = t~dulla^@204~             Me.MinimumCapacity = tabl~dulla^@204~ city
        End Sub
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Protected Sub New(ByVal info As ~dulla^@204~ e.Serialization.SerializationInfo, By~dulla^@204~ s System.Runtime.Serialization.Stream~dulla^@204~             MyBase.New(info, context)~dulla^@204~  Me.InitVars
        End Sub
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public ReadOnly Property~dulla^@204~ lumn() As System.Data.DataColumn
   ~dulla^@204~ 
                Return Me.columnCust~dulla^@204~        End Get
        End Property~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public ReadOnly P~dulla^@204~ merNameColumn() As System.Data.DataCo~dulla^@204~      Get
                Return Me.c~dulla^@204~ Name
            End Get
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ perty AddressColumn() As System.Data.~dulla^@204~            Get
                Retur~dulla^@204~ dress
            End Get
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ operty CityColumn() As System.Data.Da~dulla^@204~          Get
                Return ~dulla^@204~ 
            End Get
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Rea~dulla^@204~ y CountryColumn() As System.Data.Data~dulla^@204~        Get
                Return Me~dulla^@204~ y
            End Get
        End P~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Re~dulla^@204~ ty TelColumn() As System.Data.DataCol~dulla^@204~     Get
                Return Me.co~dulla^@204~         End Get
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public R~dulla^@204~ rty FaxColumn() As System.Data.DataCo~dulla^@204~      Get
                Return Me.c~dulla^@204~          End Get
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public ReadOnly~dulla^@204~ talAddressColumn() As System.Data.Dat~dulla^@204~         Get
                Return M~dulla^@204~ lAddress
            End Get
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  Property EmailColumn() As System.Dat~dulla^@204~ 
            Get
                Ret~dulla^@204~ Email
            End Get
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ operty CustomerVATRegNoColumn() As Sy~dulla^@204~ aColumn
            Get
           ~dulla^@204~ e.columnCustomerVATRegNo
           ~dulla^@204~      End Property
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public ReadOnly Property CustomerTIN~dulla^@204~  System.Data.DataColumn
            ~dulla^@204~         Return Me.columnCustomerTINNo~dulla^@204~  End Get
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public ReadOnly Propert~dulla^@204~ eOfRegColumn() As System.Data.DataCol~dulla^@204~     Get
                Return Me.co~dulla^@204~ ateOfReg
            End Get
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  Property ProductDateOfSupplyColumn()~dulla^@204~ ta.DataColumn
            Get
     ~dulla^@204~ turn Me.columnProductDateOfSupply
  ~dulla^@204~  Get
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
         System.ComponentModel.Brow~dulla^@204~   _
        Public ReadOnly Property~dulla^@204~ nteger
            Get
            ~dulla^@204~ .Rows.Count
            End Get
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ lt ReadOnly Property Item(ByVal index~dulla^@204~ As CustomerRow
            Get
    ~dulla^@204~ eturn CType(Me.Rows(index),CustomerRo~dulla^@204~    End Get
        End Property
   ~dulla^@204~   Public Event CustomerRowChanging As~dulla^@204~ hangeEventHandler
        
        ~dulla^@204~ CustomerRowChanged As CustomerRowChan~dulla^@204~ r
        
        Public Event Cus~dulla^@204~ ing As CustomerRowChangeEventHandler~dulla^@204~       Public Event CustomerRowDeleted~dulla^@204~ owChangeEventHandler
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Overloads Sub AddCustomerR~dulla^@204~ As CustomerRow)
            Me.Rows.~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic Overloads Function AddCustomerRow(~dulla^@204~ rID As String, ByVal CustomerName As ~dulla^@204~  Address As String, ByVal City As Str~dulla^@204~ untry As String, ByVal Tel As String,~dulla^@204~  String, ByVal PostalAddress As Strin~dulla^@204~ l As String, ByVal CustomerVATRegNo A~dulla^@204~ al CustomerTINNo As String, ByVal Cus~dulla^@204~ g As Date, ByVal ProductDateOfSupply ~dulla^@204~ ustomerRow
            Dim rowCustom~dulla^@204~ omerRow = CType(Me.NewRow,CustomerRow~dulla^@204~   rowCustomerRow.ItemArray = New Obje~dulla^@204~ rID, CustomerName, Address, City, Cou~dulla^@204~ x, PostalAddress, Email, CustomerVATR~dulla^@204~ rTINNo, CustomerDateOfReg, ProductDat~dulla^@204~            Me.Rows.Add(rowCustomerRow~dulla^@204~   Return rowCustomerRow
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public F~dulla^@204~ yCustomerID(ByVal CustomerID As Strin~dulla^@204~ rRow
            Return CType(Me.Row~dulla^@204~ ject() {CustomerID}),CustomerRow)
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ ridable Function GetEnumerator() As S~dulla^@204~ ions.IEnumerator Implements System.Co~dulla^@204~ umerable.GetEnumerator
            R~dulla^@204~ .GetEnumerator
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Overrides ~dulla^@204~ e() As System.Data.DataTable
       ~dulla^@204~ As CustomerDataTable = CType(MyBase.C~dulla^@204~ DataTable)
            cln.InitVars~dulla^@204~ Return cln
        End Function
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Protected Overrides F~dulla^@204~ eInstance() As System.Data.DataTable~dulla^@204~ Return New CustomerDataTable
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Fri~dulla^@204~ ars()
            Me.columnCustomerI~dulla^@204~ lumns("CustomerID")
            Me.c~dulla^@204~ Name = MyBase.Columns("CustomerName")~dulla^@204~  Me.columnAddress = MyBase.Columns("A~dulla^@204~          Me.columnCity = MyBase.Colum~dulla^@204~            Me.columnCountry = MyBase.~dulla^@204~ try")
            Me.columnTel = MyB~dulla^@204~ Tel")
            Me.columnFax = MyB~dulla^@204~ Fax")
            Me.columnPostalAdd~dulla^@204~ .Columns("PostalAddress")
          ~dulla^@204~ ail = MyBase.Columns("Email")
      ~dulla^@204~ mnCustomerVATRegNo = MyBase.Columns("~dulla^@204~ gNo")
            Me.columnCustomerT~dulla^@204~ .Columns("CustomerTINNo")
          ~dulla^@204~ stomerDateOfReg = MyBase.Columns("Cus~dulla^@204~ g")
            Me.columnProductDate~dulla^@204~ Base.Columns("ProductDateOfSupply")
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ itClass()
            Me.columnCusto~dulla^@204~ ystem.Data.DataColumn("CustomerID", G~dulla^@204~ ), Nothing, System.Data.MappingType.E~dulla^@204~         MyBase.Columns.Add(Me.columnC~dulla^@204~            Me.columnCustomerName = Ne~dulla^@204~ .DataColumn("CustomerName", GetType(S~dulla^@204~ ng, System.Data.MappingType.Element)~dulla^@204~ MyBase.Columns.Add(Me.columnCustomerN~dulla^@204~      Me.columnAddress = New System.Da~dulla^@204~ ("Address", GetType(String), Nothing,~dulla^@204~ MappingType.Element)
            MyB~dulla^@204~ dd(Me.columnAddress)
            Me.~dulla^@204~ New System.Data.DataColumn("City", Ge~dulla^@204~ , Nothing, System.Data.MappingType.El~dulla^@204~        MyBase.Columns.Add(Me.columnCi~dulla^@204~     Me.columnCountry = New System.Dat~dulla^@204~ "Country", GetType(String), Nothing, ~dulla^@204~ appingType.Element)
            MyBa~dulla^@204~ d(Me.columnCountry)
            Me.c~dulla^@204~ w System.Data.DataColumn("Tel", GetTy~dulla^@204~ othing, System.Data.MappingType.Eleme~dulla^@204~     MyBase.Columns.Add(Me.columnTel)~dulla^@204~ Me.columnFax = New System.Data.DataCo~dulla^@204~ etType(String), Nothing, System.Data.~dulla^@204~ lement)
            MyBase.Columns.A~dulla^@204~ ax)
            Me.columnPostalAddre~dulla^@204~ em.Data.DataColumn("PostalAddress", G~dulla^@204~ ), Nothing, System.Data.MappingType.E~dulla^@204~         MyBase.Columns.Add(Me.columnP~dulla^@204~ 
            Me.columnEmail = New Sy~dulla^@204~ aColumn("Email", GetType(String), Not~dulla^@204~ Data.MappingType.Element)
          ~dulla^@204~ mns.Add(Me.columnEmail)
            ~dulla^@204~ omerVATRegNo = New System.Data.DataCo~dulla^@204~ rVATRegNo", GetType(String), Nothing,~dulla^@204~ MappingType.Element)
            MyB~dulla^@204~ dd(Me.columnCustomerVATRegNo)
      ~dulla^@204~ mnCustomerTINNo = New System.Data.Dat~dulla^@204~ omerTINNo", GetType(String), Nothing,~dulla^@204~ MappingType.Element)
            MyB~dulla^@204~ dd(Me.columnCustomerTINNo)
         ~dulla^@204~ ustomerDateOfReg = New System.Data.Da~dulla^@204~ tomerDateOfReg", GetType(Date), Nothi~dulla^@204~ ta.MappingType.Element)
            ~dulla^@204~ s.Add(Me.columnCustomerDateOfReg)
  ~dulla^@204~ columnProductDateOfSupply = New Syste~dulla^@204~ lumn("ProductDateOfSupply", GetType(Date), Nothing, System.Data.MappingType.Ele~dulla^@204~       MyBase.Columns.Add(Me.columnPro~dulla^@204~ ply)
            Me.Constraints.Add(~dulla^@204~ ta.UniqueConstraint("Constraint1", Ne~dulla^@204~ .DataColumn() {Me.columnCustomerID}, ~dulla^@204~        Me.columnCustomerID.AllowDBNul~dulla^@204~           Me.columnCustomerID.Unique ~dulla^@204~        Me.columnCustomerID.MaxLength ~dulla^@204~      Me.columnCustomerName.MaxLength ~dulla^@204~      Me.columnAddress.AllowDBNull = f~dulla^@204~      Me.columnAddress.MaxLength = 20~dulla^@204~ Me.columnCity.AllowDBNull = false
  ~dulla^@204~ columnCity.MaxLength = 20
          ~dulla^@204~ untry.AllowDBNull = false
          ~dulla^@204~ untry.MaxLength = 20
            Me.~dulla^@204~ owDBNull = false
            Me.colu~dulla^@204~ th = 20
            Me.columnFax.All~dulla^@204~ lse
            Me.columnFax.MaxLeng~dulla^@204~         Me.columnPostalAddress.AllowD~dulla^@204~ 
            Me.columnPostalAddress.~dulla^@204~ 0
            Me.columnEmail.AllowDB~dulla^@204~ 
            Me.columnEmail.MaxLength~dulla^@204~       Me.columnCustomerVATRegNo.MaxLe~dulla^@204~           Me.columnCustomerTINNo.MaxL~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Function NewCustomerRow() As Cus~dulla^@204~          Return CType(Me.NewRow,Custo~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Protected Overrides Function NewRowFr~dulla^@204~ al builder As System.Data.DataRowBuil~dulla^@204~ m.Data.DataRow
            Return Ne~dulla^@204~ (builder)
        End Function
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Protected Overrides Fu~dulla^@204~ Type() As System.Type
            Re~dulla^@204~ CustomerRow)
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Protected Overrides~dulla^@204~ nged(ByVal e As System.Data.DataRowCh~dulla^@204~ )
            MyBase.OnRowChanged(e)~dulla^@204~  If (Not (Me.CustomerRowChangedEvent)~dulla^@204~ Then
                RaiseEvent Cust~dulla^@204~ d(Me, New CustomerRowChangeEvent(CTyp~dulla^@204~ merRow), e.Action))
            End ~dulla^@204~ nd Sub
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ Overrides Sub OnRowChanging(ByVal e A~dulla^@204~ .DataRowChangeEventArgs)
           ~dulla^@204~ Changing(e)
            If (Not (Me.~dulla^@204~ angingEvent) Is Nothing) Then
      ~dulla^@204~ seEvent CustomerRowChanging(Me, New C~dulla^@204~ ngeEvent(CType(e.Row,CustomerRow), e.~dulla^@204~          End If
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Protected Overrides S~dulla^@204~ ed(ByVal e As System.Data.DataRowChan~dulla^@204~ 
            MyBase.OnRowDeleted(e)
~dulla^@204~ f (Not (Me.CustomerRowDeletedEvent) I~dulla^@204~ en
                RaiseEvent Custom~dulla^@204~ Me, New CustomerRowChangeEvent(CType(~dulla^@204~ rRow), e.Action))
            End If~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ errides Sub OnRowDeleting(ByVal e As ~dulla^@204~ ataRowChangeEventArgs)
            M~dulla^@204~ leting(e)
            If (Not (Me.Cu~dulla^@204~ tingEvent) Is Nothing) Then
        ~dulla^@204~ Event CustomerRowDeleting(Me, New Cus~dulla^@204~ eEvent(CType(e.Row,CustomerRow), e.Ac~dulla^@204~        End If
        End Sub
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Sub RemoveCustom~dulla^@204~ ow As CustomerRow)
            Me.Ro~dulla^@204~ )
        End Sub
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Shared Function GetTypedTabl~dulla^@204~  xs As System.Xml.Schema.XmlSchemaSet~dulla^@204~ ml.Schema.XmlSchemaComplexType
     ~dulla^@204~ pe As System.Xml.Schema.XmlSchemaComp~dulla^@204~  System.Xml.Schema.XmlSchemaComplexTy~dulla^@204~    Dim sequence As System.Xml.Schema.~dulla^@204~ ence = New System.Xml.Schema.XmlSchem~dulla^@204~           Dim ds As InventoryControlS~dulla^@204~  = New InventoryControlSystemDataSet1~dulla^@204~  xs.Add(ds.GetSchemaSerializable)
  ~dulla^@204~  any1 As System.Xml.Schema.XmlSchemaA~dulla^@204~ em.Xml.Schema.XmlSchemaAny
         ~dulla^@204~ pace = "http://www.w3.org/2001/XMLSch~dulla^@204~      any1.MinOccurs = New Decimal(0)~dulla^@204~ any1.MaxOccurs = Decimal.MaxValue
  ~dulla^@204~ 1.ProcessContents = System.Xml.Schema~dulla^@204~ tentProcessing.Lax
            seque~dulla^@204~ (any1)
            Dim any2 As Syste~dulla^@204~ XmlSchemaAny = New System.Xml.Schema.~dulla^@204~ 
            any2.Namespace = "urn:sc~dulla^@204~ ft-com:xml-diffgram-v1"
            ~dulla^@204~ s = New Decimal(1)
            any2.~dulla^@204~ ts = System.Xml.Schema.XmlSchemaConte~dulla^@204~ Lax
            sequence.Items.Add(a~dulla^@204~      Dim attribute1 As System.Xml.Sch~dulla^@204~ Attribute = New System.Xml.Schema.Xml~dulla^@204~ te
            attribute1.Name = "na~dulla^@204~          attribute1.FixedValue = ds.N~dulla^@204~          type.Attributes.Add(attribut~dulla^@204~     Dim attribute2 As System.Xml.Sche~dulla^@204~ ttribute = New System.Xml.Schema.XmlS~dulla^@204~ e
            attribute2.Name = "tab~dulla^@204~             attribute2.FixedValue = "~dulla^@204~ able"
            type.Attributes.Ad~dulla^@204~ 
            type.Particle = sequenc~dulla^@204~   Return type
        End Function
~dulla^@204~ 
    
    <System.CodeDom.Compiler.~dulla^@204~ Attribute("System.Data.Design.TypedDa~dulla^@204~ r", "2.0.0.0"),  _
     System.Seria~dulla^@204~ 
     System.Xml.Serialization.XmlSc~dulla^@204~ ttribute("GetTypedTableSchema")>  _
~dulla^@204~ ublic Class InvoiceDataTable
       ~dulla^@204~ tem.Data.DataTable
        Implement~dulla^@204~ ections.IEnumerable
        
      ~dulla^@204~ umnInvoiceNo As System.Data.DataColum~dulla^@204~         Private columnDate As System.~dulla^@204~ mn
        
        Private columnT~dulla^@204~  System.Data.DataColumn
        
  ~dulla^@204~  columnFrieghtCharge As System.Data.D~dulla^@204~       
        Private columnMiscell~dulla^@204~  System.Data.DataColumn
        
  ~dulla^@204~  columnTotalPurchaseAmount As System.~dulla^@204~ mn
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ ()
            MyBase.New
         ~dulla^@204~ me = "Invoice"
            Me.BeginI~dulla^@204~     Me.InitClass
            Me.EndI~dulla^@204~ End Sub
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ b New(ByVal table As System.Data.Data~dulla^@204~        MyBase.New
            Me.Tab~dulla^@204~ e.TableName
            If (table.Ca~dulla^@204~ > table.DataSet.CaseSensitive) Then
~dulla^@204~    Me.CaseSensitive = table.CaseSensi~dulla^@204~      End If
            If (table.Lo~dulla^@204~  <> table.DataSet.Locale.ToString) Th~dulla^@204~        Me.Locale = table.Locale
    ~dulla^@204~ f
            If (table.Namespace <>~dulla^@204~ t.Namespace) Then
                Me~dulla^@204~ table.Namespace
            End If
~dulla^@204~ e.Prefix = table.Prefix
            ~dulla^@204~ acity = table.MinimumCapacity
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Protect~dulla^@204~ Val info As System.Runtime.Serializat~dulla^@204~ tionInfo, ByVal context As System.Run~dulla^@204~ ation.StreamingContext)
            ~dulla^@204~ fo, context)
            Me.InitVars~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ nly Property InvoiceNoColumn() As Sys~dulla^@204~ Column
            Get
            ~dulla^@204~ .columnInvoiceNo
            End Get~dulla^@204~  Property
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ ReadOnly Property DateColumn() As Sys~dulla^@204~ Column
            Get
                Return Me.columnDate
            End ~dulla^@204~ End Property
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic ReadOnly Property TotalAmountColum~dulla^@204~ .Data.DataColumn
            Get
  ~dulla^@204~  Return Me.columnTotalAmount
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public ReadOnly Property Frieght~dulla^@204~ ) As System.Data.DataColumn
        ~dulla^@204~             Return Me.columnFrieghtCh~dulla^@204~      End Get
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public ReadOnly Pro~dulla^@204~ aneousCostColumn() As System.Data.Dat~dulla^@204~         Get
                Return M~dulla^@204~ llaneousCost
            End Get
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ Only Property TotalPurchaseAmountColu~dulla^@204~ m.Data.DataColumn
            Get
 ~dulla^@204~   Return Me.columnTotalPurchaseAmount~dulla^@204~  End Get
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ ,  _
         System.ComponentModel.~dulla^@204~ se)>  _
        Public ReadOnly Prop~dulla^@204~ As Integer
            Get
        ~dulla^@204~ n Me.Rows.Count
            End Get~dulla^@204~ Property
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ efault ReadOnly Property Item(ByVal i~dulla^@204~ er) As InvoiceRow
            Get
 ~dulla^@204~   Return CType(Me.Rows(index),Invoice~dulla^@204~      End Get
        End Property
 ~dulla^@204~     Public Event InvoiceRowChanging A~dulla^@204~ hangeEventHandler
        
        ~dulla^@204~ InvoiceRowChanged As InvoiceRowChange~dulla^@204~ 
        
        Public Event Invoi~dulla^@204~  As InvoiceRowChangeEventHandler
   ~dulla^@204~   Public Event InvoiceRowDeleted As I~dulla^@204~ geEventHandler
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Overloads Sub AddInvoiceRow(ByVa~dulla^@204~ iceRow)
            Me.Rows.Add(row)~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ oads Function AddInvoiceRow(ByVal Inv~dulla^@204~ ing, ByVal _Date As Date, ByVal Total~dulla^@204~ eger, ByVal FrieghtCharge As Integer,~dulla^@204~ laneousCost As Integer, ByVal TotalPu~dulla^@204~ As Integer) As InvoiceRow
          ~dulla^@204~ iceRow As InvoiceRow = CType(Me.NewRo~dulla^@204~ 
            rowInvoiceRow.ItemArray~dulla^@204~ () {InvoiceNo, _Date, TotalAmount, Fr~dulla^@204~ MiscellaneousCost, TotalPurchaseAmoun~dulla^@204~    Me.Rows.Add(rowInvoiceRow)
      ~dulla^@204~ rowInvoiceRow
        End Function
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Function Fi~dulla^@204~ (ByVal InvoiceNo As String) As Invoic~dulla^@204~      Return CType(Me.Rows.Find(New Ob~dulla^@204~ ceNo}),InvoiceRow)
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Overri~dulla^@204~ n GetEnumerator() As System.Collectio~dulla^@204~ r Implements System.Collections.IEnum~dulla^@204~ merator
            Return Me.Rows.G~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Overrides Function Clone(~dulla^@204~ ata.DataTable
            Dim cln As~dulla^@204~ able = CType(MyBase.Clone,InvoiceData~dulla^@204~        cln.InitVars
            Retu~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ rotected Overrides Function CreateIns~dulla^@204~ stem.Data.DataTable
            Retu~dulla^@204~ eDataTable
        End Function
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Friend Sub InitVars()~dulla^@204~  Me.columnInvoiceNo = MyBase.Columns(~dulla^@204~ 
            Me.columnDate = MyBase.C~dulla^@204~ )
            Me.columnTotalAmount =~dulla^@204~ ns("TotalAmount")
            Me.col~dulla^@204~ rge = MyBase.Columns("FrieghtCharge")~dulla^@204~  Me.columnMiscellaneousCost = MyBase.~dulla^@204~ ellaneousCost")
            Me.colum~dulla^@204~ eAmount = MyBase.Columns("TotalPurcha~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ ivate Sub InitClass()
            Me~dulla^@204~ eNo = New System.Data.DataColumn("Inv~dulla^@204~ ype(String), Nothing, System.Data.Map~dulla^@204~ ent)
            MyBase.Columns.Add(~dulla^@204~ iceNo)
            Me.columnDate = N~dulla^@204~ a.DataColumn("Date", GetType(Date), N~dulla^@204~ m.Data.MappingType.Element)
        ~dulla^@204~ Date.ExtendedProperties.Add("Generato~dulla^@204~ ameInRow", "_Date")
            Me.c~dulla^@204~ endedProperties.Add("Generator_UserCo~dulla^@204~ ate")
            MyBase.Columns.Add~dulla^@204~ e)
            Me.columnTotalAmount ~dulla^@204~ Data.DataColumn("TotalAmount", GetTyp~dulla^@204~ othing, System.Data.MappingType.Eleme~dulla^@204~     MyBase.Columns.Add(Me.columnTotal~dulla^@204~         Me.columnFrieghtCharge = New ~dulla^@204~ ataColumn("FrieghtCharge", GetType(In~dulla^@204~ ng, System.Data.MappingType.Element)~dulla^@204~ MyBase.Columns.Add(Me.columnFrieghtCh~dulla^@204~       Me.columnMiscellaneousCost = Ne~dulla^@204~ .DataColumn("MiscellaneousCost", GetT~dulla^@204~  Nothing, System.Data.MappingType.Ele~dulla^@204~       MyBase.Columns.Add(Me.columnMis~dulla^@204~ t)
            Me.columnTotalPurchas~dulla^@204~  System.Data.DataColumn("TotalPurchas~dulla^@204~ Type(Integer), Nothing, System.Data.M~dulla^@204~ ement)
            MyBase.Columns.Ad~dulla^@204~ talPurchaseAmount)
            Me.Co~dulla^@204~ (New System.Data.UniqueConstraint("Co~dulla^@204~ ew System.Data.DataColumn() {Me.colum~dulla^@204~ true))
            Me.columnInvoiceN~dulla^@204~  = false
            Me.columnInvoic~dulla^@204~ true
            Me.columnInvoiceNo.~dulla^@204~ 0
            Me.columnDate.AllowDBN~dulla^@204~             Me.columnTotalAmount.Allo~dulla^@204~ se
            Me.columnTotalPurchas~dulla^@204~ DBNull = false
        End Sub
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Function NewInv~dulla^@204~ InvoiceRow
            Return CType(~dulla^@204~ oiceRow)
        End Function
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Protected Overrides Fun~dulla^@204~ romBuilder(ByVal builder As System.Da~dulla^@204~ lder) As System.Data.DataRow
       ~dulla^@204~ ew InvoiceRow(builder)
        End F~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Protected~dulla^@204~ nction GetRowType() As System.Type
 ~dulla^@204~ turn GetType(InvoiceRow)
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Protect~dulla^@204~ Sub OnRowChanged(ByVal e As System.Da~dulla^@204~ ngeEventArgs)
            MyBase.OnR~dulla^@204~ 
            If (Not (Me.InvoiceRowCh~dulla^@204~ s Nothing) Then
                Rais~dulla^@204~ eRowChanged(Me, New InvoiceRowChangeE~dulla^@204~ Row,InvoiceRow), e.Action))
        ~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ otected Overrides Sub OnRowChanging(B~dulla^@204~ tem.Data.DataRowChangeEventArgs)
   ~dulla^@204~ se.OnRowChanging(e)
            If (~dulla^@204~ ceRowChangingEvent) Is Nothing) Then~dulla^@204~     RaiseEvent InvoiceRowChanging(Me,~dulla^@204~ owChangeEvent(CType(e.Row,InvoiceRow)~dulla^@204~ 
            End If
        End Sub~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Protected Overrid~dulla^@204~ eleted(ByVal e As System.Data.DataRow~dulla^@204~ gs)
            MyBase.OnRowDeleted(~dulla^@204~    If (Not (Me.InvoiceRowDeletedEvent~dulla^@204~  Then
                RaiseEvent Inv~dulla^@204~ d(Me, New InvoiceRowChangeEvent(CType(e.Row,InvoiceRow), e.Action))
          ~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ected Overrides Sub OnRowDeleting(ByV~dulla^@204~ m.Data.DataRowChangeEventArgs)
     ~dulla^@204~ .OnRowDeleting(e)
            If (No~dulla^@204~ RowDeletingEvent) Is Nothing) Then
 ~dulla^@204~   RaiseEvent InvoiceRowDeleting(Me, N~dulla^@204~ ChangeEvent(CType(e.Row,InvoiceRow), ~dulla^@204~            End If
        End Sub
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public Sub RemoveIn~dulla^@204~ l row As InvoiceRow)
            Me.~dulla^@204~ ow)
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Shared Function GetTypedTa~dulla^@204~ al xs As System.Xml.Schema.XmlSchemaS~dulla^@204~ .Xml.Schema.XmlSchemaComplexType
   ~dulla^@204~ type As System.Xml.Schema.XmlSchemaCo~dulla^@204~ ew System.Xml.Schema.XmlSchemaComplex~dulla^@204~      Dim sequence As System.Xml.Schem~dulla^@204~ quence = New System.Xml.Schema.XmlSch~dulla^@204~             Dim ds As InventoryContro~dulla^@204~ t1 = New InventoryControlSystemDataSe~dulla^@204~    xs.Add(ds.GetSchemaSerializable)
~dulla^@204~ im any1 As System.Xml.Schema.XmlSchem~dulla^@204~ stem.Xml.Schema.XmlSchemaAny
       ~dulla^@204~ espace = "http://www.w3.org/2001/XMLS~dulla^@204~        any1.MinOccurs = New Decimal(0~dulla^@204~   any1.MaxOccurs = Decimal.MaxValue
~dulla^@204~ ny1.ProcessContents = System.Xml.Sche~dulla^@204~ ontentProcessing.Lax
            seq~dulla^@204~ dd(any1)
            Dim any2 As Sys~dulla^@204~ a.XmlSchemaAny = New System.Xml.Schem~dulla^@204~ y
            any2.Namespace = "urn:~dulla^@204~ soft-com:xml-diffgram-v1"
          ~dulla^@204~ urs = New Decimal(1)
            any~dulla^@204~ ents = System.Xml.Schema.XmlSchemaCon~dulla^@204~ g.Lax
            sequence.Items.Add~dulla^@204~        Dim attribute1 As System.Xml.S~dulla^@204~ maAttribute = New System.Xml.Schema.X~dulla^@204~ bute
            attribute1.Name = "~dulla^@204~            attribute1.FixedValue = ds~dulla^@204~            type.Attributes.Add(attrib~dulla^@204~       Dim attribute2 As System.Xml.Sc~dulla^@204~ aAttribute = New System.Xml.Schema.Xm~dulla^@204~ ute
            attribute2.Name = "t~dulla^@204~ 
            attribute2.FixedValue =~dulla^@204~ Table"
            type.Attributes.A~dulla^@204~ )
            type.Particle = sequen~dulla^@204~    Return type
        End Function~dulla^@204~ s
    
    <System.CodeDom.Compiler~dulla^@204~ eAttribute("System.Data.Design.TypedD~dulla^@204~ or", "2.0.0.0"),  _
     System.Seri~dulla^@204~ _
     System.Xml.Serialization.XmlS~dulla^@204~ Attribute("GetTypedTableSchema")>  _~dulla^@204~ Public Class OrderDataTable
        ~dulla^@204~ em.Data.DataTable
        Implements~dulla^@204~ ctions.IEnumerable
        
       ~dulla^@204~ mnOrderNo As System.Data.DataColumn
~dulla^@204~      Private columnPartNo As System.D~dulla^@204~ n
        
        Private columnDe~dulla^@204~ System.Data.DataColumn
        
   ~dulla^@204~ columnQuantity As System.Data.DataCol~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Sub Ne~dulla^@204~     MyBase.New
            Me.TableN~dulla^@204~ 
            Me.BeginInit
         ~dulla^@204~ ss
            Me.EndInit
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Friend Sub~dulla^@204~ ble As System.Data.DataTable)
      ~dulla^@204~ New
            Me.TableName = table~dulla^@204~            If (table.CaseSensitive <>~dulla^@204~ t.CaseSensitive) Then
              ~dulla^@204~ itive = table.CaseSensitive
        ~dulla^@204~            If (table.Locale.ToString ~dulla^@204~ Set.Locale.ToString) Then
          ~dulla^@204~ le = table.Locale
            End If~dulla^@204~  If (table.Namespace <> table.DataSet~dulla^@204~ hen
                Me.Namespace = t~dulla^@204~ e
            End If
            Me~dulla^@204~ le.Prefix
            Me.MinimumCapa~dulla^@204~ MinimumCapacity
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Protected Sub New(ByV~dulla^@204~ stem.Runtime.Serialization.Serializat~dulla^@204~ l context As System.Runtime.Serializa~dulla^@204~ gContext)
            MyBase.New(inf~dulla^@204~             Me.InitVars
        End ~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public ReadOn~dulla^@204~ rderNoColumn() As System.Data.DataCol~dulla^@204~     Get
                Return Me.co~dulla^@204~             End Get
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public ReadO~dulla^@204~ PartNoColumn() As System.Data.DataCol~dulla^@204~     Get
                Return Me.co~dulla^@204~            End Get
        End Prope~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public ReadOn~dulla^@204~ escriptionColumn() As System.Data.Dat~dulla^@204~         Get
                Return M~dulla^@204~ iption
            End Get
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ roperty QuantityColumn() As System.Da~dulla^@204~ 
            Get
                Re~dulla^@204~ nQuantity
            End Get
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute(),  _
         ~dulla^@204~ entModel.Browsable(false)>  _
      ~dulla^@204~ Only Property Count() As Integer
   ~dulla^@204~ 
                Return Me.Rows.Count~dulla^@204~  End Get
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Default ReadOnly~dulla^@204~ m(ByVal index As Integer) As OrderRow~dulla^@204~  Get
                Return CType(Me~dulla^@204~ OrderRow)
            End Get
     ~dulla^@204~ ty
        
        Public Event Or~dulla^@204~ g As OrderRowChangeEventHandler
    ~dulla^@204~  Public Event OrderRowChanged As Orde~dulla^@204~ ntHandler
        
        Public E~dulla^@204~ Deleting As OrderRowChangeEventHandle~dulla^@204~         Public Event OrderRowDeleted ~dulla^@204~ angeEventHandler
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Overloads Sub AddOrderRow(ByVa~dulla^@204~ rRow)
            Me.Rows.Add(row)
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ ds Function AddOrderRow(ByVal OrderNo~dulla^@204~ yVal PartNo As String, ByVal Descript~dulla^@204~ , ByVal Quantity As Integer) As Order~dulla^@204~     Dim rowOrderRow As OrderRow = CTy~dulla^@204~ OrderRow)
            rowOrderRow.It~dulla^@204~  Object() {OrderNo, PartNo, Descripti~dulla^@204~ 
            Me.Rows.Add(rowOrderRow~dulla^@204~   Return rowOrderRow
        End Fun~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Func~dulla^@204~ derNo(ByVal OrderNo As String) As Ord~dulla^@204~       Return CType(Me.Rows.Find(New O~dulla^@204~ rNo}),OrderRow)
        End Function~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Overridab~dulla^@204~ etEnumerator() As System.Collections.~dulla^@204~ mplements System.Collections.IEnumera~dulla^@204~ ator
            Return Me.Rows.GetE~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Overrides Function Clone() A~dulla^@204~ .DataTable
            Dim cln As Or~dulla^@204~ = CType(MyBase.Clone,OrderDataTable)~dulla^@204~ cln.InitVars
            Return cln~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ d Overrides Function CreateInstance()~dulla^@204~ ta.DataTable
            Return New ~dulla^@204~ e
        End Function
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Friend Sub InitVars()
            Me.columnOrderNo = MyBase.Columns("Or~dulla^@204~         Me.columnPartNo = MyBase.Colu~dulla^@204~ 
            Me.columnDescription = ~dulla^@204~ s("Description")
            Me.colu~dulla^@204~ MyBase.Columns("Quantity")
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Private Su~dulla^@204~ 
            Me.columnOrderNo = New ~dulla^@204~ ataColumn("OrderNo", GetType(String),~dulla^@204~ tem.Data.MappingType.Element)
      ~dulla^@204~ Columns.Add(Me.columnOrderNo)
      ~dulla^@204~ mnPartNo = New System.Data.DataColumn~dulla^@204~ tType(String), Nothing, System.Data.M~dulla^@204~ ement)
            MyBase.Columns.Ad~dulla^@204~ rtNo)
            Me.columnDescripti~dulla^@204~ em.Data.DataColumn("Description", Get~dulla^@204~  Nothing, System.Data.MappingType.Ele~dulla^@204~       MyBase.Columns.Add(Me.columnDes~dulla^@204~           Me.columnQuantity = New Sys~dulla^@204~ Column("Quantity", GetType(Integer), ~dulla^@204~ em.Data.MappingType.Element)
       ~dulla^@204~ olumns.Add(Me.columnQuantity)
      ~dulla^@204~ traints.Add(New System.Data.UniqueCon~dulla^@204~ traint1", New System.Data.DataColumn(~dulla^@204~ rderNo}, true))
            Me.colum~dulla^@204~ wDBNull = false
            Me.colum~dulla^@204~ ue = true
            Me.columnOrder~dulla^@204~ = 20
            Me.columnPartNo.All~dulla^@204~ lse
            Me.columnPartNo.MaxL~dulla^@204~            Me.columnDescription.Allow~dulla^@204~ e
            Me.columnDescription.M~dulla^@204~ 
            Me.columnQuantity.Allow~dulla^@204~ e
        End Sub
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Function NewOrderRow() As Or~dulla^@204~        Return CType(Me.NewRow,OrderRo~dulla^@204~ nd Function
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ cted Overrides Function NewRowFromBui~dulla^@204~ ilder As System.Data.DataRowBuilder) ~dulla^@204~ a.DataRow
            Return New Ord~dulla^@204~ )
        End Function
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Protected Overrides Function G~dulla^@204~ s System.Type
            Return Get~dulla^@204~ )
        End Function
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Protected Overrides Sub OnRowC~dulla^@204~ e As System.Data.DataRowChangeEventAr~dulla^@204~     MyBase.OnRowChanged(e)
         ~dulla^@204~ e.OrderRowChangedEvent) Is Nothing) T~dulla^@204~         RaiseEvent OrderRowChanged(Me~dulla^@204~ wChangeEvent(CType(e.Row,OrderRow), e~dulla^@204~           End If
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Protected Overrides ~dulla^@204~ ging(ByVal e As System.Data.DataRowCh~dulla^@204~ )
            MyBase.OnRowChanging(e~dulla^@204~   If (Not (Me.OrderRowChangingEvent) ~dulla^@204~ hen
                RaiseEvent Order~dulla^@204~ e, New OrderRowChangeEvent(CType(e.Ro~dulla^@204~ e.Action))
            End If
     ~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Protec~dulla^@204~  Sub OnRowDeleted(ByVal e As System.D~dulla^@204~ angeEventArgs)
            MyBase.On~dulla^@204~ 
            If (Not (Me.OrderRowDel~dulla^@204~  Nothing) Then
                Raise~dulla^@204~ wDeleted(Me, New OrderRowChangeEvent(~dulla^@204~ rderRow), e.Action))
            End~dulla^@204~ End Sub
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~  Overrides Sub OnRowDeleting(ByVal e ~dulla^@204~ a.DataRowChangeEventArgs)
          ~dulla^@204~ wDeleting(e)
            If (Not (Me~dulla^@204~ tingEvent) Is Nothing) Then
        ~dulla^@204~ Event OrderRowDeleting(Me, New OrderR~dulla^@204~ (CType(e.Row,OrderRow), e.Action))
 ~dulla^@204~ d If
        End Sub
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Sub RemoveOrderRow(ByVal ~dulla^@204~ ow)
            Me.Rows.Remove(row)~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~  Function GetTypedTableSchema(ByVal x~dulla^@204~ ml.Schema.XmlSchemaSet) As System.Xml~dulla^@204~ hemaComplexType
            Dim type~dulla^@204~ l.Schema.XmlSchemaComplexType = New S~dulla^@204~ ema.XmlSchemaComplexType
           ~dulla^@204~  As System.Xml.Schema.XmlSchemaSequen~dulla^@204~ em.Xml.Schema.XmlSchemaSequence
    ~dulla^@204~ s As InventoryControlSystemDataSet1 =~dulla^@204~ yControlSystemDataSet1
            x~dulla^@204~ chemaSerializable)
            Dim a~dulla^@204~ .Xml.Schema.XmlSchemaAny = New System~dulla^@204~ mlSchemaAny
            any1.Namespa~dulla^@204~ www.w3.org/2001/XMLSchema"
         ~dulla^@204~ curs = New Decimal(0)
            an~dulla^@204~ = Decimal.MaxValue
            any1.~dulla^@204~ ts = System.Xml.Schema.XmlSchemaConte~dulla^@204~ Lax
            sequence.Items.Add(a~dulla^@204~      Dim any2 As System.Xml.Schema.Xm~dulla^@204~ New System.Xml.Schema.XmlSchemaAny
 ~dulla^@204~ y2.Namespace = "urn:schemas-microsoft~dulla^@204~ gram-v1"
            any2.MinOccurs ~dulla^@204~ (1)
            any2.ProcessContents~dulla^@204~ .Schema.XmlSchemaContentProcessing.La~dulla^@204~   sequence.Items.Add(any2)
         ~dulla^@204~ ute1 As System.Xml.Schema.XmlSchemaAt~dulla^@204~  System.Xml.Schema.XmlSchemaAttribute~dulla^@204~  attribute1.Name = "namespace"
     ~dulla^@204~ ute1.FixedValue = ds.Namespace
     ~dulla^@204~ ttributes.Add(attribute1)
          ~dulla^@204~ te2 As System.Xml.Schema.XmlSchemaAtt~dulla^@204~ System.Xml.Schema.XmlSchemaAttribute~dulla^@204~ attribute2.Name = "tableTypeName"
  ~dulla^@204~ ribute2.FixedValue = "OrderDataTable"~dulla^@204~  type.Attributes.Add(attribute2)
   ~dulla^@204~ .Particle = sequence
            Ret~dulla^@204~      End Function
    End Class
   ~dulla^@204~ m.CodeDom.Compiler.GeneratedCodeAttri~dulla^@204~ Data.Design.TypedDataSetGenerator", "~dulla^@204~ 
     System.Serializable(),  _
   ~dulla^@204~ Serialization.XmlSchemaProviderAttrib~dulla^@204~ TableSchema")>  _
    Partial Public~dulla^@204~ tInfoDataTable
        Inherits Syst~dulla^@204~ able
        Implements System.Colle~dulla^@204~ rable
        
        Private colu~dulla^@204~ ystem.Data.DataColumn
        
    ~dulla^@204~ olumnProductName As System.Data.DataC~dulla^@204~   
        Private columnBrand As Sy~dulla^@204~ aColumn
        
        Private co~dulla^@204~  System.Data.DataColumn
        
  ~dulla^@204~  columnUnitPrice As System.Data.DataC~dulla^@204~   
        Private columnSellingPric~dulla^@204~ Data.DataColumn
        
        Pr~dulla^@204~ ellingPrice2 As System.Data.DataColum~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Sub New(~dulla^@204~   MyBase.New
            Me.TableNam~dulla^@204~ nfo"
            Me.BeginInit
     ~dulla^@204~ tClass
            Me.EndInit
     ~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Friend~dulla^@204~ l table As System.Data.DataTable)
  ~dulla^@204~ ase.New
            Me.TableName = t~dulla^@204~ e
            If (table.CaseSensitiv~dulla^@204~ taSet.CaseSensitive) Then
          ~dulla^@204~ Sensitive = table.CaseSensitive
    ~dulla^@204~ f
            If (table.Locale.ToStr~dulla^@204~ DataSet.Locale.ToString) Then
      ~dulla^@204~ Locale = table.Locale
            En~dulla^@204~      If (table.Namespace <> table.Dat~dulla^@204~ e) Then
                Me.Namespace~dulla^@204~ space
            End If
          ~dulla^@204~  table.Prefix
            Me.Minimum~dulla^@204~ ble.MinimumCapacity
        End Sub~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Protected Sub New~dulla^@204~ s System.Runtime.Serialization.Serial~dulla^@204~ ByVal context As System.Runtime.Seria~dulla^@204~ amingContext)
            MyBase.New~dulla^@204~ t)
            Me.InitVars
        ~dulla^@204~     
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        P~dulla^@204~ y Property PartNoColumn() As System.D~dulla^@204~ n
            Get
                R~dulla^@204~ mnPartNo
            End Get
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  Property ProductNameColumn() As Syst~dulla^@204~ olumn
            Get
             ~dulla^@204~ columnProductName
            End Ge~dulla^@204~ d Property
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  ReadOnly Property BrandColumn() As S~dulla^@204~ taColumn
            Get
          ~dulla^@204~ Me.columnBrand
            End Get
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ adOnly Property OriginColumn() As Sys~dulla^@204~ Column
            Get
            ~dulla^@204~ .columnOrigin
            End Get
 ~dulla^@204~ operty
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ dOnly Property UnitPriceColumn() As S~dulla^@204~ taColumn
            Get
          ~dulla^@204~ Me.columnUnitPrice
            End G~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c ReadOnly Property SellingPrice1Colu~dulla^@204~ m.Data.DataColumn
            Get
 ~dulla^@204~   Return Me.columnSellingPrice1
    ~dulla^@204~ et
        End Property
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public ReadOnly Property Sell~dulla^@204~ mn() As System.Data.DataColumn
     ~dulla^@204~                Return Me.columnSellin~dulla^@204~         End Get
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute(),  _
         System.Componen~dulla^@204~ ble(false)>  _
        Public ReadOn~dulla^@204~ ount() As Integer
            Get
 ~dulla^@204~   Return Me.Rows.Count
            E~dulla^@204~    End Property
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Default ReadOnly Property Item(~dulla^@204~ s Integer) As ProductInfoRow
       ~dulla^@204~              Return CType(Me.Rows(ind~dulla^@204~ foRow)
            End Get
        ~dulla^@204~ 
        
        Public Event Produ~dulla^@204~ ging As ProductInfoRowChangeEventHand~dulla^@204~ 
        Public Event ProductInfoRow~dulla^@204~ oductInfoRowChangeEventHandler
     ~dulla^@204~ Public Event ProductInfoRowDeleting A~dulla^@204~ RowChangeEventHandler
        
    ~dulla^@204~ ent ProductInfoRowDeleted As ProductI~dulla^@204~ ventHandler
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Overloads Sub AddProductInfoRow(ByV~dulla^@204~ ductInfoRow)
            Me.Rows.Add~dulla^@204~   End Sub
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Overloads Function AddProductInfoRow(~dulla^@204~ As String, ByVal ProductName As Strin~dulla^@204~ d As String, ByVal Origin As String, ~dulla^@204~ ce As Double, ByVal SellingPrice1 As ~dulla^@204~  SellingPrice2 As Double) As ProductI~dulla^@204~        Dim rowProductInfoRow As Produ~dulla^@204~ Type(Me.NewRow,ProductInfoRow)
     ~dulla^@204~ ductInfoRow.ItemArray = New Object() ~dulla^@204~ uctName, Brand, Origin, UnitPrice, Se~dulla^@204~ SellingPrice2}
            Me.Rows.A~dulla^@204~ InfoRow)
            Return rowProdu~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Function FindByPartNo(ByVal ~dulla^@204~ ing) As ProductInfoRow
            R~dulla^@204~ e.Rows.Find(New Object() {PartNo}),Pr~dulla^@204~ 
        End Function
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Overridable Function Get~dulla^@204~ As System.Collections.IEnumerator Imp~dulla^@204~ m.Collections.IEnumerable.GetEnumerat~dulla^@204~    Return Me.Rows.GetEnumerator
    ~dulla^@204~ ion
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ des Function Clone() As System.Data.D~dulla^@204~          Dim cln As ProductInfoDataTa~dulla^@204~ yBase.Clone,ProductInfoDataTable)
  ~dulla^@204~ .InitVars
            Return cln
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ verrides Function CreateInstance() As~dulla^@204~ DataTable
            Return New Pro~dulla^@204~ able
        End Function
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Friend Sub InitVars()
    ~dulla^@204~ lumnPartNo = MyBase.Columns("PartNo")~dulla^@204~  Me.columnProductName = MyBase.Column~dulla^@204~ e")
            Me.columnBrand = MyB~dulla^@204~ Brand")
            Me.columnOrigin ~dulla^@204~ mns("Origin")
            Me.columnU~dulla^@204~ Base.Columns("UnitPrice")
          ~dulla^@204~ llingPrice1 = MyBase.Columns("Selling~dulla^@204~          Me.columnSellingPrice2 = MyB~dulla^@204~ SellingPrice2")
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Private Sub InitClass~dulla^@204~    Me.columnPartNo = New System.Data.~dulla^@204~ artNo", GetType(String), Nothing, Sys~dulla^@204~ ingType.Element)
            MyBase.~dulla^@204~ e.columnPartNo)
            Me.colum~dulla^@204~ = New System.Data.DataColumn("Product~dulla^@204~ e(String), Nothing, System.Data.Mappi~dulla^@204~ t)
            MyBase.Columns.Add(Me~dulla^@204~ tName)
            Me.columnBrand = ~dulla^@204~ ta.DataColumn("Brand", GetType(String~dulla^@204~ ystem.Data.MappingType.Element)
    ~dulla^@204~ e.Columns.Add(Me.columnBrand)
      ~dulla^@204~ mnOrigin = New System.Data.DataColumn~dulla^@204~ tType(String), Nothing, System.Data.M~dulla^@204~ ement)
            MyBase.Columns.Ad~dulla^@204~ igin)
            Me.columnUnitPrice~dulla^@204~ .Data.DataColumn("UnitPrice", GetType~dulla^@204~ hing, System.Data.MappingType.Element~dulla^@204~   MyBase.Columns.Add(Me.columnUnitPri~dulla^@204~     Me.columnSellingPrice1 = New Syst~dulla^@204~ olumn("SellingPrice1", GetType(Double~dulla^@204~ ystem.Data.MappingType.Element)
    ~dulla^@204~ e.Columns.Add(Me.columnSellingPrice1)~dulla^@204~  Me.columnSellingPrice2 = New System.~dulla^@204~ mn("SellingPrice2", GetType(Double), ~dulla^@204~ em.Data.MappingType.Element)
       ~dulla^@204~ olumns.Add(Me.columnSellingPrice2)
 ~dulla^@204~ .Constraints.Add(New System.Data.Uniq~dulla^@204~ "Constraint1", New System.Data.DataCo~dulla^@204~ lumnPartNo}, true))
            Me.c~dulla^@204~ llowDBNull = false
            Me.co~dulla^@204~ ique = true
            Me.columnPar~dulla^@204~  = 20
            Me.columnProductNa~dulla^@204~ l = false
            Me.columnProdu~dulla^@204~ gth = 20
            Me.columnBrand.~dulla^@204~  false
            Me.columnBrand.Ma~dulla^@204~ 
            Me.columnOrigin.AllowDBN~dulla^@204~             Me.columnOrigin.MaxLength~dulla^@204~       Me.columnUnitPrice.AllowDBNull ~dulla^@204~         Me.columnSellingPrice1.AllowD~dulla^@204~ 
            Me.columnSellingPrice2.~dulla^@204~  false
        End Sub
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Function NewProductInfo~dulla^@204~ uctInfoRow
            Return CType(~dulla^@204~ ductInfoRow)
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Protected Overrides~dulla^@204~ RowFromBuilder(ByVal builder As Syste~dulla^@204~ wBuilder) As System.Data.DataRow
   ~dulla^@204~ rn New ProductInfoRow(builder)
     ~dulla^@204~ on
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ rides Function GetRowType() As System~dulla^@204~       Return GetType(ProductInfoRow)~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ d Overrides Sub OnRowChanged(ByVal e ~dulla^@204~ a.DataRowChangeEventArgs)
          ~dulla^@204~ wChanged(e)
            If (Not (Me.ProductInfoRowChangedEvent) Is Nothing) Th~dulla^@204~        RaiseEvent ProductInfoRowChang~dulla^@204~ oductInfoRowChangeEvent(CType(e.Row,P~dulla^@204~ ), e.Action))
            End If
  ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pro~dulla^@204~ des Sub OnRowChanging(ByVal e As Syst~dulla^@204~ owChangeEventArgs)
            MyBas~dulla^@204~ ng(e)
            If (Not (Me.Produc~dulla^@204~ ingEvent) Is Nothing) Then
         ~dulla^@204~ vent ProductInfoRowChanging(Me, New P~dulla^@204~ ChangeEvent(CType(e.Row,ProductInfoRo~dulla^@204~ )
            End If
        End Su~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Protected Overr~dulla^@204~ wDeleted(ByVal e As System.Data.DataR~dulla^@204~ Args)
            MyBase.OnRowDelete~dulla^@204~      If (Not (Me.ProductInfoRowDelete~dulla^@204~ thing) Then
                RaiseEve~dulla^@204~ oRowDeleted(Me, New ProductInfoRowCha~dulla^@204~ e(e.Row,ProductInfoRow), e.Action))
~dulla^@204~ nd If
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Protected Overrides Sub OnRowDe~dulla^@204~ e As System.Data.DataRowChangeEventAr~dulla^@204~     MyBase.OnRowDeleting(e)
        ~dulla^@204~ Me.ProductInfoRowDeletingEvent) Is No~dulla^@204~                 RaiseEvent ProductInf~dulla^@204~ Me, New ProductInfoRowChangeEvent(CTy~dulla^@204~ uctInfoRow), e.Action))
            ~dulla^@204~    End Sub
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Sub RemoveProductInfoRow(ByVal row A~dulla^@204~ Row)
            Me.Rows.Remove(row)~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ d Function GetTypedTableSchema(ByVal ~dulla^@204~ Xml.Schema.XmlSchemaSet) As System.Xm~dulla^@204~ chemaComplexType
            Dim typ~dulla^@204~ ml.Schema.XmlSchemaComplexType = New ~dulla^@204~ hema.XmlSchemaComplexType
          ~dulla^@204~ e As System.Xml.Schema.XmlSchemaSeque~dulla^@204~ tem.Xml.Schema.XmlSchemaSequence
   ~dulla^@204~ ds As InventoryControlSystemDataSet1 ~dulla^@204~ ryControlSystemDataSet1
            ~dulla^@204~ SchemaSerializable)
            Dim ~dulla^@204~ m.Xml.Schema.XmlSchemaAny = New Syste~dulla^@204~ XmlSchemaAny
            any1.Namesp~dulla^@204~ /www.w3.org/2001/XMLSchema"
        ~dulla^@204~ ccurs = New Decimal(0)
            a~dulla^@204~  = Decimal.MaxValue
            any1~dulla^@204~ nts = System.Xml.Schema.XmlSchemaCont~dulla^@204~ .Lax
            sequence.Items.Add(~dulla^@204~       Dim any2 As System.Xml.Schema.X~dulla^@204~  New System.Xml.Schema.XmlSchemaAny
~dulla^@204~ ny2.Namespace = "urn:schemas-microsof~dulla^@204~ fgram-v1"
            any2.MinOccurs~dulla^@204~ l(1)
            any2.ProcessContent~dulla^@204~ l.Schema.XmlSchemaContentProcessing.L~dulla^@204~    sequence.Items.Add(any2)
        ~dulla^@204~ bute1 As System.Xml.Schema.XmlSchemaA~dulla^@204~ w System.Xml.Schema.XmlSchemaAttribut~dulla^@204~   attribute1.Name = "namespace"
    ~dulla^@204~ bute1.FixedValue = ds.Namespace
    ~dulla^@204~ Attributes.Add(attribute1)
         ~dulla^@204~ ute2 As System.Xml.Schema.XmlSchemaAt~dulla^@204~  System.Xml.Schema.XmlSchemaAttribute~dulla^@204~  attribute2.Name = "tableTypeName"
 ~dulla^@204~ tribute2.FixedValue = "ProductInfoDat~dulla^@204~         type.Attributes.Add(attribute~dulla^@204~    type.Particle = sequence
        ~dulla^@204~ pe
        End Function
    End Cla~dulla^@204~  <System.CodeDom.Compiler.GeneratedCo~dulla^@204~ System.Data.Design.TypedDataSetGenera~dulla^@204~ 0"),  _
     System.Serializable(), ~dulla^@204~ em.Xml.Serialization.XmlSchemaProvide~dulla^@204~ etTypedTableSchema")>  _
    Partial~dulla^@204~  ProductsDataTable
        Inherits ~dulla^@204~ ataTable
        Implements System.C~dulla^@204~ numerable
        
        Private ~dulla^@204~ As System.Data.DataColumn
        
~dulla^@204~ te columnProductName As System.Data.D~dulla^@204~       
        Private columnBrand A~dulla^@204~ .DataColumn
        
        Privat~dulla^@204~ n As System.Data.DataColumn
        ~dulla^@204~ vate columnShelfNo As System.Data.Dat~dulla^@204~     
        Private columnReorderLe~dulla^@204~ .Data.DataColumn
        
        P~dulla^@204~ SellingPrice1 As System.Data.DataColu~dulla^@204~ 
        Private columnSellingPrice2 ~dulla^@204~ a.DataColumn
        
        Priva~dulla^@204~ eight As System.Data.DataColumn
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Sub New()
    ~dulla^@204~ e.New
            Me.TableName = "Pr~dulla^@204~         Me.BeginInit
            Me.~dulla^@204~           Me.EndInit
        End Sub~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Friend Sub New(B~dulla^@204~  System.Data.DataTable)
            ~dulla^@204~            Me.TableName = table.Table~dulla^@204~      If (table.CaseSensitive <> table~dulla^@204~ Sensitive) Then
                Me.C~dulla^@204~ = table.CaseSensitive
            En~dulla^@204~      If (table.Locale.ToString <> tab~dulla^@204~ cale.ToString) Then
                ~dulla^@204~ able.Locale
            End If
    ~dulla^@204~ able.Namespace <> table.DataSet.Names~dulla^@204~                Me.Namespace = table.N~dulla^@204~          End If
            Me.Prefi~dulla^@204~ fix
            Me.MinimumCapacity =~dulla^@204~ mCapacity
        End Sub
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Protected Sub New(ByVal inf~dulla^@204~ untime.Serialization.SerializationInf~dulla^@204~ ext As System.Runtime.Serialization.S~dulla^@204~ xt)
            MyBase.New(info, con~dulla^@204~       Me.InitVars
        End Sub
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public ReadOnly Pro~dulla^@204~ olumn() As System.Data.DataColumn
  ~dulla^@204~ 
                Return Me.columnPar~dulla^@204~     End Get
        End Property
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public ReadOnly Prop~dulla^@204~ ameColumn() As System.Data.DataColumn~dulla^@204~  Get
                Return Me.colum~dulla^@204~ 
            End Get
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Read~dulla^@204~  BrandColumn() As System.Data.DataCol~dulla^@204~     Get
                Return Me.co~dulla^@204~           End Get
        End Proper~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public ReadOnl~dulla^@204~ iginColumn() As System.Data.DataColum~dulla^@204~   Get
                Return Me.colu~dulla^@204~          End Get
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public ReadOnly~dulla^@204~ lfNoColumn() As System.Data.DataColum~dulla^@204~   Get
                Return Me.colu~dulla^@204~           End Get
        End Proper~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public ReadOnl~dulla^@204~ orderLevelColumn() As System.Data.Dat~dulla^@204~         Get
                Return M~dulla^@204~ erLevel
            End Get
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ Property SellingPrice1Column() As Sys~dulla^@204~ Column
            Get
            ~dulla^@204~ .columnSellingPrice1
            End~dulla^@204~  End Property
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic ReadOnly Property SellingPrice2Co~dulla^@204~ tem.Data.DataColumn
            Get~dulla^@204~     Return Me.columnSellingPrice2
  ~dulla^@204~  Get
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public ReadOnly Property Ne~dulla^@204~ () As System.Data.DataColumn
       ~dulla^@204~              Return Me.columnNetWeigh~dulla^@204~   End Get
        End Property
        
        <System.Diagnostics.Debugger~dulla^@204~ tribute(),  _
         System.Compon~dulla^@204~ sable(false)>  _
        Public Read~dulla^@204~  Count() As Integer
            Get~dulla^@204~     Return Me.Rows.Count
           ~dulla^@204~      End Property
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Default ReadOnly Property Ite~dulla^@204~  As Integer) As ProductsRow
        ~dulla^@204~             Return CType(Me.Rows(inde~dulla^@204~ w)
            End Get
        End ~dulla^@204~      
        Public Event ProductsR~dulla^@204~  ProductsRowChangeEventHandler
     ~dulla^@204~ Public Event ProductsRowChanged As Pr~dulla^@204~ geEventHandler
        
        Pub~dulla^@204~ ductsRowDeleting As ProductsRowChange~dulla^@204~ 
        
        Public Event Produ~dulla^@204~  As ProductsRowChangeEventHandler
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Overloads Sub~dulla^@204~ ow(ByVal row As ProductsRow)
       ~dulla^@204~ Add(row)
        End Sub
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Overloads Function Ad~dulla^@204~ ByVal PartNo As String, ByVal Product~dulla^@204~ g, ByVal Brand As String, ByVal Origi~dulla^@204~ ByVal ShelfNo As String, ByVal Reorde~dulla^@204~ eger, ByVal SellingPrice1 As Double, ~dulla^@204~ Price2 As Double, ByVal NetWeight As ~dulla^@204~ oductsRow
            Dim rowProduct~dulla^@204~ ctsRow = CType(Me.NewRow,ProductsRow)~dulla^@204~  rowProductsRow.ItemArray = New Objec~dulla^@204~ ProductName, Brand, Origin, ShelfNo, ~dulla^@204~  SellingPrice1, SellingPrice2, NetWei~dulla^@204~      Me.Rows.Add(rowProductsRow)
   ~dulla^@204~ rn rowProductsRow
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Functio~dulla^@204~ o(ByVal PartNo As String) As Products~dulla^@204~     Return CType(Me.Rows.Find(New Obj~dulla^@204~ }),ProductsRow)
        End Function~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Overridab~dulla^@204~ etEnumerator() As System.Collections.~dulla^@204~ mplements System.Collections.IEnumera~dulla^@204~ ator
            Return Me.Rows.GetE~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Overrides Function Clone() A~dulla^@204~ .DataTable
            Dim cln As Pr~dulla^@204~ le = CType(MyBase.Clone,ProductsDataT~dulla^@204~       cln.InitVars
            Retur~dulla^@204~   End Function
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ otected Overrides Function CreateInst~dulla^@204~ tem.Data.DataTable
            Retur~dulla^@204~ sDataTable
        End Function
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Friend Sub InitVars()~dulla^@204~  Me.columnPartNo = MyBase.Columns("Pa~dulla^@204~        Me.columnProductName = MyBase.~dulla^@204~ uctName")
            Me.columnBrand~dulla^@204~ umns("Brand")
            Me.columnO~dulla^@204~ e.Columns("Origin")
            Me.c~dulla^@204~ = MyBase.Columns("ShelfNo")
        ~dulla^@204~ ReorderLevel = MyBase.Columns("Reorde~dulla^@204~          Me.columnSellingPrice1 = MyB~dulla^@204~ SellingPrice1")
            Me.colum~dulla^@204~ 2 = MyBase.Columns("SellingPrice2")
~dulla^@204~ e.columnNetWeight = MyBase.Columns("N~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ ivate Sub InitClass()
            Me~dulla^@204~  = New System.Data.DataColumn("PartNo~dulla^@204~ ring), Nothing, System.Data.MappingTy~dulla^@204~             MyBase.Columns.Add(Me.col~dulla^@204~            Me.columnProductName = New~dulla^@204~ DataColumn("ProductName", GetType(Str~dulla^@204~ , System.Data.MappingType.Element)
 ~dulla^@204~ Base.Columns.Add(Me.columnProductName~dulla^@204~   Me.columnBrand = New System.Data.Da~dulla^@204~ nd", GetType(String), Nothing, System~dulla^@204~ Type.Element)
            MyBase.Col~dulla^@204~ olumnBrand)
            Me.columnOri~dulla^@204~ tem.Data.DataColumn("Origin", GetType~dulla^@204~ hing, System.Data.MappingType.Element~dulla^@204~   MyBase.Columns.Add(Me.columnOrigin)~dulla^@204~  Me.columnShelfNo = New System.Data.D~dulla^@204~ elfNo", GetType(String), Nothing, Sys~dulla^@204~ ingType.Element)
            MyBase.~dulla^@204~ e.columnShelfNo)
            Me.colu~dulla^@204~ l = New System.Data.DataColumn("Reord~dulla^@204~ Type(Integer), Nothing, System.Data.M~dulla^@204~ ement)
            MyBase.Columns.Ad~dulla^@204~ orderLevel)
            Me.columnSel~dulla^@204~ New System.Data.DataColumn("SellingPr~dulla^@204~ e(Double), Nothing, System.Data.Mappi~dulla^@204~ t)
            MyBase.Columns.Add(Me~dulla^@204~ gPrice1)
            Me.columnSellin~dulla^@204~  System.Data.DataColumn("SellingPrice~dulla^@204~ ouble), Nothing, System.Data.MappingT~dulla^@204~ 
            MyBase.Columns.Add(Me.co~dulla^@204~ ice2)
            Me.columnNetWeight~dulla^@204~ .Data.DataColumn("NetWeight", GetType~dulla^@204~ hing, System.Data.MappingType.Element~dulla^@204~   MyBase.Columns.Add(Me.columnNetWeig~dulla^@204~     Me.Constraints.Add(New System.Dat~dulla^@204~ raint("Constraint1", New System.Data.~dulla^@204~ {Me.columnPartNo}, true))
          ~dulla^@204~ rtNo.AllowDBNull = false
           ~dulla^@204~ tNo.Unique = true
            Me.col~dulla^@204~ Length = 20
            Me.columnPro~dulla^@204~ wDBNull = false
            Me.colum~dulla^@204~ MaxLength = 20
            Me.column~dulla^@204~ Null = false
            Me.columnBr~dulla^@204~  = 20
            Me.columnOrigin.Ma~dulla^@204~ 
            Me.columnShelfNo.AllowDB~dulla^@204~ 
            Me.columnShelfNo.MaxLeng~dulla^@204~         Me.columnReorderLevel.AllowDB~dulla^@204~ 
            Me.columnSellingPrice1.A~dulla^@204~ false
            Me.columnNetWeight~dulla^@204~ = false
        End Sub
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public Function NewProductsRo~dulla^@204~ tsRow
            Return CType(Me.Ne~dulla^@204~ Row)
        End Function
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Protected Overrides Functio~dulla^@204~ uilder(ByVal builder As System.Data.D~dulla^@204~ ) As System.Data.DataRow
           ~dulla^@204~ roductsRow(builder)
        End Func~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Protected Ov~dulla^@204~ ion GetRowType() As System.Type
    ~dulla^@204~ n GetType(ProductsRow)
        End F~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Protected~dulla^@204~ b OnRowChanged(ByVal e As System.Data~dulla^@204~ eEventArgs)
            MyBase.OnRow~dulla^@204~            If (Not (Me.ProductsRowCha~dulla^@204~  Nothing) Then
                Raise~dulla^@204~ sRowChanged(Me, New ProductsRowChange~dulla^@204~ .Row,ProductsRow), e.Action))
      ~dulla^@204~ 
        End Sub
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Protected Overrides Sub OnRowChanging~dulla^@204~ ystem.Data.DataRowChangeEventArgs)
 ~dulla^@204~ Base.OnRowChanging(e)
            If~dulla^@204~ ductsRowChangingEvent) Is Nothing) Th~dulla^@204~        RaiseEvent ProductsRowChanging~dulla^@204~ uctsRowChangeEvent(CType(e.Row,Produc~dulla^@204~ ion))
            End If
        En~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Protected O~dulla^@204~ OnRowDeleted(ByVal e As System.Data.D~dulla^@204~ ventArgs)
            MyBase.OnRowDe~dulla^@204~          If (Not (Me.ProductsRowDelet~dulla^@204~ othing) Then
                RaiseEv~dulla^@204~ owDeleted(Me, New ProductsRowChangeEv~dulla^@204~ ow,ProductsRow), e.Action))
        ~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ otected Overrides Sub OnRowDeleting(B~dulla^@204~ tem.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
        ~dulla^@204~ Me.ProductsRowDeletingEvent) Is Nothi~dulla^@204~              RaiseEvent ProductsRowDe~dulla^@204~ w ProductsRowChangeEvent(CType(e.Row,~dulla^@204~  e.Action))
            End If
    ~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ roductsRow(ByVal row As ProductsRow)~dulla^@204~ Me.Rows.Remove(row)
        End Sub~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Shared Fun~dulla^@204~ dTableSchema(ByVal xs As System.Xml.S~dulla^@204~ maSet) As System.Xml.Schema.XmlSchema~dulla^@204~             Dim type As System.Xml.Sc~dulla^@204~ aComplexType = New System.Xml.Schema.~dulla^@204~ lexType
            Dim sequence As ~dulla^@204~ hema.XmlSchemaSequence = New System.X~dulla^@204~ SchemaSequence
            Dim ds As~dulla^@204~ trolSystemDataSet1 = New InventoryCon~dulla^@204~ aSet1
            xs.Add(ds.GetSchem~dulla^@204~ )
            Dim any1 As System.Xml~dulla^@204~ hemaAny = New System.Xml.Schema.XmlSc~dulla^@204~         any1.Namespace = "http://www.~dulla^@204~ MLSchema"
            any1.MinOccurs~dulla^@204~ l(0)
            any1.MaxOccurs = De~dulla^@204~ e
            any1.ProcessContents =~dulla^@204~ chema.XmlSchemaContentProcessing.Lax~dulla^@204~ sequence.Items.Add(any1)
           ~dulla^@204~ System.Xml.Schema.XmlSchemaAny = New ~dulla^@204~ hema.XmlSchemaAny
            any2.N~dulla^@204~ rn:schemas-microsoft-com:xml-diffgram~dulla^@204~      any2.MinOccurs = New Decimal(1)~dulla^@204~ any2.ProcessContents = System.Xml.Sch~dulla^@204~ ContentProcessing.Lax
            se~dulla^@204~ Add(any2)
            Dim attribute1~dulla^@204~ l.Schema.XmlSchemaAttribute = New Sys~dulla^@204~ a.XmlSchemaAttribute
            att~dulla^@204~ = "namespace"
            attribute1~dulla^@204~  ds.Namespace
            type.Attri~dulla^@204~ ribute1)
            Dim attribute2 ~dulla^@204~ .Schema.XmlSchemaAttribute = New Syst~dulla^@204~ .XmlSchemaAttribute
            attr~dulla^@204~  "tableTypeName"
            attribu~dulla^@204~ e = "ProductsDataTable"
            ~dulla^@204~ es.Add(attribute2)
            type.~dulla^@204~ quence
            Return type
    ~dulla^@204~ ion
    End Class
    
    <System~dulla^@204~ iler.GeneratedCodeAttribute("System.D~dulla^@204~ pedDataSetGenerator", "2.0.0.0"),  _~dulla^@204~ Serializable(),  _
     System.Xml.S~dulla^@204~ XmlSchemaProviderAttribute("GetTypedT~dulla^@204~   _
    Partial Public Class Product~dulla^@204~ aTable
        Inherits System.Data.~dulla^@204~       Implements System.Collections.I~dulla^@204~        
        Private columnPartNo~dulla^@204~ ta.DataColumn
        
        Priv~dulla^@204~ InShop1 As System.Data.DataColumn
  ~dulla^@204~    Private columnQtyInShop2 As System~dulla^@204~ umn
        
        Private column~dulla^@204~  System.Data.DataColumn
        
  ~dulla^@204~  columnTotalQty As System.Data.DataCo~dulla^@204~  
        Private columnAmount As Sy~dulla^@204~ aColumn
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ b New()
            MyBase.New
    ~dulla^@204~ bleName = "ProductsAvialable"
      ~dulla^@204~ nInit
            Me.InitClass
    ~dulla^@204~ dInit
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Friend Sub New(ByVal table As S~dulla^@204~ taTable)
            MyBase.New
   ~dulla^@204~ ableName = table.TableName
         ~dulla^@204~ CaseSensitive <> table.DataSet.CaseSe~dulla^@204~ 
                Me.CaseSensitive = ~dulla^@204~ sitive
            End If
         ~dulla^@204~ Locale.ToString <> table.DataSet.Loca~dulla^@204~ Then
                Me.Locale = tab~dulla^@204~           End If
            If (tab~dulla^@204~ <> table.DataSet.Namespace) Then
   ~dulla^@204~ Me.Namespace = table.Namespace
     ~dulla^@204~ 
            Me.Prefix = table.Prefi~dulla^@204~   Me.MinimumCapacity = table.MinimumC~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ cted Sub New(ByVal info As System.Run~dulla^@204~ ation.SerializationInfo, ByVal contex~dulla^@204~ untime.Serialization.StreamingContext~dulla^@204~   MyBase.New(info, context)
        ~dulla^@204~ rs
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public ReadOnly Property PartNoCol~dulla^@204~ em.Data.DataColumn
            Get
~dulla^@204~    Return Me.columnPartNo
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public ReadOnly Property QtyInShop1~dulla^@204~ ystem.Data.DataColumn
            Ge~dulla^@204~       Return Me.columnQtyInShop1
   ~dulla^@204~ Get
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public ReadOnly Property Qty~dulla^@204~ () As System.Data.DataColumn
       ~dulla^@204~              Return Me.columnQtyInSho~dulla^@204~    End Get
        End Property
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public ReadOnly Prope~dulla^@204~ eColumn() As System.Data.DataColumn
~dulla^@204~ et
                Return Me.columnQ~dulla^@204~           End Get
        End Proper~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public ReadOnl~dulla^@204~ talQtyColumn() As System.Data.DataCol~dulla^@204~     Get
                Return Me.co~dulla^@204~ 
            End Get
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Read~dulla^@204~  AmountColumn() As System.Data.DataCo~dulla^@204~      Get
                Return Me.c~dulla^@204~             End Get
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute(),  _
         System.Comp~dulla^@204~ owsable(false)>  _
        Public Re~dulla^@204~ ty Count() As Integer
            Ge~dulla^@204~       Return Me.Rows.Count
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Default ReadOnly Property I~dulla^@204~ ex As Integer) As ProductsAvialableRo~dulla^@204~   Get
                Return CType(M~dulla^@204~ ,ProductsAvialableRow)
            E~dulla^@204~    End Property
        
        Pu~dulla^@204~ oductsAvialableRowChanging As Product~dulla^@204~ ChangeEventHandler
        
       ~dulla^@204~  ProductsAvialableRowChanged As Produ~dulla^@204~ owChangeEventHandler
        
     ~dulla^@204~ nt ProductsAvialableRowDeleting As Pr~dulla^@204~ leRowChangeEventHandler
        
  ~dulla^@204~ Event ProductsAvialableRowDeleted As ~dulla^@204~ ableRowChangeEventHandler
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Overloads Sub AddProd~dulla^@204~ Row(ByVal row As ProductsAvialableRow~dulla^@204~   Me.Rows.Add(row)
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Overloads F~dulla^@204~ oductsAvialableRow(ByVal PartNo As St~dulla^@204~ tyInShop1 As Integer, ByVal QtyInShop~dulla^@204~  ByVal QtyInStore As Integer, ByVal T~dulla^@204~ teger, ByVal Amount As Integer) As Pr~dulla^@204~ leRow
            Dim rowProductsAvi~dulla^@204~ ProductsAvialableRow = CType(Me.NewRo~dulla^@204~ alableRow)
            rowProductsAv~dulla^@204~ emArray = New Object() {PartNo, QtyIn~dulla^@204~ hop2, QtyInStore, TotalQty, Amount}
~dulla^@204~ e.Rows.Add(rowProductsAvialableRow)
~dulla^@204~ eturn rowProductsAvialableRow
      ~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  FindByPartNo(ByVal PartNo As String)~dulla^@204~ vialableRow
            Return CType~dulla^@204~ (New Object() {PartNo}),ProductsAvial~dulla^@204~      End Function
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Overridable Function GetEnumerator() As System.Collections.IEnumerator ~dulla^@204~ stem.Collections.IEnumerable.GetEnume~dulla^@204~       Return Me.Rows.GetEnumerator
 ~dulla^@204~ nction
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ rrides Function Clone() As System.Dat~dulla^@204~             Dim cln As ProductsAviala~dulla^@204~ = CType(MyBase.Clone,ProductsAvialabl~dulla^@204~             cln.InitVars
           ~dulla^@204~         End Function
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Protected Overrides Function Crea~dulla^@204~ As System.Data.DataTable
           ~dulla^@204~ roductsAvialableDataTable
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Friend~dulla^@204~ ()
            Me.columnPartNo = MyB~dulla^@204~ PartNo")
            Me.columnQtyInS~dulla^@204~ .Columns("QtyInShop1")
            M~dulla^@204~ Shop2 = MyBase.Columns("QtyInShop2")~dulla^@204~ Me.columnQtyInStore = MyBase.Columns(~dulla^@204~ 
            Me.columnTotalQty = MyB~dulla^@204~ TotalQty")
            Me.columnAmou~dulla^@204~ olumns("Amount")
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Private Sub InitClas~dulla^@204~     Me.columnPartNo = New System.Data~dulla^@204~ PartNo", GetType(String), Nothing, Sy~dulla^@204~ pingType.Element)
            MyBase~dulla^@204~ Me.columnPartNo)
            Me.colu~dulla^@204~ = New System.Data.DataColumn("QtyInSh~dulla^@204~ (Integer), Nothing, System.Data.Mappi~dulla^@204~ t)
            MyBase.Columns.Add(Me~dulla^@204~ hop1)
            Me.columnQtyInShop~dulla^@204~ m.Data.DataColumn("QtyInShop2", GetTy~dulla^@204~ Nothing, System.Data.MappingType.Elem~dulla^@204~      MyBase.Columns.Add(Me.columnQtyI~dulla^@204~         Me.columnQtyInStore = New Sys~dulla^@204~ Column("QtyInStore", GetType(Integer)~dulla^@204~ stem.Data.MappingType.Element)
     ~dulla^@204~ .Columns.Add(Me.columnQtyInStore)
  ~dulla^@204~ columnTotalQty = New System.Data.Data~dulla^@204~ Qty", GetType(Integer), Nothing, Syst~dulla^@204~ ngType.Element)
            MyBase.C~dulla^@204~ .columnTotalQty)
            Me.colu~dulla^@204~ w System.Data.DataColumn("Amount", Ge~dulla^@204~ ), Nothing, System.Data.MappingType.E~dulla^@204~         MyBase.Columns.Add(Me.columnA~dulla^@204~        Me.Constraints.Add(New System.~dulla^@204~ nstraint("Constraint1", New System.Da~dulla^@204~ () {Me.columnPartNo}, true))
       ~dulla^@204~ nPartNo.AllowDBNull = false
        ~dulla^@204~ PartNo.Unique = true
            Me.~dulla^@204~ MaxLength = 20
            Me.column~dulla^@204~ lowDBNull = false
            Me.col~dulla^@204~ .AllowDBNull = false
            Me.~dulla^@204~ ore.AllowDBNull = false
            ~dulla^@204~ lQty.AllowDBNull = false
           ~dulla^@204~ unt.AllowDBNull = false
        End ~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Functi~dulla^@204~ sAvialableRow() As ProductsAvialableR~dulla^@204~    Return CType(Me.NewRow,ProductsAvi~dulla^@204~        End Function
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Protected Overrides Function NewRo~dulla^@204~ ByVal builder As System.Data.DataRowB~dulla^@204~ stem.Data.DataRow
            Return~dulla^@204~ AvialableRow(builder)
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Protected ~dulla^@204~ ction GetRowType() As System.Type
  ~dulla^@204~ urn GetType(ProductsAvialableRow)
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ verrides Sub OnRowChanged(ByVal e As ~dulla^@204~ ataRowChangeEventArgs)
            M~dulla^@204~ anged(e)
            If (Not (Me.Pro~dulla^@204~ eRowChangedEvent) Is Nothing) Then
 ~dulla^@204~   RaiseEvent ProductsAvialableRowChan~dulla^@204~ roductsAvialableRowChangeEvent(CType(~dulla^@204~ sAvialableRow), e.Action))
         ~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ tected Overrides Sub OnRowChanging(By~dulla^@204~ em.Data.DataRowChangeEventArgs)
    ~dulla^@204~ e.OnRowChanging(e)
            If (N~dulla^@204~ tsAvialableRowChangingEvent) Is Nothi~dulla^@204~              RaiseEvent ProductsAvial~dulla^@204~ ng(Me, New ProductsAvialableRowChange~dulla^@204~ .Row,ProductsAvialableRow), e.Action)~dulla^@204~   End If
        End Sub
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Protected Overrides Sub OnRo~dulla^@204~ l e As System.Data.DataRowChangeEvent~dulla^@204~       MyBase.OnRowDeleted(e)
       ~dulla^@204~ (Me.ProductsAvialableRowDeletedEvent)~dulla^@204~ Then
                RaiseEvent Prod~dulla^@204~ RowDeleted(Me, New ProductsAvialableR~dulla^@204~ (CType(e.Row,ProductsAvialableRow), e~dulla^@204~           End If
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Protected Overrides ~dulla^@204~ ting(ByVal e As System.Data.DataRowCh~dulla^@204~ )
            MyBase.OnRowDeleting(e~dulla^@204~   If (Not (Me.ProductsAvialableRowDel~dulla^@204~ s Nothing) Then
                Rais~dulla^@204~ tsAvialableRowDeleting(Me, New Produc~dulla^@204~ wChangeEvent(CType(e.Row,ProductsAvia~dulla^@204~ Action))
            End If
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public S~dulla^@204~ uctsAvialableRow(ByVal row As Product~dulla^@204~ )
            Me.Rows.Remove(row)
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~ unction GetTypedTableSchema(ByVal xs ~dulla^@204~ .Schema.XmlSchemaSet) As System.Xml.S~dulla^@204~ maComplexType
            Dim type A~dulla^@204~ Schema.XmlSchemaComplexType = New Sys~dulla^@204~ a.XmlSchemaComplexType
            D~dulla^@204~ s System.Xml.Schema.XmlSchemaSequence~dulla^@204~ .Xml.Schema.XmlSchemaSequence
      ~dulla^@204~ As InventoryControlSystemDataSet1 = N~dulla^@204~ ontrolSystemDataSet1
            xs.~dulla^@204~ emaSerializable)
            Dim any~dulla^@204~ ml.Schema.XmlSchemaAny = New System.X~dulla^@204~ SchemaAny
            any1.Namespace~dulla^@204~ w.w3.org/2001/XMLSchema"
           ~dulla^@204~ rs = New Decimal(0)
            any1~dulla^@204~ Decimal.MaxValue
            any1.Pr~dulla^@204~  = System.Xml.Schema.XmlSchemaContent~dulla^@204~ x
            sequence.Items.Add(any~dulla^@204~    Dim any2 As System.Xml.Schema.XmlS~dulla^@204~ w System.Xml.Schema.XmlSchemaAny
   ~dulla^@204~ .Namespace = "urn:schemas-microsoft-c~dulla^@204~ am-v1"
            any2.MinOccurs = ~dulla^@204~ )
            any2.ProcessContents =~dulla^@204~ chema.XmlSchemaContentProcessing.Lax~dulla^@204~ sequence.Items.Add(any2)
           ~dulla^@204~ e1 As System.Xml.Schema.XmlSchemaAttr~dulla^@204~ ystem.Xml.Schema.XmlSchemaAttribute
~dulla^@204~ ttribute1.Name = "namespace"
       ~dulla^@204~ e1.FixedValue = ds.Namespace
       ~dulla^@204~ ributes.Add(attribute1)
            ~dulla^@204~ 2 As System.Xml.Schema.XmlSchemaAttri~dulla^@204~ stem.Xml.Schema.XmlSchemaAttribute
 ~dulla^@204~ tribute2.Name = "tableTypeName"
    ~dulla^@204~ bute2.FixedValue = "ProductsAvialable~dulla^@204~            type.Attributes.Add(attrib~dulla^@204~       type.Particle = sequence
     ~dulla^@204~  type
        End Function
    End ~dulla^@204~     <System.CodeDom.Compiler.Generate~dulla^@204~ e("System.Data.Design.TypedDataSetGen~dulla^@204~ .0.0"),  _
     System.Serializable(~dulla^@204~ ystem.Xml.Serialization.XmlSchemaProv~dulla^@204~ ("GetTypedTableSchema")>  _
    Part~dulla^@204~ ass PurchaseDataTable
        Inheri~dulla^@204~ a.DataTable
        Implements Syste~dulla^@204~ .IEnumerable
        
        Priva~dulla^@204~ lierID As System.Data.DataColumn
   ~dulla^@204~   Private columnInvoiceNo As System.D~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
  ~dulla^@204~ TableName = "Purchase"
            M~dulla^@204~             Me.InitClass
           ~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ riend Sub New(ByVal table As System.D~dulla^@204~ )
            MyBase.New
          ~dulla^@204~ e = table.TableName
            If (~dulla^@204~ sitive <> table.DataSet.CaseSensitive~dulla^@204~            Me.CaseSensitive = table.C~dulla^@204~ 
            End If
            If (~dulla^@204~ ToString <> table.DataSet.Locale.ToSt~dulla^@204~                Me.Locale = table.Loca~dulla^@204~    End If
            If (table.Name~dulla^@204~ e.DataSet.Namespace) Then
          ~dulla^@204~ space = table.Namespace
            ~dulla^@204~        Me.Prefix = table.Prefix
    ~dulla^@204~ nimumCapacity = table.MinimumCapacity~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ b New(ByVal info As System.Runtime.Se~dulla^@204~ erializationInfo, ByVal context As Sy~dulla^@204~ Serialization.StreamingContext)
    ~dulla^@204~ e.New(info, context)
            Me.~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic ReadOnly Property SupplierIDColumn~dulla^@204~ Data.DataColumn
            Get
   ~dulla^@204~ Return Me.columnSupplierID
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public ReadOnly Property InvoiceNo~dulla^@204~ ystem.Data.DataColumn
            Ge~dulla^@204~       Return Me.columnInvoiceNo
    ~dulla^@204~ et
        End Property
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~          System.ComponentModel.Browsa~dulla^@204~ _
        Public ReadOnly Property C~dulla^@204~ eger
            Get
              ~dulla^@204~ ows.Count
            End Get
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~  ReadOnly Property Item(ByVal index A~dulla^@204~  PurchaseRow
            Get
      ~dulla^@204~ urn CType(Me.Rows(index),PurchaseRow)~dulla^@204~  End Get
        End Property
     ~dulla^@204~ Public Event PurchaseRowChanging As P~dulla^@204~ ngeEventHandler
        
        Pu~dulla^@204~ rchaseRowChanged As PurchaseRowChange~dulla^@204~ 
        
        Public Event Purch~dulla^@204~ g As PurchaseRowChangeEventHandler
 ~dulla^@204~     Public Event PurchaseRowDeleted A~dulla^@204~ ChangeEventHandler
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Overloads Sub AddPurchaseRow~dulla^@204~  PurchaseRow)
            Me.Rows.Ad~dulla^@204~    End Sub
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Overloads Function AddPurchaseRow(By~dulla^@204~ D As String, ByVal InvoiceNo As Strin~dulla^@204~ eRow
            Dim rowPurchaseRow ~dulla^@204~ w = CType(Me.NewRow,PurchaseRow)
   ~dulla^@204~ urchaseRow.ItemArray = New Object() {~dulla^@204~ nvoiceNo}
            Me.Rows.Add(ro~dulla^@204~ 
            Return rowPurchaseRow
~dulla^@204~ unction
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ nction FindBySupplierIDInvoiceNo(ByVa~dulla^@204~ As String, ByVal InvoiceNo As String)~dulla^@204~ ow
            Return CType(Me.Rows.~dulla^@204~ ct() {SupplierID, InvoiceNo}),Purchas~dulla^@204~   End Function
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Overridable Function GetEnumerat~dulla^@204~ m.Collections.IEnumerator Implements ~dulla^@204~ tions.IEnumerable.GetEnumerator
    ~dulla^@204~ n Me.Rows.GetEnumerator
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public O~dulla^@204~ tion Clone() As System.Data.DataTable~dulla^@204~  Dim cln As PurchaseDataTable = CType~dulla^@204~ ,PurchaseDataTable)
            cln.~dulla^@204~          Return cln
        End Func~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Protected Ov~dulla^@204~ ion CreateInstance() As System.Data.D~dulla^@204~          Return New PurchaseDataTable~dulla^@204~  Function
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Sub InitVars()
            Me.column~dulla^@204~ MyBase.Columns("SupplierID")
       ~dulla^@204~ nInvoiceNo = MyBase.Columns("InvoiceN~dulla^@204~ End Sub
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ ub InitClass()
            Me.column~dulla^@204~ New System.Data.DataColumn("SupplierI~dulla^@204~ tring), Nothing, System.Data.MappingT~dulla^@204~ 
            MyBase.Columns.Add(Me.co~dulla^@204~ D)
            Me.columnInvoiceNo = ~dulla^@204~ ta.DataColumn("InvoiceNo", GetType(St~dulla^@204~ g, System.Data.MappingType.Element)
~dulla^@204~ yBase.Columns.Add(Me.columnInvoiceNo)~dulla^@204~  Me.Constraints.Add(New System.Data.U~dulla^@204~ nt("Constraint1", New System.Data.Dat~dulla^@204~ .columnSupplierID, Me.columnInvoiceNo~dulla^@204~           Me.columnSupplierID.AllowDB~dulla^@204~ 
            Me.columnSupplierID.MaxL~dulla^@204~            Me.columnInvoiceNo.AllowDB~dulla^@204~ 
            Me.columnInvoiceNo.MaxLe~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Function NewPurchaseRow() As Purc~dulla^@204~         Return CType(Me.NewRow,Purcha~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ rotected Overrides Function NewRowFro~dulla^@204~ l builder As System.Data.DataRowBuild~dulla^@204~ .Data.DataRow
            Return New~dulla^@204~ builder)
        End Function
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Protected Overrides Fun~dulla^@204~ ype() As System.Type
            Ret~dulla^@204~ urchaseRow)
        End Function
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Protected Overrides ~dulla^@204~ ged(ByVal e As System.Data.DataRowCha~dulla^@204~ 
            MyBase.OnRowChanged(e)~dulla^@204~ If (Not (Me.PurchaseRowChangedEvent) ~dulla^@204~ hen
                RaiseEvent Purch~dulla^@204~ (Me, New PurchaseRowChangeEvent(CType~dulla^@204~ seRow), e.Action))
            End I~dulla^@204~ d Sub
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ verrides Sub OnRowChanging(ByVal e As~dulla^@204~ DataRowChangeEventArgs)
            ~dulla^@204~ hanging(e)
            If (Not (Me.P~dulla^@204~ ngingEvent) Is Nothing) Then
       ~dulla^@204~ eEvent PurchaseRowChanging(Me, New Pu~dulla^@204~ geEvent(CType(e.Row,PurchaseRow), e.A~dulla^@204~         End If
        End Sub
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Protected Overrides Su~dulla^@204~ d(ByVal e As System.Data.DataRowChang~dulla^@204~             MyBase.OnRowDeleted(e)
 ~dulla^@204~  (Not (Me.PurchaseRowDeletedEvent) Is~dulla^@204~ n
                RaiseEvent Purchas~dulla^@204~ e, New PurchaseRowChangeEvent(CType(e~dulla^@204~ Row), e.Action))
            End If~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ rrides Sub OnRowDeleting(ByVal e As S~dulla^@204~ taRowChangeEventArgs)
            My~dulla^@204~ eting(e)
            If (Not (Me.Pur~dulla^@204~ ingEvent) Is Nothing) Then
         ~dulla^@204~ vent PurchaseRowDeleting(Me, New Purc~dulla^@204~ Event(CType(e.Row,PurchaseRow), e.Act~dulla^@204~       End If
        End Sub
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Sub RemovePurchas~dulla^@204~ w As PurchaseRow)
            Me.Row~dulla^@204~ 
        End Sub
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Shared Function GetTypedTable~dulla^@204~ xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType~dulla^@204~  Dim type As System.Xml.Schema.XmlSch~dulla^@204~ e = New System.Xml.Schema.XmlSchemaCo~dulla^@204~           Dim sequence As System.Xml.~dulla^@204~ emaSequence = New System.Xml.Schema.X~dulla^@204~ nce
            Dim ds As InventoryC~dulla^@204~ ataSet1 = New InventoryControlSystemD~dulla^@204~         xs.Add(ds.GetSchemaSerializab~dulla^@204~     Dim any1 As System.Xml.Schema.Xml~dulla^@204~ ew System.Xml.Schema.XmlSchemaAny
  ~dulla^@204~ 1.Namespace = "http://www.w3.org/2001~dulla^@204~             any1.MinOccurs = New Deci~dulla^@204~        any1.MaxOccurs = Decimal.MaxVa~dulla^@204~     any1.ProcessContents = System.Xml~dulla^@204~ hemaContentProcessing.Lax
          ~dulla^@204~ ems.Add(any1)
            Dim any2 A~dulla^@204~ Schema.XmlSchemaAny = New System.Xml.~dulla^@204~ emaAny
            any2.Namespace = ~dulla^@204~ microsoft-com:xml-diffgram-v1"
     ~dulla^@204~ inOccurs = New Decimal(1)
          ~dulla^@204~ sContents = System.Xml.Schema.XmlSche~dulla^@204~ essing.Lax
            sequence.Item~dulla^@204~             Dim attribute1 As System.~dulla^@204~ lSchemaAttribute = New System.Xml.Sch~dulla^@204~ Attribute
            attribute1.Nam~dulla^@204~ e"
            attribute1.FixedValue~dulla^@204~ ce
            type.Attributes.Add(a~dulla^@204~            Dim attribute2 As System.X~dulla^@204~ SchemaAttribute = New System.Xml.Sche~dulla^@204~ ttribute
            attribute2.Name~dulla^@204~ Name"
            attribute2.FixedVa~dulla^@204~ seDataTable"
            type.Attrib~dulla^@204~ ibute2)
            type.Particle = ~dulla^@204~          Return type
        End Fun~dulla^@204~ d Class
    
    <System.CodeDom.Co~dulla^@204~ tedCodeAttribute("System.Data.Design.~dulla^@204~ enerator", "2.0.0.0"),  _
     Syste~dulla^@204~ e(),  _
     System.Xml.Serializatio~dulla^@204~ oviderAttribute("GetTypedTableSchema"~dulla^@204~ rtial Public Class PurchaseInfoDataTa~dulla^@204~ Inherits System.Data.DataTable
     ~dulla^@204~  System.Collections.IEnumerable
    ~dulla^@204~  Private columnPartNo As System.Data.~dulla^@204~        
        Private columnQuanti~dulla^@204~ Data.DataColumn
        
        Pr~dulla^@204~ mount As System.Data.DataColumn
    ~dulla^@204~  Private columnSupplierID As System.D~dulla^@204~ n
        
        Private columnIn~dulla^@204~ stem.Data.DataColumn
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Sub New()
            MyB~dulla^@204~         Me.TableName = "PurchaseInfo"~dulla^@204~  Me.BeginInit
            Me.InitCla~dulla^@204~    Me.EndInit
        End Sub
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Friend Sub New(ByVal ta~dulla^@204~ .Data.DataTable)
            MyBase.~dulla^@204~     Me.TableName = table.TableName
 ~dulla^@204~  (table.CaseSensitive <> table.DataSe~dulla^@204~ ve) Then
                Me.CaseSens~dulla^@204~ .CaseSensitive
            End If
 ~dulla^@204~  (table.Locale.ToString <> table.Data~dulla^@204~ String) Then
                Me.Loca~dulla^@204~ cale
            End If
           ~dulla^@204~ mespace <> table.DataSet.Namespace) T~dulla^@204~         Me.Namespace = table.Namespac~dulla^@204~   End If
            Me.Prefix = tab~dulla^@204~           Me.MinimumCapacity = table.~dulla^@204~ ty
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Protected Sub New(ByVal info As Sy~dulla^@204~ Serialization.SerializationInfo, ByVa~dulla^@204~ System.Runtime.Serialization.Streamin~dulla^@204~           MyBase.New(info, context)
~dulla^@204~ e.InitVars
        End Sub
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public ReadOnly Property P~dulla^@204~  As System.Data.DataColumn
         ~dulla^@204~            Return Me.columnPartNo
  ~dulla^@204~  Get
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public ReadOnly Property Qu~dulla^@204~ ) As System.Data.DataColumn
        ~dulla^@204~             Return Me.columnQuantity~dulla^@204~ End Get
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public ReadOnly Property~dulla^@204~ () As System.Data.DataColumn
       ~dulla^@204~              Return Me.columnAmount
~dulla^@204~ nd Get
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public ReadOnly Property ~dulla^@204~ umn() As System.Data.DataColumn
    ~dulla^@204~                 Return Me.columnSuppl~dulla^@204~       End Get
        End Property
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public ReadOnly Pr~dulla^@204~ eNoColumn() As System.Data.DataColumn~dulla^@204~  Get
                Return Me.colum~dulla^@204~            End Get
        End Prope~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute(),  _
         System.Compo~dulla^@204~ wsable(false)>  _
        Public Rea~dulla^@204~ y Count() As Integer
            Get~dulla^@204~      Return Me.Rows.Count
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Default ReadOnly Property It~dulla^@204~ x As Integer) As PurchaseInfoRow
   ~dulla^@204~ 
                Return CType(Me.Rows~dulla^@204~ aseInfoRow)
            End Get
   ~dulla^@204~ erty
        
        Public Event ~dulla^@204~ owChanging As PurchaseInfoRowChangeEv~dulla^@204~        
        Public Event Purchas~dulla^@204~ ed As PurchaseInfoRowChangeEventHandl~dulla^@204~ 
        Public Event PurchaseInfoRow~dulla^@204~ urchaseInfoRowChangeEventHandler
   ~dulla^@204~   Public Event PurchaseInfoRowDeleted~dulla^@204~ nfoRowChangeEventHandler
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public Overloads Sub AddPurch~dulla^@204~ Val row As PurchaseInfoRow)
        ~dulla^@204~ dd(row)
        End Sub
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public Overloads Function Add~dulla^@204~ ow(ByVal PartNo As String, ByVal Quan~dulla^@204~ er, ByVal Amount As Integer, ByVal Su~dulla^@204~ tring, ByVal InvoiceNo As String) As ~dulla^@204~ ow
            Dim rowPurchaseInfoRo~dulla^@204~ InfoRow = CType(Me.NewRow,PurchaseInf~dulla^@204~       rowPurchaseInfoRow.ItemArray = ~dulla^@204~ {PartNo, Quantity, Amount, SupplierID~dulla^@204~ 
            Me.Rows.Add(rowPurchaseI~dulla^@204~         Return rowPurchaseInfoRow
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ tion FindByPartNo(ByVal PartNo As Str~dulla^@204~ aseInfoRow
            Return CType(~dulla^@204~ New Object() {PartNo}),PurchaseInfoRo~dulla^@204~ nd Function
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Overridable Function GetEnumerator(~dulla^@204~ ollections.IEnumerator Implements Sys~dulla^@204~ ns.IEnumerable.GetEnumerator
       ~dulla^@204~ e.Rows.GetEnumerator
        End Fun~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Over~dulla^@204~ n Clone() As System.Data.DataTable
 ~dulla^@204~ m cln As PurchaseInfoDataTable = CTyp~dulla^@204~ e,PurchaseInfoDataTable)
           ~dulla^@204~ 
            Return cln
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Protect~dulla^@204~ Function CreateInstance() As System.D~dulla^@204~ 
            Return New PurchaseInfo~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Friend Sub InitVars()
            ~dulla^@204~ No = MyBase.Columns("PartNo")
      ~dulla^@204~ mnQuantity = MyBase.Columns("Quantity~dulla^@204~    Me.columnAmount = MyBase.Columns("~dulla^@204~          Me.columnSupplierID = MyBase~dulla^@204~ plierID")
            Me.columnInvoi~dulla^@204~ .Columns("InvoiceNo")
        End Sub
        
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Private~dulla^@204~ s()
            Me.columnPartNo = Ne~dulla^@204~ .DataColumn("PartNo", GetType(String)~dulla^@204~ stem.Data.MappingType.Element)
     ~dulla^@204~ .Columns.Add(Me.columnPartNo)
      ~dulla^@204~ mnQuantity = New System.Data.DataColu~dulla^@204~ , GetType(Integer), Nothing, System.D~dulla^@204~ pe.Element)
            MyBase.Colum~dulla^@204~ umnQuantity)
            Me.columnAm~dulla^@204~ stem.Data.DataColumn("Amount", GetTyp~dulla^@204~ othing, System.Data.MappingType.Eleme~dulla^@204~     MyBase.Columns.Add(Me.columnAmoun~dulla^@204~    Me.columnSupplierID = New System.D~dulla^@204~ n("SupplierID", GetType(String), Noth~dulla^@204~ ata.MappingType.Element)
           ~dulla^@204~ ns.Add(Me.columnSupplierID)
        ~dulla^@204~ InvoiceNo = New System.Data.DataColum~dulla^@204~ , GetType(String), Nothing, System.Da~dulla^@204~ e.Element)
            MyBase.Column~dulla^@204~ mnInvoiceNo)
            Me.Constrai~dulla^@204~ ystem.Data.UniqueConstraint("Constrai~dulla^@204~ tem.Data.DataColumn() {Me.columnPartN~dulla^@204~            Me.columnPartNo.AllowDBNul~dulla^@204~           Me.columnPartNo.Unique = tr~dulla^@204~    Me.columnPartNo.MaxLength = 20
  ~dulla^@204~ columnQuantity.AllowDBNull = false
 ~dulla^@204~ .columnAmount.AllowDBNull = false
  ~dulla^@204~ columnSupplierID.AllowDBNull = false~dulla^@204~ Me.columnSupplierID.MaxLength = 20
 ~dulla^@204~ .columnInvoiceNo.AllowDBNull = false~dulla^@204~ Me.columnInvoiceNo.MaxLength = 20
  ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ NewPurchaseInfoRow() As PurchaseInfoR~dulla^@204~    Return CType(Me.NewRow,PurchaseInf~dulla^@204~   End Function
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ otected Overrides Function NewRowFrom~dulla^@204~  builder As System.Data.DataRowBuilde~dulla^@204~ Data.DataRow
            Return New ~dulla^@204~ ow(builder)
        End Function
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Protected Overrides ~dulla^@204~ owType() As System.Type
            ~dulla^@204~ e(PurchaseInfoRow)
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Protected Ove~dulla^@204~ RowChanged(ByVal e As System.Data.Dat~dulla^@204~ ntArgs)
            MyBase.OnRowChan~dulla^@204~        If (Not (Me.PurchaseInfoRowCha~dulla^@204~  Nothing) Then
                Raise~dulla^@204~ eInfoRowChanged(Me, New PurchaseInfoR~dulla^@204~ (CType(e.Row,PurchaseInfoRow), e.Acti~dulla^@204~      End If
        End Sub
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Protected Overrides Sub O~dulla^@204~ ByVal e As System.Data.DataRowChangeE~dulla^@204~           MyBase.OnRowChanging(e)
  ~dulla^@204~ (Not (Me.PurchaseInfoRowChangingEvent~dulla^@204~  Then
                RaiseEvent Pur~dulla^@204~ hanging(Me, New PurchaseInfoRowChange~dulla^@204~ .Row,PurchaseInfoRow), e.Action))
  ~dulla^@204~  If
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Protected Overrides Sub OnRowDele~dulla^@204~ s System.Data.DataRowChangeEventArgs)~dulla^@204~  MyBase.OnRowDeleted(e)
            ~dulla^@204~ urchaseInfoRowDeletedEvent) Is Nothin~dulla^@204~             RaiseEvent PurchaseInfoRo~dulla^@204~ New PurchaseInfoRowChangeEvent(CType(~dulla^@204~ eInfoRow), e.Action))
            En~dulla^@204~  End Sub
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ d Overrides Sub OnRowDeleting(ByVal e~dulla^@204~ ta.DataRowChangeEventArgs)
         ~dulla^@204~ owDeleting(e)
            If (Not (M~dulla^@204~ oRowDeletingEvent) Is Nothing) Then
~dulla^@204~    RaiseEvent PurchaseInfoRowDeleting~dulla^@204~ haseInfoRowChangeEvent(CType(e.Row,Pu~dulla^@204~ ), e.Action))
            End If
  ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ ePurchaseInfoRow(ByVal row As Purchas~dulla^@204~           Me.Rows.Remove(row)
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ on GetTypedTableSchema(ByVal xs As Sy~dulla^@204~ ma.XmlSchemaSet) As System.Xml.Schema~dulla^@204~ plexType
            Dim type As Sys~dulla^@204~ a.XmlSchemaComplexType = New System.X~dulla^@204~ SchemaComplexType
            Dim se~dulla^@204~ tem.Xml.Schema.XmlSchemaSequence = Ne~dulla^@204~ Schema.XmlSchemaSequence
           ~dulla^@204~ ventoryControlSystemDataSet1 = New In~dulla^@204~ lSystemDataSet1
            xs.Add(d~dulla^@204~ rializable)
            Dim any1 As ~dulla^@204~ hema.XmlSchemaAny = New System.Xml.Sc~dulla^@204~ aAny
            any1.Namespace = "h~dulla^@204~ org/2001/XMLSchema"
            any1~dulla^@204~ New Decimal(0)
            any1.MaxO~dulla^@204~ al.MaxValue
            any1.Process~dulla^@204~ stem.Xml.Schema.XmlSchemaContentProce~dulla^@204~           sequence.Items.Add(any1)
 ~dulla^@204~ m any2 As System.Xml.Schema.XmlSchema~dulla^@204~ tem.Xml.Schema.XmlSchemaAny
        ~dulla^@204~ space = "urn:schemas-microsoft-com:xm~dulla^@204~ "
            any2.MinOccurs = New D~dulla^@204~           any2.ProcessContents = Syst~dulla^@204~ .XmlSchemaContentProcessing.Lax
    ~dulla^@204~ nce.Items.Add(any2)
            Dim ~dulla^@204~  System.Xml.Schema.XmlSchemaAttribute~dulla^@204~ .Xml.Schema.XmlSchemaAttribute
     ~dulla^@204~ ute1.Name = "namespace"
            ~dulla^@204~ xedValue = ds.Namespace
            ~dulla^@204~ es.Add(attribute1)
            Dim a~dulla^@204~ System.Xml.Schema.XmlSchemaAttribute ~dulla^@204~ Xml.Schema.XmlSchemaAttribute
      ~dulla^@204~ te2.Name = "tableTypeName"
         ~dulla^@204~ .FixedValue = "PurchaseInfoDataTable"~dulla^@204~  type.Attributes.Add(attribute2)
   ~dulla^@204~ .Particle = sequence
            Ret~dulla^@204~      End Function
    End Class
   ~dulla^@204~ m.CodeDom.Compiler.GeneratedCodeAttri~dulla^@204~ Data.Design.TypedDataSetGenerator", "~dulla^@204~ 
     System.Serializable(),  _
   ~dulla^@204~ Serialization.XmlSchemaProviderAttrib~dulla^@204~ TableSchema")>  _
    Partial Public~dulla^@204~ ataTable
        Inherits System.Dat~dulla^@204~         Implements System.Collections~dulla^@204~ 
        
        Private columnInvo~dulla^@204~ em.Data.DataColumn
        
       ~dulla^@204~ mnPartNo As System.Data.DataColumn
 ~dulla^@204~     Private columnDate As System.Data~dulla^@204~         
        Private columnSubTo~dulla^@204~ .Data.DataColumn
        
        P~dulla^@204~ VATAmount As System.Data.DataColumn
~dulla^@204~      Private columnGrandTotal As Syst~dulla^@204~ olumn
        
        Private colu~dulla^@204~ nt As System.Data.DataColumn
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Sub New()
       ~dulla^@204~ ew
            Me.TableName = "Sales~dulla^@204~   Me.BeginInit
            Me.InitCl~dulla^@204~     Me.EndInit
        End Sub
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Friend Sub New(ByVal t~dulla^@204~ m.Data.DataTable)
            MyBase~dulla^@204~      Me.TableName = table.TableName
~dulla^@204~ f (table.CaseSensitive <> table.DataS~dulla^@204~ ive) Then
                Me.CaseSen~dulla^@204~ e.CaseSensitive
            End If
~dulla^@204~ f (table.Locale.ToString <> table.Dat~dulla^@204~ oString) Then
                Me.Loc~dulla^@204~ ocale
            End If
          ~dulla^@204~ amespace <> table.DataSet.Namespace) ~dulla^@204~          Me.Namespace = table.Namespa~dulla^@204~    End If
            Me.Prefix = ta~dulla^@204~            Me.MinimumCapacity = table~dulla^@204~ ity
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Protected Sub New(ByVal info As S~dulla^@204~ .Serialization.SerializationInfo, ByV~dulla^@204~  System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, c~dulla^@204~         Me.InitVars
        End Sub~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public ReadOnly P~dulla^@204~ ceNoColumn() As System.Data.DataColum~dulla^@204~   Get
                Return Me.colu~dulla^@204~             End Get
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public ReadO~dulla^@204~ PartNoColumn() As System.Data.DataCol~dulla^@204~     Get
                Return Me.co~dulla^@204~            End Get
        End Prope~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public ReadOn~dulla^@204~ ateColumn() As System.Data.DataColumn~dulla^@204~  Get
                Return Me.colum~dulla^@204~       End Get
        End Property
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public ReadOnly Pr~dulla^@204~ alColumn() As System.Data.DataColumn~dulla^@204~ Get
                Return Me.column~dulla^@204~          End Get
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public ReadOnly~dulla^@204~ AmountColumn() As System.Data.DataCol~dulla^@204~     Get
                Return Me.co~dulla^@204~ 
            End Get
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Rea~dulla^@204~ y GrandTotalColumn() As System.Data.D~dulla^@204~           Get
                Return~dulla^@204~ ndTotal
            End Get
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ Property ModeOfPaymentColumn() As Sys~dulla^@204~ Column
            Get
            ~dulla^@204~ .columnModeOfPayment
            End~dulla^@204~  End Property
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ stem.ComponentModel.Browsable(false)>~dulla^@204~ Public ReadOnly Property Count() As I~dulla^@204~        Get
                Return Me~dulla^@204~             End Get
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Defau~dulla^@204~ roperty Item(ByVal index As Integer) ~dulla^@204~             Get
                Retu~dulla^@204~ ows(index),SalesRow)
            End~dulla^@204~  End Property
        
        Publ~dulla^@204~ sRowChanging As SalesRowChangeEventHa~dulla^@204~   
        Public Event SalesRowChan~dulla^@204~ owChangeEventHandler
        
     ~dulla^@204~ nt SalesRowDeleting As SalesRowChange~dulla^@204~ 
        
        Public Event Sales~dulla^@204~  SalesRowChangeEventHandler
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Overloads Sub AddSa~dulla^@204~ row As SalesRow)
            Me.Rows~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Overloads Function AddSalesRow(By~dulla^@204~  As String, ByVal PartNo As String, B~dulla^@204~  Date, ByVal SubTotal As Double, ByVa~dulla^@204~ s Double, ByVal GrandTotal As Double,~dulla^@204~ Payment As String) As SalesRow
     ~dulla^@204~ wSalesRow As SalesRow = CType(Me.NewR~dulla^@204~ 
            rowSalesRow.ItemArray = ~dulla^@204~ {InvoiceNo, PartNo, _Date, SubTotal, ~dulla^@204~ andTotal, ModeOfPayment}
           ~dulla^@204~ rowSalesRow)
            Return rowS~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Function FindByInvoiceNo(ByVal~dulla^@204~  String) As SalesRow
            Ret~dulla^@204~ Rows.Find(New Object() {InvoiceNo}),S~dulla^@204~      End Function
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Overridable Function GetEnume~dulla^@204~ stem.Collections.IEnumerator Implemen~dulla^@204~ lections.IEnumerable.GetEnumerator
 ~dulla^@204~ turn Me.Rows.GetEnumerator
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ unction Clone() As System.Data.DataTa~dulla^@204~     Dim cln As SalesDataTable = CType~dulla^@204~ ,SalesDataTable)
            cln.Ini~dulla^@204~       Return cln
        End Functio~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Protected Overr~dulla^@204~  CreateInstance() As System.Data.Data~dulla^@204~       Return New SalesDataTable
    ~dulla^@204~ ion
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ itVars()
            Me.columnInvoic~dulla^@204~ Columns("InvoiceNo")
            Me.~dulla^@204~ = MyBase.Columns("PartNo")
         ~dulla^@204~ ate = MyBase.Columns("Date")
       ~dulla^@204~ nSubTotal = MyBase.Columns("SubTotal"~dulla^@204~   Me.columnVATAmount = MyBase.Columns~dulla^@204~ 
            Me.columnGrandTotal = M~dulla^@204~ ("GrandTotal")
            Me.column~dulla^@204~  = MyBase.Columns("ModeOfPayment")
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pr~dulla^@204~ tClass()
            Me.columnInvoic~dulla^@204~ tem.Data.DataColumn("InvoiceNo", GetT~dulla^@204~ Nothing, System.Data.MappingType.Elem~dulla^@204~      MyBase.Columns.Add(Me.columnInvo~dulla^@204~        Me.columnPartNo = New System.D~dulla^@204~ n("PartNo", GetType(String), Nothing,~dulla^@204~ MappingType.Element)
            MyB~dulla^@204~ dd(Me.columnPartNo)
            Me.c~dulla^@204~ ew System.Data.DataColumn("Date", Get~dulla^@204~ othing, System.Data.MappingType.Eleme~dulla^@204~     Me.columnDate.ExtendedProperties.~dulla^@204~ r_ColumnPropNameInRow", "_Date")
   ~dulla^@204~ olumnDate.ExtendedProperties.Add("Gen~dulla^@204~ lumnName", "Date")
            MyBas~dulla^@204~ (Me.columnDate)
            Me.colum~dulla^@204~ ew System.Data.DataColumn("SubTotal",~dulla^@204~ le), Nothing, System.Data.MappingType~dulla^@204~           MyBase.Columns.Add(Me.colum~dulla^@204~            Me.columnVATAmount = New S~dulla^@204~ taColumn("VATAmount", GetType(Double)~dulla^@204~ stem.Data.MappingType.Element)
     ~dulla^@204~ .Columns.Add(Me.columnVATAmount)
   ~dulla^@204~ olumnGrandTotal = New System.Data.Dat~dulla^@204~ dTotal", GetType(Double), Nothing, Sy~dulla^@204~ pingType.Element)
            MyBase~dulla^@204~ Me.columnGrandTotal)
            Me.~dulla^@204~ ayment = New System.Data.DataColumn("~dulla^@204~ ", GetType(String), Nothing, System.D~dulla^@204~ pe.Element)
            MyBase.Colum~dulla^@204~ umnModeOfPayment)
            Me.Con~dulla^@204~ New System.Data.UniqueConstraint("Con~dulla^@204~ w System.Data.DataColumn() {Me.column~dulla^@204~ rue))
            Me.columnInvoiceNo~dulla^@204~ = false
            Me.columnInvoice~dulla^@204~ rue
            Me.columnInvoiceNo.M~dulla^@204~ 
            Me.columnPartNo.AllowDB~dulla^@204~ 
            Me.columnPartNo.MaxLengt~dulla^@204~        Me.columnDate.AllowDBNull = fa~dulla^@204~     Me.columnSubTotal.AllowDBNull = f~dulla^@204~      Me.columnVATAmount.AllowDBNull =~dulla^@204~        Me.columnGrandTotal.AllowDBNul~dulla^@204~           Me.columnModeOfPayment.Allo~dulla^@204~ se
            Me.columnModeOfPaymen~dulla^@204~  10
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Function NewSalesRow() As ~dulla^@204~          Return CType(Me.NewRow,Sales~dulla^@204~  End Function
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ tected Overrides Function NewRowFromB~dulla^@204~ builder As System.Data.DataRowBuilder~dulla^@204~ ata.DataRow
            Return New S~dulla^@204~ er)
        End Function
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Protected Overrides Function~dulla^@204~  As System.Type
            Return G~dulla^@204~ ow)
        End Function
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Protected Overrides Sub OnRo~dulla^@204~ l e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)~dulla^@204~ If (Not (Me.SalesRowChangedEvent) Is ~dulla^@204~ 
                RaiseEvent SalesRow~dulla^@204~ ew SalesRowChangeEvent(CType(e.Row,Sa~dulla^@204~ tion))
            End If
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Protected ~dulla^@204~  OnRowChanging(ByVal e As System.Data~dulla^@204~ eEventArgs)
            MyBase.OnRow~dulla^@204~             If (Not (Me.SalesRowChang~dulla^@204~ Nothing) Then
                RaiseE~dulla^@204~ Changing(Me, New SalesRowChangeEvent(~dulla^@204~ alesRow), e.Action))
            End~dulla^@204~ End Sub
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~  Overrides Sub OnRowDeleted(ByVal e A~dulla^@204~ .DataRowChangeEventArgs)
           ~dulla^@204~ Deleted(e)
            If (Not (Me.S~dulla^@204~ dEvent) Is Nothing) Then
           ~dulla^@204~ nt SalesRowDeleted(Me, New SalesRowCh~dulla^@204~ pe(e.Row,SalesRow), e.Action))
     ~dulla^@204~ 
        End Sub
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Protected Overrides Sub OnRowDeletin~dulla^@204~ System.Data.DataRowChangeEventArgs)
~dulla^@204~ yBase.OnRowDeleting(e)
            I~dulla^@204~ lesRowDeletingEvent) Is Nothing) Then~dulla^@204~      RaiseEvent SalesRowDeleting(Me, ~dulla^@204~ hangeEvent(CType(e.Row,SalesRow), e.A~dulla^@204~         End If
        End Sub
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Sub RemoveSales~dulla^@204~  As SalesRow)
            Me.Rows.Re~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Shared Function GetTypedTableSche~dulla^@204~ s System.Xml.Schema.XmlSchemaSet) As ~dulla^@204~ hema.XmlSchemaComplexType
          ~dulla^@204~  System.Xml.Schema.XmlSchemaComplexTy~dulla^@204~ em.Xml.Schema.XmlSchemaComplexType
 ~dulla^@204~ m sequence As System.Xml.Schema.XmlSc~dulla^@204~ = New System.Xml.Schema.XmlSchemaSequ~dulla^@204~      Dim ds As InventoryControlSystem~dulla^@204~ w InventoryControlSystemDataSet1
   ~dulla^@204~ dd(ds.GetSchemaSerializable)
       ~dulla^@204~  As System.Xml.Schema.XmlSchemaAny = ~dulla^@204~ l.Schema.XmlSchemaAny
            an~dulla^@204~ = "http://www.w3.org/2001/XMLSchema"~dulla^@204~ any1.MinOccurs = New Decimal(0)
    ~dulla^@204~ MaxOccurs = Decimal.MaxValue
       ~dulla^@204~ cessContents = System.Xml.Schema.XmlS~dulla^@204~ rocessing.Lax
            sequence.I~dulla^@204~ )
            Dim any2 As System.Xml~dulla^@204~ hemaAny = New System.Xml.Schema.XmlSc~dulla^@204~         any2.Namespace = "urn:schemas~dulla^@204~ m:xml-diffgram-v1"
            any2.~dulla^@204~ ew Decimal(1)
            any2.Proce~dulla^@204~ System.Xml.Schema.XmlSchemaContentPro~dulla^@204~             sequence.Items.Add(any2)~dulla^@204~ Dim attribute1 As System.Xml.Schema.X~dulla^@204~ bute = New System.Xml.Schema.XmlSchem~dulla^@204~            attribute1.Name = "namespa~dulla^@204~     attribute1.FixedValue = ds.Namesp~dulla^@204~     type.Attributes.Add(attribute1)
~dulla^@204~ im attribute2 As System.Xml.Schema.Xm~dulla^@204~ ute = New System.Xml.Schema.XmlSchema~dulla^@204~           attribute2.Name = "tableTyp~dulla^@204~        attribute2.FixedValue = "Sales~dulla^@204~            type.Attributes.Add(attrib~dulla^@204~       type.Particle = sequence
     ~dulla^@204~  type
        End Function
    End ~dulla^@204~     <System.CodeDom.Compiler.Generate~dulla^@204~ e("System.Data.Design.TypedDataSetGen~dulla^@204~ .0.0"),  _
     System.Serializable(~dulla^@204~ ystem.Xml.Serialization.XmlSchemaProv~dulla^@204~ ("GetTypedTableSchema")>  _
    Part~dulla^@204~ ass SalesInfoDataTable
        Inher~dulla^@204~ ta.DataTable
        Implements Syst~dulla^@204~ s.IEnumerable
        
        Priv~dulla^@204~ tNo As System.Data.DataColumn
      ~dulla^@204~ rivate columnInvoiceNo As System.Data~dulla^@204~         
        Private columnCusto~dulla^@204~ em.Data.DataColumn
        
       ~dulla^@204~ mnStockCardNo As System.Data.DataColu~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Sub New~dulla^@204~    MyBase.New
            Me.TableNa~dulla^@204~ fo"
            Me.BeginInit
      ~dulla^@204~ Class
            Me.EndInit
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Friend ~dulla^@204~  table As System.Data.DataTable)
   ~dulla^@204~ se.New
            Me.TableName = ta~dulla^@204~ 
            If (table.CaseSensitive~dulla^@204~ aSet.CaseSensitive) Then
           ~dulla^@204~ ensitive = table.CaseSensitive
     ~dulla^@204~ 
            If (table.Locale.ToStri~dulla^@204~ ataSet.Locale.ToString) Then
       ~dulla^@204~ ocale = table.Locale
            End~dulla^@204~     If (table.Namespace <> table.Data~dulla^@204~ ) Then
                Me.Namespace ~dulla^@204~ pace
            End If
           ~dulla^@204~ table.Prefix
            Me.MinimumC~dulla^@204~ le.MinimumCapacity
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Protected Sub New(~dulla^@204~  System.Runtime.Serialization.Seriali~dulla^@204~ yVal context As System.Runtime.Serial~dulla^@204~ mingContext)
            MyBase.New(~dulla^@204~ )
            Me.InitVars
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Rea~dulla^@204~ y PartNoColumn() As System.Data.DataC~dulla^@204~       Get
                Return Me.~dulla^@204~ 
            End Get
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Read~dulla^@204~  InvoiceNoColumn() As System.Data.Dat~dulla^@204~         Get
                Return M~dulla^@204~ ceNo
            End Get
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ perty CustomerIDColumn() As System.Da~dulla^@204~ 
            Get
                Re~dulla^@204~ nCustomerID
            End Get
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ nly Property StockCardNoColumn() As S~dulla^@204~ taColumn
            Get
          ~dulla^@204~ Me.columnStockCardNo
            End~dulla^@204~  End Property
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ stem.ComponentModel.Browsable(false)>~dulla^@204~ Public ReadOnly Property Count() As I~dulla^@204~        Get
                Return Me~dulla^@204~             End Get
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Defau~dulla^@204~ roperty Item(ByVal index As Integer) ~dulla^@204~ ow
            Get
                ~dulla^@204~ Me.Rows(index),SalesInfoRow)
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ ent SalesInfoRowChanging As SalesInfo~dulla^@204~ tHandler
        
        Public Ev~dulla^@204~ RowChanged As SalesInfoRowChangeEvent~dulla^@204~     
        Public Event SalesInfoR~dulla^@204~  SalesInfoRowChangeEventHandler
    ~dulla^@204~  Public Event SalesInfoRowDeleted As ~dulla^@204~ hangeEventHandler
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Overloads Sub AddSalesInfoRow~dulla^@204~  SalesInfoRow)
            Me.Rows.A~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Overloads Function AddSalesInfoRow(~dulla^@204~ As String, ByVal InvoiceNo As String,~dulla^@204~ erID As String, ByVal StockCardNo As ~dulla^@204~ lesInfoRow
            Dim rowSalesI~dulla^@204~ esInfoRow = CType(Me.NewRow,SalesInfo~dulla^@204~      rowSalesInfoRow.ItemArray = New ~dulla^@204~ tNo, InvoiceNo, CustomerID, StockCard~dulla^@204~     Me.Rows.Add(rowSalesInfoRow)
   ~dulla^@204~ rn rowSalesInfoRow
        End Funct~dulla^@204~ 
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Publi~dulla^@204~ ndByPartNoInvoiceNo(ByVal PartNo As S~dulla^@204~ InvoiceNo As String) As SalesInfoRow~dulla^@204~ Return CType(Me.Rows.Find(New Object(~dulla^@204~ voiceNo}),SalesInfoRow)
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public O~dulla^@204~ nction GetEnumerator() As System.Coll~dulla^@204~ erator Implements System.Collections.~dulla^@204~ etEnumerator
            Return Me.R~dulla^@204~ ator
        End Function
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Overrides Function C~dulla^@204~ tem.Data.DataTable
            Dim c~dulla^@204~ foDataTable = CType(MyBase.Clone,Sale~dulla^@204~ e)
            cln.InitVars
       ~dulla^@204~ ln
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Protected Overrides Function ~dulla^@204~ e() As System.Data.DataTable
       ~dulla^@204~ ew SalesInfoDataTable
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Friend Sub~dulla^@204~             Me.columnPartNo = MyBase.~dulla^@204~ No")
            Me.columnInvoiceNo ~dulla^@204~ mns("InvoiceNo")
            Me.colu~dulla^@204~ = MyBase.Columns("CustomerID")
     ~dulla^@204~ umnStockCardNo = MyBase.Columns("Stoc~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ vate Sub InitClass()
            Me.~dulla^@204~ = New System.Data.DataColumn("PartNo"~dulla^@204~ ing), Nothing, System.Data.MappingTyp~dulla^@204~            MyBase.Columns.Add(Me.colu~dulla^@204~           Me.columnInvoiceNo = New Sy~dulla^@204~ aColumn("InvoiceNo", GetType(String),~dulla^@204~ tem.Data.MappingType.Element)
      ~dulla^@204~ Columns.Add(Me.columnInvoiceNo)
    ~dulla^@204~ lumnCustomerID = New System.Data.Data~dulla^@204~ merID", GetType(String), Nothing, Sys~dulla^@204~ ingType.Element)
            MyBase.~dulla^@204~ e.columnCustomerID)
            Me.c~dulla^@204~ dNo = New System.Data.DataColumn("Sto~dulla^@204~ tType(String), Nothing, System.Data.M~dulla^@204~ ement)
            MyBase.Columns.Ad~dulla^@204~ ockCardNo)
            Me.Constraint~dulla^@204~ tem.Data.UniqueConstraint("Constraint~dulla^@204~ m.Data.DataColumn() {Me.columnPartNo,~dulla^@204~ oiceNo}, true))
            Me.colum~dulla^@204~ DBNull = false
            Me.column~dulla^@204~ gth = 20
            Me.columnInvoic~dulla^@204~ ll = false
            Me.columnInvo~dulla^@204~ th = 20
            Me.columnCustome~dulla^@204~ ll = false
            Me.columnCust~dulla^@204~ gth = 20
            Me.columnStockC~dulla^@204~ Null = false
            Me.columnSt~dulla^@204~ Length = 20
        End Sub
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Function NewSalesI~dulla^@204~ alesInfoRow
            Return CType~dulla^@204~ lesInfoRow)
        End Function
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Protected Overrides ~dulla^@204~ owFromBuilder(ByVal builder As System~dulla^@204~ Builder) As System.Data.DataRow
    ~dulla^@204~ n New SalesInfoRow(builder)
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Prot~dulla^@204~ es Function GetRowType() As System.Ty~dulla^@204~    Return GetType(SalesInfoRow)
    ~dulla^@204~ ion
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ rrides Sub OnRowChanged(ByVal e As Sy~dulla^@204~ aRowChangeEventArgs)
            MyB~dulla^@204~ ged(e)
            If (Not (Me.Sales~dulla^@204~ dEvent) Is Nothing) Then
           ~dulla^@204~ nt SalesInfoRowChanged(Me, New SalesI~dulla^@204~ vent(CType(e.Row,SalesInfoRow), e.Act~dulla^@204~       End If
        End Sub
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Protected Overrides Sub ~dulla^@204~ (ByVal e As System.Data.DataRowChange~dulla^@204~            MyBase.OnRowChanging(e)
 ~dulla^@204~  (Not (Me.SalesInfoRowChangingEvent) ~dulla^@204~ hen
                RaiseEvent Sales~dulla^@204~ ng(Me, New SalesInfoRowChangeEvent(CT~dulla^@204~ esInfoRow), e.Action))
            E~dulla^@204~   End Sub
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ ed Overrides Sub OnRowDeleted(ByVal e~dulla^@204~ ta.DataRowChangeEventArgs)
         ~dulla^@204~ owDeleted(e)
            If (Not (Me~dulla^@204~ DeletedEvent) Is Nothing) Then
     ~dulla^@204~ iseEvent SalesInfoRowDeleted(Me, New ~dulla^@204~ hangeEvent(CType(e.Row,SalesInfoRow),~dulla^@204~             End If
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Protected Override~dulla^@204~ leting(ByVal e As System.Data.DataRow~dulla^@204~ gs)
            MyBase.OnRowDeleting~dulla^@204~     If (Not (Me.SalesInfoRowDeletingE~dulla^@204~ ing) Then
                RaiseEvent~dulla^@204~ Deleting(Me, New SalesInfoRowChangeEv~dulla^@204~ ow,SalesInfoRow), e.Action))
       ~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Sub RemoveSalesInfoRow(ByVal ro~dulla^@204~ oRow)
            Me.Rows.Remove(row~dulla^@204~ d Sub
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ ed Function GetTypedTableSchema(ByVal~dulla^@204~ .Xml.Schema.XmlSchemaSet) As System.X~dulla^@204~ SchemaComplexType
            Dim ty~dulla^@204~ Xml.Schema.XmlSchemaComplexType = New~dulla^@204~ chema.XmlSchemaComplexType
         ~dulla^@204~ ce As System.Xml.Schema.XmlSchemaSequ~dulla^@204~ stem.Xml.Schema.XmlSchemaSequence
  ~dulla^@204~  ds As InventoryControlSystemDataSet1~dulla^@204~ oryControlSystemDataSet1
           ~dulla^@204~ tSchemaSerializable)
            Dim~dulla^@204~ em.Xml.Schema.XmlSchemaAny = New Syst~dulla^@204~ .XmlSchemaAny
            any1.Names~dulla^@204~ //www.w3.org/2001/XMLSchema"
       ~dulla^@204~ Occurs = New Decimal(0)
            ~dulla^@204~ s = Decimal.MaxValue
            any~dulla^@204~ ents = System.Xml.Schema.XmlSchemaCon~dulla^@204~ g.Lax
            sequence.Items.Add~dulla^@204~        Dim any2 As System.Xml.Schema.~dulla^@204~ = New System.Xml.Schema.XmlSchemaAny~dulla^@204~ any2.Namespace = "urn:schemas-microso~dulla^@204~ ffgram-v1"
            any2.MinOccur~dulla^@204~ al(1)
            any2.ProcessConten~dulla^@204~ ml.Schema.XmlSchemaContentProcessing.~dulla^@204~     sequence.Items.Add(any2)
       ~dulla^@204~ ibute1 As System.Xml.Schema.XmlSchema~dulla^@204~ ew System.Xml.Schema.XmlSchemaAttribu~dulla^@204~    attribute1.Name = "namespace"
   ~dulla^@204~ ibute1.FixedValue = ds.Namespace
   ~dulla^@204~ .Attributes.Add(attribute1)
        ~dulla^@204~ bute2 As System.Xml.Schema.XmlSchemaA~dulla^@204~ w System.Xml.Schema.XmlSchemaAttribut~dulla^@204~   attribute2.Name = "tableTypeName"
~dulla^@204~ ttribute2.FixedValue = "SalesInfoData~dulla^@204~        type.Attributes.Add(attribute2~dulla^@204~   type.Particle = sequence
         ~dulla^@204~ e
        End Function
    End Clas~dulla^@204~ <System.CodeDom.Compiler.GeneratedCod~dulla^@204~ ystem.Data.Design.TypedDataSetGenerat~dulla^@204~ "),  _
     System.Serializable(),  ~dulla^@204~ m.Xml.Serialization.XmlSchemaProvider~dulla^@204~ tTypedTableSchema")>  _
    Partial ~dulla^@204~ StockCardDataTable
        Inherits ~dulla^@204~ ataTable
        Implements System.C~dulla^@204~ numerable
        
        Private ~dulla^@204~ rdNo As System.Data.DataColumn
     ~dulla^@204~ Private columnPartNo As System.Data.D~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~           MyBase.New
            Me.~dulla^@204~ StockCard"
            Me.BeginInit~dulla^@204~ Me.InitClass
            Me.EndInit~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ w(ByVal table As System.Data.DataTable)
            MyBase.New
            Me~dulla^@204~ table.TableName
            If (tabl~dulla^@204~ ve <> table.DataSet.CaseSensitive) Th~dulla^@204~        Me.CaseSensitive = table.CaseS~dulla^@204~          End If
            If (tabl~dulla^@204~ ring <> table.DataSet.Locale.ToString~dulla^@204~            Me.Locale = table.Locale
~dulla^@204~ nd If
            If (table.Namespac~dulla^@204~ taSet.Namespace) Then
              ~dulla^@204~ e = table.Namespace
            End ~dulla^@204~    Me.Prefix = table.Prefix
        ~dulla^@204~ mCapacity = table.MinimumCapacity
  ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pro~dulla^@204~ w(ByVal info As System.Runtime.Serial~dulla^@204~ lizationInfo, ByVal context As System~dulla^@204~ alization.StreamingContext)
        ~dulla^@204~ w(info, context)
            Me.Init~dulla^@204~  End Sub
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ eadOnly Property StockCardNoColumn() ~dulla^@204~ a.DataColumn
            Get
      ~dulla^@204~ urn Me.columnStockCardNo
           ~dulla^@204~      End Property
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public ReadOnly Property PartNoColum~dulla^@204~ .Data.DataColumn
            Get
  ~dulla^@204~  Return Me.columnPartNo
            ~dulla^@204~     End Property
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute(),~dulla^@204~  System.ComponentModel.Browsable(fals~dulla^@204~    Public ReadOnly Property Count() A~dulla^@204~           Get
                Return~dulla^@204~ t
            End Get
        End P~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public De~dulla^@204~ y Property Item(ByVal index As Intege~dulla^@204~ rdRow
            Get
             ~dulla^@204~ pe(Me.Rows(index),StockCardRow)
    ~dulla^@204~ et
        End Property
        
 ~dulla^@204~  Event StockCardRowChanging As StockC~dulla^@204~ ventHandler
        
        Public~dulla^@204~ ardRowChanged As StockCardRowChangeEv~dulla^@204~        
        Public Event StockCa~dulla^@204~  As StockCardRowChangeEventHandler
 ~dulla^@204~     Public Event StockCardRowDeleted ~dulla^@204~ owChangeEventHandler
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Overloads Sub AddStockCard~dulla^@204~  As StockCardRow)
            Me.Row~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Overloads Function AddStockCardR~dulla^@204~ kCardNo As String, ByVal PartNo As St~dulla^@204~ kCardRow
            Dim rowStockCar~dulla^@204~ CardRow = CType(Me.NewRow,StockCardRo~dulla^@204~    rowStockCardRow.ItemArray = New Ob~dulla^@204~ CardNo, PartNo}
            Me.Rows.~dulla^@204~ ardRow)
            Return rowStockC~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Function FindByPartNo(ByVal Par~dulla^@204~ ) As StockCardRow
            Return~dulla^@204~ s.Find(New Object() {PartNo}),StockCa~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Overridable Function GetEnumera~dulla^@204~ em.Collections.IEnumerator Implements~dulla^@204~ ctions.IEnumerable.GetEnumerator
   ~dulla^@204~ rn Me.Rows.GetEnumerator
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ ction Clone() As System.Data.DataTabl~dulla^@204~   Dim cln As StockCardDataTable = CTy~dulla^@204~ ne,StockCardDataTable)
            c~dulla^@204~             Return cln
        End F~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Protected~dulla^@204~ nction CreateInstance() As System.Dat~dulla^@204~             Return New StockCardDataT~dulla^@204~  End Function
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ end Sub InitVars()
            Me.co~dulla^@204~ No = MyBase.Columns("StockCardNo")
 ~dulla^@204~ .columnPartNo = MyBase.Columns("PartN~dulla^@204~ End Sub
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ ub InitClass()
            Me.column~dulla^@204~  New System.Data.DataColumn("StockCar~dulla^@204~ (String), Nothing, System.Data.Mappin~dulla^@204~ )
            MyBase.Columns.Add(Me.~dulla^@204~ rdNo)
            Me.columnPartNo = ~dulla^@204~ ta.DataColumn("PartNo", GetType(Strin~dulla^@204~ System.Data.MappingType.Element)
   ~dulla^@204~ se.Columns.Add(Me.columnPartNo)
    ~dulla^@204~ nstraints.Add(New System.Data.UniqueC~dulla^@204~ nstraint1", New System.Data.DataColum~dulla^@204~ nPartNo}, true))
            Me.colu~dulla^@204~ .AllowDBNull = false
            Me.~dulla^@204~ rdNo.MaxLength = 20
            Me.c~dulla^@204~ llowDBNull = false
            Me.co~dulla^@204~ ique = true
            Me.columnPar~dulla^@204~  = 20
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Function NewStockCardRow~dulla^@204~ rdRow
            Return CType(Me.Ne~dulla^@204~ dRow)
        End Function
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Protected Overrides Functi~dulla^@204~ Builder(ByVal builder As System.Data.~dulla^@204~ r) As System.Data.DataRow
          ~dulla^@204~ StockCardRow(builder)
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Protected ~dulla^@204~ ction GetRowType() As System.Type
  ~dulla^@204~ urn GetType(StockCardRow)
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Protec~dulla^@204~  Sub OnRowChanged(ByVal e As System.D~dulla^@204~ angeEventArgs)
            MyBase.On~dulla^@204~ 
            If (Not (Me.StockCardRo~dulla^@204~ ) Is Nothing) Then
                R~dulla^@204~ ckCardRowChanged(Me, New StockCardRow~dulla^@204~ Type(e.Row,StockCardRow), e.Action))~dulla^@204~ End If
        End Sub
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Protected Overrides Sub OnRowC~dulla^@204~  e As System.Data.DataRowChangeEventA~dulla^@204~      MyBase.OnRowChanging(e)
       ~dulla^@204~ (Me.StockCardRowChangingEvent) Is Not~dulla^@204~                RaiseEvent StockCardRo~dulla^@204~  New StockCardRowChangeEvent(CType(e.~dulla^@204~ Row), e.Action))
            End If~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ rrides Sub OnRowDeleted(ByVal e As Sy~dulla^@204~ aRowChangeEventArgs)
            MyB~dulla^@204~ ted(e)
            If (Not (Me.Stock~dulla^@204~ dEvent) Is Nothing) Then
           ~dulla^@204~ nt StockCardRowDeleted(Me, New StockC~dulla^@204~ vent(CType(e.Row,StockCardRow), e.Act~dulla^@204~       End If
        End Sub
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Protected Overrides Sub ~dulla^@204~ (ByVal e As System.Data.DataRowChange~dulla^@204~            MyBase.OnRowDeleting(e)
 ~dulla^@204~  (Not (Me.StockCardRowDeletingEvent) ~dulla^@204~ hen
                RaiseEvent Stock~dulla^@204~ ng(Me, New StockCardRowChangeEvent(CT~dulla^@204~ ckCardRow), e.Action))
            E~dulla^@204~   End Sub
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Sub RemoveStockCardRow(ByVal row As S~dulla^@204~ 
            Me.Rows.Remove(row)
   ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ ction GetTypedTableSchema(ByVal xs As~dulla^@204~ chema.XmlSchemaSet) As System.Xml.Sch~dulla^@204~ ComplexType
            Dim type As ~dulla^@204~ hema.XmlSchemaComplexType = New Syste~dulla^@204~ XmlSchemaComplexType
            Dim~dulla^@204~ System.Xml.Schema.XmlSchemaSequence =~dulla^@204~ ml.Schema.XmlSchemaSequence
        ~dulla^@204~  InventoryControlSystemDataSet1 = New InventoryControlSystemDataSet1
         ~dulla^@204~ GetSchemaSerializable)
            D~dulla^@204~ stem.Xml.Schema.XmlSchemaAny = New Sy~dulla^@204~ ma.XmlSchemaAny
            any1.Nam~dulla^@204~ p://www.w3.org/2001/XMLSchema"
     ~dulla^@204~ inOccurs = New Decimal(0)
          ~dulla^@204~ urs = Decimal.MaxValue
            a~dulla^@204~ ntents = System.Xml.Schema.XmlSchemaC~dulla^@204~ ing.Lax
            sequence.Items.A~dulla^@204~          Dim any2 As System.Xml.Schem~dulla^@204~ y = New System.Xml.Schema.XmlSchemaAn~dulla^@204~   any2.Namespace = "urn:schemas-micro~dulla^@204~ diffgram-v1"
            any2.MinOcc~dulla^@204~ imal(1)
            any2.ProcessCont~dulla^@204~ .Xml.Schema.XmlSchemaContentProcessin~dulla^@204~       sequence.Items.Add(any2)
     ~dulla^@204~ tribute1 As System.Xml.Schema.XmlSche~dulla^@204~  New System.Xml.Schema.XmlSchemaAttri~dulla^@204~      attribute1.Name = "namespace"
 ~dulla^@204~ tribute1.FixedValue = ds.Namespace
 ~dulla^@204~ pe.Attributes.Add(attribute1)
      ~dulla^@204~ ribute2 As System.Xml.Schema.XmlSchem~dulla^@204~ New System.Xml.Schema.XmlSchemaAttrib~dulla^@204~     attribute2.Name = "tableTypeName"~dulla^@204~  attribute2.FixedValue = "StockCardDa~dulla^@204~          type.Attributes.Add(attribut~dulla^@204~     type.Particle = sequence
       ~dulla^@204~ ype
        End Function
    End Cl~dulla^@204~   <System.CodeDom.Compiler.GeneratedC~dulla^@204~ "System.Data.Design.TypedDataSetGener~dulla^@204~ .0"),  _
     System.Serializable(),~dulla^@204~ tem.Xml.Serialization.XmlSchemaProvid~dulla^@204~ GetTypedTableSchema")>  _
    Partia~dulla^@204~ s StockCardDetailDataTable
        I~dulla^@204~ m.Data.DataTable
        Implements ~dulla^@204~ tions.IEnumerable
        
        ~dulla^@204~ nInvoiceNo As System.Data.DataColumn~dulla^@204~       Private columnDateOfSale As Sys~dulla^@204~ Column
        
        Private col~dulla^@204~ o As System.Data.DataColumn
        ~dulla^@204~ vate columnDateRecieved As System.Dat~dulla^@204~ 
        
        Private columnPack~dulla^@204~ em.Data.DataColumn
        
       ~dulla^@204~ mnQtyRecieved As System.Data.DataColu~dulla^@204~ 
        Private columnQtyIssued As S~dulla^@204~ taColumn
        
        Private c~dulla^@204~ ce As System.Data.DataColumn
       ~dulla^@204~ ivate _columnInv_____D_O As System.Da~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ 
            MyBase.New
           ~dulla^@204~  = "StockCardDetail"
            Me.~dulla^@204~           Me.InitClass
            M~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ end Sub New(ByVal table As System.Dat~dulla^@204~ 
            MyBase.New
            ~dulla^@204~ = table.TableName
            If (ta~dulla^@204~ tive <> table.DataSet.CaseSensitive) ~dulla^@204~          Me.CaseSensitive = table.Cas~dulla^@204~            End If
            If (ta~dulla^@204~ String <> table.DataSet.Locale.ToStri~dulla^@204~              Me.Locale = table.Locale~dulla^@204~  End If
            If (table.Namesp~dulla^@204~ DataSet.Namespace) Then
            ~dulla^@204~ ace = table.Namespace
            En~dulla^@204~      Me.Prefix = table.Prefix
      ~dulla^@204~ mumCapacity = table.MinimumCapacity
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ New(ByVal info As System.Runtime.Seri~dulla^@204~ ializationInfo, ByVal context As Syst~dulla^@204~ rialization.StreamingContext)
      ~dulla^@204~ New(info, context)
            Me.In~dulla^@204~    End Sub
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  ReadOnly Property InvoiceNoColumn() ~dulla^@204~ a.DataColumn
            Get
      ~dulla^@204~ urn Me.columnInvoiceNo
            E~dulla^@204~    End Property
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic ReadOnly Property DateOfSaleCol~dulla^@204~ em.Data.DataColumn
            Get
~dulla^@204~    Return Me.columnDateOfSale
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public ReadOnly Property StockC~dulla^@204~  As System.Data.DataColumn
         ~dulla^@204~            Return Me.columnStockCardN~dulla^@204~   End Get
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public ReadOnly Proper~dulla^@204~ edColumn() As System.Data.DataColumn~dulla^@204~ Get
                Return Me.column~dulla^@204~ 
            End Get
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Read~dulla^@204~  PackagingColumn() As System.Data.Dat~dulla^@204~         Get
                Return M~dulla^@204~ ging
            End Get
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ perty QtyRecievedColumn() As System.D~dulla^@204~ n
            Get
                R~dulla^@204~ mnQtyRecieved
            End Get
 ~dulla^@204~ operty
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ dOnly Property QtyIssuedColumn() As S~dulla^@204~ taColumn
            Get
          ~dulla^@204~ Me.columnQtyIssued
            End G~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c ReadOnly Property QtyBalanceColumn(~dulla^@204~ ata.DataColumn
            Get
    ~dulla^@204~ eturn Me.columnQtyBalance
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public ReadOnly Property _Inv_____D~dulla^@204~  System.Data.DataColumn
            ~dulla^@204~         Return Me._columnInv_____D_O~dulla^@204~ End Get
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
         System.ComponentModel.B~dulla^@204~ e)>  _
        Public ReadOnly Prope~dulla^@204~ s Integer
            Get
         ~dulla^@204~  Me.Rows.Count
            End Get
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ fault ReadOnly Property Item(ByVal in~dulla^@204~ r) As StockCardDetailRow
           ~dulla^@204~          Return CType(Me.Rows(index),~dulla^@204~ ilRow)
            End Get
        ~dulla^@204~ 
        
        Public Event Stock~dulla^@204~ Changing As StockCardDetailRowChangeE~dulla^@204~         
        Public Event StockC~dulla^@204~ hanged As StockCardDetailRowChangeEve~dulla^@204~       
        Public Event StockCar~dulla^@204~ eting As StockCardDetailRowChangeEven~dulla^@204~      
        Public Event StockCard~dulla^@204~ ted As StockCardDetailRowChangeEventH~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Ove~dulla^@204~ dStockCardDetailRow(ByVal row As Stoc~dulla^@204~ w)
            Me.Rows.Add(row)
   ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ Function AddStockCardDetailRow(ByVal ~dulla^@204~ String, ByVal DateOfSale As Date, ByV~dulla^@204~ o As String, ByVal DateRecieved As Da~dulla^@204~ kaging As String, ByVal QtyRecieved A~dulla^@204~ Val QtyIssued As Integer, ByVal QtyBa~dulla^@204~ ger, ByVal _Inv_____D_O As String) As~dulla^@204~ ailRow
            Dim rowStockCardD~dulla^@204~ tockCardDetailRow = CType(Me.NewRow,S~dulla^@204~ lRow)
            rowStockCardDetail~dulla^@204~  = New Object() {InvoiceNo, DateOfSal~dulla^@204~ o, DateRecieved, Packaging, QtyReciev~dulla^@204~ , QtyBalance, _Inv_____D_O}
        ~dulla^@204~ dd(rowStockCardDetailRow)
          ~dulla^@204~ tockCardDetailRow
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Functio~dulla^@204~ ceNoDateOfSale(ByVal InvoiceNo As Str~dulla^@204~ teOfSale As Date) As StockCardDetailRow
            Return CType(Me.Rows.Find(~dulla^@204~ {InvoiceNo, DateOfSale}),StockCardDet~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Overridable Function GetEnumer~dulla^@204~ tem.Collections.IEnumerator Implement~dulla^@204~ ections.IEnumerable.GetEnumerator
  ~dulla^@204~ urn Me.Rows.GetEnumerator
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ nction Clone() As System.Data.DataTab~dulla^@204~    Dim cln As StockCardDetailDataTabl~dulla^@204~ ase.Clone,StockCardDetailDataTable)
~dulla^@204~ ln.InitVars
            Return cln
~dulla^@204~ unction
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~  Overrides Function CreateInstance() ~dulla^@204~ a.DataTable
            Return New S~dulla^@204~ lDataTable
        End Function
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Friend Sub InitVars()~dulla^@204~  Me.columnInvoiceNo = MyBase.Columns(~dulla^@204~ 
            Me.columnDateOfSale = My~dulla^@204~ "DateOfSale")
            Me.columnS~dulla^@204~ MyBase.Columns("StockCardNo")
      ~dulla^@204~ mnDateRecieved = MyBase.Columns("Date~dulla^@204~            Me.columnPackaging = MyBas~dulla^@204~ ckaging")
            Me.columnQtyRe~dulla^@204~ se.Columns("QtyRecieved")
          ~dulla^@204~ yIssued = MyBase.Columns("QtyIssued")~dulla^@204~  Me.columnQtyBalance = MyBase.Columns~dulla^@204~ )
            Me._columnInv_____D_O ~dulla^@204~ mns("Inv_ &_ D_O")
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Private Sub InitCl~dulla^@204~       Me.columnInvoiceNo = New System~dulla^@204~ umn("InvoiceNo", GetType(String), Not~dulla^@204~ Data.MappingType.Element)
          ~dulla^@204~ mns.Add(Me.columnInvoiceNo)
        ~dulla^@204~ DateOfSale = New System.Data.DataColu~dulla^@204~ e", GetType(Date), Nothing, System.Da~dulla^@204~ e.Element)
            MyBase.Column~dulla^@204~ mnDateOfSale)
            Me.columnS~dulla^@204~ New System.Data.DataColumn("StockCard~dulla^@204~ String), Nothing, System.Data.Mapping~dulla^@204~ 
            MyBase.Columns.Add(Me.c~dulla^@204~ dNo)
            Me.columnDateReciev~dulla^@204~ em.Data.DataColumn("DateRecieved", Ge~dulla^@204~ Nothing, System.Data.MappingType.Elem~dulla^@204~      MyBase.Columns.Add(Me.columnDate~dulla^@204~           Me.columnPackaging = New Sy~dulla^@204~ aColumn("Packaging", GetType(String),~dulla^@204~ tem.Data.MappingType.Element)
      ~dulla^@204~ Columns.Add(Me.columnPackaging)
    ~dulla^@204~ lumnQtyRecieved = New System.Data.Dat~dulla^@204~ ecieved", GetType(Integer), Nothing, ~dulla^@204~ appingType.Element)
            MyBa~dulla^@204~ d(Me.columnQtyRecieved)
            ~dulla^@204~ ssued = New System.Data.DataColumn("Q~dulla^@204~ tType(Integer), Nothing, System.Data.~dulla^@204~ lement)
            MyBase.Columns.A~dulla^@204~ tyIssued)
            Me.columnQtyBa~dulla^@204~ ystem.Data.DataColumn("QtyBalance", G~dulla^@204~ r), Nothing, System.Data.MappingType.~dulla^@204~          MyBase.Columns.Add(Me.column~dulla^@204~             Me._columnInv_____D_O = N~dulla^@204~ a.DataColumn("Inv_ &_ D_O", GetType(S~dulla^@204~ ng, System.Data.MappingType.Element)~dulla^@204~ Me._columnInv_____D_O.ExtendedPropert~dulla^@204~ rator_ColumnPropNameInRow", "_Inv____~dulla^@204~        Me._columnInv_____D_O.Extended~dulla^@204~ d("Generator_ColumnPropNameInTable", ~dulla^@204~ Column")
            Me._columnInv__~dulla^@204~ edProperties.Add("Generator_ColumnVar~dulla^@204~  "_columnInv_____D_O")
            M~dulla^@204~ ____D_O.ExtendedProperties.Add("Gener~dulla^@204~ mnName", "Inv_ &_ D_O")
            ~dulla^@204~ s.Add(Me._columnInv_____D_O)
       ~dulla^@204~ raints.Add(New System.Data.UniqueCons~dulla^@204~ raint1", New System.Data.DataColumn()~dulla^@204~ voiceNo, Me.columnDateOfSale}, true))~dulla^@204~  Me.columnInvoiceNo.AllowDBNull = fal~dulla^@204~    Me.columnInvoiceNo.MaxLength = 20~dulla^@204~ Me.columnDateOfSale.AllowDBNull = fal~dulla^@204~    Me.columnStockCardNo.AllowDBNull =~dulla^@204~        Me.columnStockCardNo.MaxLength~dulla^@204~       Me.columnDateRecieved.AllowDBNu~dulla^@204~            Me.columnPackaging.AllowDB~dulla^@204~ 
            Me.columnPackaging.MaxLe~dulla^@204~           Me.columnQtyBalance.AllowDB~dulla^@204~ 
            Me._columnInv_____D_O.Ma~dulla^@204~ 
        End Sub
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Function NewStockCardDetailRow~dulla^@204~ rdDetailRow
            Return CType~dulla^@204~ ockCardDetailRow)
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Protected Over~dulla^@204~ n NewRowFromBuilder(ByVal builder As ~dulla^@204~ ataRowBuilder) As System.Data.DataRow~dulla^@204~  Return New StockCardDetailRow(builde~dulla^@204~ nd Function
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ cted Overrides Function GetRowType() ~dulla^@204~ e
            Return GetType(StockCa~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Protected Overrides Sub OnRowCha~dulla^@204~ As System.Data.DataRowChangeEventArgs~dulla^@204~   MyBase.OnRowChanged(e)
           ~dulla^@204~ StockCardDetailRowChangedEvent) Is No~dulla^@204~                 RaiseEvent StockCardD~dulla^@204~ ed(Me, New StockCardDetailRowChangeEv~dulla^@204~ ow,StockCardDetailRow), e.Action))
 ~dulla^@204~ d If
        End Sub
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Protected Overrides Sub OnRowCha~dulla^@204~  As System.Data.DataRowChangeEventArg~dulla^@204~    MyBase.OnRowChanging(e)
         ~dulla^@204~ e.StockCardDetailRowChangingEvent) Is~dulla^@204~ n
                RaiseEvent StockCa~dulla^@204~ anging(Me, New StockCardDetailRowChan~dulla^@204~ (e.Row,StockCardDetailRow), e.Action)~dulla^@204~   End If
        End Sub
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Protected Overrides Sub OnRo~dulla^@204~ l e As System.Data.DataRowChangeEvent~dulla^@204~       MyBase.OnRowDeleted(e)
       ~dulla^@204~ (Me.StockCardDetailRowDeletedEvent) I~dulla^@204~ en
                RaiseEvent StockC~dulla^@204~ eleted(Me, New StockCardDetailRowChan~dulla^@204~ (e.Row,StockCardDetailRow), e.Action)~dulla^@204~   End If
        End Sub
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Protected Overrides Sub OnRo~dulla^@204~ al e As System.Data.DataRowChangeEven~dulla^@204~        MyBase.OnRowDeleting(e)
     ~dulla^@204~ t (Me.StockCardDetailRowDeletingEvent~dulla^@204~  Then
                RaiseEvent Sto~dulla^@204~ owDeleting(Me, New StockCardDetailRow~dulla^@204~ Type(e.Row,StockCardDetailRow), e.Act~dulla^@204~       End If
        End Sub
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Sub RemoveStockCa~dulla^@204~ yVal row As StockCardDetailRow)
    ~dulla^@204~ ws.Remove(row)
        End Sub
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Shared Function~dulla^@204~ eSchema(ByVal xs As System.Xml.Schema~dulla^@204~ ) As System.Xml.Schema.XmlSchemaCompl~dulla^@204~        Dim type As System.Xml.Schema.~dulla^@204~ lexType = New System.Xml.Schema.XmlSc~dulla^@204~ pe
            Dim sequence As Syste~dulla^@204~ XmlSchemaSequence = New System.Xml.Sc~dulla^@204~ aSequence
            Dim ds As Inve~dulla^@204~ ystemDataSet1 = New InventoryControlS~dulla^@204~ 
            xs.Add(ds.GetSchemaSeri~dulla^@204~           Dim any1 As System.Xml.Sche~dulla^@204~ ny = New System.Xml.Schema.XmlSchemaA~dulla^@204~    any1.Namespace = "http://www.w3.or~dulla^@204~ ema"
            any1.MinOccurs = Ne~dulla^@204~ 
            any1.MaxOccurs = Decimal~dulla^@204~           any1.ProcessContents = Syst~dulla^@204~ .XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
        ~dulla^@204~ As System.Xml.Schema.XmlSchemaAny = N~dulla^@204~ .Schema.XmlSchemaAny
            any~dulla^@204~  "urn:schemas-microsoft-com:xml-diffg~dulla^@204~         any2.MinOccurs = New Decimal(~dulla^@204~    any2.ProcessContents = System.Xml.~dulla^@204~ emaContentProcessing.Lax
           ~dulla^@204~ ms.Add(any2)
            Dim attribu~dulla^@204~ .Xml.Schema.XmlSchemaAttribute = New ~dulla^@204~ hema.XmlSchemaAttribute
            ~dulla^@204~ me = "namespace"
            attribu~dulla^@204~ e = ds.Namespace
            type.At~dulla^@204~ attribute1)
            Dim attribut~dulla^@204~ Xml.Schema.XmlSchemaAttribute = New S~dulla^@204~ ema.XmlSchemaAttribute
            a~dulla^@204~ e = "tableTypeName"
            attr~dulla^@204~ alue = "StockCardDetailDataTable"
  ~dulla^@204~ e.Attributes.Add(attribute2)
       ~dulla^@204~ ticle = sequence
            Return ~dulla^@204~  End Function
    End Class
    
 ~dulla^@204~ deDom.Compiler.GeneratedCodeAttribute~dulla^@204~ .Design.TypedDataSetGenerator", "2.0.~dulla^@204~    System.Serializable(),  _
     Sy~dulla^@204~ alization.XmlSchemaProviderAttribute(~dulla^@204~ eSchema")>  _
    Partial Public Cla~dulla^@204~ taTable
        Inherits System.Data~dulla^@204~        Implements System.Collections.~dulla^@204~         
        Private columnSuppl~dulla^@204~ em.Data.DataColumn
        
       ~dulla^@204~ mnSupplierName As System.Data.DataCol~dulla^@204~ 
        Private columnAddress As Sy~dulla^@204~ aColumn
        
        Private co~dulla^@204~ ystem.Data.DataColumn
        
    ~dulla^@204~ olumnCountry As System.Data.DataColum~dulla^@204~         Private columnPhone As System~dulla^@204~ umn
        
        Private column~dulla^@204~ .Data.DataColumn
        
        P~dulla^@204~ PostalAddress As System.Data.DataColu~dulla^@204~ 
        Private columnWebsite As Sys~dulla^@204~ Column
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~  New()
            MyBase.New
     ~dulla^@204~ leName = "Supplier"
            Me.B~dulla^@204~          Me.InitClass
            Me~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ nd Sub New(ByVal table As System.Data~dulla^@204~             MyBase.New
            M~dulla^@204~  table.TableName
            If (tab~dulla^@204~ ive <> table.DataSet.CaseSensitive) T~dulla^@204~         Me.CaseSensitive = table.Case~dulla^@204~           End If
            If (tab~dulla^@204~ tring <> table.DataSet.Locale.ToStrin~dulla^@204~             Me.Locale = table.Locale~dulla^@204~ End If
            If (table.Namespa~dulla^@204~ ataSet.Namespace) Then
             ~dulla^@204~ ce = table.Namespace
            End~dulla^@204~     Me.Prefix = table.Prefix
       ~dulla^@204~ umCapacity = table.MinimumCapacity
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pr~dulla^@204~ ew(ByVal info As System.Runtime.Seria~dulla^@204~ alizationInfo, ByVal context As Syste~dulla^@204~ ialization.StreamingContext)
       ~dulla^@204~ ew(info, context)
            Me.Ini~dulla^@204~   End Sub
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ ReadOnly Property SupplierIDColumn() ~dulla^@204~ a.DataColumn
            Get
      ~dulla^@204~ urn Me.columnSupplierID
            ~dulla^@204~     End Property
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public ReadOnly Property SupplierName~dulla^@204~ ystem.Data.DataColumn
            Ge~dulla^@204~       Return Me.columnSupplierName
 ~dulla^@204~ d Get
        End Property
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public ReadOnly Property A~dulla^@204~ ) As System.Data.DataColumn
        ~dulla^@204~             Return Me.columnAddress
~dulla^@204~ nd Get
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public ReadOnly Property ~dulla^@204~ As System.Data.DataColumn
          ~dulla^@204~           Return Me.columnCity
     ~dulla^@204~ t
        End Property
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public ReadOnly Property Count~dulla^@204~  System.Data.DataColumn
            ~dulla^@204~         Return Me.columnCountry
    ~dulla^@204~ et
        End Property
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public ReadOnly Property Phon~dulla^@204~ System.Data.DataColumn
            G~dulla^@204~        Return Me.columnPhone
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public ReadOnly Property FaxColu~dulla^@204~ m.Data.DataColumn
            Get
 ~dulla^@204~   Return Me.columnFax
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic ReadOnly Property PostalAddressC~dulla^@204~ stem.Data.DataColumn
            Get~dulla^@204~      Return Me.columnPostalAddress
 ~dulla^@204~ d Get
        End Property
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public ReadOnly Property W~dulla^@204~ ) As System.Data.DataColumn
        ~dulla^@204~             Return Me.columnWebsite
~dulla^@204~ nd Get
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
         System.ComponentModel.Br~dulla^@204~ )>  _
        Public ReadOnly Proper~dulla^@204~  Integer
            Get
          ~dulla^@204~ Me.Rows.Count
            End Get
 ~dulla^@204~ operty
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ ault ReadOnly Property Item(ByVal ind~dulla^@204~ ) As SupplierRow
            Get
  ~dulla^@204~  Return CType(Me.Rows(index),Supplier~dulla^@204~      End Get
        End Property
 ~dulla^@204~     Public Event SupplierRowChanging ~dulla^@204~ wChangeEventHandler
        
      ~dulla^@204~ t SupplierRowChanged As SupplierRowCh~dulla^@204~ ler
        
        Public Event S~dulla^@204~ eting As SupplierRowChangeEventHandle~dulla^@204~         Public Event SupplierRowDelet~dulla^@204~ rRowChangeEventHandler
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Overloads Sub AddSupplie~dulla^@204~ w As SupplierRow)
            Me.Row~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Overloads Function AddSupplierRo~dulla^@204~ ierID As String, ByVal SupplierName A~dulla^@204~ al Address As String, ByVal City As S~dulla^@204~ Country As String, ByVal Phone As Str~dulla^@204~ x As String, ByVal PostalAddress As S~dulla^@204~ Website As String) As SupplierRow
  ~dulla^@204~  rowSupplierRow As SupplierRow = CTyp~dulla^@204~ upplierRow)
            rowSupplierR~dulla^@204~ = New Object() {SupplierID, SupplierN~dulla^@204~  City, Country, Phone, Fax, PostalAdd~dulla^@204~ }
            Me.Rows.Add(rowSupplie~dulla^@204~       Return rowSupplierRow
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ indBySupplierID(ByVal SupplierID As S~dulla^@204~ plierRow
            Return CType(Me~dulla^@204~ w Object() {SupplierID}),SupplierRow)~dulla^@204~  Function
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Overridable Function GetEnumerator() ~dulla^@204~ lections.IEnumerator Implements Syste~dulla^@204~ .IEnumerable.GetEnumerator
         ~dulla^@204~ Rows.GetEnumerator
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Overri~dulla^@204~ Clone() As System.Data.DataTable
   ~dulla^@204~ cln As SupplierDataTable = CType(MyBa~dulla^@204~ lierDataTable)
            cln.InitV~dulla^@204~     Return cln
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected~dulla^@204~ nction CreateInstance() As System.Dat~dulla^@204~             Return New SupplierDataTa~dulla^@204~ End Function
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ nd Sub InitVars()
            Me.col~dulla^@204~  = MyBase.Columns("SupplierID")
    ~dulla^@204~ lumnSupplierName = MyBase.Columns("Su~dulla^@204~ 
            Me.columnAddress = MyBas~dulla^@204~ dress")
            Me.columnCity = ~dulla^@204~ s("City")
            Me.columnCount~dulla^@204~ olumns("Country")
            Me.col~dulla^@204~ Base.Columns("Phone")
            Me~dulla^@204~ MyBase.Columns("Fax")
            Me~dulla^@204~ Address = MyBase.Columns("PostalAddre~dulla^@204~      Me.columnWebsite = MyBase.Column~dulla^@204~ 
        End Sub
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Private Sub InitClass()
            ~dulla^@204~ lierID = New System.Data.DataColumn("~dulla^@204~ GetType(String), Nothing, System.Data~dulla^@204~ Element)
            MyBase.Columns.~dulla^@204~ SupplierID)
            Me.columnSup~dulla^@204~ ew System.Data.DataColumn("SupplierNa~dulla^@204~ String), Nothing, System.Data.Mapping~dulla^@204~ 
            MyBase.Columns.Add(Me.c~dulla^@204~ Name)
            Me.columnAddress =~dulla^@204~ ata.DataColumn("Address", GetType(Str~dulla^@204~ , System.Data.MappingType.Element)
 ~dulla^@204~ Base.Columns.Add(Me.columnAddress)
 ~dulla^@204~ .columnCity = New System.Data.DataCol~dulla^@204~ etType(String), Nothing, System.Data.~dulla^@204~ lement)
            MyBase.Columns.A~dulla^@204~ ity)
            Me.columnCountry = ~dulla^@204~ ta.DataColumn("Country", GetType(Stri~dulla^@204~  System.Data.MappingType.Element)
  ~dulla^@204~ ase.Columns.Add(Me.columnCountry)
  ~dulla^@204~ columnPhone = New System.Data.DataCol~dulla^@204~ GetType(String), Nothing, System.Data~dulla^@204~ Element)
            MyBase.Columns.~dulla^@204~ Phone)
            Me.columnFax = Ne~dulla^@204~ .DataColumn("Fax", GetType(String), N~dulla^@204~ m.Data.MappingType.Element)
        ~dulla^@204~ lumns.Add(Me.columnFax)
            ~dulla^@204~ alAddress = New System.Data.DataColum~dulla^@204~ ess", GetType(String), Nothing, Syste~dulla^@204~ gType.Element)
            MyBase.Co~dulla^@204~ columnPostalAddress)
            Me.~dulla^@204~  = New System.Data.DataColumn("Websit~dulla^@204~ tring), Nothing, System.Data.MappingT~dulla^@204~ 
            MyBase.Columns.Add(Me.co~dulla^@204~ 
            Me.Constraints.Add(New S~dulla^@204~ iqueConstraint("Constraint1", New Sys~dulla^@204~ Column() {Me.columnSupplierID}, true)~dulla^@204~   Me.columnSupplierID.AllowDBNull = f~dulla^@204~      Me.columnSupplierID.Unique = tru~dulla^@204~   Me.columnSupplierID.MaxLength = 50~dulla^@204~ Me.columnSupplierName.AllowDBNull = f~dulla^@204~      Me.columnSupplierName.MaxLength ~dulla^@204~      Me.columnAddress.MaxLength = 10~dulla^@204~ Me.columnCity.MaxLength = 20
       ~dulla^@204~ nCountry.MaxLength = 20
            ~dulla^@204~ e.MaxLength = 15
            Me.colu~dulla^@204~ Null = false
            Me.columnFa~dulla^@204~  15
            Me.columnPostalAddre~dulla^@204~ l = false
            Me.columnPosta~dulla^@204~ ength = 10
            Me.columnWebs~dulla^@204~ ll = false
            Me.columnWebs~dulla^@204~  = 20
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Function NewSupplierRow(~dulla^@204~ Row
            Return CType(Me.NewR~dulla^@204~ w)
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Protected Overrides Function ~dulla^@204~ lder(ByVal builder As System.Data.Dat~dulla^@204~ As System.Data.DataRow
            R~dulla^@204~ plierRow(builder)
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Protected Over~dulla^@204~ n GetRowType() As System.Type
      ~dulla^@204~ GetType(SupplierRow)
        End Fun~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Protected O~dulla^@204~ OnRowChanged(ByVal e As System.Data.D~dulla^@204~ ventArgs)
            MyBase.OnRowCh~dulla^@204~          If (Not (Me.SupplierRowChang~dulla^@204~ othing) Then
                RaiseEv~dulla^@204~ owChanged(Me, New SupplierRowChangeEv~dulla^@204~ ow,SupplierRow), e.Action))
        ~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ otected Overrides Sub OnRowChanging(B~dulla^@204~ tem.Data.DataRowChangeEventArgs)
   ~dulla^@204~ se.OnRowChanging(e)
            If (~dulla^@204~ ierRowChangingEvent) Is Nothing) Then~dulla^@204~      RaiseEvent SupplierRowChanging(M~dulla^@204~ erRowChangeEvent(CType(e.Row,Supplier~dulla^@204~ n))
            End If
        End ~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Protected Ove~dulla^@204~ RowDeleted(ByVal e As System.Data.Dat~dulla^@204~ ntArgs)
            MyBase.OnRowDele~dulla^@204~        If (Not (Me.SupplierRowDeleted~dulla^@204~ hing) Then
                RaiseEven~dulla^@204~ Deleted(Me, New SupplierRowChangeEven~dulla^@204~ ,SupplierRow), e.Action))
          ~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ected Overrides Sub OnRowDeleting(ByV~dulla^@204~ m.Data.DataRowChangeEventArgs)
     ~dulla^@204~ .OnRowDeleting(e)
            If (No~dulla^@204~ rRowDeletingEvent) Is Nothing) Then
~dulla^@204~    RaiseEvent SupplierRowDeleting(Me,~dulla^@204~ RowChangeEvent(CType(e.Row,SupplierRo~dulla^@204~ )
            End If
        End Su~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Sub Remo~dulla^@204~ (ByVal row As SupplierRow)
         ~dulla^@204~ move(row)
        End Sub
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Shared Function GetT~dulla^@204~ ma(ByVal xs As System.Xml.Schema.XmlS~dulla^@204~ System.Xml.Schema.XmlSchemaComplexTyp~dulla^@204~   Dim type As System.Xml.Schema.XmlSc~dulla^@204~ pe = New System.Xml.Schema.XmlSchemaC~dulla^@204~            Dim sequence As System.Xml~dulla^@204~ hemaSequence = New System.Xml.Schema.~dulla^@204~ ence
            Dim ds As Inventory~dulla^@204~ DataSet1 = New InventoryControlSystem~dulla^@204~          xs.Add(ds.GetSchemaSerializa~dulla^@204~      Dim any1 As System.Xml.Schema.Xm~dulla^@204~ New System.Xml.Schema.XmlSchemaAny
 ~dulla^@204~ y1.Namespace = "http://www.w3.org/200~dulla^@204~ 
            any1.MinOccurs = New Dec~dulla^@204~         any1.MaxOccurs = Decimal.MaxV~dulla^@204~      any1.ProcessContents = System.Xm~dulla^@204~ chemaContentProcessing.Lax
         ~dulla^@204~ tems.Add(any1)
            Dim any2 ~dulla^@204~ .Schema.XmlSchemaAny = New System.Xml~dulla^@204~ hemaAny
            any2.Namespace =~dulla^@204~ -microsoft-com:xml-diffgram-v1"
    ~dulla^@204~ MinOccurs = New Decimal(1)
         ~dulla^@204~ ssContents = System.Xml.Schema.XmlSch~dulla^@204~ cessing.Lax
            sequence.Ite~dulla^@204~ 
            Dim attribute1 As System~dulla^@204~ mlSchemaAttribute = New System.Xml.Sc~dulla^@204~ aAttribute
            attribute1.Na~dulla^@204~ ce"
            attribute1.FixedValu~dulla^@204~ ace
            type.Attributes.Add(~dulla^@204~             Dim attribute2 As System.~dulla^@204~ lSchemaAttribute = New System.Xml.Sch~dulla^@204~ Attribute
            attribute2.Nam~dulla^@204~ eName"
            attribute2.FixedV~dulla^@204~ ierDataTable"
            type.Attri~dulla^@204~ ribute2)
            type.Particle =~dulla^@204~           Return type
        End Fu~dulla^@204~ nd Class
    
    <System.CodeDom.C~dulla^@204~ atedCodeAttribute("System.Data.Design~dulla^@204~ Generator", "2.0.0.0")>  _
    Parti~dulla^@204~ ss CompanyInfoRow
        Inherits S~dulla^@204~ taRow
        
        Private tabl~dulla^@204~ As CompanyInfoDataTable
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal r~dulla^@204~ ata.DataRowBuilder)
            MyBa~dulla^@204~            Me.tableCompanyInfo = CTyp~dulla^@204~ mpanyInfoDataTable)
        End Sub~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Property C~dulla^@204~ As String
            Get
         ~dulla^@204~  CType(Me(Me.tableCompanyInfo.Company~dulla^@204~ tring)
            End Get
        ~dulla^@204~             Me(Me.tableCompanyInfo.Co~dulla^@204~ mn) = value
            End Set
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ rty Address() As String
            ~dulla^@204~         Return CType(Me(Me.tableCompa~dulla^@204~ sColumn),String)
            End Get~dulla^@204~  Set
                Me(Me.tableComp~dulla^@204~ ssColumn) = value
            End Se~dulla^@204~ d Property
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Property City() As String
         ~dulla^@204~            Return CType(Me(Me.tableCo~dulla^@204~ yColumn),String)
            End Get~dulla^@204~  Set
                Me(Me.tableComp~dulla^@204~ olumn) = value
            End Set
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ operty Country() As String
         ~dulla^@204~            Return CType(Me(Me.tableCo~dulla^@204~ ntryColumn),String)
            End ~dulla^@204~     Set
                Me(Me.tableC~dulla^@204~ untryColumn) = value
            End~dulla^@204~  End Property
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Property Tel() As String
       ~dulla^@204~              Try 
                  ~dulla^@204~ e(Me(Me.tableCompanyInfo.TelColumn),S~dulla^@204~            Catch e As System.InvalidC~dulla^@204~ 
                    Throw New System~dulla^@204~ ypingException("The value for column ~dulla^@204~ e 'CompanyInfo' is DBNull.", e)
    ~dulla^@204~ nd Try
            End Get
        ~dulla^@204~             Me(Me.tableCompanyInfo.Te~dulla^@204~ lue
            End Set
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ ) As String
            Get
       ~dulla^@204~ 
                    Return CType(Me~dulla^@204~ anyInfo.FaxColumn),String)
         ~dulla^@204~ e As System.InvalidCastException
   ~dulla^@204~     Throw New System.Data.StrongTypin~dulla^@204~ he value for column 'Fax' in table 'C~dulla^@204~ s DBNull.", e)
                End T~dulla^@204~    End Get
            Set
        ~dulla^@204~ .tableCompanyInfo.FaxColumn) = value~dulla^@204~ End Set
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Property PostalAd~dulla^@204~ ring
            Get
              ~dulla^@204~                Return CType(Me(Me.tab~dulla^@204~ .PostalAddressColumn),String)
      ~dulla^@204~ ch e As System.InvalidCastException
~dulla^@204~        Throw New System.Data.StrongTy~dulla^@204~ ("The value for column 'PostalAddress~dulla^@204~ ompanyInfo' is DBNull.", e)
        ~dulla^@204~ ry
            End Get
            ~dulla^@204~         Me(Me.tableCompanyInfo.Postal~dulla^@204~ ) = value
            End Set
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y Email() As String
            Get~dulla^@204~     Try 
                    Return ~dulla^@204~ ableCompanyInfo.EmailColumn),String)~dulla^@204~     Catch e As System.InvalidCastExce~dulla^@204~               Throw New System.Data.S~dulla^@204~ ception("The value for column 'Email'~dulla^@204~ mpanyInfo' is DBNull.", e)
         ~dulla^@204~ y
            End Get
            S~dulla^@204~        Me(Me.tableCompanyInfo.EmailCo~dulla^@204~ 
            End Set
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Pro~dulla^@204~ VATRegNo() As Date
            Get
~dulla^@204~    Return CType(Me(Me.tableCompanyInf~dulla^@204~ egNoColumn),Date)
            End Ge~dulla^@204~   Set
                Me(Me.tableCom~dulla^@204~ antVATRegNoColumn) = value
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Property CompanyTINNo() As ~dulla^@204~        Get
                Return CT~dulla^@204~ leCompanyInfo.CompanyTINNoColumn),Str~dulla^@204~      End Get
            Set
      ~dulla^@204~ Me.tableCompanyInfo.CompanyTINNoColum~dulla^@204~            End Set
        End Prope~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Proper~dulla^@204~ eOfReg() As Date
            Get
  ~dulla^@204~  Return CType(Me(Me.tableCompanyInfo.~dulla^@204~ RegColumn),Date)
            End Get~dulla^@204~  Set
                Me(Me.tableComp~dulla^@204~ nyDateOfRegColumn) = value
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Function IsTelNull() As Boo~dulla^@204~      Return Me.IsNull(Me.tableCompany~dulla^@204~ n)
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public Sub SetTelNull()
    ~dulla^@204~ .tableCompanyInfo.TelColumn) = System~dulla^@204~ ll
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Function IsFaxNull() As Boo~dulla^@204~      Return Me.IsNull(Me.tableCompany~dulla^@204~ n)
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public Sub SetFaxNull()
    ~dulla^@204~ .tableCompanyInfo.FaxColumn) = System~dulla^@204~ ll
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Function IsPostalAddressNul~dulla^@204~ n
            Return Me.IsNull(Me.ta~dulla^@204~ o.PostalAddressColumn)
        End F~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Su~dulla^@204~ dressNull()
            Me(Me.tableC~dulla^@204~ stalAddressColumn) = System.Convert.D~dulla^@204~   End Sub
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Function IsEmailNull() As Boolean
  ~dulla^@204~ urn Me.IsNull(Me.tableCompanyInfo.Ema~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Sub SetEmailNull()
        ~dulla^@204~ leCompanyInfo.EmailColumn) = System.C~dulla^@204~ 
        End Sub
    End Class
   ~dulla^@204~ m.CodeDom.Compiler.GeneratedCodeAttri~dulla^@204~ Data.Design.TypedDataSetGenerator", "~dulla^@204~ 
    Partial Public Class CustomerRo~dulla^@204~ herits System.Data.DataRow
        ~dulla^@204~ ate tableCustomer As CustomerDataTabl~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Friend Sub New(~dulla^@204~ ystem.Data.DataRowBuilder)
         ~dulla^@204~ (rb)
            Me.tableCustomer = ~dulla^@204~ e,CustomerDataTable)
        End Sub~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Property ~dulla^@204~ As String
            Get
         ~dulla^@204~  CType(Me(Me.tableCustomer.CustomerID~dulla^@204~ g)
            End Get
            ~dulla^@204~         Me(Me.tableCustomer.CustomerI~dulla^@204~ lue
            End Set
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ omerName() As String
            Get~dulla^@204~      Try 
                    Return~dulla^@204~ tableCustomer.CustomerNameColumn),Str~dulla^@204~          Catch e As System.InvalidCas~dulla^@204~                    Throw New System.D~dulla^@204~ ingException("The value for column 'C~dulla^@204~ in table 'Customer' is DBNull.", e)
~dulla^@204~    End Try
            End Get
    ~dulla^@204~                 Me(Me.tableCustomer.CustomerNameColumn) = value
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Property Address() As String
  ~dulla^@204~ 
                Return CType(Me(Me.~dulla^@204~ .AddressColumn),String)
            ~dulla^@204~         Set
                Me(Me.ta~dulla^@204~ ddressColumn) = value
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Property City() As String
     ~dulla^@204~                Return CType(Me(Me.tab~dulla^@204~ tyColumn),String)
            End Ge~dulla^@204~   Set
                Me(Me.tableCus~dulla^@204~ umn) = value
            End Set
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ erty Country() As String
           ~dulla^@204~          Return CType(Me(Me.tableCust~dulla^@204~ olumn),String)
            End Get
~dulla^@204~ et
                Me(Me.tableCustom~dulla^@204~ umn) = value
            End Set
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ erty Tel() As String
            Get~dulla^@204~      Return CType(Me(Me.tableCustomer~dulla^@204~ tring)
            End Get
        ~dulla^@204~             Me(Me.tableCustomer.TelCo~dulla^@204~ 
            End Set
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Pro~dulla^@204~ s String
            Get
          ~dulla^@204~ CType(Me(Me.tableCustomer.FaxColumn),~dulla^@204~         End Get
            Set
   ~dulla^@204~ Me(Me.tableCustomer.FaxColumn) = valu~dulla^@204~   End Set
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Property Postal~dulla^@204~ String
            Get
            ~dulla^@204~ ype(Me(Me.tableCustomer.PostalAddress~dulla^@204~ g)
            End Get
            ~dulla^@204~         Me(Me.tableCustomer.PostalAdd~dulla^@204~  value
            End Set
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ mail() As String
            Get
  ~dulla^@204~  Return CType(Me(Me.tableCustomer.Ema~dulla^@204~ ing)
            End Get
          ~dulla^@204~           Me(Me.tableCustomer.EmailCo~dulla^@204~ 
            End Set
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Pro~dulla^@204~ rVATRegNo() As String
            Ge~dulla^@204~       Try 
                    Retur~dulla^@204~ .tableCustomer.CustomerVATRegNoColumn~dulla^@204~               Catch e As System.Inval~dulla^@204~ on
                    Throw New Sys~dulla^@204~ ngTypingException("The value for colu~dulla^@204~ ATRegNo' in table 'Customer' is DBNul~dulla^@204~             End Try
            End ~dulla^@204~     Set
                Me(Me.tableC~dulla^@204~ merVATRegNoColumn) = value
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Property CustomerTINNo() As~dulla^@204~         Get
                Try 
  ~dulla^@204~      Return CType(Me(Me.tableCustomer~dulla^@204~ oColumn),String)
                Cat~dulla^@204~ m.InvalidCastException
             ~dulla^@204~ New System.Data.StrongTypingException~dulla^@204~ or column 'CustomerTINNo' in table 'C~dulla^@204~ BNull.", e)
                End Try~dulla^@204~ End Get
            Set
           ~dulla^@204~ bleCustomer.CustomerTINNoColumn) = va~dulla^@204~     End Set
        End Property
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Property Cust~dulla^@204~ () As Date
            Get
        ~dulla^@204~ 
                    Return CType(Me(~dulla^@204~ mer.CustomerDateOfRegColumn),Date)
 ~dulla^@204~   Catch e As System.InvalidCastExcept~dulla^@204~             Throw New System.Data.Str~dulla^@204~ ption("The value for column 'Customer~dulla^@204~  table 'Customer' is DBNull.", e)
  ~dulla^@204~  End Try
            End Get
      ~dulla^@204~               Me(Me.tableCustomer.Cus~dulla^@204~ gColumn) = value
            End Set~dulla^@204~  Property
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Property ProductDateOfSupply() As Dat~dulla^@204~   Get
                Try 
        ~dulla^@204~ eturn CType(Me(Me.tableCustomer.Produ~dulla^@204~ yColumn),Date)
                Catch~dulla^@204~ InvalidCastException
               ~dulla^@204~ w System.Data.StrongTypingException("~dulla^@204~  column 'ProductDateOfSupply' in tabl~dulla^@204~ is DBNull.", e)
                End ~dulla^@204~     End Get
            Set
       ~dulla^@204~ e.tableCustomer.ProductDateOfSupplyCo~dulla^@204~ 
            End Set
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Fun~dulla^@204~ merNameNull() As Boolean
           ~dulla^@204~ Null(Me.tableCustomer.CustomerNameCol~dulla^@204~  End Function
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Sub SetCustomerNameNull()
      ~dulla^@204~ ableCustomer.CustomerNameColumn) = Sy~dulla^@204~ DBNull
        End Sub
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Function IsCustomerVATR~dulla^@204~  Boolean
            Return Me.IsNul~dulla^@204~ tomer.CustomerVATRegNoColumn)
      ~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~ ustomerVATRegNoNull()
            Me~dulla^@204~ omer.CustomerVATRegNoColumn) = System~dulla^@204~ ll
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Function IsCustomerTINNoNul~dulla^@204~ n
            Return Me.IsNull(Me.ta~dulla^@204~ ustomerTINNoColumn)
        End Func~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Sub S~dulla^@204~ NoNull()
            Me(Me.tableCust~dulla^@204~ TINNoColumn) = System.Convert.DBNull~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ on IsCustomerDateOfRegNull() As Boole~dulla^@204~    Return Me.IsNull(Me.tableCustomer.~dulla^@204~ fRegColumn)
        End Function
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Sub SetCustom~dulla^@204~ ll()
            Me(Me.tableCustomer~dulla^@204~ OfRegColumn) = System.Convert.DBNull~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ on IsProductDateOfSupplyNull() As Boo~dulla^@204~      Return Me.IsNull(Me.tableCustome~dulla^@204~ OfSupplyColumn)
        End Function~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Sub SetPr~dulla^@204~ pplyNull()
            Me(Me.tableCu~dulla^@204~ tDateOfSupplyColumn) = System.Convert~dulla^@204~     End Sub
    End Class
    
   ~dulla^@204~ Dom.Compiler.GeneratedCodeAttribute("~dulla^@204~ esign.TypedDataSetGenerator", "2.0.0.~dulla^@204~ Partial Public Class InvoiceRow
    ~dulla^@204~ System.Data.DataRow
        
      ~dulla^@204~ leInvoice As InvoiceDataTable
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Friend Sub New(ByVal rb ~dulla^@204~ a.DataRowBuilder)
            MyBase~dulla^@204~          Me.tableInvoice = CType(Me.T~dulla^@204~ ataTable)
        End Sub
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Property InvoiceNo()~dulla^@204~            Get
                Retur~dulla^@204~ .tableInvoice.InvoiceNoColumn),String~dulla^@204~   End Get
            Set
         ~dulla^@204~ tableInvoice.InvoiceNoColumn) = value~dulla^@204~  End Set
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Property _Date() As Date
            Get
               ~dulla^@204~ (Me(Me.tableInvoice.DateColumn),Date)~dulla^@204~  End Get
            Set
          ~dulla^@204~ ableInvoice.DateColumn) = value
    ~dulla^@204~ et
        End Property
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public Property TotalAmount()~dulla^@204~             Get
                Retu~dulla^@204~ e.tableInvoice.TotalAmountColumn),Int~dulla^@204~       End Get
            Set
     ~dulla^@204~ (Me.tableInvoice.TotalAmountColumn) =~dulla^@204~        End Set
        End Property~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Property F~dulla^@204~ ) As Integer
            Get
      ~dulla^@204~  
                    Return CType(M~dulla^@204~ oice.FrieghtChargeColumn),Integer)
 ~dulla^@204~   Catch e As System.InvalidCastExcept~dulla^@204~             Throw New System.Data.Str~dulla^@204~ ption("The value for column 'FrieghtC~dulla^@204~ le 'Invoice' is DBNull.", e)
       ~dulla^@204~ Try
            End Get
           ~dulla^@204~          Me(Me.tableInvoice.FrieghtCh~dulla^@204~  value
            End Set
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ iscellaneousCost() As Integer
      ~dulla^@204~               Try 
                 ~dulla^@204~ pe(Me(Me.tableInvoice.MiscellaneousCo~dulla^@204~ eger)
                Catch e As Sys~dulla^@204~ stException
                    Thro~dulla^@204~ Data.StrongTypingException("The value~dulla^@204~ MiscellaneousCost' in table 'Invoice'~dulla^@204~  e)
                End Try
       ~dulla^@204~ 
            Set
                Me(~dulla^@204~ ce.MiscellaneousCostColumn) = value
~dulla^@204~ nd Set
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Property TotalPurc~dulla^@204~ As Integer
            Get
        ~dulla^@204~ n CType(Me(Me.tableInvoice.TotalPurch~dulla^@204~ mn),Integer)
            End Get
  ~dulla^@204~ 
                Me(Me.tableInvoice.~dulla^@204~ AmountColumn) = value
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Function IsFrieghtChargeNull() A~dulla^@204~           Return Me.IsNull(Me.tableIn~dulla^@204~ ChargeColumn)
        End Function
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Sub SetFrie~dulla^@204~ ()
            Me(Me.tableInvoice.Fr~dulla^@204~ lumn) = System.Convert.DBNull
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ scellaneousCostNull() As Boolean
   ~dulla^@204~ rn Me.IsNull(Me.tableInvoice.Miscella~dulla^@204~ mn)
        End Function
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Sub SetMiscellaneousC~dulla^@204~           Me(Me.tableInvoice.Miscella~dulla^@204~ mn) = System.Convert.DBNull
        ~dulla^@204~ End Class
    
    <System.CodeDom.~dulla^@204~ ratedCodeAttribute("System.Data.Desig~dulla^@204~ tGenerator", "2.0.0.0")>  _
    Part~dulla^@204~ ass OrderRow
        Inherits System~dulla^@204~ 
        
        Private tableOrde~dulla^@204~ aTable
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~  New(ByVal rb As System.Data.DataRowB~dulla^@204~         MyBase.New(rb)
            M~dulla^@204~ = CType(Me.Table,OrderDataTable)
   ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ rderNo() As String
            Get
~dulla^@204~    Return CType(Me(Me.tableOrder.Orde~dulla^@204~ ring)
            End Get
         ~dulla^@204~            Me(Me.tableOrder.OrderNoCo~dulla^@204~ 
            End Set
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Pro~dulla^@204~ ) As String
            Get
       ~dulla^@204~ rn CType(Me(Me.tableOrder.PartNoColum~dulla^@204~            End Get
            Set
~dulla^@204~    Me(Me.tableOrder.PartNoColumn) = v~dulla^@204~      End Set
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public Property Des~dulla^@204~  String
            Get
           ~dulla^@204~ Type(Me(Me.tableOrder.DescriptionColu~dulla^@204~             End Get
            Set~dulla^@204~     Me(Me.tableOrder.DescriptionColum~dulla^@204~            End Set
        End Prope~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Proper~dulla^@204~  As Integer
            Get
       ~dulla^@204~ rn CType(Me(Me.tableOrder.QuantityCol~dulla^@204~ 
            End Get
            Se~dulla^@204~       Me(Me.tableOrder.QuantityColumn~dulla^@204~           End Set
        End Proper~dulla^@204~ lass
    
    <System.CodeDom.Compi~dulla^@204~ CodeAttribute("System.Data.Design.Typ~dulla^@204~ rator", "2.0.0.0")>  _
    Partial P~dulla^@204~ roductInfoRow
        Inherits Syste~dulla^@204~ w
        
        Private tablePro~dulla^@204~ roductInfoDataTable
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Friend Sub New(ByVal rb As System.~dulla^@204~ uilder)
            MyBase.New(rb)
~dulla^@204~ e.tableProductInfo = CType(Me.Table,P~dulla^@204~ aTable)
        End Sub
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public Property PartNo() As S~dulla^@204~       Get
                Return CTy~dulla^@204~ eProductInfo.PartNoColumn),String)
 ~dulla^@204~ d Get
            Set
             ~dulla^@204~ eProductInfo.PartNoColumn) = value
 ~dulla^@204~ d Set
        End Property
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Property ProductNam~dulla^@204~ 
            Get
                Re~dulla^@204~ (Me.tableProductInfo.ProductNameColum~dulla^@204~            End Get
            Set
~dulla^@204~    Me(Me.tableProductInfo.ProductName~dulla^@204~ ue
            End Set
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public P~dulla^@204~ () As String
            Get
      ~dulla^@204~ urn CType(Me(Me.tableProductInfo.Bran~dulla^@204~ ng)
            End Get
           ~dulla^@204~          Me(Me.tableProductInfo.Brand~dulla^@204~ ue
            End Set
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public P~dulla^@204~ n() As String
            Get
     ~dulla^@204~ turn CType(Me(Me.tableProductInfo.Ori~dulla^@204~ ring)
            End Get
         ~dulla^@204~            Me(Me.tableProductInfo.Ori~dulla^@204~ value
            End Set
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ itPrice() As Double
            Get~dulla^@204~     Return CType(Me(Me.tableProductIn~dulla^@204~ olumn),Double)
            End Get
~dulla^@204~ et
                Me(Me.tableProduc~dulla^@204~ ceColumn) = value
            End Se~dulla^@204~ d Property
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Property SellingPrice1() As Double
~dulla^@204~ et
                Return CType(Me(M~dulla^@204~ tInfo.SellingPrice1Column),Double)
 ~dulla^@204~ d Get
            Set
             ~dulla^@204~ eProductInfo.SellingPrice1Column) = v~dulla^@204~      End Set
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public Property Sel~dulla^@204~ As Double
            Get
         ~dulla^@204~  CType(Me(Me.tableProductInfo.Selling~dulla^@204~ ,Double)
            End Get
      ~dulla^@204~               Me(Me.tableProductInfo.~dulla^@204~ Column) = value
            End Set~dulla^@204~ Property
    End Class
    
    <S~dulla^@204~ .Compiler.GeneratedCodeAttribute("Sys~dulla^@204~ gn.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProductsRow~dulla^@204~ erits System.Data.DataRow
        
~dulla^@204~ te tableProducts As ProductsDataTable~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Friend Sub New(B~dulla^@204~ stem.Data.DataRowBuilder)
          ~dulla^@204~ rb)
            Me.tableProducts = C~dulla^@204~ ,ProductsDataTable)
        End Sub~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Property P~dulla^@204~ ring
            Get
              ~dulla^@204~ e(Me(Me.tableProducts.PartNoColumn),S~dulla^@204~        End Get
            Set
    ~dulla^@204~ e(Me.tableProducts.PartNoColumn) = va~dulla^@204~     End Set
        End Property
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Property Prod~dulla^@204~ String
            Get
            ~dulla^@204~ ype(Me(Me.tableProducts.ProductNameCo~dulla^@204~ 
            End Get
            Se~dulla^@204~       Me(Me.tableProducts.ProductName~dulla^@204~ ue
            End Set
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public P~dulla^@204~ () As String
            Get
      ~dulla^@204~ urn CType(Me(Me.tableProducts.BrandCo~dulla^@204~ 
            End Get
            Se~dulla^@204~       Me(Me.tableProducts.BrandColumn~dulla^@204~           End Set
        End Proper~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Propert~dulla^@204~  String
            Get
           ~dulla^@204~                   Return CType(Me(Me.~dulla^@204~ .OriginColumn),String)
             ~dulla^@204~  System.InvalidCastException
       ~dulla^@204~ Throw New System.Data.StrongTypingExc~dulla^@204~ alue for column 'Origin' in table 'Pr~dulla^@204~ Null.", e)
                End Try
~dulla^@204~ nd Get
            Set
            ~dulla^@204~ leProducts.OriginColumn) = value
   ~dulla^@204~ Set
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Property ShelfNo() As~dulla^@204~         Get
                Return C~dulla^@204~ bleProducts.ShelfNoColumn),String)
 ~dulla^@204~ d Get
            Set
             ~dulla^@204~ eProducts.ShelfNoColumn) = value
   ~dulla^@204~ Set
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Property ReorderLevel~dulla^@204~ 
            Get
                Re~dulla^@204~ (Me.tableProducts.ReorderLevelColumn)~dulla^@204~           End Get
            Set
 ~dulla^@204~   Me(Me.tableProducts.ReorderLevelCol~dulla^@204~ 
            End Set
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Prop~dulla^@204~ rice1() As Double
            Get
 ~dulla^@204~   Return CType(Me(Me.tableProducts.Se~dulla^@204~ lumn),Double)
            End Get
 ~dulla^@204~ t
                Me(Me.tableProduct~dulla^@204~ e1Column) = value
            End Se~dulla^@204~ d Property
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Property SellingPrice2() As Double
~dulla^@204~ et
                Try 
           ~dulla^@204~ rn CType(Me(Me.tableProducts.SellingP~dulla^@204~ Double)
                Catch e As S~dulla^@204~ CastException
                    Th~dulla^@204~ m.Data.StrongTypingException("The val~dulla^@204~  'SellingPrice2' in table 'Products' ~dulla^@204~ e)
                End Try
        ~dulla^@204~             Set
                Me(M~dulla^@204~ ts.SellingPrice2Column) = value
    ~dulla^@204~ et
        End Property
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public Property NetWeight() A~dulla^@204~          Get
                Return ~dulla^@204~ ableProducts.NetWeightColumn),Double)~dulla^@204~  End Get
            Set
          ~dulla^@204~ ableProducts.NetWeightColumn) = value~dulla^@204~  End Set
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Function IsOrigi~dulla^@204~ olean
            Return Me.IsNull(M~dulla^@204~ ts.OriginColumn)
        End Functio~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Sub SetO~dulla^@204~             Me(Me.tableProducts.Origi~dulla^@204~ stem.Convert.DBNull
        End Sub~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Function I~dulla^@204~ 2Null() As Boolean
            Retur~dulla^@204~ e.tableProducts.SellingPrice2Column)~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ ub SetSellingPrice2Null()
          ~dulla^@204~ Products.SellingPrice2Column) = Syste~dulla^@204~ ull
        End Sub
    End Class
~dulla^@204~ stem.CodeDom.Compiler.GeneratedCodeAt~dulla^@204~ em.Data.Design.TypedDataSetGenerator"~dulla^@204~   _
    Partial Public Class Product~dulla^@204~ 
        Inherits System.Data.DataRo~dulla^@204~         Private tableProductsAvialabl~dulla^@204~ AvialableDataTable
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Friend Sub New(ByVal rb As System.D~dulla^@204~ ilder)
            MyBase.New(rb)
 ~dulla^@204~ .tableProductsAvialable = CType(Me.Ta~dulla^@204~ vialableDataTable)
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Property Pa~dulla^@204~ ing
            Get
               ~dulla^@204~ (Me(Me.tableProductsAvialable.PartNoC~dulla^@204~ )
            End Get
            S~dulla^@204~        Me(Me.tableProductsAvialable.P~dulla^@204~ = value
            End Set
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ QtyInShop1() As Integer
            ~dulla^@204~         Return CType(Me(Me.tableProdu~dulla^@204~ QtyInShop1Column),Integer)
         ~dulla^@204~            Set
                Me(Me~dulla^@204~ sAvialable.QtyInShop1Column) = value~dulla^@204~ End Set
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Property QtyInSho~dulla^@204~ er
            Get
                ~dulla^@204~ Me(Me.tableProductsAvialable.QtyInSho~dulla^@204~ eger)
            End Get
         ~dulla^@204~            Me(Me.tableProductsAvialab~dulla^@204~ Column) = value
            End Set~dulla^@204~ Property
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ roperty QtyInStore() As Integer
    ~dulla^@204~                 Return CType(Me(Me.ta~dulla^@204~ ialable.QtyInStoreColumn),Integer)
 ~dulla^@204~ d Get
            Set
             ~dulla^@204~ eProductsAvialable.QtyInStoreColumn) ~dulla^@204~         End Set
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Property ~dulla^@204~  Integer
            Get
          ~dulla^@204~ CType(Me(Me.tableProductsAvialable.To~dulla^@204~ ,Integer)
            End Get
     ~dulla^@204~                Me(Me.tableProductsAvi~dulla^@204~ tyColumn) = value
            End Se~dulla^@204~ d Property
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Property Amount() As Integer
      ~dulla^@204~               Return CType(Me(Me.tabl~dulla^@204~ lable.AmountColumn),Integer)
       ~dulla^@204~ 
            Set
                Me(~dulla^@204~ ctsAvialable.AmountColumn) = value
 ~dulla^@204~ d Set
        End Property
    End ~dulla^@204~     <System.CodeDom.Compiler.Generate~dulla^@204~ e("System.Data.Design.TypedDataSetGen~dulla^@204~ .0.0")>  _
    Partial Public Class ~dulla^@204~         Inherits System.Data.DataRow~dulla^@204~       Private tablePurchase As Purcha~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Frien~dulla^@204~ al rb As System.Data.DataRowBuilder)~dulla^@204~ MyBase.New(rb)
            Me.tablePurchase = CType(Me.Table,PurchaseDataTable~dulla^@204~ d Sub
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ erty SupplierID() As String
        ~dulla^@204~             Return CType(Me(Me.tableP~dulla^@204~ ierIDColumn),String)
            End~dulla^@204~      Set
                Me(Me.table~dulla^@204~ lierIDColumn) = value
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Property InvoiceNo() As String
~dulla^@204~ et
                Return CType(Me(M~dulla^@204~ se.InvoiceNoColumn),String)
        ~dulla^@204~             Set
                Me(M~dulla^@204~ se.InvoiceNoColumn) = value
        ~dulla^@204~         End Property
    End Class
~dulla^@204~ stem.CodeDom.Compiler.GeneratedCodeAt~dulla^@204~ em.Data.Design.TypedDataSetGenerator"~dulla^@204~   _
    Partial Public Class Purchas~dulla^@204~      Inherits System.Data.DataRow
  ~dulla^@204~    Private tablePurchaseInfo As Purch~dulla^@204~ ble
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ w(ByVal rb As System.Data.DataRowBuil~dulla^@204~      MyBase.New(rb)
            Me.t~dulla^@204~ nfo = CType(Me.Table,PurchaseInfoData~dulla^@204~    End Sub
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Property PartNo() As String
       ~dulla^@204~              Return CType(Me(Me.table~dulla^@204~ PartNoColumn),String)
            En~dulla^@204~       Set
                Me(Me.tabl~dulla^@204~ .PartNoColumn) = value
            E~dulla^@204~    End Property
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Property Quantity() As Integer~dulla^@204~ Get
                Return CType(Me(~dulla^@204~ aseInfo.QuantityColumn),Integer)
   ~dulla^@204~ Get
            Set
               ~dulla^@204~ urchaseInfo.QuantityColumn) = value
~dulla^@204~ nd Set
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Property Amount() ~dulla^@204~            Get
                Retur~dulla^@204~ .tablePurchaseInfo.AmountColumn),Inte~dulla^@204~      End Get
            Set
      ~dulla^@204~ Me.tablePurchaseInfo.AmountColumn) = ~dulla^@204~       End Set
        End Property
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Property Su~dulla^@204~  String
            Get
           ~dulla^@204~ Type(Me(Me.tablePurchaseInfo.Supplier~dulla^@204~ ing)
            End Get
          ~dulla^@204~           Me(Me.tablePurchaseInfo.Sup~dulla^@204~ ) = value
            End Set
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y InvoiceNo() As String
            ~dulla^@204~         Return CType(Me(Me.tablePurch~dulla^@204~ ceNoColumn),String)
            End ~dulla^@204~     Set
                Me(Me.tableP~dulla^@204~ nvoiceNoColumn) = value
            ~dulla^@204~     End Property
    End Class
    ~dulla^@204~ .CodeDom.Compiler.GeneratedCodeAttrib~dulla^@204~ ata.Design.TypedDataSetGenerator", "2~dulla^@204~ 
    Partial Public Class SalesRow
 ~dulla^@204~ ts System.Data.DataRow
        
   ~dulla^@204~ tableSales As SalesDataTable
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Friend Sub New(ByVal rb A~dulla^@204~ .DataRowBuilder)
            MyBase.~dulla^@204~         Me.tableSales = CType(Me.Tabl~dulla^@204~ ble)
        End Sub
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Property InvoiceNo() As S~dulla^@204~       Get
                Return CTy~dulla^@204~ eSales.InvoiceNoColumn),String)
    ~dulla^@204~ et
            Set
                ~dulla^@204~ les.InvoiceNoColumn) = value
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Property PartNo() As Stri~dulla^@204~    Get
                Return CType(~dulla^@204~ les.PartNoColumn),String)
          ~dulla^@204~           Set
                Me(Me.~dulla^@204~ rtNoColumn) = value
            End ~dulla^@204~ End Property
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic Property _Date() As Date
        ~dulla^@204~             Return CType(Me(Me.tableS~dulla^@204~ mn),Date)
            End Get
     ~dulla^@204~                Me(Me.tableSales.DateC~dulla^@204~ e
            End Set
        End P~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Pr~dulla^@204~ al() As Double
            Get
    ~dulla^@204~ eturn CType(Me(Me.tableSales.SubTotal~dulla^@204~ e)
            End Get
            ~dulla^@204~         Me(Me.tableSales.SubTotalColu~dulla^@204~             End Set
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Prope~dulla^@204~ () As Double
            Get
      ~dulla^@204~ urn CType(Me(Me.tableSales.VATAmountC~dulla^@204~ )
            End Get
            S~dulla^@204~        Me(Me.tableSales.VATAmountColu~dulla^@204~             End Set
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Prope~dulla^@204~ l() As Double
            Get
     ~dulla^@204~ turn CType(Me(Me.tableSales.GrandTota~dulla^@204~ le)
            End Get
           ~dulla^@204~          Me(Me.tableSales.GrandTotalC~dulla^@204~ e
            End Set
        End P~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Pr~dulla^@204~ Payment() As String
            Get~dulla^@204~     Return CType(Me(Me.tableSales.Mod~dulla^@204~ umn),String)
            End Get
  ~dulla^@204~ 
                Me(Me.tableSales.Mo~dulla^@204~ lumn) = value
            End Set
 ~dulla^@204~ operty
    End Class
    
    <Sys~dulla^@204~ ompiler.GeneratedCodeAttribute("Syste~dulla^@204~ .TypedDataSetGenerator", "2.0.0.0")> ~dulla^@204~ al Public Class SalesInfoRow
       ~dulla^@204~ tem.Data.DataRow
        
        P~dulla^@204~ alesInfo As SalesInfoDataTable
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Friend Sub New(ByVal rb~dulla^@204~ ta.DataRowBuilder)
            MyBas~dulla^@204~           Me.tableSalesInfo = CType(M~dulla^@204~ InfoDataTable)
        End Sub
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Property PartNo~dulla^@204~ 
            Get
                Ret~dulla^@204~ Me.tableSalesInfo.PartNoColumn),Strin~dulla^@204~    End Get
            Set
        ~dulla^@204~ .tableSalesInfo.PartNoColumn) = value~dulla^@204~  End Set
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Property Invoice~dulla^@204~ g
            Get
                R~dulla^@204~ e(Me.tableSalesInfo.InvoiceNoColumn),~dulla^@204~         End Get
            Set
   ~dulla^@204~ Me(Me.tableSalesInfo.InvoiceNoColumn)~dulla^@204~          End Set
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Property~dulla^@204~  As String
            Get
        ~dulla^@204~ n CType(Me(Me.tableSalesInfo.Customer~dulla^@204~ ing)
            End Get
          ~dulla^@204~           Me(Me.tableSalesInfo.Custom~dulla^@204~  value
            End Set
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ tockCardNo() As String
            G~dulla^@204~        Return CType(Me(Me.tableSalesI~dulla^@204~ NoColumn),String)
            End Ge~dulla^@204~   Set
                Me(Me.tableSal~dulla^@204~ ardNoColumn) = value
            End~dulla^@204~  End Property
    End Class
    
 ~dulla^@204~ deDom.Compiler.GeneratedCodeAttribute~dulla^@204~ .Design.TypedDataSetGenerator", "2.0.~dulla^@204~   Partial Public Class StockCardRow
        Inherits System.Data.DataRow
    ~dulla^@204~  Private tableStockCard As StockCardD~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Friend S~dulla^@204~ rb As System.Data.DataRowBuilder)
  ~dulla^@204~ ase.New(rb)
            Me.tableStoc~dulla^@204~ (Me.Table,StockCardDataTable)
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ kCardNo() As String
            Get~dulla^@204~     Return CType(Me(Me.tableStockCard~dulla^@204~ olumn),String)
            End Get
~dulla^@204~ et
                Me(Me.tableStockC~dulla^@204~ NoColumn) = value
            End Se~dulla^@204~ d Property
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Property PartNo() As String
       ~dulla^@204~              Return CType(Me(Me.table~dulla^@204~ tNoColumn),String)
            End G~dulla^@204~    Set
                Me(Me.tableSt~dulla^@204~ oColumn) = value
            End Set~dulla^@204~  Property
    End Class
    
    <~dulla^@204~ m.Compiler.GeneratedCodeAttribute("Sy~dulla^@204~ ign.TypedDataSetGenerator", "2.0.0.0"~dulla^@204~ rtial Public Class StockCardDetailRow~dulla^@204~ erits System.Data.DataRow
        
~dulla^@204~ te tableStockCardDetail As StockCardD~dulla^@204~ e
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Fr~dulla^@204~ ByVal rb As System.Data.DataRowBuilde~dulla^@204~    MyBase.New(rb)
            Me.tab~dulla^@204~ tail = CType(Me.Table,StockCardDetail~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Property InvoiceNo() As String
~dulla^@204~ et
                Return CType(Me(M~dulla^@204~ ardDetail.InvoiceNoColumn),String)
 ~dulla^@204~ d Get
            Set
             ~dulla^@204~ eStockCardDetail.InvoiceNoColumn) = v~dulla^@204~      End Set
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public Property Dat~dulla^@204~ Date
            Get
              ~dulla^@204~ e(Me(Me.tableStockCardDetail.DateOfSa~dulla^@204~ e)
            End Get
            ~dulla^@204~         Me(Me.tableStockCardDetail.Da~dulla^@204~ n) = value
            End Set
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ty StockCardNo() As String
         ~dulla^@204~            Return CType(Me(Me.tableSt~dulla^@204~ .StockCardNoColumn),String)
        ~dulla^@204~             Set
                Me(M~dulla^@204~ ardDetail.StockCardNoColumn) = value~dulla^@204~ End Set
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Property DateReci~dulla^@204~ e
            Get
                R~dulla^@204~ e(Me.tableStockCardDetail.DateRecieve~dulla^@204~ )
            End Get
            S~dulla^@204~        Me(Me.tableStockCardDetail.Dat~dulla^@204~ mn) = value
            End Set
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ rty Packaging() As String
          ~dulla^@204~           Return CType(Me(Me.tableSto~dulla^@204~ PackagingColumn),String)
           ~dulla^@204~          Set
                Me(Me.t~dulla^@204~ Detail.PackagingColumn) = value
    ~dulla^@204~ et
        End Property
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public Property QtyRecieved()~dulla^@204~             Get
                Try ~dulla^@204~          Return CType(Me(Me.tableStoc~dulla^@204~ tyRecievedColumn),Integer)
         ~dulla^@204~ e As System.InvalidCastException
   ~dulla^@204~     Throw New System.Data.StrongTypin~dulla^@204~ he value for column 'QtyRecieved' in ~dulla^@204~ ardDetail' is DBNull.", e)
         ~dulla^@204~ y
            End Get
            S~dulla^@204~        Me(Me.tableStockCardDetail.Qty~dulla^@204~ n) = value
            End Set
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ty QtyIssued() As Integer
          ~dulla^@204~           Try 
                    R~dulla^@204~ e(Me.tableStockCardDetail.QtyIssuedCo~dulla^@204~ )
                Catch e As System.~dulla^@204~ ception
                    Throw Ne~dulla^@204~ .StrongTypingException("The value for~dulla^@204~ ssued' in table 'StockCardDetail' is ~dulla^@204~ 
                End Try
           ~dulla^@204~          Set
                Me(Me.t~dulla^@204~ Detail.QtyIssuedColumn) = value
    ~dulla^@204~ et
        End Property
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public Property QtyBalance() ~dulla^@204~            Get
                Retur~dulla^@204~ .tableStockCardDetail.QtyBalanceColum~dulla^@204~             End Get
            Set~dulla^@204~     Me(Me.tableStockCardDetail.QtyBal~dulla^@204~  value
            End Set
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ Inv_____D_O() As String
            ~dulla^@204~         Try 
                    Ret~dulla^@204~ Me.tableStockCardDetail._Inv_____D_OC~dulla^@204~ )
                Catch e As System.~dulla^@204~ ception
                    Throw Ne~dulla^@204~ .StrongTypingException("The value for~dulla^@204~  &_ D_O' in table 'StockCardDetail' i~dulla^@204~ )
                End Try
         ~dulla^@204~            Set
                Me(Me~dulla^@204~ rdDetail._Inv_____D_OColumn) = value~dulla^@204~ End Set
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Function IsQtyRec~dulla^@204~ s Boolean
            Return Me.IsNu~dulla^@204~ ockCardDetail.QtyRecievedColumn)
   ~dulla^@204~ tion
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ etQtyRecievedNull()
            Me(M~dulla^@204~ ardDetail.QtyRecievedColumn) = System~dulla^@204~ ll
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Function IsQtyIssuedNull() ~dulla^@204~            Return Me.IsNull(Me.tableS~dulla^@204~ l.QtyIssuedColumn)
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Sub Se~dulla^@204~ l()
            Me(Me.tableStockCard~dulla^@204~ uedColumn) = System.Convert.DBNull
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  Is_Inv_____D_ONull() As Boolean
   ~dulla^@204~ rn Me.IsNull(Me.tableStockCardDetail.~dulla^@204~ olumn)
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Sub Set_Inv_____D_~dulla^@204~         Me(Me.tableStockCardDetail._I~dulla^@204~ umn) = System.Convert.DBNull
       ~dulla^@204~  End Class
    
    <System.CodeDom~dulla^@204~ eratedCodeAttribute("System.Data.Desi~dulla^@204~ etGenerator", "2.0.0.0")>  _
    Par~dulla^@204~ lass SupplierRow
        Inherits Sy~dulla^@204~ aRow
        
        Private table~dulla^@204~ upplierDataTable
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Friend Sub New(ByVal rb As System.Dat~dulla^@204~ der)
            MyBase.New(rb)
   ~dulla^@204~ ableSupplier = CType(Me.Table,Supplie~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Property SupplierID() As String~dulla^@204~  Get
                Return CType(Me~dulla^@204~ lier.SupplierIDColumn),String)
     ~dulla^@204~ t
            Set
                M~dulla^@204~ plier.SupplierIDColumn) = value
    ~dulla^@204~ et
        End Property
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public Property SupplierName(~dulla^@204~             Get
                Retu~dulla^@204~ e.tableSupplier.SupplierNameColumn),S~dulla^@204~        End Get
            Set
                Me(Me.tableSupplier.SupplierNa~dulla^@204~ alue
            End Set
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ ress() As String
            Get
  ~dulla^@204~  Try 
                    Return CTy~dulla^@204~ eSupplier.AddressColumn),String)
   ~dulla^@204~ Catch e As System.InvalidCastExceptio~dulla^@204~           Throw New System.Data.Stron~dulla^@204~ ion("The value for column 'Address' i~dulla^@204~ lier' is DBNull.", e)
              ~dulla^@204~           End Get
            Set
 ~dulla^@204~   Me(Me.tableSupplier.AddressColumn) ~dulla^@204~         End Set
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Property ~dulla^@204~ ing
            Get
               ~dulla^@204~               Return CType(Me(Me.tabl~dulla^@204~ yColumn),String)
                Cat~dulla^@204~ m.InvalidCastException
             ~dulla^@204~ New System.Data.StrongTypingException~dulla^@204~ or column 'City' in table 'Supplier' ~dulla^@204~ e)
                End Try
        ~dulla^@204~             Set
                Me(M~dulla^@204~ er.CityColumn) = value
            E~dulla^@204~    End Property
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Property Country() As String
 ~dulla^@204~ t
                Try 
            ~dulla^@204~ n CType(Me(Me.tableSupplier.CountryCo~dulla^@204~ 
                Catch e As System.I~dulla^@204~ eption
                    Throw New~dulla^@204~ StrongTypingException("The value for ~dulla^@204~ ry' in table 'Supplier' is DBNull.", ~dulla^@204~        End Try
            End Get
~dulla^@204~ et
                Me(Me.tableSuppli~dulla^@204~ umn) = value
            End Set
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ erty Phone() As String
            G~dulla^@204~        Try 
                    Retu~dulla^@204~ e.tableSupplier.PhoneColumn),String)~dulla^@204~     Catch e As System.InvalidCastExce~dulla^@204~               Throw New System.Data.S~dulla^@204~ ception("The value for column 'Phone'~dulla^@204~ pplier' is DBNull.", e)
            ~dulla^@204~             End Get
            Set~dulla^@204~     Me(Me.tableSupplier.PhoneColumn) ~dulla^@204~         End Set
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Property ~dulla^@204~ ng
            Get
                ~dulla^@204~ Me(Me.tableSupplier.FaxColumn),String~dulla^@204~   End Get
            Set
         ~dulla^@204~ tableSupplier.FaxColumn) = value
   ~dulla^@204~ Set
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Property PostalAddres~dulla^@204~ 
            Get
                Re~dulla^@204~ (Me.tableSupplier.PostalAddressColumn~dulla^@204~           End Get
            Set
 ~dulla^@204~   Me(Me.tableSupplier.PostalAddressCo~dulla^@204~ 
            End Set
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Pro~dulla^@204~ () As String
            Get
      ~dulla^@204~ urn CType(Me(Me.tableSupplier.Website~dulla^@204~ g)
            End Get
            ~dulla^@204~         Me(Me.tableSupplier.WebsiteCo~dulla^@204~ 
            End Set
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Fun~dulla^@204~ ssNull() As Boolean
            Retu~dulla^@204~ Me.tableSupplier.AddressColumn)
    ~dulla^@204~ ion
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ tAddressNull()
            Me(Me.tab~dulla^@204~ dressColumn) = System.Convert.DBNull~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ on IsCityNull() As Boolean
         ~dulla^@204~ IsNull(Me.tableSupplier.CityColumn)
~dulla^@204~ unction
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ b SetCityNull()
            Me(Me.ta~dulla^@204~ ityColumn) = System.Convert.DBNull
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  IsCountryNull() As Boolean
        ~dulla^@204~ .IsNull(Me.tableSupplier.CountryColum~dulla^@204~ nd Function
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Sub SetCountryNull()
            M~dulla^@204~ plier.CountryColumn) = System.Convert~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Function IsPhoneNull() As Boolean
~dulla^@204~ eturn Me.IsNull(Me.tableSupplier.Phon~dulla^@204~      End Function
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Sub SetPhoneNull()
         ~dulla^@204~ eSupplier.PhoneColumn) = System.Conve~dulla^@204~       End Sub
    End Class
    
 ~dulla^@204~ deDom.Compiler.GeneratedCodeAttribute~dulla^@204~ .Design.TypedDataSetGenerator", "2.0.~dulla^@204~   Public Class CompanyInfoRowChangeEv~dulla^@204~ Inherits System.EventArgs
        
~dulla^@204~ te eventRow As CompanyInfoRow
      ~dulla^@204~ rivate eventAction As System.Data.Dat~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ l row As CompanyInfoRow, ByVal action~dulla^@204~ ta.DataRowAction)
            MyBase~dulla^@204~      Me.eventRow = row
            M~dulla^@204~  = action
        End Sub
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public ReadOnly Property Ro~dulla^@204~ yInfoRow
            Get
          ~dulla^@204~ Me.eventRow
            End Get
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ nly Property Action() As System.Data.~dulla^@204~ 
            Get
                Re~dulla^@204~ Action
            End Get
        ~dulla^@204~ 
    End Class
    
    <System.Cod~dulla^@204~ .GeneratedCodeAttribute("System.Data.~dulla^@204~ ataSetGenerator", "2.0.0.0")>  _
   ~dulla^@204~  CustomerRowChangeEvent
        Inhe~dulla^@204~ ventArgs
        
        Private e~dulla^@204~ stomerRow
        
        Private ~dulla^@204~ s System.Data.DataRowAction
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Sub New(ByVal row A~dulla^@204~ , ByVal action As System.Data.DataRow~dulla^@204~         MyBase.New
            Me.ev~dulla^@204~ 
            Me.eventAction = action~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ly Property Row() As CustomerRow
   ~dulla^@204~ 
                Return Me.eventRow
~dulla^@204~ nd Get
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public ReadOnly Property ~dulla^@204~ ystem.Data.DataRowAction
           ~dulla^@204~          Return Me.eventAction
     ~dulla^@204~ t
        End Property
    End Clas~dulla^@204~ <System.CodeDom.Compiler.GeneratedCod~dulla^@204~ ystem.Data.Design.TypedDataSetGenerat~dulla^@204~ ")>  _
    Public Class InvoiceRowCh~dulla^@204~       Inherits System.EventArgs
    ~dulla^@204~  Private eventRow As InvoiceRow
    ~dulla^@204~  Private eventAction As System.Data.D~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ Val row As InvoiceRow, ByVal action A~dulla^@204~ .DataRowAction)
            MyBase.N~dulla^@204~    Me.eventRow = row
            Me.~dulla^@204~  action
        End Sub
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public ReadOnly Property Row(~dulla^@204~ ow
            Get
                ~dulla^@204~ ntRow
            End Get
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Dat~dulla^@204~ on
            Get
                ~dulla^@204~ ntAction
            End Get
      ~dulla^@204~ y
    End Class
    
    <System.C~dulla^@204~ er.GeneratedCodeAttribute("System.Dat~dulla^@204~ dDataSetGenerator", "2.0.0.0")>  _
 ~dulla^@204~ ss OrderRowChangeEvent
        Inher~dulla^@204~ entArgs
        
        Private ev~dulla^@204~ erRow
        
        Private even~dulla^@204~ stem.Data.DataRowAction
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Sub New(ByVal row As Or~dulla^@204~  action As System.Data.DataRowAction)~dulla^@204~  MyBase.New
            Me.eventRow ~dulla^@204~       Me.eventAction = action
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ erty Row() As OrderRow
            G~dulla^@204~        Return Me.eventRow
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public ReadOnly Property Action() A~dulla^@204~ .DataRowAction
            Get
    ~dulla^@204~ eturn Me.eventAction
            End~dulla^@204~  End Property
    End Class
    
 ~dulla^@204~ deDom.Compiler.GeneratedCodeAttribute~dulla^@204~ .Design.TypedDataSetGenerator", "2.0.~dulla^@204~   Public Class ProductInfoRowChangeEv~dulla^@204~ Inherits System.EventArgs
        
~dulla^@204~ te eventRow As ProductInfoRow
      ~dulla^@204~ rivate eventAction As System.Data.Dat~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ l row As ProductInfoRow, ByVal action~dulla^@204~ ta.DataRowAction)
            MyBase~dulla^@204~      Me.eventRow = row
            M~dulla^@204~  = action
        End Sub
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public ReadOnly Property Ro~dulla^@204~ tInfoRow
            Get
          ~dulla^@204~ Me.eventRow
            End Get
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ nly Property Action() As System.Data.~dulla^@204~ 
            Get
                Re~dulla^@204~ Action
            End Get
        ~dulla^@204~ 
    End Class
    
    <System.Cod~dulla^@204~ .GeneratedCodeAttribute("System.Data.~dulla^@204~ ataSetGenerator", "2.0.0.0")>  _
   ~dulla^@204~  ProductsRowChangeEvent
        Inhe~dulla^@204~ ventArgs
        
        Private e~dulla^@204~ oductsRow
        
        Private ~dulla^@204~ s System.Data.DataRowAction
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Sub New(ByVal row A~dulla^@204~ , ByVal action As System.Data.DataRow~dulla^@204~         MyBase.New
            Me.ev~dulla^@204~ 
            Me.eventAction = action~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ly Property Row() As ProductsRow
   ~dulla^@204~ 
                Return Me.eventRow
~dulla^@204~ nd Get
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public ReadOnly Property ~dulla^@204~ ystem.Data.DataRowAction
           ~dulla^@204~          Return Me.eventAction
     ~dulla^@204~ t
        End Property
    End Clas~dulla^@204~ <System.CodeDom.Compiler.GeneratedCod~dulla^@204~ ystem.Data.Design.TypedDataSetGenerat~dulla^@204~ ")>  _
    Public Class ProductsAvia~dulla^@204~ eEvent
        Inherits System.Event~dulla^@204~  
        Private eventRow As Produc~dulla^@204~ w
        
        Private eventAct~dulla^@204~ .Data.DataRowAction
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Sub New(ByVal row As Produc~dulla^@204~ w, ByVal action As System.Data.DataRo~dulla^@204~          MyBase.New
            Me.e~dulla^@204~ 
            Me.eventAction = action~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ nly Property Row() As ProductsAvialab~dulla^@204~       Get
                Return Me.~dulla^@204~          End Get
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public ReadOnly~dulla^@204~ ion() As System.Data.DataRowAction
 ~dulla^@204~ t
                Return Me.eventAct~dulla^@204~     End Get
        End Property
  ~dulla^@204~     
    <System.CodeDom.Compiler.Ge~dulla^@204~ tribute("System.Data.Design.TypedData~dulla^@204~ , "2.0.0.0")>  _
    Public Class Pu~dulla^@204~ geEvent
        Inherits System.Even~dulla^@204~   
        Private eventRow As Purch~dulla^@204~    
        Private eventAction As S~dulla^@204~ taRowAction
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Sub New(ByVal row As PurchaseRow, B~dulla^@204~ s System.Data.DataRowAction)
       ~dulla^@204~ ew
            Me.eventRow = row
  ~dulla^@204~ eventAction = action
        End Sub~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public ReadOnly ~dulla^@204~ ) As PurchaseRow
            Get
  ~dulla^@204~  Return Me.eventRow
            End ~dulla^@204~ End Property
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic ReadOnly Property Action() As Syst~dulla^@204~ owAction
            Get
          ~dulla^@204~ Me.eventAction
            End Get
~dulla^@204~ roperty
    End Class
    
    <Sy~dulla^@204~ Compiler.GeneratedCodeAttribute("Syst~dulla^@204~ n.TypedDataSetGenerator", "2.0.0.0")>~dulla^@204~ ic Class PurchaseInfoRowChangeEvent
~dulla^@204~ its System.EventArgs
        
     ~dulla^@204~ entRow As PurchaseInfoRow
        
~dulla^@204~ te eventAction As System.Data.DataRow~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Sub~dulla^@204~ w As PurchaseInfoRow, ByVal action As~dulla^@204~ DataRowAction)
            MyBase.Ne~dulla^@204~   Me.eventRow = row
            Me.e~dulla^@204~ action
        End Sub
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public ReadOnly Property Row()~dulla^@204~ nfoRow
            Get
            ~dulla^@204~ .eventRow
            End Get
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y Property Action() As System.Data.Da~dulla^@204~             Get
                Retu~dulla^@204~ tion
            End Get
        En~dulla^@204~    End Class
    
    <System.CodeD~dulla^@204~ eneratedCodeAttribute("System.Data.De~dulla^@204~ aSetGenerator", "2.0.0.0")>  _
    P~dulla^@204~ alesRowChangeEvent
        Inherits ~dulla^@204~ rgs
        
        Private eventR~dulla^@204~ w
        
        Private eventAct~dulla^@204~ .Data.DataRowAction
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Sub New(ByVal row As SalesR~dulla^@204~ ion As System.Data.DataRowAction)
  ~dulla^@204~ ase.New
            Me.eventRow = ro~dulla^@204~   Me.eventAction = action
        En~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Read~dulla^@204~  Row() As SalesRow
            Get
~dulla^@204~    Return Me.eventRow
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic ReadOnly Property Action() As Sy~dulla^@204~ aRowAction
            Get
        ~dulla^@204~ n Me.eventAction
            End Get~dulla^@204~  Property
    End Class
    
    <~dulla^@204~ m.Compiler.GeneratedCodeAttribute("Sy~dulla^@204~ ign.TypedDataSetGenerator", "2.0.0.0"~dulla^@204~ blic Class SalesInfoRowChangeEvent
 ~dulla^@204~ ts System.EventArgs
        
      ~dulla^@204~ ntRow As SalesInfoRow
        
    ~dulla^@204~ ventAction As System.Data.DataRowActi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Sub New~dulla^@204~  SalesInfoRow, ByVal action As System.Data.DataRowAction)
            MyBase.N~dulla^@204~    Me.eventRow = row
            Me.~dulla^@204~  action
        End Sub
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public ReadOnly Property Row(~dulla^@204~ oRow
            Get
              ~dulla^@204~ ventRow
            End Get
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ Property Action() As System.Data.Data~dulla^@204~           Get
                Return~dulla^@204~ on
            End Get
        End ~dulla^@204~  End Class
    
    <System.CodeDom~dulla^@204~ eratedCodeAttribute("System.Data.Desi~dulla^@204~ etGenerator", "2.0.0.0")>  _
    Pub~dulla^@204~ ckCardRowChangeEvent
        Inherit~dulla^@204~ tArgs
        
        Private even~dulla^@204~ CardRow
        
        Private ev~dulla^@204~ System.Data.DataRowAction
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Sub New(ByVal row As ~dulla^@204~  ByVal action As System.Data.DataRowA~dulla^@204~        MyBase.New
            Me.eve~dulla^@204~             Me.eventAction = action
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y Property Row() As StockCardRow
   ~dulla^@204~ 
                Return Me.eventRow
~dulla^@204~ nd Get
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public ReadOnly Property ~dulla^@204~ ystem.Data.DataRowAction
           ~dulla^@204~          Return Me.eventAction
     ~dulla^@204~ t
        End Property
    End Clas~dulla^@204~ <System.CodeDom.Compiler.GeneratedCod~dulla^@204~ ystem.Data.Design.TypedDataSetGenerat~dulla^@204~ ")>  _
    Public Class StockCardDet~dulla^@204~ vent
        Inherits System.EventAr~dulla^@204~ 
        Private eventRow As StockCar~dulla^@204~        
        Private eventAction ~dulla^@204~ a.DataRowAction
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Sub New(ByVal row As StockCardD~dulla^@204~ al action As System.Data.DataRowActio~dulla^@204~    MyBase.New
            Me.eventRo~dulla^@204~         Me.eventAction = action
    ~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ operty Row() As StockCardDetailRow
 ~dulla^@204~ t
                Return Me.eventRow~dulla^@204~  End Get
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public ReadOnly Propert~dulla^@204~  System.Data.DataRowAction
         ~dulla^@204~            Return Me.eventAction
   ~dulla^@204~ Get
        End Property
    End Cl~dulla^@204~   <System.CodeDom.Compiler.GeneratedC~dulla^@204~ "System.Data.Design.TypedDataSetGener~dulla^@204~ .0")>  _
    Public Class SupplierRo~dulla^@204~ 
        Inherits System.EventArgs
 ~dulla^@204~     Private eventRow As SupplierRow
~dulla^@204~      Private eventAction As System.Da~dulla^@204~ ion
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ w(ByVal row As SupplierRow, ByVal act~dulla^@204~ .Data.DataRowAction)
            MyB~dulla^@204~         Me.eventRow = row
          ~dulla^@204~ ion = action
        End Sub
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public ReadOnly Property~dulla^@204~ plierRow
            Get
          ~dulla^@204~ Me.eventRow
            End Get
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ nly Property Action() As System.Data.~dulla^@204~ 
            Get
                Re~dulla^@204~ Action
            End Get
        ~dulla^@204~ 
    End Class
End Class

Namespac~dulla^@204~ ntrolSystemDataSet1TableAdapters
   ~dulla^@204~ m.CodeDom.Compiler.GeneratedCodeAttri~dulla^@204~ Data.Design.TypedDataSetGenerator", "~dulla^@204~ 
     System.ComponentModel.Designer~dulla^@204~ bute("code"),  _
     System.Compone~dulla^@204~ oxItem(true),  _
     System.Compone~dulla^@204~ bjectAttribute(true),  _
     System~dulla^@204~ el.DesignerAttribute("Microsoft.VSDes~dulla^@204~ rce.Design.TableAdapterDesigner, Micr~dulla^@204~ ner"& _ 
        ", Version=8.0.0.0,~dulla^@204~ ral, PublicKeyToken=b03f5f7f11d50a3a"~dulla^@204~ ystem.ComponentModel.Design.HelpKeywo~dulla^@204~ vs.data.TableAdapter")>  _
    Parti~dulla^@204~ ss CompanyInfoTableAdapter
        I~dulla^@204~ m.ComponentModel.Component
        ~dulla^@204~ ate WithEvents _adapter As System.Dat~dulla^@204~ qlDataAdapter
        
        Priv~dulla^@204~ on As System.Data.SqlClient.SqlConnec~dulla^@204~  
        Private _commandCollection~dulla^@204~ Data.SqlClient.SqlCommand
        
~dulla^@204~ te _clearBeforeFill As Boolean
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Sub New()
     ~dulla^@204~ .New
            Me.ClearBeforeFill ~dulla^@204~    End Sub
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~ e ReadOnly Property Adapter() As Syst~dulla^@204~ ient.SqlDataAdapter
            Get~dulla^@204~     If (Me._adapter Is Nothing) Then~dulla^@204~         Me.InitAdapter
             ~dulla^@204~               Return Me._adapter
   ~dulla^@204~ Get
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Friend Property Connection()~dulla^@204~ ta.SqlClient.SqlConnection
         ~dulla^@204~            If (Me._connection Is Noth~dulla^@204~                   Me.InitConnection
~dulla^@204~    End If
                Return Me.~dulla^@204~             End Get
            Set~dulla^@204~     Me._connection = value
         ~dulla^@204~ t (Me.Adapter.InsertCommand) Is Nothi~dulla^@204~                  Me.Adapter.InsertCom~dulla^@204~ on = value
                End If
 ~dulla^@204~   If (Not (Me.Adapter.DeleteCommand) ~dulla^@204~ hen
                    Me.Adapter.D~dulla^@204~ Connection = value
                E~dulla^@204~           If (Not (Me.Adapter.UpdateC~dulla^@204~ thing) Then
                    Me.A~dulla^@204~ Command.Connection = value
         ~dulla^@204~ 
                Dim i As Integer = ~dulla^@204~       Do While (i < Me.CommandCollect~dulla^@204~                     If (Not (Me.Comma~dulla^@204~ i)) Is Nothing) Then
               ~dulla^@204~ e(Me.CommandCollection(i),System.Data~dulla^@204~ lCommand).Connection = value
       ~dulla^@204~ End If
                    i = (i + ~dulla^@204~        Loop
            End Set
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ adOnly Property CommandCollection() A~dulla^@204~ .SqlClient.SqlCommand()
            ~dulla^@204~         If (Me._commandCollection Is ~dulla^@204~ 
                    Me.InitCommandC~dulla^@204~               End If
               ~dulla^@204~ ommandCollection
            End Get~dulla^@204~  Property
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Property ClearBeforeFill() As Boolean~dulla^@204~  Get
                Return Me._clea~dulla^@204~             End Get
            Set~dulla^@204~     Me._clearBeforeFill = value
    ~dulla^@204~ et
        End Property
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Private Sub InitAdapter()
  ~dulla^@204~ _adapter = New System.Data.SqlClient.~dulla^@204~ r
            Dim tableMapping As Sy~dulla^@204~ mon.DataTableMapping = New System.Dat~dulla^@204~ TableMapping
            tableMappin~dulla^@204~  = "Table"
            tableMapping.~dulla^@204~ = "CompanyInfo"
            tableMap~dulla^@204~ ppings.Add("CompanyName", "CompanyNam~dulla^@204~     tableMapping.ColumnMappings.Add("~dulla^@204~ dress")
            tableMapping.Col~dulla^@204~ dd("City", "City")
            table~dulla^@204~ nMappings.Add("Country", "Country")
~dulla^@204~ ableMapping.ColumnMappings.Add("Tel", "Tel")
            tableMapping.ColumnMa~dulla^@204~ ax", "Fax")
            tableMapping~dulla^@204~ gs.Add("PostalAddress", "PostalAddres~dulla^@204~     tableMapping.ColumnMappings.Add("~dulla^@204~ l")
            tableMapping.ColumnM~dulla^@204~ CompantVATRegNo", "CompantVATRegNo")~dulla^@204~ tableMapping.ColumnMappings.Add("Comp~dulla^@204~ ompanyTINNo")
            tableMappi~dulla^@204~ ings.Add("CompanyDateOfReg", "Company~dulla^@204~             Me._adapter.TableMappings~dulla^@204~ ping)
            Me._adapter.Insert~dulla^@204~  System.Data.SqlClient.SqlCommand
  ~dulla^@204~ _adapter.InsertCommand.Connection = M~dulla^@204~ 
            Me._adapter.InsertComman~dulla^@204~  = "INSERT INTO [dbo].[CompanyInfo] (~dulla^@204~ , [Address], [City], [Country], [Te"&~dulla^@204~         "l], [Fax], [PostalAddress], ~dulla^@204~ pantVATRegNo], [CompanyTINNo], [Compa~dulla^@204~             "DateOfReg]) VALUES (@Com~dulla^@204~ dress, @City, @Country, @Tel, @Fax, @~dulla^@204~                 "Address, @Email, @Co~dulla^@204~ , @CompanyTINNo, @CompanyDateOfReg)"~dulla^@204~ Me._adapter.InsertCommand.CommandType~dulla^@204~ a.CommandType.Text
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@CompanyName", System.Da~dulla^@204~ [Char], 0, System.Data.ParameterDirec~dulla^@204~ , 0, "CompanyName", System.Data.DataR~dulla^@204~ rent, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.InsertCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Address~dulla^@204~ a.SqlDbType.[Char], 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "Address", System.Da~dulla^@204~ sion.Current, false, Nothing, "", "",~dulla^@204~       Me._adapter.InsertCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ m.Data.SqlDbType.[Char], 0, System.Da~dulla^@204~ irection.Input, 0, 0, "City", System.~dulla^@204~ ersion.Current, false, Nothing, "", "~dulla^@204~         Me._adapter.InsertCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ System.Data.SqlDbType.[Char], 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "Country",~dulla^@204~ DataRowVersion.Current, false, Nothin~dulla^@204~ ))
            Me._adapter.InsertCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ l", System.Data.SqlDbType.[Char], 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Tel",~dulla^@204~ DataRowVersion.Current, false, Nothin~dulla^@204~ ))
            Me._adapter.InsertCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ x", System.Data.SqlDbType.[Char], 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Fax",~dulla^@204~ DataRowVersion.Current, false, Nothin~dulla^@204~ ))
            Me._adapter.InsertCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ stalAddress", System.Data.SqlDbType.[~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ dress", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ sertCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@Email", System.Data~dulla^@204~ har], 0, System.Data.ParameterDirecti~dulla^@204~ 0, "Email", System.Data.DataRowVersio~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.InsertCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@CompantVATRegNo~dulla^@204~ a.SqlDbType.DateTime, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "CompantVATRegNo",~dulla^@204~ DataRowVersion.Current, false, Nothin~dulla^@204~ ))
            Me._adapter.InsertCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ mpanyTINNo", System.Data.SqlDbType.[C~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ NNo", System.Data.DataRowVersion.Curr~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ rtCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@CompanyDateOfReg", Sy~dulla^@204~ DbType.DateTime, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "CompanyDateOfReg", Sys~dulla^@204~ RowVersion.Current, false, Nothing, "~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ rivate Sub InitConnection()
        ~dulla^@204~ ction = New System.Data.SqlClient.Sql~dulla^@204~            Me._connection.ConnectionS~dulla^@204~ l.InventoryControlSystem.My.MySetting~dulla^@204~ entoryControlSystemConnectionString
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ itCommandCollection()
            Me~dulla^@204~ ection = New System.Data.SqlClient.Sq~dulla^@204~ }
            Me._commandCollection(~dulla^@204~ em.Data.SqlClient.SqlCommand
       ~dulla^@204~ andCollection(0).Connection = Me.Conn~dulla^@204~        Me._commandCollection(0).Comma~dulla^@204~ ECT CompanyName, Address, City, Count~dulla^@204~  PostalAddress, Email, Compa"& _ 
  ~dulla^@204~  "ntVATRegNo, CompanyTINNo, CompanyDa~dulla^@204~ dbo.CompanyInfo"
            Me._com~dulla^@204~ n(0).CommandType = System.Data.Comman~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute(),  ~dulla^@204~ ystem.ComponentModel.Design.HelpKeywo~dulla^@204~ vs.data.TableAdapter"),  _
         ~dulla^@204~ entModel.DataObjectMethodAttribute(Sy~dulla^@204~ tModel.DataObjectMethodType.Fill, tru~dulla^@204~    Public Overloads Overridable Funct~dulla^@204~ l dataTable As InventoryControlSystem~dulla^@204~ anyInfoDataTable) As Integer
       ~dulla^@204~ er.SelectCommand = Me.CommandCollecti~dulla^@204~       If (Me.ClearBeforeFill = true) ~dulla^@204~          dataTable.Clear
           ~dulla^@204~         Dim returnValue As Integer = ~dulla^@204~ ll(dataTable)
            Return ret~dulla^@204~      End Function
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~   System.ComponentModel.Design.HelpKe~dulla^@204~ e("vs.data.TableAdapter"),  _
      ~dulla^@204~ ponentModel.DataObjectMethodAttribute~dulla^@204~ nentModel.DataObjectMethodType.[Selec~dulla^@204~ 
        Public Overloads Overridabl~dulla^@204~ tData() As InventoryControlSystemData~dulla^@204~ nfoDataTable
            Me.Adapter.~dulla^@204~  = Me.CommandCollection(0)
         ~dulla^@204~ ble As InventoryControlSystemDataSet1~dulla^@204~ ataTable = New InventoryControlSystem~dulla^@204~ anyInfoDataTable
            Me.Adap~dulla^@204~ Table)
            Return dataTable~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute(),  _
   ~dulla^@204~ ComponentModel.Design.HelpKeywordAttr~dulla^@204~ a.TableAdapter")>  _
        Public ~dulla^@204~ rridable Function Update(ByVal dataTa~dulla^@204~ oryControlSystemDataSet1.CompanyInfoD~dulla^@204~ Integer
            Return Me.Adapte~dulla^@204~ Table)
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
         System.ComponentModel.De~dulla^@204~ ordAttribute("vs.data.TableAdapter")>~dulla^@204~ Public Overloads Overridable Function~dulla^@204~  dataSet As InventoryControlSystemDat~dulla^@204~ eger
            Return Me.Adapter.U~dulla^@204~ , "CompanyInfo")
        End Functio~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute(),  _
         System.Compone~dulla^@204~ n.HelpKeywordAttribute("vs.data.Table~dulla^@204~ 
        Public Overloads Overridabl~dulla^@204~ date(ByVal dataRow As System.Data.Dat~dulla^@204~ ger
            Return Me.Adapter.Up~dulla^@204~ em.Data.DataRow() {dataRow})
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute(),  _
         Sy~dulla^@204~ tModel.Design.HelpKeywordAttribute("v~dulla^@204~ dapter")>  _
        Public Overload~dulla^@204~  Function Update(ByVal dataRows() As ~dulla^@204~ ataRow) As Integer
            Retur~dulla^@204~ Update(dataRows)
        End Functio~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute(),  _
         System.Compone~dulla^@204~ n.HelpKeywordAttribute("vs.data.Table~dulla^@204~ 
         System.ComponentModel.Data~dulla^@204~ ttribute(System.ComponentModel.DataOb~dulla^@204~ e.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal~dulla^@204~ As String, ByVal Address As String, B~dulla^@204~ String, ByVal Country As String, ByVa~dulla^@204~ ng, ByVal Fax As String, ByVal Postal~dulla^@204~ ring, ByVal Email As String, ByVal Co~dulla^@204~  As Date, ByVal CompanyTINNo As Strin~dulla^@204~ anyDateOfReg As Date) As Integer
   ~dulla^@204~ CompanyName Is Nothing) Then
       ~dulla^@204~ w New System.ArgumentNullException("C~dulla^@204~ 
            Else
                Me~dulla^@204~ rtCommand.Parameters(0).Value = CType~dulla^@204~ String)
            End If
        ~dulla^@204~ ss Is Nothing) Then
                ~dulla^@204~ tem.ArgumentNullException("Address")~dulla^@204~ Else
                Me.Adapter.Inse~dulla^@204~ ameters(1).Value = CType(Address,Stri~dulla^@204~     End If
            If (City Is N~dulla^@204~ 
                Throw New System.Arg~dulla^@204~ ption("City")
            Else
    ~dulla^@204~ e.Adapter.InsertCommand.Parameters(2)~dulla^@204~ e(City,String)
            End If
 ~dulla^@204~  (Country Is Nothing) Then
         ~dulla^@204~ New System.ArgumentNullException("Cou~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(3).Value = CType(Count~dulla^@204~            End If
            If (Te~dulla^@204~  Then
                Me.Adapter.Ins~dulla^@204~ rameters(4).Value = System.DBNull.Val~dulla^@204~    Else
                Me.Adapter.I~dulla^@204~ Parameters(4).Value = CType(Tel,Strin~dulla^@204~    End If
            If (Fax Is Not~dulla^@204~                Me.Adapter.InsertComma~dulla^@204~ (5).Value = System.DBNull.Value
    ~dulla^@204~ 
                Me.Adapter.InsertCom~dulla^@204~ rs(5).Value = CType(Fax,String)
    ~dulla^@204~ f
            If (PostalAddress Is N~dulla^@204~ 
                Me.Adapter.InsertCom~dulla^@204~ rs(6).Value = System.DBNull.Value
  ~dulla^@204~ e
                Me.Adapter.InsertC~dulla^@204~ ters(6).Value = CType(PostalAddress,S~dulla^@204~        End If
            If (Email ~dulla^@204~ hen
                Me.Adapter.Inser~dulla^@204~ meters(7).Value = System.DBNull.Value~dulla^@204~  Else
                Me.Adapter.Ins~dulla^@204~ rameters(7).Value = CType(Email,Strin~dulla^@204~    End If
            Me.Adapter.Ins~dulla^@204~ rameters(8).Value = CType(CompantVATR~dulla^@204~            If (CompanyTINNo Is Nothin~dulla^@204~             Throw New System.Argument~dulla^@204~ ("CompanyTINNo")
            Else
 ~dulla^@204~   Me.Adapter.InsertCommand.Parameters~dulla^@204~ Type(CompanyTINNo,String)
          ~dulla^@204~          Me.Adapter.InsertCommand.Par~dulla^@204~ alue = CType(CompanyDateOfReg,Date)
~dulla^@204~ im previousConnectionState As System.~dulla^@204~ onState = Me.Adapter.InsertCommand.Co~dulla^@204~ e
            If ((Me.Adapter.Insert~dulla^@204~ ction.State And System.Data.Connectio~dulla^@204~  _
                        <> System~dulla^@204~ ionState.Open) Then
                ~dulla^@204~ sertCommand.Connection.Open
        ~dulla^@204~            Try 
                Dim ~dulla^@204~ s Integer = Me.Adapter.InsertCommand.~dulla^@204~ ry
                Return returnValu~dulla^@204~   Finally
                If (previo~dulla^@204~ tate = System.Data.ConnectionState.Cl~dulla^@204~                    Me.Adapter.InsertC~dulla^@204~ tion.Close
                End If
 ~dulla^@204~ d Try
        End Function
    End ~dulla^@204~     <System.CodeDom.Compiler.Generate~dulla^@204~ e("System.Data.Design.TypedDataSetGen~dulla^@204~ .0.0"),  _
     System.ComponentMode~dulla^@204~ egoryAttribute("code"),  _
     Syst~dulla^@204~ odel.ToolboxItem(true),  _
     Syst~dulla^@204~ odel.DataObjectAttribute(true),  _
 ~dulla^@204~ mponentModel.DesignerAttribute("Micro~dulla^@204~ er.DataSource.Design.TableAdapterDesi~dulla^@204~ ft.VSDesigner"& _ 
        ", Versio~dulla^@204~ lture=neutral, PublicKeyToken=b03f5f7~dulla^@204~  _
     System.ComponentModel.Design~dulla^@204~ ttribute("vs.data.TableAdapter")>  _~dulla^@204~ Public Class CustomerTableAdapter
  ~dulla^@204~ s System.ComponentModel.Component
  ~dulla^@204~    Private WithEvents _adapter As Sys~dulla^@204~ lient.SqlDataAdapter
        
     ~dulla^@204~ onnection As System.Data.SqlClient.Sq~dulla^@204~         
        Private _commandCol~dulla^@204~ System.Data.SqlClient.SqlCommand
   ~dulla^@204~   Private _clearBeforeFill As Boolean~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Sub New()~dulla^@204~  MyBase.New
            Me.ClearBefo~dulla^@204~ 
        End Sub
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Private ReadOnly Property Adapter() ~dulla^@204~ a.SqlClient.SqlDataAdapter
         ~dulla^@204~            If (Me._adapter Is Nothing~dulla^@204~                Me.InitAdapter
      ~dulla^@204~  If
                Return Me._adapt~dulla^@204~    End Get
        End Property
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Friend Property Conne~dulla^@204~ stem.Data.SqlClient.SqlConnection
  ~dulla^@204~ 
                If (Me._connection ~dulla^@204~ hen
                    Me.InitConne~dulla^@204~           End If
                Ret~dulla^@204~ ction
            End Get
         ~dulla^@204~            Me._connection = value
  ~dulla^@204~  If (Not (Me.Adapter.InsertCommand) I~dulla^@204~ en
                    Me.Adapter.In~dulla^@204~ onnection = value
                En~dulla^@204~          If (Not (Me.Adapter.DeleteCo~dulla^@204~ hing) Then
                    Me.Ad~dulla^@204~ ommand.Connection = value
          ~dulla^@204~ 
                If (Not (Me.Adapter.~dulla^@204~ ) Is Nothing) Then
                 ~dulla^@204~ .UpdateCommand.Connection = value
  ~dulla^@204~  End If
                Dim i As Int~dulla^@204~              Do While (i < Me.Command~dulla^@204~ ngth)
                    If (Not (M~dulla^@204~ ection(i)) Is Nothing) Then
        ~dulla^@204~    CType(Me.CommandCollection(i),Syst~dulla^@204~ ient.SqlCommand).Connection = value
~dulla^@204~        End If
                    i ~dulla^@204~               Loop
            End S~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ cted ReadOnly Property CommandCollect~dulla^@204~ em.Data.SqlClient.SqlCommand()
     ~dulla^@204~                If (Me._commandCollect~dulla^@204~ g) Then
                    Me.InitC~dulla^@204~ ion
                End If
        ~dulla^@204~ n Me._commandCollection
            ~dulla^@204~     End Property
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Property ClearBeforeFill() As ~dulla^@204~         Get
                Return M~dulla^@204~ eFill
            End Get
         ~dulla^@204~            Me._clearBeforeFill = valu~dulla^@204~   End Set
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Private Sub InitAdapte~dulla^@204~     Me._adapter = New System.Data.Sql~dulla^@204~ aAdapter
            Dim tableMappin~dulla^@204~ ata.Common.DataTableMapping = New Sys~dulla^@204~ on.DataTableMapping
            tabl~dulla^@204~ ceTable = "Table"
            tableM~dulla^@204~ tTable = "Customer"
            tabl~dulla^@204~ mnMappings.Add("CustomerID", "Custome~dulla^@204~       tableMapping.ColumnMappings.Add~dulla^@204~ e", "CustomerName")
            tabl~dulla^@204~ mnMappings.Add("Address", "Address")~dulla^@204~ tableMapping.ColumnMappings.Add("City~dulla^@204~            tableMapping.ColumnMapping~dulla^@204~ y", "Country")
            tableMapp~dulla^@204~ pings.Add("Tel", "Tel")
            ~dulla^@204~ ColumnMappings.Add("Fax", "Fax")
   ~dulla^@204~ eMapping.ColumnMappings.Add("PostalAd~dulla^@204~ alAddress")
            tableMapping~dulla^@204~ gs.Add("Email", "Email")
           ~dulla^@204~ .ColumnMappings.Add("CustomerVATRegNo~dulla^@204~ ATRegNo")
            tableMapping.C~dulla^@204~ .Add("CustomerTINNo", "CustomerTINNo"~dulla^@204~   tableMapping.ColumnMappings.Add("CustomerDateOfReg", "CustomerDateOfReg")
  ~dulla^@204~ leMapping.ColumnMappings.Add("Product~dulla^@204~ , "ProductDateOfSupply")
           ~dulla^@204~ TableMappings.Add(tableMapping)
    ~dulla^@204~ dapter.DeleteCommand = New System.Dat~dulla^@204~ qlCommand
            Me._adapter.De~dulla^@204~ onnection = Me.Connection
          ~dulla^@204~ .DeleteCommand.CommandText = "DELETE ~dulla^@204~ ustomer] WHERE (([CustomerID] = @Orig~dulla^@204~ ID) AND ((@"& _ 
                "Is~dulla^@204~ Name = 1 AND [CustomerName] IS NULL) ~dulla^@204~ Name] = @Origin"& _ 
               ~dulla^@204~ Name)) AND ([Address] = @Original_Add~dulla^@204~ ity] = @Original_Ci"& _ 
           ~dulla^@204~  ([Country] = @Original_Country) AND ~dulla^@204~ ginal_Tel) AND ([Fax] ="& _ 
       ~dulla^@204~ riginal_Fax) AND ([PostalAddress] = @~dulla^@204~ alAddress) AND ([Email] = @"& _ 
   ~dulla^@204~ "Original_Email) AND ((@IsNull_Custom~dulla^@204~ 1 AND [CustomerVATRegNo] IS NUL"& _ ~dulla^@204~     "L) OR ([CustomerVATRegNo] = @Ori~dulla^@204~ rVATRegNo)) AND ((@IsNull_CustomerT"&~dulla^@204~         "INNo = 1 AND [CustomerTINNo]~dulla^@204~ ([CustomerTINNo] = @Original_Customer~dulla^@204~             "NNo)) AND ((@IsNull_Cust~dulla^@204~  = 1 AND [CustomerDateOfReg] IS NULL)~dulla^@204~                 "CustomerDateOfReg] =~dulla^@204~ stomerDateOfReg)) AND ((@IsNull_Produ~dulla^@204~ _ 
                "pply = 1 AND [Pr~dulla^@204~ pply] IS NULL) OR ([ProductDateOfSupp~dulla^@204~ a"& _ 
                "l_ProductDat~dulla^@204~ 
            Me._adapter.DeleteComma~dulla^@204~ e = System.Data.CommandType.Text
   ~dulla^@204~ adapter.DeleteCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Original_~dulla^@204~ System.Data.SqlDbType.NVarChar, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "Custome~dulla^@204~ Data.DataRowVersion.Original, false, ~dulla^@204~ "", ""))
            Me._adapter.Del~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@IsNull_CustomerName", System.Data~dulla^@204~ t, 0, System.Data.ParameterDirection.~dulla^@204~ "CustomerName", System.Data.DataRowVe~dulla^@204~ l, true, Nothing, "", "", ""))
     ~dulla^@204~ apter.DeleteCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@Original_Cu~dulla^@204~ System.Data.SqlDbType.[Char], 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "CustomerN~dulla^@204~ Data.DataRowVersion.Original, false, ~dulla^@204~ "", ""))
            Me._adapter.Del~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@Original_Address", System.Data.Sq~dulla^@204~ ], 0, System.Data.ParameterDirection.~dulla^@204~ "Address", System.Data.DataRowVersion~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.DeleteCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@Original_City",~dulla^@204~ SqlDbType.[Char], 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "City", System.Data.Da~dulla^@204~ Original, false, Nothing, "", "", "")~dulla^@204~   Me._adapter.DeleteCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@Ori~dulla^@204~ ", System.Data.SqlDbType.[Char], 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "Countr~dulla^@204~ ta.DataRowVersion.Original, false, No~dulla^@204~ , ""))
            Me._adapter.Delet~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@Original_Tel", System.Data.SqlDbTyp~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@Original_Fax", System.Dat~dulla^@204~ Char], 0, System.Data.ParameterDirect~dulla^@204~  0, "Fax", System.Data.DataRowVersion~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.DeleteCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@Original_Postal~dulla^@204~ tem.Data.SqlDbType.[Char], 0, System.~dulla^@204~ rDirection.Input, 0, 0, "PostalAddres~dulla^@204~ ta.DataRowVersion.Original, false, No~dulla^@204~ , ""))
            Me._adapter.Delet~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@Original_Email", System.Data.SqlDbT~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ il", System.Data.DataRowVersion.Origi~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@IsNull_CustomerVATReg~dulla^@204~ ata.SqlDbType.Int, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "CustomerVATRegNo", S~dulla^@204~ taRowVersion.Original, true, Nothing,~dulla^@204~ 
            Me._adapter.DeleteComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ inal_CustomerVATRegNo", System.Data.S~dulla^@204~ Char, 0, System.Data.ParameterDirecti~dulla^@204~ 0, "CustomerVATRegNo", System.Data.Da~dulla^@204~ Original, false, Nothing, "", "", "")~dulla^@204~   Me._adapter.DeleteCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@IsN~dulla^@204~ INNo", System.Data.SqlDbType.Int, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Custo~dulla^@204~ stem.Data.DataRowVersion.Original, tr~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@Original_CustomerTINNo", Syst~dulla^@204~ Type.[Char], 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "CustomerTINNo", System.Dat~dulla^@204~ ion.Original, false, Nothing, "", "",~dulla^@204~       Me._adapter.DeleteCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ merDateOfReg", System.Data.SqlDbType.~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ teOfReg", System.Data.DataRowVersion.~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ DeleteCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@Original_Customer~dulla^@204~ ystem.Data.SqlDbType.DateTime, 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "Customer~dulla^@204~ ystem.Data.DataRowVersion.Original, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@IsNull_ProductDateOfSupply"~dulla^@204~ .SqlDbType.Int, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "ProductDateOfSupply", S~dulla^@204~ taRowVersion.Original, true, Nothing,~dulla^@204~ 
            Me._adapter.DeleteComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ inal_ProductDateOfSupply", System.Dat~dulla^@204~ ateTime, 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "ProductDateOfSupply", System.D~dulla^@204~ rsion.Original, false, Nothing, "", "~dulla^@204~         Me._adapter.InsertCommand = N~dulla^@204~ a.SqlClient.SqlCommand
            M~dulla^@204~ sertCommand.Connection = Me.Connectio~dulla^@204~   Me._adapter.InsertCommand.CommandTe~dulla^@204~ INTO [dbo].[Customer] ([CustomerID], ~dulla^@204~ ], [Address], [City], [C"& _ 
      ~dulla^@204~ ntry], [Tel], [Fax], [PostalAddress],~dulla^@204~ stomerVATRegNo], [CustomerTI"& _ 
  ~dulla^@204~  "NNo], [CustomerDateOfReg], [Product~dulla^@204~ ) VALUES (@CustomerID, @Customer"& _ ~dulla^@204~      "Name, @Address, @City, @Country~dulla^@204~  @PostalAddress, @Email, @CustomerVA"~dulla^@204~          "TRegNo, @CustomerTINNo, @Cu~dulla^@204~ eg, @ProductDateOfSupply);"&Global.Mi~dulla^@204~ lBasic.ChrW(13)&Global.Microsoft.Visu~dulla^@204~ 10)&"SELECT Custo"& _ 
             ~dulla^@204~ stomerName, Address, City, Country, T~dulla^@204~ alAddress, Email, Cus"& _ 
         ~dulla^@204~ VATRegNo, CustomerTINNo, CustomerDate~dulla^@204~ tDateOfSupply FROM Custom"& _ 
     ~dulla^@204~ r WHERE (CustomerID = @CustomerID)"
~dulla^@204~ e._adapter.InsertCommand.CommandType ~dulla^@204~ .CommandType.Text
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@CustomerID", System.Data~dulla^@204~ arChar, 0, System.Data.ParameterDirec~dulla^@204~ , 0, "CustomerID", System.Data.DataRo~dulla^@204~ ent, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.InsertCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@Customer~dulla^@204~ .Data.SqlDbType.[Char], 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "CustomerName", System.Data.DataRowVersion.Current, false,~dulla^@204~  "", ""))
            Me._adapter.In~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@Address", System.Data.SqlDbType.~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ ", System.Data.DataRowVersion.Current~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@City", System.Data.SqlDb~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ ty", System.Data.DataRowVersion.Curre~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ tCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@Country", System.Data.~dulla^@204~ ar], 0, System.Data.ParameterDirectio~dulla^@204~ , "Country", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.InsertCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Tel", System.D~dulla^@204~ .[Char], 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "Tel", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.InsertCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Fax", System.D~dulla^@204~ .[Char], 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "Fax", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.InsertCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@PostalAddress"~dulla^@204~ .SqlDbType.[Char], 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "PostalAddress", Syst~dulla^@204~ owVersion.Current, false, Nothing, ""~dulla^@204~            Me._adapter.InsertCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~  System.Data.SqlDbType.[Char], 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "Email", ~dulla^@204~ ataRowVersion.Current, false, Nothing~dulla^@204~ )
            Me._adapter.InsertComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ tomerVATRegNo", System.Data.SqlDbType~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ omerVATRegNo", System.Data.DataRowVer~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.InsertCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@CustomerTINN~dulla^@204~ ta.SqlDbType.[Char], 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "CustomerTINNo", Sy~dulla^@204~ aRowVersion.Current, false, Nothing, ~dulla^@204~ 
            Me._adapter.InsertComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ merDateOfReg", System.Data.SqlDbType.~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ merDateOfReg", System.Data.DataRowVer~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.InsertCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@ProductDateO~dulla^@204~ tem.Data.SqlDbType.DateTime, 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "ProductDat~dulla^@204~ ystem.Data.DataRowVersion.Current, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd = New System.Data.SqlClient.SqlCom~dulla^@204~      Me._adapter.UpdateCommand.Connec~dulla^@204~ nection
            Me._adapter.Upda~dulla^@204~ mandText = "UPDATE [dbo].[Customer] S~dulla^@204~ D] = @CustomerID, [CustomerName] = @C~dulla^@204~                 "rName, [Address] = @~dulla^@204~ y] = @City, [Country] = @Country, [Te~dulla^@204~ _ 
                " [Fax] = @Fax, [~dulla^@204~ ] = @PostalAddress, [Email] = @Email,~dulla^@204~ R"& _ 
                "egNo] = @Cus~dulla^@204~ , [CustomerTINNo] = @CustomerTINNo, [~dulla^@204~ fReg]"& _ 
                " = @Cust~dulla^@204~ , [ProductDateOfSupply] = @ProductDat~dulla^@204~ RE (([Cus"& _ 
                "tome~dulla^@204~ nal_CustomerID) AND ((@IsNull_Custome~dulla^@204~  [CustomerNam"& _ 
                "~dulla^@204~ R ([CustomerName] = @Original_Custome~dulla^@204~ [Address] = @Orig"& _ 
             ~dulla^@204~ ess) AND ([City] = @Original_City) AN~dulla^@204~ = @Original_Country) "& _ 
         ~dulla^@204~ [Tel] = @Original_Tel) AND ([Fax] = @~dulla^@204~  AND ([PostalAddress] = @"& _ 
     ~dulla^@204~ riginal_PostalAddress) AND ([Email] =~dulla^@204~ ail) AND ((@IsNull_CustomerVA"& _ 
 ~dulla^@204~   "TRegNo = 1 AND [CustomerVATRegNo] ~dulla^@204~ [CustomerVATRegNo] = @Original_Cu"& _~dulla^@204~       "stomerVATRegNo)) AND ((@IsNull~dulla^@204~ o = 1 AND [CustomerTINNo] IS NULL) OR~dulla^@204~           " ([CustomerTINNo] = @Origi~dulla^@204~ INNo)) AND ((@IsNull_CustomerDateOfRe~dulla^@204~               "1 AND [CustomerDateOfR~dulla^@204~ OR ([CustomerDateOfReg] = @Original_C~dulla^@204~ 
                "ateOfReg)) AND ((@~dulla^@204~ tDateOfSupply = 1 AND [ProductDateOfS~dulla^@204~ & _ 
                "LL) OR ([Produ~dulla^@204~ y] = @Original_ProductDateOfSupply)))~dulla^@204~ rosoft.VisualBasic.ChrW(13)&Global.Mi~dulla^@204~ lBasic.ChrW(10)&"SELECT Custom"& _ 
~dulla^@204~    "erID, CustomerName, Address, City~dulla^@204~ l, Fax, PostalAddress, Email, Cust"& ~dulla^@204~        "omerVATRegNo, CustomerTINNo, ~dulla^@204~ fReg, ProductDateOfSupply FROM Custom~dulla^@204~            "r WHERE (CustomerID = @Cu~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~  System.Data.CommandType.Text
      ~dulla^@204~ pter.UpdateCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@CustomerID",~dulla^@204~ SqlDbType.NVarChar, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "CustomerID", System~dulla^@204~ Version.Current, false, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ ame", System.Data.SqlDbType.[Char], 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Cus~dulla^@204~ ystem.Data.DataRowVersion.Current, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Address", System.Data.SqlDbT~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ ress", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@City", System.Data.S~dulla^@204~ r], 0, System.Data.ParameterDirection~dulla^@204~  "City", System.Data.DataRowVersion.C~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ pdateCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@Country", System.D~dulla^@204~ .[Char], 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "Country", System.Data.DataRowV~dulla^@204~ t, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@Tel", Syst~dulla^@204~ Type.[Char], 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "Tel", System.Data.DataRowV~dulla^@204~ t, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@Fax", Syst~dulla^@204~ Type.[Char], 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "Fax", System.Data.DataRowV~dulla^@204~ t, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@PostalAddr~dulla^@204~ Data.SqlDbType.[Char], 0, System.Data~dulla^@204~ ection.Input, 0, 0, "PostalAddress", ~dulla^@204~ ataRowVersion.Current, false, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ il", System.Data.SqlDbType.[Char], 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Emai~dulla^@204~ ta.DataRowVersion.Current, false, Not~dulla^@204~  ""))
            Me._adapter.Update~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @CustomerVATRegNo", System.Data.SqlDb~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ CustomerVATRegNo", System.Data.DataRo~dulla^@204~ ent, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.UpdateCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@Customer~dulla^@204~ m.Data.SqlDbType.[Char], 0, System.Da~dulla^@204~ irection.Input, 0, 0, "CustomerTINNo"~dulla^@204~ .DataRowVersion.Current, false, Nothi~dulla^@204~ "))
            Me._adapter.UpdateCo~dulla^@204~ ers.Add(New System.Data.SqlClient.SqlParameter("@CustomerDateOfReg", System.Dat~dulla^@204~ ateTime, 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "CustomerDateOfReg", System.Dat~dulla^@204~ ion.Current, false, Nothing, "", "", ~dulla^@204~      Me._adapter.UpdateCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ Supply", System.Data.SqlDbType.DateTi~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ OfSupply", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@Original_Custome~dulla^@204~ Data.SqlDbType.NVarChar, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "CustomerID", S~dulla^@204~ taRowVersion.Original, false, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ull_CustomerName", System.Data.SqlDbT~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ erName", System.Data.DataRowVersion.O~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ pdateCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@Original_CustomerN~dulla^@204~ Data.SqlDbType.[Char], 0, System.Data~dulla^@204~ ection.Input, 0, 0, "CustomerName", S~dulla^@204~ taRowVersion.Original, false, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ginal_Address", System.Data.SqlDbType~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ s", System.Data.DataRowVersion.Origin~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@Original_City", System~dulla^@204~ pe.[Char], 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "City", System.Data.DataRowVe~dulla^@204~ l, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@Original_C~dulla^@204~ em.Data.SqlDbType.[Char], 0, System.D~dulla^@204~ Direction.Input, 0, 0, "Country", Sys~dulla^@204~ RowVersion.Original, false, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ nal_Tel", System.Data.SqlDbType.[Char~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ .Data.DataRowVersion.Original, false,~dulla^@204~  "", ""))
            Me._adapter.Up~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@Original_Fax", System.Data.SqlDb~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ x", System.Data.DataRowVersion.Origin~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@Original_PostalAddress~dulla^@204~ a.SqlDbType.[Char], 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "PostalAddress", Sys~dulla^@204~ RowVersion.Original, false, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ nal_Email", System.Data.SqlDbType.[Ch~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ stem.Data.DataRowVersion.Original, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@IsNull_CustomerVATRegNo", Sy~dulla^@204~ DbType.Int, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "CustomerVATRegNo", System.D~dulla^@204~ rsion.Original, true, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ stomerVATRegNo", System.Data.SqlDbTyp~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ tomerVATRegNo", System.Data.DataRowVe~dulla^@204~ l, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@IsNull_Cus~dulla^@204~ System.Data.SqlDbType.Int, 0, System.~dulla^@204~ rDirection.Input, 0, 0, "CustomerTINN~dulla^@204~ ta.DataRowVersion.Original, true, Not~dulla^@204~  ""))
            Me._adapter.Update~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @Original_CustomerTINNo", System.Data~dulla^@204~ har], 0, System.Data.ParameterDirecti~dulla^@204~ 0, "CustomerTINNo", System.Data.DataR~dulla^@204~ ginal, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.UpdateCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@IsNull~dulla^@204~ OfReg", System.Data.SqlDbType.Int, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Cust~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@Original_CustomerDateOfR~dulla^@204~ ata.SqlDbType.DateTime, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "CustomerDateOfR~dulla^@204~ ata.DataRowVersion.Original, false, N~dulla^@204~ ", ""))
            Me._adapter.Upda~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@IsNull_ProductDateOfSupply", Syste~dulla^@204~ ype.Int, 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "ProductDateOfSupply", System.D~dulla^@204~ rsion.Original, true, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ oductDateOfSupply", System.Data.SqlDb~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ ProductDateOfSupply", System.Data.Dat~dulla^@204~ riginal, false, Nothing, "", "", ""))~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ InitConnection()
            Me._con~dulla^@204~  System.Data.SqlClient.SqlConnection~dulla^@204~ Me._connection.ConnectionString = Glo~dulla^@204~ ControlSystem.My.MySettings.Default.I~dulla^@204~ olSystemConnectionString
        End~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Private Sub ~dulla^@204~ llection()
            Me._commandCo~dulla^@204~ w System.Data.SqlClient.SqlCommand(0)~dulla^@204~     Me._commandCollection(0) = New Sy~dulla^@204~ Client.SqlCommand
            Me._co~dulla^@204~ on(0).Connection = Me.Connection
   ~dulla^@204~ commandCollection(0).CommandText = "S~dulla^@204~ rID, CustomerName, Address, City, Cou~dulla^@204~ x, PostalAddress,"& _ 
             ~dulla^@204~ ustomerVATRegNo, CustomerTINNo, Custo~dulla^@204~  ProductDateOfSupply "& _ 
         ~dulla^@204~ dbo.Customer"
            Me._comman~dulla^@204~ ).CommandType = System.Data.CommandTy~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute(),  _
~dulla^@204~ em.ComponentModel.Design.HelpKeywordA~dulla^@204~ data.TableAdapter"),  _
         Sys~dulla^@204~ Model.DataObjectMethodAttribute(Syste~dulla^@204~ del.DataObjectMethodType.Fill, true)>~dulla^@204~ Public Overloads Overridable Function~dulla^@204~ ataTable As InventoryControlSystemDat~dulla^@204~ rDataTable) As Integer
            M~dulla^@204~ ectCommand = Me.CommandCollection(0)~dulla^@204~ If (Me.ClearBeforeFill = true) Then
~dulla^@204~    dataTable.Clear
            End I~dulla^@204~   Dim returnValue As Integer = Me.Ada~dulla^@204~ aTable)
            Return returnVal~dulla^@204~ nd Function
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute(),  _
~dulla^@204~ em.ComponentModel.Design.HelpKeywordA~dulla^@204~ data.TableAdapter"),  _
         Sys~dulla^@204~ Model.DataObjectMethodAttribute(Syste~dulla^@204~ del.DataObjectMethodType.[Select], tr~dulla^@204~     Public Overloads Overridable Func~dulla^@204~ ) As InventoryControlSystemDataSet1.C~dulla^@204~ ble
            Me.Adapter.SelectCom~dulla^@204~ mandCollection(0)
            Dim da~dulla^@204~ ventoryControlSystemDataSet1.Customer~dulla^@204~ ew InventoryControlSystemDataSet1.Cus~dulla^@204~ e
            Me.Adapter.Fill(dataTa~dulla^@204~      Return dataTable
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute(),  _
         System.Co~dulla^@204~ Design.HelpKeywordAttribute("vs.data.~dulla^@204~ )>  _
        Public Overloads Overr~dulla^@204~ on Update(ByVal dataTable As Inventor~dulla^@204~ mDataSet1.CustomerDataTable) As Integer
            Return Me.Adapter.Update(d~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~    System.ComponentModel.Design.HelpK~dulla^@204~ te("vs.data.TableAdapter")>  _
     ~dulla^@204~ rloads Overridable Function Update(By~dulla^@204~ s InventoryControlSystemDataSet1) As ~dulla^@204~         Return Me.Adapter.Update(data~dulla^@204~ r")
        End Function
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
         System.ComponentModel.Desig~dulla^@204~ Attribute("vs.data.TableAdapter")>  _~dulla^@204~ lic Overloads Overridable Function Up~dulla^@204~ taRow As System.Data.DataRow) As Inte~dulla^@204~     Return Me.Adapter.Update(New Syst~dulla^@204~ ow() {dataRow})
        End Function~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute(),  _
         System.Componen~dulla^@204~ .HelpKeywordAttribute("vs.data.TableA~dulla^@204~ 
        Public Overloads Overridable~dulla^@204~ ate(ByVal dataRows() As System.Data.D~dulla^@204~ teger
            Return Me.Adapter.~dulla^@204~ ws)
        End Function
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
         System.ComponentModel.Desig~dulla^@204~ Attribute("vs.data.TableAdapter"),  _~dulla^@204~ stem.ComponentModel.DataObjectMethodA~dulla^@204~ em.ComponentModel.DataObjectMethodTyp~dulla^@204~ e)>  _
        Public Overloads Over~dulla^@204~ ion Delete(ByVal Original_CustomerID ~dulla^@204~ Val Original_CustomerName As String, ~dulla^@204~ l_Address As String, ByVal Original_C~dulla^@204~ , ByVal Original_Country As String, B~dulla^@204~ _Tel As String, ByVal Original_Fax As~dulla^@204~ l Original_PostalAddress As String, B~dulla^@204~ _Email As String, ByVal Original_Cust~dulla^@204~ As String, ByVal Original_CustomerTIN~dulla^@204~  ByVal Original_CustomerDateOfReg As ~dulla^@204~ le(Of Date), ByVal Original_ProductDa~dulla^@204~  System.Nullable(Of Date)) As Integer~dulla^@204~  If (Original_CustomerID Is Nothing) ~dulla^@204~          Throw New System.ArgumentNul~dulla^@204~ riginal_CustomerID")
            Els~dulla^@204~       Me.Adapter.DeleteCommand.Parame~dulla^@204~  = CType(Original_CustomerID,String)~dulla^@204~ End If
            If (Original_Cust~dulla^@204~ othing) Then
                Me.Adap~dulla^@204~ mand.Parameters(1).Value = CType(1,Ob~dulla^@204~           Me.Adapter.DeleteCommand.Pa~dulla^@204~ alue = System.DBNull.Value
         ~dulla^@204~             Me.Adapter.DeleteCommand.~dulla^@204~ .Value = CType(0,Object)
           ~dulla^@204~ er.DeleteCommand.Parameters(2).Value ~dulla^@204~ nal_CustomerName,String)
           ~dulla^@204~         If (Original_Address Is Nothi~dulla^@204~              Throw New System.Argumen~dulla^@204~ n("Original_Address")
            El~dulla^@204~        Me.Adapter.DeleteCommand.Param~dulla^@204~ e = CType(Original_Address,String)
 ~dulla^@204~ d If
            If (Original_City I~dulla^@204~ en
                Throw New System.~dulla^@204~ xception("Original_City")
          ~dulla^@204~            Me.Adapter.DeleteCommand.P~dulla^@204~ Value = CType(Original_City,String)
~dulla^@204~ nd If
            If (Original_Count~dulla^@204~ ) Then
                Throw New Sys~dulla^@204~ ullException("Original_Country")
   ~dulla^@204~ 
                Me.Adapter.DeleteCo~dulla^@204~ ers(5).Value = CType(Original_Country~dulla^@204~          End If
            If (Orig~dulla^@204~ othing) Then
                Throw N~dulla^@204~ umentNullException("Original_Tel")
 ~dulla^@204~ se
                Me.Adapter.Delete~dulla^@204~ eters(6).Value = CType(Original_Tel,S~dulla^@204~        End If
            If (Origin~dulla^@204~ hing) Then
                Throw New~dulla^@204~ entNullException("Original_Fax")
   ~dulla^@204~ 
                Me.Adapter.DeleteCo~dulla^@204~ ers(7).Value = CType(Original_Fax,Str~dulla^@204~      End If
            If (Original~dulla^@204~ s Is Nothing) Then
                T~dulla^@204~ em.ArgumentNullException("Original_Po~dulla^@204~ 
            Else
                M~dulla^@204~ eteCommand.Parameters(8).Value = CTyp~dulla^@204~ stalAddress,String)
            End ~dulla^@204~    If (Original_Email Is Nothing) The~dulla^@204~       Throw New System.ArgumentNullEx~dulla^@204~ inal_Email")
            Else
     ~dulla^@204~ .Adapter.DeleteCommand.Parameters(9).~dulla^@204~ (Original_Email,String)
            ~dulla^@204~        If (Original_CustomerVATRegNo ~dulla^@204~ hen
                Me.Adapter.Delet~dulla^@204~ meters(10).Value = CType(1,Object)
 ~dulla^@204~   Me.Adapter.DeleteCommand.Parameters~dulla^@204~ System.DBNull.Value
            Else~dulla^@204~      Me.Adapter.DeleteCommand.Paramet~dulla^@204~  = CType(0,Object)
                M~dulla^@204~ eteCommand.Parameters(11).Value = CTy~dulla^@204~ ustomerVATRegNo,String)
            ~dulla^@204~        If (Original_CustomerTINNo Is ~dulla^@204~ 
                Me.Adapter.DeleteCo~dulla^@204~ ers(12).Value = CType(1,Object)
    ~dulla^@204~ e.Adapter.DeleteCommand.Parameters(13~dulla^@204~ tem.DBNull.Value
            Else
 ~dulla^@204~   Me.Adapter.DeleteCommand.Parameters~dulla^@204~ CType(0,Object)
                Me.A~dulla^@204~ Command.Parameters(13).Value = CType(~dulla^@204~ omerTINNo,String)
            End If~dulla^@204~  If (Original_CustomerDateOfReg.HasVa~dulla^@204~ hen
                Me.Adapter.Delet~dulla^@204~ meters(14).Value = CType(0,Object)
 ~dulla^@204~   Me.Adapter.DeleteCommand.Parameters~dulla^@204~ CType(Original_CustomerDateOfReg.Valu~dulla^@204~         Else
                Me.Adap~dulla^@204~ mand.Parameters(14).Value = CType(1,O~dulla^@204~            Me.Adapter.DeleteCommand.P~dulla^@204~ .Value = System.DBNull.Value
       ~dulla^@204~             If (Original_ProductDateO~dulla^@204~ lue = true) Then
                Me.~dulla^@204~ eCommand.Parameters(16).Value = CType~dulla^@204~                Me.Adapter.DeleteComma~dulla^@204~ (17).Value = CType(Original_ProductDa~dulla^@204~ lue,Date)
            Else
        ~dulla^@204~ apter.DeleteCommand.Parameters(16).Va~dulla^@204~ ,Object)
                Me.Adapter.~dulla^@204~ .Parameters(17).Value = System.DBNull~dulla^@204~        End If
            Dim previo~dulla^@204~ tate As System.Data.ConnectionState =~dulla^@204~ eleteCommand.Connection.State
      ~dulla^@204~ .Adapter.DeleteCommand.Connection.Sta~dulla^@204~ .Data.ConnectionState.Open)  _
     ~dulla^@204~       <> System.Data.ConnectionState.~dulla^@204~                Me.Adapter.DeleteComma~dulla^@204~ .Open
            End If
          ~dulla^@204~            Dim returnValue As Integer~dulla^@204~ .DeleteCommand.ExecuteNonQuery
     ~dulla^@204~ turn returnValue
            Finally~dulla^@204~      If (previousConnectionState = Sy~dulla^@204~ nectionState.Closed) Then
          ~dulla^@204~ Adapter.DeleteCommand.Connection.Clos~dulla^@204~       End If
            End Try
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute(),  _
      ~dulla^@204~ ponentModel.Design.HelpKeywordAttribu~dulla^@204~ ableAdapter"),  _
         System.Co~dulla^@204~ DataObjectMethodAttribute(System.Comp~dulla^@204~ taObjectMethodType.Insert, true)>  _~dulla^@204~ ic Overloads Overridable Function Ins~dulla^@204~ tomerID As String, ByVal CustomerName~dulla^@204~ yVal Address As String, ByVal City As~dulla^@204~ l Country As String, ByVal Tel As Str~dulla^@204~ x As String, ByVal PostalAddress As S~dulla^@204~ Email As String, ByVal CustomerVATReg~dulla^@204~  ByVal CustomerTINNo As String, ByVal~dulla^@204~ OfReg As System.Nullable(Of Date), By~dulla^@204~ teOfSupply As System.Nullable(Of Date~dulla^@204~ 
            If (CustomerID Is Nothi~dulla^@204~              Throw New System.Argumen~dulla^@204~ n("CustomerID")
            Else
  ~dulla^@204~  Me.Adapter.InsertCommand.Parameters(~dulla^@204~ ype(CustomerID,String)
            E~dulla^@204~       If (CustomerName Is Nothing) Th~dulla^@204~        Me.Adapter.InsertCommand.Param~dulla^@204~ e = System.DBNull.Value
            Else
                Me.Adapter.InsertCom~dulla^@204~ rs(1).Value = CType(CustomerName,Stri~dulla^@204~     End If
            If (Address I~dulla^@204~ en
                Throw New System.~dulla^@204~ xception("Address")
            Else~dulla^@204~      Me.Adapter.InsertCommand.Paramet~dulla^@204~ = CType(Address,String)
            ~dulla^@204~        If (City Is Nothing) Then
   ~dulla^@204~ Throw New System.ArgumentNullExceptio~dulla^@204~           Else
                Me.Ad~dulla^@204~ ommand.Parameters(3).Value = CType(Ci~dulla^@204~            End If
            If (Co~dulla^@204~ ing) Then
                Throw New ~dulla^@204~ ntNullException("Country")
         ~dulla^@204~             Me.Adapter.InsertCommand.~dulla^@204~ .Value = CType(Country,String)
     ~dulla^@204~ 
            If (Tel Is Nothing) The~dulla^@204~       Throw New System.ArgumentNullEx~dulla^@204~ )
            Else
                ~dulla^@204~ sertCommand.Parameters(5).Value = CTy~dulla^@204~ )
            End If
            If~dulla^@204~ ing) Then
                Throw New ~dulla^@204~ ntNullException("Fax")
            E~dulla^@204~         Me.Adapter.InsertCommand.Para~dulla^@204~ ue = CType(Fax,String)
            E~dulla^@204~       If (PostalAddress Is Nothing) T~dulla^@204~         Throw New System.ArgumentNull~dulla^@204~ stalAddress")
            Else
    ~dulla^@204~ e.Adapter.InsertCommand.Parameters(7)~dulla^@204~ e(PostalAddress,String)
            ~dulla^@204~        If (Email Is Nothing) Then
  ~dulla^@204~  Throw New System.ArgumentNullExcepti~dulla^@204~             Else
                Me.~dulla^@204~ tCommand.Parameters(8).Value = CType(~dulla^@204~ 
            End If
            If ~dulla^@204~ egNo Is Nothing) Then
              ~dulla^@204~ InsertCommand.Parameters(9).Value = S~dulla^@204~ Value
            Else
            ~dulla^@204~ r.InsertCommand.Parameters(9).Value =~dulla^@204~ erVATRegNo,String)
            End I~dulla^@204~   If (CustomerTINNo Is Nothing) Then~dulla^@204~     Me.Adapter.InsertCommand.Paramete~dulla^@204~ = System.DBNull.Value
            El~dulla^@204~        Me.Adapter.InsertCommand.Param~dulla^@204~ ue = CType(CustomerTINNo,String)
   ~dulla^@204~ If
            If (CustomerDateOfReg~dulla^@204~ rue) Then
                Me.Adapter~dulla^@204~ d.Parameters(11).Value = CType(Custom~dulla^@204~ alue,Date)
            Else
       ~dulla^@204~ dapter.InsertCommand.Parameters(11).V~dulla^@204~ .DBNull.Value
            End If
  ~dulla^@204~ (ProductDateOfSupply.HasValue = true)~dulla^@204~           Me.Adapter.InsertCommand.Pa~dulla^@204~ Value = CType(ProductDateOfSupply.Val~dulla^@204~          Else
                Me.Ada~dulla^@204~ mmand.Parameters(12).Value = System.D~dulla^@204~             End If
            Dim p~dulla^@204~ tionState As System.Data.ConnectionSt~dulla^@204~ ter.InsertCommand.Connection.State
 ~dulla^@204~  ((Me.Adapter.InsertCommand.Connectio~dulla^@204~ ystem.Data.ConnectionState.Open)  _
~dulla^@204~            <> System.Data.ConnectionS~dulla^@204~ en
                Me.Adapter.Insert~dulla^@204~ ction.Open
            End If
     ~dulla^@204~                 Dim returnValue As In~dulla^@204~ apter.InsertCommand.ExecuteNonQuery
~dulla^@204~    Return returnValue
            Fi~dulla^@204~           If (previousConnectionState~dulla^@204~ a.ConnectionState.Closed) Then
     ~dulla^@204~   Me.Adapter.InsertCommand.Connection~dulla^@204~            End If
            End Tr~dulla^@204~ d Function
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute(),  _
 ~dulla^@204~ m.ComponentModel.Design.HelpKeywordAt~dulla^@204~ ata.TableAdapter"),  _
         Syst~dulla^@204~ odel.DataObjectMethodAttribute(System~dulla^@204~ el.DataObjectMethodType.Update, true)~dulla^@204~  Public Overloads Overridable Functio~dulla^@204~                     ByVal CustomerID ~dulla^@204~ 
                    ByVal CustomerN~dulla^@204~ ,  _
                    ByVal Addre~dulla^@204~   _
                    ByVal City A~dulla^@204~ 
                    ByVal Country As~dulla^@204~                     ByVal Tel As Stri~dulla^@204~                ByVal Fax As String,  ~dulla^@204~           ByVal PostalAddress As Stri~dulla^@204~                ByVal Email As String,~dulla^@204~             ByVal CustomerVATRegNo As~dulla^@204~                     ByVal CustomerTIN~dulla^@204~   _
                    ByVal Custom~dulla^@204~ s System.Nullable(Of Date),  _
     ~dulla^@204~   ByVal ProductDateOfSupply As System~dulla^@204~ Date),  _
                    ByVal ~dulla^@204~ omerID As String,  _
               ~dulla^@204~ iginal_CustomerName As String,  _
  ~dulla^@204~      ByVal Original_Address As String~dulla^@204~              ByVal Original_City As S~dulla^@204~                   ByVal Original_Coun~dulla^@204~ ,  _
                    ByVal Origi~dulla^@204~ ring,  _
                    ByVal O~dulla^@204~ s String,  _
                    ByV~dulla^@204~ ostalAddress As String,  _
         ~dulla^@204~ Val Original_Email As String,  _
   ~dulla^@204~     ByVal Original_CustomerVATRegNo A~dulla^@204~ 
                    ByVal Original_C~dulla^@204~ As String,  _
                    By~dulla^@204~ CustomerDateOfReg As System.Nullable(~dulla^@204~ 
                    ByVal Original_P~dulla^@204~ upply As System.Nullable(Of Date)) As~dulla^@204~          If (CustomerID Is Nothing) T~dulla^@204~         Throw New System.ArgumentNull~dulla^@204~ stomerID")
            Else
       ~dulla^@204~ dapter.UpdateCommand.Parameters(0).Va~dulla^@204~ ustomerID,String)
            End If~dulla^@204~  If (CustomerName Is Nothing) Then
 ~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ ystem.DBNull.Value
            Else~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~  CType(CustomerName,String)
        ~dulla^@204~            If (Address Is Nothing) Th~dulla^@204~        Throw New System.ArgumentNullE~dulla^@204~ ress")
            Else
           ~dulla^@204~ er.UpdateCommand.Parameters(2).Value ~dulla^@204~ ss,String)
            End If
     ~dulla^@204~ ty Is Nothing) Then
                ~dulla^@204~ tem.ArgumentNullException("City")
  ~dulla^@204~ e
                Me.Adapter.UpdateC~dulla^@204~ ters(3).Value = CType(City,String)
 ~dulla^@204~ d If
            If (Country Is Noth~dulla^@204~               Throw New System.Argume~dulla^@204~ on("Country")
            Else
    ~dulla^@204~ e.Adapter.UpdateCommand.Parameters(4)~dulla^@204~ e(Country,String)
            End If~dulla^@204~  If (Tel Is Nothing) Then
          ~dulla^@204~ ew System.ArgumentNullException("Tel"~dulla^@204~   Else
                Me.Adapter.Up~dulla^@204~ arameters(5).Value = CType(Tel,String~dulla^@204~   End If
            If (Fax Is Noth~dulla^@204~               Throw New System.Argume~dulla^@204~ on("Fax")
            Else
        ~dulla^@204~ apter.UpdateCommand.Parameters(6).Val~dulla^@204~ x,String)
            End If
      ~dulla^@204~ talAddress Is Nothing) Then
        ~dulla^@204~  New System.ArgumentNullException("Po~dulla^@204~ 
            Else
                M~dulla^@204~ ateCommand.Parameters(7).Value = CTyp~dulla^@204~ ss,String)
            End If
     ~dulla^@204~ ail Is Nothing) Then
               ~dulla^@204~ stem.ArgumentNullException("Email")
~dulla^@204~ lse
                Me.Adapter.Updat~dulla^@204~ meters(8).Value = CType(Email,String)~dulla^@204~  End If
            If (CustomerVATR~dulla^@204~ ng) Then
                Me.Adapter.~dulla^@204~ .Parameters(9).Value = System.DBNull.~dulla^@204~       Else
                Me.Adapte~dulla^@204~ nd.Parameters(9).Value = CType(Custom~dulla^@204~ ring)
            End If
          ~dulla^@204~ rTINNo Is Nothing) Then
            ~dulla^@204~ r.UpdateCommand.Parameters(10).Value ~dulla^@204~ ll.Value
            Else
         ~dulla^@204~ pter.UpdateCommand.Parameters(10).Val~dulla^@204~ stomerTINNo,String)
            End ~dulla^@204~    If (CustomerDateOfReg.HasValue = t~dulla^@204~               Me.Adapter.UpdateCommand.Parameters(11).Value = CType(CustomerDat~dulla^@204~ Date)
            Else
            ~dulla^@204~ r.UpdateCommand.Parameters(11).Value ~dulla^@204~ ll.Value
            End If
       ~dulla^@204~ uctDateOfSupply.HasValue = true) Then~dulla^@204~      Me.Adapter.UpdateCommand.Paramet~dulla^@204~  = CType(ProductDateOfSupply.Value,Da~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(12).Value = System.DBNull~dulla^@204~        End If
            If (Origin~dulla^@204~  Is Nothing) Then
                Th~dulla^@204~ m.ArgumentNullException("Original_Cus~dulla^@204~           Else
                Me.Ad~dulla^@204~ ommand.Parameters(13).Value = CType(O~dulla^@204~ merID,String)
            End If
  ~dulla^@204~ (Original_CustomerName Is Nothing) Th~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ ue = CType(1,Object)
               ~dulla^@204~ pdateCommand.Parameters(15).Value = S~dulla^@204~ Value
            Else
            ~dulla^@204~ r.UpdateCommand.Parameters(14).Value ~dulla^@204~ ect)
                Me.Adapter.Upda~dulla^@204~ ameters(15).Value = CType(Original_Cu~dulla^@204~ ring)
            End If
          ~dulla^@204~ l_Address Is Nothing) Then
         ~dulla^@204~ New System.ArgumentNullException("Ori~dulla^@204~ ")
            Else
               ~dulla^@204~ pdateCommand.Parameters(16).Value = C~dulla^@204~ _Address,String)
            End If~dulla^@204~ If (Original_City Is Nothing) Then
 ~dulla^@204~   Throw New System.ArgumentNullExcept~dulla^@204~ _City")
            Else
          ~dulla^@204~ ter.UpdateCommand.Parameters(17).Valu~dulla^@204~ ginal_City,String)
            End I~dulla^@204~   If (Original_Country Is Nothing) Th~dulla^@204~        Throw New System.ArgumentNullE~dulla^@204~ ginal_Country")
            Else
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ Type(Original_Country,String)
      ~dulla^@204~ 
            If (Original_Tel Is Noth~dulla^@204~               Throw New System.Argume~dulla^@204~ on("Original_Tel")
            Else~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~ = CType(Original_Tel,String)
       ~dulla^@204~             If (Original_Fax Is Nothi~dulla^@204~              Throw New System.Argumen~dulla^@204~ n("Original_Fax")
            Else
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~  CType(Original_Fax,String)
        ~dulla^@204~            If (Original_PostalAddress~dulla^@204~ Then
                Throw New Syste~dulla^@204~ lException("Original_PostalAddress")~dulla^@204~ Else
                Me.Adapter.Upda~dulla^@204~ ameters(21).Value = CType(Original_Po~dulla^@204~ tring)
            End If
         ~dulla^@204~ al_Email Is Nothing) Then
          ~dulla^@204~ ew System.ArgumentNullException("Orig~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(22).Value = CTyp~dulla^@204~ ail,String)
            End If
    ~dulla^@204~ riginal_CustomerVATRegNo Is Nothing) ~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ alue = CType(1,Object)
             ~dulla^@204~ .UpdateCommand.Parameters(24).Value =~dulla^@204~ l.Value
            Else
          ~dulla^@204~ ter.UpdateCommand.Parameters(23).Valu~dulla^@204~ bject)
                Me.Adapter.Up~dulla^@204~ arameters(24).Value = CType(Original_~dulla^@204~ gNo,String)
            End If
    ~dulla^@204~ riginal_CustomerTINNo Is Nothing) The~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~ e = CType(1,Object)
                ~dulla^@204~ dateCommand.Parameters(26).Value = Sy~dulla^@204~ alue
            Else
             ~dulla^@204~ .UpdateCommand.Parameters(25).Value =~dulla^@204~ ct)
                Me.Adapter.Updat~dulla^@204~ meters(26).Value = CType(Original_Cus~dulla^@204~ ring)
            End If
          ~dulla^@204~ l_CustomerDateOfReg.HasValue = true) ~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ alue = CType(0,Object)
             ~dulla^@204~ .UpdateCommand.Parameters(28).Value =~dulla^@204~ al_CustomerDateOfReg.Value,Date)
   ~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(27).Value = CType(1,Object)
    ~dulla^@204~ e.Adapter.UpdateCommand.Parameters(28~dulla^@204~ tem.DBNull.Value
            End If~dulla^@204~ If (Original_ProductDateOfSupply.HasV~dulla^@204~ Then
                Me.Adapter.Upda~dulla^@204~ ameters(29).Value = CType(0,Object)
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~  CType(Original_ProductDateOfSupply.V~dulla^@204~            Else
                Me.A~dulla^@204~ Command.Parameters(29).Value = CType(~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 30).Value = System.DBNull.Value
    ~dulla^@204~ f
            Dim previousConnection~dulla^@204~ em.Data.ConnectionState = Me.Adapter.~dulla^@204~ .Connection.State
            If ((M~dulla^@204~ ateCommand.Connection.State And Syste~dulla^@204~ tionState.Open)  _
                 ~dulla^@204~ tem.Data.ConnectionState.Open) Then
~dulla^@204~    Me.Adapter.UpdateCommand.Connectio~dulla^@204~        End If
            Try 
    ~dulla^@204~ im returnValue As Integer = Me.Adapte~dulla^@204~ nd.ExecuteNonQuery
                R~dulla^@204~ alue
            Finally
          ~dulla^@204~ viousConnectionState = System.Data.Co~dulla^@204~ .Closed) Then
                    Me~dulla^@204~ teCommand.Connection.Close
         ~dulla^@204~ 
            End Try
        End Fu~dulla^@204~ nd Class
    
    <System.CodeDom.C~dulla^@204~ atedCodeAttribute("System.Data.Design~dulla^@204~ Generator", "2.0.0.0"),  _
     Syst~dulla^@204~ odel.DesignerCategoryAttribute("code"~dulla^@204~ ystem.ComponentModel.ToolboxItem(true~dulla^@204~ ystem.ComponentModel.DataObjectAttrib~dulla^@204~ 
     System.ComponentModel.Designer~dulla^@204~ crosoft.VSDesigner.DataSource.Design.~dulla^@204~ esigner, Microsoft.VSDesigner"& _ 
 ~dulla^@204~ sion=8.0.0.0, Culture=neutral, Public~dulla^@204~ 5f7f11d50a3a"),  _
     System.Compo~dulla^@204~ ign.HelpKeywordAttribute("vs.data.Tab~dulla^@204~  _
    Partial Public Class InvoiceT~dulla^@204~         Inherits System.ComponentMode~dulla^@204~         
        Private WithEvents ~dulla^@204~ ystem.Data.SqlClient.SqlDataAdapter
~dulla^@204~      Private _connection As System.Da~dulla^@204~ SqlConnection
        
        Priv~dulla^@204~ ollection() As System.Data.SqlClient.~dulla^@204~        
        Private _clearBefore~dulla^@204~ an
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ ()
            MyBase.New
         ~dulla^@204~ foreFill = true
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Private ReadOnly Prop~dulla^@204~ ) As System.Data.SqlClient.SqlDataAda~dulla^@204~      Get
                If (Me._ada~dulla^@204~ ng) Then
                    Me.Init~dulla^@204~             End If
                R~dulla^@204~ pter
            End Get
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Friend~dulla^@204~ nection() As System.Data.SqlClient.Sq~dulla^@204~             Get
                If (~dulla^@204~ n Is Nothing) Then
                 ~dulla^@204~ nection
                End If
    ~dulla^@204~ eturn Me._connection
            End~dulla^@204~      Set
                Me._connect~dulla^@204~                 If (Not (Me.Adapter.I~dulla^@204~  Is Nothing) Then
                  ~dulla^@204~ InsertCommand.Connection = value
   ~dulla^@204~ End If
                If (Not (Me.A~dulla^@204~ Command) Is Nothing) Then
          ~dulla^@204~ Adapter.DeleteCommand.Connection = va~dulla^@204~         End If
                If (N~dulla^@204~ r.UpdateCommand) Is Nothing) Then
  ~dulla^@204~      Me.Adapter.UpdateCommand.Connect~dulla^@204~                 End If
             ~dulla^@204~ nteger = 0
                Do While ~dulla^@204~ ndCollection.Length)
               ~dulla^@204~ (Me.CommandCollection(i)) Is Nothing)~dulla^@204~                   CType(Me.CommandCollection(i),System.Data.SqlClient.SqlComman~dulla^@204~  = value
                    End If~dulla^@204~         i = (i + 1)
                ~dulla^@204~      End Set
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Protected ReadOnly ~dulla^@204~ andCollection() As System.Data.SqlCli~dulla^@204~ d()
            Get
               ~dulla^@204~ andCollection Is Nothing) Then
     ~dulla^@204~   Me.InitCommandCollection
         ~dulla^@204~ 
                Return Me._commandC~dulla^@204~           End Get
        End Proper~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Propert~dulla^@204~ Fill() As Boolean
            Get
 ~dulla^@204~   Return Me._clearBeforeFill
       ~dulla^@204~ 
            Set
                Me.~dulla^@204~ ill = value
            End Set
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ InitAdapter()
            Me._adapte~dulla^@204~ m.Data.SqlClient.SqlDataAdapter
    ~dulla^@204~ ableMapping As System.Data.Common.Dat~dulla^@204~  = New System.Data.Common.DataTableMa~dulla^@204~       tableMapping.SourceTable = "Tab~dulla^@204~     tableMapping.DataSetTable = "Invo~dulla^@204~      tableMapping.ColumnMappings.Add(~dulla^@204~ "InvoiceNo")
            tableMappin~dulla^@204~ ngs.Add("Date", "Date")
            ~dulla^@204~ ColumnMappings.Add("TotalAmount", "To~dulla^@204~             tableMapping.ColumnMappin~dulla^@204~ htCharge", "FrieghtCharge")
        ~dulla^@204~ ing.ColumnMappings.Add("Miscellaneous~dulla^@204~ llaneousCost")
            tableMapp~dulla^@204~ pings.Add("TotalPurchaseAmount", "Tot~dulla^@204~ unt")
            Me._adapter.TableM~dulla^@204~ ableMapping)
            Me._adapter~dulla^@204~ d = New System.Data.SqlClient.SqlComm~dulla^@204~     Me._adapter.DeleteCommand.Connect~dulla^@204~ ection
            Me._adapter.Delet~dulla^@204~ andText = "DELETE FROM [dbo].[Invoice~dulla^@204~ voiceNo] = @Original_InvoiceNo) AND (~dulla^@204~                "] = @Original_Date) A~dulla^@204~ unt] = @Original_TotalAmount) AND ((@~dulla^@204~  
                "ieghtCharge = 1 A~dulla^@204~ arge] IS NULL) OR ([FrieghtCharge] = ~dulla^@204~ "& _ 
                "eghtCharge)) ~dulla^@204~ _MiscellaneousCost = 1 AND [Miscellan~dulla^@204~ NULL"& _ 
                ") OR ([Mi~dulla^@204~ st] = @Original_MiscellaneousCost)) A~dulla^@204~ chaseAmo"& _ 
                "unt] ~dulla^@204~ otalPurchaseAmount))"
            Me~dulla^@204~ eteCommand.CommandType = System.Data.~dulla^@204~ ext
            Me._adapter.DeleteCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ riginal_InvoiceNo", System.Data.SqlDb~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ InvoiceNo", System.Data.DataRowVersio~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.DeleteCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Original_Date"~dulla^@204~ .SqlDbType.DateTime, 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "Date", System.Data~dulla^@204~ on.Original, false, Nothing, "", "", ~dulla^@204~      Me._adapter.DeleteCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ lAmount", System.Data.SqlDbType.Int, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "To~dulla^@204~ ystem.Data.DataRowVersion.Original, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@IsNull_FrieghtCharge", Syst~dulla^@204~ Type.Int, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "FrieghtCharge", System.Data.D~dulla^@204~ .Original, true, Nothing, "", "", "")~dulla^@204~   Me._adapter.DeleteCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@Ori~dulla^@204~ Charge", System.Data.SqlDbType.Int, 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Fri~dulla^@204~ System.Data.DataRowVersion.Original, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@IsNull_MiscellaneousCost",~dulla^@204~ SqlDbType.Int, 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "MiscellaneousCost", Syst~dulla^@204~ owVersion.Original, true, Nothing, ""~dulla^@204~            Me._adapter.DeleteCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ l_MiscellaneousCost", System.Data.Sql~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ cellaneousCost", System.Data.DataRowV~dulla^@204~ al, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.DeleteCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Original_~dulla^@204~ Amount", System.Data.SqlDbType.Int, 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Tot~dulla^@204~ unt", System.Data.DataRowVersion.Orig~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ertCommand = New System.Data.SqlClien~dulla^@204~ 
            Me._adapter.InsertComman~dulla^@204~ = Me.Connection
            Me._adap~dulla^@204~ mand.CommandText = "INSERT INTO [dbo]~dulla^@204~ InvoiceNo], [Date], [TotalAmount], [F~dulla^@204~ ,"& _ 
                " [Miscellane~dulla^@204~ talPurchaseAmount]) VALUES (@InvoiceN~dulla^@204~ talAm"& _ 
                "ount, @F~dulla^@204~  @MiscellaneousCost, @TotalPurchaseAm~dulla^@204~ l.Microsoft.VisualBasic.ChrW(13)&Glob~dulla^@204~ VisualBasic.ChrW(10)&"SELECT Invoice"~dulla^@204~          "No, Date, TotalAmount, Frie~dulla^@204~ scellaneousCost, TotalPurchaseAmount ~dulla^@204~              "M Invoice WHERE (Invoic~dulla^@204~ eNo)"
            Me._adapter.Insert~dulla^@204~ ndType = System.Data.CommandType.Text~dulla^@204~  Me._adapter.InsertCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Invo~dulla^@204~ m.Data.SqlDbType.NVarChar, 0, System.~dulla^@204~ rDirection.Input, 0, 0, "InvoiceNo", ~dulla^@204~ ataRowVersion.Current, false, Nothing~dulla^@204~ )
            Me._adapter.InsertComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ e", System.Data.SqlDbType.DateTime, 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Dat~dulla^@204~ ta.DataRowVersion.Current, false, Not~dulla^@204~  ""))
            Me._adapter.Insert~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @TotalAmount", System.Data.SqlDbType.~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ t", System.Data.DataRowVersion.Curren~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@FrieghtCharge", System.~dulla^@204~ e.Int, 0, System.Data.ParameterDirect~dulla^@204~  0, "FrieghtCharge", System.Data.Data~dulla^@204~ rrent, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.InsertCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@Miscel~dulla^@204~  System.Data.SqlDbType.Int, 0, System~dulla^@204~ erDirection.Input, 0, 0, "Miscellaneo~dulla^@204~ em.Data.DataRowVersion.Current, false~dulla^@204~ , "", ""))
            Me._adapter.I~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@TotalPurchaseAmount", System.Da~dulla^@204~ Int, 0, System.Data.ParameterDirectio~dulla^@204~ , "TotalPurchaseAmount", System.Data.~dulla^@204~ n.Current, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.UpdateCommand = New Sy~dulla^@204~ Client.SqlCommand
            Me._ad~dulla^@204~ ommand.Connection = Me.Connection
  ~dulla^@204~ _adapter.UpdateCommand.CommandText = ~dulla^@204~ .[Invoice] SET [InvoiceNo] = @Invoice~dulla^@204~ @Date, [TotalAmount"& _ 
           ~dulla^@204~ talAmount, [FrieghtCharge] = @Frieght~dulla^@204~ ellaneousCost] = @Misce"& _ 
       ~dulla^@204~ neousCost, [TotalPurchaseAmount] = @T~dulla^@204~ mount WHERE (([InvoiceNo] ="& _ 
   ~dulla^@204~ " @Original_InvoiceNo) AND ([Date] = ~dulla^@204~ e) AND ([TotalAmount] = @Origin"& _ ~dulla^@204~     "al_TotalAmount) AND ((@IsNull_Fr~dulla^@204~  1 AND [FrieghtCharge] IS NULL) OR "&~dulla^@204~         "([FrieghtCharge] = @Original~dulla^@204~ e)) AND ((@IsNull_MiscellaneousCost =~dulla^@204~             " AND [MiscellaneousCost]~dulla^@204~ ([MiscellaneousCost] = @Original_Miscellane"& _ 
                "ousCost)) AN~dulla^@204~ haseAmount] = @Original_TotalPurchase~dulla^@204~ obal.Microsoft.VisualBasic.ChrW(13)&G~dulla^@204~ ft.VisualBasic.ChrW(10)&"SELECT "& _ ~dulla^@204~      "InvoiceNo, Date, TotalAmount, F~dulla^@204~  MiscellaneousCost, TotalPurchaseAmo"~dulla^@204~          "unt FROM Invoice WHERE (Inv~dulla^@204~ oiceNo)"
            Me._adapter.Upd~dulla^@204~ mmandType = System.Data.CommandType.T~dulla^@204~     Me._adapter.UpdateCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@I~dulla^@204~ stem.Data.SqlDbType.NVarChar, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "InvoiceNo~dulla^@204~ a.DataRowVersion.Current, false, Noth~dulla^@204~ ""))
            Me._adapter.UpdateC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ Date", System.Data.SqlDbType.DateTime~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ .Data.DataRowVersion.Current, false, ~dulla^@204~ "", ""))
            Me._adapter.Upd~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@TotalAmount", System.Data.SqlDbTy~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ ount", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@FrieghtCharge", Syst~dulla^@204~ Type.Int, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "FrieghtCharge", System.Data.D~dulla^@204~ .Current, false, Nothing, "", "", "")~dulla^@204~   Me._adapter.UpdateCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@Mis~dulla^@204~ t", System.Data.SqlDbType.Int, 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "Miscella~dulla^@204~ ystem.Data.DataRowVersion.Current, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@TotalPurchaseAmount", System~dulla^@204~ pe.Int, 0, System.Data.ParameterDirec~dulla^@204~ , 0, "TotalPurchaseAmount", System.Da~dulla^@204~ sion.Current, false, Nothing, "", "",~dulla^@204~       Me._adapter.UpdateCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ oiceNo", System.Data.SqlDbType.NVarCh~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@Original_Date", System.Da~dulla^@204~ DateTime, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "Date", System.Data.DataRowVer~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.UpdateCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@Original_To~dulla^@204~ ystem.Data.SqlDbType.Int, 0, System.D~dulla^@204~ Direction.Input, 0, 0, "TotalAmount",~dulla^@204~ DataRowVersion.Original, false, Nothi~dulla^@204~ "))
            Me._adapter.UpdateCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ sNull_FrieghtCharge", System.Data.Sql~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ eghtCharge", System.Data.DataRowVersi~dulla^@204~ true, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Original_Frieg~dulla^@204~ stem.Data.SqlDbType.Int, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "FrieghtCharge"~dulla^@204~ .DataRowVersion.Original, false, Noth~dulla^@204~ ""))
            Me._adapter.UpdateC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ IsNull_MiscellaneousCost", System.Dat~dulla^@204~ nt, 0, System.Data.ParameterDirection~dulla^@204~  "MiscellaneousCost", System.Data.Dat~dulla^@204~ riginal, true, Nothing, "", "", ""))~dulla^@204~ Me._adapter.UpdateCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@Origi~dulla^@204~ eousCost", System.Data.SqlDbType.Int,~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "M~dulla^@204~ ost", System.Data.DataRowVersion.Orig~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@Original_TotalPurcha~dulla^@204~ stem.Data.SqlDbType.Int, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "TotalPurchaseA~dulla^@204~ m.Data.DataRowVersion.Original, false~dulla^@204~ , "", ""))
        End Sub
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Private Sub InitConnection~dulla^@204~    Me._connection = New System.Data.S~dulla^@204~ onnection
            Me._connection~dulla^@204~ ring = Global.InventoryControlSystem.~dulla^@204~ .Default.InventoryControlSystemConnec~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ ivate Sub InitCommandCollection()
  ~dulla^@204~ _commandCollection = New System.Data.~dulla^@204~ Command(0) {}
            Me._comman~dulla^@204~ ) = New System.Data.SqlClient.SqlComm~dulla^@204~     Me._commandCollection(0).Connecti~dulla^@204~ ction
            Me._commandCollect~dulla^@204~ dText = "SELECT InvoiceNo, Date, Tota~dulla^@204~ ghtCharge, MiscellaneousCost, TotalPu~dulla^@204~              "aseAmount FROM dbo.Invo~dulla^@204~      Me._commandCollection(0).Command~dulla^@204~ .Data.CommandType.Text
        End S~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute(),  _
         System.Compon~dulla^@204~ gn.HelpKeywordAttribute("vs.data.Tabl~dulla^@204~ _
         System.ComponentModel.Dat~dulla^@204~ Attribute(System.ComponentModel.DataO~dulla^@204~ pe.Fill, true)>  _
        Public Ov~dulla^@204~ idable Function Fill(ByVal dataTable ~dulla^@204~ ontrolSystemDataSet1.InvoiceDataTable~dulla^@204~ 
            Me.Adapter.SelectCommand~dulla^@204~ Collection(0)
            If (Me.Cle~dulla^@204~ = true) Then
                dataTab~dulla^@204~          End If
            Dim retu~dulla^@204~ teger = Me.Adapter.Fill(dataTable)
 ~dulla^@204~ turn returnValue
        End Functio~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute(),  _
         System.Compone~dulla^@204~ n.HelpKeywordAttribute("vs.data.Table~dulla^@204~ 
         System.ComponentModel.Data~dulla^@204~ ttribute(System.ComponentModel.DataOb~dulla^@204~ e.[Select], true)>  _
        Public~dulla^@204~ erridable Function GetData() As Inven~dulla^@204~ stemDataSet1.InvoiceDataTable
      ~dulla^@204~ ter.SelectCommand = Me.CommandCollect~dulla^@204~        Dim dataTable As InventoryCont~dulla^@204~ Set1.InvoiceDataTable = New Inventory~dulla^@204~ DataSet1.InvoiceDataTable
          ~dulla^@204~ Fill(dataTable)
            Return d~dulla^@204~      End Function
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~   System.ComponentModel.Design.HelpKe~dulla^@204~ e("vs.data.TableAdapter")>  _
      ~dulla^@204~ loads Overridable Function Update(ByV~dulla^@204~ As InventoryControlSystemDataSet1.Inv~dulla^@204~ ) As Integer
            Return Me.A~dulla^@204~ (dataTable)
        End Function
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e(),  _
         System.ComponentMod~dulla^@204~ pKeywordAttribute("vs.data.TableAdapt~dulla^@204~      Public Overloads Overridable Fun~dulla^@204~ ByVal dataSet As InventoryControlSyst~dulla^@204~ s Integer
            Return Me.Adap~dulla^@204~ taSet, "Invoice")
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute(),  _
         System.Compon~dulla^@204~ gn.HelpKeywordAttribute("vs.data.Tabl~dulla^@204~ _
        Public Overloads Overridab~dulla^@204~ pdate(ByVal dataRow As System.Data.Da~dulla^@204~ eger
            Return Me.Adapter.U~dulla^@204~ tem.Data.DataRow() {dataRow})
      ~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute(),  _
         S~dulla^@204~ ntModel.Design.HelpKeywordAttribute("~dulla^@204~ Adapter")>  _
        Public Overloa~dulla^@204~ e Function Update(ByVal dataRows() As~dulla^@204~ DataRow) As Integer
            Retu~dulla^@204~ .Update(dataRows)
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute(),  _
         System.Compon~dulla^@204~ gn.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentM~dulla^@204~ ctMethodAttribute(System.ComponentMod~dulla^@204~ MethodType.Delete, true)>  _
       ~dulla^@204~ oads Overridable Function Delete(ByVa~dulla^@204~ voiceNo As String, ByVal Original_Dat~dulla^@204~ Val Original_TotalAmount As Integer, ~dulla^@204~ l_FrieghtCharge As System.Nullable(Of~dulla^@204~ Val Original_MiscellaneousCost As Sys~dulla^@204~ Of Integer), ByVal Original_TotalPurc~dulla^@204~  Integer) As Integer
            If ~dulla^@204~ oiceNo Is Nothing) Then
            ~dulla^@204~  System.ArgumentNullException("Origin~dulla^@204~ )
            Else
                ~dulla^@204~ leteCommand.Parameters(0).Value = CTy~dulla^@204~ nvoiceNo,String)
            End If~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(1~dulla^@204~ pe(Original_Date,Date)
            M~dulla^@204~ eteCommand.Parameters(2).Value = CTyp~dulla^@204~ talAmount,Integer)
            If (O~dulla^@204~ htCharge.HasValue = true) Then
     ~dulla^@204~ .Adapter.DeleteCommand.Parameters(3).~dulla^@204~ (0,Object)
                Me.Adapte~dulla^@204~ nd.Parameters(4).Value = CType(Origin~dulla^@204~ rge.Value,Integer)
            Else~dulla^@204~     Me.Adapter.DeleteCommand.Paramete~dulla^@204~  CType(1,Object)
                Me.~dulla^@204~ eCommand.Parameters(4).Value = System~dulla^@204~ 
            End If
            If ~dulla^@204~ cellaneousCost.HasValue = true) Then~dulla^@204~     Me.Adapter.DeleteCommand.Paramete~dulla^@204~  CType(0,Object)
                Me.~dulla^@204~ eCommand.Parameters(6).Value = CType(~dulla^@204~ ellaneousCost.Value,Integer)
       ~dulla^@204~               Me.Adapter.DeleteComman~dulla^@204~ 5).Value = CType(1,Object)
         ~dulla^@204~ pter.DeleteCommand.Parameters(6).Valu~dulla^@204~ Null.Value
            End If
     ~dulla^@204~ pter.DeleteCommand.Parameters(7).Valu~dulla^@204~ ginal_TotalPurchaseAmount,Integer)
 ~dulla^@204~ m previousConnectionState As System.D~dulla^@204~ nState = Me.Adapter.DeleteCommand.Con~dulla^@204~ 
            If ((Me.Adapter.DeleteC~dulla^@204~ tion.State And System.Data.Connection~dulla^@204~ _
                        <> System.~dulla^@204~ onState.Open) Then
                M~dulla^@204~ eteCommand.Connection.Open
         ~dulla^@204~           Try 
                Dim r~dulla^@204~  Integer = Me.Adapter.DeleteCommand.E~dulla^@204~ y
                Return returnValue~dulla^@204~  Finally
                If (previou~dulla^@204~ ate = System.Data.ConnectionState.Clo~dulla^@204~                   Me.Adapter.DeleteCo~dulla^@204~ ion.Close
                End If
  ~dulla^@204~  Try
        End Function
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
         System.ComponentModel.Desi~dulla^@204~ dAttribute("vs.data.TableAdapter"),  ~dulla^@204~ ystem.ComponentModel.DataObjectMethod~dulla^@204~ tem.ComponentModel.DataObjectMethodTy~dulla^@204~ ue)>  _
        Public Overloads Ove~dulla^@204~ tion Insert(ByVal InvoiceNo As String~dulla^@204~  As Date, ByVal TotalAmount As Intege~dulla^@204~ ghtCharge As System.Nullable(Of Integ~dulla^@204~ scellaneousCost As System.Nullable(Of~dulla^@204~ Val TotalPurchaseAmount As Integer) A~dulla^@204~           If (InvoiceNo Is Nothing) T~dulla^@204~         Throw New System.ArgumentNull~dulla^@204~ voiceNo")
            Else
        ~dulla^@204~ apter.InsertCommand.Parameters(0).Val~dulla^@204~ voiceNo,String)
            End If
~dulla^@204~ e.Adapter.InsertCommand.Parameters(1)~dulla^@204~ e(_Date,Date)
            Me.Adapter~dulla^@204~ d.Parameters(2).Value = CType(TotalAm~dulla^@204~ 
            If (FrieghtCharge.HasVa~dulla^@204~ hen
                Me.Adapter.Inser~dulla^@204~ meters(3).Value = CType(FrieghtCharge~dulla^@204~ r)
            Else
               ~dulla^@204~ nsertCommand.Parameters(3).Value = Sy~dulla^@204~ alue
            End If
           ~dulla^@204~ neousCost.HasValue = true) Then
    ~dulla^@204~ e.Adapter.InsertCommand.Parameters(4)~dulla^@204~ e(MiscellaneousCost.Value,Integer)
 ~dulla^@204~ se
                Me.Adapter.Insert~dulla^@204~ eters(4).Value = System.DBNull.Value~dulla^@204~ End If
            Me.Adapter.Insert~dulla^@204~ eters(5).Value = CType(TotalPurchaseA~dulla^@204~ )
            Dim previousConnection~dulla^@204~ em.Data.ConnectionState = Me.Adapter.~dulla^@204~ .Connection.State
            If ((M~dulla^@204~ ertCommand.Connection.State And Syste~dulla^@204~ tionState.Open)  _
                 ~dulla^@204~ tem.Data.ConnectionState.Open) Then
~dulla^@204~    Me.Adapter.InsertCommand.Connectio~dulla^@204~        End If
            Try 
    ~dulla^@204~ im returnValue As Integer = Me.Adapte~dulla^@204~ nd.ExecuteNonQuery
                R~dulla^@204~ alue
            Finally
          ~dulla^@204~ viousConnectionState = System.Data.Co~dulla^@204~ .Closed) Then
                    Me~dulla^@204~ rtCommand.Connection.Close
         ~dulla^@204~ 
            End Try
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute(),  _
         System.Co~dulla^@204~ Design.HelpKeywordAttribute("vs.data.~dulla^@204~ ),  _
         System.ComponentModel~dulla^@204~ thodAttribute(System.ComponentModel.D~dulla^@204~ odType.Update, true)>  _
        Pub~dulla^@204~  Overridable Function Update(ByVal In~dulla^@204~ ring, ByVal _Date As Date, ByVal Tota~dulla^@204~ teger, ByVal FrieghtCharge As System.~dulla^@204~ nteger), ByVal MiscellaneousCost As S~dulla^@204~ e(Of Integer), ByVal TotalPurchaseAmo~dulla^@204~ r, ByVal Original_InvoiceNo As String~dulla^@204~ nal_Date As Date, ByVal Original_Tota~dulla^@204~ teger, ByVal Original_FrieghtCharge A~dulla^@204~ able(Of Integer), ByVal Original_Misc~dulla^@204~  As System.Nullable(Of Integer), ByVa~dulla^@204~ talPurchaseAmount As Integer) As Inte~dulla^@204~     If (InvoiceNo Is Nothing) Then
 ~dulla^@204~   Throw New System.ArgumentNullExcept~dulla^@204~ o")
            Else
              ~dulla^@204~ UpdateCommand.Parameters(0).Value = C~dulla^@204~ o,String)
            End If
      ~dulla^@204~ ter.UpdateCommand.Parameters(1).Value~dulla^@204~ e,Date)
            Me.Adapter.Updat~dulla^@204~ meters(2).Value = CType(TotalAmount,I~dulla^@204~         If (FrieghtCharge.HasValue = ~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ (3).Value = CType(FrieghtCharge.Value~dulla^@204~           Else
                Me.Ad~dulla^@204~ ommand.Parameters(3).Value = System.D~dulla^@204~             End If
            If (M~dulla^@204~ ost.HasValue = true) Then
          ~dulla^@204~ ter.UpdateCommand.Parameters(4).Value~dulla^@204~ ellaneousCost.Value,Integer)
       ~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 4).Value = System.DBNull.Value
     ~dulla^@204~ 
            Me.Adapter.UpdateComman~dulla^@204~ 5).Value = CType(TotalPurchaseAmount,~dulla^@204~          If (Original_InvoiceNo Is No~dulla^@204~                 Throw New System.Argu~dulla^@204~ tion("Original_InvoiceNo")
         ~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ .Value = CType(Original_InvoiceNo,Str~dulla^@204~      End If
            Me.Adapter.U~dulla^@204~ Parameters(7).Value = CType(Original_~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ Value = CType(Original_TotalAmount,In~dulla^@204~        If (Original_FrieghtCharge.Has~dulla^@204~  Then
                Me.Adapter.Upd~dulla^@204~ rameters(9).Value = CType(0,Object)
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~  CType(Original_FrieghtCharge.Value,I~dulla^@204~         Else
                Me.Adap~dulla^@204~ mand.Parameters(9).Value = CType(1,Ob~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ Value = System.DBNull.Value
        ~dulla^@204~            If (Original_Miscellaneous~dulla^@204~  = true) Then
                Me.Ada~dulla^@204~ mmand.Parameters(11).Value = CType(0,~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ ).Value = CType(Original_Miscellaneou~dulla^@204~ nteger)
            Else
          ~dulla^@204~ ter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Ad~dulla^@204~ ommand.Parameters(12).Value = System.~dulla^@204~ 
            End If
            Me.A~dulla^@204~ Command.Parameters(13).Value = CType(~dulla^@204~ lPurchaseAmount,Integer)
           ~dulla^@204~ ConnectionState As System.Data.Connec~dulla^@204~ e.Adapter.UpdateCommand.Connection.St~dulla^@204~     If ((Me.Adapter.UpdateCommand.Con~dulla^@204~  And System.Data.ConnectionState.Open~dulla^@204~                  <> System.Data.Conne~dulla^@204~ en) Then
                Me.Adapter.~dulla^@204~ .Connection.Open
            End If~dulla^@204~ Try 
                Dim returnValue~dulla^@204~  Me.Adapter.UpdateCommand.ExecuteNonQ~dulla^@204~          Return returnValue
        ~dulla^@204~                 If (previousConnectio~dulla^@204~ em.Data.ConnectionState.Closed) Then~dulla^@204~         Me.Adapter.UpdateCommand.Conn~dulla^@204~ 
                End If
            ~dulla^@204~     End Function
    End Class
    ~dulla^@204~ .CodeDom.Compiler.GeneratedCodeAttrib~dulla^@204~ ata.Design.TypedDataSetGenerator", "2~dulla^@204~ 
     System.ComponentModel.DesignerC~dulla^@204~ ute("code"),  _
     System.Componen~dulla^@204~ xItem(true),  _
     System.Componen~dulla^@204~ jectAttribute(true),  _
     System.~dulla^@204~ l.DesignerAttribute("Microsoft.VSDesi~dulla^@204~ ce.Design.TableAdapterDesigner, Micro~dulla^@204~ er"& _ 
        ", Version=8.0.0.0, ~dulla^@204~ al, PublicKeyToken=b03f5f7f11d50a3a")~dulla^@204~ stem.ComponentModel.Design.HelpKeywor~dulla^@204~ s.data.TableAdapter")>  _
    Partia~dulla^@204~ s OrderTableAdapter
        Inherits~dulla^@204~ nentModel.Component
        
      ~dulla^@204~ hEvents _adapter As System.Data.SqlCl~dulla^@204~ dapter
        
        Private _co~dulla^@204~ ystem.Data.SqlClient.SqlConnection
 ~dulla^@204~     Private _commandCollection() As S~dulla^@204~ lClient.SqlCommand
        
       ~dulla^@204~ arBeforeFill As Boolean
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Sub New()
            ~dulla^@204~            Me.ClearBeforeFill = true~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ nly Property Adapter() As System.Data~dulla^@204~ lDataAdapter
            Get
      ~dulla^@204~ (Me._adapter Is Nothing) Then
      ~dulla^@204~  Me.InitAdapter
                End ~dulla^@204~        Return Me._adapter
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Friend Property Connection() As Sys~dulla^@204~ lient.SqlConnection
            Get~dulla^@204~     If (Me._connection Is Nothing) Th~dulla^@204~            Me.InitConnection
       ~dulla^@204~ If
                Return Me._connec~dulla^@204~      End Get
            Set
      ~dulla^@204~ _connection = value
                ~dulla^@204~ dapter.InsertCommand) Is Nothing) The~dulla^@204~           Me.Adapter.InsertCommand.Co~dulla^@204~ lue
                End If
        ~dulla^@204~ ot (Me.Adapter.DeleteCommand) Is Noth~dulla^@204~                   Me.Adapter.DeleteCo~dulla^@204~ ion = value
                End If
~dulla^@204~    If (Not (Me.Adapter.UpdateCommand)~dulla^@204~ Then
                    Me.Adapter.~dulla^@204~ .Connection = value
                ~dulla^@204~            Dim i As Integer = 0
    ~dulla^@204~ o While (i < Me.CommandCollection.Len~dulla^@204~              If (Not (Me.CommandColle~dulla^@204~ Nothing) Then
                      ~dulla^@204~ mmandCollection(i),System.Data.SqlCli~dulla^@204~ d).Connection = value
              ~dulla^@204~ 
                    i = (i + 1)
   ~dulla^@204~ Loop
            End Set
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Protec~dulla^@204~ Property CommandCollection() As Syste~dulla^@204~ ent.SqlCommand()
            Get
  ~dulla^@204~  If (Me._commandCollection Is Nothing~dulla^@204~                Me.InitCommandCollecti~dulla^@204~        End If
                Return~dulla^@204~ ollection
            End Get
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y ClearBeforeFill() As Boolean
     ~dulla^@204~                Return Me._clearBefore~dulla^@204~      End Get
            Set
      ~dulla^@204~ _clearBeforeFill = value
           ~dulla^@204~      End Property
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Private Sub InitAdapter()
         ~dulla^@204~ r = New System.Data.SqlClient.SqlData~dulla^@204~         Dim tableMapping As System.Da~dulla^@204~ aTableMapping = New System.Data.Commo~dulla^@204~ pping
            tableMapping.Sourc~dulla^@204~ le"
            tableMapping.DataSet~dulla^@204~ r"
            tableMapping.ColumnMa~dulla^@204~ rderNo", "OrderNo")
            tabl~dulla^@204~ mnMappings.Add("PartNo", "PartNo")
 ~dulla^@204~ bleMapping.ColumnMappings.Add("Descri~dulla^@204~ ription")
            tableMapping.C~dulla^@204~ .Add("Quantity", "Quantity")
       ~dulla^@204~ ter.TableMappings.Add(tableMapping)
~dulla^@204~ e._adapter.DeleteCommand = New System~dulla^@204~ nt.SqlCommand
            Me._adapte~dulla^@204~ nd.Connection = Me.Connection
      ~dulla^@204~ pter.DeleteCommand.CommandText = "DEL~dulla^@204~ ].[Order] WHERE (([OrderNo] = @Origin~dulla^@204~ ND ([PartNo] = "& _ 
               ~dulla^@204~ artNo) AND ([Description] = @Original~dulla^@204~  AND ([Quantity] = "& _ 
           ~dulla^@204~ al_Quantity))"
            Me._adapt~dulla^@204~ and.CommandType = System.Data.Command~dulla^@204~           Me._adapter.DeleteCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~ _OrderNo", System.Data.SqlDbType.NVar~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@Original_PartNo", System.~dulla^@204~ e.NVarChar, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "PartNo", System.Data.DataRo~dulla^@204~ inal, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.DeleteCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Origina~dulla^@204~ ", System.Data.SqlDbType.[Char], 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "Descri~dulla^@204~ m.Data.DataRowVersion.Original, false~dulla^@204~ , "", ""))
            Me._adapter.D~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@Original_Quantity", System.Data~dulla^@204~ t, 0, System.Data.ParameterDirection.~dulla^@204~ "Quantity", System.Data.DataRowVersio~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.InsertCommand = New System.Data.Sq~dulla^@204~ mmand
            Me._adapter.Insert~dulla^@204~ ction = Me.Connection
            Me~dulla^@204~ ertCommand.CommandText = "INSERT INTO~dulla^@204~ ] ([OrderNo], [PartNo], [Description]~dulla^@204~  VALUES"& _ 
                " (@Ord~dulla^@204~ , @Description, @Quantity);"&Global.M~dulla^@204~ alBasic.ChrW(13)&Global.Microsoft.Vis~dulla^@204~ (10)&"SELECT OrderNo, PartNo, Descrip~dulla^@204~            "ion, Quantity FROM [Order~dulla^@204~ rNo = @OrderNo)"
            Me._ada~dulla^@204~ mmand.CommandType = System.Data.Comma~dulla^@204~             Me._adapter.InsertCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ o", System.Data.SqlDbType.NVarChar, 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Ord~dulla^@204~ .Data.DataRowVersion.Current, false, ~dulla^@204~ "", ""))
            Me._adapter.Ins~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@PartNo", System.Data.SqlDbType.NV~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ , System.Data.DataRowVersion.Current,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@Description", System.Data~dulla^@204~ har], 0, System.Data.ParameterDirecti~dulla^@204~ 0, "Description", System.Data.DataRowVersion.Current, false, Nothing, "", "", "~dulla^@204~     Me._adapter.InsertCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@Q~dulla^@204~ tem.Data.SqlDbType.Int, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "Quantity", Syst~dulla^@204~ owVersion.Current, false, Nothing, ""~dulla^@204~            Me._adapter.UpdateCommand ~dulla^@204~ Data.SqlClient.SqlCommand
          ~dulla^@204~ .UpdateCommand.Connection = Me.Connec~dulla^@204~      Me._adapter.UpdateCommand.Comman~dulla^@204~ TE [dbo].[Order] SET [OrderNo] = @Ord~dulla^@204~ ] = @PartNo, [Description] "& _ 
   ~dulla^@204~ "= @Description, [Quantity] = @Quanti~dulla^@204~ rderNo] = @Original_OrderNo) AN"& _ ~dulla^@204~     "D ([PartNo] = @Original_PartNo) ~dulla^@204~ tion] = @Original_Description) AND "&~dulla^@204~         "([Quantity] = @Original_Quan~dulla^@204~ al.Microsoft.VisualBasic.ChrW(13)&Glo~dulla^@204~ .VisualBasic.ChrW(10)&"SELECT OrderNo~dulla^@204~ cription, Quanti"& _ 
              ~dulla^@204~ rder] WHERE (OrderNo = @OrderNo)"
  ~dulla^@204~ _adapter.UpdateCommand.CommandType = ~dulla^@204~ ommandType.Text
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@OrderNo", System.Data.SqlD~dulla^@204~ r, 0, System.Data.ParameterDirection.~dulla^@204~ "OrderNo", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@PartNo", System.~dulla^@204~ e.NVarChar, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "PartNo", System.Data.DataRo~dulla^@204~ ent, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.UpdateCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@Descript~dulla^@204~ Data.SqlDbType.[Char], 0, System.Data~dulla^@204~ ection.Input, 0, 0, "Description", Sy~dulla^@204~ aRowVersion.Current, false, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ ity", System.Data.SqlDbType.Int, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "Quanti~dulla^@204~ ata.DataRowVersion.Current, false, No~dulla^@204~ , ""))
            Me._adapter.Updat~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@Original_OrderNo", System.Data.SqlD~dulla^@204~ r, 0, System.Data.ParameterDirection.~dulla^@204~ "OrderNo", System.Data.DataRowVersion~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.UpdateCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@Original_PartNo~dulla^@204~ a.SqlDbType.NVarChar, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "PartNo", System.D~dulla^@204~ rsion.Original, false, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ escription", System.Data.SqlDbType.[C~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ on", System.Data.DataRowVersion.Origi~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@Original_Quantity", S~dulla^@204~ lDbType.Int, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "Quantity", System.Data.Dat~dulla^@204~ riginal, false, Nothing, "", "", ""))~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ InitConnection()
            Me._con~dulla^@204~  System.Data.SqlClient.SqlConnection~dulla^@204~ Me._connection.ConnectionString = Glo~dulla^@204~ ControlSystem.My.MySettings.Default.I~dulla^@204~ olSystemConnectionString
        End~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Private Sub ~dulla^@204~ llection()
            Me._commandCo~dulla^@204~ w System.Data.SqlClient.SqlCommand(0)~dulla^@204~     Me._commandCollection(0) = New Sy~dulla^@204~ Client.SqlCommand
            Me._co~dulla^@204~ on(0).Connection = Me.Connection
   ~dulla^@204~ commandCollection(0).CommandText = "S~dulla^@204~ , PartNo, Description, Quantity FROM ~dulla^@204~ 
            Me._commandCollection(0)~dulla^@204~ = System.Data.CommandType.Text
     ~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute(),  _
         Syste~dulla^@204~ del.Design.HelpKeywordAttribute("vs.d~dulla^@204~ ter"),  _
         System.ComponentM~dulla^@204~ ctMethodAttribute(System.ComponentMod~dulla^@204~ MethodType.Fill, true)>  _
        P~dulla^@204~ ds Overridable Function Fill(ByVal da~dulla^@204~ ventoryControlSystemDataSet1.OrderDat~dulla^@204~ teger
            Me.Adapter.SelectC~dulla^@204~ ommandCollection(0)
            If (~dulla^@204~ eFill = true) Then
                d~dulla^@204~ r
            End If
            Di~dulla^@204~  As Integer = Me.Adapter.Fill(dataTab~dulla^@204~     Return returnValue
        End F~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute(),  _
         System.C~dulla^@204~ .Design.HelpKeywordAttribute("vs.data~dulla^@204~ "),  _
         System.ComponentMode~dulla^@204~ ethodAttribute(System.ComponentModel.~dulla^@204~ hodType.[Select], true)>  _
        ~dulla^@204~ ads Overridable Function GetData() As~dulla^@204~ trolSystemDataSet1.OrderDataTable
  ~dulla^@204~ Adapter.SelectCommand = Me.CommandCol~dulla^@204~            Dim dataTable As Inventory~dulla^@204~ DataSet1.OrderDataTable = New Invento~dulla^@204~ emDataSet1.OrderDataTable
          ~dulla^@204~ Fill(dataTable)
            Return d~dulla^@204~      End Function
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~   System.ComponentModel.Design.HelpKe~dulla^@204~ e("vs.data.TableAdapter")>  _
      ~dulla^@204~ loads Overridable Function Update(ByV~dulla^@204~ As InventoryControlSystemDataSet1.Ord~dulla^@204~ As Integer
            Return Me.Ada~dulla^@204~ ataTable)
        End Function
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ ),  _
         System.ComponentModel~dulla^@204~ eywordAttribute("vs.data.TableAdapter~dulla^@204~    Public Overloads Overridable Funct~dulla^@204~ Val dataSet As InventoryControlSystem~dulla^@204~ Integer
            Return Me.Adapte~dulla^@204~ Set, "Order")
        End Function
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute(),  _
         System.ComponentM~dulla^@204~ elpKeywordAttribute("vs.data.TableAda~dulla^@204~        Public Overloads Overridable F~dulla^@204~ e(ByVal dataRow As System.Data.DataRo~dulla^@204~ 
            Return Me.Adapter.Updat~dulla^@204~ Data.DataRow() {dataRow})
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute(),  _
         Syste~dulla^@204~ del.Design.HelpKeywordAttribute("vs.d~dulla^@204~ ter")>  _
        Public Overloads O~dulla^@204~ nction Update(ByVal dataRows() As Sys~dulla^@204~ Row) As Integer
            Return M~dulla^@204~ ate(dataRows)
        End Function
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute(),  _
         System.ComponentM~dulla^@204~ elpKeywordAttribute("vs.data.TableAda~dulla^@204~         System.ComponentModel.DataObj~dulla^@204~ ibute(System.ComponentModel.DataObjec~dulla^@204~ elete, true)>  _
        Public Over~dulla^@204~ able Function Delete(ByVal Original_O~dulla^@204~ ing, ByVal Original_PartNo As String,~dulla^@204~ al_Description As String, ByVal Origi~dulla^@204~ As Integer) As Integer
            I~dulla^@204~ rderNo Is Nothing) Then
            ~dulla^@204~  System.ArgumentNullException("Origin~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(0).Value = CType~dulla^@204~ erNo,String)
            End If
   ~dulla^@204~ Original_PartNo Is Nothing) Then
   ~dulla^@204~ Throw New System.ArgumentNullExceptio~dulla^@204~ artNo")
            Else
          ~dulla^@204~ ter.DeleteCommand.Parameters(1).Value~dulla^@204~ inal_PartNo,String)
            End ~dulla^@204~    If (Original_Description Is Nothin~dulla^@204~             Throw New System.Argument~dulla^@204~ ("Original_Description")
           ~dulla^@204~           Me.Adapter.DeleteCommand.Pa~dulla^@204~ alue = CType(Original_Description,String)
            End If
            Me.A~dulla^@204~ Command.Parameters(3).Value = CType(O~dulla^@204~ ity,Integer)
            Dim previou~dulla^@204~ ate As System.Data.ConnectionState = ~dulla^@204~ leteCommand.Connection.State
       ~dulla^@204~ Adapter.DeleteCommand.Connection.Stat~dulla^@204~ Data.ConnectionState.Open)  _
      ~dulla^@204~      <> System.Data.ConnectionState.O~dulla^@204~               Me.Adapter.DeleteComman~dulla^@204~ Open
            End If
           ~dulla^@204~           Dim returnValue As Integer ~dulla^@204~ DeleteCommand.ExecuteNonQuery
      ~dulla^@204~ urn returnValue
            Finally~dulla^@204~     If (previousConnectionState = Sys~dulla^@204~ ectionState.Closed) Then
           ~dulla^@204~ dapter.DeleteCommand.Connection.Close~dulla^@204~      End If
            End Try
   ~dulla^@204~ tion
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute(),  _
       ~dulla^@204~ onentModel.Design.HelpKeywordAttribut~dulla^@204~ bleAdapter"),  _
         System.Com~dulla^@204~ ataObjectMethodAttribute(System.Compo~dulla^@204~ aObjectMethodType.Insert, true)>  _
~dulla^@204~ c Overloads Overridable Function Inse~dulla^@204~ rNo As String, ByVal PartNo As String~dulla^@204~ iption As String, ByVal Quantity As I~dulla^@204~ teger
            If (OrderNo Is Not~dulla^@204~                Throw New System.Argum~dulla^@204~ ion("OrderNo")
            Else
   ~dulla^@204~ Me.Adapter.InsertCommand.Parameters(0~dulla^@204~ pe(OrderNo,String)
            End I~dulla^@204~   If (PartNo Is Nothing) Then
      ~dulla^@204~ ow New System.ArgumentNullException("~dulla^@204~          Else
                Me.Ada~dulla^@204~ mmand.Parameters(1).Value = CType(Par~dulla^@204~             End If
            If (D~dulla^@204~  Nothing) Then
                Throw~dulla^@204~ rgumentNullException("Description")
~dulla^@204~ lse
                Me.Adapter.Inser~dulla^@204~ meters(2).Value = CType(Description,S~dulla^@204~        End If
            Me.Adapter~dulla^@204~ d.Parameters(3).Value = CType(Quantit~dulla^@204~            Dim previousConnectionStat~dulla^@204~ ata.ConnectionState = Me.Adapter.Inse~dulla^@204~ nection.State
            If ((Me.Ad~dulla^@204~ ommand.Connection.State And System.Da~dulla^@204~ State.Open)  _
                     ~dulla^@204~ Data.ConnectionState.Open) Then
    ~dulla^@204~ e.Adapter.InsertCommand.Connection.Op~dulla^@204~    End If
            Try 
        ~dulla^@204~ eturnValue As Integer = Me.Adapter.In~dulla^@204~ xecuteNonQuery
                Retur~dulla^@204~ 
            Finally
              ~dulla^@204~ sConnectionState = System.Data.Connec~dulla^@204~ sed) Then
                    Me.Ada~dulla^@204~ mmand.Connection.Close
             ~dulla^@204~           End Try
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute(),  _
         System.Compon~dulla^@204~ gn.HelpKeywordAttribute("vs.data.Tabl~dulla^@204~ _
         System.ComponentModel.Dat~dulla^@204~ Attribute(System.ComponentModel.DataO~dulla^@204~ pe.Update, true)>  _
        Public ~dulla^@204~ rridable Function Update(ByVal OrderN~dulla^@204~ ByVal PartNo As String, ByVal Descrip~dulla^@204~ g, ByVal Quantity As Integer, ByVal O~dulla^@204~ No As String, ByVal Original_PartNo A~dulla^@204~ al Original_Description As String, By~dulla^@204~ Quantity As Integer) As Integer
    ~dulla^@204~ rderNo Is Nothing) Then
            ~dulla^@204~  System.ArgumentNullException("OrderN~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(0).Value = CType(OrderNo,~dulla^@204~         End If
            If (PartN~dulla^@204~  Then
                Throw New Syst~dulla^@204~ llException("PartNo")
            El~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ e = CType(PartNo,String)
           ~dulla^@204~         If (Description Is Nothing) T~dulla^@204~         Throw New System.ArgumentNull~dulla^@204~ scription")
            Else
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(2).V~dulla^@204~ Description,String)
            End ~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~ CType(Quantity,Integer)
            ~dulla^@204~ OrderNo Is Nothing) Then
           ~dulla^@204~ w System.ArgumentNullException("Origi~dulla^@204~ 
            Else
                M~dulla^@204~ ateCommand.Parameters(4).Value = CTyp~dulla^@204~ derNo,String)
            End If
  ~dulla^@204~ (Original_PartNo Is Nothing) Then
  ~dulla^@204~  Throw New System.ArgumentNullExcepti~dulla^@204~ PartNo")
            Else
         ~dulla^@204~ pter.UpdateCommand.Parameters(5).Valu~dulla^@204~ ginal_PartNo,String)
            End~dulla^@204~     If (Original_Description Is Nothi~dulla^@204~              Throw New System.Argumen~dulla^@204~ n("Original_Description")
          ~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ Value = CType(Original_Description,St~dulla^@204~       End If
            Me.Adapter.~dulla^@204~ .Parameters(7).Value = CType(Original~dulla^@204~ eger)
            Dim previousConnec~dulla^@204~ System.Data.ConnectionState = Me.Adap~dulla^@204~ mand.Connection.State
            If~dulla^@204~ .UpdateCommand.Connection.State And S~dulla^@204~ nnectionState.Open)  _
             ~dulla^@204~  System.Data.ConnectionState.Open) Th~dulla^@204~        Me.Adapter.UpdateCommand.Conne~dulla^@204~            End If
            Try 
~dulla^@204~    Dim returnValue As Integer = Me.Ad~dulla^@204~ ommand.ExecuteNonQuery
             ~dulla^@204~ urnValue
            Finally
      ~dulla^@204~ (previousConnectionState = System.Dat~dulla^@204~ tate.Closed) Then
                  ~dulla^@204~ UpdateCommand.Connection.Close
     ~dulla^@204~ d If
            End Try
        En~dulla^@204~    End Class
    
    <System.CodeD~dulla^@204~ eneratedCodeAttribute("System.Data.De~dulla^@204~ aSetGenerator", "2.0.0.0"),  _
     ~dulla^@204~ entModel.DesignerCategoryAttribute("c~dulla^@204~    System.ComponentModel.ToolboxItem(~dulla^@204~    System.ComponentModel.DataObjectAt~dulla^@204~ ,  _
     System.ComponentModel.Desi~dulla^@204~ ("Microsoft.VSDesigner.DataSource.Des~dulla^@204~ terDesigner, Microsoft.VSDesigner"& _~dulla^@204~  Version=8.0.0.0, Culture=neutral, Pu~dulla^@204~ b03f5f7f11d50a3a"),  _
     System.C~dulla^@204~ .Design.HelpKeywordAttribute("vs.data~dulla^@204~ ")>  _
    Partial Public Class Prod~dulla^@204~ dapter
        Inherits System.Compo~dulla^@204~ ponent
        
        Private Wit~dulla^@204~ ter As System.Data.SqlClient.SqlDataA~dulla^@204~    
        Private _connection As S~dulla^@204~ lClient.SqlConnection
        
    ~dulla^@204~ commandCollection() As System.Data.Sq~dulla^@204~ mmand
        
        Private _cle~dulla^@204~ As Boolean
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Sub New()
            MyBase.New
 ~dulla^@204~ .ClearBeforeFill = true
        End ~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Private ReadO~dulla^@204~ Adapter() As System.Data.SqlClient.Sq~dulla^@204~ 
            Get
                If ~dulla^@204~ Is Nothing) Then
                   ~dulla^@204~ er
                End If
         ~dulla^@204~  Me._adapter
            End Get
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ erty Connection() As System.Data.SqlC~dulla^@204~ ection
            Get
            ~dulla^@204~ onnection Is Nothing) Then
         ~dulla^@204~ .InitConnection
                End ~dulla^@204~        Return Me._connection
       ~dulla^@204~ 
            Set
                Me.~dulla^@204~  value
                If (Not (Me.A~dulla^@204~ Command) Is Nothing) Then
          ~dulla^@204~ Adapter.InsertCommand.Connection = va~dulla^@204~         End If
                If (N~dulla^@204~ r.DeleteCommand) Is Nothing) Then
  ~dulla^@204~      Me.Adapter.DeleteCommand.Connect~dulla^@204~                 End If
             ~dulla^@204~ e.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.Updat~dulla^@204~ ection = value
                End I~dulla^@204~       Dim i As Integer = 0
         ~dulla^@204~ le (i < Me.CommandCollection.Length)~dulla^@204~         If (Not (Me.CommandCollection~dulla^@204~ ng) Then
                        CTy~dulla^@204~ Collection(i),System.Data.SqlClient.S~dulla^@204~ nnection = value
                   ~dulla^@204~                 i = (i + 1)
        ~dulla^@204~ 
            End Set
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Protected R~dulla^@204~ rty CommandCollection() As System.Dat~dulla^@204~ qlCommand()
            Get
       ~dulla^@204~ Me._commandCollection Is Nothing) The~dulla^@204~           Me.InitCommandCollection
 ~dulla^@204~   End If
                Return Me._~dulla^@204~ tion
            End Get
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ arBeforeFill() As Boolean
          ~dulla^@204~           Return Me._clearBeforeFill~dulla^@204~ End Get
            Set
           ~dulla^@204~ rBeforeFill = value
            End ~dulla^@204~ End Property
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ate Sub InitAdapter()
            Me~dulla^@204~ ew System.Data.SqlClient.SqlDataAdapt~dulla^@204~    Dim tableMapping As System.Data.Co~dulla^@204~ eMapping = New System.Data.Common.Dat~dulla^@204~ 
            tableMapping.SourceTabl~dulla^@204~             tableMapping.DataSetTable~dulla^@204~ fo"
            tableMapping.ColumnM~dulla^@204~ PartNo", "PartNo")
            table~dulla^@204~ nMappings.Add("ProductName", "Product~dulla^@204~        tableMapping.ColumnMappings.Ad~dulla^@204~ rand")
            tableMapping.Colu~dulla^@204~ d("Origin", "Origin")
            ta~dulla^@204~ lumnMappings.Add("UnitPrice", "UnitPr~dulla^@204~       tableMapping.ColumnMappings.Add~dulla^@204~ e1", "SellingPrice1")
            ta~dulla^@204~ lumnMappings.Add("SellingPrice2", "Se~dulla^@204~ 
            Me._adapter.TableMappin~dulla^@204~ apping)
            Me._adapter.Dele~dulla^@204~ ew System.Data.SqlClient.SqlCommand
~dulla^@204~ e._adapter.DeleteCommand.Connection =~dulla^@204~ n
            Me._adapter.DeleteComm~dulla^@204~ xt = "DELETE FROM [dbo].[ProductInfo]~dulla^@204~ tNo] = @Original_PartNo) AND ([Produc~dulla^@204~           "tName] = @Original_Product~dulla^@204~ rand] = @Original_Brand) AND ([Origin~dulla^@204~               "@Original_Origin) AND ~dulla^@204~ = @Original_UnitPrice) AND ([SellingP~dulla^@204~ 
                " @Original_Selling~dulla^@204~ [SellingPrice2] = @Original_SellingPr~dulla^@204~         Me._adapter.DeleteCommand.Com~dulla^@204~ stem.Data.CommandType.Text
         ~dulla^@204~ r.DeleteCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@Original_PartNo~dulla^@204~ a.SqlDbType.NVarChar, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "PartNo", System.D~dulla^@204~ rsion.Original, false, Nothing, "", "~dulla^@204~         Me._adapter.DeleteCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ roductName", System.Data.SqlDbType.[C~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ me", System.Data.DataRowVersion.Origi~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@Original_Brand", Syst~dulla^@204~ Type.[Char], 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "Brand", System.Data.DataRo~dulla^@204~ inal, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.DeleteCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Origina~dulla^@204~ stem.Data.SqlDbType.[Char], 0, System~dulla^@204~ erDirection.Input, 0, 0, "Origin", Sy~dulla^@204~ aRowVersion.Original, false, Nothing,~dulla^@204~ 
            Me._adapter.DeleteComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ inal_UnitPrice", System.Data.SqlDbTyp~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ ice", System.Data.DataRowVersion.Orig~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ eteCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@Original_SellingPric~dulla^@204~ ata.SqlDbType.Float, 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "SellingPrice1", Sy~dulla^@204~ aRowVersion.Original, false, Nothing,~dulla^@204~ 
            Me._adapter.DeleteComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ inal_SellingPrice2", System.Data.SqlD~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ llingPrice2", System.Data.DataRowVers~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.InsertCommand = New System.Data.~dulla^@204~ Command
            Me._adapter.Inse~dulla^@204~ nection = Me.Connection
            ~dulla^@204~ nsertCommand.CommandText = "INSERT IN~dulla^@204~ ductInfo] ([PartNo], [ProductName], [~dulla^@204~ in], [Uni"& _ 
                "tPri~dulla^@204~ Price1], [SellingPrice2]) VALUES (@Pa~dulla^@204~ tName, @Brand"& _ 
                "~dulla^@204~ nitPrice, @SellingPrice1, @SellingPri~dulla^@204~ .Microsoft.VisualBasic.ChrW(13)&Globa~dulla^@204~ isualBasic.ChrW(10)&"SELECT PartNo, P~dulla^@204~ 
                "ame, Brand, Origin,~dulla^@204~ ellingPrice1, SellingPrice2 FROM Prod~dulla^@204~  _ 
                "RE (PartNo = @P~dulla^@204~         Me._adapter.InsertCommand.Com~dulla^@204~ stem.Data.CommandType.Text
         ~dulla^@204~ r.InsertCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@PartNo", System~dulla^@204~ pe.NVarChar, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "PartNo", System.Data.DataR~dulla^@204~ rent, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.InsertCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Product~dulla^@204~ .Data.SqlDbType.[Char], 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "ProductName", S~dulla^@204~ taRowVersion.Current, false, Nothing,~dulla^@204~ 
            Me._adapter.InsertComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ d", System.Data.SqlDbType.[Char], 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Brand~dulla^@204~ a.DataRowVersion.Current, false, Noth~dulla^@204~ ""))
            Me._adapter.InsertC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ Origin", System.Data.SqlDbType.[Char]~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ em.Data.DataRowVersion.Current, false~dulla^@204~ , "", ""))
            Me._adapter.I~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@UnitPrice", System.Data.SqlDbTy~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ rice", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ertCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@SellingPrice1", Syst~dulla^@204~ Type.Float, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "SellingPrice1", System.Data~dulla^@204~ on.Current, false, Nothing, "", "", "~dulla^@204~     Me._adapter.InsertCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@S~dulla^@204~ , System.Data.SqlDbType.Float, 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "SellingP~dulla^@204~ m.Data.DataRowVersion.Current, false,~dulla^@204~  "", ""))
            Me._adapter.Up~dulla^@204~  New System.Data.SqlClient.SqlCommand~dulla^@204~  Me._adapter.UpdateCommand.Connection~dulla^@204~ ion
            Me._adapter.UpdateCo~dulla^@204~ Text = "UPDATE [dbo].[ProductInfo] SE~dulla^@204~ @PartNo, [ProductName] = @ProductName~dulla^@204~             "[Brand] = @Brand, [Origi~dulla^@204~  [UnitPrice] = @UnitPrice, [SellingPr~dulla^@204~                 "= @SellingPrice1, [S~dulla^@204~  = @SellingPrice2 WHERE (([PartNo] = ~dulla^@204~ _ 
                "PartNo) AND ([Pr~dulla^@204~ @Original_ProductName) AND ([Brand] =~dulla^@204~ a"& _ 
                "nd) AND ([Or~dulla^@204~ inal_Origin) AND ([UnitPrice] = @Orig~dulla^@204~ e) AN"& _ 
                "D ([Sell~dulla^@204~ @Original_SellingPrice1) AND ([Sellin~dulla^@204~ riginal_S"& _ 
                "ellingPrice2));"&Global.Microsoft.VisualBasic.~dulla^@204~ al.Microsoft.VisualBasic.ChrW(10)&"SE~dulla^@204~ ProductName, Brand, Origin, UnitPrice~dulla^@204~  _ 
                "ice1, SellingPr~dulla^@204~ ductInfo WHERE (PartNo = @PartNo)"
 ~dulla^@204~ ._adapter.UpdateCommand.CommandType =~dulla^@204~ CommandType.Text
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@PartNo", System.Data.SqlD~dulla^@204~ r, 0, System.Data.ParameterDirection.~dulla^@204~ "PartNo", System.Data.DataRowVersion.~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ UpdateCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@ProductName", Sys~dulla^@204~ bType.[Char], 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "ProductName", System.Data~dulla^@204~ on.Current, false, Nothing, "", "", "~dulla^@204~     Me._adapter.UpdateCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@B~dulla^@204~ .Data.SqlDbType.[Char], 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "Brand", System.~dulla^@204~ ersion.Current, false, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ ystem.Data.SqlDbType.[Char], 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "Origin", S~dulla^@204~ taRowVersion.Current, false, Nothing,~dulla^@204~ 
            Me._adapter.UpdateComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ Price", System.Data.SqlDbType.Float, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "Un~dulla^@204~ tem.Data.DataRowVersion.Current, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@SellingPrice1", System.Data.Sq~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ SellingPrice1", System.Data.DataRowVe~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.UpdateCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@SellingPric~dulla^@204~ ata.SqlDbType.Float, 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "SellingPrice2", Sy~dulla^@204~ aRowVersion.Current, false, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ nal_PartNo", System.Data.SqlDbType.NV~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ , System.Data.DataRowVersion.Original~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@Original_ProductName", S~dulla^@204~ lDbType.[Char], 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "ProductName", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ and", System.Data.SqlDbType.[Char], 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Bra~dulla^@204~ ata.DataRowVersion.Original, false, N~dulla^@204~ ", ""))
            Me._adapter.Upda~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@Original_Origin", System.Data.SqlD~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ rigin", System.Data.DataRowVersion.Or~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ pdateCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@Original_UnitPrice~dulla^@204~ a.SqlDbType.Float, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "UnitPrice", System.D~dulla^@204~ rsion.Original, false, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ ellingPrice1", System.Data.SqlDbType.~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ rice1", System.Data.DataRowVersion.Or~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ pdateCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@Original_SellingPr~dulla^@204~ .Data.SqlDbType.Float, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "SellingPrice2", ~dulla^@204~ ataRowVersion.Original, false, Nothin~dulla^@204~ ))
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Private Sub InitConnection()
    ~dulla^@204~ onnection = New System.Data.SqlClient~dulla^@204~ n
            Me._connection.Connect~dulla^@204~ lobal.InventoryControlSystem.My.MySet~dulla^@204~ .InventoryControlSystemConnectionStri~dulla^@204~ nd Sub
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ b InitCommandCollection()
          ~dulla^@204~ Collection = New System.Data.SqlClien~dulla^@204~ 0) {}
            Me._commandCollect~dulla^@204~ System.Data.SqlClient.SqlCommand
   ~dulla^@204~ commandCollection(0).Connection = Me.~dulla^@204~            Me._commandCollection(0).C~dulla^@204~ "SELECT PartNo, ProductName, Brand, O~dulla^@204~ ice, SellingPrice1, SellingPrice"& _ ~dulla^@204~      "2 FROM dbo.ProductInfo"
      ~dulla^@204~ mandCollection(0).CommandType = Syste~dulla^@204~ dType.Text
        End Sub
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
         System.ComponentModel.Des~dulla^@204~ rdAttribute("vs.data.TableAdapter"), ~dulla^@204~ System.ComponentModel.DataObjectMetho~dulla^@204~ stem.ComponentModel.DataObjectMethodT~dulla^@204~ e)>  _
        Public Overloads Over~dulla^@204~ ion Fill(ByVal dataTable As Inventory~dulla^@204~ DataSet1.ProductInfoDataTable) As Int~dulla^@204~      Me.Adapter.SelectCommand = Me.Co~dulla^@204~ on(0)
            If (Me.ClearBefore~dulla^@204~ Then
                dataTable.Clear~dulla^@204~  End If
            Dim returnValue ~dulla^@204~ Me.Adapter.Fill(dataTable)
         ~dulla^@204~ urnValue
        End Function
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ ,  _
         System.ComponentModel.~dulla^@204~ ywordAttribute("vs.data.TableAdapter"~dulla^@204~    System.ComponentModel.DataObjectMe~dulla^@204~ (System.ComponentModel.DataObjectMeth~dulla^@204~ t], true)>  _
        Public Overloa~dulla^@204~ e Function GetData() As InventoryCont~dulla^@204~ Set1.ProductInfoDataTable
          ~dulla^@204~ SelectCommand = Me.CommandCollection(~dulla^@204~    Dim dataTable As InventoryControlS~dulla^@204~ .ProductInfoDataTable = New Inventory~dulla^@204~ DataSet1.ProductInfoDataTable
      ~dulla^@204~ ter.Fill(dataTable)
            Retu~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~       System.ComponentModel.Design.He~dulla^@204~ ibute("vs.data.TableAdapter")>  _
  ~dulla^@204~ Overloads Overridable Function Update~dulla^@204~ ble As InventoryControlSystemDataSet1~dulla^@204~ ataTable) As Integer
            Ret~dulla^@204~ r.Update(dataTable)
        End Func~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute(),  _
         System.Comp~dulla^@204~ sign.HelpKeywordAttribute("vs.data.Ta~dulla^@204~   _
        Public Overloads Overrid~dulla^@204~  Update(ByVal dataSet As InventoryCon~dulla^@204~ aSet1) As Integer
            Return~dulla^@204~ pdate(dataSet, "ProductInfo")
      ~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute(),  _
         S~dulla^@204~ ntModel.Design.HelpKeywordAttribute("~dulla^@204~ Adapter")>  _
        Public Overloa~dulla^@204~ e Function Update(ByVal dataRow As Sy~dulla^@204~ aRow) As Integer
            Return ~dulla^@204~ date(New System.Data.DataRow() {dataR~dulla^@204~  End Function
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ stem.ComponentModel.Design.HelpKeywor~dulla^@204~ s.data.TableAdapter")>  _
        Pu~dulla^@204~ s Overridable Function Update(ByVal d~dulla^@204~ System.Data.DataRow) As Integer
    ~dulla^@204~ n Me.Adapter.Update(dataRows)
      ~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute(),  _
         S~dulla^@204~ ntModel.Design.HelpKeywordAttribute("~dulla^@204~ Adapter"),  _
         System.Compon~dulla^@204~ ObjectMethodAttribute(System.Componen~dulla^@204~ jectMethodType.Delete, true)>  _
   ~dulla^@204~ verloads Overridable Function Delete(ByVal Original_PartNo As String, ByVal Ori~dulla^@204~ Name As String, ByVal Original_Brand ~dulla^@204~ Val Original_Origin As String, ByVal ~dulla^@204~ Price As Double, ByVal Original_Selli~dulla^@204~ ouble, ByVal Original_SellingPrice2 A~dulla^@204~ Integer
            If (Original_Par~dulla^@204~ g) Then
                Throw New Sy~dulla^@204~ NullException("Original_PartNo")
   ~dulla^@204~ 
                Me.Adapter.DeleteCo~dulla^@204~ ers(0).Value = CType(Original_PartNo,~dulla^@204~         End If
            If (Origi~dulla^@204~ me Is Nothing) Then
                ~dulla^@204~ tem.ArgumentNullException("Original_P~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(1).Value = CType~dulla^@204~ ductName,String)
            End If~dulla^@204~ If (Original_Brand Is Nothing) Then
~dulla^@204~    Throw New System.ArgumentNullExcep~dulla^@204~ l_Brand")
            Else
        ~dulla^@204~ apter.DeleteCommand.Parameters(2).Val~dulla^@204~ iginal_Brand,String)
            End~dulla^@204~     If (Original_Origin Is Nothing) T~dulla^@204~         Throw New System.ArgumentNull~dulla^@204~ iginal_Origin")
            Else
  ~dulla^@204~  Me.Adapter.DeleteCommand.Parameters(~dulla^@204~ ype(Original_Origin,String)
        ~dulla^@204~            Me.Adapter.DeleteCommand.P~dulla^@204~ Value = CType(Original_UnitPrice,Doub~dulla^@204~     Me.Adapter.DeleteCommand.Paramete~dulla^@204~  CType(Original_SellingPrice1,Double)~dulla^@204~  Me.Adapter.DeleteCommand.Parameters(~dulla^@204~ ype(Original_SellingPrice2,Double)
 ~dulla^@204~ m previousConnectionState As System.D~dulla^@204~ nState = Me.Adapter.DeleteCommand.Con~dulla^@204~ 
            If ((Me.Adapter.DeleteC~dulla^@204~ tion.State And System.Data.Connection~dulla^@204~ _
                        <> System.~dulla^@204~ onState.Open) Then
                M~dulla^@204~ eteCommand.Connection.Open
         ~dulla^@204~           Try 
                Dim r~dulla^@204~  Integer = Me.Adapter.DeleteCommand.E~dulla^@204~ y
                Return returnValue~dulla^@204~  Finally
                If (previou~dulla^@204~ ate = System.Data.ConnectionState.Clo~dulla^@204~                   Me.Adapter.DeleteCo~dulla^@204~ ion.Close
                End If
  ~dulla^@204~  Try
        End Function
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
         System.ComponentModel.Desi~dulla^@204~ dAttribute("vs.data.TableAdapter"),  ~dulla^@204~ ystem.ComponentModel.DataObjectMethod~dulla^@204~ tem.ComponentModel.DataObjectMethodTy~dulla^@204~ ue)>  _
        Public Overloads Ove~dulla^@204~ tion Insert(ByVal PartNo As String, B~dulla^@204~ ame As String, ByVal Brand As String,~dulla^@204~  As String, ByVal UnitPrice As Double~dulla^@204~ ngPrice1 As Double, ByVal SellingPric~dulla^@204~  As Integer
            If (PartNo I~dulla^@204~ en
                Throw New System.~dulla^@204~ xception("PartNo")
            Else~dulla^@204~     Me.Adapter.InsertCommand.Paramete~dulla^@204~  CType(PartNo,String)
            En~dulla^@204~      If (ProductName Is Nothing) Then~dulla^@204~      Throw New System.ArgumentNullExc~dulla^@204~ ctName")
            Else
         ~dulla^@204~ pter.InsertCommand.Parameters(1).Valu~dulla^@204~ ductName,String)
            End If~dulla^@204~ If (Brand Is Nothing) Then
         ~dulla^@204~ New System.ArgumentNullException("Bra~dulla^@204~      Else
                Me.Adapter~dulla^@204~ d.Parameters(2).Value = CType(Brand,S~dulla^@204~        End If
            If (Origin~dulla^@204~ Then
                Throw New Syste~dulla^@204~ lException("Origin")
            Els~dulla^@204~       Me.Adapter.InsertCommand.Parame~dulla^@204~  = CType(Origin,String)
            ~dulla^@204~        Me.Adapter.InsertCommand.Param~dulla^@204~ e = CType(UnitPrice,Double)
        ~dulla^@204~ r.InsertCommand.Parameters(5).Value =~dulla^@204~ gPrice1,Double)
            Me.Adapt~dulla^@204~ and.Parameters(6).Value = CType(Selli~dulla^@204~ le)
            Dim previousConnecti~dulla^@204~ stem.Data.ConnectionState = Me.Adapte~dulla^@204~ nd.Connection.State
            If (~dulla^@204~ nsertCommand.Connection.State And Sys~dulla^@204~ ectionState.Open)  _
               ~dulla^@204~ ystem.Data.ConnectionState.Open) Then~dulla^@204~      Me.Adapter.InsertCommand.Connect~dulla^@204~          End If
            Try 
  ~dulla^@204~  Dim returnValue As Integer = Me.Adap~dulla^@204~ mand.ExecuteNonQuery
               ~dulla^@204~ nValue
            Finally
        ~dulla^@204~ reviousConnectionState = System.Data.~dulla^@204~ te.Closed) Then
                    ~dulla^@204~ sertCommand.Connection.Close
       ~dulla^@204~ If
            End Try
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute(),  _
         System.~dulla^@204~ l.Design.HelpKeywordAttribute("vs.dat~dulla^@204~ r"),  _
         System.ComponentMod~dulla^@204~ MethodAttribute(System.ComponentModel~dulla^@204~ thodType.Update, true)>  _
        P~dulla^@204~ ds Overridable Function Update(ByVal ~dulla^@204~ ing, ByVal ProductName As String, ByV~dulla^@204~ tring, ByVal Origin As String, ByVal ~dulla^@204~ Double, ByVal SellingPrice1 As Double~dulla^@204~ ngPrice2 As Double, ByVal Original_Pa~dulla^@204~ g, ByVal Original_ProductName As Stri~dulla^@204~ ginal_Brand As String, ByVal Original~dulla^@204~ ring, ByVal Original_UnitPrice As Dou~dulla^@204~ iginal_SellingPrice1 As Double, ByVal~dulla^@204~ lingPrice2 As Double) As Integer
   ~dulla^@204~ PartNo Is Nothing) Then
            ~dulla^@204~  System.ArgumentNullException("PartNo~dulla^@204~    Else
                Me.Adapter.U~dulla^@204~ Parameters(0).Value = CType(PartNo,St~dulla^@204~       End If
            If (Product~dulla^@204~ ng) Then
                Throw New S~dulla^@204~ tNullException("ProductName")
      ~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ (1).Value = CType(ProductName,String)~dulla^@204~  End If
            If (Brand Is Not~dulla^@204~                Throw New System.Argum~dulla^@204~ ion("Brand")
            Else
     ~dulla^@204~ .Adapter.UpdateCommand.Parameters(2).~dulla^@204~ (Brand,String)
            End If
 ~dulla^@204~  (Origin Is Nothing) Then
          ~dulla^@204~ ew System.ArgumentNullException("Orig~dulla^@204~      Else
                Me.Adapter~dulla^@204~ d.Parameters(3).Value = CType(Origin,~dulla^@204~         End If
            Me.Adapte~dulla^@204~ nd.Parameters(4).Value = CType(UnitPr~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ .Value = CType(SellingPrice1,Double)~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(6~dulla^@204~ pe(SellingPrice2,Double)
           ~dulla^@204~ _PartNo Is Nothing) Then
           ~dulla^@204~ w System.ArgumentNullException("Origi~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(7).Value = CType~dulla^@204~ tNo,String)
            End If
    ~dulla^@204~ riginal_ProductName Is Nothing) Then~dulla^@204~     Throw New System.ArgumentNullExce~dulla^@204~ al_ProductName")
            Else
 ~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ Type(Original_ProductName,String)
  ~dulla^@204~  If
            If (Original_Brand I~dulla^@204~ en
                Throw New System.~dulla^@204~ xception("Original_Brand")
         ~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ .Value = CType(Original_Brand,String)~dulla^@204~  End If
            If (Original_Ori~dulla^@204~ g) Then
                Throw New Sy~dulla^@204~ NullException("Original_Origin")
   ~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(10).Value = CType(Original_Origin~dulla^@204~          End If
            Me.Adapt~dulla^@204~ and.Parameters(11).Value = CType(Orig~dulla^@204~ e,Double)
            Me.Adapter.Upd~dulla^@204~ rameters(12).Value = CType(Original_S~dulla^@204~ Double)
            Me.Adapter.Updat~dulla^@204~ meters(13).Value = CType(Original_Sel~dulla^@204~ uble)
            Dim previousConnec~dulla^@204~ System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
      ~dulla^@204~ .Adapter.UpdateCommand.Connection.Sta~dulla^@204~ .Data.ConnectionState.Open)  _
     ~dulla^@204~       <> System.Data.ConnectionState.~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ .Open
            End If
          ~dulla^@204~            Dim returnValue As Integer~dulla^@204~ .UpdateCommand.ExecuteNonQuery
     ~dulla^@204~ turn returnValue
            Finally~dulla^@204~      If (previousConnectionState = Sy~dulla^@204~ nectionState.Closed) Then
          ~dulla^@204~ Adapter.UpdateCommand.Connection.Clos~dulla^@204~       End If
            End Try
  ~dulla^@204~ ction
    End Class
    
    <Syst~dulla^@204~ mpiler.GeneratedCodeAttribute("System~dulla^@204~ TypedDataSetGenerator", "2.0.0.0"),  ~dulla^@204~ m.ComponentModel.DesignerCategoryAttr~dulla^@204~ ,  _
     System.ComponentModel.Tool~dulla^@204~ ,  _
     System.ComponentModel.Data~dulla^@204~ te(true),  _
     System.ComponentMo~dulla^@204~ ttribute("Microsoft.VSDesigner.DataSo~dulla^@204~ ableAdapterDesigner, Microsoft.VSDesi~dulla^@204~       ", Version=8.0.0.0, Culture=neu~dulla^@204~ eyToken=b03f5f7f11d50a3a"),  _
     ~dulla^@204~ entModel.Design.HelpKeywordAttribute(~dulla^@204~ eAdapter")>  _
    Partial Public Cl~dulla^@204~ ableAdapter
        Inherits System.~dulla^@204~ l.Component
        
        Privat~dulla^@204~ _adapter As System.Data.SqlClient.Sql~dulla^@204~         
        Private _connection~dulla^@204~ ta.SqlClient.SqlConnection
        ~dulla^@204~ ate _commandCollection() As System.Da~dulla^@204~ SqlCommand
        
        Private~dulla^@204~ Fill As Boolean
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Sub New()
            MyBase.N~dulla^@204~    Me.ClearBeforeFill = true
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Private ~dulla^@204~ erty Adapter() As System.Data.SqlClie~dulla^@204~ pter
            Get
              ~dulla^@204~ pter Is Nothing) Then
              ~dulla^@204~ Adapter
                End If
    ~dulla^@204~ eturn Me._adapter
            End Ge~dulla^@204~ d Property
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Property Connection() As System.Data~dulla^@204~ lConnection
            Get
       ~dulla^@204~ Me._connection Is Nothing) Then
    ~dulla^@204~    Me.InitConnection
               ~dulla^@204~             Return Me._connection
  ~dulla^@204~  Get
            Set
              ~dulla^@204~ ion = value
                If (Not ~dulla^@204~ nsertCommand) Is Nothing) Then
     ~dulla^@204~   Me.Adapter.InsertCommand.Connection~dulla^@204~              End If
                ~dulla^@204~ dapter.DeleteCommand) Is Nothing) The~dulla^@204~           Me.Adapter.DeleteCommand.Co~dulla^@204~ lue
                End If
        ~dulla^@204~ ot (Me.Adapter.UpdateCommand) Is Noth~dulla^@204~                   Me.Adapter.UpdateCo~dulla^@204~ ion = value
                End If
~dulla^@204~    Dim i As Integer = 0
            ~dulla^@204~ (i < Me.CommandCollection.Length)
  ~dulla^@204~      If (Not (Me.CommandCollection(i)~dulla^@204~  Then
                        CType(~dulla^@204~ lection(i),System.Data.SqlClient.SqlC~dulla^@204~ ction = value
                    En~dulla^@204~              i = (i + 1)
           ~dulla^@204~           End Set
        End Proper~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Protected Read~dulla^@204~  CommandCollection() As System.Data.S~dulla^@204~ ommand()
            Get
          ~dulla^@204~ _commandCollection Is Nothing) Then
~dulla^@204~        Me.InitCommandCollection
    ~dulla^@204~ nd If
                Return Me._com~dulla^@204~ n
            End Get
        End P~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Pr~dulla^@204~ eforeFill() As Boolean
            G~dulla^@204~        Return Me._clearBeforeFill
  ~dulla^@204~  Get
            Set
              ~dulla^@204~ foreFill = value
            End Set~dulla^@204~  Property
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~  Sub InitAdapter()
            Me._a~dulla^@204~ System.Data.SqlClient.SqlDataAdapter~dulla^@204~ Dim tableMapping As System.Data.Commo~dulla^@204~ pping = New System.Data.Common.DataTa~dulla^@204~            tableMapping.SourceTable =~dulla^@204~          tableMapping.DataSetTable = ~dulla^@204~            tableMapping.ColumnMapping~dulla^@204~ ", "PartNo")
            tableMappin~dulla^@204~ ngs.Add("ProductName", "ProductName")~dulla^@204~  tableMapping.ColumnMappings.Add("Bra~dulla^@204~ 
            tableMapping.ColumnMapp~dulla^@204~ gin", "Origin")
            tableMap~dulla^@204~ ppings.Add("ShelfNo", "ShelfNo")
   ~dulla^@204~ eMapping.ColumnMappings.Add("ReorderL~dulla^@204~ erLevel")
            tableMapping.C~dulla^@204~ .Add("SellingPrice1", "SellingPrice1"~dulla^@204~   tableMapping.ColumnMappings.Add("Se~dulla^@204~  "SellingPrice2")
            tableM~dulla^@204~ Mappings.Add("NetWeight", "NetWeight"~dulla^@204~   Me._adapter.TableMappings.Add(table~dulla^@204~          Me._adapter.DeleteCommand = ~dulla^@204~ ta.SqlClient.SqlCommand
            ~dulla^@204~ eleteCommand.Connection = Me.Connecti~dulla^@204~    Me._adapter.DeleteCommand.CommandT~dulla^@204~  FROM [dbo].[Products] WHERE (([PartN~dulla^@204~ l_PartNo) AND ([ProductNa"& _ 
     ~dulla^@204~ e] = @Original_ProductName) AND ([Bra~dulla^@204~ al_Brand) AND ((@IsNull_Origi"& _ 
 ~dulla^@204~   "n = 1 AND [Origin] IS NULL) OR ([O~dulla^@204~ ginal_Origin)) AND ([ShelfNo] = @"& _~dulla^@204~       "Original_ShelfNo) AND ([Reorde~dulla^@204~ iginal_ReorderLevel) AND ([SellingPri~dulla^@204~           "ce1] = @Original_SellingPr~dulla^@204~ IsNull_SellingPrice2 = 1 AND [Selling~dulla^@204~               "e2] IS NULL) OR ([Sell~dulla^@204~ @Original_SellingPrice2)) AND ([NetWe~dulla^@204~ 
                "@Original_NetWeigh~dulla^@204~      Me._adapter.DeleteCommand.Comman~dulla^@204~ m.Data.CommandType.Text
            ~dulla^@204~ eleteCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@Original_PartNo", ~dulla^@204~ qlDbType.NVarChar, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "PartNo", System.Data~dulla^@204~ on.Original, false, Nothing, "", "", ~dulla^@204~      Me._adapter.DeleteCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ uctName", System.Data.SqlDbType.[Char~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ , System.Data.DataRowVersion.Original~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@Original_Brand", System.~dulla^@204~ e.[Char], 0, System.Data.ParameterDir~dulla^@204~  0, 0, "Brand", System.Data.DataRowVe~dulla^@204~ l, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.DeleteCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@IsNull_Ori~dulla^@204~ Data.SqlDbType.Int, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "Origin", System.Dat~dulla^@204~ ion.Original, true, Nothing, "", "", ~dulla^@204~      Me._adapter.DeleteCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ in", System.Data.SqlDbType.[Char], 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Orig~dulla^@204~ ata.DataRowVersion.Original, false, N~dulla^@204~ ", ""))
            Me._adapter.Dele~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@Original_ShelfNo", System.Data.Sql~dulla^@204~ ar, 0, System.Data.ParameterDirection~dulla^@204~  "ShelfNo", System.Data.DataRowVersio~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.DeleteCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Original_Reord~dulla^@204~ tem.Data.SqlDbType.Int, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "ReorderLevel", ~dulla^@204~ ataRowVersion.Original, false, Nothin~dulla^@204~ ))
            Me._adapter.DeleteCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlParameter("@Original_SellingPrice1", System~dulla^@204~ pe.Float, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "SellingPrice1", System.Data.D~dulla^@204~ .Original, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.DeleteCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Is~dulla^@204~ rice2", System.Data.SqlDbType.Int, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Sell~dulla^@204~ ystem.Data.DataRowVersion.Original, t~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Original_SellingPrice2", Sys~dulla^@204~ bType.Float, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "SellingPrice2", System.Dat~dulla^@204~ ion.Original, false, Nothing, "", "",~dulla^@204~       Me._adapter.DeleteCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ Weight", System.Data.SqlDbType.Float,~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "N~dulla^@204~ stem.Data.DataRowVersion.Original, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd = New System.Data.SqlClient.SqlCom~dulla^@204~      Me._adapter.InsertCommand.Connec~dulla^@204~ nection
            Me._adapter.Inse~dulla^@204~ mandText = "INSERT INTO [dbo].[Produc~dulla^@204~ , [ProductName], [Brand], [Origin], [~dulla^@204~                 "o], [ReorderLevel], ~dulla^@204~ 1], [SellingPrice2], [NetWeight]) VAL~dulla^@204~ _ 
                "No, @ProductName~dulla^@204~ igin, @ShelfNo, @ReorderLevel, @Selli~dulla^@204~ l"& _ 
                "lingPrice2, ~dulla^@204~ &Global.Microsoft.VisualBasic.ChrW(13~dulla^@204~ osoft.VisualBasic.ChrW(10)&"SELECT Pa~dulla^@204~ Name, Brand, Origin, ShelfNo, Re"& _ ~dulla^@204~      "orderLevel, SellingPrice1, Sell~dulla^@204~ tWeight FROM Products WHERE (PartNo "~dulla^@204~          "= @PartNo)"
            Me~dulla^@204~ ertCommand.CommandType = System.Data.~dulla^@204~ ext
            Me._adapter.InsertCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ artNo", System.Data.SqlDbType.NVarCha~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ tem.Data.DataRowVersion.Current, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@ProductName", System.Data.SqlD~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ roductName", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.InsertCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Brand", System~dulla^@204~ pe.[Char], 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "Brand", System.Data.DataRowV~dulla^@204~ t, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.InsertCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@Origin", S~dulla^@204~ lDbType.[Char], 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "Origin", System.Data.Da~dulla^@204~ Current, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.InsertCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Shel~dulla^@204~ Data.SqlDbType.NVarChar, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "ShelfNo", Syst~dulla^@204~ owVersion.Current, false, Nothing, ""~dulla^@204~            Me._adapter.InsertCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ Level", System.Data.SqlDbType.Int, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Reor~dulla^@204~ stem.Data.DataRowVersion.Current, fal~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@SellingPrice1", System.Data.S~dulla^@204~ t, 0, System.Data.ParameterDirection.~dulla^@204~ "SellingPrice1", System.Data.DataRowV~dulla^@204~ t, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.InsertCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@SellingPri~dulla^@204~ Data.SqlDbType.Float, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "SellingPrice2", S~dulla^@204~ taRowVersion.Current, false, Nothing,~dulla^@204~ 
            Me._adapter.InsertComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ eight", System.Data.SqlDbType.Float, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "Ne~dulla^@204~ tem.Data.DataRowVersion.Current, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~  = New System.Data.SqlClient.SqlComma~dulla^@204~    Me._adapter.UpdateCommand.Connecti~dulla^@204~ ction
            Me._adapter.Update~dulla^@204~ ndText = "UPDATE [dbo].[Products] SET~dulla^@204~ PartNo, [ProductName] = @ProductName,~dulla^@204~               "and] = @Brand, [Origin~dulla^@204~ [ShelfNo] = @ShelfNo, [ReorderLevel] ~dulla^@204~ 
                "erLevel, [SellingP~dulla^@204~ lingPrice1, [SellingPrice2] = @Sellin~dulla^@204~ & _ 
                "tWeight] = @Ne~dulla^@204~  (([PartNo] = @Original_PartNo) AND (~dulla^@204~  = "& _ 
                "@Original_~dulla^@204~ AND ([Brand] = @Original_Brand) AND (~dulla^@204~ in = 1 "& _ 
                "AND [O~dulla^@204~ L) OR ([Origin] = @Original_Origin)) ~dulla^@204~ ] = @Origin"& _ 
                "al~dulla^@204~  ([ReorderLevel] = @Original_ReorderL~dulla^@204~ ellingPrice1] ="& _ 
               ~dulla^@204~ SellingPrice1) AND ((@IsNull_SellingP~dulla^@204~  [SellingPrice2] IS"& _ 
           ~dulla^@204~ OR ([SellingPrice2] = @Original_Selli~dulla^@204~ D ([NetWeight] = @Origi"& _ 
       ~dulla^@204~ _NetWeight));"&Global.Microsoft.Visua~dulla^@204~ 3)&Global.Microsoft.VisualBasic.ChrW(~dulla^@204~ artNo, ProductName, Brand, Origin, Sh~dulla^@204~ rLev"& _ 
                "el, Selli~dulla^@204~ lingPrice2, NetWeight FROM Products W~dulla^@204~ = @PartN"& _ 
                "o)"
~dulla^@204~ e._adapter.UpdateCommand.CommandType ~dulla^@204~ .CommandType.Text
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@PartNo", System.Data.Sql~dulla^@204~ ar, 0, System.Data.ParameterDirection~dulla^@204~  "PartNo", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@ProductName", Sy~dulla^@204~ DbType.[Char], 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "ProductName", System.Dat~dulla^@204~ ion.Current, false, Nothing, "", "", ~dulla^@204~      Me._adapter.UpdateCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ m.Data.SqlDbType.[Char], 0, System.Da~dulla^@204~ irection.Input, 0, 0, "Brand", System~dulla^@204~ Version.Current, false, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ System.Data.SqlDbType.[Char], 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "Origin", ~dulla^@204~ ataRowVersion.Current, false, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ lfNo", System.Data.SqlDbType.NVarChar~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ tem.Data.DataRowVersion.Current, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@ReorderLevel", System.Data.Sql~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ rderLevel", System.Data.DataRowVersio~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.UpdateCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@SellingPrice1",~dulla^@204~ SqlDbType.Float, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "SellingPrice1", System~dulla^@204~ Version.Current, false, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ ice2", System.Data.SqlDbType.Float, 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Sel~dulla^@204~ System.Data.DataRowVersion.Current, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@NetWeight", System.Data.Sql~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ etWeight", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original~dulla^@204~ tem.Data.SqlDbType.NVarChar, 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "PartNo", S~dulla^@204~ taRowVersion.Original, false, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ginal_ProductName", System.Data.SqlDb~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ oductName", System.Data.DataRowVersio~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Original_Brand~dulla^@204~ a.SqlDbType.[Char], 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "Brand", System.Data~dulla^@204~ on.Original, false, Nothing, "", "", ~dulla^@204~      Me._adapter.UpdateCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ ", System.Data.SqlDbType.Int, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "Origin", ~dulla^@204~ ataRowVersion.Original, true, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ginal_Origin", System.Data.SqlDbType.~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ , System.Data.DataRowVersion.Original~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@Original_ShelfNo", Syste~dulla^@204~ ype.NVarChar, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "ShelfNo", System.Data.Dat~dulla^@204~ riginal, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Orig~dulla^@204~ evel", System.Data.SqlDbType.Int, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Reord~dulla^@204~ tem.Data.DataRowVersion.Original, fal~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@Original_SellingPrice1", Syst~dulla^@204~ Type.Float, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "SellingPrice1", System.Data~dulla^@204~ on.Original, false, Nothing, "", "", ~dulla^@204~      Me._adapter.UpdateCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ gPrice2", System.Data.SqlDbType.Int, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "Se~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Original_SellingPrice2", S~dulla^@204~ lDbType.Float, 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "SellingPrice2", System.D~dulla^@204~ rsion.Original, false, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ etWeight", System.Data.SqlDbType.Floa~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ System.Data.DataRowVersion.Original, ~dulla^@204~ g, "", "", ""))
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Private Sub InitConne~dulla^@204~         Me._connection = New System.D~dulla^@204~ .SqlConnection
            Me._conne~dulla^@204~ ionString = Global.InventoryControlSy~dulla^@204~ tings.Default.InventoryControlSystemC~dulla^@204~ ng
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Private Sub InitCommandCollection(~dulla^@204~   Me._commandCollection = New System.~dulla^@204~ t.SqlCommand(0) {}
            Me._c~dulla^@204~ ion(0) = New System.Data.SqlClient.Sq~dulla^@204~          Me._commandCollection(0).Con~dulla^@204~ Connection
            Me._commandCo~dulla^@204~ ommandText = "SELECT PartNo, ProductN~dulla^@204~ rigin, ShelfNo, ReorderLevel, Selling~dulla^@204~ 
                "SellingPrice2, Net~dulla^@204~ bo.Products"
            Me._command~dulla^@204~ .CommandType = System.Data.CommandTyp~dulla^@204~    End Sub
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute(),  _
 ~dulla^@204~ m.ComponentModel.Design.HelpKeywordAt~dulla^@204~ ata.TableAdapter"),  _
         Syst~dulla^@204~ odel.DataObjectMethodAttribute(System~dulla^@204~ el.DataObjectMethodType.Fill, true)> ~dulla^@204~ ublic Overloads Overridable Function ~dulla^@204~ taTable As InventoryControlSystemData~dulla^@204~ DataTable) As Integer
            Me~dulla^@204~ ctCommand = Me.CommandCollection(0)
~dulla^@204~ f (Me.ClearBeforeFill = true) Then
 ~dulla^@204~   dataTable.Clear
            End If~dulla^@204~  Dim returnValue As Integer = Me.Adap~dulla^@204~ Table)
            Return returnValu~dulla^@204~ d Function
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute(),  _
 ~dulla^@204~ m.ComponentModel.Design.HelpKeywordAt~dulla^@204~ ata.TableAdapter"),  _
         Syst~dulla^@204~ odel.DataObjectMethodAttribute(System~dulla^@204~ el.DataObjectMethodType.[Select], tru~dulla^@204~    Public Overloads Overridable Funct~dulla^@204~  As InventoryControlSystemDataSet1.Pr~dulla^@204~ le
            Me.Adapter.SelectComm~dulla^@204~ andCollection(0)
            Dim dat~dulla^@204~ entoryControlSystemDataSet1.ProductsD~dulla^@204~ w InventoryControlSystemDataSet1.Prod~dulla^@204~ 
            Me.Adapter.Fill(dataTab~dulla^@204~     Return dataTable
        End Fun~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute(),  _
         System.Com~dulla^@204~ esign.HelpKeywordAttribute("vs.data.T~dulla^@204~ >  _
        Public Overloads Overri~dulla^@204~ n Update(ByVal dataTable As Inventory~dulla^@204~ DataSet1.ProductsDataTable) As Intege~dulla^@204~   Return Me.Adapter.Update(dataTable)~dulla^@204~  Function
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute(),  _
  ~dulla^@204~ .ComponentModel.Design.HelpKeywordAtt~dulla^@204~ ta.TableAdapter")>  _
        Public~dulla^@204~ erridable Function Update(ByVal dataS~dulla^@204~ ryControlSystemDataSet1) As Integer
~dulla^@204~ eturn Me.Adapter.Update(dataSet, "Pro~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute(),~dulla^@204~  System.ComponentModel.Design.HelpKey~dulla^@204~ ("vs.data.TableAdapter")>  _
       ~dulla^@204~ oads Overridable Function Update(ByVa~dulla^@204~ System.Data.DataRow) As Integer
    ~dulla^@204~ n Me.Adapter.Update(New System.Data.D~dulla^@204~ aRow})
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
         System.ComponentModel.De~dulla^@204~ ordAttribute("vs.data.TableAdapter")>~dulla^@204~ Public Overloads Overridable Function~dulla^@204~  dataRows() As System.Data.DataRow) A~dulla^@204~           Return Me.Adapter.Update(da~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute(),~dulla^@204~  System.ComponentModel.Design.HelpKey~dulla^@204~ ("vs.data.TableAdapter"),  _
       ~dulla^@204~ onentModel.DataObjectMethodAttribute(~dulla^@204~ entModel.DataObjectMethodType.Delete,~dulla^@204~        Public Overloads Overridable F~dulla^@204~ e(ByVal Original_PartNo As String, By~dulla^@204~ ProductName As String, ByVal Original~dulla^@204~ ing, ByVal Original_Origin As String,~dulla^@204~ al_ShelfNo As String, ByVal Original_~dulla^@204~ As Integer, ByVal Original_SellingPri~dulla^@204~ , ByVal Original_SellingPrice2 As Sys~dulla^@204~ Of Double), ByVal Original_NetWeight ~dulla^@204~  Integer
            If (Original_Pa~dulla^@204~ ng) Then
                Throw New S~dulla^@204~ tNullException("Original_PartNo")
  ~dulla^@204~ e
                Me.Adapter.DeleteC~dulla^@204~ ters(0).Value = CType(Original_PartNo~dulla^@204~          End If
            If (Orig~dulla^@204~ ame Is Nothing) Then
               ~dulla^@204~ stem.ArgumentNullException("Original_~dulla^@204~ 
            Else
                M~dulla^@204~ eteCommand.Parameters(1).Value = CTyp~dulla^@204~ oductName,String)
            End If~dulla^@204~  If (Original_Brand Is Nothing) Then~dulla^@204~     Throw New System.ArgumentNullExce~dulla^@204~ al_Brand")
            Else
       ~dulla^@204~ dapter.DeleteCommand.Parameters(2).Va~dulla^@204~ riginal_Brand,String)
            End If
            If (Original_Origin Is N~dulla^@204~ 
                Me.Adapter.DeleteCom~dulla^@204~ rs(3).Value = CType(1,Object)
      ~dulla^@204~ Adapter.DeleteCommand.Parameters(4).V~dulla^@204~ .DBNull.Value
            Else
    ~dulla^@204~ e.Adapter.DeleteCommand.Parameters(3)~dulla^@204~ e(0,Object)
                Me.Adapt~dulla^@204~ and.Parameters(4).Value = CType(Origi~dulla^@204~ ring)
            End If
          ~dulla^@204~ l_ShelfNo Is Nothing) Then
         ~dulla^@204~ New System.ArgumentNullException("Ori~dulla^@204~ ")
            Else
               ~dulla^@204~ eleteCommand.Parameters(5).Value = CT~dulla^@204~ ShelfNo,String)
            End If
~dulla^@204~ e.Adapter.DeleteCommand.Parameters(6)~dulla^@204~ e(Original_ReorderLevel,Integer)
   ~dulla^@204~ dapter.DeleteCommand.Parameters(7).Va~dulla^@204~ riginal_SellingPrice1,Double)
      ~dulla^@204~ ginal_SellingPrice2.HasValue = true) ~dulla^@204~          Me.Adapter.DeleteCommand.Par~dulla^@204~ lue = CType(0,Object)
              ~dulla^@204~ DeleteCommand.Parameters(9).Value = C~dulla^@204~ _SellingPrice2.Value,Double)
       ~dulla^@204~               Me.Adapter.DeleteComman~dulla^@204~ 8).Value = CType(1,Object)
         ~dulla^@204~ pter.DeleteCommand.Parameters(9).Valu~dulla^@204~ Null.Value
            End If
     ~dulla^@204~ pter.DeleteCommand.Parameters(10).Val~dulla^@204~ iginal_NetWeight,Double)
           ~dulla^@204~ ConnectionState As System.Data.Connec~dulla^@204~ e.Adapter.DeleteCommand.Connection.St~dulla^@204~     If ((Me.Adapter.DeleteCommand.Con~dulla^@204~  And System.Data.ConnectionState.Open~dulla^@204~                  <> System.Data.Conne~dulla^@204~ en) Then
                Me.Adapter.~dulla^@204~ .Connection.Open
            End If~dulla^@204~ Try 
                Dim returnValue~dulla^@204~  Me.Adapter.DeleteCommand.ExecuteNonQ~dulla^@204~          Return returnValue
        ~dulla^@204~                 If (previousConnectio~dulla^@204~ em.Data.ConnectionState.Closed) Then~dulla^@204~         Me.Adapter.DeleteCommand.Conn~dulla^@204~ 
                End If
            ~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute(),~dulla^@204~  System.ComponentModel.Design.HelpKey~dulla^@204~ ("vs.data.TableAdapter"),  _
       ~dulla^@204~ onentModel.DataObjectMethodAttribute(~dulla^@204~ entModel.DataObjectMethodType.Insert,~dulla^@204~        Public Overloads Overridable F~dulla^@204~ t(ByVal PartNo As String, ByVal Produ~dulla^@204~ ing, ByVal Brand As String, ByVal Ori~dulla^@204~ , ByVal ShelfNo As String, ByVal Reor~dulla^@204~ nteger, ByVal SellingPrice1 As Double~dulla^@204~ ngPrice2 As System.Nullable(Of Double~dulla^@204~ eight As Double) As Integer
        ~dulla^@204~ o Is Nothing) Then
                T~dulla^@204~ em.ArgumentNullException("PartNo")
 ~dulla^@204~ se
                Me.Adapter.Insert~dulla^@204~ eters(0).Value = CType(PartNo,String)~dulla^@204~  End If
            If (ProductName ~dulla^@204~ hen
                Throw New System~dulla^@204~ Exception("ProductName")
           ~dulla^@204~           Me.Adapter.InsertCommand.Pa~dulla^@204~ alue = CType(ProductName,String)
   ~dulla^@204~ If
            If (Brand Is Nothing)~dulla^@204~           Throw New System.ArgumentNu~dulla^@204~ Brand")
            Else
          ~dulla^@204~ ter.InsertCommand.Parameters(2).Value~dulla^@204~ d,String)
            End If
      ~dulla^@204~ gin Is Nothing) Then
               ~dulla^@204~ nsertCommand.Parameters(3).Value = Sy~dulla^@204~ alue
            Else
             ~dulla^@204~ .InsertCommand.Parameters(3).Value = ~dulla^@204~ String)
            End If
        ~dulla^@204~ No Is Nothing) Then
                ~dulla^@204~ tem.ArgumentNullException("ShelfNo")~dulla^@204~ Else
                Me.Adapter.Inse~dulla^@204~ ameters(4).Value = CType(ShelfNo,Stri~dulla^@204~     End If
            Me.Adapter.In~dulla^@204~ arameters(5).Value = CType(ReorderLev~dulla^@204~             Me.Adapter.InsertCommand.~dulla^@204~ .Value = CType(SellingPrice1,Double)~dulla^@204~ If (SellingPrice2.HasValue = true) Th~dulla^@204~        Me.Adapter.InsertCommand.Param~dulla^@204~ e = CType(SellingPrice2.Value,Double)~dulla^@204~  Else
                Me.Adapter.Ins~dulla^@204~ rameters(7).Value = System.DBNull.Val~dulla^@204~    End If
            Me.Adapter.Ins~dulla^@204~ rameters(8).Value = CType(NetWeight,D~dulla^@204~        Dim previousConnectionState As~dulla^@204~ ConnectionState = Me.Adapter.InsertCo~dulla^@204~ ion.State
            If ((Me.Adapte~dulla^@204~ nd.Connection.State And System.Data.C~dulla^@204~ e.Open)  _
                        <~dulla^@204~ .ConnectionState.Open) Then
        ~dulla^@204~ apter.InsertCommand.Connection.Open
~dulla^@204~ nd If
            Try 
            ~dulla^@204~ nValue As Integer = Me.Adapter.Insert~dulla^@204~ teNonQuery
                Return re~dulla^@204~           Finally
                If~dulla^@204~ nectionState = System.Data.Connection~dulla^@204~  Then
                    Me.Adapter~dulla^@204~ d.Connection.Close
                E~dulla^@204~       End Try
        End Function
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute(),  _
         System.ComponentM~dulla^@204~ elpKeywordAttribute("vs.data.TableAda~dulla^@204~         System.ComponentModel.DataObj~dulla^@204~ ibute(System.ComponentModel.DataObjec~dulla^@204~ pdate, true)>  _
        Public Over~dulla^@204~ able Function Update( _
            ~dulla^@204~  PartNo As String,  _
              ~dulla^@204~ roductName As String,  _
           ~dulla^@204~ l Brand As String,  _
              ~dulla^@204~ rigin As String,  _
                ~dulla^@204~ lfNo As String,  _
                 ~dulla^@204~ derLevel As Integer,  _
            ~dulla^@204~  SellingPrice1 As Double,  _
       ~dulla^@204~ ByVal SellingPrice2 As System.Nullabl~dulla^@204~   _
                    ByVal NetWei~dulla^@204~ ,  _
                    ByVal Origi~dulla^@204~  String,  _
                    ByVa~dulla^@204~ oductName As String,  _
            ~dulla^@204~  Original_Brand As String,  _
      ~dulla^@204~  ByVal Original_Origin As String,  _~dulla^@204~         ByVal Original_ShelfNo As Str~dulla^@204~                 ByVal Original_Reorde~dulla^@204~ eger,  _
                    ByVal O~dulla^@204~ ngPrice1 As Double,  _
             ~dulla^@204~ Original_SellingPrice2 As System.Null~dulla^@204~ e),  _
                    ByVal Ori~dulla^@204~ ht As Double) As Integer
           ~dulla^@204~ s Nothing) Then
                Thro~dulla^@204~ ArgumentNullException("PartNo")
    ~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(0).Value = CType(PartNo,String)
 ~dulla^@204~ d If
            If (ProductName Is ~dulla^@204~ 
                Throw New System.Ar~dulla^@204~ eption("ProductName")
            El~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ e = CType(ProductName,String)
      ~dulla^@204~ 
            If (Brand Is Nothing) Th~dulla^@204~        Throw New System.ArgumentNullE~dulla^@204~ nd")
            Else
             ~dulla^@204~ .UpdateCommand.Parameters(2).Value = ~dulla^@204~ tring)
            End If
         ~dulla^@204~  Is Nothing) Then
                Me~dulla^@204~ teCommand.Parameters(3).Value = Syste~dulla^@204~ e
            Else
                ~dulla^@204~ dateCommand.Parameters(3).Value = CTy~dulla^@204~ ing)
            End If
           ~dulla^@204~ Is Nothing) Then
                Thr~dulla^@204~ .ArgumentNullException("ShelfNo")
  ~dulla^@204~ e
                Me.Adapter.UpdateC~dulla^@204~ ters(4).Value = CType(ShelfNo,String)~dulla^@204~  End If
            Me.Adapter.Updat~dulla^@204~ meters(5).Value = CType(ReorderLevel,~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ lue = CType(SellingPrice1,Double)
  ~dulla^@204~ (SellingPrice2.HasValue = true) Then~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~  CType(SellingPrice2.Value,Double)
 ~dulla^@204~ se
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNul~dulla^@204~         End If
            Me.Adapte~dulla^@204~ nd.Parameters(8).Value = CType(NetWei~dulla^@204~             If (Original_PartNo Is No~dulla^@204~                 Throw New System.Argu~dulla^@204~ tion("Original_PartNo")
            ~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ lue = CType(Original_PartNo,String)
~dulla^@204~ nd If
            If (Original_Produ~dulla^@204~ hing) Then
                Throw New~dulla^@204~ entNullException("Original_ProductNam~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(10).Value = CType(Origina~dulla^@204~ ,String)
            End If
       ~dulla^@204~ inal_Brand Is Nothing) Then
        ~dulla^@204~  New System.ArgumentNullException("Or~dulla^@204~ )
            Else
                ~dulla^@204~ dateCommand.Parameters(11).Value = CT~dulla^@204~ Brand,String)
            End If
  ~dulla^@204~ (Original_Origin Is Nothing) Then
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ Type(1,Object)
                Me.Ad~dulla^@204~ ommand.Parameters(13).Value = System.~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(12).Value = CTyp~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(13).Value = CType(Original_Origin,S~dulla^@204~        End If
            If (Origin~dulla^@204~  Nothing) Then
                Throw~dulla^@204~ rgumentNullException("Original_ShelfN~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(14).Value = CType(Origina~dulla^@204~ ing)
            End If
           ~dulla^@204~ pdateCommand.Parameters(15).Value = C~dulla^@204~ _ReorderLevel,Integer)
            M~dulla^@204~ ateCommand.Parameters(16).Value = CTy~dulla^@204~ ellingPrice1,Double)
            If ~dulla^@204~ lingPrice2.HasValue = true) Then
   ~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(1~dulla^@204~ ype(0,Object)
                Me.Ada~dulla^@204~ mmand.Parameters(18).Value = CType(Or~dulla^@204~ gPrice2.Value,Double)
            El~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ ue = CType(1,Object)
               ~dulla^@204~ pdateCommand.Parameters(18).Value = S~dulla^@204~ Value
            End If
          ~dulla^@204~ UpdateCommand.Parameters(19).Value = ~dulla^@204~ l_NetWeight,Double)
            Dim ~dulla^@204~ ctionState As System.Data.ConnectionS~dulla^@204~ pter.UpdateCommand.Connection.State
~dulla^@204~ f ((Me.Adapter.UpdateCommand.Connecti~dulla^@204~ System.Data.ConnectionState.Open)  _~dulla^@204~             <> System.Data.Connection~dulla^@204~ hen
                Me.Adapter.Updat~dulla^@204~ ection.Open
            End If
    ~dulla^@204~ 
                Dim returnValue As I~dulla^@204~ dapter.UpdateCommand.ExecuteNonQuery~dulla^@204~     Return returnValue
            F~dulla^@204~            If (previousConnectionStat~dulla^@204~ ta.ConnectionState.Closed) Then
    ~dulla^@204~    Me.Adapter.UpdateCommand.Connectio~dulla^@204~             End If
            End T~dulla^@204~ nd Function
    End Class
    
   ~dulla^@204~ Dom.Compiler.GeneratedCodeAttribute("~dulla^@204~ esign.TypedDataSetGenerator", "2.0.0.~dulla^@204~  System.ComponentModel.DesignerCatego~dulla^@204~ code"),  _
     System.ComponentMode~dulla^@204~ (true),  _
     System.ComponentMode~dulla^@204~ ttribute(true),  _
     System.Compo~dulla^@204~ ignerAttribute("Microsoft.VSDesigner.~dulla^@204~ sign.TableAdapterDesigner, Microsoft.~dulla^@204~ _ 
        ", Version=8.0.0.0, Cultu~dulla^@204~ ublicKeyToken=b03f5f7f11d50a3a"),  _~dulla^@204~ ComponentModel.Design.HelpKeywordAttr~dulla^@204~ a.TableAdapter")>  _
    Partial Pub~dulla^@204~ ductsAvialableTableAdapter
        I~dulla^@204~ m.ComponentModel.Component
        ~dulla^@204~ ate WithEvents _adapter As System.Dat~dulla^@204~ qlDataAdapter
        
        Priv~dulla^@204~ on As System.Data.SqlClient.SqlConnec~dulla^@204~  
        Private _commandCollection~dulla^@204~ Data.SqlClient.SqlCommand
        
~dulla^@204~ te _clearBeforeFill As Boolean
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Sub New()
     ~dulla^@204~ .New
            Me.ClearBeforeFill ~dulla^@204~    End Sub
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~ e ReadOnly Property Adapter() As Syst~dulla^@204~ ient.SqlDataAdapter
            Get~dulla^@204~     If (Me._adapter Is Nothing) Then~dulla^@204~         Me.InitAdapter
             ~dulla^@204~               Return Me._adapter
   ~dulla^@204~ Get
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Friend Property Connection()~dulla^@204~ ta.SqlClient.SqlConnection
         ~dulla^@204~            If (Me._connection Is Noth~dulla^@204~                   Me.InitConnection
~dulla^@204~    End If
                Return Me.~dulla^@204~             End Get
            Set~dulla^@204~     Me._connection = value
         ~dulla^@204~ t (Me.Adapter.InsertCommand) Is Nothi~dulla^@204~                  Me.Adapter.InsertCom~dulla^@204~ on = value
                End If
 ~dulla^@204~   If (Not (Me.Adapter.DeleteCommand) ~dulla^@204~ hen
                    Me.Adapter.D~dulla^@204~ Connection = value
                E~dulla^@204~           If (Not (Me.Adapter.UpdateC~dulla^@204~ thing) Then
                    Me.A~dulla^@204~ Command.Connection = value
         ~dulla^@204~ 
                Dim i As Integer = ~dulla^@204~       Do While (i < Me.CommandCollect~dulla^@204~                     If (Not (Me.Comma~dulla^@204~ i)) Is Nothing) Then
               ~dulla^@204~ e(Me.CommandCollection(i),System.Data~dulla^@204~ lCommand).Connection = value
       ~dulla^@204~ End If
                    i = (i + ~dulla^@204~        Loop
            End Set
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ adOnly Property CommandCollection() A~dulla^@204~ .SqlClient.SqlCommand()
            ~dulla^@204~         If (Me._commandCollection Is ~dulla^@204~ 
                    Me.InitCommandC~dulla^@204~               End If
               ~dulla^@204~ ommandCollection
            End Get~dulla^@204~  Property
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Property ClearBeforeFill() As Boolean~dulla^@204~  Get
                Return Me._clea~dulla^@204~             End Get
            Set~dulla^@204~     Me._clearBeforeFill = value
    ~dulla^@204~ et
        End Property
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Private Sub InitAdapter()
  ~dulla^@204~ _adapter = New System.Data.SqlClient.~dulla^@204~ r
            Dim tableMapping As Sy~dulla^@204~ mon.DataTableMapping = New System.Dat~dulla^@204~ TableMapping
            tableMappin~dulla^@204~  = "Table"
            tableMapping.~dulla^@204~ = "ProductsAvialable"
            ta~dulla^@204~ lumnMappings.Add("PartNo", "PartNo")~dulla^@204~ tableMapping.ColumnMappings.Add("QtyI~dulla^@204~ InShop1")
            tableMapping.C~dulla^@204~ .Add("QtyInShop2", "QtyInShop2")
   ~dulla^@204~ eMapping.ColumnMappings.Add("QtyInSto~dulla^@204~ ore")
            tableMapping.Colum~dulla^@204~ ("TotalQty", "TotalQty")
           ~dulla^@204~ .ColumnMappings.Add("Amount", "Amount~dulla^@204~    Me._adapter.TableMappings.Add(tabl~dulla^@204~           Me._adapter.DeleteCommand =~dulla^@204~ ata.SqlClient.SqlCommand
           ~dulla^@204~ DeleteCommand.Connection = Me.Connect~dulla^@204~     Me._adapter.DeleteCommand.Command~dulla^@204~ E FROM [dbo].[ProductsAvialable] WHER~dulla^@204~ = @Original_PartNo) AND (["& _ 
    ~dulla^@204~ QtyInShop1] = @Original_QtyInShop1) A~dulla^@204~ p2] = @Original_QtyInShop2) AN"& _ 
~dulla^@204~    "D ([QtyInStore] = @Original_QtyIn~dulla^@204~ TotalQty] = @Original_TotalQty) AN"& ~dulla^@204~        "D ([Amount] = @Original_Amoun~dulla^@204~      Me._adapter.DeleteCommand.Comman~dulla^@204~ m.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@Original_P~dulla^@204~ m.Data.SqlDbType.NVarChar, 0, System.~dulla^@204~ rDirection.Input, 0, 0, "PartNo", Sys~dulla^@204~ RowVersion.Original, false, Nothing, ~dulla^@204~ 
            Me._adapter.DeleteComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ nal_QtyInShop1", System.Data.SqlDbTyp~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ p1", System.Data.DataRowVersion.Origi~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@Original_QtyInShop2",~dulla^@204~ SqlDbType.Int, 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "QtyInShop2", System.Data~dulla^@204~ on.Original, false, Nothing, "", "", ~dulla^@204~      Me._adapter.DeleteCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ nStore", System.Data.SqlDbType.Int, 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Qty~dulla^@204~ tem.Data.DataRowVersion.Original, fal~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@Original_TotalQty", System.Da~dulla^@204~ Int, 0, System.Data.ParameterDirectio~dulla^@204~ , "TotalQty", System.Data.DataRowVers~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.DeleteCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@Original_Amo~dulla^@204~ Data.SqlDbType.Int, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "Amount", System.Dat~dulla^@204~ ion.Original, false, Nothing, "", "",~dulla^@204~       Me._adapter.InsertCommand = New~dulla^@204~ SqlClient.SqlCommand
            Me.~dulla^@204~ rtCommand.Connection = Me.Connection~dulla^@204~ Me._adapter.InsertCommand.CommandText~dulla^@204~ TO [dbo].[ProductsAvialable] ([PartNo~dulla^@204~ 1], [QtyInShop2], [Qty"& _ 
        ~dulla^@204~ ore], [TotalQty], [Amount]) VALUES (@~dulla^@204~ nShop1, @QtyInShop2, @QtyI"& _ 
    ~dulla^@204~ nStore, @TotalQty, @Amount);"&Global.~dulla^@204~ ualBasic.ChrW(13)&Global.Microsoft.Vi~dulla^@204~ W(10)&"SELECT PartNo, QtyInShop1, Qty~dulla^@204~ nStore,"& _ 
                " Total~dulla^@204~ ROM ProductsAvialable WHERE (PartNo =~dulla^@204~            Me._adapter.InsertCommand.~dulla^@204~  System.Data.CommandType.Text
      ~dulla^@204~ pter.InsertCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@PartNo", Sys~dulla^@204~ bType.NVarChar, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "PartNo", System.Data.Da~dulla^@204~ Current, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.InsertCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@QtyI~dulla^@204~ em.Data.SqlDbType.Int, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "QtyInShop1", Sys~dulla^@204~ RowVersion.Current, false, Nothing, "~dulla^@204~             Me._adapter.InsertCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ hop2", System.Data.SqlDbType.Int, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "QtyIn~dulla^@204~ m.Data.DataRowVersion.Current, false,~dulla^@204~  "", ""))
            Me._adapter.In~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@QtyInStore", System.Data.SqlDbTy~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ ore", System.Data.DataRowVersion.Curr~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ rtCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@TotalQty", System.Dat~dulla^@204~ nt, 0, System.Data.ParameterDirection~dulla^@204~  "TotalQty", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.InsertCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Amount", Syste~dulla^@204~ ype.Int, 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "Amount", System.Data.DataRowVe~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.UpdateCommand = New System.Data~dulla^@204~ lCommand
            Me._adapter.Upd~dulla^@204~ nnection = Me.Connection
           ~dulla^@204~ UpdateCommand.CommandText = "UPDATE [~dulla^@204~ sAvialable] SET [PartNo] = @PartNo, [~dulla^@204~  @QtyInSho"& _ 
                "p1,~dulla^@204~  = @QtyInShop2, [QtyInStore] = @QtyIn~dulla^@204~ Qty] = @TotalQ"& _ 
                ~dulla^@204~  = @Amount WHERE (([PartNo] = @Origin~dulla^@204~ D ([QtyInShop1] = "& _ 
            ~dulla^@204~ l_QtyInShop1) AND ([QtyInShop2] = @Or~dulla^@204~ hop2) AND ([QtyInStore"& _ 
        ~dulla^@204~ @Original_QtyInStore) AND ([TotalQty]~dulla^@204~ TotalQty) AND ([Amount] = "& _ 
    ~dulla^@204~ @Original_Amount));"&Global.Microsoft~dulla^@204~ ChrW(13)&Global.Microsoft.VisualBasic~dulla^@204~ LECT PartNo, QtyInShop1, QtyInShop2, ~dulla^@204~ otalQty"& _ 
                ", Amou~dulla^@204~ ctsAvialable WHERE (PartNo = @PartNo)~dulla^@204~   Me._adapter.UpdateCommand.CommandTy~dulla^@204~ ata.CommandType.Text
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@PartNo", System.Data.~dulla^@204~ rChar, 0, System.Data.ParameterDirect~dulla^@204~  0, "PartNo", System.Data.DataRowVers~dulla^@204~ false, Nothing, "", "", ""))
       ~dulla^@204~ ter.UpdateCommand.Parameters.Add(New ~dulla^@204~ qlClient.SqlParameter("@QtyInShop1", ~dulla^@204~ qlDbType.Int, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "QtyInShop1", System.Data.~dulla^@204~ n.Current, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.UpdateCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Qt~dulla^@204~ stem.Data.SqlDbType.Int, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "QtyInShop2", S~dulla^@204~ taRowVersion.Current, false, Nothing,~dulla^@204~ 
            Me._adapter.UpdateComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ nStore", System.Data.SqlDbType.Int, 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Qty~dulla^@204~ tem.Data.DataRowVersion.Current, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@TotalQty", System.Data.SqlDbTy~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ y", System.Data.DataRowVersion.Curren~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@Amount", System.Data.Sq~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ ount", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@Original_PartNo", Sy~dulla^@204~ DbType.NVarChar, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "PartNo", System.Data.D~dulla^@204~ .Original, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.UpdateCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Or~dulla^@204~ hop1", System.Data.SqlDbType.Int, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "QtyIn~dulla^@204~ m.Data.DataRowVersion.Original, false~dulla^@204~ , "", ""))
            Me._adapter.U~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@Original_QtyInShop2", System.Da~dulla^@204~ Int, 0, System.Data.ParameterDirectio~dulla^@204~ , "QtyInShop2", System.Data.DataRowVe~dulla^@204~ l, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@Original_Q~dulla^@204~ ystem.Data.SqlDbType.Int, 0, System.D~dulla^@204~ Direction.Input, 0, 0, "QtyInStore", ~dulla^@204~ ataRowVersion.Original, false, Nothin~dulla^@204~ ))
            Me._adapter.UpdateCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ iginal_TotalQty", System.Data.SqlDbTy~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ y", System.Data.DataRowVersion.Origin~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@Original_Amount", Syst~dulla^@204~ Type.Int, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "Amount", System.Data.DataRowV~dulla^@204~ al, false, Nothing, "", "", ""))
   ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._~dulla^@204~ New System.Data.SqlClient.SqlConnecti~dulla^@204~    Me._connection.ConnectionString = ~dulla^@204~ oryControlSystem.My.MySettings.Defaul~dulla^@204~ ntrolSystemConnectionString
        ~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Private S~dulla^@204~ dCollection()
            Me._comman~dulla^@204~  New System.Data.SqlClient.SqlCommand~dulla^@204~        Me._commandCollection(0) = New~dulla^@204~ SqlClient.SqlCommand
            Me.~dulla^@204~ ction(0).Connection = Me.Connection
~dulla^@204~ e._commandCollection(0).CommandText =~dulla^@204~ No, QtyInShop1, QtyInShop2, QtyInStor~dulla^@204~ Amount FROM dbo.Prod"& _ 
          ~dulla^@204~ ialable"
            Me._commandColl~dulla^@204~ mandType = System.Data.CommandType.Te~dulla^@204~ nd Sub
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute(),  _
     ~dulla^@204~ mponentModel.Design.HelpKeywordAttrib~dulla^@204~ TableAdapter"),  _
         System.C~dulla^@204~ .DataObjectMethodAttribute(System.Com~dulla^@204~ ataObjectMethodType.Fill, true)>  _
~dulla^@204~ c Overloads Overridable Function Fill~dulla^@204~ ble As InventoryControlSystemDataSet1~dulla^@204~ lableDataTable) As Integer
         ~dulla^@204~ .SelectCommand = Me.CommandCollection~dulla^@204~     If (Me.ClearBeforeFill = true) Th~dulla^@204~        dataTable.Clear
            E~dulla^@204~       Dim returnValue As Integer = Me~dulla^@204~ (dataTable)
            Return retur~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute(), ~dulla^@204~ System.ComponentModel.Design.HelpKeyw~dulla^@204~ "vs.data.TableAdapter"),  _
        ~dulla^@204~ nentModel.DataObjectMethodAttribute(S~dulla^@204~ ntModel.DataObjectMethodType.[Select]~dulla^@204~         Public Overloads Overridable ~dulla^@204~ ata() As InventoryControlSystemDataSe~dulla^@204~ ialableDataTable
            Me.Adap~dulla^@204~ mand = Me.CommandCollection(0)
     ~dulla^@204~ taTable As InventoryControlSystemData~dulla^@204~ AvialableDataTable = New InventoryCon~dulla^@204~ aSet1.ProductsAvialableDataTable
   ~dulla^@204~ dapter.Fill(dataTable)
            R~dulla^@204~ le
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~          System.ComponentModel.Design~dulla^@204~ ttribute("vs.data.TableAdapter")>  _~dulla^@204~ ic Overloads Overridable Function Upd~dulla^@204~ aTable As InventoryControlSystemDataS~dulla^@204~ vialableDataTable) As Integer
      ~dulla^@204~ Me.Adapter.Update(dataTable)
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute(),  _
         Sy~dulla^@204~ tModel.Design.HelpKeywordAttribute("v~dulla^@204~ dapter")>  _
        Public Overload~dulla^@204~  Function Update(ByVal dataSet As Inv~dulla^@204~ SystemDataSet1) As Integer
         ~dulla^@204~ Adapter.Update(dataSet, "ProductsAvia~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute(),~dulla^@204~  System.ComponentModel.Design.HelpKey~dulla^@204~ ("vs.data.TableAdapter")>  _
       ~dulla^@204~ oads Overridable Function Update(ByVa~dulla^@204~ System.Data.DataRow) As Integer
    ~dulla^@204~ n Me.Adapter.Update(New System.Data.D~dulla^@204~ aRow})
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
         System.ComponentModel.De~dulla^@204~ ordAttribute("vs.data.TableAdapter")>~dulla^@204~ Public Overloads Overridable Function~dulla^@204~  dataRows() As System.Data.DataRow) A~dulla^@204~           Return Me.Adapter.Update(da~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute(),~dulla^@204~  System.ComponentModel.Design.HelpKey~dulla^@204~ ("vs.data.TableAdapter"),  _
       ~dulla^@204~ onentModel.DataObjectMethodAttribute(~dulla^@204~ entModel.DataObjectMethodType.Delete,~dulla^@204~        Public Overloads Overridable F~dulla^@204~ e(ByVal Original_PartNo As String, By~dulla^@204~ QtyInShop1 As Integer, ByVal Original~dulla^@204~ s Integer, ByVal Original_QtyInStore ~dulla^@204~ yVal Original_TotalQty As Integer, By~dulla^@204~ Amount As Integer) As Integer
      ~dulla^@204~ ginal_PartNo Is Nothing) Then
      ~dulla^@204~ ow New System.ArgumentNullException("~dulla^@204~ No")
            Else
             ~dulla^@204~ .DeleteCommand.Parameters(0).Value = ~dulla^@204~ l_PartNo,String)
            End If~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(1~dulla^@204~ pe(Original_QtyInShop1,Integer)
    ~dulla^@204~ apter.DeleteCommand.Parameters(2).Val~dulla^@204~ iginal_QtyInShop2,Integer)
         ~dulla^@204~ .DeleteCommand.Parameters(3).Value = ~dulla^@204~ l_QtyInStore,Integer)
            Me~dulla^@204~ teCommand.Parameters(4).Value = CType~dulla^@204~ alQty,Integer)
            Me.Adapte~dulla^@204~ nd.Parameters(5).Value = CType(Origin~dulla^@204~ eger)
            Dim previousConnec~dulla^@204~ System.Data.ConnectionState = Me.Adap~dulla^@204~ mand.Connection.State
            If~dulla^@204~ .DeleteCommand.Connection.State And S~dulla^@204~ nnectionState.Open)  _
             ~dulla^@204~  System.Data.ConnectionState.Open) Th~dulla^@204~        Me.Adapter.DeleteCommand.Conne~dulla^@204~            End If
            Try 
~dulla^@204~    Dim returnValue As Integer = Me.Ad~dulla^@204~ ommand.ExecuteNonQuery
             ~dulla^@204~ urnValue
            Finally
      ~dulla^@204~ (previousConnectionState = System.Dat~dulla^@204~ tate.Closed) Then
                  ~dulla^@204~ DeleteCommand.Connection.Close
     ~dulla^@204~ d If
            End Try
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute(),  _
         Syste~dulla^@204~ del.Design.HelpKeywordAttribute("vs.d~dulla^@204~ ter"),  _
         System.ComponentM~dulla^@204~ ctMethodAttribute(System.ComponentMod~dulla^@204~ MethodType.Insert, true)>  _
       ~dulla^@204~ oads Overridable Function Insert(ByVa~dulla^@204~ tring, ByVal QtyInShop1 As Integer, B~dulla^@204~ p2 As Integer, ByVal QtyInStore As In~dulla^@204~ TotalQty As Integer, ByVal Amount As ~dulla^@204~ nteger
            If (PartNo Is Not~dulla^@204~                Throw New System.Argum~dulla^@204~ ion("PartNo")
            Else
    ~dulla^@204~ e.Adapter.InsertCommand.Parameters(0)~dulla^@204~ e(PartNo,String)
            End If~dulla^@204~ Me.Adapter.InsertCommand.Parameters(1~dulla^@204~ pe(QtyInShop1,Integer)
            M~dulla^@204~ ertCommand.Parameters(2).Value = CTyp~dulla^@204~ Integer)
            Me.Adapter.Inse~dulla^@204~ ameters(3).Value = CType(QtyInStore,I~dulla^@204~         Me.Adapter.InsertCommand.Para~dulla^@204~ ue = CType(TotalQty,Integer)
       ~dulla^@204~ er.InsertCommand.Parameters(5).Value ~dulla^@204~ t,Integer)
            Dim previousC~dulla^@204~ e As System.Data.ConnectionState = Me~dulla^@204~ rtCommand.Connection.State
         ~dulla^@204~ apter.InsertCommand.Connection.State ~dulla^@204~ ta.ConnectionState.Open)  _
        ~dulla^@204~    <> System.Data.ConnectionState.Ope~dulla^@204~             Me.Adapter.InsertCommand.~dulla^@204~ en
            End If
            T~dulla^@204~         Dim returnValue As Integer = ~dulla^@204~ sertCommand.ExecuteNonQuery
        ~dulla^@204~ n returnValue
            Finally
 ~dulla^@204~   If (previousConnectionState = Syste~dulla^@204~ tionState.Closed) Then
             ~dulla^@204~ pter.InsertCommand.Connection.Close
~dulla^@204~    End If
            End Try
     ~dulla^@204~ on
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute(),  _
         ~dulla^@204~ entModel.Design.HelpKeywordAttribute(~dulla^@204~ eAdapter"),  _
         System.Compo~dulla^@204~ aObjectMethodAttribute(System.Compone~dulla^@204~ bjectMethodType.Update, true)>  _
  ~dulla^@204~ Overloads Overridable Function Update~dulla^@204~  As String, ByVal QtyInShop1 As Integ~dulla^@204~ InShop2 As Integer, ByVal QtyInStore ~dulla^@204~ yVal TotalQty As Integer, ByVal Amoun~dulla^@204~  ByVal Original_PartNo As String, ByVal Original_QtyInShop1 As Integer, ByVal O~dulla^@204~ Shop2 As Integer, ByVal Original_QtyI~dulla^@204~ eger, ByVal Original_TotalQty As Inte~dulla^@204~ iginal_Amount As Integer) As Integer~dulla^@204~ If (PartNo Is Nothing) Then
        ~dulla^@204~  New System.ArgumentNullException("Pa~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(0).Value = CType(PartN~dulla^@204~           End If
            Me.Adap~dulla^@204~ mand.Parameters(1).Value = CType(QtyI~dulla^@204~ r)
            Me.Adapter.UpdateComm~dulla^@204~ s(2).Value = CType(QtyInShop2,Integer~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ Type(QtyInStore,Integer)
           ~dulla^@204~ pdateCommand.Parameters(4).Value = CT~dulla^@204~ Integer)
            Me.Adapter.Upda~dulla^@204~ ameters(5).Value = CType(Amount,Integ~dulla^@204~     If (Original_PartNo Is Nothing) T~dulla^@204~         Throw New System.ArgumentNull~dulla^@204~ iginal_PartNo")
            Else
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ ype(Original_PartNo,String)
        ~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ Value = CType(Original_QtyInShop1,Int~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~  = CType(Original_QtyInShop2,Integer)~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ ype(Original_QtyInStore,Integer)
   ~dulla^@204~ dapter.UpdateCommand.Parameters(10).V~dulla^@204~ Original_TotalQty,Integer)
         ~dulla^@204~ .UpdateCommand.Parameters(11).Value =~dulla^@204~ al_Amount,Integer)
            Dim p~dulla^@204~ tionState As System.Data.ConnectionSt~dulla^@204~ ter.UpdateCommand.Connection.State
 ~dulla^@204~  ((Me.Adapter.UpdateCommand.Connectio~dulla^@204~ ystem.Data.ConnectionState.Open)  _
~dulla^@204~            <> System.Data.ConnectionS~dulla^@204~ en
                Me.Adapter.Update~dulla^@204~ ction.Open
            End If
     ~dulla^@204~                 Dim returnValue As In~dulla^@204~ apter.UpdateCommand.ExecuteNonQuery
~dulla^@204~    Return returnValue
            Fi~dulla^@204~           If (previousConnectionState~dulla^@204~ a.ConnectionState.Closed) Then
     ~dulla^@204~   Me.Adapter.UpdateCommand.Connection~dulla^@204~            End If
            End Tr~dulla^@204~ d Function
    End Class
    
    ~dulla^@204~ om.Compiler.GeneratedCodeAttribute("S~dulla^@204~ sign.TypedDataSetGenerator", "2.0.0.0~dulla^@204~ System.ComponentModel.DesignerCategor~dulla^@204~ ode"),  _
     System.ComponentModel~dulla^@204~ true),  _
     System.ComponentModel~dulla^@204~ tribute(true),  _
     System.Compon~dulla^@204~ gnerAttribute("Microsoft.VSDesigner.D~dulla^@204~ ign.TableAdapterDesigner, Microsoft.V~dulla^@204~  
        ", Version=8.0.0.0, Cultur~dulla^@204~ blicKeyToken=b03f5f7f11d50a3a"),  _
~dulla^@204~ omponentModel.Design.HelpKeywordAttri~dulla^@204~ .TableAdapter")>  _
    Partial Publ~dulla^@204~ haseTableAdapter
        Inherits Sy~dulla^@204~ tModel.Component
        
        P~dulla^@204~ ents _adapter As System.Data.SqlClien~dulla^@204~ ter
        
        Private _conne~dulla^@204~ em.Data.SqlClient.SqlConnection
    ~dulla^@204~  Private _commandCollection() As Syst~dulla^@204~ ient.SqlCommand
        
        Pr~dulla^@204~ eforeFill As Boolean
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Sub New()
            MyB~dulla^@204~         Me.ClearBeforeFill = true
  ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pri~dulla^@204~  Property Adapter() As System.Data.Sq~dulla^@204~ taAdapter
            Get
         ~dulla^@204~ ._adapter Is Nothing) Then
         ~dulla^@204~ .InitAdapter
                End If~dulla^@204~     Return Me._adapter
            E~dulla^@204~    End Property
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ riend Property Connection() As System~dulla^@204~ nt.SqlConnection
            Get
  ~dulla^@204~  If (Me._connection Is Nothing) Then~dulla^@204~         Me.InitConnection
          ~dulla^@204~ 
                Return Me._connectio~dulla^@204~   End Get
            Set
         ~dulla^@204~ nnection = value
                If ~dulla^@204~ ter.InsertCommand) Is Nothing) Then
~dulla^@204~        Me.Adapter.InsertCommand.Conne~dulla^@204~ 
                End If
           ~dulla^@204~ (Me.Adapter.DeleteCommand) Is Nothing~dulla^@204~                Me.Adapter.DeleteComma~dulla^@204~  = value
                End If
   ~dulla^@204~ If (Not (Me.Adapter.UpdateCommand) Is~dulla^@204~ n
                    Me.Adapter.Upd~dulla^@204~ nnection = value
                End~dulla^@204~         Dim i As Integer = 0
       ~dulla^@204~ hile (i < Me.CommandCollection.Length~dulla^@204~           If (Not (Me.CommandCollecti~dulla^@204~ hing) Then
                        C~dulla^@204~ ndCollection(i),System.Data.SqlClient~dulla^@204~ Connection = value
                 ~dulla^@204~                   i = (i + 1)
      ~dulla^@204~ p
            End Set
        End P~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Protected~dulla^@204~ perty CommandCollection() As System.D~dulla^@204~ .SqlCommand()
            Get
     ~dulla^@204~  (Me._commandCollection Is Nothing) T~dulla^@204~             Me.InitCommandCollection~dulla^@204~     End If
                Return Me~dulla^@204~ ection
            End Get
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ learBeforeFill() As Boolean
        ~dulla^@204~             Return Me._clearBeforeFil~dulla^@204~   End Get
            Set
         ~dulla^@204~ earBeforeFill = value
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ ivate Sub InitAdapter()
            ~dulla^@204~  New System.Data.SqlClient.SqlDataAda~dulla^@204~      Dim tableMapping As System.Data.~dulla^@204~ bleMapping = New System.Data.Common.D~dulla^@204~ ng
            tableMapping.SourceTa~dulla^@204~ 
            tableMapping.DataSetTab~dulla^@204~ e"
            tableMapping.ColumnMa~dulla^@204~ upplierID", "SupplierID")
          ~dulla^@204~ g.ColumnMappings.Add("InvoiceNo", "In~dulla^@204~           Me._adapter.TableMappings.A~dulla^@204~ ng)
            Me._adapter.DeleteCo~dulla^@204~ ystem.Data.SqlClient.SqlCommand
    ~dulla^@204~ dapter.DeleteCommand.Connection = Me.~dulla^@204~            Me._adapter.DeleteCommand.~dulla^@204~  "DELETE FROM [dbo].[Purchase] WHERE ~dulla^@204~ ] = @Original_SupplierID) AND ([I"& _~dulla^@204~       "nvoiceNo] = @Original_InvoiceN~dulla^@204~      Me._adapter.DeleteCommand.Comman~dulla^@204~ m.Data.CommandType.Text
            ~dulla^@204~ eleteCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@Original_SupplierI~dulla^@204~ ta.SqlDbType.NVarChar, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "SupplierID", Sys~dulla^@204~ RowVersion.Original, false, Nothing, ~dulla^@204~ 
            Me._adapter.DeleteComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ nal_InvoiceNo", System.Data.SqlDbType~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ iceNo", System.Data.DataRowVersion.Or~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ nsertCommand = New System.Data.SqlCli~dulla^@204~ d
            Me._adapter.InsertComm~dulla^@204~ n = Me.Connection
            Me._ad~dulla^@204~ ommand.CommandText = "INSERT INTO [db~dulla^@204~  ([SupplierID], [InvoiceNo]) VALUES (~dulla^@204~ @In"& _ 
                "voiceNo);"~dulla^@204~ soft.VisualBasic.ChrW(13)&Global.Micr~dulla^@204~ asic.ChrW(10)&"SELECT SupplierID, Inv~dulla^@204~ urchase WHERE (InvoiceNo = @Invoic"& ~dulla^@204~        "eNo) AND (SupplierID = @Suppl~dulla^@204~         Me._adapter.InsertCommand.Com~dulla^@204~ stem.Data.CommandType.Text
         ~dulla^@204~ r.InsertCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@SupplierID", Sy~dulla^@204~ DbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SupplierID", S~dulla^@204~ taRowVersion.Current, false, Nothing,~dulla^@204~ 
            Me._adapter.InsertComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ iceNo", System.Data.SqlDbType.NVarCha~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ System.Data.DataRowVersion.Current, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and = New System.Data.SqlClient.SqlCo~dulla^@204~       Me._adapter.UpdateCommand.Conne~dulla^@204~ nnection
            Me._adapter.Upd~dulla^@204~ mmandText = "UPDATE [dbo].[Purchase] ~dulla^@204~ ID] = @SupplierID, [InvoiceNo] = @Inv~dulla^@204~ 
                "WHERE (([SupplierID~dulla^@204~ _SupplierID) AND ([InvoiceNo] = @Orig~dulla^@204~  _ 
                "eNo));"&Global.~dulla^@204~ ualBasic.ChrW(13)&Global.Microsoft.Vi~dulla^@204~ W(10)&"SELECT SupplierID, InvoiceNo F~dulla^@204~ WHERE (InvoiceNo = @InvoiceNo"& _ 
 ~dulla^@204~   ") AND (SupplierID = @SupplierID)"~dulla^@204~ Me._adapter.UpdateCommand.CommandType~dulla^@204~ a.CommandType.Text
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@SupplierID", System.Dat~dulla^@204~ VarChar, 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "SupplierID", System.Data.DataR~dulla^@204~ rent, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.UpdateCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Invoice~dulla^@204~ ata.SqlDbType.NVarChar, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "InvoiceNo", Sys~dulla^@204~ RowVersion.Current, false, Nothing, "~dulla^@204~             Me._adapter.UpdateCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ al_SupplierID", System.Data.SqlDbType~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ lierID", System.Data.DataRowVersion.O~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ UpdateCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@Original_InvoiceN~dulla^@204~ ta.SqlDbType.NVarChar, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "InvoiceNo", Syst~dulla^@204~ owVersion.Original, false, Nothing, "~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ rivate Sub InitConnection()
        ~dulla^@204~ ction = New System.Data.SqlClient.Sql~dulla^@204~            Me._connection.ConnectionS~dulla^@204~ l.InventoryControlSystem.My.MySetting~dulla^@204~ entoryControlSystemConnectionString
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ itCommandCollection()
            Me~dulla^@204~ ection = New System.Data.SqlClient.Sq~dulla^@204~ }
            Me._commandCollection(~dulla^@204~ em.Data.SqlClient.SqlCommand
       ~dulla^@204~ andCollection(0).Connection = Me.Conn~dulla^@204~        Me._commandCollection(0).Comma~dulla^@204~ ECT SupplierID, InvoiceNo FROM dbo.Pu~dulla^@204~         Me._commandCollection(0).Comm~dulla^@204~ tem.Data.CommandType.Text
        En~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute(),  _
         System.Com~dulla^@204~ esign.HelpKeywordAttribute("vs.data.T~dulla^@204~ ,  _
         System.ComponentModel.~dulla^@204~ hodAttribute(System.ComponentModel.Da~dulla^@204~ dType.Fill, true)>  _
        Public~dulla^@204~ erridable Function Fill(ByVal dataTab~dulla^@204~ ryControlSystemDataSet1.PurchaseDataT~dulla^@204~ ger
            Me.Adapter.SelectCom~dulla^@204~ mandCollection(0)
            If (Me~dulla^@204~ ill = true) Then
                dat~dulla^@204~ 
            End If
            Dim ~dulla^@204~ s Integer = Me.Adapter.Fill(dataTable~dulla^@204~   Return returnValue
        End Fun~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute(),  _
         System.Com~dulla^@204~ esign.HelpKeywordAttribute("vs.data.T~dulla^@204~ ,  _
         System.ComponentModel.~dulla^@204~ hodAttribute(System.ComponentModel.Da~dulla^@204~ dType.[Select], true)>  _
        Pu~dulla^@204~ s Overridable Function GetData() As I~dulla^@204~ olSystemDataSet1.PurchaseDataTable
 ~dulla^@204~ .Adapter.SelectCommand = Me.CommandCo~dulla^@204~             Dim dataTable As Inventor~dulla^@204~ mDataSet1.PurchaseDataTable = New Inv~dulla^@204~ SystemDataSet1.PurchaseDataTable
   ~dulla^@204~ dapter.Fill(dataTable)
            R~dulla^@204~ le
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~          System.ComponentModel.Design~dulla^@204~ ttribute("vs.data.TableAdapter")>  _~dulla^@204~ ic Overloads Overridable Function Upd~dulla^@204~ aTable As InventoryControlSystemDataS~dulla^@204~ ataTable) As Integer
            Ret~dulla^@204~ r.Update(dataTable)
        End Func~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute(),  _
         System.Comp~dulla^@204~ sign.HelpKeywordAttribute("vs.data.Ta~dulla^@204~   _
        Public Overloads Overrid~dulla^@204~  Update(ByVal dataSet As InventoryCon~dulla^@204~ aSet1) As Integer
            Return~dulla^@204~ pdate(dataSet, "Purchase")
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute(),  _
         Syst~dulla^@204~ odel.Design.HelpKeywordAttribute("vs.~dulla^@204~ pter")>  _
        Public Overloads ~dulla^@204~ unction Update(ByVal dataRow As Syste~dulla^@204~ w) As Integer
            Return Me.~dulla^@204~ e(New System.Data.DataRow() {dataRow}~dulla^@204~ d Function
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute(),  _
 ~dulla^@204~ m.ComponentModel.Design.HelpKeywordAt~dulla^@204~ ata.TableAdapter")>  _
        Publi~dulla^@204~ verridable Function Update(ByVal data~dulla^@204~ tem.Data.DataRow) As Integer
       ~dulla^@204~ e.Adapter.Update(dataRows)
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute(),  _
         Syst~dulla^@204~ odel.Design.HelpKeywordAttribute("vs.~dulla^@204~ pter"),  _
         System.Component~dulla^@204~ ectMethodAttribute(System.ComponentMo~dulla^@204~ tMethodType.Delete, true)>  _
      ~dulla^@204~ loads Overridable Function Delete(ByV~dulla^@204~ upplierID As String, ByVal Original_I~dulla^@204~ tring) As Integer
            If (Or~dulla^@204~ erID Is Nothing) Then
              ~dulla^@204~ ystem.ArgumentNullException("Original~dulla^@204~ 
            Else
                M~dulla^@204~ eteCommand.Parameters(0).Value = CTyp~dulla^@204~ pplierID,String)
            End If~dulla^@204~ If (Original_InvoiceNo Is Nothing) Th~dulla^@204~        Throw New System.ArgumentNullE~dulla^@204~ ginal_InvoiceNo")
            Else
~dulla^@204~    Me.Adapter.DeleteCommand.Parameter~dulla^@204~ CType(Original_InvoiceNo,String)
   ~dulla^@204~ If
            Dim previousConnectio~dulla^@204~ tem.Data.ConnectionState = Me.Adapter~dulla^@204~ d.Connection.State
            If ((~dulla^@204~ leteCommand.Connection.State And Syst~dulla^@204~ ctionState.Open)  _
                ~dulla^@204~ stem.Data.ConnectionState.Open) Then~dulla^@204~     Me.Adapter.DeleteCommand.Connecti~dulla^@204~         End If
            Try 
   ~dulla^@204~ Dim returnValue As Integer = Me.Adapt~dulla^@204~ and.ExecuteNonQuery
                ~dulla^@204~ Value
            Finally
         ~dulla^@204~ eviousConnectionState = System.Data.C~dulla^@204~ e.Closed) Then
                    M~dulla^@204~ eteCommand.Connection.Close
        ~dulla^@204~ f
            End Try
        End F~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute(),  _
         System.C~dulla^@204~ .Design.HelpKeywordAttribute("vs.data~dulla^@204~ "),  _
         System.ComponentMode~dulla^@204~ ethodAttribute(System.ComponentModel.~dulla^@204~ hodType.Insert, true)>  _
        Pu~dulla^@204~ s Overridable Function Insert(ByVal S~dulla^@204~ String, ByVal InvoiceNo As String) As~dulla^@204~          If (SupplierID Is Nothing) T~dulla^@204~         Throw New System.ArgumentNull~dulla^@204~ pplierID")
            Else
       ~dulla^@204~ dapter.InsertCommand.Parameters(0).Va~dulla^@204~ upplierID,String)
            End If
            If (InvoiceNo Is Nothing) Th~dulla^@204~        Throw New System.ArgumentNullE~dulla^@204~ oiceNo")
            Else
         ~dulla^@204~ pter.InsertCommand.Parameters(1).Valu~dulla^@204~ oiceNo,String)
            End If
 ~dulla^@204~ m previousConnectionState As System.D~dulla^@204~ nState = Me.Adapter.InsertCommand.Con~dulla^@204~ 
            If ((Me.Adapter.InsertC~dulla^@204~ tion.State And System.Data.Connection~dulla^@204~ _
                        <> System.~dulla^@204~ onState.Open) Then
                M~dulla^@204~ ertCommand.Connection.Open
         ~dulla^@204~           Try 
                Dim r~dulla^@204~  Integer = Me.Adapter.InsertCommand.E~dulla^@204~ y
                Return returnValue~dulla^@204~  Finally
                If (previou~dulla^@204~ ate = System.Data.ConnectionState.Clo~dulla^@204~                   Me.Adapter.InsertCo~dulla^@204~ ion.Close
                End If
  ~dulla^@204~  Try
        End Function
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
         System.ComponentModel.Desi~dulla^@204~ dAttribute("vs.data.TableAdapter"),  ~dulla^@204~ ystem.ComponentModel.DataObjectMethod~dulla^@204~ tem.ComponentModel.DataObjectMethodTy~dulla^@204~ ue)>  _
        Public Overloads Ove~dulla^@204~ tion Update(ByVal SupplierID As Strin~dulla^@204~ iceNo As String, ByVal Original_Suppl~dulla^@204~ ng, ByVal Original_InvoiceNo As Strin~dulla^@204~ 
            If (SupplierID Is Nothi~dulla^@204~              Throw New System.Argumen~dulla^@204~ n("SupplierID")
            Else
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ ype(SupplierID,String)
            E~dulla^@204~       If (InvoiceNo Is Nothing) Then~dulla^@204~     Throw New System.ArgumentNullExce~dulla^@204~ eNo")
            Else
            ~dulla^@204~ r.UpdateCommand.Parameters(1).Value =~dulla^@204~ eNo,String)
            End If
    ~dulla^@204~ riginal_SupplierID Is Nothing) Then
~dulla^@204~    Throw New System.ArgumentNullExcep~dulla^@204~ l_SupplierID")
            Else
   ~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(2~dulla^@204~ pe(Original_SupplierID,String)
     ~dulla^@204~ 
            If (Original_InvoiceNo ~dulla^@204~ hen
                Throw New System~dulla^@204~ Exception("Original_InvoiceNo")
    ~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(3).Value = CType(Original_InvoiceN~dulla^@204~           End If
            Dim pre~dulla^@204~ onState As System.Data.ConnectionStat~dulla^@204~ r.UpdateCommand.Connection.State
   ~dulla^@204~ (Me.Adapter.UpdateCommand.Connection.~dulla^@204~ tem.Data.ConnectionState.Open)  _
  ~dulla^@204~          <> System.Data.ConnectionSta~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ion.Open
            End If
       ~dulla^@204~               Dim returnValue As Inte~dulla^@204~ ter.UpdateCommand.ExecuteNonQuery
  ~dulla^@204~  Return returnValue
            Fina~dulla^@204~         If (previousConnectionState =~dulla^@204~ ConnectionState.Closed) Then
       ~dulla^@204~ Me.Adapter.UpdateCommand.Connection.C~dulla^@204~          End If
            End Try~dulla^@204~ Function
    End Class
    
    <S~dulla^@204~ .Compiler.GeneratedCodeAttribute("Sys~dulla^@204~ gn.TypedDataSetGenerator", "2.0.0.0")~dulla^@204~ stem.ComponentModel.DesignerCategoryA~dulla^@204~ e"),  _
     System.ComponentModel.T~dulla^@204~ ue),  _
     System.ComponentModel.D~dulla^@204~ ibute(true),  _
     System.Componen~dulla^@204~ erAttribute("Microsoft.VSDesigner.Dat~dulla^@204~ n.TableAdapterDesigner, Microsoft.VSD~dulla^@204~ 
        ", Version=8.0.0.0, Culture=~dulla^@204~ icKeyToken=b03f5f7f11d50a3a"),  _
  ~dulla^@204~ ponentModel.Design.HelpKeywordAttribu~dulla^@204~ ableAdapter")>  _
    Partial Public~dulla^@204~ seInfoTableAdapter
        Inherits ~dulla^@204~ entModel.Component
        
       ~dulla^@204~ Events _adapter As System.Data.SqlCli~dulla^@204~ apter
        
        Private _con~dulla^@204~ stem.Data.SqlClient.SqlConnection
  ~dulla^@204~    Private _commandCollection() As Sy~dulla^@204~ Client.SqlCommand
        
        ~dulla^@204~ rBeforeFill As Boolean
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Sub New()
            M~dulla^@204~           Me.ClearBeforeFill = true
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ ly Property Adapter() As System.Data.~dulla^@204~ DataAdapter
            Get
       ~dulla^@204~ Me._adapter Is Nothing) Then
       ~dulla^@204~ Me.InitAdapter
                End I~dulla^@204~       Return Me._adapter
           ~dulla^@204~      End Property
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Friend Property Connection() As Syst~dulla^@204~ ient.SqlConnection
            Get
~dulla^@204~    If (Me._connection Is Nothing) The~dulla^@204~           Me.InitConnection
        ~dulla^@204~ f
                Return Me._connect~dulla^@204~     End Get
            Set
       ~dulla^@204~ connection = value
                I~dulla^@204~ apter.InsertCommand) Is Nothing) Then~dulla^@204~          Me.Adapter.InsertCommand.Con~dulla^@204~ ue
                End If
         ~dulla^@204~ t (Me.Adapter.DeleteCommand) Is Nothi~dulla^@204~                  Me.Adapter.DeleteCom~dulla^@204~ on = value
                End If
 ~dulla^@204~   If (Not (Me.Adapter.UpdateCommand) ~dulla^@204~ hen
                    Me.Adapter.U~dulla^@204~ Connection = value
                E~dulla^@204~           Dim i As Integer = 0
     ~dulla^@204~  While (i < Me.CommandCollection.Leng~dulla^@204~             If (Not (Me.CommandCollec~dulla^@204~ othing) Then
                       ~dulla^@204~ mandCollection(i),System.Data.SqlClie~dulla^@204~ ).Connection = value
               ~dulla^@204~                     i = (i + 1)
    ~dulla^@204~ oop
            End Set
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Protect~dulla^@204~ roperty CommandCollection() As System~dulla^@204~ nt.SqlCommand()
            Get
   ~dulla^@204~ If (Me._commandCollection Is Nothing)~dulla^@204~               Me.InitCommandCollectio~dulla^@204~       End If
                Return ~dulla^@204~ llection
            End Get
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  ClearBeforeFill() As Boolean
      ~dulla^@204~               Return Me._clearBeforeF~dulla^@204~     End Get
            Set
       ~dulla^@204~ clearBeforeFill = value
            ~dulla^@204~     End Property
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Private Sub InitAdapter()
          ~dulla^@204~  = New System.Data.SqlClient.SqlDataA~dulla^@204~        Dim tableMapping As System.Dat~dulla^@204~ TableMapping = New System.Data.Common~dulla^@204~ ping
            tableMapping.Source~dulla^@204~ e"
            tableMapping.DataSetT~dulla^@204~ aseInfo"
            tableMapping.Co~dulla^@204~ Add("PartNo", "PartNo")
            ~dulla^@204~ ColumnMappings.Add("Quantity", "Quant~dulla^@204~       tableMapping.ColumnMappings.Add~dulla^@204~ mount")
            tableMapping.Col~dulla^@204~ dd("SupplierID", "SupplierID")
     ~dulla^@204~ apping.ColumnMappings.Add("InvoiceNo"~dulla^@204~ )
            Me._adapter.TableMappi~dulla^@204~ Mapping)
            Me._adapter.Del~dulla^@204~ New System.Data.SqlClient.SqlCommand~dulla^@204~ Me._adapter.DeleteCommand.Connection ~dulla^@204~ on
            Me._adapter.DeleteCom~dulla^@204~ ext = "DELETE FROM [dbo].[PurchaseInf~dulla^@204~ artNo] = @Original_PartNo) AND ([Quan~dulla^@204~            "ity] = @Original_Quantity~dulla^@204~ t] = @Original_Amount) AND ([Supplier~dulla^@204~                " @Original_SupplierID~dulla^@204~ ceNo] = @Original_InvoiceNo))"
     ~dulla^@204~ apter.DeleteCommand.CommandType = Sys~dulla^@204~ andType.Text
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PartNo", Sys~dulla^@204~ bType.NVarChar, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "PartNo", System.Data.Da~dulla^@204~ Original, false, Nothing, "", "", "")~dulla^@204~   Me._adapter.DeleteCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@Ori~dulla^@204~ y", System.Data.SqlDbType.Int, 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "Quantity~dulla^@204~ a.DataRowVersion.Original, false, Not~dulla^@204~  ""))
            Me._adapter.Delete~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @Original_Amount", System.Data.SqlDbT~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@Original_SupplierID", S~dulla^@204~ lDbType.NVarChar, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "SupplierID", System.D~dulla^@204~ rsion.Original, false, Nothing, "", "~dulla^@204~         Me._adapter.DeleteCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ nvoiceNo", System.Data.SqlDbType.NVar~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command = New System.Data.SqlClient.S~dulla^@204~           Me._adapter.InsertCommand.C~dulla^@204~ e.Connection
            Me._adapter~dulla^@204~ d.CommandText = "INSERT INTO [dbo].[P~dulla^@204~ ([PartNo], [Quantity], [Amount], [Sup~dulla^@204~  _ 
                "InvoiceNo]) VAL~dulla^@204~  @Quantity, @Amount, @SupplierID, @In~dulla^@204~ obal.Microsoft.VisualBasic.ChrW(13)&G~dulla^@204~ ft.VisualBasic.ChrW(10)&"SELE"& _ 
 ~dulla^@204~   "CT PartNo, Quantity, Amount, Suppl~dulla^@204~ eNo FROM PurchaseInfo WHERE (Part"& _~dulla^@204~       "No = @PartNo)"
            Me~dulla^@204~ ertCommand.CommandType = System.Data.~dulla^@204~ ext
            Me._adapter.InsertCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ artNo", System.Data.SqlDbType.NVarCha~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ tem.Data.DataRowVersion.Current, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Quantity", System.Data.SqlDbTy~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ y", System.Data.DataRowVersion.Curren~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@Amount", System.Data.Sq~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ ount", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ertCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@SupplierID", System.~dulla^@204~ e.NVarChar, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "SupplierID", System.Data.Da~dulla^@204~ Current, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.InsertCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Invo~dulla^@204~ m.Data.SqlDbType.NVarChar, 0, System.~dulla^@204~ rDirection.Input, 0, 0, "InvoiceNo", ~dulla^@204~ ataRowVersion.Current, false, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ tem.Data.SqlClient.SqlCommand
      ~dulla^@204~ pter.UpdateCommand.Connection = Me.Co~dulla^@204~          Me._adapter.UpdateCommand.Co~dulla^@204~ UPDATE [dbo].[PurchaseInfo] SET [Part~dulla^@204~ , [Quantity] = @Quantity, [Amou"& _ ~dulla^@204~     "nt] = @Amount, [SupplierID] = @S~dulla^@204~ nvoiceNo] = @InvoiceNo WHERE (([Par"&~dulla^@204~         "tNo] = @Original_PartNo) AND~dulla^@204~ = @Original_Quantity) AND ([Amount] =~dulla^@204~             "Original_Amount) AND ([S~dulla^@204~ @Original_SupplierID) AND ([InvoiceNo~dulla^@204~                 "riginal_InvoiceNo));~dulla^@204~ osoft.VisualBasic.ChrW(13)&Global.Mic~dulla^@204~ Basic.ChrW(10)&"SELECT PartNo, Quanti~dulla^@204~ upplierID, InvoiceNo FRO"& _ 
      ~dulla^@204~ PurchaseInfo WHERE (PartNo = @PartNo)~dulla^@204~   Me._adapter.UpdateCommand.CommandTy~dulla^@204~ ata.CommandType.Text
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@PartNo", System.Data.~dulla^@204~ rChar, 0, System.Data.ParameterDirect~dulla^@204~  0, "PartNo", System.Data.DataRowVers~dulla^@204~ false, Nothing, "", "", ""))
       ~dulla^@204~ ter.UpdateCommand.Parameters.Add(New ~dulla^@204~ qlClient.SqlParameter("@Quantity", Sy~dulla^@204~ DbType.Int, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "Quantity", System.Data.Data~dulla^@204~ rrent, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.UpdateCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@Amount~dulla^@204~ a.SqlDbType.Int, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "Amount", System.Data.D~dulla^@204~ .Current, false, Nothing, "", "", "")~dulla^@204~   Me._adapter.UpdateCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@Sup~dulla^@204~ tem.Data.SqlDbType.NVarChar, 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "SupplierID~dulla^@204~ a.DataRowVersion.Current, false, Noth~dulla^@204~ ""))
            Me._adapter.UpdateC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ InvoiceNo", System.Data.SqlDbType.NVa~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ o", System.Data.DataRowVersion.Curren~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@Original_PartNo", Syste~dulla^@204~ ype.NVarChar, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "PartNo", System.Data.Data~dulla^@204~ iginal, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.UpdateCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@Origi~dulla^@204~ , System.Data.SqlDbType.Int, 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "Quantity",~dulla^@204~ DataRowVersion.Original, false, Nothi~dulla^@204~ "))
            Me._adapter.UpdateCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ riginal_Amount", System.Data.SqlDbTyp~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@Original_SupplierID", Sys~dulla^@204~ bType.NVarChar, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "SupplierID", System.Dat~dulla^@204~ ion.Original, false, Nothing, "", "",~dulla^@204~       Me._adapter.UpdateCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ oiceNo", System.Data.SqlDbType.NVarCh~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ ng, "", "", ""))
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Private Sub InitConn~dulla^@204~          Me._connection = New System.~dulla^@204~ t.SqlConnection
            Me._conn~dulla^@204~ tionString = Global.InventoryControlS~dulla^@204~ ttings.Default.InventoryControlSystem~dulla^@204~ ing
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Private Sub InitCommandCollection~dulla^@204~    Me._commandCollection = New System~dulla^@204~ nt.SqlCommand(0) {}
            Me._~dulla^@204~ tion(0) = New System.Data.SqlClient.S~dulla^@204~           Me._commandCollection(0).Co~dulla^@204~ .Connection
            Me._commandC~dulla^@204~ CommandText = "SELECT PartNo, Quantit~dulla^@204~ pplierID, InvoiceNo FROM dbo.Purchase~dulla^@204~       Me._commandCollection(0).Comman~dulla^@204~ m.Data.CommandType.Text
        End ~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute(),  _
         System.Compo~dulla^@204~ ign.HelpKeywordAttribute("vs.data.Tab~dulla^@204~  _
         System.ComponentModel.Da~dulla^@204~ dAttribute(System.ComponentModel.Data~dulla^@204~ ype.Fill, true)>  _
        Public O~dulla^@204~ ridable Function Fill(ByVal dataTable~dulla^@204~ ControlSystemDataSet1.PurchaseInfoDat~dulla^@204~ teger
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
        ~dulla^@204~ earBeforeFill = true) Then
         ~dulla^@204~ ble.Clear
            End If
      ~dulla^@204~ urnValue As Integer = Me.Adapter.Fill~dulla^@204~             Return returnValue
     ~dulla^@204~ on
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute(),  _
         ~dulla^@204~ entModel.Design.HelpKeywordAttribute(~dulla^@204~ eAdapter"),  _
         System.Compo~dulla^@204~ aObjectMethodAttribute(System.Compone~dulla^@204~ bjectMethodType.[Select], true)>  _
~dulla^@204~ c Overloads Overridable Function GetD~dulla^@204~ ntoryControlSystemDataSet1.PurchaseIn~dulla^@204~             Me.Adapter.SelectCommand ~dulla^@204~ ollection(0)
            Dim dataTab~dulla^@204~ ryControlSystemDataSet1.PurchaseInfoD~dulla^@204~ w InventoryControlSystemDataSet1.Purc~dulla^@204~ able
            Me.Adapter.Fill(dat~dulla^@204~         Return dataTable
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute(),  _
         System~dulla^@204~ el.Design.HelpKeywordAttribute("vs.da~dulla^@204~ er")>  _
        Public Overloads Ov~dulla^@204~ ction Update(ByVal dataTable As Inven~dulla^@204~ stemDataSet1.PurchaseInfoDataTable) A~dulla^@204~           Return Me.Adapter.Update(da~dulla^@204~      End Function
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~   System.ComponentModel.Design.HelpKe~dulla^@204~ e("vs.data.TableAdapter")>  _
      ~dulla^@204~ loads Overridable Function Update(ByV~dulla^@204~  InventoryControlSystemDataSet1) As I~dulla^@204~        Return Me.Adapter.Update(dataS~dulla^@204~ Info")
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
         System.ComponentModel.De~dulla^@204~ ordAttribute("vs.data.TableAdapter")>~dulla^@204~ Public Overloads Overridable Function~dulla^@204~  dataRow As System.Data.DataRow) As I~dulla^@204~        Return Me.Adapter.Update(New S~dulla^@204~ taRow() {dataRow})
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute(),  _
         System.Compo~dulla^@204~ ign.HelpKeywordAttribute("vs.data.Tab~dulla^@204~  _
        Public Overloads Overrida~dulla^@204~ Update(ByVal dataRows() As System.Dat~dulla^@204~  Integer
            Return Me.Adapt~dulla^@204~ aRows)
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
         System.ComponentModel.De~dulla^@204~ ordAttribute("vs.data.TableAdapter"),~dulla^@204~  System.ComponentModel.DataObjectMeth~dulla^@204~ ystem.ComponentModel.DataObjectMethod~dulla^@204~ true)>  _
        Public Overloads O~dulla^@204~ nction Delete(ByVal Original_PartNo A~dulla^@204~ al Original_Quantity As Integer, ByVa~dulla^@204~ ount As Integer, ByVal Original_Suppl~dulla^@204~ ng, ByVal Original_InvoiceNo As Strin~dulla^@204~ 
            If (Original_PartNo Is ~dulla^@204~ 
                Throw New System.Ar~dulla^@204~ eption("Original_PartNo")
          ~dulla^@204~            Me.Adapter.DeleteCommand.P~dulla^@204~ Value = CType(Original_PartNo,String)~dulla^@204~  End If
            Me.Adapter.Delet~dulla^@204~ meters(1).Value = CType(Original_Quan~dulla^@204~ 
            Me.Adapter.DeleteComman~dulla^@204~ 2).Value = CType(Original_Amount,Inte~dulla^@204~      If (Original_SupplierID Is Nothi~dulla^@204~              Throw New System.Argumen~dulla^@204~ n("Original_SupplierID")
           ~dulla^@204~           Me.Adapter.DeleteCommand.Pa~dulla^@204~ alue = CType(Original_SupplierID,Stri~dulla^@204~     End If
            If (Original_~dulla^@204~ Nothing) Then
                Throw ~dulla^@204~ gumentNullException("Original_Invoice~dulla^@204~      Else
                Me.Adapter~dulla^@204~ d.Parameters(4).Value = CType(Origina~dulla^@204~ tring)
            End If
         ~dulla^@204~ usConnectionState As System.Data.Conn~dulla^@204~  Me.Adapter.DeleteCommand.Connection.~dulla^@204~       If ((Me.Adapter.DeleteCommand.C~dulla^@204~ te And System.Data.ConnectionState.Op~dulla^@204~                    <> System.Data.Con~dulla^@204~ Open) Then
                Me.Adapte~dulla^@204~ nd.Connection.Open
            End I~dulla^@204~   Try 
                Dim returnVal~dulla^@204~  = Me.Adapter.DeleteCommand.ExecuteNo~dulla^@204~            Return returnValue
      ~dulla^@204~ 
                If (previousConnect~dulla^@204~ stem.Data.ConnectionState.Closed) The~dulla^@204~           Me.Adapter.DeleteCommand.Co~dulla^@204~ e
                End If
          ~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~    System.ComponentModel.Design.HelpK~dulla^@204~ te("vs.data.TableAdapter"),  _
     ~dulla^@204~ mponentModel.DataObjectMethodAttribut~dulla^@204~ onentModel.DataObjectMethodType.Inser~dulla^@204~ 
        Public Overloads Overridable~dulla^@204~ ert(ByVal PartNo As String, ByVal Qua~dulla^@204~ ger, ByVal Amount As Integer, ByVal S~dulla^@204~ String, ByVal InvoiceNo As String) As~dulla^@204~          If (PartNo Is Nothing) Then~dulla^@204~     Throw New System.ArgumentNullExce~dulla^@204~ ")
            Else
               ~dulla^@204~ nsertCommand.Parameters(0).Value = CT~dulla^@204~ ring)
            End If
          ~dulla^@204~ InsertCommand.Parameters(1).Value = C~dulla^@204~ ,Integer)
            Me.Adapter.Ins~dulla^@204~ rameters(2).Value = CType(Amount,Inte~dulla^@204~      If (SupplierID Is Nothing) Then~dulla^@204~     Throw New System.ArgumentNullExce~dulla^@204~ erID")
            Else
           ~dulla^@204~ er.InsertCommand.Parameters(3).Value ~dulla^@204~ ierID,String)
            End If
  ~dulla^@204~ (InvoiceNo Is Nothing) Then
        ~dulla^@204~  New System.ArgumentNullException("In~dulla^@204~           Else
                Me.Ad~dulla^@204~ ommand.Parameters(4).Value = CType(In~dulla^@204~ g)
            End If
            D~dulla^@204~ nnectionState As System.Data.Connecti~dulla^@204~ Adapter.InsertCommand.Connection.Stat~dulla^@204~   If ((Me.Adapter.InsertCommand.Conne~dulla^@204~ nd System.Data.ConnectionState.Open) ~dulla^@204~                <> System.Data.Connect~dulla^@204~ ) Then
                Me.Adapter.In~dulla^@204~ onnection.Open
            End If
 ~dulla^@204~ y 
                Dim returnValue A~dulla^@204~ e.Adapter.InsertCommand.ExecuteNonQue~dulla^@204~        Return returnValue
          ~dulla^@204~               If (previousConnectionS~dulla^@204~ .Data.ConnectionState.Closed) Then
 ~dulla^@204~       Me.Adapter.InsertCommand.Connec~dulla^@204~                End If
            En~dulla^@204~   End Function
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute(),  ~dulla^@204~ ystem.ComponentModel.Design.HelpKeywo~dulla^@204~ vs.data.TableAdapter"),  _
         ~dulla^@204~ entModel.DataObjectMethodAttribute(Sy~dulla^@204~ tModel.DataObjectMethodType.Update, t~dulla^@204~      Public Overloads Overridable Fun~dulla^@204~ ByVal PartNo As String, ByVal Quantit~dulla^@204~  ByVal Amount As Integer, ByVal Suppl~dulla^@204~ ng, ByVal InvoiceNo As String, ByVal ~dulla^@204~ No As String, ByVal Original_Quantity~dulla^@204~ ByVal Original_Amount As Integer, ByV~dulla^@204~ upplierID As String, ByVal Original_I~dulla^@204~ tring) As Integer
            If (Pa~dulla^@204~ ng) Then
                Throw New S~dulla^@204~ tNullException("PartNo")
           ~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ alue = CType(PartNo,String)
        ~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ Value = CType(Quantity,Integer)
    ~dulla^@204~ apter.UpdateCommand.Parameters(2).Val~dulla^@204~ ount,Integer)
            If (Suppli~dulla^@204~ ng) Then
                Throw New S~dulla^@204~ tNullException("SupplierID")
       ~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 3).Value = CType(SupplierID,String)
~dulla^@204~ nd If
            If (InvoiceNo Is N~dulla^@204~ 
                Throw New System.Arg~dulla^@204~ ption("InvoiceNo")
            Else~dulla^@204~     Me.Adapter.UpdateCommand.Parameters(4).Value = CType(InvoiceNo,String)
   ~dulla^@204~ If
            If (Original_PartNo I~dulla^@204~ en
                Throw New System.~dulla^@204~ xception("Original_PartNo")
        ~dulla^@204~              Me.Adapter.UpdateCommand~dulla^@204~ ).Value = CType(Original_PartNo,Strin~dulla^@204~    End If
            Me.Adapter.Upd~dulla^@204~ rameters(6).Value = CType(Original_Qu~dulla^@204~ r)
            Me.Adapter.UpdateComm~dulla^@204~ s(7).Value = CType(Original_Amount,In~dulla^@204~        If (Original_SupplierID Is Not~dulla^@204~                Throw New System.Argum~dulla^@204~ ion("Original_SupplierID")
         ~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ .Value = CType(Original_SupplierID,St~dulla^@204~       End If
            If (Origina~dulla^@204~ s Nothing) Then
                Thro~dulla^@204~ ArgumentNullException("Original_Invoi~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(9).Value = CType(Origi~dulla^@204~ ,String)
            End If
       ~dulla^@204~ iousConnectionState As System.Data.Co~dulla^@204~  = Me.Adapter.UpdateCommand.Connectio~dulla^@204~         If ((Me.Adapter.UpdateCommand~dulla^@204~ tate And System.Data.ConnectionState.~dulla^@204~                      <> System.Data.C~dulla^@204~ e.Open) Then
                Me.Adap~dulla^@204~ mand.Connection.Open
            End~dulla^@204~     Try 
                Dim returnV~dulla^@204~ er = Me.Adapter.UpdateCommand.Execute~dulla^@204~              Return returnValue
    ~dulla^@204~ ly
                If (previousConne~dulla^@204~ System.Data.ConnectionState.Closed) T~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ ose
                End If
        ~dulla^@204~         End Function
    End Class
~dulla^@204~ stem.CodeDom.Compiler.GeneratedCodeAt~dulla^@204~ em.Data.Design.TypedDataSetGenerator"~dulla^@204~   _
     System.ComponentModel.Desig~dulla^@204~ tribute("code"),  _
     System.Comp~dulla^@204~ olboxItem(true),  _
     System.Comp~dulla^@204~ taObjectAttribute(true),  _
     Sys~dulla^@204~ Model.DesignerAttribute("Microsoft.VS~dulla^@204~ Source.Design.TableAdapterDesigner, M~dulla^@204~ signer"& _ 
        ", Version=8.0.0~dulla^@204~ eutral, PublicKeyToken=b03f5f7f11d50a~dulla^@204~   System.ComponentModel.Design.HelpKe~dulla^@204~ e("vs.data.TableAdapter")>  _
    Pa~dulla^@204~ Class SalesTableAdapter
        Inhe~dulla^@204~ omponentModel.Component
        
  ~dulla^@204~  WithEvents _adapter As System.Data.S~dulla^@204~ ataAdapter
        
        Private~dulla^@204~ As System.Data.SqlClient.SqlConnectio~dulla^@204~         Private _commandCollection() ~dulla^@204~ a.SqlClient.SqlCommand
        
   ~dulla^@204~ _clearBeforeFill As Boolean
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Sub New()
        ~dulla^@204~ w
            Me.ClearBeforeFill = t~dulla^@204~ End Sub
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ eadOnly Property Adapter() As System.~dulla^@204~ t.SqlDataAdapter
            Get
  ~dulla^@204~  If (Me._adapter Is Nothing) Then
  ~dulla^@204~      Me.InitAdapter
                ~dulla^@204~            Return Me._adapter
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Friend Property Connection() As~dulla^@204~ SqlClient.SqlConnection
            ~dulla^@204~         If (Me._connection Is Nothing~dulla^@204~                Me.InitConnection
   ~dulla^@204~ End If
                Return Me._co~dulla^@204~          End Get
            Set
  ~dulla^@204~  Me._connection = value
            ~dulla^@204~ Me.Adapter.InsertCommand) Is Nothing)~dulla^@204~               Me.Adapter.InsertComman~dulla^@204~ = value
                End If
    ~dulla^@204~ f (Not (Me.Adapter.DeleteCommand) Is ~dulla^@204~ 
                    Me.Adapter.Dele~dulla^@204~ nection = value
                End ~dulla^@204~        If (Not (Me.Adapter.UpdateComm~dulla^@204~ ng) Then
                    Me.Adap~dulla^@204~ mand.Connection = value
            ~dulla^@204~                Dim i As Integer = 0
~dulla^@204~    Do While (i < Me.CommandCollection~dulla^@204~                  If (Not (Me.CommandC~dulla^@204~  Is Nothing) Then
                  ~dulla^@204~ e.CommandCollection(i),System.Data.Sq~dulla^@204~ mmand).Connection = value
          ~dulla^@204~  If
                    i = (i + 1)~dulla^@204~     Loop
            End Set
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pr~dulla^@204~ nly Property CommandCollection() As S~dulla^@204~ lClient.SqlCommand()
            Get~dulla^@204~      If (Me._commandCollection Is Not~dulla^@204~                    Me.InitCommandColl~dulla^@204~            End If
                Re~dulla^@204~ andCollection
            End Get
 ~dulla^@204~ operty
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ perty ClearBeforeFill() As Boolean
 ~dulla^@204~ t
                Return Me._clearBe~dulla^@204~          End Get
            Set
  ~dulla^@204~  Me._clearBeforeFill = value
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Private Sub InitAdapter()
     ~dulla^@204~ apter = New System.Data.SqlClient.Sql~dulla^@204~             Dim tableMapping As Syste~dulla^@204~ .DataTableMapping = New System.Data.C~dulla^@204~ leMapping
            tableMapping.S~dulla^@204~ "Table"
            tableMapping.Dat~dulla^@204~ Sales"
            tableMapping.Colu~dulla^@204~ d("InvoiceNo", "InvoiceNo")
        ~dulla^@204~ ing.ColumnMappings.Add("PartNo", "Par~dulla^@204~       tableMapping.ColumnMappings.Add~dulla^@204~ e")
            tableMapping.ColumnM~dulla^@204~ SubTotal", "SubTotal")
            t~dulla^@204~ olumnMappings.Add("VATAmount", "VATAm~dulla^@204~        tableMapping.ColumnMappings.Ad~dulla^@204~ ", "GrandTotal")
            tableMa~dulla^@204~ appings.Add("ModeOfPayment", "ModeOfP~dulla^@204~          Me._adapter.TableMappings.Ad~dulla^@204~ g)
            Me._adapter.DeleteCom~dulla^@204~ stem.Data.SqlClient.SqlCommand
     ~dulla^@204~ apter.DeleteCommand.Connection = Me.C~dulla^@204~           Me._adapter.DeleteCommand.C~dulla^@204~ "DELETE FROM [dbo].[Sales] WHERE (([I~dulla^@204~ Original_InvoiceNo) AND ([PartNo"& _ ~dulla^@204~      "] = @Original_PartNo) AND ([Dat~dulla^@204~ l_Date) AND ([SubTotal] = @Original_"~dulla^@204~          "SubTotal) AND ([VATAmount] ~dulla^@204~ ATAmount) AND ([GrandTotal] = @Origin~dulla^@204~              "GrandTotal) AND ([ModeO~dulla^@204~ Original_ModeOfPayment))"
          ~dulla^@204~ .DeleteCommand.CommandType = System.D~dulla^@204~ pe.Text
            Me._adapter.Dele~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@Original_InvoiceNo", System.Data.S~dulla^@204~ Char, 0, System.Data.ParameterDirecti~dulla^@204~ 0, "InvoiceNo", System.Data.DataRowVe~dulla^@204~ l, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.DeleteCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@Original_P~dulla^@204~ m.Data.SqlDbType.NVarChar, 0, System.~dulla^@204~ rDirection.Input, 0, 0, "PartNo", Sys~dulla^@204~ RowVersion.Original, false, Nothing, ~dulla^@204~ 
            Me._adapter.DeleteComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ nal_Date", System.Data.SqlDbType.Date~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ stem.Data.DataRowVersion.Original, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Original_SubTotal", System.D~dulla^@204~ .Float, 0, System.Data.ParameterDirec~dulla^@204~ , 0, "SubTotal", System.Data.DataRowV~dulla^@204~ al, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.DeleteCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Original_~dulla^@204~ ystem.Data.SqlDbType.Float, 0, System~dulla^@204~ erDirection.Input, 0, 0, "VATAmount", System.Data.DataRowVersion.Original, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Original_GrandTotal", System.D~dulla^@204~ .Float, 0, System.Data.ParameterDirec~dulla^@204~ , 0, "GrandTotal", System.Data.DataRo~dulla^@204~ inal, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.DeleteCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Origina~dulla^@204~ nt", System.Data.SqlDbType.[Char], 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Mode~dulla^@204~ ystem.Data.DataRowVersion.Original, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and = New System.Data.SqlClient.SqlCo~dulla^@204~       Me._adapter.InsertCommand.Conne~dulla^@204~ nnection
            Me._adapter.Ins~dulla^@204~ mmandText = "INSERT INTO [dbo].[Sales~dulla^@204~ ], [PartNo], [Date], [SubTotal], [VAT~dulla^@204~ 
                ", [GrandTotal], [Mo~dulla^@204~  VALUES (@InvoiceNo, @PartNo, @Date, ~dulla^@204~  _ 
                "@VATAmount, @Gr~dulla^@204~ deOfPayment);"&Global.Microsoft.Visua~dulla^@204~ 3)&Global.Microsoft.VisualBasic.ChrW(~dulla^@204~ nvoiceNo, PartNo, Date, SubTo"& _ 
 ~dulla^@204~   "tal, VATAmount, GrandTotal, ModeOf~dulla^@204~ Sales WHERE (InvoiceNo = @Invoice"& _~dulla^@204~       "No)"
            Me._adapter.~dulla^@204~ .CommandType = System.Data.CommandTyp~dulla^@204~        Me._adapter.InsertCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~  System.Data.SqlDbType.NVarChar, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "Invoic~dulla^@204~ Data.DataRowVersion.Current, false, N~dulla^@204~ ", ""))
            Me._adapter.Inse~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@PartNo", System.Data.SqlDbType.NVa~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~  System.Data.DataRowVersion.Current, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Date", System.Data.SqlDbTy~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ te", System.Data.DataRowVersion.Curre~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ tCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@SubTotal", System.Data~dulla^@204~ oat, 0, System.Data.ParameterDirectio~dulla^@204~ , "SubTotal", System.Data.DataRowVers~dulla^@204~ false, Nothing, "", "", ""))
       ~dulla^@204~ ter.InsertCommand.Parameters.Add(New ~dulla^@204~ qlClient.SqlParameter("@VATAmount", S~dulla^@204~ lDbType.Float, 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "VATAmount", System.Data.~dulla^@204~ n.Current, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.InsertCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Gr~dulla^@204~ stem.Data.SqlDbType.Float, 0, System.~dulla^@204~ rDirection.Input, 0, 0, "GrandTotal",~dulla^@204~ DataRowVersion.Current, false, Nothin~dulla^@204~ ))
            Me._adapter.InsertCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ deOfPayment", System.Data.SqlDbType.[~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ yment", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ dateCommand = New System.Data.SqlClie~dulla^@204~ 
            Me._adapter.UpdateComma~dulla^@204~  = Me.Connection
            Me._ada~dulla^@204~ mmand.CommandText = "UPDATE [dbo].[Sa~dulla^@204~ oiceNo] = @InvoiceNo, [PartNo] = @Par~dulla^@204~  @"& _ 
                "Date, [SubT~dulla^@204~ otal, [VATAmount] = @VATAmount, [Gran~dulla^@204~ andTot"& _ 
                "al, [Mo~dulla^@204~ = @ModeOfPayment WHERE (([InvoiceNo] ~dulla^@204~ nvoiceNo) "& _ 
                "AND~dulla^@204~ @Original_PartNo) AND ([Date] = @Orig~dulla^@204~ D ([SubTotal] "& _ 
                ~dulla^@204~ SubTotal) AND ([VATAmount] = @Origina~dulla^@204~ AND ([GrandTotal] "& _ 
            ~dulla^@204~ nal_GrandTotal) AND ([ModeOfPayment] ~dulla^@204~ odeOfPayment));"&Global.Microsoft.Vis~dulla^@204~ (13)&Global.Microsoft.VisualBasic.Chr~dulla^@204~ & _ 
                "T InvoiceNo, P~dulla^@204~ SubTotal, VATAmount, GrandTotal, Mode~dulla^@204~ M S"& _ 
                "ales WHERE~dulla^@204~  @InvoiceNo)"
            Me._adapte~dulla^@204~ nd.CommandType = System.Data.CommandT~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ ", System.Data.SqlDbType.NVarChar, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Invo~dulla^@204~ m.Data.DataRowVersion.Current, false,~dulla^@204~  "", ""))
            Me._adapter.Up~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@PartNo", System.Data.SqlDbType.N~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ ", System.Data.DataRowVersion.Current~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@Date", System.Data.SqlDb~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ Date", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@SubTotal", System.Da~dulla^@204~ Float, 0, System.Data.ParameterDirect~dulla^@204~  0, "SubTotal", System.Data.DataRowVe~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.UpdateCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@VATAmount",~dulla^@204~ SqlDbType.Float, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "VATAmount", System.Dat~dulla^@204~ ion.Current, false, Nothing, "", "", ~dulla^@204~      Me._adapter.UpdateCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ System.Data.SqlDbType.Float, 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "GrandTotal~dulla^@204~ a.DataRowVersion.Current, false, Noth~dulla^@204~ ""))
            Me._adapter.UpdateC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ ModeOfPayment", System.Data.SqlDbType~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ Payment", System.Data.DataRowVersion.~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ UpdateCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@Original_InvoiceN~dulla^@204~ ta.SqlDbType.NVarChar, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "InvoiceNo", Syst~dulla^@204~ owVersion.Original, false, Nothing, "~dulla^@204~             Me._adapter.UpdateCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ al_PartNo", System.Data.SqlDbType.NVa~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@Original_Date", System.Da~dulla^@204~ DateTime, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "Date", System.Data.DataRowVer~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.UpdateCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@Original_Su~dulla^@204~ em.Data.SqlDbType.Float, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "SubTotal", Sys~dulla^@204~ RowVersion.Original, false, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ nal_VATAmount", System.Data.SqlDbType~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ nt", System.Data.DataRowVersion.Origi~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@Original_GrandTotal",~dulla^@204~ SqlDbType.Float, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "GrandTotal", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ deOfPayment", System.Data.SqlDbType.[~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ yment", System.Data.DataRowVersion.Or~dulla^@204~ , Nothing, "", "", ""))
        End ~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Private Sub InitConnection()
            Me._connectio~dulla^@204~ m.Data.SqlClient.SqlConnection
     ~dulla^@204~ nnection.ConnectionString = Global.In~dulla^@204~ lSystem.My.MySettings.Default.Invento~dulla^@204~ emConnectionString
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Private Sub InitCo~dulla^@204~ on()
            Me._commandCollecti~dulla^@204~ em.Data.SqlClient.SqlCommand(0) {}
 ~dulla^@204~ ._commandCollection(0) = New System.D~dulla^@204~ .SqlCommand
            Me._commandC~dulla^@204~ Connection = Me.Connection
         ~dulla^@204~ dCollection(0).CommandText = "SELECT ~dulla^@204~ rtNo, Date, SubTotal, VATAmount, Gran~dulla^@204~ fPayment FR"& _ 
                "OM~dulla^@204~             Me._commandCollection(0).~dulla^@204~  System.Data.CommandType.Text
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute(),  _
         System~dulla^@204~ el.Design.HelpKeywordAttribute("vs.da~dulla^@204~ er"),  _
         System.ComponentMo~dulla^@204~ tMethodAttribute(System.ComponentMode~dulla^@204~ ethodType.Fill, true)>  _
        Pu~dulla^@204~ s Overridable Function Fill(ByVal dat~dulla^@204~ entoryControlSystemDataSet1.SalesData~dulla^@204~ eger
            Me.Adapter.SelectCo~dulla^@204~ mmandCollection(0)
            If (M~dulla^@204~ Fill = true) Then
                da~dulla^@204~ 
            End If
            Dim~dulla^@204~ As Integer = Me.Adapter.Fill(dataTabl~dulla^@204~    Return returnValue
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute(),  _
         System.Co~dulla^@204~ Design.HelpKeywordAttribute("vs.data.~dulla^@204~ ),  _
         System.ComponentModel~dulla^@204~ thodAttribute(System.ComponentModel.D~dulla^@204~ odType.[Select], true)>  _
        P~dulla^@204~ ds Overridable Function GetData() As ~dulla^@204~ rolSystemDataSet1.SalesDataTable
   ~dulla^@204~ dapter.SelectCommand = Me.CommandColl~dulla^@204~           Dim dataTable As InventoryC~dulla^@204~ ataSet1.SalesDataTable = New Inventor~dulla^@204~ mDataSet1.SalesDataTable
           ~dulla^@204~ ill(dataTable)
            Return da~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute(),~dulla^@204~  System.ComponentModel.Design.HelpKey~dulla^@204~ ("vs.data.TableAdapter")>  _
       ~dulla^@204~ oads Overridable Function Update(ByVa~dulla^@204~ s InventoryControlSystemDataSet1.Sale~dulla^@204~ s Integer
            Return Me.Adap~dulla^@204~ taTable)
        End Function
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ ,  _
         System.ComponentModel.~dulla^@204~ ywordAttribute("vs.data.TableAdapter"~dulla^@204~   Public Overloads Overridable Functi~dulla^@204~ al dataSet As InventoryControlSystemD~dulla^@204~ nteger
            Return Me.Adapter~dulla^@204~ et, "Sales")
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te(),  _
         System.ComponentMo~dulla^@204~ lpKeywordAttribute("vs.data.TableAdap~dulla^@204~       Public Overloads Overridable Fu~dulla^@204~ (ByVal dataRow As System.Data.DataRow~dulla^@204~ 
            Return Me.Adapter.Update~dulla^@204~ ata.DataRow() {dataRow})
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute(),  _
         System~dulla^@204~ el.Design.HelpKeywordAttribute("vs.da~dulla^@204~ er")>  _
        Public Overloads Ov~dulla^@204~ ction Update(ByVal dataRows() As Syst~dulla^@204~ ow) As Integer
            Return Me~dulla^@204~ te(dataRows)
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te(),  _
         System.ComponentMo~dulla^@204~ lpKeywordAttribute("vs.data.TableAdap~dulla^@204~        System.ComponentModel.DataObje~dulla^@204~ bute(System.ComponentModel.DataObject~dulla^@204~ lete, true)>  _
        Public Overl~dulla^@204~ ble Function Delete(ByVal Original_In~dulla^@204~ ring, ByVal Original_PartNo As String~dulla^@204~ nal_Date As Date, ByVal Original_SubT~dulla^@204~ e, ByVal Original_VATAmount As Double~dulla^@204~ nal_GrandTotal As Double, ByVal Origi~dulla^@204~ ment As String) As Integer
         ~dulla^@204~ al_InvoiceNo Is Nothing) Then
      ~dulla^@204~ ow New System.ArgumentNullException("~dulla^@204~ iceNo")
            Else
          ~dulla^@204~ ter.DeleteCommand.Parameters(0).Value~dulla^@204~ inal_InvoiceNo,String)
            E~dulla^@204~       If (Original_PartNo Is Nothing)~dulla^@204~           Throw New System.ArgumentNu~dulla^@204~ Original_PartNo")
            Else
~dulla^@204~    Me.Adapter.DeleteCommand.Parameter~dulla^@204~ CType(Original_PartNo,String)
      ~dulla^@204~ 
            Me.Adapter.DeleteCommand~dulla^@204~ ).Value = CType(Original_Date,Date)
~dulla^@204~ e.Adapter.DeleteCommand.Parameters(3)~dulla^@204~ e(Original_SubTotal,Double)
        ~dulla^@204~ r.DeleteCommand.Parameters(4).Value =~dulla^@204~ al_VATAmount,Double)
            Me.~dulla^@204~ eCommand.Parameters(5).Value = CType(~dulla^@204~ dTotal,Double)
            If (Origi~dulla^@204~ ment Is Nothing) Then
              ~dulla^@204~ ystem.ArgumentNullException("Original~dulla^@204~ t")
            Else
              ~dulla^@204~ DeleteCommand.Parameters(6).Value = C~dulla^@204~ _ModeOfPayment,String)
            E~dulla^@204~       Dim previousConnectionState As ~dulla^@204~ onnectionState = Me.Adapter.DeleteCom~dulla^@204~ on.State
            If ((Me.Adapter~dulla^@204~ d.Connection.State And System.Data.Co~dulla^@204~ .Open)  _
                        <>~dulla^@204~ ConnectionState.Open) Then
         ~dulla^@204~ pter.DeleteCommand.Connection.Open
 ~dulla^@204~ d If
            Try 
             ~dulla^@204~ Value As Integer = Me.Adapter.DeleteC~dulla^@204~ eNonQuery
                Return ret~dulla^@204~          Finally
                If ~dulla^@204~ ectionState = System.Data.ConnectionS~dulla^@204~ Then
                    Me.Adapter.~dulla^@204~ .Connection.Close
                En~dulla^@204~      End Try
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te(),  _
         System.ComponentMo~dulla^@204~ lpKeywordAttribute("vs.data.TableAdap~dulla^@204~        System.ComponentModel.DataObje~dulla^@204~ bute(System.ComponentModel.DataObject~dulla^@204~ sert, true)>  _
        Public Overl~dulla^@204~ ble Function Insert(ByVal InvoiceNo A~dulla^@204~ al PartNo As String, ByVal _Date As D~dulla^@204~ bTotal As Double, ByVal VATAmount As ~dulla^@204~  GrandTotal As Double, ByVal ModeOfPa~dulla^@204~ ng) As Integer
            If (Invoi~dulla^@204~ ng) Then
                Throw New S~dulla^@204~ tNullException("InvoiceNo")
        ~dulla^@204~              Me.Adapter.InsertCommand~dulla^@204~ ).Value = CType(InvoiceNo,String)
  ~dulla^@204~  If
            If (PartNo Is Nothin~dulla^@204~             Throw New System.Argument~dulla^@204~ ("PartNo")
            Else
       ~dulla^@204~ dapter.InsertCommand.Parameters(1).Va~dulla^@204~ artNo,String)
            End If
  ~dulla^@204~ Adapter.InsertCommand.Parameters(2).V~dulla^@204~ _Date,Date)
            Me.Adapter.I~dulla^@204~ Parameters(3).Value = CType(SubTotal,~dulla^@204~         Me.Adapter.InsertCommand.Para~dulla^@204~ ue = CType(VATAmount,Double)
       ~dulla^@204~ er.InsertCommand.Parameters(5).Value ~dulla^@204~ Total,Double)
            If (ModeOf~dulla^@204~ thing) Then
                Throw Ne~dulla^@204~ mentNullException("ModeOfPayment")
 ~dulla^@204~ se
                Me.Adapter.Insert~dulla^@204~ eters(6).Value = CType(ModeOfPayment,~dulla^@204~         End If
            Dim previ~dulla^@204~ State As System.Data.ConnectionState ~dulla^@204~ InsertCommand.Connection.State
     ~dulla^@204~ e.Adapter.InsertCommand.Connection.St~dulla^@204~ m.Data.ConnectionState.Open)  _
    ~dulla^@204~        <> System.Data.ConnectionState~dulla^@204~                 Me.Adapter.InsertComm~dulla^@204~ n.Open
            End If
         ~dulla^@204~             Dim returnValue As Intege~dulla^@204~ r.InsertCommand.ExecuteNonQuery
                Return returnValue
          ~dulla^@204~               If (previousConnectionS~dulla^@204~ .Data.ConnectionState.Closed) Then
 ~dulla^@204~       Me.Adapter.InsertCommand.Connec~dulla^@204~                End If
            En~dulla^@204~   End Function
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute(),  ~dulla^@204~ ystem.ComponentModel.Design.HelpKeywo~dulla^@204~ vs.data.TableAdapter"),  _
         ~dulla^@204~ entModel.DataObjectMethodAttribute(Sy~dulla^@204~ tModel.DataObjectMethodType.Update, t~dulla^@204~      Public Overloads Overridable Fun~dulla^@204~ ByVal InvoiceNo As String, ByVal Part~dulla^@204~  ByVal _Date As Date, ByVal SubTotal ~dulla^@204~ Val VATAmount As Double, ByVal GrandT~dulla^@204~ e, ByVal ModeOfPayment As String, ByV~dulla^@204~ nvoiceNo As String, ByVal Original_Pa~dulla^@204~ g, ByVal Original_Date As Date, ByVal~dulla^@204~ Total As Double, ByVal Original_VATAm~dulla^@204~ e, ByVal Original_GrandTotal As Doubl~dulla^@204~ inal_ModeOfPayment As String) As Inte~dulla^@204~     If (InvoiceNo Is Nothing) Then
 ~dulla^@204~   Throw New System.ArgumentNullExcept~dulla^@204~ o")
            Else
              ~dulla^@204~ UpdateCommand.Parameters(0).Value = C~dulla^@204~ o,String)
            End If
      ~dulla^@204~ tNo Is Nothing) Then
               ~dulla^@204~ stem.ArgumentNullException("PartNo")~dulla^@204~ Else
                Me.Adapter.Upda~dulla^@204~ ameters(1).Value = CType(PartNo,Strin~dulla^@204~    End If
            Me.Adapter.Upd~dulla^@204~ rameters(2).Value = CType(_Date,Date)~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ ype(SubTotal,Double)
            Me.~dulla^@204~ eCommand.Parameters(4).Value = CType(~dulla^@204~ ble)
            Me.Adapter.UpdateCo~dulla^@204~ ers(5).Value = CType(GrandTotal,Doubl~dulla^@204~    If (ModeOfPayment Is Nothing) Then~dulla^@204~      Throw New System.ArgumentNullExc~dulla^@204~ fPayment")
            Else
       ~dulla^@204~ dapter.UpdateCommand.Parameters(6).Va~dulla^@204~ odeOfPayment,String)
            End~dulla^@204~     If (Original_InvoiceNo Is Nothing~dulla^@204~            Throw New System.ArgumentN~dulla^@204~ "Original_InvoiceNo")
            El~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ e = CType(Original_InvoiceNo,String)~dulla^@204~ End If
            If (Original_Part~dulla^@204~ ) Then
                Throw New Sys~dulla^@204~ ullException("Original_PartNo")
    ~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(8).Value = CType(Original_PartNo,S~dulla^@204~        End If
            Me.Adapter~dulla^@204~ d.Parameters(9).Value = CType(Origina~dulla^@204~ 
            Me.Adapter.UpdateCommand~dulla^@204~ 0).Value = CType(Original_SubTotal,Do~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~ e = CType(Original_VATAmount,Double)~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(1~dulla^@204~ ype(Original_GrandTotal,Double)
    ~dulla^@204~ riginal_ModeOfPayment Is Nothing) The~dulla^@204~       Throw New System.ArgumentNullEx~dulla^@204~ inal_ModeOfPayment")
            Els~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~ e = CType(Original_ModeOfPayment,Stri~dulla^@204~     End If
            Dim previousC~dulla^@204~ e As System.Data.ConnectionState = Me~dulla^@204~ teCommand.Connection.State
         ~dulla^@204~ apter.UpdateCommand.Connection.State ~dulla^@204~ ta.ConnectionState.Open)  _
        ~dulla^@204~    <> System.Data.ConnectionState.Ope~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ en
            End If
            T~dulla^@204~         Dim returnValue As Integer = ~dulla^@204~ dateCommand.ExecuteNonQuery
        ~dulla^@204~ n returnValue
            Finally
 ~dulla^@204~   If (previousConnectionState = Syste~dulla^@204~ tionState.Closed) Then
             ~dulla^@204~ pter.UpdateCommand.Connection.Close
~dulla^@204~    End If
            End Try
     ~dulla^@204~ on
    End Class
    
    <System.~dulla^@204~ ler.GeneratedCodeAttribute("System.Da~dulla^@204~ edDataSetGenerator", "2.0.0.0"),  _
~dulla^@204~ omponentModel.DesignerCategoryAttribu~dulla^@204~ _
     System.ComponentModel.Toolbox~dulla^@204~ _
     System.ComponentModel.DataObj~dulla^@204~ true),  _
     System.ComponentModel~dulla^@204~ ibute("Microsoft.VSDesigner.DataSourc~dulla^@204~ eAdapterDesigner, Microsoft.VSDesigne~dulla^@204~    ", Version=8.0.0.0, Culture=neutra~dulla^@204~ oken=b03f5f7f11d50a3a"),  _
     Sys~dulla^@204~ Model.Design.HelpKeywordAttribute("vs~dulla^@204~ apter")>  _
    Partial Public Class~dulla^@204~ leAdapter
        Inherits System.Co~dulla^@204~ Component
        
        Private ~dulla^@204~ dapter As System.Data.SqlClient.SqlDa~dulla^@204~       
        Private _connection A~dulla^@204~ .SqlClient.SqlConnection
        
 ~dulla^@204~ e _commandCollection() As System.Data~dulla^@204~ lCommand
        
        Private _~dulla^@204~ ll As Boolean
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Sub New()
            MyBase.New~dulla^@204~  Me.ClearBeforeFill = true
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Private Re~dulla^@204~ ty Adapter() As System.Data.SqlClient~dulla^@204~ er
            Get
                ~dulla^@204~ er Is Nothing) Then
                ~dulla^@204~ apter
                End If
      ~dulla^@204~ urn Me._adapter
            End Get~dulla^@204~ Property
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ roperty Connection() As System.Data.S~dulla^@204~ onnection
            Get
         ~dulla^@204~ ._connection Is Nothing) Then
      ~dulla^@204~  Me.InitConnection
                E~dulla^@204~           Return Me._connection
    ~dulla^@204~ et
            Set
                ~dulla^@204~ n = value
                If (Not (M~dulla^@204~ ertCommand) Is Nothing) Then
       ~dulla^@204~ Me.Adapter.InsertCommand.Connection =~dulla^@204~            End If
                If~dulla^@204~ pter.DeleteCommand) Is Nothing) Then~dulla^@204~         Me.Adapter.DeleteCommand.Conn~dulla^@204~ e
                End If
          ~dulla^@204~  (Me.Adapter.UpdateCommand) Is Nothin~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ n = value
                End If
  ~dulla^@204~  Dim i As Integer = 0
              ~dulla^@204~  < Me.CommandCollection.Length)
    ~dulla^@204~    If (Not (Me.CommandCollection(i)) ~dulla^@204~ hen
                        CType(Me~dulla^@204~ ction(i),System.Data.SqlClient.SqlCom~dulla^@204~ ion = value
                    End ~dulla^@204~            i = (i + 1)
             ~dulla^@204~         End Set
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Protected ReadOn~dulla^@204~ ommandCollection() As System.Data.Sql~dulla^@204~ mand()
            Get
            ~dulla^@204~ ommandCollection Is Nothing) Then
  ~dulla^@204~      Me.InitCommandCollection
      ~dulla^@204~  If
                Return Me._comma~dulla^@204~ 
            End Get
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Prop~dulla^@204~ oreFill() As Boolean
            Get~dulla^@204~      Return Me._clearBeforeFill
    ~dulla^@204~ et
            Set
                ~dulla^@204~ reFill = value
            End Set
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ ub InitAdapter()
            Me._ada~dulla^@204~ stem.Data.SqlClient.SqlDataAdapter
 ~dulla^@204~ m tableMapping As System.Data.Common.~dulla^@204~ ing = New System.Data.Common.DataTabl~dulla^@204~          tableMapping.SourceTable = "~dulla^@204~        tableMapping.DataSetTable = "S~dulla^@204~           tableMapping.ColumnMappings~dulla^@204~ , "PartNo")
            tableMapping~dulla^@204~ gs.Add("InvoiceNo", "InvoiceNo")
   ~dulla^@204~ eMapping.ColumnMappings.Add("Customer~dulla^@204~ rID")
            tableMapping.ColumnMappings.Add("StockCardNo", "StockCardNo"~dulla^@204~   Me._adapter.TableMappings.Add(table~dulla^@204~          Me._adapter.DeleteCommand = ~dulla^@204~ ta.SqlClient.SqlCommand
            ~dulla^@204~ eleteCommand.Connection = Me.Connecti~dulla^@204~    Me._adapter.DeleteCommand.CommandT~dulla^@204~  FROM [dbo].[SalesInfo] WHERE (([Part~dulla^@204~ al_PartNo) AND ([InvoiceN"& _ 
     ~dulla^@204~ ] = @Original_InvoiceNo) AND ([Custom~dulla^@204~ inal_CustomerID) AND ([StockC"& _ 
 ~dulla^@204~   "ardNo] = @Original_StockCardNo))"~dulla^@204~ Me._adapter.DeleteCommand.CommandType~dulla^@204~ a.CommandType.Text
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@Original_PartNo", Syste~dulla^@204~ ype.NVarChar, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "PartNo", System.Data.Data~dulla^@204~ iginal, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.DeleteCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@Origi~dulla^@204~ ", System.Data.SqlDbType.NVarChar, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Invo~dulla^@204~ m.Data.DataRowVersion.Original, false~dulla^@204~ , "", ""))
            Me._adapter.D~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@Original_CustomerID", System.Da~dulla^@204~ NVarChar, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "CustomerID", System.Data.Data~dulla^@204~ iginal, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.DeleteCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@Origi~dulla^@204~ No", System.Data.SqlDbType.NVarChar, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "St~dulla^@204~ ystem.Data.DataRowVersion.Original, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and = New System.Data.SqlClient.SqlCo~dulla^@204~       Me._adapter.InsertCommand.Conne~dulla^@204~ nnection
            Me._adapter.Ins~dulla^@204~ mmandText = "INSERT INTO [dbo].[Sales~dulla^@204~ o], [InvoiceNo], [CustomerID], [Stock~dulla^@204~ 
                ") VALUES (@PartNo, ~dulla^@204~ CustomerID, @StockCardNo);"&Global.Mi~dulla^@204~ lBasic.ChrW(13)&Global.Microsoft.Visu~dulla^@204~ 10)&"SELECT PartNo, Invoi"& _ 
     ~dulla^@204~ eNo, CustomerID, StockCardNo FROM Sal~dulla^@204~ (InvoiceNo = @InvoiceNo) AND "& _ 
 ~dulla^@204~   "(PartNo = @PartNo)"
            M~dulla^@204~ sertCommand.CommandType = System.Data~dulla^@204~ Text
            Me._adapter.InsertC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ PartNo", System.Data.SqlDbType.NVarCh~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ stem.Data.DataRowVersion.Current, fal~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@InvoiceNo", System.Data.SqlDb~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ InvoiceNo", System.Data.DataRowVersio~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.InsertCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@CustomerID", Sy~dulla^@204~ DbType.NVarChar, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "CustomerID", System.Da~dulla^@204~ sion.Current, false, Nothing, "", "",~dulla^@204~       Me._adapter.InsertCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ , System.Data.SqlDbType.NVarChar, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Stock~dulla^@204~ em.Data.DataRowVersion.Current, false~dulla^@204~ , "", ""))
            Me._adapter.U~dulla^@204~ = New System.Data.SqlClient.SqlComman~dulla^@204~   Me._adapter.UpdateCommand.Connectio~dulla^@204~ tion
            Me._adapter.UpdateC~dulla^@204~ dText = "UPDATE [dbo].[SalesInfo] SET~dulla^@204~ PartNo, [InvoiceNo] = @InvoiceNo, [Cu~dulla^@204~              "merID] = @CustomerID, [~dulla^@204~ = @StockCardNo WHERE (([PartNo] = @Or~dulla^@204~ 
                "PartNo) AND ([Invoi~dulla^@204~ inal_InvoiceNo) AND ([CustomerID] = @~dulla^@204~  _ 
                "stomerID) AND (~dulla^@204~  = @Original_StockCardNo));"&Global.M~dulla^@204~ alBasic.ChrW(13)&Global.Microsoft.Vis~dulla^@204~ (10)&"SELECT PartNo, InvoiceN"& _ 
 ~dulla^@204~   "o, CustomerID, StockCardNo FROM Sa~dulla^@204~  (InvoiceNo = @InvoiceNo) AND (Pa"& _~dulla^@204~       "rtNo = @PartNo)"
            ~dulla^@204~ pdateCommand.CommandType = System.Dat~dulla^@204~ .Text
            Me._adapter.Update~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @PartNo", System.Data.SqlDbType.NVarC~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ ystem.Data.DataRowVersion.Current, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@InvoiceNo", System.Data.SqlD~dulla^@204~ r, 0, System.Data.ParameterDirection.~dulla^@204~ "InvoiceNo", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@CustomerID", S~dulla^@204~ lDbType.NVarChar, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "CustomerID", System.D~dulla^@204~ rsion.Current, false, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ ", System.Data.SqlDbType.NVarChar, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Stoc~dulla^@204~ tem.Data.DataRowVersion.Current, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Original_PartNo", System.Data.~dulla^@204~ rChar, 0, System.Data.ParameterDirect~dulla^@204~  0, "PartNo", System.Data.DataRowVers~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.UpdateCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@Original_Inv~dulla^@204~ em.Data.SqlDbType.NVarChar, 0, System~dulla^@204~ erDirection.Input, 0, 0, "InvoiceNo",~dulla^@204~ DataRowVersion.Original, false, Nothi~dulla^@204~ "))
            Me._adapter.UpdateCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ riginal_CustomerID", System.Data.SqlD~dulla^@204~ r, 0, System.Data.ParameterDirection.~dulla^@204~ "CustomerID", System.Data.DataRowVers~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.UpdateCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@Original_Sto~dulla^@204~ stem.Data.SqlDbType.NVarChar, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "StockCard~dulla^@204~ ata.DataRowVersion.Original, false, N~dulla^@204~ ", ""))
        End Sub
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Private Sub InitConnection()~dulla^@204~ Me._connection = New System.Data.SqlC~dulla^@204~ ection
            Me._connection.Co~dulla^@204~ g = Global.InventoryControlSystem.My.~dulla^@204~ fault.InventoryControlSystemConnectio~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ te Sub InitCommandCollection()
     ~dulla^@204~ mmandCollection = New System.Data.Sql~dulla^@204~ mand(0) {}
            Me._commandCo~dulla^@204~  New System.Data.SqlClient.SqlCommand~dulla^@204~  Me._commandCollection(0).Connection ~dulla^@204~ on
            Me._commandCollection~dulla^@204~ xt = "SELECT PartNo, InvoiceNo, Custo~dulla^@204~ ardNo FROM dbo.SalesInfo"
          ~dulla^@204~ Collection(0).CommandType = System.Da~dulla^@204~ e.Text
        End Sub
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~         System.ComponentModel.Design.~dulla^@204~ tribute("vs.data.TableAdapter"),  _
~dulla^@204~ em.ComponentModel.DataObjectMethodAtt~dulla^@204~ .ComponentModel.DataObjectMethodType.~dulla^@204~  _
        Public Overloads Overrida~dulla^@204~ Fill(ByVal dataTable As InventoryCont~dulla^@204~ Set1.SalesInfoDataTable) As Integer
~dulla^@204~ e.Adapter.SelectCommand = Me.CommandC~dulla^@204~ 
            If (Me.ClearBeforeFill =~dulla^@204~                 dataTable.Clear
    ~dulla^@204~ f
            Dim returnValue As Int~dulla^@204~ pter.Fill(dataTable)
            Ret~dulla^@204~ ue
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentMode~dulla^@204~ KeywordAttribute("vs.data.TableAdapte~dulla^@204~      System.ComponentModel.DataObject~dulla^@204~ te(System.ComponentModel.DataObjectMe~dulla^@204~ ect], true)>  _
        Public Overl~dulla^@204~ ble Function GetData() As InventoryCo~dulla^@204~ taSet1.SalesInfoDataTable
          ~dulla^@204~ SelectCommand = Me.CommandCollection(~dulla^@204~    Dim dataTable As InventoryControlS~dulla^@204~ .SalesInfoDataTable = New InventoryCo~dulla^@204~ taSet1.SalesInfoDataTable
          ~dulla^@204~ Fill(dataTable)
            Return d~dulla^@204~      End Function
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~   System.ComponentModel.Design.HelpKe~dulla^@204~ e("vs.data.TableAdapter")>  _
      ~dulla^@204~ loads Overridable Function Update(ByV~dulla^@204~ As InventoryControlSystemDataSet1.Sal~dulla^@204~ le) As Integer
            Return Me~dulla^@204~ te(dataTable)
        End Function
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute(),  _
         System.ComponentM~dulla^@204~ elpKeywordAttribute("vs.data.TableAda~dulla^@204~        Public Overloads Overridable F~dulla^@204~ e(ByVal dataSet As InventoryControlSy~dulla^@204~  As Integer
            Return Me.Ad~dulla^@204~ dataSet, "SalesInfo")
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute(),  _
         System.Co~dulla^@204~ Design.HelpKeywordAttribute("vs.data.~dulla^@204~ )>  _
        Public Overloads Overr~dulla^@204~ on Update(ByVal dataRow As System.Dat~dulla^@204~  Integer
            Return Me.Adapt~dulla^@204~  System.Data.DataRow() {dataRow})
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute(),  _
      ~dulla^@204~ ponentModel.Design.HelpKeywordAttribu~dulla^@204~ ableAdapter")>  _
        Public Ove~dulla^@204~ dable Function Update(ByVal dataRows(~dulla^@204~ ata.DataRow) As Integer
            ~dulla^@204~ pter.Update(dataRows)
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute(),  _
         System.Co~dulla^@204~ Design.HelpKeywordAttribute("vs.data.~dulla^@204~ ),  _
         System.ComponentModel~dulla^@204~ thodAttribute(System.ComponentModel.D~dulla^@204~ odType.Delete, true)>  _
        Pub~dulla^@204~  Overridable Function Delete(ByVal Or~dulla^@204~  As String, ByVal Original_InvoiceNo ~dulla^@204~ Val Original_CustomerID As String, By~dulla^@204~ StockCardNo As String) As Integer
  ~dulla^@204~ (Original_PartNo Is Nothing) Then
  ~dulla^@204~  Throw New System.ArgumentNullExcepti~dulla^@204~ PartNo")
            Else
         ~dulla^@204~ pter.DeleteCommand.Parameters(0).Valu~dulla^@204~ ginal_PartNo,String)
            End~dulla^@204~     If (Original_InvoiceNo Is Nothing~dulla^@204~            Throw New System.ArgumentN~dulla^@204~ "Original_InvoiceNo")
            El~dulla^@204~        Me.Adapter.DeleteCommand.Param~dulla^@204~ e = CType(Original_InvoiceNo,String)~dulla^@204~ End If
            If (Original_Cust~dulla^@204~ hing) Then
                Throw New~dulla^@204~ entNullException("Original_CustomerID~dulla^@204~    Else
                Me.Adapter.D~dulla^@204~ Parameters(2).Value = CType(Original_~dulla^@204~ ring)
            End If
          ~dulla^@204~ l_StockCardNo Is Nothing) Then
     ~dulla^@204~ row New System.ArgumentNullException(~dulla^@204~ ckCardNo")
            Else
       ~dulla^@204~ dapter.DeleteCommand.Parameters(3).Va~dulla^@204~ riginal_StockCardNo,String)
        ~dulla^@204~            Dim previousConnectionStat~dulla^@204~ ata.ConnectionState = Me.Adapter.Dele~dulla^@204~ nection.State
            If ((Me.Ad~dulla^@204~ ommand.Connection.State And System.Da~dulla^@204~ State.Open)  _
                     ~dulla^@204~ Data.ConnectionState.Open) Then
    ~dulla^@204~ e.Adapter.DeleteCommand.Connection.Op~dulla^@204~    End If
            Try 
        ~dulla^@204~ eturnValue As Integer = Me.Adapter.De~dulla^@204~ xecuteNonQuery
                Retur~dulla^@204~ 
            Finally
              ~dulla^@204~ sConnectionState = System.Data.Connec~dulla^@204~ sed) Then
                    Me.Ada~dulla^@204~ mmand.Connection.Close
             ~dulla^@204~           End Try
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute(),  _
         System.Compon~dulla^@204~ gn.HelpKeywordAttribute("vs.data.Tabl~dulla^@204~ _
         System.ComponentModel.Dat~dulla^@204~ Attribute(System.ComponentModel.DataO~dulla^@204~ pe.Insert, true)>  _
        Public ~dulla^@204~ rridable Function Insert(ByVal PartNo~dulla^@204~ yVal InvoiceNo As String, ByVal Custo~dulla^@204~ ng, ByVal StockCardNo As String) As I~dulla^@204~        If (PartNo Is Nothing) Then
 ~dulla^@204~   Throw New System.ArgumentNullExcept~dulla^@204~ 
            Else
                M~dulla^@204~ ertCommand.Parameters(0).Value = CTyp~dulla^@204~ ng)
            End If
            ~dulla^@204~  Is Nothing) Then
                Th~dulla^@204~ m.ArgumentNullException("InvoiceNo")~dulla^@204~ Else
                Me.Adapter.Inse~dulla^@204~ ameters(1).Value = CType(InvoiceNo,St~dulla^@204~       End If
            If (Custome~dulla^@204~ g) Then
                Throw New Sy~dulla^@204~ NullException("CustomerID")
        ~dulla^@204~              Me.Adapter.InsertCommand~dulla^@204~ ).Value = CType(CustomerID,String)
 ~dulla^@204~ d If
            If (StockCardNo Is ~dulla^@204~ 
                Throw New System.Ar~dulla^@204~ eption("StockCardNo")
            El~dulla^@204~        Me.Adapter.InsertCommand.Param~dulla^@204~ e = CType(StockCardNo,String)
      ~dulla^@204~ 
            Dim previousConnectionSt~dulla^@204~ .Data.ConnectionState = Me.Adapter.In~dulla^@204~ onnection.State
            If ((Me.~dulla^@204~ tCommand.Connection.State And System.~dulla^@204~ onState.Open)  _
                   ~dulla^@204~ m.Data.ConnectionState.Open) Then
  ~dulla^@204~  Me.Adapter.InsertCommand.Connection.~dulla^@204~      End If
            Try 
      ~dulla^@204~  returnValue As Integer = Me.Adapter.~dulla^@204~ .ExecuteNonQuery
                Ret~dulla^@204~ ue
            Finally
            ~dulla^@204~ ousConnectionState = System.Data.Conn~dulla^@204~ losed) Then
                    Me.A~dulla^@204~ Command.Connection.Close
           ~dulla^@204~             End Try
        End Func~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute(),  _
         System.Comp~dulla^@204~ sign.HelpKeywordAttribute("vs.data.Ta~dulla^@204~   _
         System.ComponentModel.D~dulla^@204~ odAttribute(System.ComponentModel.Dat~dulla^@204~ Type.Update, true)>  _
        Publi~dulla^@204~ verridable Function Update(ByVal Part~dulla^@204~  ByVal InvoiceNo As String, ByVal Cus~dulla^@204~ ring, ByVal StockCardNo As String, By~dulla^@204~ PartNo As String, ByVal Original_Invo~dulla^@204~ ng, ByVal Original_CustomerID As Stri~dulla^@204~ ginal_StockCardNo As String) As Integ~dulla^@204~    If (PartNo Is Nothing) Then
     ~dulla^@204~ row New System.ArgumentNullException(~dulla^@204~           Else
                Me.Ad~dulla^@204~ ommand.Parameters(0).Value = CType(Pa~dulla^@204~ 
            End If
            If (~dulla^@204~ Nothing) Then
                Throw ~dulla^@204~ gumentNullException("InvoiceNo")
   ~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(1).Value = CType(InvoiceNo,String~dulla^@204~   End If
            If (CustomerID ~dulla^@204~ hen
                Throw New System~dulla^@204~ Exception("CustomerID")
            ~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ lue = CType(CustomerID,String)
     ~dulla^@204~ 
            If (StockCardNo Is Noth~dulla^@204~               Throw New System.Argume~dulla^@204~ on("StockCardNo")
            Else
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~ CType(StockCardNo,String)
          ~dulla^@204~          If (Original_PartNo Is Nothi~dulla^@204~              Throw New System.Argumen~dulla^@204~ n("Original_PartNo")
            Else
                Me.Adapter.UpdateComman~dulla^@204~ 4).Value = CType(Original_PartNo,Stri~dulla^@204~     End If
            If (Original_~dulla^@204~ Nothing) Then
                Throw ~dulla^@204~ gumentNullException("Original_Invoice~dulla^@204~      Else
                Me.Adapter~dulla^@204~ d.Parameters(5).Value = CType(Origina~dulla^@204~ tring)
            End If
         ~dulla^@204~ al_CustomerID Is Nothing) Then
     ~dulla^@204~ row New System.ArgumentNullException(~dulla^@204~ tomerID")
            Else
        ~dulla^@204~ apter.UpdateCommand.Parameters(6).Val~dulla^@204~ iginal_CustomerID,String)
          ~dulla^@204~          If (Original_StockCardNo Is ~dulla^@204~ 
                Throw New System.Ar~dulla^@204~ eption("Original_StockCardNo")
     ~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(7).Value = CType(Original_StockCard~dulla^@204~            End If
            Dim pr~dulla^@204~ ionState As System.Data.ConnectionSta~dulla^@204~ er.UpdateCommand.Connection.State
  ~dulla^@204~ ((Me.Adapter.UpdateCommand.Connection~dulla^@204~ stem.Data.ConnectionState.Open)  _
 ~dulla^@204~           <> System.Data.ConnectionSt~dulla^@204~ n
                Me.Adapter.UpdateC~dulla^@204~ tion.Open
            End If
      ~dulla^@204~                Dim returnValue As Int~dulla^@204~ pter.UpdateCommand.ExecuteNonQuery
 ~dulla^@204~   Return returnValue
            Fin~dulla^@204~          If (previousConnectionState ~dulla^@204~ .ConnectionState.Closed) Then
      ~dulla^@204~  Me.Adapter.UpdateCommand.Connection.~dulla^@204~           End If
            End Try~dulla^@204~  Function
    End Class
    
    <~dulla^@204~ m.Compiler.GeneratedCodeAttribute("Sy~dulla^@204~ ign.TypedDataSetGenerator", "2.0.0.0"~dulla^@204~ ystem.ComponentModel.DesignerCategory~dulla^@204~ de"),  _
     System.ComponentModel.~dulla^@204~ rue),  _
     System.ComponentModel.~dulla^@204~ ribute(true),  _
     System.Compone~dulla^@204~ nerAttribute("Microsoft.VSDesigner.Da~dulla^@204~ gn.TableAdapterDesigner, Microsoft.VS~dulla^@204~ 
        ", Version=8.0.0.0, Culture~dulla^@204~ licKeyToken=b03f5f7f11d50a3a"),  _
 ~dulla^@204~ mponentModel.Design.HelpKeywordAttrib~dulla^@204~ TableAdapter")>  _
    Partial Publi~dulla^@204~ CardTableAdapter
        Inherits Sy~dulla^@204~ tModel.Component
        
        P~dulla^@204~ ents _adapter As System.Data.SqlClien~dulla^@204~ ter
        
        Private _conne~dulla^@204~ em.Data.SqlClient.SqlConnection
    ~dulla^@204~  Private _commandCollection() As Syst~dulla^@204~ ient.SqlCommand
        
        Pr~dulla^@204~ eforeFill As Boolean
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Sub New()
            MyB~dulla^@204~         Me.ClearBeforeFill = true
  ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pri~dulla^@204~  Property Adapter() As System.Data.Sq~dulla^@204~ taAdapter
            Get
         ~dulla^@204~ ._adapter Is Nothing) Then
         ~dulla^@204~ .InitAdapter
                End If~dulla^@204~     Return Me._adapter
            E~dulla^@204~    End Property
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ riend Property Connection() As System~dulla^@204~ nt.SqlConnection
            Get
  ~dulla^@204~  If (Me._connection Is Nothing) Then~dulla^@204~         Me.InitConnection
          ~dulla^@204~ 
                Return Me._connectio~dulla^@204~   End Get
            Set
         ~dulla^@204~ nnection = value
                If ~dulla^@204~ ter.InsertCommand) Is Nothing) Then
~dulla^@204~        Me.Adapter.InsertCommand.Conne~dulla^@204~ 
                End If
           ~dulla^@204~ (Me.Adapter.DeleteCommand) Is Nothing~dulla^@204~                Me.Adapter.DeleteComma~dulla^@204~  = value
                End If
   ~dulla^@204~ If (Not (Me.Adapter.UpdateCommand) Is~dulla^@204~ n
                    Me.Adapter.Upd~dulla^@204~ nnection = value
                End~dulla^@204~         Dim i As Integer = 0
       ~dulla^@204~ hile (i < Me.CommandCollection.Length~dulla^@204~           If (Not (Me.CommandCollecti~dulla^@204~ hing) Then
                        C~dulla^@204~ ndCollection(i),System.Data.SqlClient~dulla^@204~ Connection = value
                 ~dulla^@204~                   i = (i + 1)
      ~dulla^@204~ p
            End Set
        End P~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Protected~dulla^@204~ perty CommandCollection() As System.D~dulla^@204~ .SqlCommand()
            Get
     ~dulla^@204~  (Me._commandCollection Is Nothing) T~dulla^@204~             Me.InitCommandCollection~dulla^@204~     End If
                Return Me~dulla^@204~ ection
            End Get
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ learBeforeFill() As Boolean
        ~dulla^@204~             Return Me._clearBeforeFil~dulla^@204~   End Get
            Set
         ~dulla^@204~ earBeforeFill = value
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ ivate Sub InitAdapter()
            ~dulla^@204~  New System.Data.SqlClient.SqlDataAda~dulla^@204~      Dim tableMapping As System.Data.~dulla^@204~ bleMapping = New System.Data.Common.D~dulla^@204~ ng
            tableMapping.SourceTa~dulla^@204~ 
            tableMapping.DataSetTab~dulla^@204~ rd"
            tableMapping.ColumnM~dulla^@204~ StockCardNo", "StockCardNo")
       ~dulla^@204~ ping.ColumnMappings.Add("PartNo", "Pa~dulla^@204~        Me._adapter.TableMappings.Add(~dulla^@204~ 
            Me._adapter.DeleteComma~dulla^@204~ em.Data.SqlClient.SqlCommand
       ~dulla^@204~ ter.DeleteCommand.Connection = Me.Con~dulla^@204~         Me._adapter.DeleteCommand.Com~dulla^@204~ ELETE FROM [dbo].[StockCard] WHERE ((~dulla^@204~  = @Original_StockCardNo) AND "& _ 
~dulla^@204~    "([PartNo] = @Original_PartNo))"
~dulla^@204~ e._adapter.DeleteCommand.CommandType ~dulla^@204~ .CommandType.Text
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@Original_StockCardNo", S~dulla^@204~ lDbType.NVarChar, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "StockCardNo", System.~dulla^@204~ ersion.Original, false, Nothing, "", ~dulla^@204~          Me._adapter.DeleteCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ PartNo", System.Data.SqlDbType.NVarCh~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ stem.Data.DataRowVersion.Original, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd = New System.Data.SqlClient.SqlCom~dulla^@204~      Me._adapter.InsertCommand.Connec~dulla^@204~ nection
            Me._adapter.Inse~dulla^@204~ mandText = "INSERT INTO [dbo].[StockC~dulla^@204~ ardNo], [PartNo]) VALUES (@StockCardN~dulla^@204~                 "rtNo);"&Global.Micro~dulla^@204~ sic.ChrW(13)&Global.Microsoft.VisualB~dulla^@204~ &"SELECT StockCardNo, PartNo FROM Sto~dulla^@204~ (PartNo = @PartNo)"
            Me._~dulla^@204~ tCommand.CommandType = System.Data.Co~dulla^@204~ t
            Me._adapter.InsertComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ckCardNo", System.Data.SqlDbType.NVar~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ No", System.Data.DataRowVersion.Curre~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ tCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@PartNo", System.Data.S~dulla^@204~ Char, 0, System.Data.ParameterDirecti~dulla^@204~ 0, "PartNo", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand = New System.Data.Sq~dulla^@204~ mmand
            Me._adapter.Update~dulla^@204~ ction = Me.Connection
            Me~dulla^@204~ ateCommand.CommandText = "UPDATE [dbo~dulla^@204~  SET [StockCardNo] = @StockCardNo, [P~dulla^@204~ tNo WHE"& _ 
                "RE (([~dulla^@204~ = @Original_StockCardNo) AND ([PartNo] = @Original_PartNo));"&Global.Microsoft.~dulla^@204~ hrW(13)&Global.Microsoft.VisualBasic.~dulla^@204~ ECT StockCardNo, PartNo FROM StockCar~dulla^@204~ No = @PartNo)"
            Me._adapt~dulla^@204~ and.CommandType = System.Data.Command~dulla^@204~           Me._adapter.UpdateCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~ dNo", System.Data.SqlDbType.NVarChar,~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "S~dulla^@204~ System.Data.DataRowVersion.Current, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@PartNo", System.Data.SqlDbT~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ artNo", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ dateCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@Original_StockCardN~dulla^@204~ ta.SqlDbType.NVarChar, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "StockCardNo", Sy~dulla^@204~ aRowVersion.Original, false, Nothing,~dulla^@204~ 
            Me._adapter.UpdateComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ inal_PartNo", System.Data.SqlDbType.N~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ hing, "", "", ""))
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Private Sub InitCo~dulla^@204~            Me._connection = New Syste~dulla^@204~ ent.SqlConnection
            Me._co~dulla^@204~ ectionString = Global.InventoryContro~dulla^@204~ Settings.Default.InventoryControlSyst~dulla^@204~ tring
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Private Sub InitCommandCollecti~dulla^@204~      Me._commandCollection = New Syst~dulla^@204~ ient.SqlCommand(0) {}
            Me~dulla^@204~ ection(0) = New System.Data.SqlClient~dulla^@204~             Me._commandCollection(0).~dulla^@204~ Me.Connection
            Me._comman~dulla^@204~ ).CommandText = "SELECT StockCardNo, ~dulla^@204~ bo.StockCard"
            Me._comman~dulla^@204~ ).CommandType = System.Data.CommandTy~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute(),  _
~dulla^@204~ em.ComponentModel.Design.HelpKeywordA~dulla^@204~ data.TableAdapter"),  _
         Sys~dulla^@204~ Model.DataObjectMethodAttribute(Syste~dulla^@204~ del.DataObjectMethodType.Fill, true)>~dulla^@204~ Public Overloads Overridable Function~dulla^@204~ ataTable As InventoryControlSystemDat~dulla^@204~ rdDataTable) As Integer
            ~dulla^@204~ lectCommand = Me.CommandCollection(0)~dulla^@204~  If (Me.ClearBeforeFill = true) Then~dulla^@204~     dataTable.Clear
            End ~dulla^@204~    Dim returnValue As Integer = Me.Ad~dulla^@204~ taTable)
            Return returnVa~dulla^@204~ End Function
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ tem.ComponentModel.Design.HelpKeyword~dulla^@204~ .data.TableAdapter"),  _
         Sy~dulla^@204~ tModel.DataObjectMethodAttribute(Syst~dulla^@204~ odel.DataObjectMethodType.[Select], t~dulla^@204~      Public Overloads Overridable Fun~dulla^@204~ () As InventoryControlSystemDataSet1.~dulla^@204~ Table
            Me.Adapter.SelectC~dulla^@204~ ommandCollection(0)
            Dim ~dulla^@204~ InventoryControlSystemDataSet1.StockC~dulla^@204~ = New InventoryControlSystemDataSet1.~dulla^@204~ Table
            Me.Adapter.Fill(da~dulla^@204~          Return dataTable
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute(),  _
         Syste~dulla^@204~ del.Design.HelpKeywordAttribute("vs.d~dulla^@204~ ter")>  _
        Public Overloads O~dulla^@204~ nction Update(ByVal dataTable As Inve~dulla^@204~ ystemDataSet1.StockCardDataTable) As ~dulla^@204~         Return Me.Adapter.Update(data~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute(), ~dulla^@204~ System.ComponentModel.Design.HelpKeyw~dulla^@204~ "vs.data.TableAdapter")>  _
        ~dulla^@204~ ads Overridable Function Update(ByVal~dulla^@204~ nventoryControlSystemDataSet1) As Int~dulla^@204~      Return Me.Adapter.Update(dataSet~dulla^@204~ )
        End Function
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~         System.ComponentModel.Design.~dulla^@204~ tribute("vs.data.TableAdapter")>  _
~dulla^@204~ c Overloads Overridable Function Upda~dulla^@204~ Row As System.Data.DataRow) As Intege~dulla^@204~   Return Me.Adapter.Update(New System~dulla^@204~ () {dataRow})
        End Function
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute(),  _
         System.ComponentM~dulla^@204~ elpKeywordAttribute("vs.data.TableAda~dulla^@204~        Public Overloads Overridable F~dulla^@204~ e(ByVal dataRows() As System.Data.Dat~dulla^@204~ ger
            Return Me.Adapter.Up~dulla^@204~ )
        End Function
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~         System.ComponentModel.Design.~dulla^@204~ tribute("vs.data.TableAdapter"),  _
~dulla^@204~ em.ComponentModel.DataObjectMethodAtt~dulla^@204~ .ComponentModel.DataObjectMethodType.~dulla^@204~ >  _
        Public Overloads Overri~dulla^@204~ n Delete(ByVal Original_StockCardNo A~dulla^@204~ al Original_PartNo As String) As Inte~dulla^@204~     If (Original_StockCardNo Is Nothi~dulla^@204~              Throw New System.Argumen~dulla^@204~ n("Original_StockCardNo")
          ~dulla^@204~            Me.Adapter.DeleteCommand.P~dulla^@204~ Value = CType(Original_StockCardNo,St~dulla^@204~       End If
            If (Origina~dulla^@204~ othing) Then
                Throw N~dulla^@204~ umentNullException("Original_PartNo")~dulla^@204~  Else
                Me.Adapter.Del~dulla^@204~ rameters(1).Value = CType(Original_Pa~dulla^@204~ 
            End If
            Dim ~dulla^@204~ ctionState As System.Data.ConnectionS~dulla^@204~ pter.DeleteCommand.Connection.State
~dulla^@204~ f ((Me.Adapter.DeleteCommand.Connecti~dulla^@204~ System.Data.ConnectionState.Open)  _~dulla^@204~             <> System.Data.Connection~dulla^@204~ hen
                Me.Adapter.Delet~dulla^@204~ ection.Open
            End If
    ~dulla^@204~ 
                Dim returnValue As I~dulla^@204~ dapter.DeleteCommand.ExecuteNonQuery~dulla^@204~     Return returnValue
            F~dulla^@204~            If (previousConnectionStat~dulla^@204~ ta.ConnectionState.Closed) Then
    ~dulla^@204~    Me.Adapter.DeleteCommand.Connectio~dulla^@204~             End If
            End T~dulla^@204~ nd Function
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute(),  _
~dulla^@204~ em.ComponentModel.Design.HelpKeywordA~dulla^@204~ data.TableAdapter"),  _
         Sys~dulla^@204~ Model.DataObjectMethodAttribute(Syste~dulla^@204~ del.DataObjectMethodType.Insert, true~dulla^@204~   Public Overloads Overridable Functi~dulla^@204~ al StockCardNo As String, ByVal PartN~dulla^@204~ As Integer
            If (StockCard~dulla^@204~ ) Then
                Throw New Sys~dulla^@204~ ullException("StockCardNo")
        ~dulla^@204~              Me.Adapter.InsertCommand~dulla^@204~ ).Value = CType(StockCardNo,String)
~dulla^@204~ nd If
            If (PartNo Is Noth~dulla^@204~               Throw New System.Argume~dulla^@204~ on("PartNo")
            Else
     ~dulla^@204~ .Adapter.InsertCommand.Parameters(1).~dulla^@204~ (PartNo,String)
            End If
~dulla^@204~ im previousConnectionState As System.~dulla^@204~ onState = Me.Adapter.InsertCommand.Co~dulla^@204~ e
            If ((Me.Adapter.Insert~dulla^@204~ ction.State And System.Data.Connectio~dulla^@204~  _
                        <> System~dulla^@204~ ionState.Open) Then
                ~dulla^@204~ sertCommand.Connection.Open
        ~dulla^@204~            Try 
                Dim ~dulla^@204~ s Integer = Me.Adapter.InsertCommand.~dulla^@204~ ry
                Return returnValu~dulla^@204~   Finally
                If (previo~dulla^@204~ tate = System.Data.ConnectionState.Closed) Then
                    Me.Adapter~dulla^@204~ d.Connection.Close
                E~dulla^@204~       End Try
        End Function
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute(),  _
         System.ComponentM~dulla^@204~ elpKeywordAttribute("vs.data.TableAda~dulla^@204~         System.ComponentModel.DataObj~dulla^@204~ ibute(System.ComponentModel.DataObjec~dulla^@204~ pdate, true)>  _
        Public Over~dulla^@204~ able Function Update(ByVal StockCardN~dulla^@204~ ByVal PartNo As String, ByVal Origina~dulla^@204~  As String, ByVal Original_PartNo As ~dulla^@204~ teger
            If (StockCardNo Is~dulla^@204~ n
                Throw New System.A~dulla^@204~ ception("StockCardNo")
            E~dulla^@204~         Me.Adapter.UpdateCommand.Para~dulla^@204~ ue = CType(StockCardNo,String)
     ~dulla^@204~ 
            If (PartNo Is Nothing) ~dulla^@204~          Throw New System.ArgumentNul~dulla^@204~ artNo")
            Else
          ~dulla^@204~ ter.UpdateCommand.Parameters(1).Value~dulla^@204~ No,String)
            End If
     ~dulla^@204~ iginal_StockCardNo Is Nothing) Then
~dulla^@204~    Throw New System.ArgumentNullExcep~dulla^@204~ l_StockCardNo")
            Else
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ ype(Original_StockCardNo,String)
   ~dulla^@204~ If
            If (Original_PartNo I~dulla^@204~ en
                Throw New System.~dulla^@204~ xception("Original_PartNo")
        ~dulla^@204~              Me.Adapter.UpdateCommand~dulla^@204~ ).Value = CType(Original_PartNo,Strin~dulla^@204~    End If
            Dim previousCo~dulla^@204~  As System.Data.ConnectionState = Me.~dulla^@204~ eCommand.Connection.State
          ~dulla^@204~ pter.UpdateCommand.Connection.State A~dulla^@204~ a.ConnectionState.Open)  _
         ~dulla^@204~   <> System.Data.ConnectionState.Open~dulla^@204~            Me.Adapter.UpdateCommand.C~dulla^@204~ n
            End If
            Tr~dulla^@204~        Dim returnValue As Integer = M~dulla^@204~ ateCommand.ExecuteNonQuery
         ~dulla^@204~  returnValue
            Finally
  ~dulla^@204~  If (previousConnectionState = System~dulla^@204~ ionState.Closed) Then
              ~dulla^@204~ ter.UpdateCommand.Connection.Close
 ~dulla^@204~   End If
            End Try
      ~dulla^@204~ n
    End Class
    
    <System.C~dulla^@204~ er.GeneratedCodeAttribute("System.Dat~dulla^@204~ dDataSetGenerator", "2.0.0.0"),  _
 ~dulla^@204~ mponentModel.DesignerCategoryAttribut~dulla^@204~ 
     System.ComponentModel.ToolboxI~dulla^@204~ 
     System.ComponentModel.DataObje~dulla^@204~ rue),  _
     System.ComponentModel.~dulla^@204~ bute("Microsoft.VSDesigner.DataSource~dulla^@204~ AdapterDesigner, Microsoft.VSDesigner~dulla^@204~   ", Version=8.0.0.0, Culture=neutral~dulla^@204~ ken=b03f5f7f11d50a3a"),  _
     Syst~dulla^@204~ odel.Design.HelpKeywordAttribute("vs.~dulla^@204~ pter")>  _
    Partial Public Class ~dulla^@204~ ilTableAdapter
        Inherits Syst~dulla^@204~ odel.Component
        
        Pri~dulla^@204~ ts _adapter As System.Data.SqlClient.~dulla^@204~ r
        
        Private _connect~dulla^@204~ .Data.SqlClient.SqlConnection
      ~dulla^@204~ rivate _commandCollection() As System~dulla^@204~ nt.SqlCommand
        
        Priv~dulla^@204~ oreFill As Boolean
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Sub New()
            MyBas~dulla^@204~       Me.ClearBeforeFill = true
    ~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Priva~dulla^@204~ roperty Adapter() As System.Data.SqlC~dulla^@204~ Adapter
            Get
           ~dulla^@204~ adapter Is Nothing) Then
           ~dulla^@204~ nitAdapter
                End If
 ~dulla^@204~   Return Me._adapter
            End~dulla^@204~  End Property
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ end Property Connection() As System.D~dulla^@204~ .SqlConnection
            Get
    ~dulla^@204~ f (Me._connection Is Nothing) Then
 ~dulla^@204~       Me.InitConnection
            ~dulla^@204~                Return Me._connection~dulla^@204~ End Get
            Set
           ~dulla^@204~ ection = value
                If (N~dulla^@204~ r.InsertCommand) Is Nothing) Then
  ~dulla^@204~      Me.Adapter.InsertCommand.Connect~dulla^@204~                 End If
             ~dulla^@204~ e.Adapter.DeleteCommand) Is Nothing) ~dulla^@204~              Me.Adapter.DeleteCommand~dulla^@204~  value
                End If
     ~dulla^@204~  (Not (Me.Adapter.UpdateCommand) Is N~dulla^@204~ 
                    Me.Adapter.Updat~dulla^@204~ ection = value
                End I~dulla^@204~       Dim i As Integer = 0
         ~dulla^@204~ le (i < Me.CommandCollection.Length)~dulla^@204~         If (Not (Me.CommandCollection~dulla^@204~ ng) Then
                        CTy~dulla^@204~ Collection(i),System.Data.SqlClient.S~dulla^@204~ nnection = value
                   ~dulla^@204~                 i = (i + 1)
        ~dulla^@204~ 
            End Set
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Protected R~dulla^@204~ rty CommandCollection() As System.Dat~dulla^@204~ qlCommand()
            Get
       ~dulla^@204~ Me._commandCollection Is Nothing) The~dulla^@204~           Me.InitCommandCollection
 ~dulla^@204~   End If
                Return Me._~dulla^@204~ tion
            End Get
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ arBeforeFill() As Boolean
          ~dulla^@204~           Return Me._clearBeforeFill~dulla^@204~ End Get
            Set
           ~dulla^@204~ rBeforeFill = value
            End ~dulla^@204~ End Property
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ate Sub InitAdapter()
            Me~dulla^@204~ ew System.Data.SqlClient.SqlDataAdapt~dulla^@204~    Dim tableMapping As System.Data.Co~dulla^@204~ eMapping = New System.Data.Common.Dat~dulla^@204~ 
            tableMapping.SourceTabl~dulla^@204~             tableMapping.DataSetTable~dulla^@204~ Detail"
            tableMapping.Col~dulla^@204~ dd("InvoiceNo", "InvoiceNo")
       ~dulla^@204~ ping.ColumnMappings.Add("DateOfSale",~dulla^@204~ )
            tableMapping.ColumnMap~dulla^@204~ ockCardNo", "StockCardNo")
         ~dulla^@204~ ng.ColumnMappings.Add("DateRecieved",~dulla^@204~ d")
            tableMapping.ColumnM~dulla^@204~ Packaging", "Packaging")
           ~dulla^@204~ .ColumnMappings.Add("QtyRecieved", "Q~dulla^@204~ 
            tableMapping.ColumnMappi~dulla^@204~ ssued", "QtyIssued")
            tab~dulla^@204~ umnMappings.Add("QtyBalance", "QtyBal~dulla^@204~        tableMapping.ColumnMappings.Ad~dulla^@204~ O", "Inv_ &_ D_O")
            Me._a~dulla^@204~ appings.Add(tableMapping)
          ~dulla^@204~ .DeleteCommand = New System.Data.SqlC~dulla^@204~ and
            Me._adapter.DeleteCo~dulla^@204~ ion = Me.Connection
            Me._~dulla^@204~ eCommand.CommandText = "DELETE FROM [~dulla^@204~ rdDetail] WHERE (([InvoiceNo] = @Orig~dulla^@204~ o) AN"& _ 
                "D ([Date~dulla^@204~ iginal_DateOfSale) AND ([StockCardNo]~dulla^@204~ StockCard"& _ 
                "No) ~dulla^@204~ ieved] = @Original_DateRecieved) AND ~dulla^@204~ = @Original_P"& _ 
                "~dulla^@204~  ((@IsNull_QtyRecieved = 1 AND [QtyRe~dulla^@204~ LL) OR ([QtyRecie"& _ 
             ~dulla^@204~ riginal_QtyRecieved)) AND ((@IsNull_Q~dulla^@204~ AND [QtyIssued] IS NU"& _ 
         ~dulla^@204~ R ([QtyIssued] = @Original_QtyIssued)~dulla^@204~ lance] = @Original_QtyBal"& _ 
     ~dulla^@204~ nce) AND ((@p3 = 1 AND [Inv_ &_ D.O] ~dulla^@204~ [Inv_ &_ D.O] = @p2)))"
            ~dulla^@204~ eleteCommand.CommandType = System.Dat~dulla^@204~ .Text
            Me._adapter.Delete~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @Original_InvoiceNo", System.Data.Sql~dulla^@204~ ar, 0, System.Data.ParameterDirection.Input, 0, 0, "InvoiceNo", System.Data.Dat~dulla^@204~ riginal, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.DeleteCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Orig~dulla^@204~ le", System.Data.SqlDbType.DateTime, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "Da~dulla^@204~ stem.Data.DataRowVersion.Original, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Original_StockCardNo", Syste~dulla^@204~ ype.NVarChar, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "StockCardNo", System.Data~dulla^@204~ on.Original, false, Nothing, "", "", ~dulla^@204~      Me._adapter.DeleteCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ Recieved", System.Data.SqlDbType.Date~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ ved", System.Data.DataRowVersion.Orig~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ eteCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@Original_Packaging",~dulla^@204~ SqlDbType.[Char], 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "Packaging", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.DeleteCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ ecieved", System.Data.SqlDbType.Int, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "Qt~dulla^@204~ ystem.Data.DataRowVersion.Original, t~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Original_QtyRecieved", Syste~dulla^@204~ ype.Int, 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "QtyRecieved", System.Data.Data~dulla^@204~ iginal, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.DeleteCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@IsNul~dulla^@204~  System.Data.SqlDbType.Int, 0, System~dulla^@204~ erDirection.Input, 0, 0, "QtyIssued",~dulla^@204~ DataRowVersion.Original, true, Nothin~dulla^@204~ ))
            Me._adapter.DeleteCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ iginal_QtyIssued", System.Data.SqlDbT~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ ued", System.Data.DataRowVersion.Orig~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ eteCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@Original_QtyBalance"~dulla^@204~ .SqlDbType.Int, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "QtyBalance", System.Dat~dulla^@204~ ion.Original, false, Nothing, "", "",~dulla^@204~       Me._adapter.DeleteCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ Data.SqlDbType.Int, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "Inv_ &_ D.O", Syste~dulla^@204~ wVersion.Original, true, Nothing, "",~dulla^@204~           Me._adapter.DeleteCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~ tem.Data.SqlDbType.[Char], 0, System.~dulla^@204~ rDirection.Input, 0, 0, "Inv_ &_ D.O"~dulla^@204~ .DataRowVersion.Original, false, Noth~dulla^@204~ ""))
            Me._adapter.InsertC~dulla^@204~ System.Data.SqlClient.SqlCommand
   ~dulla^@204~ adapter.InsertCommand.Connection = Me~dulla^@204~             Me._adapter.InsertCommand~dulla^@204~ = "INSERT INTO [dbo].[StockCardDetail~dulla^@204~ ], [DateOfSale], [StockCardNo], [D"& ~dulla^@204~        "ateRecieved], [Packaging], [Q~dulla^@204~ [QtyIssued], [QtyBalance], [Inv_ &_ D~dulla^@204~            "O]) VALUES (@InvoiceNo, @~dulla^@204~ StockCardNo, @DateRecieved, @Packagin~dulla^@204~                "tyRecieved, @QtyIssue~dulla^@204~ e, @p1);"&Global.Microsoft.VisualBasi~dulla^@204~ obal.Microsoft.VisualBasic.ChrW(10)&"~dulla^@204~ eNo, DateOfSale, StockC"& _ 
       ~dulla^@204~ No, DateRecieved, Packaging, QtyRecie~dulla^@204~ d, QtyBalance, [Inv_ &_ D.O"& _ 
   ~dulla^@204~ "] FROM StockCardDetail WHERE (DateOf~dulla^@204~ fSale) AND (InvoiceNo = @Invoic"& _ ~dulla^@204~     "eNo)"
            Me._adapter.I~dulla^@204~ CommandType = System.Data.CommandType~dulla^@204~       Me._adapter.InsertCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ System.Data.SqlDbType.NVarChar, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "Invoice~dulla^@204~ ata.DataRowVersion.Current, false, No~dulla^@204~ , ""))
            Me._adapter.Inser~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@DateOfSale", System.Data.SqlDbType.~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ fSale", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ sertCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@StockCardNo", Syste~dulla^@204~ ype.NVarChar, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "StockCardNo", System.Data~dulla^@204~ on.Current, false, Nothing, "", "", "~dulla^@204~     Me._adapter.InsertCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@D~dulla^@204~  System.Data.SqlDbType.DateTime, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "DateRe~dulla^@204~ em.Data.DataRowVersion.Current, false~dulla^@204~ , "", ""))
            Me._adapter.I~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@Packaging", System.Data.SqlDbTy~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ aging", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ sertCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@QtyRecieved", Syste~dulla^@204~ ype.Int, 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "QtyRecieved", System.Data.Data~dulla^@204~ rrent, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.InsertCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@QtyIss~dulla^@204~ Data.SqlDbType.Int, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "QtyIssued", System.~dulla^@204~ ersion.Current, false, Nothing, "", "~dulla^@204~         Me._adapter.InsertCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ ", System.Data.SqlDbType.Int, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "QtyBalanc~dulla^@204~ ta.DataRowVersion.Current, false, Not~dulla^@204~  ""))
            Me._adapter.Insert~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @p1", System.Data.SqlDbType.[Char], 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Inv~dulla^@204~ stem.Data.DataRowVersion.Current, fal~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d = New System.Data.SqlClient.SqlComm~dulla^@204~     Me._adapter.UpdateCommand.Connect~dulla^@204~ ection
            Me._adapter.Updat~dulla^@204~ andText = "UPDATE [dbo].[StockCardDet~dulla^@204~ oiceNo] = @InvoiceNo, [DateOfSale] = ~dulla^@204~                "OfSale, [StockCardNo]~dulla^@204~ No, [DateRecieved] = @DateRecieved, [~dulla^@204~  
                "] = @Packaging, [~dulla^@204~ = @QtyRecieved, [QtyIssued] = @QtyIss~dulla^@204~ "& _ 
                "nce] = @QtyBa~dulla^@204~ &_ D.O] = @p1 WHERE (([InvoiceNo] = @~dulla^@204~ iceN"& _ 
                "o) AND ([~dulla^@204~  @Original_DateOfSale) AND ([StockCar~dulla^@204~ nal_Stoc"& _ 
                "kCard~dulla^@204~ eRecieved] = @Original_DateRecieved) ~dulla^@204~ ng] = @Origi"& _ 
                "n~dulla^@204~  AND ((@IsNull_QtyRecieved = 1 AND [Q~dulla^@204~ S NULL) OR ([Qty"& _ 
              ~dulla^@204~ = @Original_QtyRecieved)) AND ((@IsNu~dulla^@204~ = 1 AND [QtyIssued] "& _ 
          ~dulla^@204~ L) OR ([QtyIssued] = @Original_QtyIss~dulla^@204~ tyBalance] = @Original_Q"& _ 
      ~dulla^@204~ Balance) AND ((@p3 = 1 AND [Inv_ &_ D~dulla^@204~ OR ([Inv_ &_ D.O] = @p2)));"&Global.M~dulla^@204~ alBasic.ChrW(13)&Global.Microsoft.Vis~dulla^@204~ (10)&"SELECT InvoiceNo, DateOfSale, S~dulla^@204~ ateRecieved, Packaging, QtyRecieved"&~dulla^@204~         ", QtyIssued, QtyBalance, [In~dulla^@204~ OM StockCardDetail WHERE (DateOfSale ~dulla^@204~             "@DateOfSale) AND (Invoic~dulla^@204~ eNo)"
            Me._adapter.Update~dulla^@204~ ndType = System.Data.CommandType.Text~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Invo~dulla^@204~ m.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Invo~dulla^@204~ m.Data.DataRowVersion.Current, false,~dulla^@204~  "", ""))
            Me._adapter.Up~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@DateOfSale", System.Data.SqlDbTy~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ teOfSale", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@StockCardNo", Sy~dulla^@204~ DbType.NVarChar, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "StockCardNo", System.D~dulla^@204~ rsion.Current, false, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ d", System.Data.SqlDbType.DateTime, 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Dat~dulla^@204~ ystem.Data.DataRowVersion.Current, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Packaging", System.Data.SqlD~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ ackaging", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@QtyRecieved", Sy~dulla^@204~ DbType.Int, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "QtyRecieved", System.Data.D~dulla^@204~ .Current, false, Nothing, "", "", "")~dulla^@204~   Me._adapter.UpdateCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@Qty~dulla^@204~ em.Data.SqlDbType.Int, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "QtyIssued", Syst~dulla^@204~ owVersion.Current, false, Nothing, ""~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ nce", System.Data.SqlDbType.Int, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "QtyBal~dulla^@204~ .Data.DataRowVersion.Current, false, ~dulla^@204~ "", ""))
            Me._adapter.Upd~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@p1", System.Data.SqlDbType.[Char]~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~  System.Data.DataRowVersion.Current, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Original_InvoiceNo", Syste~dulla^@204~ ype.NVarChar, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "InvoiceNo", System.Data.D~dulla^@204~ .Original, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.UpdateCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Or~dulla^@204~ Sale", System.Data.SqlDbType.DateTime~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ System.Data.DataRowVersion.Original, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Original_StockCardNo", Sys~dulla^@204~ bType.NVarChar, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "StockCardNo", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ teRecieved", System.Data.SqlDbType.Da~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ ieved", System.Data.DataRowVersion.Or~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ pdateCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@Original_Packaging~dulla^@204~ a.SqlDbType.[Char], 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "Packaging", System.~dulla^@204~ ersion.Original, false, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ yRecieved", System.Data.SqlDbType.Int~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Original_QtyRecieved", Sys~dulla^@204~ bType.Int, 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "QtyRecieved", System.Data.Da~dulla^@204~ Original, false, Nothing, "", "", "")~dulla^@204~   Me._adapter.UpdateCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@IsN~dulla^@204~ ", System.Data.SqlDbType.Int, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "QtyIssued~dulla^@204~ a.DataRowVersion.Original, true, Noth~dulla^@204~ ""))
            Me._adapter.UpdateC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ Original_QtyIssued", System.Data.SqlD~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ ssued", System.Data.DataRowVersion.Or~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ pdateCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@Original_QtyBalanc~dulla^@204~ ta.SqlDbType.Int, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "QtyBalance", System.D~dulla^@204~ rsion.Original, false, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ m.Data.SqlDbType.Int, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "Inv_ &_ D.O", Sys~dulla^@204~ RowVersion.Original, true, Nothing, "~dulla^@204~             Me._adapter.UpdateCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ ystem.Data.SqlDbType.[Char], 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "Inv_ &_ D.~dulla^@204~ ta.DataRowVersion.Original, false, No~dulla^@204~ , ""))
        End Sub
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Private Sub InitConnection()
~dulla^@204~ e._connection = New System.Data.SqlCl~dulla^@204~ ction
            Me._connection.Con~dulla^@204~  = Global.InventoryControlSystem.My.M~dulla^@204~ ault.InventoryControlSystemConnection~dulla^@204~    End Sub
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~ e Sub InitCommandCollection()
      ~dulla^@204~ mandCollection = New System.Data.SqlC~dulla^@204~ and(0) {}
            Me._commandCol~dulla^@204~ New System.Data.SqlClient.SqlCommand~dulla^@204~ Me._commandCollection(0).Connection =~dulla^@204~ n
            Me._commandCollection(~dulla^@204~ t = "SELECT InvoiceNo, DateOfSale, St~dulla^@204~ teRecieved, Packaging, QtyRecieved, "~dulla^@204~          "QtyIssued, QtyBalance, [Inv~dulla^@204~ M dbo.StockCardDetail"
            M~dulla^@204~ lection(0).CommandType = System.Data.~dulla^@204~ ext
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~      System.ComponentModel.Design.Hel~dulla^@204~ bute("vs.data.TableAdapter"),  _
   ~dulla^@204~ ComponentModel.DataObjectMethodAttrib~dulla^@204~ mponentModel.DataObjectMethodType.Fil~dulla^@204~ 
        Public Overloads Overridable~dulla^@204~ l(ByVal dataTable As InventoryControl~dulla^@204~ 1.StockCardDetailDataTable) As Intege~dulla^@204~   Me.Adapter.SelectCommand = Me.Comma~dulla^@204~ 0)
            If (Me.ClearBeforeFil~dulla^@204~ n
                dataTable.Clear
 ~dulla^@204~ d If
            Dim returnValue As ~dulla^@204~ Adapter.Fill(dataTable)
            ~dulla^@204~ Value
        End Function
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
         System.ComponentModel.Des~dulla^@204~ rdAttribute("vs.data.TableAdapter"), ~dulla^@204~ System.ComponentModel.DataObjectMetho~dulla^@204~ stem.ComponentModel.DataObjectMethodT~dulla^@204~  true)>  _
        Public Overloads ~dulla^@204~ unction GetData() As InventoryControl~dulla^@204~ 1.StockCardDetailDataTable
         ~dulla^@204~ .SelectCommand = Me.CommandCollection~dulla^@204~     Dim dataTable As InventoryControl~dulla^@204~ 1.StockCardDetailDataTable = New Inve~dulla^@204~ ystemDataSet1.StockCardDetailDataTabl~dulla^@204~   Me.Adapter.Fill(dataTable)
       ~dulla^@204~ ataTable
        End Function
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ ,  _
         System.ComponentModel.~dulla^@204~ ywordAttribute("vs.data.TableAdapter"~dulla^@204~   Public Overloads Overridable Functi~dulla^@204~ al dataTable As InventoryControlSyste~dulla^@204~ ckCardDetailDataTable) As Integer
            Return Me.Adapter.Update(dataTab~dulla^@204~ End Function
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ tem.ComponentModel.Design.HelpKeyword~dulla^@204~ .data.TableAdapter")>  _
        Pub~dulla^@204~  Overridable Function Update(ByVal da~dulla^@204~ ntoryControlSystemDataSet1) As Intege~dulla^@204~   Return Me.Adapter.Update(dataSet, "~dulla^@204~ il")
        End Function
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
         System.ComponentModel.Desi~dulla^@204~ dAttribute("vs.data.TableAdapter")>  ~dulla^@204~ blic Overloads Overridable Function U~dulla^@204~ ataRow As System.Data.DataRow) As Int~dulla^@204~      Return Me.Adapter.Update(New Sys~dulla^@204~ Row() {dataRow})
        End Functio~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute(),  _
         System.Compone~dulla^@204~ n.HelpKeywordAttribute("vs.data.Table~dulla^@204~ 
        Public Overloads Overridabl~dulla^@204~ date(ByVal dataRows() As System.Data.~dulla^@204~ nteger
            Return Me.Adapter~dulla^@204~ ows)
        End Function
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
         System.ComponentModel.Desi~dulla^@204~ dAttribute("vs.data.TableAdapter"),  ~dulla^@204~ ystem.ComponentModel.DataObjectMethod~dulla^@204~ tem.ComponentModel.DataObjectMethodTy~dulla^@204~ ue)>  _
        Public Overloads Ove~dulla^@204~ tion Delete(ByVal Original_InvoiceNo ~dulla^@204~ Val Original_DateOfSale As Date, ByVa~dulla^@204~ ockCardNo As String, ByVal Original_D~dulla^@204~ s Date, ByVal Original_Packaging As S~dulla^@204~ Original_QtyRecieved As System.Nullab~dulla^@204~ ), ByVal Original_QtyIssued As System~dulla^@204~ Integer), ByVal Original_QtyBalance A~dulla^@204~ Val p2 As String) As Integer
       ~dulla^@204~ inal_InvoiceNo Is Nothing) Then
    ~dulla^@204~ hrow New System.ArgumentNullException~dulla^@204~ voiceNo")
            Else
        ~dulla^@204~ apter.DeleteCommand.Parameters(0).Val~dulla^@204~ iginal_InvoiceNo,String)
           ~dulla^@204~         Me.Adapter.DeleteCommand.Para~dulla^@204~ ue = CType(Original_DateOfSale,Date)~dulla^@204~ If (Original_StockCardNo Is Nothing) ~dulla^@204~          Throw New System.ArgumentNul~dulla^@204~ riginal_StockCardNo")
            El~dulla^@204~        Me.Adapter.DeleteCommand.Param~dulla^@204~ e = CType(Original_StockCardNo,String~dulla^@204~   End If
            Me.Adapter.Dele~dulla^@204~ ameters(3).Value = CType(Original_Dat~dulla^@204~ e)
            If (Original_Packagin~dulla^@204~  Then
                Throw New Syst~dulla^@204~ llException("Original_Packaging")
  ~dulla^@204~ e
                Me.Adapter.DeleteC~dulla^@204~ ters(4).Value = CType(Original_Packag~dulla^@204~             End If
            If (O~dulla^@204~ cieved.HasValue = true) Then
       ~dulla^@204~ dapter.DeleteCommand.Parameters(5).Va~dulla^@204~ ,Object)
                Me.Adapter.~dulla^@204~ .Parameters(6).Value = CType(Original~dulla^@204~ Value,Integer)
            Else
   ~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(5~dulla^@204~ pe(1,Object)
                Me.Adap~dulla^@204~ mand.Parameters(6).Value = System.DBN~dulla^@204~           End If
            If (Ori~dulla^@204~ ed.HasValue = true) Then
           ~dulla^@204~ er.DeleteCommand.Parameters(7).Value ~dulla^@204~ ect)
                Me.Adapter.Dele~dulla^@204~ ameters(8).Value = CType(Original_Qty~dulla^@204~ Integer)
            Else
         ~dulla^@204~ pter.DeleteCommand.Parameters(7).Valu~dulla^@204~ bject)
                Me.Adapter.De~dulla^@204~ arameters(8).Value = System.DBNull.Va~dulla^@204~     End If
            Me.Adapter.De~dulla^@204~ arameters(9).Value = CType(Original_Q~dulla^@204~ eger)
            If (p2 Is Nothing)~dulla^@204~           Me.Adapter.DeleteCommand.Pa~dulla^@204~ Value = CType(1,Object)
            ~dulla^@204~ r.DeleteCommand.Parameters(11).Value ~dulla^@204~ ll.Value
            Else
         ~dulla^@204~ pter.DeleteCommand.Parameters(10).Val~dulla^@204~ Object)
                Me.Adapter.D~dulla^@204~ Parameters(11).Value = CType(p2,Strin~dulla^@204~    End If
            Dim previousCo~dulla^@204~  As System.Data.ConnectionState = Me.~dulla^@204~ eCommand.Connection.State
          ~dulla^@204~ pter.DeleteCommand.Connection.State A~dulla^@204~ a.ConnectionState.Open)  _
         ~dulla^@204~   <> System.Data.ConnectionState.Open~dulla^@204~            Me.Adapter.DeleteCommand.C~dulla^@204~ n
            End If
            Tr~dulla^@204~        Dim returnValue As Integer = M~dulla^@204~ eteCommand.ExecuteNonQuery
         ~dulla^@204~  returnValue
            Finally
  ~dulla^@204~  If (previousConnectionState = System~dulla^@204~ ionState.Closed) Then
              ~dulla^@204~ ter.DeleteCommand.Connection.Close
 ~dulla^@204~   End If
            End Try
      ~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute(),  _
         S~dulla^@204~ ntModel.Design.HelpKeywordAttribute("~dulla^@204~ Adapter"),  _
         System.Compon~dulla^@204~ ObjectMethodAttribute(System.Componen~dulla^@204~ jectMethodType.Insert, true)>  _
   ~dulla^@204~ verloads Overridable Function Insert(~dulla^@204~ No As String, ByVal DateOfSale As Dat~dulla^@204~ kCardNo As String, ByVal DateRecieved~dulla^@204~ al Packaging As String, ByVal QtyReci~dulla^@204~ m.Nullable(Of Integer), ByVal QtyIssu~dulla^@204~ Nullable(Of Integer), ByVal QtyBalanc~dulla^@204~  ByVal p1 As String) As Integer
    ~dulla^@204~ nvoiceNo Is Nothing) Then
          ~dulla^@204~ ew System.ArgumentNullException("Invo~dulla^@204~         Else
                Me.Adap~dulla^@204~ mand.Parameters(0).Value = CType(Invo~dulla^@204~ 
            End If
            Me.~dulla^@204~ tCommand.Parameters(1).Value = CType(~dulla^@204~ te)
            If (StockCardNo Is N~dulla^@204~ 
                Throw New System.Arg~dulla^@204~ ption("StockCardNo")
            Els~dulla^@204~       Me.Adapter.InsertCommand.Parame~dulla^@204~  = CType(StockCardNo,String)
       ~dulla^@204~             Me.Adapter.InsertCommand.~dulla^@204~ .Value = CType(DateRecieved,Date)
  ~dulla^@204~ (Packaging Is Nothing) Then
        ~dulla^@204~  New System.ArgumentNullException("Pa~dulla^@204~           Else
                Me.Ad~dulla^@204~ ommand.Parameters(4).Value = CType(Pa~dulla^@204~ g)
            End If
            I~dulla^@204~ d.HasValue = true) Then
            ~dulla^@204~ r.InsertCommand.Parameters(5).Value =~dulla^@204~ ieved.Value,Integer)
            Els~dulla^@204~       Me.Adapter.InsertCommand.Parame~dulla^@204~  = System.DBNull.Value
            E~dulla^@204~       If (QtyIssued.HasValue = true) ~dulla^@204~          Me.Adapter.InsertCommand.Par~dulla^@204~ lue = CType(QtyIssued.Value,Integer)~dulla^@204~ Else
                Me.Adapter.Inse~dulla^@204~ ameters(6).Value = System.DBNull.Valu~dulla^@204~   End If
            Me.Adapter.Inse~dulla^@204~ ameters(7).Value = CType(QtyBalance,I~dulla^@204~         If (p1 Is Nothing) Then
    ~dulla^@204~ e.Adapter.InsertCommand.Parameters(8)~dulla^@204~ em.DBNull.Value
            Else
  ~dulla^@204~  Me.Adapter.InsertCommand.Parameters(~dulla^@204~ ype(p1,String)
            End If
 ~dulla^@204~ m previousConnectionState As System.D~dulla^@204~ nState = Me.Adapter.InsertCommand.Con~dulla^@204~ 
            If ((Me.Adapter.InsertC~dulla^@204~ tion.State And System.Data.Connection~dulla^@204~ _
                        <> System.~dulla^@204~ onState.Open) Then
                M~dulla^@204~ ertCommand.Connection.Open
         ~dulla^@204~           Try 
                Dim r~dulla^@204~  Integer = Me.Adapter.InsertCommand.E~dulla^@204~ y
                Return returnValue~dulla^@204~  Finally
                If (previou~dulla^@204~ ate = System.Data.ConnectionState.Clo~dulla^@204~                   Me.Adapter.InsertCo~dulla^@204~ ion.Close
                End If
  ~dulla^@204~  Try
        End Function
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdap~dulla^@204~        System.ComponentModel.DataObje~dulla^@204~ bute(System.ComponentModel.DataObject~dulla^@204~ date, true)>  _
        Public Overl~dulla^@204~ ble Function Update( _
             ~dulla^@204~ InvoiceNo As String,  _
            ~dulla^@204~  DateOfSale As Date,  _
            ~dulla^@204~  StockCardNo As String,  _
         ~dulla^@204~ Val DateRecieved As Date,  _
       ~dulla^@204~ ByVal Packaging As String,  _
      ~dulla^@204~  ByVal QtyRecieved As System.Nullable~dulla^@204~   _
                    ByVal QtyIss~dulla^@204~ .Nullable(Of Integer),  _
          ~dulla^@204~ al QtyBalance As Integer,  _
       ~dulla^@204~ ByVal p1 As String,  _
             ~dulla^@204~ Original_InvoiceNo As String,  _
   ~dulla^@204~     ByVal Original_DateOfSale As Date~dulla^@204~              ByVal Original_StockCard~dulla^@204~   _
                    ByVal Origin~dulla^@204~ ed As Date,  _
                    B~dulla^@204~ _Packaging As String,  _
           ~dulla^@204~ l Original_QtyRecieved As System.Null~dulla^@204~ er),  _
                    ByVal Or~dulla^@204~ ued As System.Nullable(Of Integer),  ~dulla^@204~           ByVal Original_QtyBalance A~dulla^@204~ 
                    ByVal p2 As Str~dulla^@204~ er
            If (InvoiceNo Is Noth~dulla^@204~               Throw New System.Argume~dulla^@204~ on("InvoiceNo")
            Else
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ ype(InvoiceNo,String)
            En~dulla^@204~      Me.Adapter.UpdateCommand.Paramet~dulla^@204~ = CType(DateOfSale,Date)
           ~dulla^@204~ dNo Is Nothing) Then
               ~dulla^@204~ stem.ArgumentNullException("StockCard~dulla^@204~      Else
                Me.Adapter~dulla^@204~ d.Parameters(2).Value = CType(StockCa~dulla^@204~ 
            End If
            Me.A~dulla^@204~ Command.Parameters(3).Value = CType(D~dulla^@204~ ate)
            If (Packaging Is No~dulla^@204~                 Throw New System.Argu~dulla^@204~ tion("Packaging")
            Else
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~ CType(Packaging,String)
            ~dulla^@204~        If (QtyRecieved.HasValue = tru~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ .Value = CType(QtyRecieved.Value,Inte~dulla^@204~      Else
                Me.Adapter~dulla^@204~ d.Parameters(5).Value = System.DBNull~dulla^@204~        End If
            If (QtyIss~dulla^@204~ = true) Then
                Me.Adap~dulla^@204~ mand.Parameters(6).Value = CType(QtyI~dulla^@204~ nteger)
            Else
          ~dulla^@204~ ter.UpdateCommand.Parameters(6).Value~dulla^@204~ ull.Value
            End If
      ~dulla^@204~ ter.UpdateCommand.Parameters(7).Value~dulla^@204~ alance,Integer)
            If (p1 I~dulla^@204~ en
                Me.Adapter.Update~dulla^@204~ eters(8).Value = System.DBNull.Value~dulla^@204~ Else
                Me.Adapter.Upda~dulla^@204~ ameters(8).Value = CType(p1,String)
~dulla^@204~ nd If
            If (Original_Invoi~dulla^@204~ ng) Then
                Throw New S~dulla^@204~ tNullException("Original_InvoiceNo")~dulla^@204~ Else
                Me.Adapter.Upda~dulla^@204~ ameters(9).Value = CType(Original_Inv~dulla^@204~ )
            End If
            Me~dulla^@204~ teCommand.Parameters(10).Value = CTyp~dulla^@204~ teOfSale,Date)
            If (Origi~dulla^@204~ No Is Nothing) Then
                ~dulla^@204~ tem.ArgumentNullException("Original_S~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(11).Value = CTyp~dulla^@204~ ockCardNo,String)
            End If~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ Type(Original_DateRecieved,Date)
   ~dulla^@204~ Original_Packaging Is Nothing) Then
~dulla^@204~    Throw New System.ArgumentNullExcep~dulla^@204~ l_Packaging")
            Else
    ~dulla^@204~ e.Adapter.UpdateCommand.Parameters(13~dulla^@204~ pe(Original_Packaging,String)
      ~dulla^@204~ 
            If (Original_QtyRecieved~dulla^@204~ rue) Then
                Me.Adapter~dulla^@204~ d.Parameters(14).Value = CType(0,Obje~dulla^@204~         Me.Adapter.UpdateCommand.Para~dulla^@204~ lue = CType(Original_QtyRecieved.Valu~dulla^@204~            Else
                Me.A~dulla^@204~ Command.Parameters(14).Value = CType(~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 15).Value = System.DBNull.Value
    ~dulla^@204~ f
            If (Original_QtyIssued~dulla^@204~ rue) Then
                Me.Adapter~dulla^@204~ d.Parameters(16).Value = CType(0,Obje~dulla^@204~         Me.Adapter.UpdateCommand.Para~dulla^@204~ lue = CType(Original_QtyIssued.Value,~dulla^@204~          Else
                Me.Ada~dulla^@204~ mmand.Parameters(16).Value = CType(1,~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ ).Value = System.DBNull.Value
      ~dulla^@204~ 
            Me.Adapter.UpdateCommand~dulla^@204~ 8).Value = CType(Original_QtyBalance,~dulla^@204~          If (p2 Is Nothing) Then
   ~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(1~dulla^@204~ ype(1,Object)
                Me.Ada~dulla^@204~ mmand.Parameters(20).Value = System.D~dulla^@204~             Else
                Me.~dulla^@204~ eCommand.Parameters(19).Value = CType~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ (20).Value = CType(p2,String)
      ~dulla^@204~ 
            Dim previousConnectionSt~dulla^@204~ .Data.ConnectionState = Me.Adapter.Up~dulla^@204~ onnection.State
            If ((Me.~dulla^@204~ eCommand.Connection.State And System.~dulla^@204~ onState.Open)  _
                   ~dulla^@204~ m.Data.ConnectionState.Open) Then
  ~dulla^@204~  Me.Adapter.UpdateCommand.Connection.~dulla^@204~      End If
            Try 
      ~dulla^@204~  returnValue As Integer = Me.Adapter.~dulla^@204~ .ExecuteNonQuery
                Ret~dulla^@204~ ue
            Finally
            ~dulla^@204~ ousConnectionState = System.Data.Conn~dulla^@204~ losed) Then
                    Me.A~dulla^@204~ Command.Connection.Close
           ~dulla^@204~             End Try
        End Func~dulla^@204~  Class
    
    <System.CodeDom.Com~dulla^@204~ edCodeAttribute("System.Data.Design.T~dulla^@204~ nerator", "2.0.0.0"),  _
     System~dulla^@204~ el.DesignerCategoryAttribute("code"),~dulla^@204~ tem.ComponentModel.ToolboxItem(true),~dulla^@204~ tem.ComponentModel.DataObjectAttribut~dulla^@204~      System.ComponentModel.DesignerAt~dulla^@204~ osoft.VSDesigner.DataSource.Design.Ta~dulla^@204~ igner, Microsoft.VSDesigner"& _ 
   ~dulla^@204~ on=8.0.0.0, Culture=neutral, PublicKe~dulla^@204~ 7f11d50a3a"),  _
     System.Compone~dulla^@204~ n.HelpKeywordAttribute("vs.data.Table~dulla^@204~ 
    Partial Public Class SupplierTa~dulla^@204~        Inherits System.ComponentModel~dulla^@204~        
        Private WithEvents _~dulla^@204~ stem.Data.SqlClient.SqlDataAdapter
 ~dulla^@204~     Private _connection As System.Dat~dulla^@204~ qlConnection
        
        Priva~dulla^@204~ llection() As System.Data.SqlClient.S~dulla^@204~       
        Private _clearBeforeF~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~ )
            MyBase.New
          ~dulla^@204~ oreFill = true
        End Sub
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Private ReadOnly Prope~dulla^@204~  As System.Data.SqlClient.SqlDataAdap~dulla^@204~     Get
                If (Me._adap~dulla^@204~ g) Then
                    Me.InitA~dulla^@204~            End If
                Re~dulla^@204~ ter
            End Get
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Friend ~dulla^@204~ ection() As System.Data.SqlClient.Sql~dulla^@204~            Get
                If (M~dulla^@204~  Is Nothing) Then
                  ~dulla^@204~ ection
                End If
     ~dulla^@204~ turn Me._connection
            End ~dulla^@204~     Set
                Me._connecti~dulla^@204~                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
           ~dulla^@204~ dapter.InsertCommand.Connection = val~dulla^@204~        End If
                If (No~dulla^@204~ .DeleteCommand) Is Nothing) Then
   ~dulla^@204~     Me.Adapter.DeleteCommand.Connecti~dulla^@204~                End If
              ~dulla^@204~ .Adapter.UpdateCommand) Is Nothing) T~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ value
                End If
      ~dulla^@204~  i As Integer = 0
                Do~dulla^@204~ e.CommandCollection.Length)
        ~dulla^@204~ f (Not (Me.CommandCollection(i)) Is N~dulla^@204~ 
                        CType(Me.Com~dulla^@204~ n(i),System.Data.SqlClient.SqlCommand~dulla^@204~ = value
                    End If
~dulla^@204~        i = (i + 1)
                L~dulla^@204~     End Set
        End Property
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Protected ReadOnly P~dulla^@204~ ndCollection() As System.Data.SqlClie~dulla^@204~ ()
            Get
                ~dulla^@204~ ndCollection Is Nothing) Then
      ~dulla^@204~  Me.InitCommandCollection
          ~dulla^@204~ 
                Return Me._commandCo~dulla^@204~          End Get
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Property~dulla^@204~ ill() As Boolean
            Get
  ~dulla^@204~  Return Me._clearBeforeFill
        ~dulla^@204~             Set
                Me._~dulla^@204~ ll = value
            End Set
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ nitAdapter()
            Me._adapter~dulla^@204~ .Data.SqlClient.SqlDataAdapter
     ~dulla^@204~ bleMapping As System.Data.Common.Data~dulla^@204~ = New System.Data.Common.DataTableMap~dulla^@204~      tableMapping.SourceTable = "Tabl~dulla^@204~    tableMapping.DataSetTable = "Suppl~dulla^@204~      tableMapping.ColumnMappings.Add(~dulla^@204~  "SupplierID")
            tableMapp~dulla^@204~ pings.Add("SupplierName", "SupplierNa~dulla^@204~      tableMapping.ColumnMappings.Add(~dulla^@204~ ddress")
            tableMapping.Co~dulla^@204~ Add("City", "City")
            tabl~dulla^@204~ mnMappings.Add("Country", "Country")~dulla^@204~ tableMapping.ColumnMappings.Add("Phon~dulla^@204~ 
            tableMapping.ColumnMappi~dulla^@204~ , "Fax")
            tableMapping.Co~dulla^@204~ Add("PostalAddress", "PostalAddress")~dulla^@204~  tableMapping.ColumnMappings.Add("Web~dulla^@204~ te")
            Me._adapter.TableMa~dulla^@204~ bleMapping)
            Me._adapter.~dulla^@204~  = New System.Data.SqlClient.SqlComma~dulla^@204~    Me._adapter.DeleteCommand.Connecti~dulla^@204~ ction
            Me._adapter.Delete~dulla^@204~ ndText = "DELETE FROM [dbo].[Supplier~dulla^@204~ pplierID] = @Original_SupplierID) AND~dulla^@204~               "upplierName] = @Origin~dulla^@204~ me) AND ((@IsNull_Address = 1 AND [Ad~dulla^@204~ 
                "S NULL) OR ([Addre~dulla^@204~ al_Address)) AND ((@IsNull_City = 1 A~dulla^@204~ & _ 
                " NULL) OR ([Ci~dulla^@204~ al_City)) AND ((@IsNull_Country = 1 A~dulla^@204~ IS "& _ 
                "NULL) OR (~dulla^@204~ Original_Country)) AND ((@IsNull_Phon~dulla^@204~ one] IS"& _ 
                " NULL)~dulla^@204~ = @Original_Phone)) AND ([Fax] = @Ori~dulla^@204~ D ([PostalA"& _ 
                "dd~dulla^@204~ inal_PostalAddress) AND ([Website] = ~dulla^@204~ site))"
            Me._adapter.Dele~dulla^@204~ mandType = System.Data.CommandType.Te~dulla^@204~    Me._adapter.DeleteCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Or~dulla^@204~ erID", System.Data.SqlDbType.NVarChar~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ System.Data.DataRowVersion.Original, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Original_SupplierName", Sy~dulla^@204~ DbType.[Char], 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "SupplierName", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.DeleteCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ ess", System.Data.SqlDbType.Int, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "Addres~dulla^@204~ ta.DataRowVersion.Original, true, Not~dulla^@204~  ""))
            Me._adapter.Delete~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @Original_Address", System.Data.SqlDb~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ dress", System.Data.DataRowVersion.Or~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ eleteCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@IsNull_City", Syst~dulla^@204~ Type.Int, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "City", System.Data.DataRowVer~dulla^@204~ , true, Nothing, "", "", ""))
      ~dulla^@204~ pter.DeleteCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@Original_Cit~dulla^@204~ ta.SqlDbType.[Char], 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "City", System.Data~dulla^@204~ on.Original, false, Nothing, "", "", ~dulla^@204~      Me._adapter.DeleteCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ y", System.Data.SqlDbType.Int, 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "Country"~dulla^@204~ .DataRowVersion.Original, true, Nothi~dulla^@204~ "))
            Me._adapter.DeleteCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ riginal_Country", System.Data.SqlDbTy~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ try", System.Data.DataRowVersion.Orig~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ eteCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@IsNull_Phone", Syste~dulla^@204~ ype.Int, 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "Phone", System.Data.DataRowVer~dulla^@204~ , true, Nothing, "", "", ""))
      ~dulla^@204~ pter.DeleteCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@Original_Pho~dulla^@204~ ata.SqlDbType.[Char], 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "Phone", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.DeleteCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ x", System.Data.SqlDbType.[Char], 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Fax",~dulla^@204~ DataRowVersion.Original, false, Nothi~dulla^@204~ "))
            Me._adapter.DeleteCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ riginal_PostalAddress", System.Data.S~dulla^@204~ r], 0, System.Data.ParameterDirection~dulla^@204~  "PostalAddress", System.Data.DataRow~dulla^@204~ nal, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.DeleteCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@Original~dulla^@204~ stem.Data.SqlDbType.[Char], 0, System~dulla^@204~ erDirection.Input, 0, 0, "Website", S~dulla^@204~ taRowVersion.Original, false, Nothing~dulla^@204~ )
            Me._adapter.InsertComm~dulla^@204~ tem.Data.SqlClient.SqlCommand
      ~dulla^@204~ pter.InsertCommand.Connection = Me.Co~dulla^@204~          Me._adapter.InsertCommand.Co~dulla^@204~ INSERT INTO [dbo].[Supplier] ([Suppli~dulla^@204~ ierName], [Address], [City], [C"& _ ~dulla^@204~     "ountry], [Phone], [Fax], [Postal~dulla^@204~ bsite]) VALUES (@SupplierID, @Suppl"&~dulla^@204~         "ierName, @Address, @City, @C~dulla^@204~ e, @Fax, @PostalAddress, @Website);"&~dulla^@204~ oft.VisualBasic.ChrW(13)&Global.Micro~dulla^@204~ sic.ChrW(10)&"SE"& _ 
              ~dulla^@204~ ierID, SupplierName, Address, City, C~dulla^@204~ , Fax, PostalAddress"& _ 
          ~dulla^@204~ ite FROM Supplier WHERE (SupplierID =~dulla^@204~ "
            Me._adapter.InsertComm~dulla^@204~ pe = System.Data.CommandType.Text
  ~dulla^@204~ _adapter.InsertCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@Supplier~dulla^@204~ ata.SqlDbType.NVarChar, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "SupplierID", Sy~dulla^@204~ aRowVersion.Current, false, Nothing, ~dulla^@204~ 
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient~dulla^@204~ ("@SupplierName", System.Data.SqlDbTy~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ lierName", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .InsertCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@Address", System~dulla^@204~ pe.[Char], 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "Address", System.Data.DataRo~dulla^@204~ ent, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.InsertCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@City", S~dulla^@204~ lDbType.[Char], 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "City", System.Data.Data~dulla^@204~ rrent, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.InsertCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@Countr~dulla^@204~ ta.SqlDbType.[Char], 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "Country", System.D~dulla^@204~ rsion.Current, false, Nothing, "", ""~dulla^@204~        Me._adapter.InsertCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ tem.Data.SqlDbType.[Char], 0, System.~dulla^@204~ rDirection.Input, 0, 0, "Phone", Syst~dulla^@204~ owVersion.Current, false, Nothing, ""~dulla^@204~            Me._adapter.InsertCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ ystem.Data.SqlDbType.[Char], 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "Fax", Syst~dulla^@204~ owVersion.Current, false, Nothing, ""~dulla^@204~            Me._adapter.InsertCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ ddress", System.Data.SqlDbType.[Char]~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ ", System.Data.DataRowVersion.Current~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@Website", System.Data.Sq~dulla^@204~ ], 0, System.Data.ParameterDirection.~dulla^@204~ "Website", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand = New System.Data.SqlC~dulla^@204~ and
            Me._adapter.UpdateCo~dulla^@204~ ion = Me.Connection
            Me._~dulla^@204~ eCommand.CommandText = "UPDATE [dbo].~dulla^@204~ T [SupplierID] = @SupplierID, [Suppli~dulla^@204~ pplie"& _ 
                "rName, [~dulla^@204~ ddress, [City] = @City, [Country] = @~dulla^@204~ ne] = @Ph"& _ 
                "one,~dulla^@204~ , [PostalAddress] = @PostalAddress, [~dulla^@204~ ebsite WHERE "& _ 
                "~dulla^@204~ ] = @Original_SupplierID) AND ([Suppl~dulla^@204~ riginal_SupplierN"& _ 
             ~dulla^@204~ ((@IsNull_Address = 1 AND [Address] I~dulla^@204~ Address] = @Original_"& _ 
         ~dulla^@204~ ss)) AND ((@IsNull_City = 1 AND [City~dulla^@204~  ([City] = @Original_City"& _ 
     ~dulla^@204~ ) AND ((@IsNull_Country = 1 AND [Coun~dulla^@204~  OR ([Country] = @Original_Co"& _ 
 ~dulla^@204~   "untry)) AND ((@IsNull_Phone = 1 AN~dulla^@204~ NULL) OR ([Phone] = @Original_Pho"& _~dulla^@204~       "ne)) AND ([Fax] = @Original_Fa~dulla^@204~ alAddress] = @Original_PostalAddress)~dulla^@204~           " AND ([Website] = @Origina~dulla^@204~ &Global.Microsoft.VisualBasic.ChrW(13~dulla^@204~ osoft.VisualBasic.ChrW(10)&"SELECT Su~dulla^@204~ plierName, Address"& _ 
            ~dulla^@204~ Country, Phone, Fax, PostalAddress, W~dulla^@204~ upplier WHERE (Supplie"& _ 
        ~dulla^@204~ = @SupplierID)"
            Me._adap~dulla^@204~ mand.CommandType = System.Data.Comman~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ rID", System.Data.SqlDbType.NVarChar,~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "S~dulla^@204~ ystem.Data.DataRowVersion.Current, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@SupplierName", System.Data.S~dulla^@204~ r], 0, System.Data.ParameterDirection~dulla^@204~  "SupplierName", System.Data.DataRowV~dulla^@204~ t, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@Address", ~dulla^@204~ qlDbType.[Char], 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "Address", System.Data.~dulla^@204~ n.Current, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.UpdateCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Ci~dulla^@204~ ata.SqlDbType.[Char], 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "City", System.Dat~dulla^@204~ ion.Current, false, Nothing, "", "", ~dulla^@204~      Me._adapter.UpdateCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ tem.Data.SqlDbType.[Char], 0, System.~dulla^@204~ rDirection.Input, 0, 0, "Country", Sy~dulla^@204~ aRowVersion.Current, false, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ ", System.Data.SqlDbType.[Char], 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "Phone"~dulla^@204~ .DataRowVersion.Current, false, Nothi~dulla^@204~ "))
            Me._adapter.UpdateCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ ax", System.Data.SqlDbType.[Char], 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Fax"~dulla^@204~ .DataRowVersion.Current, false, Nothi~dulla^@204~ "))
            Me._adapter.UpdateCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ ostalAddress", System.Data.SqlDbType.~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ ddress", System.Data.DataRowVersion.C~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ pdateCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@Website", System.D~dulla^@204~ .[Char], 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "Website", System.Data.DataRowV~dulla^@204~ t, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@Original_S~dulla^@204~ ystem.Data.SqlDbType.NVarChar, 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "Supplier~dulla^@204~ ata.DataRowVersion.Original, false, N~dulla^@204~ ", ""))
            Me._adapter.Upda~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@Original_SupplierName", System.Dat~dulla^@204~ Char], 0, System.Data.ParameterDirect~dulla^@204~  0, "SupplierName", System.Data.DataR~dulla^@204~ ginal, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.UpdateCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@IsNull~dulla^@204~ stem.Data.SqlDbType.Int, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "Address", Syst~dulla^@204~ owVersion.Original, true, Nothing, ""~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ l_Address", System.Data.SqlDbType.[Ch~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ System.Data.DataRowVersion.Original, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@IsNull_City", System.Data.~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ City", System.Data.DataRowVersion.Ori~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@Original_City", Syst~dulla^@204~ Type.[Char], 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "City", System.Data.DataRow~dulla^@204~ nal, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.UpdateCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@IsNull_C~dulla^@204~ em.Data.SqlDbType.Int, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "Country", System~dulla^@204~ Version.Original, true, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ Country", System.Data.SqlDbType.[Char~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ stem.Data.DataRowVersion.Original, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@IsNull_Phone", System.Data.S~dulla^@204~  0, System.Data.ParameterDirection.Input, 0, 0, "Phone", System.Data.DataRowVer~dulla^@204~ , true, Nothing, "", "", ""))
      ~dulla^@204~ pter.UpdateCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@Original_Pho~dulla^@204~ ata.SqlDbType.[Char], 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "Phone", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ x", System.Data.SqlDbType.[Char], 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Fax",~dulla^@204~ DataRowVersion.Original, false, Nothi~dulla^@204~ "))
            Me._adapter.UpdateCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ riginal_PostalAddress", System.Data.S~dulla^@204~ r], 0, System.Data.ParameterDirection~dulla^@204~  "PostalAddress", System.Data.DataRow~dulla^@204~ nal, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.UpdateCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@Original~dulla^@204~ stem.Data.SqlDbType.[Char], 0, System~dulla^@204~ erDirection.Input, 0, 0, "Website", S~dulla^@204~ taRowVersion.Original, false, Nothing~dulla^@204~ )
        End Sub
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Private Sub InitConnection()
     ~dulla^@204~ nnection = New System.Data.SqlClient.~dulla^@204~ 
            Me._connection.Connecti~dulla^@204~ obal.InventoryControlSystem.My.MySett~dulla^@204~ InventoryControlSystemConnectionStrin~dulla^@204~ d Sub
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~  InitCommandCollection()
           ~dulla^@204~ ollection = New System.Data.SqlClient~dulla^@204~ ) {}
            Me._commandCollecti~dulla^@204~ ystem.Data.SqlClient.SqlCommand
    ~dulla^@204~ ommandCollection(0).Connection = Me.C~dulla^@204~           Me._commandCollection(0).Co~dulla^@204~ SELECT SupplierID, SupplierName, Addr~dulla^@204~ untry, Phone, Fax, PostalAddres"& _ ~dulla^@204~     "s, Website FROM dbo.Supplier"
 ~dulla^@204~ ._commandCollection(0).CommandType = ~dulla^@204~ ommandType.Text
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ (),  _
         System.ComponentMode~dulla^@204~ KeywordAttribute("vs.data.TableAdapte~dulla^@204~      System.ComponentModel.DataObject~dulla^@204~ te(System.ComponentModel.DataObjectMe~dulla^@204~ , true)>  _
        Public Overloads~dulla^@204~ Function Fill(ByVal dataTable As Inve~dulla^@204~ ystemDataSet1.SupplierDataTable) As I~dulla^@204~        Me.Adapter.SelectCommand = Me.~dulla^@204~ tion(0)
            If (Me.ClearBefo~dulla^@204~ ) Then
                dataTable.Cle~dulla^@204~    End If
            Dim returnValu~dulla^@204~ = Me.Adapter.Fill(dataTable)
       ~dulla^@204~ eturnValue
        End Function
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ (),  _
         System.ComponentMode~dulla^@204~ KeywordAttribute("vs.data.TableAdapte~dulla^@204~      System.ComponentModel.DataObject~dulla^@204~ te(System.ComponentModel.DataObjectMe~dulla^@204~ ect], true)>  _
        Public Overl~dulla^@204~ ble Function GetData() As InventoryCo~dulla^@204~ taSet1.SupplierDataTable
           ~dulla^@204~ electCommand = Me.CommandCollection(0~dulla^@204~   Dim dataTable As InventoryControlSy~dulla^@204~ SupplierDataTable = New InventoryCont~dulla^@204~ Set1.SupplierDataTable
            M~dulla^@204~ l(dataTable)
            Return data~dulla^@204~   End Function
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute(),  ~dulla^@204~ ystem.ComponentModel.Design.HelpKeywo~dulla^@204~ vs.data.TableAdapter")>  _
        P~dulla^@204~ ds Overridable Function Update(ByVal ~dulla^@204~ InventoryControlSystemDataSet1.Suppli~dulla^@204~ As Integer
            Return Me.Ada~dulla^@204~ ataTable)
        End Function
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ ),  _
         System.ComponentModel~dulla^@204~ eywordAttribute("vs.data.TableAdapter~dulla^@204~    Public Overloads Overridable Funct~dulla^@204~ Val dataSet As InventoryControlSystem~dulla^@204~ Integer
            Return Me.Adapte~dulla^@204~ Set, "Supplier")
        End Functio~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute(),  _
         System.Compone~dulla^@204~ n.HelpKeywordAttribute("vs.data.Table~dulla^@204~ 
        Public Overloads Overridabl~dulla^@204~ date(ByVal dataRow As System.Data.Dat~dulla^@204~ ger
            Return Me.Adapter.Up~dulla^@204~ em.Data.DataRow() {dataRow})
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute(),  _
         Sy~dulla^@204~ tModel.Design.HelpKeywordAttribute("v~dulla^@204~ dapter")>  _
        Public Overload~dulla^@204~  Function Update(ByVal dataRows() As ~dulla^@204~ ataRow) As Integer
            Retur~dulla^@204~ Update(dataRows)
        End Functio~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute(),  _
         System.Compone~dulla^@204~ n.HelpKeywordAttribute("vs.data.Table~dulla^@204~ 
         System.ComponentModel.Data~dulla^@204~ ttribute(System.ComponentModel.DataOb~dulla^@204~ e.Delete, true)>  _
        Public O~dulla^@204~ ridable Function Delete(ByVal Origina~dulla^@204~ As String, ByVal Original_SupplierNam~dulla^@204~ ByVal Original_Address As String, ByV~dulla^@204~ ity As String, ByVal Original_Country~dulla^@204~ yVal Original_Phone As String, ByVal ~dulla^@204~ As String, ByVal Original_PostalAddre~dulla^@204~  ByVal Original_Website As String) As~dulla^@204~          If (Original_SupplierID Is N~dulla^@204~ 
                Throw New System.Arg~dulla^@204~ ption("Original_SupplierID")
       ~dulla^@204~               Me.Adapter.DeleteComman~dulla^@204~ 0).Value = CType(Original_SupplierID,~dulla^@204~         End If
            If (Origi~dulla^@204~ ame Is Nothing) Then
               ~dulla^@204~ stem.ArgumentNullException("Original_~dulla^@204~ )
            Else
                ~dulla^@204~ leteCommand.Parameters(1).Value = CTy~dulla^@204~ upplierName,String)
            End ~dulla^@204~    If (Original_Address Is Nothing) T~dulla^@204~         Me.Adapter.DeleteCommand.Para~dulla^@204~ ue = CType(1,Object)
               ~dulla^@204~ eleteCommand.Parameters(3).Value = Sy~dulla^@204~ alue
            Else
             ~dulla^@204~ .DeleteCommand.Parameters(2).Value = ~dulla^@204~ t)
                Me.Adapter.Delete~dulla^@204~ eters(3).Value = CType(Original_Addre~dulla^@204~            End If
            If (Or~dulla^@204~ s Nothing) Then
                Me.A~dulla^@204~ Command.Parameters(4).Value = CType(1~dulla^@204~              Me.Adapter.DeleteCommand~dulla^@204~ ).Value = System.DBNull.Value
      ~dulla^@204~                Me.Adapter.DeleteComma~dulla^@204~ (4).Value = CType(0,Object)
        ~dulla^@204~ apter.DeleteCommand.Parameters(5).Val~dulla^@204~ iginal_City,String)
            End ~dulla^@204~    If (Original_Country Is Nothing) T~dulla^@204~         Me.Adapter.DeleteCommand.Para~dulla^@204~ ue = CType(1,Object)
               ~dulla^@204~ eleteCommand.Parameters(7).Value = Sy~dulla^@204~ alue
            Else
             ~dulla^@204~ .DeleteCommand.Parameters(6).Value = ~dulla^@204~ t)
                Me.Adapter.Delete~dulla^@204~ eters(7).Value = CType(Original_Count~dulla^@204~            End If
            If (Or~dulla^@204~ Is Nothing) Then
                Me.~dulla^@204~ eCommand.Parameters(8).Value = CType(~dulla^@204~               Me.Adapter.DeleteComman~dulla^@204~ 9).Value = System.DBNull.Value
     ~dulla^@204~                 Me.Adapter.DeleteComm~dulla^@204~ s(8).Value = CType(0,Object)
       ~dulla^@204~ dapter.DeleteCommand.Parameters(9).Va~dulla^@204~ riginal_Phone,String)
            En~dulla^@204~      If (Original_Fax Is Nothing) The~dulla^@204~       Throw New System.ArgumentNullEx~dulla^@204~ inal_Fax")
            Else
       ~dulla^@204~ dapter.DeleteCommand.Parameters(10).V~dulla^@204~ Original_Fax,String)
            End~dulla^@204~     If (Original_PostalAddress Is Not~dulla^@204~                Throw New System.ArgumentNullException("Original_PostalAddress")~dulla^@204~  Else
                Me.Adapter.Del~dulla^@204~ rameters(11).Value = CType(Original_P~dulla^@204~ String)
            End If
        ~dulla^@204~ nal_Website Is Nothing) Then
       ~dulla^@204~ w New System.ArgumentNullException("O~dulla^@204~ te")
            Else
             ~dulla^@204~ .DeleteCommand.Parameters(12).Value =~dulla^@204~ al_Website,String)
            End I~dulla^@204~   Dim previousConnectionState As Syst~dulla^@204~ ctionState = Me.Adapter.DeleteCommand~dulla^@204~ tate
            If ((Me.Adapter.Del~dulla^@204~ nnection.State And System.Data.Connec~dulla^@204~ n)  _
                        <> Sys~dulla^@204~ ectionState.Open) Then
             ~dulla^@204~ .DeleteCommand.Connection.Open
     ~dulla^@204~ 
            Try 
                D~dulla^@204~ e As Integer = Me.Adapter.DeleteComma~dulla^@204~ Query
                Return returnV~dulla^@204~      Finally
                If (pre~dulla^@204~ onState = System.Data.ConnectionState~dulla^@204~ 
                    Me.Adapter.Dele~dulla^@204~ nection.Close
                End If~dulla^@204~  End Try
        End Function
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ ,  _
         System.ComponentModel.~dulla^@204~ ywordAttribute("vs.data.TableAdapter"~dulla^@204~    System.ComponentModel.DataObjectMe~dulla^@204~ (System.ComponentModel.DataObjectMeth~dulla^@204~ , true)>  _
        Public Overloads~dulla^@204~ Function Insert(ByVal SupplierID As S~dulla^@204~ SupplierName As String, ByVal Address~dulla^@204~ yVal City As String, ByVal Country As~dulla^@204~ l Phone As String, ByVal Fax As Strin~dulla^@204~ alAddress As String, ByVal Website As~dulla^@204~ nteger
            If (SupplierID Is~dulla^@204~ n
                Throw New System.A~dulla^@204~ ception("SupplierID")
            El~dulla^@204~        Me.Adapter.InsertCommand.Param~dulla^@204~ e = CType(SupplierID,String)
       ~dulla^@204~             If (SupplierName Is Nothi~dulla^@204~              Throw New System.Argumen~dulla^@204~ n("SupplierName")
            Else
~dulla^@204~    Me.Adapter.InsertCommand.Parameter~dulla^@204~ CType(SupplierName,String)
         ~dulla^@204~           If (Address Is Nothing) The~dulla^@204~       Me.Adapter.InsertCommand.Parame~dulla^@204~  = System.DBNull.Value
            E~dulla^@204~         Me.Adapter.InsertCommand.Para~dulla^@204~ ue = CType(Address,String)
         ~dulla^@204~           If (City Is Nothing) Then
~dulla^@204~    Me.Adapter.InsertCommand.Parameter~dulla^@204~ System.DBNull.Value
            Else~dulla^@204~      Me.Adapter.InsertCommand.Paramet~dulla^@204~ = CType(City,String)
            End~dulla^@204~     If (Country Is Nothing) Then
   ~dulla^@204~ Me.Adapter.InsertCommand.Parameters(4~dulla^@204~ tem.DBNull.Value
            Else
 ~dulla^@204~   Me.Adapter.InsertCommand.Parameters~dulla^@204~ Type(Country,String)
            End~dulla^@204~     If (Phone Is Nothing) Then
     ~dulla^@204~ .Adapter.InsertCommand.Parameters(5).~dulla^@204~ m.DBNull.Value
            Else
   ~dulla^@204~ Me.Adapter.InsertCommand.Parameters(5~dulla^@204~ pe(Phone,String)
            End If~dulla^@204~ If (Fax Is Nothing) Then
           ~dulla^@204~ w System.ArgumentNullException("Fax")~dulla^@204~  Else
                Me.Adapter.Ins~dulla^@204~ rameters(6).Value = CType(Fax,String)~dulla^@204~  End If
            If (PostalAddres~dulla^@204~  Then
                Throw New Syst~dulla^@204~ llException("PostalAddress")
       ~dulla^@204~               Me.Adapter.InsertComman~dulla^@204~ 7).Value = CType(PostalAddress,String~dulla^@204~   End If
            If (Website Is ~dulla^@204~ 
                Throw New System.Ar~dulla^@204~ eption("Website")
            Else
~dulla^@204~    Me.Adapter.InsertCommand.Parameter~dulla^@204~ CType(Website,String)
            En~dulla^@204~      Dim previousConnectionState As S~dulla^@204~ nnectionState = Me.Adapter.InsertComm~dulla^@204~ n.State
            If ((Me.Adapter.~dulla^@204~ .Connection.State And System.Data.Con~dulla^@204~ Open)  _
                        <> ~dulla^@204~ onnectionState.Open) Then
          ~dulla^@204~ ter.InsertCommand.Connection.Open
  ~dulla^@204~  If
            Try 
              ~dulla^@204~ alue As Integer = Me.Adapter.InsertCo~dulla^@204~ NonQuery
                Return retu~dulla^@204~         Finally
                If (~dulla^@204~ ctionState = System.Data.ConnectionSt~dulla^@204~ hen
                    Me.Adapter.I~dulla^@204~ Connection.Close
                End~dulla^@204~     End Try
        End Function
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e(),  _
         System.ComponentMod~dulla^@204~ pKeywordAttribute("vs.data.TableAdapt~dulla^@204~       System.ComponentModel.DataObjec~dulla^@204~ ute(System.ComponentModel.DataObjectM~dulla^@204~ ate, true)>  _
        Public Overlo~dulla^@204~ le Function Update( _
              ~dulla^@204~ upplierID As String,  _
            ~dulla^@204~  SupplierName As String,  _
        ~dulla^@204~ yVal Address As String,  _
         ~dulla^@204~ Val City As String,  _
             ~dulla^@204~ Country As String,  _
              ~dulla^@204~ hone As String,  _
                 ~dulla^@204~ As String,  _
                    By~dulla^@204~ ress As String,  _
                 ~dulla^@204~ ite As String,  _
                  ~dulla^@204~ nal_SupplierID As String,  _
       ~dulla^@204~ ByVal Original_SupplierName As String~dulla^@204~              ByVal Original_Address A~dulla^@204~ 
                    ByVal Original_C~dulla^@204~ ,  _
                    ByVal Origi~dulla^@204~ s String,  _
                    ByV~dulla^@204~ hone As String,  _
                 ~dulla^@204~ inal_Fax As String,  _
             ~dulla^@204~ Original_PostalAddress As String,  _~dulla^@204~         ByVal Original_Website As Str~dulla^@204~ er
            If (SupplierID Is Not~dulla^@204~                Throw New System.Argum~dulla^@204~ ion("SupplierID")
            Else
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~ CType(SupplierID,String)
           ~dulla^@204~         If (SupplierName Is Nothing) ~dulla^@204~          Throw New System.ArgumentNul~dulla^@204~ upplierName")
            Else
    ~dulla^@204~ e.Adapter.UpdateCommand.Parameters(1)~dulla^@204~ e(SupplierName,String)
            E~dulla^@204~       If (Address Is Nothing) Then
 ~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ ystem.DBNull.Value
            Else~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~  CType(Address,String)
            E~dulla^@204~       If (City Is Nothing) Then
    ~dulla^@204~ e.Adapter.UpdateCommand.Parameters(3)~dulla^@204~ em.DBNull.Value
            Else
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ ype(City,String)
            End If~dulla^@204~ If (Country Is Nothing) Then
       ~dulla^@204~ dapter.UpdateCommand.Parameters(4).Va~dulla^@204~ DBNull.Value
            Else
     ~dulla^@204~ .Adapter.UpdateCommand.Parameters(4).~dulla^@204~ (Country,String)
            End If~dulla^@204~ If (Phone Is Nothing) Then
         ~dulla^@204~ pter.UpdateCommand.Parameters(5).Valu~dulla^@204~ Null.Value
            Else
       ~dulla^@204~ dapter.UpdateCommand.Parameters(5).Va~dulla^@204~ hone,String)
            End If
   ~dulla^@204~ Fax Is Nothing) Then
               ~dulla^@204~ stem.ArgumentNullException("Fax")
  ~dulla^@204~ e
                Me.Adapter.UpdateC~dulla^@204~ ters(6).Value = CType(Fax,String)
  ~dulla^@204~  If
            If (PostalAddress Is~dulla^@204~ n
                Throw New System.A~dulla^@204~ ception("PostalAddress")
           ~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ alue = CType(PostalAddress,String)
 ~dulla^@204~ d If
            If (Website Is Noth~dulla^@204~               Throw New System.Argume~dulla^@204~ on("Website")
            Else
    ~dulla^@204~ e.Adapter.UpdateCommand.Parameters(8)~dulla^@204~ e(Website,String)
            End If
            If (Original_SupplierID Is N~dulla^@204~ 
                Throw New System.Arg~dulla^@204~ ption("Original_SupplierID")
       ~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 9).Value = CType(Original_SupplierID,~dulla^@204~         End If
            If (Origi~dulla^@204~ ame Is Nothing) Then
               ~dulla^@204~ stem.ArgumentNullException("Original_~dulla^@204~ )
            Else
                ~dulla^@204~ dateCommand.Parameters(10).Value = CT~dulla^@204~ SupplierName,String)
            End~dulla^@204~     If (Original_Address Is Nothing) ~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ alue = CType(1,Object)
             ~dulla^@204~ .UpdateCommand.Parameters(12).Value =~dulla^@204~ l.Value
            Else
          ~dulla^@204~ ter.UpdateCommand.Parameters(11).Valu~dulla^@204~ bject)
                Me.Adapter.Up~dulla^@204~ arameters(12).Value = CType(Original_~dulla^@204~ g)
            End If
            I~dulla^@204~ ity Is Nothing) Then
               ~dulla^@204~ pdateCommand.Parameters(13).Value = C~dulla^@204~ )
                Me.Adapter.UpdateC~dulla^@204~ ters(14).Value = System.DBNull.Value~dulla^@204~ Else
                Me.Adapter.Upda~dulla^@204~ ameters(13).Value = CType(0,Object)
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~  CType(Original_City,String)
       ~dulla^@204~             If (Original_Country Is N~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(15).Value = CType(1,Object)
     ~dulla^@204~ .Adapter.UpdateCommand.Parameters(16)~dulla^@204~ em.DBNull.Value
            Else
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ Type(0,Object)
                Me.Ad~dulla^@204~ ommand.Parameters(16).Value = CType(O~dulla^@204~ ry,String)
            End If
     ~dulla^@204~ iginal_Phone Is Nothing) Then
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(17).~dulla^@204~ (1,Object)
                Me.Adapte~dulla^@204~ nd.Parameters(18).Value = System.DBNu~dulla^@204~          Else
                Me.Ada~dulla^@204~ mmand.Parameters(17).Value = CType(0,~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ ).Value = CType(Original_Phone,String~dulla^@204~   End If
            If (Original_Fa~dulla^@204~  Then
                Throw New Syst~dulla^@204~ llException("Original_Fax")
        ~dulla^@204~              Me.Adapter.UpdateCommand~dulla^@204~ 9).Value = CType(Original_Fax,String)~dulla^@204~  End If
            If (Original_Pos~dulla^@204~  Nothing) Then
                Throw~dulla^@204~ rgumentNullException("Original_Postal~dulla^@204~           Else
                Me.Ad~dulla^@204~ ommand.Parameters(20).Value = CType(O~dulla^@204~ lAddress,String)
            End If~dulla^@204~ If (Original_Website Is Nothing) Then~dulla^@204~      Throw New System.ArgumentNullExc~dulla^@204~ nal_Website")
            Else
    ~dulla^@204~ e.Adapter.UpdateCommand.Parameters(21~dulla^@204~ pe(Original_Website,String)
        ~dulla^@204~            Dim previousConnectionStat~dulla^@204~ ata.ConnectionState = Me.Adapter.Upda~dulla^@204~ nection.State
            If ((Me.Ad~dulla^@204~ ommand.Connection.State And System.Da~dulla^@204~ State.Open)  _
                     ~dulla^@204~ Data.ConnectionState.Open) Then
    ~dulla^@204~ e.Adapter.UpdateCommand.Connection.Op~dulla^@204~    End If
            Try 
        ~dulla^@204~ eturnValue As Integer = Me.Adapter.Up~dulla^@204~ xecuteNonQuery
                Retur~dulla^@204~ 
            Finally
              ~dulla^@204~ sConnectionState = System.Data.Connec~dulla^@204~ sed) Then
                    Me.Ada~dulla^@204~ mmand.Connection.Close
             ~dulla^@204~           End Try
        End Function
    End Class
End Namespace
