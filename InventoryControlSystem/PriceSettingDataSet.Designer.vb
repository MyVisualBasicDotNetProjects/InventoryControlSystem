'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.312
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("PriceSettingDataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class PriceSettingDataSet
    Inherits System.Data.DataSet
    
    Private tableViewPriceSetting As ViewPriceSettingDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ViewPriceSetting")) Is Nothing) Then
                MyBase.Tables.Add(New ViewPriceSettingDataTable(ds.Tables("ViewPriceSetting")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ViewPriceSetting() As ViewPriceSettingDataTable
        Get
            Return Me.tableViewPriceSetting
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As PriceSettingDataSet = CType(MyBase.Clone,PriceSettingDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ViewPriceSetting")) Is Nothing) Then
                MyBase.Tables.Add(New ViewPriceSettingDataTable(ds.Tables("ViewPriceSetting")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableViewPriceSetting = CType(MyBase.Tables("ViewPriceSetting"),ViewPriceSettingDataTable)
        If (initTable = true) Then
        ~dulla^@204~ ~dulla^@204~ riceSetting) Is Nothing) Then
      ~dulla^@204~ tableViewPriceSetting.InitVars
     ~dulla^@204~ 
        End If
    End Sub
    
~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~  Private Sub InitClass()
        Me.~dulla^@204~  "PriceSettingDataSet"
        Me.Pr~dulla^@204~       Me.Namespace = "http://tempuri.~dulla^@204~ ingDataSet.xsd"
        Me.EnforceCo~dulla^@204~ rue
        Me.SchemaSerializationMo~dulla^@204~ ata.SchemaSerializationMode.IncludeSc~dulla^@204~  Me.tableViewPriceSetting = New ViewP~dulla^@204~ taTable
        MyBase.Tables.Add(Me~dulla^@204~ ceSetting)
    End Sub
    
    <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ te Function ShouldSerializeViewPriceS~dulla^@204~ oolean
        Return false
    End~dulla^@204~   
    <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
    Private Sub SchemaC~dulla^@204~ sender As Object, ByVal e As System.C~dulla^@204~ .CollectionChangeEventArgs)
        ~dulla^@204~ = System.ComponentModel.CollectionCha~dulla^@204~ ove) Then
            Me.InitVars
 ~dulla^@204~ 
    End Sub
    
    <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
    Pu~dulla^@204~ unction GetTypedDataSetSchema(ByVal x~dulla^@204~ ml.Schema.XmlSchemaSet) As System.Xml~dulla^@204~ hemaComplexType
        Dim ds As Pr~dulla^@204~ aSet = New PriceSettingDataSet
     ~dulla^@204~ s System.Xml.Schema.XmlSchemaComplexT~dulla^@204~ tem.Xml.Schema.XmlSchemaComplexType
~dulla^@204~ equence As System.Xml.Schema.XmlSchem~dulla^@204~ ew System.Xml.Schema.XmlSchemaSequenc~dulla^@204~ .Add(ds.GetSchemaSerializable)
     ~dulla^@204~  System.Xml.Schema.XmlSchemaAny = New~dulla^@204~ chema.XmlSchemaAny
        any.Names~dulla^@204~ espace
        sequence.Items.Add(an~dulla^@204~ ype.Particle = sequence
        Retu~dulla^@204~ End Function
    
    Public Delega~dulla^@204~ iceSettingRowChangeEventHandler(ByVal~dulla^@204~ ject, ByVal e As ViewPriceSettingRowC~dulla^@204~     
    <System.CodeDom.Compiler.Ge~dulla^@204~ tribute("System.Data.Design.TypedData~dulla^@204~ , "2.0.0.0"),  _
     System.Seriali~dulla^@204~      System.Xml.Serialization.XmlSche~dulla^@204~ ribute("GetTypedTableSchema")>  _
  ~dulla^@204~ lic Class ViewPriceSettingDataTable
~dulla^@204~ its System.Data.DataTable
        Im~dulla^@204~ em.Collections.IEnumerable
        ~dulla^@204~ ate columnPartNo As System.Data.DataC~dulla^@204~   
        Private columnDescription~dulla^@204~ ta.DataColumn
        
        Priv~dulla^@204~ tCost As System.Data.DataColumn
    ~dulla^@204~  Private columnTotalQuantity As Syste~dulla^@204~ lumn
        
        Private colum~dulla^@204~ 1 As System.Data.DataColumn
        ~dulla^@204~ vate columnSellingPrice2 As System.Da~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ 
            MyBase.New
           ~dulla^@204~  = "ViewPriceSetting"
            Me~dulla^@204~            Me.InitClass
            ~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ iend Sub New(ByVal table As System.Da~dulla^@204~ 
            MyBase.New
           ~dulla^@204~  = table.TableName
            If (t~dulla^@204~ itive <> table.DataSet.CaseSensitive)~dulla^@204~           Me.CaseSensitive = table.Ca~dulla^@204~             End If
            If (t~dulla^@204~ oString <> table.DataSet.Locale.ToStr~dulla^@204~               Me.Locale = table.Local~dulla^@204~   End If
            If (table.Names~dulla^@204~ .DataSet.Namespace) Then
           ~dulla^@204~ pace = table.Namespace
            E~dulla^@204~       Me.Prefix = table.Prefix
     ~dulla^@204~ imumCapacity = table.MinimumCapacity~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~  New(ByVal info As System.Runtime.Ser~dulla^@204~ rializationInfo, ByVal context As Sys~dulla^@204~ erialization.StreamingContext)
     ~dulla^@204~ .New(info, context)
            Me.I~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c ReadOnly Property PartNoColumn() As~dulla^@204~ DataColumn
            Get
        ~dulla^@204~ n Me.columnPartNo
            End Ge~dulla^@204~ d Property
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  ReadOnly Property DescriptionColumn(~dulla^@204~ ata.DataColumn
            Get
    ~dulla^@204~ eturn Me.columnDescription
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public ReadOnly Property UnitCostC~dulla^@204~ stem.Data.DataColumn
            Get~dulla^@204~      Return Me.columnUnitCost
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public ReadOnly Property TotalQ~dulla^@204~ () As System.Data.DataColumn
       ~dulla^@204~              Return Me.columnTotalQua~dulla^@204~       End Get
        End Property
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public ReadOnly Pr~dulla^@204~ gPrice1Column() As System.Data.DataCo~dulla^@204~      Get
                Return Me.c~dulla^@204~ rice1
            End Get
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ operty SellingPrice2Column() As Syste~dulla^@204~ lumn
            Get
              ~dulla^@204~ olumnSellingPrice2
            End G~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute(),  _
~dulla^@204~ em.ComponentModel.Browsable(false)>  ~dulla^@204~ blic ReadOnly Property Count() As Int~dulla^@204~      Get
                Return Me.R~dulla^@204~           End Get
        End Proper~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Default~dulla^@204~ perty Item(ByVal index As Integer) As~dulla^@204~ tingRow
            Get
           ~dulla^@204~ Type(Me.Rows(index),ViewPriceSettingR~dulla^@204~     End Get
        End Property
  ~dulla^@204~    Public Event ViewPriceSettingRowCh~dulla^@204~ wPriceSettingRowChangeEventHandler
 ~dulla^@204~     Public Event ViewPriceSettingRowC~dulla^@204~ wPriceSettingRowChangeEventHandler
 ~dulla^@204~     Public Event ViewPriceSettingRowD~dulla^@204~ ewPriceSettingRowChangeEventHandler
~dulla^@204~      Public Event ViewPriceSettingRow~dulla^@204~ ewPriceSettingRowChangeEventHandler
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Overloads S~dulla^@204~ ceSettingRow(ByVal row As ViewPriceSe~dulla^@204~           Me.Rows.Add(row)
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Ove~dulla^@204~ on AddViewPriceSettingRow(ByVal PartN~dulla^@204~ ByVal Description As String, ByVal Un~dulla^@204~ imal, ByVal TotalQuantity As Integer,~dulla^@204~ gPrice1 As Double, ByVal SellingPrice~dulla^@204~ As ViewPriceSettingRow
            D~dulla^@204~ ceSettingRow As ViewPriceSettingRow =~dulla^@204~ Row,ViewPriceSettingRow)
           ~dulla^@204~ SettingRow.ItemArray = New Object() {~dulla^@204~ iption, UnitCost, TotalQuantity, Sell~dulla^@204~ llingPrice2}
            Me.Rows.Add~dulla^@204~ SettingRow)
            Return rowVi~dulla^@204~ gRow
        End Function
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Function FindByPartN~dulla^@204~ o As String) As ViewPriceSettingRow
~dulla^@204~ eturn CType(Me.Rows.Find(New Object()~dulla^@204~ ewPriceSettingRow)
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Overri~dulla^@204~ n GetEnumerator() As System.Collectio~dulla^@204~ r Implements System.Collections.IEnum~dulla^@204~ merator
            Return Me.Rows.G~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Functio~dulla^@204~ System.Data.DataTable
            Di~dulla^@204~ PriceSettingDataTable = CType(MyBase.~dulla^@204~ ceSettingDataTable)
            cln.~dulla^@204~          Return cln
        End Func~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Protected Ov~dulla^@204~ ion CreateInstance() As System.Data.D~dulla^@204~          Return New ViewPriceSettingD~dulla^@204~      End Function
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Friend Sub InitVars()
            M~dulla^@204~ o = MyBase.Columns("PartNo")
       ~dulla^@204~ nDescription = MyBase.Columns("Descri~dulla^@204~         Me.columnUnitCost = MyBase.Co~dulla^@204~ st")
            Me.columnTotalQuant~dulla^@204~ Columns("TotalQuantity")
           ~dulla^@204~ lingPrice1 = MyBase.Columns("SellingP~dulla^@204~         Me.columnSellingPrice2 = MyBa~dulla^@204~ ellingPrice2")
        End Sub
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Private Sub InitClass(~dulla^@204~   Me.columnPartNo = New System.Data.D~dulla^@204~ rtNo", GetType(String), Nothing, Syst~dulla^@204~ ngType.Element)
            MyBase.C~dulla^@204~ .columnPartNo)
            Me.column~dulla^@204~  New System.Data.DataColumn("Descript~dulla^@204~ (String), Nothing, System.Data.Mappin~dulla^@204~ )
            MyBase.Columns.Add(Me.~dulla^@204~ tion)
            Me.columnUnitCost ~dulla^@204~ Data.DataColumn("UnitCost", GetType(D~dulla^@204~ ing, System.Data.MappingType.Element)~dulla^@204~  MyBase.Columns.Add(Me.columnUnitCost~dulla^@204~   Me.columnTotalQuantity = New System~dulla^@204~ umn("TotalQuantity", GetType(Integer)~dulla^@204~ stem.Data.MappingType.Element)
     ~dulla^@204~ .Columns.Add(Me.columnTotalQuantity)~dulla^@204~ Me.columnSellingPrice1 = New System.D~dulla^@204~ n("SellingPrice1", GetType(Double), N~dulla^@204~ m.Data.MappingType.Element)
        ~dulla^@204~ lumns.Add(Me.columnSellingPrice1)
  ~dulla^@204~ columnSellingPrice2 = New System.Data~dulla^@204~ SellingPrice2", GetType(Double), Noth~dulla^@204~ ata.MappingType.Element)
           ~dulla^@204~ ns.Add(Me.columnSellingPrice2)
     ~dulla^@204~ straints.Add(New System.Data.UniqueCo~dulla^@204~ straint1", New System.Data.DataColumn~dulla^@204~ PartNo}, true))
            Me.colum~dulla^@204~ DBNull = false
            Me.column~dulla^@204~  = true
            Me.columnPartNo.~dulla^@204~ 0
            Me.columnDescription.A~dulla^@204~ false
            Me.columnDescripti~dulla^@204~ = 20
        End Sub
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Function NewViewPriceSett~dulla^@204~ iewPriceSettingRow
            Retur~dulla^@204~ wRow,ViewPriceSettingRow)
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Protec~dulla^@204~  Function NewRowFromBuilder(ByVal bui~dulla^@204~ m.Data.DataRowBuilder) As System.Data~dulla^@204~          Return New ViewPriceSettingR~dulla^@204~         End Function
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Protected Overrides Function GetR~dulla^@204~ ystem.Type
            Return GetTyp~dulla^@204~ ttingRow)
        End Function
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Protected Overrides Su~dulla^@204~ d(ByVal e As System.Data.DataRowChang~dulla^@204~             MyBase.OnRowChanged(e)
 ~dulla^@204~  (Not (Me.ViewPriceSettingRowChangedE~dulla^@204~ ing) Then
                RaiseEvent~dulla^@204~ tingRowChanged(Me, New ViewPriceSetti~dulla^@204~ ent(CType(e.Row,ViewPriceSettingRow),~dulla^@204~             End If
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Protected Override~dulla^@204~ anging(ByVal e As System.Data.DataRow~dulla^@204~ gs)
            MyBase.OnRowChanging~dulla^@204~     If (Not (Me.ViewPriceSettingRowCh~dulla^@204~ Is Nothing) Then
                Rai~dulla^@204~ riceSettingRowChanging(Me, New ViewPr~dulla^@204~ ChangeEvent(CType(e.Row,ViewPriceSett~dulla^@204~ tion))
            End If
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Protected ~dulla^@204~  OnRowDeleted(ByVal e As System.Data.~dulla^@204~ EventArgs)
            MyBase.OnRowD~dulla^@204~           If (Not (Me.ViewPriceSettin~dulla^@204~ ent) Is Nothing) Then
              ~dulla^@204~ ViewPriceSettingRowDeleted(Me, New Vi~dulla^@204~ gRowChangeEvent(CType(e.Row,ViewPrice~dulla^@204~ e.Action))
            End If
     ~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Protec~dulla^@204~  Sub OnRowDeleting(ByVal e As System.~dulla^@204~ hangeEventArgs)
            MyBase.O~dulla^@204~ e)
            If (Not (Me.ViewPrice~dulla^@204~ etingEvent) Is Nothing) Then
       ~dulla^@204~ eEvent ViewPriceSettingRowDeleting(Me~dulla^@204~ ceSettingRowChangeEvent(CType(e.Row,V~dulla^@204~ ngRow), e.Action))
            End I~dulla^@204~ d Sub
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ RemoveViewPriceSettingRow(ByVal row A~dulla^@204~ ttingRow)
            Me.Rows.Remove~dulla^@204~   End Sub
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Shared Function GetTypedTableSchema(B~dulla^@204~ stem.Xml.Schema.XmlSchemaSet) As Syst~dulla^@204~ .XmlSchemaComplexType
            Di~dulla^@204~ tem.Xml.Schema.XmlSchemaComplexType =~dulla^@204~ ml.Schema.XmlSchemaComplexType
     ~dulla^@204~ quence As System.Xml.Schema.XmlSchema~dulla^@204~ w System.Xml.Schema.XmlSchemaSequence~dulla^@204~  Dim ds As PriceSettingDataSet = New ~dulla^@204~ ataSet
            xs.Add(ds.GetSche~dulla^@204~ e)
            Dim any1 As System.Xm~dulla^@204~ chemaAny = New System.Xml.Schema.XmlS~dulla^@204~          any1.Namespace = "http://www~dulla^@204~ XMLSchema"
            any1.MinOccur~dulla^@204~ al(0)
            any1.MaxOccurs = D~dulla^@204~ ue
            any1.ProcessContents ~dulla^@204~ Schema.XmlSchemaContentProcessing.Lax~dulla^@204~  sequence.Items.Add(any1)
          ~dulla^@204~  System.Xml.Schema.XmlSchemaAny = New~dulla^@204~ chema.XmlSchemaAny
            any2.~dulla^@204~ urn:schemas-microsoft-com:xml-diffgra~dulla^@204~       any2.MinOccurs = New Decimal(1)~dulla^@204~  any2.ProcessContents = System.Xml.Sc~dulla^@204~ aContentProcessing.Lax
            s~dulla^@204~ .Add(any2)
            Dim attribute~dulla^@204~ ml.Schema.XmlSchemaAttribute = New Sy~dulla^@204~ ma.XmlSchemaAttribute
            at~dulla^@204~  = "namespace"
            attribute~dulla^@204~ = ds.Namespace
            type.Attr~dulla^@204~ tribute1)
            Dim attribute2~dulla^@204~ l.Schema.XmlSchemaAttribute = New Sys~dulla^@204~ a.XmlSchemaAttribute
            att~dulla^@204~ = "tableTypeName"
            attrib~dulla^@204~ ue = "ViewPriceSettingDataTable"
   ~dulla^@204~ .Attributes.Add(attribute2)
        ~dulla^@204~ icle = sequence
            Return t~dulla^@204~ End Function
    End Class
    
  ~dulla^@204~ eDom.Compiler.GeneratedCodeAttribute(~dulla^@204~ Design.TypedDataSetGenerator", "2.0.0~dulla^@204~  Partial Public Class ViewPriceSettin~dulla^@204~  Inherits System.Data.DataRow
      ~dulla^@204~ rivate tableViewPriceSetting As ViewP~dulla^@204~ taTable
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ b New(ByVal rb As System.Data.DataRow~dulla^@204~          MyBase.New(rb)
            ~dulla^@204~ riceSetting = CType(Me.Table,ViewPric~dulla^@204~ able)
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Property PartNo() As Str~dulla^@204~     Get
                Return CType~dulla^@204~ iewPriceSetting.PartNoColumn),String)~dulla^@204~  End Get
            Set
          ~dulla^@204~ ableViewPriceSetting.PartNoColumn) = ~dulla^@204~       End Set
        End Property
~dulla^@204~      <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Pro~dulla^@204~ tion() As String
            Get
  ~dulla^@204~  Return CType(Me(Me.tableViewPriceSet~dulla^@204~ ionColumn),String)
            End G~dulla^@204~    Set
                Me(Me.tableVi~dulla^@204~ g.DescriptionColumn) = value
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Property UnitCost() As De~dulla^@204~       Get
                Try 
    ~dulla^@204~    Return CType(Me(Me.tableViewPriceS~dulla^@204~ stColumn),Decimal)
                C~dulla^@204~ tem.InvalidCastException
           ~dulla^@204~ w New System.Data.StrongTypingExcepti~dulla^@204~  for column 'UnitCost' in table 'View~dulla^@204~  is DBNull.", e)
                End~dulla^@204~      End Get
            Set
      ~dulla^@204~ Me.tableViewPriceSetting.UnitCostColu~dulla^@204~             End Set
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Prope~dulla^@204~ tity() As Integer
            Get
 ~dulla^@204~   Try 
                    Return CT~dulla^@204~ leViewPriceSetting.TotalQuantityColum~dulla^@204~                 Catch e As System.Inv~dulla^@204~ tion
                    Throw New S~dulla^@204~ rongTypingException("The value for co~dulla^@204~ antity' in table 'ViewPriceSetting' i~dulla^@204~ )
                End Try
         ~dulla^@204~            Set
                Me(Me~dulla^@204~ ceSetting.TotalQuantityColumn) = valu~dulla^@204~   End Set
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Property Sellin~dulla^@204~ Double
            Get
            ~dulla^@204~                  Return CType(Me(Me.t~dulla^@204~ Setting.SellingPrice1Column),Double)~dulla^@204~     Catch e As System.InvalidCastExce~dulla^@204~               Throw New System.Data.S~dulla^@204~ ception("The value for column 'Sellin~dulla^@204~ able 'ViewPriceSetting' is DBNull.", ~dulla^@204~        End Try
            End Get
~dulla^@204~ et
                Me(Me.tableViewPr~dulla^@204~ llingPrice1Column) = value
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Property SellingPrice2() As~dulla^@204~         Get
                Try 
  ~dulla^@204~      Return CType(Me(Me.tableViewPric~dulla^@204~ ingPrice2Column),Double)
           ~dulla^@204~ As System.InvalidCastException
     ~dulla^@204~   Throw New System.Data.StrongTypingE~dulla^@204~  value for column 'SellingPrice2' in ~dulla^@204~ iceSetting' is DBNull.", e)
        ~dulla^@204~ ry
            End Get
            ~dulla^@204~         Me(Me.tableViewPriceSetting.S~dulla^@204~ olumn) = value
            End Set
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ nction IsUnitCostNull() As Boolean
 ~dulla^@204~ turn Me.IsNull(Me.tableViewPriceSetti~dulla^@204~ lumn)
        End Function
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Sub SetUnitCostNull~dulla^@204~    Me(Me.tableViewPriceSetting.UnitCo~dulla^@204~ ystem.Convert.DBNull
        End Sub~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Function ~dulla^@204~ tyNull() As Boolean
            Retu~dulla^@204~ Me.tableViewPriceSetting.TotalQuantit~dulla^@204~      End Function
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Sub SetTotalQuantityNull()
 ~dulla^@204~ (Me.tableViewPriceSetting.TotalQuanti~dulla^@204~ ystem.Convert.DBNull
        End Sub~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Function ~dulla^@204~ e1Null() As Boolean
            Retu~dulla^@204~ Me.tableViewPriceSetting.SellingPrice~dulla^@204~      End Function
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Sub SetSellingPrice1Null()
 ~dulla^@204~ (Me.tableViewPriceSetting.SellingPric~dulla^@204~ ystem.Convert.DBNull
        End Sub~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Function ~dulla^@204~ e2Null() As Boolean
            Retu~dulla^@204~ Me.tableViewPriceSetting.SellingPrice~dulla^@204~      End Function
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Sub SetSellingPrice2Null()
 ~dulla^@204~ (Me.tableViewPriceSetting.SellingPric~dulla^@204~ ystem.Convert.DBNull
        End Sub~dulla^@204~ ss
    
    <System.CodeDom.Compile~dulla^@204~ deAttribute("System.Data.Design.Typed~dulla^@204~ tor", "2.0.0.0")>  _
    Public Clas~dulla^@204~ ttingRowChangeEvent
        Inherits~dulla^@204~ Args
        
        Private event~dulla^@204~ iceSettingRow
        
        Priv~dulla^@204~ on As System.Data.DataRowAction
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Sub New(ByVal r~dulla^@204~ ceSettingRow, ByVal action As System.~dulla^@204~ ction)
            MyBase.New
     ~dulla^@204~ ntRow = row
            Me.eventActi~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic ReadOnly Property Row() As View~dulla^@204~ ow
            Get
                ~dulla^@204~ ntRow
            End Get
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ operty Action() As System.Data.DataRo~dulla^@204~         Get
                Return M~dulla^@204~ 
            End Get
        End Pr~dulla^@204~ nd Class
End Class

Namespace Pric~dulla^@204~ etTableAdapters
    
    <System.Co~dulla^@204~ r.GeneratedCodeAttribute("System.Data~dulla^@204~ DataSetGenerator", "2.0.0.0"),  _
  ~dulla^@204~ ponentModel.DesignerCategoryAttribute~dulla^@204~ 
     System.ComponentModel.ToolboxIt~dulla^@204~ 
     System.ComponentModel.DataObjec~dulla^@204~ ue),  _
     System.ComponentModel.D~dulla^@204~ ute("Microsoft.VSDesigner.DataSource.~dulla^@204~ dapterDesigner, Microsoft.VSDesigner"~dulla^@204~  ", Version=8.0.0.0, Culture=neutral,~dulla^@204~ en=b03f5f7f11d50a3a"),  _
     Syste~dulla^@204~ del.Design.HelpKeywordAttribute("vs.d~dulla^@204~ ter")>  _
    Partial Public Class V~dulla^@204~ ngTableAdapter
        Inherits Syst~dulla^@204~ odel.Component
        
        Pri~dulla^@204~ ts _adapter As System.Data.SqlClient.~dulla^@204~ r
        
        Private _connect~dulla^@204~ .Data.SqlClient.SqlConnection
      ~dulla^@204~ rivate _commandCollection() As System~dulla^@204~ nt.SqlCommand
        
        Priv~dulla^@204~ oreFill As Boolean
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Sub New()
            MyBas~dulla^@204~       Me.ClearBeforeFill = true
    ~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Priva~dulla^@204~ roperty Adapter() As System.Data.SqlC~dulla^@204~ Adapter
            Get
           ~dulla^@204~ adapter Is Nothing) Then
           ~dulla^@204~ nitAdapter
                End If
 ~dulla^@204~   Return Me._adapter
            End~dulla^@204~  End Property
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ end Property Connection() As System.D~dulla^@204~ .SqlConnection
            Get
    ~dulla^@204~ f (Me._connection Is Nothing) Then
 ~dulla^@204~       Me.InitConnection
            ~dulla^@204~                Return Me._connection~dulla^@204~ End Get
            Set
           ~dulla^@204~ ection = value
                If (N~dulla^@204~ r.InsertCommand) Is Nothing) Then
  ~dulla^@204~      Me.Adapter.InsertCommand.Connect~dulla^@204~                 End If
             ~dulla^@204~ e.Adapter.DeleteCommand) Is Nothing) ~dulla^@204~              Me.Adapter.DeleteCommand~dulla^@204~  value
                End If
     ~dulla^@204~  (Not (Me.Adapter.UpdateCommand) Is N~dulla^@204~ 
                    Me.Adapter.UpdateCommand.Connection = value
             ~dulla^@204~               Dim i As Integer = 0
 ~dulla^@204~   Do While (i < Me.CommandCollection.~dulla^@204~                 If (Not (Me.CommandCo~dulla^@204~ Is Nothing) Then
                   ~dulla^@204~ .CommandCollection(i),System.Data.Sql~dulla^@204~ mand).Connection = value
           ~dulla^@204~ If
                    i = (i + 1)
~dulla^@204~    Loop
            End Set
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pro~dulla^@204~ ly Property CommandCollection() As Sy~dulla^@204~ Client.SqlCommand()
            Get~dulla^@204~     If (Me._commandCollection Is Noth~dulla^@204~                   Me.InitCommandColle~dulla^@204~           End If
                Ret~dulla^@204~ ndCollection
            End Get
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ erty ClearBeforeFill() As Boolean
  ~dulla^@204~ 
                Return Me._clearBef~dulla^@204~         End Get
            Set
   ~dulla^@204~ Me._clearBeforeFill = value
        ~dulla^@204~         End Property
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Private Sub InitAdapter()
      ~dulla^@204~ pter = New System.Data.SqlClient.SqlD~dulla^@204~            Dim tableMapping As System~dulla^@204~ DataTableMapping = New System.Data.Co~dulla^@204~ eMapping
            tableMapping.So~dulla^@204~ Table"
            tableMapping.Data~dulla^@204~ iewPriceSetting"
            tableMa~dulla^@204~ appings.Add("PartNo", "PartNo")
    ~dulla^@204~ Mapping.ColumnMappings.Add("Descripti~dulla^@204~ tion")
            tableMapping.Colu~dulla^@204~ d("UnitCost", "UnitCost")
          ~dulla^@204~ g.ColumnMappings.Add("TotalQuantity",~dulla^@204~ ty")
            tableMapping.Column~dulla^@204~ "SellingPrice1", "SellingPrice1")
  ~dulla^@204~ leMapping.ColumnMappings.Add("Selling~dulla^@204~ lingPrice2")
            Me._adapter~dulla^@204~ s.Add(tableMapping)
        End Sub~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Private Sub InitC~dulla^@204~             Me._connection = New Syst~dulla^@204~ ient.SqlConnection
            Me._c~dulla^@204~ nectionString = Global.InventoryContr~dulla^@204~ ySettings.Default.PurchaseInfoConnect~dulla^@204~ End Sub
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ ub InitCommandCollection()
         ~dulla^@204~ dCollection = New System.Data.SqlClie~dulla^@204~ (0) {}
            Me._commandCollec~dulla^@204~  System.Data.SqlClient.SqlCommand
  ~dulla^@204~ _commandCollection(0).Connection = Me~dulla^@204~             Me._commandCollection(0).~dulla^@204~  "SELECT PartNo, Description, UnitCos~dulla^@204~ ity, SellingPrice1, SellingPrice2"& _~dulla^@204~       " FROM dbo.ViewPriceSetting"
 ~dulla^@204~ ._commandCollection(0).CommandType = ~dulla^@204~ ommandType.Text
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ (),  _
         System.ComponentMode~dulla^@204~ KeywordAttribute("vs.data.TableAdapte~dulla^@204~      System.ComponentModel.DataObject~dulla^@204~ te(System.ComponentModel.DataObjectMe~dulla^@204~ , true)>  _
        Public Overloads~dulla^@204~ Function Fill(ByVal dataTable As Pric~dulla^@204~ et.ViewPriceSettingDataTable) As Inte~dulla^@204~     Me.Adapter.SelectCommand = Me.Com~dulla^@204~ n(0)
            If (Me.ClearBeforeF~dulla^@204~ hen
                dataTable.Clear~dulla^@204~ End If
            Dim returnValue A~dulla^@204~ e.Adapter.Fill(dataTable)
          ~dulla^@204~ rnValue
        End Function
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
         System.ComponentModel.D~dulla^@204~ wordAttribute("vs.data.TableAdapter")~dulla^@204~   System.ComponentModel.DataObjectMet~dulla^@204~ System.ComponentModel.DataObjectMetho~dulla^@204~ ], true)>  _
        Public Overload~dulla^@204~  Function GetData() As PriceSettingDa~dulla^@204~ ceSettingDataTable
            Me.Ad~dulla^@204~ ommand = Me.CommandCollection(0)
   ~dulla^@204~ dataTable As PriceSettingDataSet.View~dulla^@204~ ataTable = New PriceSettingDataSet.Vi~dulla^@204~ gDataTable
            Me.Adapter.Fi~dulla^@204~ 
            Return dataTable
        End Function
    End Class
End Namespace
