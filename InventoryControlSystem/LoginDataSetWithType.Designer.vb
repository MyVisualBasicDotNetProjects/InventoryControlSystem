'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.312
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("LoginDataSetWithType"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class LoginDataSetWithType
    Inherits System.Data.DataSet
    
    Private tableUsers As UsersDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Users")) Is Nothing) Then
                MyBase.Tables.Add(New UsersDataTable(ds.Tables("Users")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Users() As UsersDataTable
        Get
            Return Me.tableUsers
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As LoginDataSetWithType = CType(MyBase.Clone,LoginDataSetWithType)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Users")) Is Nothing) Then
                MyBase.Tables.Add(New UsersDataTable(ds.Tables("Users")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableUsers = CType(MyBase.Tables("Users"),UsersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUsers) Is Nothing) Then
                Me.tableUsers.InitVars
            End If
        End If
    End Sub
    
    <Sys ~dulla^@204~ ~dulla^@204~ UserCodeAttribute()>  _
    Private ~dulla^@204~ ()
        Me.DataSetName = "LoginDa~dulla^@204~ "
        Me.Prefix = ""
        Me~dulla^@204~ "http://tempuri.org/LoginDataSetWithT~dulla^@204~      Me.EnforceConstraints = true
  ~dulla^@204~ maSerializationMode = System.Data.Sch~dulla^@204~ ionMode.IncludeSchema
        Me.tab~dulla^@204~  UsersDataTable
        MyBase.Table~dulla^@204~ eUsers)
    End Sub
    
    <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ Function ShouldSerializeUsers() As Bo~dulla^@204~   Return false
    End Function
   ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~     Private Sub SchemaChanged(ByVal s~dulla^@204~ ct, ByVal e As System.ComponentModel.~dulla^@204~ ngeEventArgs)
        If (e.Action =~dulla^@204~ nentModel.CollectionChangeAction.Remo~dulla^@204~          Me.InitVars
        End If~dulla^@204~ 
    
    <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
    Public Shared Fu~dulla^@204~ edDataSetSchema(ByVal xs As System.Xm~dulla^@204~ chemaSet) As System.Xml.Schema.XmlSch~dulla^@204~ e
        Dim ds As LoginDataSetWith~dulla^@204~ ginDataSetWithType
        Dim type ~dulla^@204~ .Schema.XmlSchemaComplexType = New Sy~dulla^@204~ ma.XmlSchemaComplexType
        Dim ~dulla^@204~ ystem.Xml.Schema.XmlSchemaSequence = ~dulla^@204~ l.Schema.XmlSchemaSequence
        x~dulla^@204~ chemaSerializable)
        Dim any A~dulla^@204~ Schema.XmlSchemaAny = New System.Xml.~dulla^@204~ emaAny
        any.Namespace = ds.Na~dulla^@204~     sequence.Items.Add(any)
        ~dulla^@204~  = sequence
        Return type
   ~dulla^@204~ 
    
    Public Delegate Sub Users~dulla^@204~ tHandler(ByVal sender As Object, ByVa~dulla^@204~ owChangeEvent)
    
    <System.Cod~dulla^@204~ .GeneratedCodeAttribute("System.Data.~dulla^@204~ ataSetGenerator", "2.0.0.0"),  _
   ~dulla^@204~ alizable(),  _
     System.Xml.Seria~dulla^@204~ chemaProviderAttribute("GetTypedTable~dulla^@204~ 
    Partial Public Class UsersDataTa~dulla^@204~ Inherits System.Data.DataTable
     ~dulla^@204~  System.Collections.IEnumerable
    ~dulla^@204~  Private columnUserName As System.Dat~dulla^@204~ 
        
        Private columnPass~dulla^@204~ m.Data.DataColumn
        
        ~dulla^@204~ nTypeOfUser As System.Data.DataColumn~dulla^@204~        Private columnLocation As Syst~dulla^@204~ olumn
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ New()
            MyBase.New
      ~dulla^@204~ eName = "Users"
            Me.Begin~dulla^@204~      Me.InitClass
            Me.End~dulla^@204~  End Sub
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ ub New(ByVal table As System.Data.Dat~dulla^@204~         MyBase.New
            Me.Ta~dulla^@204~ le.TableName
            If (table.C~dulla^@204~ <> table.DataSet.CaseSensitive) Then~dulla^@204~     Me.CaseSensitive = table.CaseSens~dulla^@204~       End If
            If (table.L~dulla^@204~ g <> table.DataSet.Locale.ToString) T~dulla^@204~         Me.Locale = table.Locale
   ~dulla^@204~ If
            If (table.Namespace <~dulla^@204~ et.Namespace) Then
                M~dulla^@204~  table.Namespace
            End If~dulla^@204~ Me.Prefix = table.Prefix
           ~dulla^@204~ pacity = table.MinimumCapacity
     ~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Protec~dulla^@204~ yVal info As System.Runtime.Serializa~dulla^@204~ ationInfo, ByVal context As System.Ru~dulla^@204~ zation.StreamingContext)
           ~dulla^@204~ nfo, context)
            Me.InitVar~dulla^@204~ d Sub
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ Only Property UserNameColumn() As Sys~dulla^@204~ Column
            Get
            ~dulla^@204~ .columnUserName
            End Get~dulla^@204~ Property
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ eadOnly Property PasswordColumn() As ~dulla^@204~ ataColumn
            Get
         ~dulla^@204~  Me.columnPassword
            End G~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c ReadOnly Property TypeOfUserColumn(~dulla^@204~ ata.DataColumn
            Get
    ~dulla^@204~ eturn Me.columnTypeOfUser
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public ReadOnly Property LocationCo~dulla^@204~ tem.Data.DataColumn
            Get~dulla^@204~     Return Me.columnLocation
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~       System.ComponentModel.Browsable~dulla^@204~         Public ReadOnly Property Coun~dulla^@204~ r
            Get
                R~dulla^@204~ .Count
            End Get
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ adOnly Property Item(ByVal index As I~dulla^@204~ ersRow
            Get
            ~dulla^@204~ ype(Me.Rows(index),UsersRow)
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ ent UsersRowChanging As UsersRowChang~dulla^@204~ 
        
        Public Event User~dulla^@204~ s UsersRowChangeEventHandler
       ~dulla^@204~ blic Event UsersRowDeleting As UsersR~dulla^@204~ Handler
        
        Public Eve~dulla^@204~ leted As UsersRowChangeEventHandler
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Overloads S~dulla^@204~ w(ByVal row As UsersRow)
           ~dulla^@204~ row)
        End Sub
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Overloads Function AddUse~dulla^@204~ serName As String, ByVal Password As ~dulla^@204~  TypeOfUser As String, ByVal Location~dulla^@204~ s UsersRow
            Dim rowUsersR~dulla^@204~ w = CType(Me.NewRow,UsersRow)
      ~dulla^@204~ sRow.ItemArray = New Object() {UserNa~dulla^@204~  TypeOfUser, Location}
            M~dulla^@204~ wUsersRow)
            Return rowUse~dulla^@204~   End Function
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Overridable Function GetEnumerat~dulla^@204~ m.Collections.IEnumerator Implements ~dulla^@204~ tions.IEnumerable.GetEnumerator
    ~dulla^@204~ n Me.Rows.GetEnumerator
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public O~dulla^@204~ tion Clone() As System.Data.DataTable~dulla^@204~  Dim cln As UsersDataTable = CType(My~dulla^@204~ ersDataTable)
            cln.InitVa~dulla^@204~    Return cln
        End Function
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Protected Override~dulla^@204~ eateInstance() As System.Data.DataTab~dulla^@204~    Return New UsersDataTable
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Fri~dulla^@204~ ars()
            Me.columnUserName ~dulla^@204~ mns("UserName")
            Me.colum~dulla^@204~ yBase.Columns("Password")
          ~dulla^@204~ peOfUser = MyBase.Columns("TypeOfUser~dulla^@204~    Me.columnLocation = MyBase.Columns~dulla^@204~ 
        End Sub
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Private Sub InitClass()
            ~dulla^@204~ Name = New System.Data.DataColumn("Us~dulla^@204~ ype(String), Nothing, System.Data.Map~dulla^@204~ ent)
            MyBase.Columns.Add(~dulla^@204~ Name)
            Me.columnPassword ~dulla^@204~ Data.DataColumn("Password", GetType(S~dulla^@204~ ng, System.Data.MappingType.Element)~dulla^@204~ MyBase.Columns.Add(Me.columnPassword)~dulla^@204~  Me.columnTypeOfUser = New System.Dat~dulla^@204~ "TypeOfUser", GetType(String), Nothin~dulla^@204~ a.MappingType.Element)
            M~dulla^@204~ .Add(Me.columnTypeOfUser)
          ~dulla^@204~ cation = New System.Data.DataColumn("Location", GetType(String), Nothing, Syste~dulla^@204~ gType.Element)
            MyBase.Co~dulla^@204~ columnLocation)
            Me.colum~dulla^@204~ owDBNull = false
            Me.colu~dulla^@204~ xLength = 10
            Me.columnPa~dulla^@204~ BNull = false
            Me.columnP~dulla^@204~ ngth = 6
            Me.columnTypeOf~dulla^@204~ ull = false
            Me.columnTyp~dulla^@204~ ngth = 15
            Me.columnLocat~dulla^@204~ ll = false
            Me.columnLoca~dulla^@204~ h = 30
        End Sub
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Function NewUsersRow() ~dulla^@204~             Return CType(Me.NewRow,Us~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Protected Overrides Function NewRowFr~dulla^@204~ al builder As System.Data.DataRowBuil~dulla^@204~ m.Data.DataRow
            Return Ne~dulla^@204~ ilder)
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Protected Overrides Funct~dulla^@204~ e() As System.Type
            Retur~dulla^@204~ rsRow)
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Protected Overrides Sub O~dulla^@204~ yVal e As System.Data.DataRowChangeEv~dulla^@204~          MyBase.OnRowChanged(e)
    ~dulla^@204~ ot (Me.UsersRowChangedEvent) Is Nothi~dulla^@204~              RaiseEvent UsersRowChang~dulla^@204~ ersRowChangeEvent(CType(e.Row,UsersRo~dulla^@204~ )
            End If
        End Su~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Protected Overr~dulla^@204~ wChanging(ByVal e As System.Data.Data~dulla^@204~ tArgs)
            MyBase.OnRowChang~dulla^@204~        If (Not (Me.UsersRowChangingEv~dulla^@204~ ng) Then
                RaiseEvent ~dulla^@204~ ing(Me, New UsersRowChangeEvent(CType~dulla^@204~ ow), e.Action))
            End If
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ rides Sub OnRowDeleted(ByVal e As Sys~dulla^@204~ RowChangeEventArgs)
            MyBa~dulla^@204~ ed(e)
            If (Not (Me.UsersR~dulla^@204~ t) Is Nothing) Then
                ~dulla^@204~ ersRowDeleted(Me, New UsersRowChangeE~dulla^@204~ Row,UsersRow), e.Action))
          ~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ected Overrides Sub OnRowDeleting(ByV~dulla^@204~ m.Data.DataRowChangeEventArgs)
     ~dulla^@204~ .OnRowDeleting(e)
            If (No~dulla^@204~ wDeletingEvent) Is Nothing) Then
   ~dulla^@204~ RaiseEvent UsersRowDeleting(Me, New U~dulla^@204~ Event(CType(e.Row,UsersRow), e.Action~dulla^@204~    End If
        End Sub
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Sub RemoveUsersRow(B~dulla^@204~ sersRow)
            Me.Rows.Remove(~dulla^@204~  End Sub
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ hared Function GetTypedTableSchema(By~dulla^@204~ tem.Xml.Schema.XmlSchemaSet) As Syste~dulla^@204~ XmlSchemaComplexType
            Dim~dulla^@204~ em.Xml.Schema.XmlSchemaComplexType = ~dulla^@204~ l.Schema.XmlSchemaComplexType
      ~dulla^@204~ uence As System.Xml.Schema.XmlSchemaS~dulla^@204~  System.Xml.Schema.XmlSchemaSequence~dulla^@204~ Dim ds As LoginDataSetWithType = New ~dulla^@204~ ithType
            xs.Add(ds.GetSch~dulla^@204~ le)
            Dim any1 As System.X~dulla^@204~ SchemaAny = New System.Xml.Schema.Xml~dulla^@204~           any1.Namespace = "http://ww~dulla^@204~ /XMLSchema"
            any1.MinOccu~dulla^@204~ mal(0)
            any1.MaxOccurs = ~dulla^@204~ lue
            any1.ProcessContents~dulla^@204~ .Schema.XmlSchemaContentProcessing.La~dulla^@204~   sequence.Items.Add(any1)
         ~dulla^@204~ s System.Xml.Schema.XmlSchemaAny = Ne~dulla^@204~ Schema.XmlSchemaAny
            any2~dulla^@204~ "urn:schemas-microsoft-com:xml-diffgr~dulla^@204~        any2.MinOccurs = New Decimal(1~dulla^@204~   any2.ProcessContents = System.Xml.S~dulla^@204~ maContentProcessing.Lax
            ~dulla^@204~ s.Add(any2)
            Dim attribut~dulla^@204~ Xml.Schema.XmlSchemaAttribute = New S~dulla^@204~ ema.XmlSchemaAttribute
            a~dulla^@204~ e = "namespace"
            attribut~dulla^@204~  = ds.Namespace
            type.Att~dulla^@204~ ttribute1)
            Dim attribute~dulla^@204~ ml.Schema.XmlSchemaAttribute = New Sy~dulla^@204~ ma.XmlSchemaAttribute
            at~dulla^@204~  = "tableTypeName"
            attri~dulla^@204~ lue = "UsersDataTable"
            t~dulla^@204~ s.Add(attribute2)
            type.P~dulla^@204~ uence
            Return type
     ~dulla^@204~ on
    End Class
    
    <System.~dulla^@204~ ler.GeneratedCodeAttribute("System.Da~dulla^@204~ edDataSetGenerator", "2.0.0.0")>  _
~dulla^@204~ ublic Class UsersRow
        Inherit~dulla^@204~ .DataRow
        
        Private t~dulla^@204~ UsersDataTable
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ iend Sub New(ByVal rb As System.Data.~dulla^@204~ r)
            MyBase.New(rb)
     ~dulla^@204~ leUsers = CType(Me.Table,UsersDataTab~dulla^@204~ End Sub
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ operty UserName() As String
        ~dulla^@204~             Return CType(Me(Me.tableU~dulla^@204~ Column),String)
            End Get~dulla^@204~ Set
                Me(Me.tableUsers~dulla^@204~ mn) = value
            End Set
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ rty Password() As String
           ~dulla^@204~          Return CType(Me(Me.tableUser~dulla^@204~ umn),String)
            End Get
  ~dulla^@204~ 
                Me(Me.tableUsers.Pa~dulla^@204~  = value
            End Set
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  TypeOfUser() As String
            ~dulla^@204~         Return CType(Me(Me.tableUsers~dulla^@204~ lumn),String)
            End Get
 ~dulla^@204~ t
                Me(Me.tableUsers.T~dulla^@204~ mn) = value
            End Set
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ rty Location() As String
           ~dulla^@204~          Return CType(Me(Me.tableUser~dulla^@204~ umn),String)
            End Get
  ~dulla^@204~ 
                Me(Me.tableUsers.Lo~dulla^@204~  = value
            End Set
      ~dulla^@204~ y
    End Class
    
    <System.C~dulla^@204~ er.GeneratedCodeAttribute("System.Dat~dulla^@204~ dDataSetGenerator", "2.0.0.0")>  _
 ~dulla^@204~ ss UsersRowChangeEvent
        Inher~dulla^@204~ entArgs
        
        Private ev~dulla^@204~ rsRow
        
        Private even~dulla^@204~ stem.Data.DataRowAction
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Sub New(ByVal row As Us~dulla^@204~  action As System.Data.DataRowAction)~dulla^@204~  MyBase.New
            Me.eventRow ~dulla^@204~       Me.eventAction = action
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ erty Row() As UsersRow
            G~dulla^@204~        Return Me.eventRow
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public ReadOnly Property Action() A~dulla^@204~ .DataRowAction
            Get
    ~dulla^@204~ eturn Me.eventAction
            End~dulla^@204~  End Property
    End Class
End Cla~dulla^@204~ ce LoginDataSetWithTypeTableAdapters~dulla^@204~ ystem.CodeDom.Compiler.GeneratedCodeA~dulla^@204~ tem.Data.Design.TypedDataSetGenerator~dulla^@204~ ,  _
     System.ComponentModel.Desi~dulla^@204~ ttribute("code"),  _
     System.Com~dulla^@204~ oolboxItem(true),  _
     System.Com~dulla^@204~ ataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Mic~dulla^@204~ gner.DataSource.Design.TableAdapterDe~dulla^@204~ soft.VSDesigner"& _ 
        ", Vers~dulla^@204~ Culture=neutral, PublicKeyToken=b03f5~dulla^@204~ ,  _
     System.ComponentModel.Desi~dulla^@204~ dAttribute("vs.data.TableAdapter")>  ~dulla^@204~ l Public Class UsersTableAdapter
   ~dulla^@204~  System.ComponentModel.Component
   ~dulla^@204~   Private WithEvents _adapter As Syst~dulla^@204~ ient.SqlDataAdapter
        
      ~dulla^@204~ nnection As System.Data.SqlClient.Sql~dulla^@204~        
        Private _commandColl~dulla^@204~ ystem.Data.SqlClient.SqlCommand
    ~dulla^@204~  Private _clearBeforeFill As Boolean~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Sub New()~dulla^@204~ MyBase.New
            Me.ClearBefor~dulla^@204~ 
        End Sub
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Private ReadOnly Property Adapter() A~dulla^@204~ .SqlClient.SqlDataAdapter
          ~dulla^@204~           If (Me._adapter Is Nothing)~dulla^@204~               Me.InitAdapter
       ~dulla^@204~ If
                Return Me._adapte~dulla^@204~   End Get
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Friend Property Connec~dulla^@204~ tem.Data.SqlClient.SqlConnection
   ~dulla^@204~ 
                If (Me._connection I~dulla^@204~ en
                    Me.InitConnec~dulla^@204~          End If
                Retu~dulla^@204~ tion
            End Get
          ~dulla^@204~           Me._connection = value
   ~dulla^@204~ If (Not (Me.Adapter.InsertCommand) Is~dulla^@204~ n
                    Me.Adapter.Ins~dulla^@204~ nnection = value
                End~dulla^@204~         If (Not (Me.Adapter.DeleteCom~dulla^@204~ ing) Then
                    Me.Ada~dulla^@204~ mmand.Connection = value
           ~dulla^@204~                 If (Not (Me.Adapter.U~dulla^@204~  Is Nothing) Then
                  ~dulla^@204~ UpdateCommand.Connection = value
   ~dulla^@204~ End If
                Dim i As Inte~dulla^@204~             Do While (i < Me.CommandC~dulla^@204~ gth)
                    If (Not (Me~dulla^@204~ ction(i)) Is Nothing) Then
         ~dulla^@204~   CType(Me.CommandCollection(i),Syste~dulla^@204~ ent.SqlCommand).Connection = value
 ~dulla^@204~       End If
                    i =~dulla^@204~              Loop
            End Se~dulla^@204~ d Property
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~ ted ReadOnly Property CommandCollecti~dulla^@204~ m.Data.SqlClient.SqlCommand()
      ~dulla^@204~               If (Me._commandCollecti~dulla^@204~ ) Then
                    Me.InitCo~dulla^@204~ on
                End If
         ~dulla^@204~  Me._commandCollection
            E~dulla^@204~    End Property
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Property ClearBeforeFill() As B~dulla^@204~        Get
                Return Me~dulla^@204~ Fill
            End Get
          ~dulla^@204~           Me._clearBeforeFill = value~dulla^@204~  End Set
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Private Sub InitAdapter~dulla^@204~    Me._adapter = New System.Data.SqlC~dulla^@204~ Adapter
            Dim tableMapping~dulla^@204~ ta.Common.DataTableMapping = New Syst~dulla^@204~ n.DataTableMapping
            table~dulla^@204~ eTable = "Table"
            tableMa~dulla^@204~ Table = "Users"
            tableMap~dulla^@204~ ppings.Add("UserName", "UserName")
 ~dulla^@204~ bleMapping.ColumnMappings.Add("Passwo~dulla^@204~ d")
            tableMapping.ColumnM~dulla^@204~ TypeOfUser", "TypeOfUser")
         ~dulla^@204~ ng.ColumnMappings.Add("Location", "Lo~dulla^@204~          Me._adapter.TableMappings.Ad~dulla^@204~ g)
            Me._adapter.InsertCom~dulla^@204~ stem.Data.SqlClient.SqlCommand
     ~dulla^@204~ apter.InsertCommand.Connection = Me.C~dulla^@204~           Me._adapter.InsertCommand.C~dulla^@204~ "INSERT INTO [dbo].[Users] ([UserName~dulla^@204~ , [TypeOfUser], [Location]) VALU"& _ ~dulla^@204~      "ES (@UserName, @Password, @Type~dulla^@204~ tion)"
            Me._adapter.Inser~dulla^@204~ andType = System.Data.CommandType.Tex~dulla^@204~   Me._adapter.InsertCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@Use~dulla^@204~ m.Data.SqlDbType.[Char], 0, System.Da~dulla^@204~ irection.Input, 0, 0, "UserName", Sys~dulla^@204~ RowVersion.Current, false, Nothing, "~dulla^@204~             Me._adapter.InsertCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ rd", System.Data.SqlDbType.[Char], 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Pass~dulla^@204~ .Data.DataRowVersion.Current, false, ~dulla^@204~ "", ""))
            Me._adapter.Ins~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@TypeOfUser", System.Data.SqlDbTyp~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ fUser", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ sertCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@Location", System.D~dulla^@204~ .[Char], 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "Location", System.Data.DataRow~dulla^@204~ nt, false, Nothing, "", "", ""))
   ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Priv~dulla^@204~ onnection()
            Me._connecti~dulla^@204~ em.Data.SqlClient.SqlConnection
    ~dulla^@204~ onnection.ConnectionString = Global.I~dulla^@204~ olSystem.My.MySettings.Default.Purcha~dulla^@204~ ion
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Private Sub InitCommandCollection~dulla^@204~    Me._commandCollection = New System~dulla^@204~ nt.SqlCommand(0) {}
            Me._~dulla^@204~ tion(0) = New System.Data.SqlClient.S~dulla^@204~           Me._commandCollection(0).Co~dulla^@204~ .Connection
            Me._commandC~dulla^@204~ CommandText = "SELECT UserName, Passw~dulla^@204~ er, Location FROM dbo.Users"
       ~dulla^@204~ andCollection(0).CommandType = System~dulla^@204~ Type.Text
        End Sub
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
         System.ComponentModel.Desi~dulla^@204~ dAttribute("vs.data.TableAdapter"),  ~dulla^@204~ ystem.ComponentModel.DataObjectMethod~dulla^@204~ tem.ComponentModel.DataObjectMethodTy~dulla^@204~ )>  _
        Public Overloads Overr~dulla^@204~ on Fill(ByVal dataTable As LoginDataS~dulla^@204~ ersDataTable) As Integer
           ~dulla^@204~ electCommand = Me.CommandCollection(0~dulla^@204~   If (Me.ClearBeforeFill = true) Then~dulla^@204~      dataTable.Clear
            End~dulla^@204~     Dim returnValue As Integer = Me.A~dulla^@204~ ataTable)
            Return returnV~dulla^@204~  End Function
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ stem.ComponentModel.Design.HelpKeywor~dulla^@204~ s.data.TableAdapter"),  _
         S~dulla^@204~ ntModel.DataObjectMethodAttribute(Sys~dulla^@204~ Model.DataObjectMethodType.[Select], ~dulla^@204~       Public Overloads Overridable Fu~dulla^@204~ a() As LoginDataSetWithType.UsersData~dulla^@204~       Me.Adapter.SelectCommand = Me.C~dulla^@204~ ion(0)
            Dim dataTable As ~dulla^@204~ ithType.UsersDataTable = New LoginDat~dulla^@204~ UsersDataTable
            Me.Adapte~dulla^@204~ ble)
            Return dataTable
 ~dulla^@204~ nction
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute(),  _
     ~dulla^@204~ mponentModel.Design.HelpKeywordAttrib~dulla^@204~ TableAdapter")>  _
        Public Ov~dulla^@204~ idable Function Update(ByVal dataTabl~dulla^@204~ aSetWithType.UsersDataTable) As Integ~dulla^@204~    Return Me.Adapter.Update(dataTable~dulla^@204~ d Function
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute(),  _
 ~dulla^@204~ m.ComponentModel.Design.HelpKeywordAt~dulla^@204~ ata.TableAdapter")>  _
        Public Overloads Overridable Function Update(By~dulla^@204~ s LoginDataSetWithType) As Integer
 ~dulla^@204~ turn Me.Adapter.Update(dataSet, "User~dulla^@204~ End Function
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ tem.ComponentModel.Design.HelpKeyword~dulla^@204~ .data.TableAdapter")>  _
        Pub~dulla^@204~  Overridable Function Update(ByVal da~dulla^@204~ em.Data.DataRow) As Integer
        ~dulla^@204~ .Adapter.Update(New System.Data.DataR~dulla^@204~ })
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~          System.ComponentModel.Design~dulla^@204~ ttribute("vs.data.TableAdapter")>  _~dulla^@204~ ic Overloads Overridable Function Upd~dulla^@204~ aRows() As System.Data.DataRow) As In~dulla^@204~       Return Me.Adapter.Update(dataRo~dulla^@204~ End Function
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ tem.ComponentModel.Design.HelpKeyword~dulla^@204~ .data.TableAdapter"),  _
         Sy~dulla^@204~ tModel.DataObjectMethodAttribute(Syst~dulla^@204~ odel.DataObjectMethodType.Insert, tru~dulla^@204~    Public Overloads Overridable Funct~dulla^@204~ Val UserName As String, ByVal Passwor~dulla^@204~ ByVal TypeOfUser As String, ByVal Loc~dulla^@204~ ng) As Integer
            If (UserN~dulla^@204~ g) Then
                Throw New Sy~dulla^@204~ NullException("UserName")
          ~dulla^@204~            Me.Adapter.InsertCommand.P~dulla^@204~ Value = CType(UserName,String)
     ~dulla^@204~ 
            If (Password Is Nothing~dulla^@204~            Throw New System.ArgumentN~dulla^@204~ "Password")
            Else
      ~dulla^@204~ Adapter.InsertCommand.Parameters(1).V~dulla^@204~ Password,String)
            End If~dulla^@204~ If (TypeOfUser Is Nothing) Then
    ~dulla^@204~ hrow New System.ArgumentNullException~dulla^@204~ )
            Else
                ~dulla^@204~ sertCommand.Parameters(2).Value = CTy~dulla^@204~ ,String)
            End If
       ~dulla^@204~ tion Is Nothing) Then
              ~dulla^@204~ ystem.ArgumentNullException("Location~dulla^@204~    Else
                Me.Adapter.I~dulla^@204~ Parameters(3).Value = CType(Location,~dulla^@204~         End If
            Dim previ~dulla^@204~ State As System.Data.ConnectionState ~dulla^@204~ InsertCommand.Connection.State
     ~dulla^@204~ e.Adapter.InsertCommand.Connection.St~dulla^@204~ m.Data.ConnectionState.Open)  _
    ~dulla^@204~        <> System.Data.ConnectionState~dulla^@204~                 Me.Adapter.InsertComm~dulla^@204~ n.Open
            End If
         ~dulla^@204~             Dim returnValue As Intege~dulla^@204~ r.InsertCommand.ExecuteNonQuery
    ~dulla^@204~ eturn returnValue
            Finall~dulla^@204~       If (previousConnectionState = S~dulla^@204~ nnectionState.Closed) Then
         ~dulla^@204~ .Adapter.InsertCommand.Connection.Clo~dulla^@204~        End If
            End Try
 ~dulla^@204~ nction
    End Class
End Namespace
