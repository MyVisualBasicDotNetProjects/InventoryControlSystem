'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.312
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("Prod4SalesDataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Prod4SalesDataSet
    Inherits System.Data.DataSet
    
    Private tableProducts As ProductsDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Products")) Is Nothing) Then
                MyBase.Tables.Add(New ProductsDataTable(ds.Tables("Products")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Products() As ProductsDataTable
        Get
            Return Me.tableProducts
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As Prod4SalesDataSet = CType(MyBase.Clone,Prod4SalesDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Products")) Is Nothing) Then
                MyBase.Tables.Add(New ProductsDataTable(ds.Tables("Products")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableProducts = CType(MyBase.Tables("Products"),ProductsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProducts) Is Nothing) Then
                Me.tableProducts.InitVars
            End If
        ~dulla^@204~ ~dulla^@204~ 
    <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
    Private Sub InitClass(~dulla^@204~ .DataSetName = "Prod4SalesDataSet"
 ~dulla^@204~ fix = ""
        Me.Namespace = "htt~dulla^@204~ rg/Prod4SalesDataSet.xsd"
        Me~dulla^@204~ raints = true
        Me.SchemaSeria~dulla^@204~ = System.Data.SchemaSerializationMode~dulla^@204~ a
        Me.tableProducts = New Pro~dulla^@204~ e
        MyBase.Tables.Add(Me.table~dulla^@204~   End Sub
    
    <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
    Privat~dulla^@204~ ouldSerializeProducts() As Boolean
 ~dulla^@204~  false
    End Function
    
    <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ ate Sub SchemaChanged(ByVal sender As~dulla^@204~ l e As System.ComponentModel.Collecti~dulla^@204~ Args)
        If (e.Action = System.~dulla^@204~ l.CollectionChangeAction.Remove) Then~dulla^@204~  Me.InitVars
        End If
    End~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
    Public Shared Function G~dulla^@204~ tSchema(ByVal xs As System.Xml.Schema~dulla^@204~ ) As System.Xml.Schema.XmlSchemaCompl~dulla^@204~    Dim ds As Prod4SalesDataSet = New ~dulla^@204~ aSet
        Dim type As System.Xml.~dulla^@204~ emaComplexType = New System.Xml.Schem~dulla^@204~ mplexType
        Dim sequence As Sy~dulla^@204~ ma.XmlSchemaSequence = New System.Xml~dulla^@204~ hemaSequence
        xs.Add(ds.GetSc~dulla^@204~ ble)
        Dim any As System.Xml.S~dulla^@204~ maAny = New System.Xml.Schema.XmlSche~dulla^@204~   any.Namespace = ds.Namespace
     ~dulla^@204~ tems.Add(any)
        type.Particle ~dulla^@204~        Return type
    End Function~dulla^@204~ blic Delegate Sub ProductsRowChangeEv~dulla^@204~ Val sender As Object, ByVal e As Prod~dulla^@204~ Event)
    
    <System.CodeDom.Com~dulla^@204~ edCodeAttribute("System.Data.Design.T~dulla^@204~ nerator", "2.0.0.0"),  _
     System~dulla^@204~ (),  _
     System.Xml.Serialization~dulla^@204~ viderAttribute("GetTypedTableSchema")~dulla^@204~ tial Public Class ProductsDataTable
~dulla^@204~ its System.Data.DataTable
        Im~dulla^@204~ em.Collections.IEnumerable
        ~dulla^@204~ ate columnPartNo As System.Data.DataC~dulla^@204~   
        Private columnDescription~dulla^@204~ ta.DataColumn
        
        Priv~dulla^@204~ ce As System.Data.DataColumn
       ~dulla^@204~ ivate columnSellingPrice1 As System.D~dulla^@204~ n
        
        Private columnSe~dulla^@204~ s System.Data.DataColumn
        
 ~dulla^@204~ e columnQtyAtShop1 As System.Data.Dat~dulla^@204~     
        Private columnQtyAtShop~dulla^@204~ ata.DataColumn
        
        Pri~dulla^@204~ yAtStore As System.Data.DataColumn
 ~dulla^@204~     Private columnTotalQuantity As Sy~dulla^@204~ aColumn
        
        Private co~dulla^@204~ vel As System.Data.DataColumn
      ~dulla^@204~ rivate columnShelfNo As System.Data.D~dulla^@204~       
        Private columnPInvoic~dulla^@204~ .Data.DataColumn
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Sub New()
            MyBase.~dulla^@204~     Me.TableName = "Products"
      ~dulla^@204~ nInit
            Me.InitClass
    ~dulla^@204~ dInit
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Friend Sub New(ByVal table As S~dulla^@204~ taTable)
            MyBase.New
   ~dulla^@204~ ableName = table.TableName
         ~dulla^@204~ CaseSensitive <> table.DataSet.CaseSe~dulla^@204~ 
                Me.CaseSensitive = ~dulla^@204~ sitive
            End If
         ~dulla^@204~ Locale.ToString <> table.DataSet.Loca~dulla^@204~ Then
                Me.Locale = tab~dulla^@204~           End If
            If (tab~dulla^@204~ <> table.DataSet.Namespace) Then
   ~dulla^@204~ Me.Namespace = table.Namespace
     ~dulla^@204~ 
            Me.Prefix = table.Prefi~dulla^@204~   Me.MinimumCapacity = table.MinimumC~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ cted Sub New(ByVal info As System.Run~dulla^@204~ ation.SerializationInfo, ByVal contex~dulla^@204~ untime.Serialization.StreamingContext~dulla^@204~   MyBase.New(info, context)
        ~dulla^@204~ rs
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public ReadOnly Property PartNoCol~dulla^@204~ em.Data.DataColumn
            Get
~dulla^@204~    Return Me.columnPartNo
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public ReadOnly Property Descriptio~dulla^@204~ System.Data.DataColumn
            G~dulla^@204~        Return Me.columnDescription
 ~dulla^@204~ d Get
        End Property
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public ReadOnly Property P~dulla^@204~ As System.Data.DataColumn
          ~dulla^@204~           Return Me.columnPrice
    ~dulla^@204~ et
        End Property
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public ReadOnly Property Sell~dulla^@204~ mn() As System.Data.DataColumn
     ~dulla^@204~                Return Me.columnSellin~dulla^@204~         End Get
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public ReadOnly ~dulla^@204~ ingPrice2Column() As System.Data.Data~dulla^@204~        Get
                Return Me~dulla^@204~ gPrice2
            End Get
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ Property QtyAtShop1Column() As System~dulla^@204~ umn
            Get
               ~dulla^@204~ lumnQtyAtShop1
            End Get
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ adOnly Property QtyAtShop2Column() As~dulla^@204~ DataColumn
            Get
        ~dulla^@204~ n Me.columnQtyAtShop2
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic ReadOnly Property QtyAtStoreColu~dulla^@204~ m.Data.DataColumn
            Get
 ~dulla^@204~   Return Me.columnQtyAtStore
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public ReadOnly Property TotalQu~dulla^@204~ ) As System.Data.DataColumn
        ~dulla^@204~             Return Me.columnTotalQuan~dulla^@204~      End Get
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public ReadOnly Pro~dulla^@204~ LevelColumn() As System.Data.DataColu~dulla^@204~    Get
                Return Me.col~dulla^@204~ el
            End Get
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public R~dulla^@204~ rty ShelfNoColumn() As System.Data.Da~dulla^@204~          Get
                Return ~dulla^@204~ fNo
            End Get
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ erty PInvoiceNoColumn() As System.Dat~dulla^@204~ 
            Get
                Ret~dulla^@204~ PInvoiceNo
            End Get
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute(),  _
        ~dulla^@204~ nentModel.Browsable(false)>  _
     ~dulla^@204~ dOnly Property Count() As Integer
  ~dulla^@204~ 
                Return Me.Rows.Coun~dulla^@204~   End Get
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Default ReadOnl~dulla^@204~ em(ByVal index As Integer) As Product~dulla^@204~      Get
                Return CTyp~dulla^@204~ ex),ProductsRow)
            End Get~dulla^@204~  Property
        
        Public E~dulla^@204~ RowChanging As ProductsRowChangeEvent~dulla^@204~     
        Public Event ProductsRo~dulla^@204~ roductsRowChangeEventHandler
        
        Public Event ProductsRowDeletin~dulla^@204~ RowChangeEventHandler
        
    ~dulla^@204~ ent ProductsRowDeleted As ProductsRow~dulla^@204~ ndler
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ loads Sub AddProductsRow(ByVal row As~dulla^@204~ 
            Me.Rows.Add(row)
     ~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ nction AddProductsRow(ByVal PartNo As~dulla^@204~ l Description As String, ByVal Price ~dulla^@204~ Val SellingPrice1 As String, ByVal Se~dulla^@204~ s String, ByVal QtyAtShop1 As String,~dulla^@204~ hop2 As String, ByVal QtyAtStore As S~dulla^@204~ TotalQuantity As String, ByVal Reorde~dulla^@204~ ing, ByVal ShelfNo As String, ByVal P~dulla^@204~ String) As ProductsRow
            D~dulla^@204~ sRow As ProductsRow = CType(Me.NewRow~dulla^@204~ 
            rowProductsRow.ItemArra~dulla^@204~ t() {PartNo, Description, Price, Sell~dulla^@204~ llingPrice2, QtyAtShop1, QtyAtShop2, ~dulla^@204~ otalQuantity, ReorderLevel, ShelfNo, ~dulla^@204~             Me.Rows.Add(rowProductsRo~dulla^@204~    Return rowProductsRow
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ ByPartNo(ByVal PartNo As String) As P~dulla^@204~            Return CType(Me.Rows.Find(~dulla^@204~ {PartNo}),ProductsRow)
        End F~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Ov~dulla^@204~ ction GetEnumerator() As System.Colle~dulla^@204~ rator Implements System.Collections.I~dulla^@204~ tEnumerator
            Return Me.Ro~dulla^@204~ tor
        End Function
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Overrides Function Cl~dulla^@204~ em.Data.DataTable
            Dim cl~dulla^@204~ DataTable = CType(MyBase.Clone,Produc~dulla^@204~ 
            cln.InitVars
          ~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Protected Overrides Function Cre~dulla^@204~  As System.Data.DataTable
          ~dulla^@204~ ProductsDataTable
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Friend Sub Ini~dulla^@204~         Me.columnPartNo = MyBase.Colu~dulla^@204~ 
            Me.columnDescription = ~dulla^@204~ s("Description")
            Me.colu~dulla^@204~ ase.Columns("Price")
            Me.~dulla^@204~ Price1 = MyBase.Columns("SellingPrice~dulla^@204~     Me.columnSellingPrice2 = MyBase.C~dulla^@204~ ngPrice2")
            Me.columnQtyA~dulla^@204~ se.Columns("QtyAtShop1")
           ~dulla^@204~ AtShop2 = MyBase.Columns("QtyAtShop2"~dulla^@204~   Me.columnQtyAtStore = MyBase.Column~dulla^@204~ ")
            Me.columnTotalQuantit~dulla^@204~ lumns("TotalQuantity")
            M~dulla^@204~ erLevel = MyBase.Columns("ReorderLeve~dulla^@204~     Me.columnShelfNo = MyBase.Columns~dulla^@204~             Me.columnPInvoiceNo = MyB~dulla^@204~ PInvoiceNo")
        End Sub
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Private Sub InitClass()~dulla^@204~ Me.columnPartNo = New System.Data.Dat~dulla^@204~ No", GetType(String), Nothing, System~dulla^@204~ Type.Element)
            MyBase.Col~dulla^@204~ olumnPartNo)
            Me.columnDe~dulla^@204~ ew System.Data.DataColumn("Descriptio~dulla^@204~ tring), Nothing, System.Data.MappingT~dulla^@204~ 
            MyBase.Columns.Add(Me.co~dulla^@204~ on)
            Me.columnPrice = New~dulla^@204~ DataColumn("Price", GetType(String), ~dulla^@204~ em.Data.MappingType.Element)
       ~dulla^@204~ olumns.Add(Me.columnPrice)
         ~dulla^@204~ ellingPrice1 = New System.Data.DataCo~dulla^@204~ Price1", GetType(String), Nothing, Sy~dulla^@204~ pingType.Element)
            MyBase~dulla^@204~ Me.columnSellingPrice1)
            ~dulla^@204~ ingPrice2 = New System.Data.DataColum~dulla^@204~ ce2", GetType(String), Nothing, Syste~dulla^@204~ gType.Element)
            MyBase.Co~dulla^@204~ columnSellingPrice2)
            Me.~dulla^@204~ op1 = New System.Data.DataColumn("Qty~dulla^@204~ Type(String), Nothing, System.Data.Ma~dulla^@204~ ment)
            MyBase.Columns.Add~dulla^@204~ AtShop1)
            Me.columnQtyAtS~dulla^@204~ stem.Data.DataColumn("QtyAtShop2", Ge~dulla^@204~ , Nothing, System.Data.MappingType.El~dulla^@204~        MyBase.Columns.Add(Me.columnQt~dulla^@204~           Me.columnQtyAtStore = New S~dulla^@204~ taColumn("QtyAtStore", GetType(String~dulla^@204~ ystem.Data.MappingType.Element)
    ~dulla^@204~ e.Columns.Add(Me.columnQtyAtStore)
 ~dulla^@204~ .columnTotalQuantity = New System.Dat~dulla^@204~ "TotalQuantity", GetType(String), Not~dulla^@204~ Data.MappingType.Element)
          ~dulla^@204~ mns.Add(Me.columnTotalQuantity)
    ~dulla^@204~ lumnReorderLevel = New System.Data.Da~dulla^@204~ rderLevel", GetType(String), Nothing,~dulla^@204~ MappingType.Element)
            MyB~dulla^@204~ dd(Me.columnReorderLevel)
          ~dulla^@204~ elfNo = New System.Data.DataColumn("S~dulla^@204~ ype(String), Nothing, System.Data.Map~dulla^@204~ ent)
            MyBase.Columns.Add(~dulla^@204~ fNo)
            Me.columnPInvoiceNo~dulla^@204~ .Data.DataColumn("PInvoiceNo", GetTyp~dulla^@204~ thing, System.Data.MappingType.Elemen~dulla^@204~    MyBase.Columns.Add(Me.columnPInvoi~dulla^@204~       Me.Constraints.Add(New System.D~dulla^@204~ straint("Constraint1", New System.Dat~dulla^@204~ ) {Me.columnPartNo}, true))
        ~dulla^@204~ PartNo.AllowDBNull = false
         ~dulla^@204~ artNo.Unique = true
            Me.c~dulla^@204~ axLength = 20
            Me.columnD~dulla^@204~ lowDBNull = false
            Me.col~dulla^@204~ n.MaxLength = 20
            Me.colu~dulla^@204~ DBNull = false
            Me.column~dulla^@204~ th = 53
            Me.columnSelling~dulla^@204~ gth = 53
            Me.columnSellin~dulla^@204~ ngth = 53
            Me.columnQtyAt~dulla^@204~ th = 20
            Me.columnQtyAtSh~dulla^@204~  = 20
            Me.columnQtyAtStor~dulla^@204~  20
            Me.columnTotalQuanti~dulla^@204~ l = false
            Me.columnTotal~dulla^@204~ ength = 20
            Me.columnReor~dulla^@204~ ength = 20
            Me.columnShel~dulla^@204~  = 20
            Me.columnPInvoiceN~dulla^@204~  = false
            Me.columnPInvoi~dulla^@204~ h = 20
        End Sub
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Function NewProductsRow~dulla^@204~ sRow
            Return CType(Me.New~dulla^@204~ ow)
        End Function
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Protected Overrides Function~dulla^@204~ ilder(ByVal builder As System.Data.Da~dulla^@204~  As System.Data.DataRow
            ~dulla^@204~ oductsRow(builder)
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Protected Ove~dulla^@204~ on GetRowType() As System.Type
     ~dulla^@204~  GetType(ProductsRow)
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Protected ~dulla^@204~  OnRowChanged(ByVal e As System.Data.~dulla^@204~ EventArgs)
            MyBase.OnRowC~dulla^@204~           If (Not (Me.ProductsRowChan~dulla^@204~ Nothing) Then
                RaiseE~dulla^@204~ RowChanged(Me, New ProductsRowChangeE~dulla^@204~ Row,ProductsRow), e.Action))
       ~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ rotected Overrides Sub OnRowChanging(~dulla^@204~ stem.Data.DataRowChangeEventArgs)
  ~dulla^@204~ ase.OnRowChanging(e)
            If ~dulla^@204~ uctsRowChangingEvent) Is Nothing) The~dulla^@204~       RaiseEvent ProductsRowChanging(~dulla^@204~ ctsRowChangeEvent(CType(e.Row,Product~dulla^@204~ on))
            End If
        End~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Protected Ov~dulla^@204~ nRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.~dulla^@204~ e)
            If (Not (Me.ProductsR~dulla^@204~ t) Is Nothing) Then
                ~dulla^@204~ oductsRowDeleted(Me, New ProductsRowC~dulla^@204~ ype(e.Row,ProductsRow), e.Action))
 ~dulla^@204~ d If
        End Sub
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Protected Overrides Sub OnRowDel~dulla^@204~  As System.Data.DataRowChangeEventArg~dulla^@204~    MyBase.OnRowDeleting(e)
         ~dulla^@204~ e.ProductsRowDeletingEvent) Is Nothin~dulla^@204~             RaiseEvent ProductsRowDel~dulla^@204~  ProductsRowChangeEvent(CType(e.Row,P~dulla^@204~ e.Action))
            End If
     ~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ oductsRow(ByVal row As ProductsRow)
~dulla^@204~ e.Rows.Remove(row)
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Shared Func~dulla^@204~ TableSchema(ByVal xs As System.Xml.Sc~dulla^@204~ aSet) As System.Xml.Schema.XmlSchemaC~dulla^@204~            Dim type As System.Xml.Sch~dulla^@204~ ComplexType = New System.Xml.Schema.X~dulla^@204~ exType
            Dim sequence As S~dulla^@204~ ema.XmlSchemaSequence = New System.Xm~dulla^@204~ chemaSequence
            Dim ds As ~dulla^@204~ aSet = New Prod4SalesDataSet
       ~dulla^@204~ s.GetSchemaSerializable)
           ~dulla^@204~ System.Xml.Schema.XmlSchemaAny = New ~dulla^@204~ hema.XmlSchemaAny
            any1.N~dulla^@204~ ttp://www.w3.org/2001/XMLSchema"
   ~dulla^@204~ .MinOccurs = New Decimal(0)
        ~dulla^@204~ ccurs = Decimal.MaxValue
           ~dulla^@204~ Contents = System.Xml.Schema.XmlSchem~dulla^@204~ ssing.Lax
            sequence.Items~dulla^@204~            Dim any2 As System.Xml.Sch~dulla^@204~ Any = New System.Xml.Schema.XmlSchema~dulla^@204~     any2.Namespace = "urn:schemas-mic~dulla^@204~ l-diffgram-v1"
            any2.MinO~dulla^@204~ ecimal(1)
            any2.ProcessCo~dulla^@204~ em.Xml.Schema.XmlSchemaContentProcess~dulla^@204~         sequence.Items.Add(any2)
   ~dulla^@204~ attribute1 As System.Xml.Schema.XmlSc~dulla^@204~  = New System.Xml.Schema.XmlSchemaAtt~dulla^@204~        attribute1.Name = "namespace"~dulla^@204~ attribute1.FixedValue = ds.Namespace~dulla^@204~ type.Attributes.Add(attribute1)
    ~dulla^@204~ ttribute2 As System.Xml.Schema.XmlSch~dulla^@204~ = New System.Xml.Schema.XmlSchemaAttr~dulla^@204~       attribute2.Name = "tableTypeNam~dulla^@204~    attribute2.FixedValue = "ProductsD~dulla^@204~           type.Attributes.Add(attribu~dulla^@204~      type.Particle = sequence
      ~dulla^@204~ type
        End Function
    End C~dulla^@204~    <System.CodeDom.Compiler.Generated~dulla^@204~ ("System.Data.Design.TypedDataSetGene~dulla^@204~ 0.0")>  _
    Partial Public Class P~dulla^@204~        Inherits System.Data.DataRow
~dulla^@204~      Private tableProducts As Product~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Friend~dulla^@204~ l rb As System.Data.DataRowBuilder)
~dulla^@204~ yBase.New(rb)
            Me.tablePr~dulla^@204~ e(Me.Table,ProductsDataTable)
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ No() As String
            Get
    ~dulla^@204~ eturn CType(Me(Me.tableProducts.PartN~dulla^@204~ ng)
            End Get
           ~dulla^@204~          Me(Me.tableProducts.PartNoCo~dulla^@204~ 
            End Set
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Pro~dulla^@204~ tion() As String
            Get
  ~dulla^@204~  Return CType(Me(Me.tableProducts.Des~dulla^@204~ n),String)
            End Get
    ~dulla^@204~                 Me(Me.tableProducts.D~dulla^@204~ umn) = value
            End Set
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ erty Price() As String
            G~dulla^@204~        Return CType(Me(Me.tableProduc~dulla^@204~ n),String)
            End Get
    ~dulla^@204~                 Me(Me.tableProducts.P~dulla^@204~  value
            End Set
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ ellingPrice1() As String
           ~dulla^@204~          Try 
                    Re~dulla^@204~ (Me.tableProducts.SellingPrice1Column~dulla^@204~               Catch e As System.Inval~dulla^@204~ on
                    Throw New Sys~dulla^@204~ ngTypingException("The value for colu~dulla^@204~ ice1' in table 'Products' is DBNull."~dulla^@204~          End Try
            End Get~dulla^@204~  Set
                Me(Me.tableProd~dulla^@204~ rice1Column) = value
            End~dulla^@204~  End Property
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Property SellingPrice2() As Strin~dulla^@204~   Get
                Try 
        ~dulla^@204~ eturn CType(Me(Me.tableProducts.Selli~dulla^@204~ n),String)
                Catch e A~dulla^@204~ lidCastException
                   ~dulla^@204~ stem.Data.StrongTypingException("The ~dulla^@204~ umn 'SellingPrice2' in table 'Product~dulla^@204~ ", e)
                End Try
     ~dulla^@204~ t
            Set
                M~dulla^@204~ ducts.SellingPrice2Column) = value
 ~dulla^@204~ d Set
        End Property
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Property QtyAtShop1~dulla^@204~ 
            Get
                Try~dulla^@204~           Return CType(Me(Me.tablePro~dulla^@204~ op1Column),String)
                C~dulla^@204~ tem.InvalidCastException
           ~dulla^@204~ w New System.Data.StrongTypingExcepti~dulla^@204~  for column 'QtyAtShop1' in table 'Pr~dulla^@204~ Null.", e)
                End Try
~dulla^@204~ nd Get
            Set
            ~dulla^@204~ leProducts.QtyAtShop1Column) = value~dulla^@204~ End Set
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Property QtyAtSho~dulla^@204~ g
            Get
                T~dulla^@204~             Return CType(Me(Me.tableP~dulla^@204~ Shop2Column),String)
               ~dulla^@204~ ystem.InvalidCastException
         ~dulla^@204~ row New System.Data.StrongTypingExcep~dulla^@204~ ue for column 'QtyAtShop2' in table '~dulla^@204~ DBNull.", e)
                End Try~dulla^@204~  End Get
            Set
          ~dulla^@204~ ableProducts.QtyAtShop2Column) = valu~dulla^@204~   End Set
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Property QtyAtS~dulla^@204~ ing
            Get
               ~dulla^@204~               Return CType(Me(Me.tabl~dulla^@204~ AtStoreColumn),String)
             ~dulla^@204~  System.InvalidCastException
       ~dulla^@204~ Throw New System.Data.StrongTypingExc~dulla^@204~ alue for column 'QtyAtStore' in table~dulla^@204~ s DBNull.", e)
                End T~dulla^@204~    End Get
            Set
        ~dulla^@204~ .tableProducts.QtyAtStoreColumn) = va~dulla^@204~     End Set
        End Property
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Property Tota~dulla^@204~ s String
            Get
          ~dulla^@204~ CType(Me(Me.tableProducts.TotalQuanti~dulla^@204~ ing)
            End Get
          ~dulla^@204~           Me(Me.tableProducts.TotalQu~dulla^@204~  = value
            End Set
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  ReorderLevel() As String
          ~dulla^@204~           Try 
                    R~dulla^@204~ e(Me.tableProducts.ReorderLevelColumn~dulla^@204~               Catch e As System.Inval~dulla^@204~ on
                    Throw New Sys~dulla^@204~ ngTypingException("The value for colu~dulla^@204~ vel' in table 'Products' is DBNull.",~dulla^@204~         End Try
            End Get
            Set
                Me(Me.ta~dulla^@204~ eorderLevelColumn) = value
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Property ShelfNo() As Strin~dulla^@204~   Get
                Try 
        ~dulla^@204~ eturn CType(Me(Me.tableProducts.Shelf~dulla^@204~ ing)
                Catch e As Syst~dulla^@204~ tException
                    Throw~dulla^@204~ ata.StrongTypingException("The value ~dulla^@204~ helfNo' in table 'Products' is DBNull~dulla^@204~            End Try
            End G~dulla^@204~    Set
                Me(Me.tablePr~dulla^@204~ oColumn) = value
            End Set~dulla^@204~  Property
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Property PInvoiceNo() As String
    ~dulla^@204~                 Return CType(Me(Me.ta~dulla^@204~ InvoiceNoColumn),String)
           ~dulla^@204~          Set
                Me(Me.t~dulla^@204~ PInvoiceNoColumn) = value
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Function IsSellingPrice1Null~dulla^@204~ 
            Return Me.IsNull(Me.tab~dulla^@204~ llingPrice1Column)
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Sub Se~dulla^@204~ 1Null()
            Me(Me.tableProdu~dulla^@204~ ice1Column) = System.Convert.DBNull
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ n IsSellingPrice2Null() As Boolean
 ~dulla^@204~ turn Me.IsNull(Me.tableProducts.Selli~dulla^@204~ n)
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public Sub SetSellingPrice2Nu~dulla^@204~      Me(Me.tableProducts.SellingPrice~dulla^@204~ stem.Convert.DBNull
        End Sub~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Function I~dulla^@204~ ll() As Boolean
            Return M~dulla^@204~ ableProducts.QtyAtShop1Column)
     ~dulla^@204~ on
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ QtyAtShop1Null()
            Me(Me.t~dulla^@204~ QtyAtShop1Column) = System.Convert.DB~dulla^@204~  End Sub
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ unction IsQtyAtShop2Null() As Boolean~dulla^@204~  Return Me.IsNull(Me.tableProducts.Qt~dulla^@204~ n)
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public Sub SetQtyAtShop2Null(~dulla^@204~   Me(Me.tableProducts.QtyAtShop2Colum~dulla^@204~ onvert.DBNull
        End Sub
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Function IsQtyAt~dulla^@204~ s Boolean
            Return Me.IsNu~dulla^@204~ oducts.QtyAtStoreColumn)
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ toreNull()
            Me(Me.tablePr~dulla^@204~ toreColumn) = System.Convert.DBNull
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ n IsReorderLevelNull() As Boolean
  ~dulla^@204~ urn Me.IsNull(Me.tableProducts.Reorde~dulla^@204~ 
        End Function
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Sub SetReorderLevelNull(~dulla^@204~   Me(Me.tableProducts.ReorderLevelCol~dulla^@204~ .Convert.DBNull
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public Function IsShe~dulla^@204~  Boolean
            Return Me.IsNul~dulla^@204~ ducts.ShelfNoColumn)
        End Fun~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Sub ~dulla^@204~ l()
            Me(Me.tableProducts.~dulla^@204~ ) = System.Convert.DBNull
        En~dulla^@204~ d Class
    
    <System.CodeDom.Co~dulla^@204~ tedCodeAttribute("System.Data.Design.~dulla^@204~ enerator", "2.0.0.0")>  _
    Public~dulla^@204~ tsRowChangeEvent
        Inherits Sy~dulla^@204~ s
        
        Private eventRow~dulla^@204~ ow
        
        Private eventAc~dulla^@204~ m.Data.DataRowAction
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Sub New(ByVal row As Produ~dulla^@204~  action As System.Data.DataRowAction)~dulla^@204~  MyBase.New
            Me.eventRow ~dulla^@204~       Me.eventAction = action
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ erty Row() As ProductsRow
          ~dulla^@204~           Return Me.eventRow
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public ReadOnly Property Action(~dulla^@204~ ata.DataRowAction
            Get
 ~dulla^@204~   Return Me.eventAction
            ~dulla^@204~     End Property
    End Class
End ~dulla^@204~ space Prod4SalesDataSetTableAdapters~dulla^@204~ ystem.CodeDom.Compiler.GeneratedCodeA~dulla^@204~ tem.Data.Design.TypedDataSetGenerator~dulla^@204~ ,  _
     System.ComponentModel.Desi~dulla^@204~ ttribute("code"),  _
     System.Com~dulla^@204~ oolboxItem(true),  _
     System.Com~dulla^@204~ ataObjectAttribute(true),  _
     Sy~dulla^@204~ tModel.DesignerAttribute("Microsoft.V~dulla^@204~ aSource.Design.TableAdapterDesigner, ~dulla^@204~ esigner"& _ 
        ", Version=8.0.~dulla^@204~ neutral, PublicKeyToken=b03f5f7f11d50~dulla^@204~    System.ComponentModel.Design.HelpK~dulla^@204~ te("vs.data.TableAdapter")>  _
    P~dulla^@204~  Class ProductsTableAdapter
        ~dulla^@204~ em.ComponentModel.Component
        ~dulla^@204~ vate WithEvents _adapter As System.Da~dulla^@204~ SqlDataAdapter
        
        Pri~dulla^@204~ ion As System.Data.SqlClient.SqlConne~dulla^@204~   
        Private _commandCollectio~dulla^@204~ .Data.SqlClient.SqlCommand
        ~dulla^@204~ ate _clearBeforeFill As Boolean
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Sub New()
    ~dulla^@204~ e.New
            Me.ClearBeforeFill~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ te ReadOnly Property Adapter() As Sys~dulla^@204~ lient.SqlDataAdapter
            Get~dulla^@204~      If (Me._adapter Is Nothing) Then~dulla^@204~          Me.InitAdapter
            ~dulla^@204~                Return Me._adapter
  ~dulla^@204~  Get
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Friend Property Connection(~dulla^@204~ ata.SqlClient.SqlConnection
        ~dulla^@204~             If (Me._connection Is Not~dulla^@204~                    Me.InitConnection~dulla^@204~     End If
                Return Me~dulla^@204~ 
            End Get
            Set~dulla^@204~      Me._connection = value
        ~dulla^@204~ ot (Me.Adapter.InsertCommand) Is Noth~dulla^@204~                   Me.Adapter.InsertCo~dulla^@204~ ion = value
                End If
~dulla^@204~    If (Not (Me.Adapter.DeleteCommand)~dulla^@204~ Then
                    Me.Adapter.~dulla^@204~ .Connection = value
                ~dulla^@204~            If (Not (Me.Adapter.Update~dulla^@204~ othing) Then
                    Me.~dulla^@204~ eCommand.Connection = value
        ~dulla^@204~ f
                Dim i As Integer =~dulla^@204~        Do While (i < Me.CommandCollec~dulla^@204~ 
                    If (Not (Me.Comm~dulla^@204~ (i)) Is Nothing) Then
              ~dulla^@204~ pe(Me.CommandCollection(i),System.Dat~dulla^@204~ qlCommand).Connection = value
      ~dulla^@204~  End If
                    i = (i +~dulla^@204~         Loop
            End Set
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ eadOnly Property CommandCollection() ~dulla^@204~ a.SqlClient.SqlCommand()
            Get
                If (Me._commandColle~dulla^@204~ ing) Then
                    Me.Ini~dulla^@204~ ction
                End If
      ~dulla^@204~ urn Me._commandCollection
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Property ClearBeforeFill() A~dulla^@204~           Get
                Return~dulla^@204~ oreFill
            End Get
       ~dulla^@204~              Me._clearBeforeFill = va~dulla^@204~     End Set
        End Property
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Private Sub InitAdap~dulla^@204~       Me._adapter = New System.Data.S~dulla^@204~ ataAdapter
            Dim tableMapp~dulla^@204~ .Data.Common.DataTableMapping = New S~dulla^@204~ mmon.DataTableMapping
            ta~dulla^@204~ urceTable = "Table"
            tabl~dulla^@204~ SetTable = "Products"
            ta~dulla^@204~ lumnMappings.Add("PartNo", "PartNo")~dulla^@204~ tableMapping.ColumnMappings.Add("Desc~dulla^@204~ scription")
            tableMapping~dulla^@204~ gs.Add("Price", "Price")
           ~dulla^@204~ .ColumnMappings.Add("SellingPrice1", ~dulla^@204~ 1")
            tableMapping.ColumnM~dulla^@204~ SellingPrice2", "SellingPrice2")
   ~dulla^@204~ eMapping.ColumnMappings.Add("QtyAtSho~dulla^@204~ op1")
            tableMapping.Colum~dulla^@204~ ("QtyAtShop2", "QtyAtShop2")
       ~dulla^@204~ ping.ColumnMappings.Add("QtyAtStore",~dulla^@204~ )
            tableMapping.ColumnMap~dulla^@204~ talQuantity", "TotalQuantity")
     ~dulla^@204~ apping.ColumnMappings.Add("ReorderLev~dulla^@204~ Level")
            tableMapping.Col~dulla^@204~ dd("ShelfNo", "ShelfNo")
           ~dulla^@204~ .ColumnMappings.Add("PInvoiceNo", "PI~dulla^@204~            Me._adapter.TableMappings.~dulla^@204~ ing)
            Me._adapter.DeleteC~dulla^@204~ System.Data.SqlClient.SqlCommand
   ~dulla^@204~ adapter.DeleteCommand.Connection = Me~dulla^@204~             Me._adapter.DeleteCommand~dulla^@204~ = "DELETE FROM [dbo].[Products] WHERE~dulla^@204~  @Original_PartNo) AND ([Descripti"& ~dulla^@204~        "on] = @Original_Description) ~dulla^@204~ = @Original_Price) AND ((@IsNull_Sell~dulla^@204~            "ngPrice1 = 1 AND [Selling~dulla^@204~ LL) OR ([SellingPrice1] = @Original_S~dulla^@204~                "gPrice1)) AND ((@IsNu~dulla^@204~ ce2 = 1 AND [SellingPrice2] IS NULL) ~dulla^@204~  
                "ingPrice2] = @Ori~dulla^@204~ Price2)) AND ((@IsNull_QtyAtShop1 = 1~dulla^@204~ "& _ 
                "op1] IS NULL)~dulla^@204~ op1] = @Original_QtyAtShop1)) AND ((@~dulla^@204~ hop2"& _ 
                " = 1 AND ~dulla^@204~ IS NULL) OR ([QtyAtShop2] = @Original~dulla^@204~  AND ((@"& _ 
                "IsNul~dulla^@204~ = 1 AND [QtyAtStore] IS NULL) OR ([Qt~dulla^@204~ Original_Qty"& _ 
                "A~dulla^@204~ ([TotalQuantity] = @Original_TotalQua~dulla^@204~ @IsNull_ReorderL"& _ 
              ~dulla^@204~ ND [ReorderLevel] IS NULL) OR ([Reord~dulla^@204~ riginal_ReorderLevel"& _ 
          ~dulla^@204~  ((@IsNull_ShelfNo = 1 AND [ShelfNo] ~dulla^@204~ [ShelfNo] = @Original_Sh"& _ 
      ~dulla^@204~ fNo)) AND ([PInvoiceNo] = @Original_P~dulla^@204~ 
            Me._adapter.DeleteComman~dulla^@204~  = System.Data.CommandType.Text
    ~dulla^@204~ dapter.DeleteCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@Original_P~dulla^@204~ m.Data.SqlDbType.NVarChar, 0, System.~dulla^@204~ rDirection.Input, 0, 0, "PartNo", Sys~dulla^@204~ RowVersion.Original, false, Nothing, ~dulla^@204~ 
            Me._adapter.DeleteComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ nal_Description", System.Data.SqlDbTy~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ ription", System.Data.DataRowVersion.~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .DeleteCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@Original_Price",~dulla^@204~ SqlDbType.[Char], 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "Price", System.Data.D~dulla^@204~ .Original, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.DeleteCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Is~dulla^@204~ rice1", System.Data.SqlDbType.Int, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Sell~dulla^@204~ ystem.Data.DataRowVersion.Original, t~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Original_SellingPrice1", Sys~dulla^@204~ bType.[Char], 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "SellingPrice1", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.DeleteCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ ingPrice2", System.Data.SqlDbType.Int~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@Original_SellingPrice2",~dulla^@204~ SqlDbType.[Char], 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "SellingPrice2", Syste~dulla^@204~ wVersion.Original, false, Nothing, ""~dulla^@204~            Me._adapter.DeleteCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ QtyAtShop1", System.Data.SqlDbType.In~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Original_QtyAtShop1", Syst~dulla^@204~ Type.[Char], 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "QtyAtShop1", System.Data.D~dulla^@204~ .Original, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.DeleteCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Is~dulla^@204~ p2", System.Data.SqlDbType.Int, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "QtyAtSh~dulla^@204~ Data.DataRowVersion.Original, true, N~dulla^@204~ ", ""))
            Me._adapter.Dele~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@Original_QtyAtShop2", System.Data.~dulla^@204~ ar], 0, System.Data.ParameterDirectio~dulla^@204~ , "QtyAtShop2", System.Data.DataRowVe~dulla^@204~ l, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.DeleteCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@IsNull_Qty~dulla^@204~ tem.Data.SqlDbType.Int, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "QtyAtStore", Sy~dulla^@204~ aRowVersion.Original, true, Nothing, ~dulla^@204~ 
            Me._adapter.DeleteComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ nal_QtyAtStore", System.Data.SqlDbTyp~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ Store", System.Data.DataRowVersion.Or~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ eleteCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@Original_TotalQuan~dulla^@204~ .Data.SqlDbType.[Char], 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "TotalQuantity",~dulla^@204~ DataRowVersion.Original, false, Nothi~dulla^@204~ "))
            Me._adapter.DeleteCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ sNull_ReorderLevel", System.Data.SqlD~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ derLevel", System.Data.DataRowVersion~dulla^@204~ ue, Nothing, "", "", ""))
          ~dulla^@204~ .DeleteCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@Original_Reorder~dulla^@204~ m.Data.SqlDbType.[Char], 0, System.Da~dulla^@204~ irection.Input, 0, 0, "ReorderLevel",~dulla^@204~ DataRowVersion.Original, false, Nothi~dulla^@204~ "))
            Me._adapter.DeleteCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ sNull_ShelfNo", System.Data.SqlDbType~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Original_ShelfNo", System.~dulla^@204~ e.NVarChar, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "ShelfNo", System.Data.DataRowVersion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.DeleteCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ nvoiceNo", System.Data.SqlDbType.NVar~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ o", System.Data.DataRowVersion.Origin~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ tCommand = New System.Data.SqlClient.~dulla^@204~            Me._adapter.InsertCommand.~dulla^@204~ Me.Connection
            Me._adapte~dulla^@204~ nd.CommandText = "INSERT INTO [dbo].[~dulla^@204~ artNo], [Description], [Price], [Sell~dulla^@204~ & _ 
                "[SellingPrice2~dulla^@204~ 1], [QtyAtShop2], [QtyAtStore], [Tota~dulla^@204~ Reo"& _ 
                "rderLevel]~dulla^@204~ [PInvoiceNo]) VALUES (@PartNo, @Descr~dulla^@204~ e, @Sel"& _ 
                "lingPr~dulla^@204~ gPrice2, @QtyAtShop1, @QtyAtShop2, @Q~dulla^@204~ otalQuantit"& _ 
                "y,~dulla^@204~ l, @ShelfNo, @PInvoiceNo);"&Global.Mi~dulla^@204~ lBasic.ChrW(13)&Global.Microsoft.Visu~dulla^@204~ 10)&"SELECT PartNo, Description, Pric~dulla^@204~                "llingPrice1, SellingP~dulla^@204~ hop1, QtyAtShop2, QtyAtStore, TotalQu~dulla^@204~  
                "eorderLevel, Shel~dulla^@204~ No FROM Products WHERE (PartNo = @Par~dulla^@204~       Me._adapter.InsertCommand.Comma~dulla^@204~ em.Data.CommandType.Text
           ~dulla^@204~ InsertCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@PartNo", System.D~dulla^@204~ .NVarChar, 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "PartNo", System.Data.DataRow~dulla^@204~ nt, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.InsertCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Descripti~dulla^@204~ ata.SqlDbType.[Char], 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "Description", Sys~dulla^@204~ RowVersion.Current, false, Nothing, "~dulla^@204~             Me._adapter.InsertCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ , System.Data.SqlDbType.[Char], 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "Price",~dulla^@204~ DataRowVersion.Current, false, Nothin~dulla^@204~ ))
            Me._adapter.InsertCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ llingPrice1", System.Data.SqlDbType.[~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ rice1", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ sertCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@SellingPrice2", Sys~dulla^@204~ bType.[Char], 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "SellingPrice2", System.Da~dulla^@204~ sion.Current, false, Nothing, "", "",~dulla^@204~       Me._adapter.InsertCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~  System.Data.SqlDbType.[Char], 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "QtyAtSho~dulla^@204~ ata.DataRowVersion.Current, false, No~dulla^@204~ , ""))
            Me._adapter.Inser~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@QtyAtShop2", System.Data.SqlDbType.~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ op2", System.Data.DataRowVersion.Curr~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ rtCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@QtyAtStore", System.D~dulla^@204~ .[Char], 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "QtyAtStore", System.Data.DataR~dulla^@204~ rent, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.InsertCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@TotalQu~dulla^@204~ em.Data.SqlDbType.[Char], 0, System.D~dulla^@204~ Direction.Input, 0, 0, "TotalQuantity~dulla^@204~ a.DataRowVersion.Current, false, Noth~dulla^@204~ ""))
            Me._adapter.InsertC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ ReorderLevel", System.Data.SqlDbType.~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ Level", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ sertCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@ShelfNo", System.Da~dulla^@204~ NVarChar, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "ShelfNo", System.Data.DataRow~dulla^@204~ nt, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.InsertCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@PInvoiceN~dulla^@204~ ta.SqlDbType.NVarChar, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "PInvoiceNo", Sys~dulla^@204~ RowVersion.Current, false, Nothing, "~dulla^@204~             Me._adapter.UpdateCommand~dulla^@204~ .Data.SqlClient.SqlCommand
         ~dulla^@204~ r.UpdateCommand.Connection = Me.Conne~dulla^@204~       Me._adapter.UpdateCommand.Comma~dulla^@204~ ATE [dbo].[Products] SET [PartNo] = @~dulla^@204~ ription] = @Description, [Pr"& _ 
  ~dulla^@204~  "ice] = @Price, [SellingPrice1] = @S~dulla^@204~  [SellingPrice2] = @SellingPrice"& _ ~dulla^@204~      "2, [QtyAtShop1] = @QtyAtShop1, ~dulla^@204~ = @QtyAtShop2, [QtyAtStore] = @QtyAt"~dulla^@204~          "Store, [TotalQuantity] = @T~dulla^@204~  [ReorderLevel] = @ReorderLevel, [She~dulla^@204~              "o] = @ShelfNo, [PInvoic~dulla^@204~ iceNo WHERE (([PartNo] = @Original_Pa~dulla^@204~ 
                "ND ([Description] =~dulla^@204~ scription) AND ([Price] = @Original_P~dulla^@204~  _ 
                "(@IsNull_Sellin~dulla^@204~ ND [SellingPrice1] IS NULL) OR ([Sell~dulla^@204~ @O"& _ 
                "riginal_Sel~dulla^@204~ AND ((@IsNull_SellingPrice2 = 1 AND [~dulla^@204~ ] IS N"& _ 
                "ULL) OR~dulla^@204~ ce2] = @Original_SellingPrice2)) AND ~dulla^@204~ AtShop1 = "& _ 
                "1 A~dulla^@204~ 1] IS NULL) OR ([QtyAtShop1] = @Origi~dulla^@204~ 1)) AND ((@IsN"& _ 
                ~dulla^@204~ p2 = 1 AND [QtyAtShop2] IS NULL) OR (~dulla^@204~ = @Original_QtyAtS"& _ 
            ~dulla^@204~ ND ((@IsNull_QtyAtStore = 1 AND [QtyA~dulla^@204~ LL) OR ([QtyAtStore] ="& _ 
        ~dulla^@204~ iginal_QtyAtStore)) AND ([TotalQuanti~dulla^@204~ al_TotalQuantity) AND ((@I"& _ 
    ~dulla^@204~ sNull_ReorderLevel = 1 AND [ReorderLe~dulla^@204~  OR ([ReorderLevel] = @Origina"& _ 
~dulla^@204~    "l_ReorderLevel)) AND ((@IsNull_Sh~dulla^@204~  [ShelfNo] IS NULL) OR ([ShelfNo] "& ~dulla^@204~        "= @Original_ShelfNo)) AND ([P~dulla^@204~ @Original_PInvoiceNo));"&Global.Micro~dulla^@204~ sic.ChrW(13)&Global.Microsoft.VisualB~dulla^@204~ &"SELECT PartNo"& _ 
               ~dulla^@204~ on, Price, SellingPrice1, SellingPric~dulla^@204~ 1, QtyAtShop2, QtyA"& _ 
           ~dulla^@204~  TotalQuantity, ReorderLevel, ShelfNo~dulla^@204~ FROM Products WHERE (Pa"& _ 
       ~dulla^@204~ o = @PartNo)"
            Me._adapte~dulla^@204~ nd.CommandType = System.Data.CommandT~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ System.Data.SqlDbType.NVarChar, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "PartNo"~dulla^@204~ .DataRowVersion.Current, false, Nothi~dulla^@204~ "))
            Me._adapter.UpdateCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ escription", System.Data.SqlDbType.[C~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ on", System.Data.DataRowVersion.Curre~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@Price", System.Data.Sq~dulla^@204~ ], 0, System.Data.ParameterDirection.~dulla^@204~ "Price", System.Data.DataRowVersion.C~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ pdateCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@SellingPrice1", Sy~dulla^@204~ DbType.[Char], 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "SellingPrice1", System.D~dulla^@204~ rsion.Current, false, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ e2", System.Data.SqlDbType.[Char], 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Sell~dulla^@204~ ystem.Data.DataRowVersion.Current, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.SqlClient.SqlParameter("@QtyAtShop1", System.~dulla^@204~ e.[Char], 0, System.Data.ParameterDir~dulla^@204~  0, 0, "QtyAtShop1", System.Data.Data~dulla^@204~ rrent, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.UpdateCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@QtyAtS~dulla^@204~ .Data.SqlDbType.[Char], 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "QtyAtShop2", Sy~dulla^@204~ aRowVersion.Current, false, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ Store", System.Data.SqlDbType.[Char],~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "Q~dulla^@204~ ystem.Data.DataRowVersion.Current, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@TotalQuantity", System.Data.~dulla^@204~ ar], 0, System.Data.ParameterDirectio~dulla^@204~ , "TotalQuantity", System.Data.DataRo~dulla^@204~ ent, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.UpdateCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@ReorderL~dulla^@204~ .Data.SqlDbType.[Char], 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "ReorderLevel", ~dulla^@204~ ataRowVersion.Current, false, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ lfNo", System.Data.SqlDbType.NVarChar~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ tem.Data.DataRowVersion.Current, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@PInvoiceNo", System.Data.SqlDb~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ PInvoiceNo", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Original_PartN~dulla^@204~ ta.SqlDbType.NVarChar, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "PartNo", System.~dulla^@204~ ersion.Original, false, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ Description", System.Data.SqlDbType.[~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ ion", System.Data.DataRowVersion.Orig~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@Original_Price", Sys~dulla^@204~ bType.[Char], 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "Price", System.Data.DataR~dulla^@204~ ginal, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.UpdateCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@IsNull~dulla^@204~ 1", System.Data.SqlDbType.Int, 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "SellingP~dulla^@204~ m.Data.DataRowVersion.Original, true,~dulla^@204~  "", ""))
            Me._adapter.Up~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@Original_SellingPrice1", System.~dulla^@204~ e.[Char], 0, System.Data.ParameterDir~dulla^@204~  0, 0, "SellingPrice1", System.Data.D~dulla^@204~ .Original, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.UpdateCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Is~dulla^@204~ rice2", System.Data.SqlDbType.Int, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Sell~dulla^@204~ ystem.Data.DataRowVersion.Original, t~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Original_SellingPrice2", Sys~dulla^@204~ bType.[Char], 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "SellingPrice2", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ tShop1", System.Data.SqlDbType.Int, 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Qty~dulla^@204~ tem.Data.DataRowVersion.Original, tru~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Original_QtyAtShop1", System.D~dulla^@204~ .[Char], 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "QtyAtShop1", System.Data.DataR~dulla^@204~ ginal, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.UpdateCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@IsNull~dulla^@204~  System.Data.SqlDbType.Int, 0, System~dulla^@204~ erDirection.Input, 0, 0, "QtyAtShop2"~dulla^@204~ .DataRowVersion.Original, true, Nothi~dulla^@204~ "))
            Me._adapter.UpdateCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ riginal_QtyAtShop2", System.Data.SqlD~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ tyAtShop2", System.Data.DataRowVersio~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@IsNull_QtyAtSt~dulla^@204~ Data.SqlDbType.Int, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "QtyAtStore", System~dulla^@204~ Version.Original, true, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ QtyAtStore", System.Data.SqlDbType.[C~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ e", System.Data.DataRowVersion.Origin~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@Original_TotalQuantity~dulla^@204~ a.SqlDbType.[Char], 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "TotalQuantity", Sys~dulla^@204~ RowVersion.Original, false, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ l_ReorderLevel", System.Data.SqlDbTyp~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ evel", System.Data.DataRowVersion.Ori~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@Original_ReorderLeve~dulla^@204~ ta.SqlDbType.[Char], 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "ReorderLevel", Sys~dulla^@204~ RowVersion.Original, false, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ l_ShelfNo", System.Data.SqlDbType.Int~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ tem.Data.DataRowVersion.Original, tru~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Original_ShelfNo", System.Data~dulla^@204~ arChar, 0, System.Data.ParameterDirec~dulla^@204~ , 0, "ShelfNo", System.Data.DataRowVe~dulla^@204~ l, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@Original_P~dulla^@204~ ystem.Data.SqlDbType.NVarChar, 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "PInvoice~dulla^@204~ ata.DataRowVersion.Original, false, N~dulla^@204~ ", ""))
        End Sub
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Private Sub InitConnection()~dulla^@204~ Me._connection = New System.Data.SqlC~dulla^@204~ ection
            Me._connection.Co~dulla^@204~ g = Global.InventoryControlSystem.My.~dulla^@204~ fault.PurchaseInfoConnection
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Private ~dulla^@204~ ndCollection()
            Me._comma~dulla^@204~ = New System.Data.SqlClient.SqlComman~dulla^@204~         Me._commandCollection(0) = Ne~dulla^@204~ .SqlClient.SqlCommand
            Me~dulla^@204~ ection(0).Connection = Me.Connection~dulla^@204~ Me._commandCollection(0).CommandText ~dulla^@204~ tNo, Description, Price, SellingPrice~dulla^@204~ ce2, QtyAtShop1, QtyA"& _ 
         ~dulla^@204~ 2, QtyAtStore, TotalQuantity, Reorder~dulla^@204~ o, PInvoiceNo FROM dbo.Pr"& _ 
     ~dulla^@204~ ducts"
            Me._commandCollec~dulla^@204~ ndType = System.Data.CommandType.Text~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute(),  _
       ~dulla^@204~ onentModel.Design.HelpKeywordAttribut~dulla^@204~ bleAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(Syst~dulla^@204~ odel.DataObjectMethodType.Fill, true)~dulla^@204~  Public Overloads Overridable Functio~dulla^@204~ dataTable As Prod4SalesDataSet.Produc~dulla^@204~ As Integer
            Me.Adapter.Se~dulla^@204~  Me.CommandCollection(0)
           ~dulla^@204~ BeforeFill = true) Then
            ~dulla^@204~ .Clear
            End If
         ~dulla^@204~ Value As Integer = Me.Adapter.Fill(da~dulla^@204~          Return returnValue
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute(),  _
         Sys~dulla^@204~ Model.Design.HelpKeywordAttribute("vs~dulla^@204~ apter"),  _
         System.Componen~dulla^@204~ jectMethodAttribute(System.ComponentM~dulla^@204~ ctMethodType.[Select], true)>  _
   ~dulla^@204~ verloads Overridable Function GetData~dulla^@204~ lesDataSet.ProductsDataTable
       ~dulla^@204~ er.SelectCommand = Me.CommandCollecti~dulla^@204~       Dim dataTable As Prod4SalesData~dulla^@204~ ataTable = New Prod4SalesDataSet.Prod~dulla^@204~ 
            Me.Adapter.Fill(dataTab~dulla^@204~     Return dataTable
        End Fun~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute(),  _
         System.Com~dulla^@204~ esign.HelpKeywordAttribute("vs.data.T~dulla^@204~ >  _
        Public Overloads Overri~dulla^@204~ n Update(ByVal dataTable As Prod4Sale~dulla^@204~ uctsDataTable) As Integer
          ~dulla^@204~ dapter.Update(dataTable)
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute(),  _
         System~dulla^@204~ el.Design.HelpKeywordAttribute("vs.da~dulla^@204~ er")>  _
        Public Overloads Ov~dulla^@204~ ction Update(ByVal dataSet As Prod4Sa~dulla^@204~ s Integer
            Return Me.Adap~dulla^@204~ taSet, "Products")
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute(),  _
         System.Compo~dulla^@204~ ign.HelpKeywordAttribute("vs.data.Tab~dulla^@204~  _
        Public Overloads Overrida~dulla^@204~ Update(ByVal dataRow As System.Data.D~dulla^@204~ teger
            Return Me.Adapter.~dulla^@204~ stem.Data.DataRow() {dataRow})
     ~dulla^@204~ on
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute(),  _
         ~dulla^@204~ entModel.Design.HelpKeywordAttribute(~dulla^@204~ eAdapter")>  _
        Public Overlo~dulla^@204~ le Function Update(ByVal dataRows() A~dulla^@204~ .DataRow) As Integer
            Ret~dulla^@204~ r.Update(dataRows)
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute(),  _
         System.Compo~dulla^@204~ ign.HelpKeywordAttribute("vs.data.Tab~dulla^@204~  _
         System.ComponentModel.Da~dulla^@204~ dAttribute(System.ComponentModel.Data~dulla^@204~ ype.Delete, true)>  _
        Public~dulla^@204~ erridable Function Delete(ByVal Origi~dulla^@204~  String, ByVal Original_Description A~dulla^@204~ al Original_Price As String, ByVal Or~dulla^@204~ gPrice1 As String, ByVal Original_Sel~dulla^@204~  String, ByVal Original_QtyAtShop1 As~dulla^@204~ l Original_QtyAtShop2 As String, ByVa~dulla^@204~ yAtStore As String, ByVal Original_To~dulla^@204~ s String, ByVal Original_ReorderLevel~dulla^@204~ yVal Original_ShelfNo As String, ByVa~dulla^@204~ nvoiceNo As String) As Integer
     ~dulla^@204~ iginal_PartNo Is Nothing) Then
     ~dulla^@204~ row New System.ArgumentNullException(~dulla^@204~ tNo")
            Else
            ~dulla^@204~ r.DeleteCommand.Parameters(0).Value =~dulla^@204~ al_PartNo,String)
            End If~dulla^@204~  If (Original_Description Is Nothing)~dulla^@204~           Throw New System.ArgumentNu~dulla^@204~ Original_Description")
            E~dulla^@204~         Me.Adapter.DeleteCommand.Para~dulla^@204~ ue = CType(Original_Description,Strin~dulla^@204~    End If
            If (Original_P~dulla^@204~ ng) Then
                Throw New S~dulla^@204~ tNullException("Original_Price")
   ~dulla^@204~ 
                Me.Adapter.DeleteCo~dulla^@204~ ers(2).Value = CType(Original_Price,S~dulla^@204~        End If
            If (Origin~dulla^@204~ ce1 Is Nothing) Then
               ~dulla^@204~ eleteCommand.Parameters(3).Value = CT~dulla^@204~ 
                Me.Adapter.DeleteCo~dulla^@204~ ers(4).Value = System.DBNull.Value
 ~dulla^@204~ se
                Me.Adapter.Delete~dulla^@204~ eters(3).Value = CType(0,Object)
   ~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(4~dulla^@204~ pe(Original_SellingPrice1,String)
  ~dulla^@204~  If
            If (Original_Selling~dulla^@204~ hing) Then
                Me.Adapte~dulla^@204~ nd.Parameters(5).Value = CType(1,Obje~dulla^@204~         Me.Adapter.DeleteCommand.Para~dulla^@204~ ue = System.DBNull.Value
           ~dulla^@204~           Me.Adapter.DeleteCommand.Pa~dulla^@204~ alue = CType(0,Object)
             ~dulla^@204~ .DeleteCommand.Parameters(6).Value = ~dulla^@204~ l_SellingPrice2,String)
            ~dulla^@204~        If (Original_QtyAtShop1 Is Not~dulla^@204~                Me.Adapter.DeleteComma~dulla^@204~ (7).Value = CType(1,Object)
        ~dulla^@204~ apter.DeleteCommand.Parameters(8).Val~dulla^@204~ BNull.Value
            Else
      ~dulla^@204~ Adapter.DeleteCommand.Parameters(7).V~dulla^@204~ 0,Object)
                Me.Adapter~dulla^@204~ d.Parameters(8).Value = CType(Origina~dulla^@204~ String)
            End If
        ~dulla^@204~ nal_QtyAtShop2 Is Nothing) Then
    ~dulla^@204~ e.Adapter.DeleteCommand.Parameters(9)~dulla^@204~ e(1,Object)
                Me.Adapt~dulla^@204~ and.Parameters(10).Value = System.DBN~dulla^@204~           Else
                Me.Ad~dulla^@204~ ommand.Parameters(9).Value = CType(0,~dulla^@204~             Me.Adapter.DeleteCommand.~dulla^@204~ ).Value = CType(Original_QtyAtShop2,S~dulla^@204~        End If
            If (Origin~dulla^@204~  Is Nothing) Then
                Me~dulla^@204~ teCommand.Parameters(11).Value = CTyp~dulla^@204~                 Me.Adapter.DeleteComm~dulla^@204~ s(12).Value = System.DBNull.Value
  ~dulla^@204~ e
                Me.Adapter.DeleteC~dulla^@204~ ters(11).Value = CType(0,Object)
   ~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(1~dulla^@204~ ype(Original_QtyAtStore,String)
    ~dulla^@204~ f
            If (Original_TotalQuan~dulla^@204~ ng) Then
                Throw New S~dulla^@204~ tNullException("Original_TotalQuantit~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(13).Value = CType(Origina~dulla^@204~ ty,String)
            End If
     ~dulla^@204~ iginal_ReorderLevel Is Nothing) Then~dulla^@204~     Me.Adapter.DeleteCommand.Paramete~dulla^@204~ = CType(1,Object)
                Me~dulla^@204~ teCommand.Parameters(15).Value = Syst~dulla^@204~ ue
            Else
               ~dulla^@204~ eleteCommand.Parameters(14).Value = C~dulla^@204~ )
                Me.Adapter.DeleteC~dulla^@204~ ters(15).Value = CType(Original_Reord~dulla^@204~ g)
            End If
            I~dulla^@204~ helfNo Is Nothing) Then
            ~dulla^@204~ r.DeleteCommand.Parameters(16).Value ~dulla^@204~ ect)
                Me.Adapter.Dele~dulla^@204~ ameters(17).Value = System.DBNull.Val~dulla^@204~    Else
                Me.Adapter.D~dulla^@204~ Parameters(16).Value = CType(0,Object~dulla^@204~       Me.Adapter.DeleteCommand.Parame~dulla^@204~ e = CType(Original_ShelfNo,String)
 ~dulla^@204~ d If
            If (Original_PInvoi~dulla^@204~ ng) Then
                Throw New S~dulla^@204~ tNullException("Original_PInvoiceNo")~dulla^@204~  Else
                Me.Adapter.Del~dulla^@204~ rameters(18).Value = CType(Original_P~dulla^@204~ ing)
            End If
           ~dulla^@204~ ConnectionState As System.Data.Connec~dulla^@204~ e.Adapter.DeleteCommand.Connection.St~dulla^@204~     If ((Me.Adapter.DeleteCommand.Con~dulla^@204~  And System.Data.ConnectionState.Open~dulla^@204~                  <> System.Data.Conne~dulla^@204~ en) Then
                Me.Adapter.~dulla^@204~ .Connection.Open
            End If~dulla^@204~ Try 
                Dim returnValue~dulla^@204~  Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
~dulla^@204~ inally
                If (previousC~dulla^@204~ e = System.Data.ConnectionState.Close~dulla^@204~                 Me.Adapter.DeleteComm~dulla^@204~ n.Close
                End If
    ~dulla^@204~ ry
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~          System.ComponentModel.Design~dulla^@204~ ttribute("vs.data.TableAdapter"),  _~dulla^@204~ tem.ComponentModel.DataObjectMethodAt~dulla^@204~ m.ComponentModel.DataObjectMethodType~dulla^@204~ )>  _
        Public Overloads Overr~dulla^@204~ on Insert(ByVal PartNo As String, ByV~dulla^@204~ n As String, ByVal Price As String, B~dulla^@204~ rice1 As String, ByVal SellingPrice2 ~dulla^@204~ Val QtyAtShop1 As String, ByVal QtyAt~dulla^@204~ ng, ByVal QtyAtStore As String, ByVal~dulla^@204~ y As String, ByVal ReorderLevel As St~dulla^@204~ helfNo As String, ByVal PInvoiceNo As~dulla^@204~ nteger
            If (PartNo Is Not~dulla^@204~                Throw New System.Argum~dulla^@204~ ion("PartNo")
            Else
    ~dulla^@204~ e.Adapter.InsertCommand.Parameters(0)~dulla^@204~ e(PartNo,String)
            End If~dulla^@204~ If (Description Is Nothing) Then
   ~dulla^@204~ Throw New System.ArgumentNullExceptio~dulla^@204~ n")
            Else
              ~dulla^@204~ InsertCommand.Parameters(1).Value = C~dulla^@204~ ion,String)
            End If
    ~dulla^@204~ rice Is Nothing) Then
              ~dulla^@204~ ystem.ArgumentNullException("Price")~dulla^@204~ Else
                Me.Adapter.Inse~dulla^@204~ ameters(2).Value = CType(Price,String~dulla^@204~   End If
            If (SellingPric~dulla^@204~ ) Then
                Me.Adapter.In~dulla^@204~ arameters(3).Value = System.DBNull.Va~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(3).Value = CType(SellingP~dulla^@204~ 
            End If
            If ~dulla^@204~ 2 Is Nothing) Then
                M~dulla^@204~ ertCommand.Parameters(4).Value = Syst~dulla^@204~ ue
            Else
               ~dulla^@204~ nsertCommand.Parameters(4).Value = CT~dulla^@204~ ice2,String)
            End If
   ~dulla^@204~ QtyAtShop1 Is Nothing) Then
        ~dulla^@204~ apter.InsertCommand.Parameters(5).Val~dulla^@204~ BNull.Value
            Else
      ~dulla^@204~ Adapter.InsertCommand.Parameters(5).V~dulla^@204~ QtyAtShop1,String)
            End I~dulla^@204~   If (QtyAtShop2 Is Nothing) Then
  ~dulla^@204~  Me.Adapter.InsertCommand.Parameters(~dulla^@204~ stem.DBNull.Value
            Else
~dulla^@204~    Me.Adapter.InsertCommand.Parameter~dulla^@204~ CType(QtyAtShop2,String)
           ~dulla^@204~         If (QtyAtStore Is Nothing) Th~dulla^@204~        Me.Adapter.InsertCommand.Param~dulla^@204~ e = System.DBNull.Value
            ~dulla^@204~          Me.Adapter.InsertCommand.Par~dulla^@204~ lue = CType(QtyAtStore,String)
     ~dulla^@204~ 
            If (TotalQuantity Is No~dulla^@204~                 Throw New System.Argu~dulla^@204~ tion("TotalQuantity")
            El~dulla^@204~        Me.Adapter.InsertCommand.Param~dulla^@204~ e = CType(TotalQuantity,String)
    ~dulla^@204~ f
            If (ReorderLevel Is No~dulla^@204~                 Me.Adapter.InsertComm~dulla^@204~ s(9).Value = System.DBNull.Value
   ~dulla^@204~ 
                Me.Adapter.InsertCo~dulla^@204~ ers(9).Value = CType(ReorderLevel,Str~dulla^@204~      End If
            If (ShelfNo ~dulla^@204~ hen
                Me.Adapter.Inser~dulla^@204~ meters(10).Value = System.DBNull.Valu~dulla^@204~   Else
                Me.Adapter.In~dulla^@204~ arameters(10).Value = CType(ShelfNo,S~dulla^@204~        End If
            If (PInvoi~dulla^@204~ ng) Then
                Throw New S~dulla^@204~ tNullException("PInvoiceNo")
       ~dulla^@204~               Me.Adapter.InsertComman~dulla^@204~ 11).Value = CType(PInvoiceNo,String)~dulla^@204~ End If
            Dim previousConne~dulla^@204~  System.Data.ConnectionState = Me.Ada~dulla^@204~ mmand.Connection.State
            I~dulla^@204~ r.InsertCommand.Connection.State And ~dulla^@204~ onnectionState.Open)  _
            ~dulla^@204~ > System.Data.ConnectionState.Open) T~dulla^@204~         Me.Adapter.InsertCommand.Conn~dulla^@204~             End If
            Try ~dulla^@204~     Dim returnValue As Integer = Me.A~dulla^@204~ Command.ExecuteNonQuery
            ~dulla^@204~ turnValue
            Finally
     ~dulla^@204~  (previousConnectionState = System.Da~dulla^@204~ State.Closed) Then
                 ~dulla^@204~ .InsertCommand.Connection.Close
    ~dulla^@204~ nd If
            End Try
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute(),  _
         Syst~dulla^@204~ odel.Design.HelpKeywordAttribute("vs.~dulla^@204~ pter"),  _
         System.Component~dulla^@204~ ectMethodAttribute(System.ComponentMo~dulla^@204~ tMethodType.Update, true)>  _
      ~dulla^@204~ loads Overridable Function Update( _~dulla^@204~         ByVal PartNo As String,  _
 ~dulla^@204~       ByVal Description As String,  _~dulla^@204~          ByVal Price As String,  _
 ~dulla^@204~       ByVal SellingPrice1 As String, ~dulla^@204~            ByVal SellingPrice2 As Str~dulla^@204~                 ByVal QtyAtShop1 As S~dulla^@204~                   ByVal QtyAtShop2 As~dulla^@204~                     ByVal QtyAtStore ~dulla^@204~ 
                    ByVal TotalQuan~dulla^@204~ g,  _
                    ByVal Reor~dulla^@204~ tring,  _
                    ByVal ~dulla^@204~ ring,  _
                    ByVal P~dulla^@204~ String,  _
                    ByVal~dulla^@204~ tNo As String,  _
                  ~dulla^@204~ nal_Description As String,  _
      ~dulla^@204~  ByVal Original_Price As String,  _
~dulla^@204~        ByVal Original_SellingPrice1 A~dulla^@204~ 
                    ByVal Original_S~dulla^@204~ As String,  _
                    By~dulla^@204~ QtyAtShop1 As String,  _
           ~dulla^@204~ l Original_QtyAtShop2 As String,  _
~dulla^@204~        ByVal Original_QtyAtStore As S~dulla^@204~                   ByVal Original_Tota~dulla^@204~ String,  _
                    ByVal~dulla^@204~ rderLevel As String,  _
            ~dulla^@204~  Original_ShelfNo As String,  _
    ~dulla^@204~    ByVal Original_PInvoiceNo As Strin~dulla^@204~ 
            If (PartNo Is Nothing) ~dulla^@204~          Throw New System.ArgumentNul~dulla^@204~ artNo")
            Else
          ~dulla^@204~ ter.UpdateCommand.Parameters(0).Value~dulla^@204~ No,String)
            End If
     ~dulla^@204~ scription Is Nothing) Then
         ~dulla^@204~ New System.ArgumentNullException("Des~dulla^@204~            Else
                Me.A~dulla^@204~ Command.Parameters(1).Value = CType(D~dulla^@204~ ring)
            End If
          ~dulla^@204~ s Nothing) Then
                Thro~dulla^@204~ ArgumentNullException("Price")
     ~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(2).Value = CType(Price,String)
   ~dulla^@204~ If
            If (SellingPrice1 Is ~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(3).Value = System.DBNull.Value
 ~dulla^@204~ se
                Me.Adapter.Update~dulla^@204~ eters(3).Value = CType(SellingPrice1,~dulla^@204~         End If
            If (Selli~dulla^@204~ othing) Then
                Me.Adap~dulla^@204~ mand.Parameters(4).Value = System.DBN~dulla^@204~           Else
                Me.Ad~dulla^@204~ ommand.Parameters(4).Value = CType(Se~dulla^@204~ tring)
            End If
         ~dulla^@204~ hop1 Is Nothing) Then
              ~dulla^@204~ UpdateCommand.Parameters(5).Value = S~dulla^@204~ Value
            Else
            ~dulla^@204~ r.UpdateCommand.Parameters(5).Value =~dulla^@204~ hop1,String)
            End If
   ~dulla^@204~ QtyAtShop2 Is Nothing) Then
        ~dulla^@204~ apter.UpdateCommand.Parameters(6).Val~dulla^@204~ BNull.Value
            Else
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(6).V~dulla^@204~ QtyAtShop2,String)
            End I~dulla^@204~   If (QtyAtStore Is Nothing) Then
                Me.Adapter.UpdateCommand.Par~dulla^@204~ lue = System.DBNull.Value
          ~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ Value = CType(QtyAtStore,String)
   ~dulla^@204~ If
            If (TotalQuantity Is ~dulla^@204~ 
                Throw New System.Ar~dulla^@204~ eption("TotalQuantity")
            ~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ lue = CType(TotalQuantity,String)
  ~dulla^@204~  If
            If (ReorderLevel Is ~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(9).Value = System.DBNull.Value
 ~dulla^@204~ se
                Me.Adapter.Update~dulla^@204~ eters(9).Value = CType(ReorderLevel,S~dulla^@204~        End If
            If (ShelfN~dulla^@204~  Then
                Me.Adapter.Upd~dulla^@204~ rameters(10).Value = System.DBNull.Va~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(10).Value = CType(ShelfNo~dulla^@204~          End If
            If (PInv~dulla^@204~ hing) Then
                Throw New~dulla^@204~ entNullException("PInvoiceNo")
     ~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(11).Value = CType(PInvoiceNo,String~dulla^@204~   End If
            If (Original_Pa~dulla^@204~ ng) Then
                Throw New S~dulla^@204~ tNullException("Original_PartNo")
  ~dulla^@204~ e
                Me.Adapter.UpdateC~dulla^@204~ ters(12).Value = CType(Original_PartN~dulla^@204~           End If
            If (Ori~dulla^@204~ tion Is Nothing) Then
              ~dulla^@204~ ystem.ArgumentNullException("Original~dulla^@204~ )
            Else
                ~dulla^@204~ dateCommand.Parameters(13).Value = CT~dulla^@204~ Description,String)
            End ~dulla^@204~    If (Original_Price Is Nothing) The~dulla^@204~       Throw New System.ArgumentNullEx~dulla^@204~ inal_Price")
            Else
     ~dulla^@204~ .Adapter.UpdateCommand.Parameters(14)~dulla^@204~ e(Original_Price,String)
           ~dulla^@204~         If (Original_SellingPrice1 Is~dulla^@204~ n
                Me.Adapter.UpdateC~dulla^@204~ ters(15).Value = CType(1,Object)
   ~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(1~dulla^@204~ stem.DBNull.Value
            Else
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~  CType(0,Object)
                Me.~dulla^@204~ eCommand.Parameters(16).Value = CType~dulla^@204~ lingPrice1,String)
            End I~dulla^@204~   If (Original_SellingPrice2 Is Nothi~dulla^@204~              Me.Adapter.UpdateCommand~dulla^@204~ 7).Value = CType(1,Object)
         ~dulla^@204~ pter.UpdateCommand.Parameters(18).Val~dulla^@204~ BNull.Value
            Else
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(17).~dulla^@204~ (0,Object)
                Me.Adapte~dulla^@204~ nd.Parameters(18).Value = CType(Origi~dulla^@204~ ice2,String)
            End If
   ~dulla^@204~ Original_QtyAtShop1 Is Nothing) Then~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~ = CType(1,Object)
                Me~dulla^@204~ teCommand.Parameters(20).Value = Syst~dulla^@204~ ue
            Else
               ~dulla^@204~ pdateCommand.Parameters(19).Value = C~dulla^@204~ )
                Me.Adapter.UpdateC~dulla^@204~ ters(20).Value = CType(Original_QtyAt~dulla^@204~ 
            End If
            If ~dulla^@204~ AtShop2 Is Nothing) Then
           ~dulla^@204~ er.UpdateCommand.Parameters(21).Value~dulla^@204~ ject)
                Me.Adapter.Upd~dulla^@204~ rameters(22).Value = System.DBNull.Va~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(21).Value = CType(0,Objec~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ ue = CType(Original_QtyAtShop2,String~dulla^@204~   End If
            If (Original_Qt~dulla^@204~ othing) Then
                Me.Adap~dulla^@204~ mand.Parameters(23).Value = CType(1,O~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ .Value = System.DBNull.Value
       ~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 23).Value = CType(0,Object)
        ~dulla^@204~ apter.UpdateCommand.Parameters(24).Va~dulla^@204~ riginal_QtyAtStore,String)
         ~dulla^@204~           If (Original_TotalQuantity ~dulla^@204~ hen
                Throw New System~dulla^@204~ Exception("Original_TotalQuantity")
~dulla^@204~ lse
                Me.Adapter.Updat~dulla^@204~ meters(25).Value = CType(Original_Tot~dulla^@204~ ring)
            End If
          ~dulla^@204~ l_ReorderLevel Is Nothing) Then
    ~dulla^@204~ e.Adapter.UpdateCommand.Parameters(26~dulla^@204~ pe(1,Object)
                Me.Adap~dulla^@204~ mand.Parameters(27).Value = System.DB~dulla^@204~            Else
                Me.A~dulla^@204~ Command.Parameters(26).Value = CType(~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 27).Value = CType(Original_ReorderLev~dulla^@204~            End If
            If (Or~dulla^@204~ o Is Nothing) Then
                M~dulla^@204~ ateCommand.Parameters(28).Value = CTy~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(29).Value = System.DBNull.Value
 ~dulla^@204~ se
                Me.Adapter.Update~dulla^@204~ eters(28).Value = CType(0,Object)
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ Type(Original_ShelfNo,String)
      ~dulla^@204~ 
            If (Original_PInvoiceNo ~dulla^@204~ hen
                Throw New System~dulla^@204~ Exception("Original_PInvoiceNo")
   ~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(30).Value = CType(Original_PInvoi~dulla^@204~ 
            End If
            Dim ~dulla^@204~ ctionState As System.Data.ConnectionS~dulla^@204~ pter.UpdateCommand.Connection.State
~dulla^@204~ f ((Me.Adapter.UpdateCommand.Connecti~dulla^@204~ System.Data.ConnectionState.Open)  _~dulla^@204~             <> System.Data.Connection~dulla^@204~ hen
                Me.Adapter.Updat~dulla^@204~ ection.Open
            End If
    ~dulla^@204~ 
                Dim returnValue As I~dulla^@204~ dapter.UpdateCommand.ExecuteNonQuery~dulla^@204~     Return returnValue
            F~dulla^@204~            If (previousConnectionStat~dulla^@204~ ta.ConnectionState.Closed) Then
    ~dulla^@204~    Me.Adapter.UpdateCommand.Connectio~dulla^@204~             End If
            End T~dulla^@204~ nd Function
    End Class
End Namespace
