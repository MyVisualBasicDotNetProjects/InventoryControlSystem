'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.312
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("InventoryControlSystemDataSet3"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class InventoryControlSystemDataSet3
    Inherits System.Data.DataSet
    
    Private tableBlankTable As BlankTableDataTable
    
    Private tableCashSales As CashSalesDataTable
    
    Private tableCreditSales As CreditSalesDataTable
    
    Private tableCustomers As CustomersDataTable
    
    Private tableOrder As OrderDataTable
    
    Private tableProducts As ProductsDataTable
    
    Private tablePurchase As PurchaseDataTable
    
    Private tablePurchaseInfo As PurchaseInfoDataTable
    
    Private tableSalesInfo As SalesInfoDataTable
    
    Private tableStockCard As StockCardDataTable
    
    Private tableStockCardDetail As StockCardDetailDataTable
    
    Private tableSupplier As SupplierDataTable
    
    Private tableUsers As UsersDataTable
    
    Private relationFK_CashSales_Customers As System.Data.DataRelation
    
    Private relationFK_CreditSales_Customers As System.Data.DataRelation
    
    Private relationFK_Order_Products As System.Data.DataRelation
    
    Private relationFK_Purchase_Supplier As System.Data.DataRelation
    
    Private relationFK_PurchaseInfo_Purchase As System.Data.DataRelation
    
    Private relationFK_PurchaseInfo_Supplier As System.Data.DataRelation
    
    Private relationFK_SalesInfo_CashSales As System.Data.DataRelation
    
    Private relationFK_SalesInfo_CreditSales As System.Data.DataRelation
    
    Private relationFK_SalesInfo_Products As System.Data.DataRelation
    
    Private relationFK_SalesInfo_StockCardDetail As System.Data.DataRelation
    
    Private relationFK_SalesInfo_StockCardDetail1 As System.Data.DataRelation
    
    Private relationFK_StockCard_SalesInfo As System.Data.DataRelation
    
    Private relationFK_StockCardDetail_StockCard As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BlankTable")) Is Nothing) Then
                MyBase.Tables.Add(New BlankTableDataTable(ds.Tables("BlankTable")))
            End If
            If (Not (ds.Tables("CashSales")) Is Nothing) Then
                MyBase.Tables.Add(New CashSalesDataTable(ds.Tables("CashSales")))
            End If
            If (Not (ds.Tables("CreditSales")) Is Nothing) Then
                MyBase.Tables.Add(New CreditSalesDataTable(ds.Tables("CreditSales")))
            End If
            If (Not (ds.Tables("Customers")) Is Nothing) Then
                MyBase.Tables.Add(New CustomersDataTable(ds.Tables("Customers")))
            End If
            If (Not (ds.Tables("Order")) Is Nothing) Then
                MyBase.Tables.Add(New OrderDataTable(ds.Tables("Order")))
            End If
            If (Not (ds.Tables("Products")) Is Nothing) Then
                MyBase.Tables.Add(New ProductsDataTable(ds.Tables("Products")))
            End If
            If (Not (ds.Tables("Purchase")) Is Nothing) Then
                MyBase.Tables.Add(New PurchaseDataTable(ds.Tables("Purchase")))
            End If
            If (Not (ds.Tables("PurchaseInfo")) Is Nothing) Then
                MyBase.Tables.Add(New PurchaseInfoDataTable(ds.Tables("PurchaseInfo")))
            End If
            If (Not (ds.Tables("SalesInfo")) Is Nothing) Then
                MyBase.Tables.Add(New SalesInfoDataTable(ds.Tables("SalesInfo")))
            End If
            If (Not (ds.Tables("StockCard")) Is Nothing) Then
                MyBase.Tables.Add(New StockCardDataTable(ds.Tables("StockCard")))
            End If
            If (Not (ds.Tables("StockCardDetail")) Is Nothing) Then
                MyBase.Tables.Add(New StockCardDetailDataTable(ds.Tables("StockCardDetail")))
            End If
            If (Not (ds.Tables("Supplier")) Is Nothing) Then
                MyBase.Tables.Add(New SupplierDataTable(ds.Tables("Supplier")))
            End If
            If (Not (ds.Tables("Users")) Is Nothing) Then
                MyBase.Tables.Add(New UsersDataTable(ds.Tables("Users")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BlankTable() As BlankTableDataTable
        Get
            Return Me.tableBlankTable
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CashSales() As CashSalesDataTable
        Get
            Return Me.tableCashSales
        End Get
    End Proper ~dulla^@204~ ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~ stem.ComponentModel.Browsable(false),~dulla^@204~ tem.ComponentModel.DesignerSerializat~dulla^@204~ (System.ComponentModel.DesignerSerial~dulla^@204~ lity.Content)>  _
    Public ReadOnl~dulla^@204~ editSales() As CreditSalesDataTable
~dulla^@204~             Return Me.tableCreditSale~dulla^@204~ d Get
    End Property
    
    <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute(), ~dulla^@204~ em.ComponentModel.Browsable(false),  ~dulla^@204~ m.ComponentModel.DesignerSerializatio~dulla^@204~ ystem.ComponentModel.DesignerSerializ~dulla^@204~ ty.Content)>  _
    Public ReadOnly ~dulla^@204~ omers() As CustomersDataTable
      ~dulla^@204~       Return Me.tableCustomers
     ~dulla^@204~    End Property
    
    <System.Di~dulla^@204~ uggerNonUserCodeAttribute(),  _
    ~dulla^@204~ nentModel.Browsable(false),  _
     ~dulla^@204~ entModel.DesignerSerializationVisibil~dulla^@204~ mponentModel.DesignerSerializationVis~dulla^@204~ nt)>  _
    Public ReadOnly Property~dulla^@204~ rderDataTable
        Get
         ~dulla^@204~ tableOrder
        End Get
    End ~dulla^@204~  
    <System.Diagnostics.DebuggerNo~dulla^@204~ ibute(),  _
     System.ComponentMod~dulla^@204~ false),  _
     System.ComponentMode~dulla^@204~ ializationVisibility(System.Component~dulla^@204~ rSerializationVisibility.Content)>  _~dulla^@204~ ReadOnly Property Products() As Produ~dulla^@204~ 
        Get
            Return Me.t~dulla^@204~ 
        End Get
    End Property
 ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
     System.ComponentModel.Browsabl~dulla^@204~ 
     System.ComponentModel.DesignerS~dulla^@204~ isibility(System.ComponentModel.Desig~dulla^@204~ ionVisibility.Content)>  _
    Publi~dulla^@204~ operty Purchase() As PurchaseDataTabl~dulla^@204~ t
            Return Me.tablePurchas~dulla^@204~ d Get
    End Property
    
    <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute(), ~dulla^@204~ em.ComponentModel.Browsable(false),  ~dulla^@204~ m.ComponentModel.DesignerSerializatio~dulla^@204~ ystem.ComponentModel.DesignerSerializ~dulla^@204~ ty.Content)>  _
    Public ReadOnly ~dulla^@204~ haseInfo() As PurchaseInfoDataTable
~dulla^@204~             Return Me.tablePurchaseIn~dulla^@204~ nd Get
    End Property
    
    <~dulla^@204~ stics.DebuggerNonUserCodeAttribute(),~dulla^@204~ tem.ComponentModel.Browsable(false), ~dulla^@204~ em.ComponentModel.DesignerSerializati~dulla^@204~ System.ComponentModel.DesignerSeriali~dulla^@204~ ity.Content)>  _
    Public ReadOnly~dulla^@204~ esInfo() As SalesInfoDataTable
     ~dulla^@204~        Return Me.tableSalesInfo
    ~dulla^@204~     End Property
    
    <System.D~dulla^@204~ buggerNonUserCodeAttribute(),  _
   ~dulla^@204~ onentModel.Browsable(false),  _
    ~dulla^@204~ nentModel.DesignerSerializationVisibi~dulla^@204~ omponentModel.DesignerSerializationVi~dulla^@204~ ent)>  _
    Public ReadOnly Propert~dulla^@204~  As StockCardDataTable
        Get
~dulla^@204~ eturn Me.tableStockCard
        End ~dulla^@204~ Property
    
    <System.Diagnosti~dulla^@204~ nUserCodeAttribute(),  _
     System~dulla^@204~ el.Browsable(false),  _
     System.~dulla^@204~ l.DesignerSerializationVisibility(Sys~dulla^@204~ Model.DesignerSerializationVisibility~dulla^@204~ 
    Public ReadOnly Property StockC~dulla^@204~ s StockCardDetailDataTable
        G~dulla^@204~    Return Me.tableStockCardDetail
  ~dulla^@204~ 
    End Property
    
    <System~dulla^@204~ DebuggerNonUserCodeAttribute(),  _
 ~dulla^@204~ mponentModel.Browsable(false),  _
  ~dulla^@204~ ponentModel.DesignerSerializationVisi~dulla^@204~ .ComponentModel.DesignerSerialization~dulla^@204~ ntent)>  _
    Public ReadOnly Prope~dulla^@204~ ) As SupplierDataTable
        Get
~dulla^@204~ eturn Me.tableSupplier
        End G~dulla^@204~ roperty
    
    <System.Diagnostic~dulla^@204~ UserCodeAttribute(),  _
     System.~dulla^@204~ l.Browsable(false),  _
     System.C~dulla^@204~ .DesignerSerializationVisibility(Syst~dulla^@204~ odel.DesignerSerializationVisibility.~dulla^@204~ 
    Public ReadOnly Property Users()~dulla^@204~ Table
        Get
            Retur~dulla^@204~ rs
        End Get
    End Property~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
     System.ComponentModel.Brows~dulla^@204~ (true),  _
     System.ComponentMode~dulla^@204~ ializationVisibilityAttribute(System.~dulla^@204~ l.DesignerSerializationVisibility.Vis~dulla^@204~   Public Overrides Property SchemaSer~dulla^@204~ e() As System.Data.SchemaSerializatio~dulla^@204~   Get
            Return Me._schemaS~dulla^@204~ ode
        End Get
        Set
  ~dulla^@204~ _schemaSerializationMode = value
   ~dulla^@204~ 
    End Property
    
    <System.~dulla^@204~ ebuggerNonUserCodeAttribute(),  _
  ~dulla^@204~ ponentModel.DesignerSerializationVisi~dulla^@204~ te(System.ComponentModel.DesignerSeri~dulla^@204~ bility.Hidden)>  _
    Public Shadow~dulla^@204~ operty Tables() As System.Data.DataTa~dulla^@204~ 
        Get
            Return MyB~dulla^@204~        End Get
    End Property
   ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~      System.ComponentModel.DesignerSe~dulla^@204~ sibilityAttribute(System.ComponentMod~dulla^@204~ rializationVisibility.Hidden)>  _
  ~dulla^@204~ ows ReadOnly Property Relations() As ~dulla^@204~ ataRelationCollection
        Get
 ~dulla^@204~ turn MyBase.Relations
        End Ge~dulla^@204~ operty
    
    <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
    Protected~dulla^@204~ b InitializeDerivedDataSet()
       ~dulla^@204~ 
        Me.InitClass
        Me.En~dulla^@204~ d Sub
    
    <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
    Public Ove~dulla^@204~ on Clone() As System.Data.DataSet
  ~dulla^@204~  As InventoryControlSystemDataSet3 = ~dulla^@204~ Clone,InventoryControlSystemDataSet3)~dulla^@204~ .InitVars
        cln.SchemaSerializ~dulla^@204~ e.SchemaSerializationMode
        Re~dulla^@204~  End Function
    
    <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
    Pr~dulla^@204~ ides Function ShouldSerializeTables()~dulla^@204~         Return false
    End Functio~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
    Protected Overrides Functio~dulla^@204~ lizeRelations() As Boolean
        R~dulla^@204~     End Function
    
    <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ errides Sub ReadXmlSerializable(ByVal~dulla^@204~ stem.Xml.XmlReader)
        If (Me.D~dulla^@204~ aSerializationMode(reader) = System.D~dulla^@204~ ializationMode.IncludeSchema) Then
 ~dulla^@204~ .Reset
            Dim ds As System.~dulla^@204~ = New System.Data.DataSet
          ~dulla^@204~ reader)
            If (Not (ds.Tabl~dulla^@204~ e")) Is Nothing) Then
              ~dulla^@204~ es.Add(New BlankTableDataTable(ds.Tab~dulla^@204~ le")))
            End If
         ~dulla^@204~ s.Tables("CashSales")) Is Nothing) Th~dulla^@204~        MyBase.Tables.Add(New CashSale~dulla^@204~ .Tables("CashSales")))
            E~dulla^@204~       If (Not (ds.Tables("CreditSales~dulla^@204~ g) Then
                MyBase.Table~dulla^@204~ ditSalesDataTable(ds.Tables("CreditSa~dulla^@204~         End If
            If (Not (~dulla^@204~ stomers")) Is Nothing) Then
        ~dulla^@204~ e.Tables.Add(New CustomersDataTable(d~dulla^@204~ tomers")))
            End If
     ~dulla^@204~ t (ds.Tables("Order")) Is Nothing) Th~dulla^@204~        MyBase.Tables.Add(New OrderDat~dulla^@204~ les("Order")))
            End If
 ~dulla^@204~  (Not (ds.Tables("Products")) Is Noth~dulla^@204~               MyBase.Tables.Add(New P~dulla^@204~ ble(ds.Tables("Products")))
        ~dulla^@204~            If (Not (ds.Tables("Purcha~dulla^@204~ ing) Then
                MyBase.Tab~dulla^@204~ urchaseDataTable(ds.Tables("Purchase"~dulla^@204~     End If
            If (Not (ds.T~dulla^@204~ seInfo")) Is Nothing) Then
         ~dulla^@204~ .Tables.Add(New PurchaseInfoDataTable(ds.Tables("PurchaseInfo")))
            ~dulla^@204~        If (Not (ds.Tables("SalesInfo"~dulla^@204~ ) Then
                MyBase.Tables~dulla^@204~ sInfoDataTable(ds.Tables("SalesInfo")~dulla^@204~    End If
            If (Not (ds.Ta~dulla^@204~ rd")) Is Nothing) Then
             ~dulla^@204~ les.Add(New StockCardDataTable(ds.Tab~dulla^@204~ d")))
            End If
          ~dulla^@204~ .Tables("StockCardDetail")) Is Nothin~dulla^@204~             MyBase.Tables.Add(New Sto~dulla^@204~ ataTable(ds.Tables("StockCardDetail")~dulla^@204~    End If
            If (Not (ds.Ta~dulla^@204~ r")) Is Nothing) Then
              ~dulla^@204~ es.Add(New SupplierDataTable(ds.Table~dulla^@204~ ))
            End If
            I~dulla^@204~ bles("Users")) Is Nothing) Then
    ~dulla^@204~ yBase.Tables.Add(New UsersDataTable(d~dulla^@204~ rs")))
            End If
         ~dulla^@204~ Name = ds.DataSetName
            Me~dulla^@204~ Prefix
            Me.Namespace = ds~dulla^@204~            Me.Locale = ds.Locale
   ~dulla^@204~ aseSensitive = ds.CaseSensitive
    ~dulla^@204~ forceConstraints = ds.EnforceConstrai~dulla^@204~     Me.Merge(ds, false, System.Data.M~dulla^@204~ ction.Add)
            Me.InitVars
~dulla^@204~ 
            Me.ReadXml(reader)
    ~dulla^@204~ itVars
        End If
    End Sub
~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
    Protected Overrides Function G~dulla^@204~ lizable() As System.Xml.Schema.XmlSch~dulla^@204~ Dim stream As System.IO.MemoryStream ~dulla^@204~ IO.MemoryStream
        Me.WriteXmlS~dulla^@204~ tem.Xml.XmlTextWriter(stream, Nothing~dulla^@204~ tream.Position = 0
        Return Sy~dulla^@204~ ma.XmlSchema.Read(New System.Xml.XmlT~dulla^@204~ eam), Nothing)
    End Function
   ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~     Friend Overloads Sub InitVars()
~dulla^@204~ itVars(true)
    End Sub
    
    ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~ end Overloads Sub InitVars(ByVal init~dulla^@204~ ean)
        Me.tableBlankTable = CT~dulla^@204~ bles("BlankTable"),BlankTableDataTabl~dulla^@204~ f (initTable = true) Then
          ~dulla^@204~ .tableBlankTable) Is Nothing) Then
 ~dulla^@204~   Me.tableBlankTable.InitVars
      ~dulla^@204~ 
        End If
        Me.tableCash~dulla^@204~ (MyBase.Tables("CashSales"),CashSales~dulla^@204~        If (initTable = true) Then
  ~dulla^@204~ (Not (Me.tableCashSales) Is Nothing) ~dulla^@204~          Me.tableCashSales.InitVars
~dulla^@204~ nd If
        End If
        Me.tab~dulla^@204~  = CType(MyBase.Tables("CreditSales")~dulla^@204~ ataTable)
        If (initTable = tr~dulla^@204~          If (Not (Me.tableCreditSales~dulla^@204~  Then
                Me.tableCredit~dulla^@204~ s
            End If
        End If~dulla^@204~ tableCustomers = CType(MyBase.Tables(~dulla^@204~ CustomersDataTable)
        If (init~dulla^@204~  Then
            If (Not (Me.tableC~dulla^@204~ Nothing) Then
                Me.tab~dulla^@204~ nitVars
            End If
        ~dulla^@204~    Me.tableOrder = CType(MyBase.Table~dulla^@204~ derDataTable)
        If (initTable ~dulla^@204~ 
            If (Not (Me.tableOrder) ~dulla^@204~ hen
                Me.tableOrder.In~dulla^@204~        End If
        End If
      ~dulla^@204~ ducts = CType(MyBase.Tables("Products~dulla^@204~ taTable)
        If (initTable = tru~dulla^@204~         If (Not (Me.tableProducts) Is~dulla^@204~ n
                Me.tableProducts.I~dulla^@204~         End If
        End If
     ~dulla^@204~ rchase = CType(MyBase.Tables("Purchas~dulla^@204~ ataTable)
        If (initTable = tr~dulla^@204~          If (Not (Me.tablePurchase) I~dulla^@204~ en
                Me.tablePurchase.~dulla^@204~          End If
        End If
    ~dulla^@204~ urchaseInfo = CType(MyBase.Tables("Pu~dulla^@204~ PurchaseInfoDataTable)
        If (i~dulla^@204~ ue) Then
            If (Not (Me.tab~dulla^@204~ o) Is Nothing) Then
                ~dulla^@204~ aseInfo.InitVars
            End If~dulla^@204~ If
        Me.tableSalesInfo = CType~dulla^@204~ s("SalesInfo"),SalesInfoDataTable)
 ~dulla^@204~ itTable = true) Then
            If ~dulla^@204~ eSalesInfo) Is Nothing) Then
       ~dulla^@204~ ableSalesInfo.InitVars
            E~dulla^@204~   End If
        Me.tableStockCard =~dulla^@204~ .Tables("StockCard"),StockCardDataTab~dulla^@204~ If (initTable = true) Then
         ~dulla^@204~ e.tableStockCard) Is Nothing) Then
 ~dulla^@204~   Me.tableStockCard.InitVars
       ~dulla^@204~         End If
        Me.tableStock~dulla^@204~ CType(MyBase.Tables("StockCardDetail"~dulla^@204~ tailDataTable)
        If (initTable~dulla^@204~ 
            If (Not (Me.tableStockC~dulla^@204~  Nothing) Then
                Me.ta~dulla^@204~ etail.InitVars
            End If
 ~dulla^@204~ 
        Me.tableSupplier = CType(My~dulla^@204~ Supplier"),SupplierDataTable)
      ~dulla^@204~ le = true) Then
            If (Not ~dulla^@204~ lier) Is Nothing) Then
             ~dulla^@204~ pplier.InitVars
            End If
~dulla^@204~ f
        Me.tableUsers = CType(MyBa~dulla^@204~ ers"),UsersDataTable)
        If (in~dulla^@204~ e) Then
            If (Not (Me.tabl~dulla^@204~ thing) Then
                Me.table~dulla^@204~ s
            End If
        End If~dulla^@204~ relationFK_CashSales_Customers = Me.R~dulla^@204~ CashSales_Customers")
        Me.rel~dulla^@204~ tSales_Customers = Me.Relations("FK_C~dulla^@204~ stomers")
        Me.relationFK_Orde~dulla^@204~ Me.Relations("FK_Order_Products")
  ~dulla^@204~ tionFK_Purchase_Supplier = Me.Relatio~dulla^@204~ se_Supplier")
        Me.relationFK_~dulla^@204~ Purchase = Me.Relations("FK_PurchaseI~dulla^@204~ )
        Me.relationFK_PurchaseInfo~dulla^@204~ e.Relations("FK_PurchaseInfo_Supplier~dulla^@204~ e.relationFK_SalesInfo_CashSales = Me~dulla^@204~ K_SalesInfo_CashSales")
        Me.r~dulla^@204~ esInfo_CreditSales = Me.Relations("FK~dulla^@204~ editSales")
        Me.relationFK_Sa~dulla^@204~ cts = Me.Relations("FK_SalesInfo_Prod~dulla^@204~    Me.relationFK_SalesInfo_StockCardD~dulla^@204~ lations("FK_SalesInfo_StockCardDetail~dulla^@204~ e.relationFK_SalesInfo_StockCardDetai~dulla^@204~ ions("FK_SalesInfo_StockCardDetail1")~dulla^@204~ relationFK_StockCard_SalesInfo = Me.R~dulla^@204~ StockCard_SalesInfo")
        Me.rel~dulla^@204~ CardDetail_StockCard = Me.Relations("~dulla^@204~ etail_StockCard")
    End Sub
    ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~   Private Sub InitClass()
        Me~dulla^@204~ = "InventoryControlSystemDataSet3"
 ~dulla^@204~ fix = ""
        Me.Namespace = "htt~dulla^@204~ rg/InventoryControlSystemDataSet3.xsd~dulla^@204~ .EnforceConstraints = true
        M~dulla^@204~ lizationMode = System.Data.SchemaSeri~dulla^@204~ .IncludeSchema
        Me.tableBlank~dulla^@204~ lankTableDataTable
        MyBase.Ta~dulla^@204~ ableBlankTable)
        Me.tableCash~dulla^@204~ ashSalesDataTable
        MyBase.Tab~dulla^@204~ bleCashSales)
        Me.tableCredit~dulla^@204~ reditSalesDataTable
        MyBase.T~dulla^@204~ tableCreditSales)
        Me.tableCu~dulla^@204~  CustomersDataTable
        MyBase.T~dulla^@204~ tableCustomers)
        Me.tableOrde~dulla^@204~ DataTable
        MyBase.Tables.Add(~dulla^@204~ )
        Me.tableProducts = New Pro~dulla^@204~ e
        MyBase.Tables.Add(Me.table~dulla^@204~       Me.tablePurchase = New Purchase~dulla^@204~       MyBase.Tables.Add(Me.tablePurch~dulla^@204~  Me.tablePurchaseInfo = New PurchaseI~dulla^@204~ 
        MyBase.Tables.Add(Me.tablePu~dulla^@204~         Me.tableSalesInfo = New Sales~dulla^@204~ 
        MyBase.Tables.Add(Me.tableS~dulla^@204~       Me.tableStockCard = New StockCa~dulla^@204~         MyBase.Tables.Add(Me.tableSto~dulla^@204~     Me.tableStockCardDetail = New Sto~dulla^@204~ ataTable
        MyBase.Tables.Add(M~dulla^@204~ ardDetail)
        Me.tableSupplier ~dulla^@204~ rDataTable
        MyBase.Tables.Add~dulla^@204~ lier)
        Me.tableUsers = New Us~dulla^@204~ 
        MyBase.Tables.Add(Me.tableUsers)
        Me.relationFK_CashSales_Cust~dulla^@204~ ystem.Data.DataRelation("FK_CashSales~dulla^@204~ New System.Data.DataColumn() {Me.tabl~dulla^@204~ stomerNameColumn}, New System.Data.Da~dulla^@204~ e.tableCashSales.CustomerNameColumn},~dulla^@204~     Me.Relations.Add(Me.relationFK_Ca~dulla^@204~ mers)
        Me.relationFK_CreditSa~dulla^@204~  = New System.Data.DataRelation("FK_C~dulla^@204~ stomers", New System.Data.DataColumn(~dulla^@204~ stomers.CustomerNameColumn}, New Syst~dulla^@204~ olumn() {Me.tableCreditSales.Customer~dulla^@204~ false)
        Me.Relations.Add(Me.r~dulla^@204~ ditSales_Customers)
        Me.relat~dulla^@204~ roducts = New System.Data.DataRelatio~dulla^@204~ roducts", New System.Data.DataColumn(~dulla^@204~ oducts.PartNoColumn}, New System.Data~dulla^@204~  {Me.tableOrder.OrderNoColumn}, false~dulla^@204~ .Relations.Add(Me.relationFK_Order_Pr~dulla^@204~     Me.relationFK_Purchase_Supplier =~dulla^@204~ ata.DataRelation("FK_Purchase_Supplie~dulla^@204~ m.Data.DataColumn() {Me.tableSupplier~dulla^@204~ lumn}, New System.Data.DataColumn() {~dulla^@204~ ase.SupplierIDColumn}, false)
      ~dulla^@204~ s.Add(Me.relationFK_Purchase_Supplier~dulla^@204~ .relationFK_PurchaseInfo_Purchase = N~dulla^@204~ a.DataRelation("FK_PurchaseInfo_Purch~dulla^@204~ tem.Data.DataColumn() {Me.tablePurcha~dulla^@204~ voiceNoColumn}, New System.Data.DataC~dulla^@204~ ablePurchaseInfo.InvoiceNoColumn}, fa~dulla^@204~  Me.Relations.Add(Me.relationFK_Purch~dulla^@204~ ase)
        Me.relationFK_PurchaseI~dulla^@204~ = New System.Data.DataRelation("FK_Pu~dulla^@204~ pplier", New System.Data.DataColumn()~dulla^@204~ plier.SupplierIDColumn}, New System.D~dulla^@204~ n() {Me.tablePurchaseInfo.SupplierIDC~dulla^@204~ )
        Me.Relations.Add(Me.relati~dulla^@204~ Info_Supplier)
        Me.relationFK~dulla^@204~ shSales = New System.Data.DataRelatio~dulla^@204~ fo_CashSales", New System.Data.DataCo~dulla^@204~ bleCashSales.CashSalesInvoiceNoColumn~dulla^@204~ .Data.DataColumn() {Me.tableSalesInfo~dulla^@204~ oiceNoColumn}, false)
        Me.Rel~dulla^@204~ .relationFK_SalesInfo_CashSales)
   ~dulla^@204~ ionFK_SalesInfo_CreditSales = New Sys~dulla^@204~ Relation("FK_SalesInfo_CreditSales", ~dulla^@204~ ta.DataColumn() {Me.tableCreditSales.~dulla^@204~ voiceNoColumn}, New System.Data.DataC~dulla^@204~ ableSalesInfo.CreditSalesInvoiceNoCol~dulla^@204~ 
        Me.Relations.Add(Me.relation~dulla^@204~ CreditSales)
        Me.relationFK_S~dulla^@204~ ucts = New System.Data.DataRelation("~dulla^@204~ Products", New System.Data.DataColumn~dulla^@204~ roducts.PartNoColumn}, New System.Dat~dulla^@204~ ) {Me.tableSalesInfo.PartNoColumn}, f~dulla^@204~   Me.Relations.Add(Me.relationFK_Sale~dulla^@204~ s)
        Me.relationFK_SalesInfo_S~dulla^@204~ l = New System.Data.DataRelation("FK_~dulla^@204~ ckCardDetail", New System.Data.DataCo~dulla^@204~ bleStockCardDetail.SalesInvoiceNoColu~dulla^@204~ tockCardDetail.DateOfSaleColumn}, New~dulla^@204~ DataColumn() {Me.tableSalesInfo.CashS~dulla^@204~ Column, Me.tableSalesInfo.DateOfSaleC~dulla^@204~ )
        Me.Relations.Add(Me.relati~dulla^@204~ o_StockCardDetail)
        Me.relati~dulla^@204~ o_StockCardDetail1 = New System.Data.~dulla^@204~ "FK_SalesInfo_StockCardDetail1", New ~dulla^@204~ ataColumn() {Me.tableStockCardDetail.~dulla^@204~ oColumn, Me.tableStockCardDetail.Date~dulla^@204~ , New System.Data.DataColumn() {Me.ta~dulla^@204~ CreditSalesInvoiceNoColumn, Me.tableS~dulla^@204~ OfSaleColumn}, false)
        Me.Rel~dulla^@204~ .relationFK_SalesInfo_StockCardDetail~dulla^@204~ e.relationFK_StockCard_SalesInfo = Ne~dulla^@204~ .DataRelation("FK_StockCard_SalesInfo~dulla^@204~ .Data.DataColumn() {Me.tableSalesInfo~dulla^@204~ }, New System.Data.DataColumn() {Me.t~dulla^@204~ .PartNoColumn}, false)
        Me.Re~dulla^@204~ e.relationFK_StockCard_SalesInfo)
  ~dulla^@204~ tionFK_StockCardDetail_StockCard = Ne~dulla^@204~ .DataRelation("FK_StockCardDetail_Sto~dulla^@204~ System.Data.DataColumn() {Me.tableSto~dulla^@204~ ardNoColumn}, New System.Data.DataCol~dulla^@204~ leStockCardDetail.StockCardNoColumn},~dulla^@204~     Me.Relations.Add(Me.relationFK_St~dulla^@204~ _StockCard)
    End Sub
    
    <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ ate Function ShouldSerializeBlankTabl~dulla^@204~ n
        Return false
    End Func~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
    Private Function ShouldS~dulla^@204~ ales() As Boolean
        Return fal~dulla^@204~ unction
    
    <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
    Private ~dulla^@204~ ldSerializeCreditSales() As Boolean
~dulla^@204~ n false
    End Function
    
    ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~ vate Function ShouldSerializeCustomer~dulla^@204~ n
        Return false
    End Func~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
    Private Function ShouldS~dulla^@204~ () As Boolean
        Return false
~dulla^@204~ ion
    
    <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
    Private Func~dulla^@204~ rializeProducts() As Boolean
       ~dulla^@204~ 
    End Function
    
    <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~ nction ShouldSerializePurchase() As B~dulla^@204~    Return false
    End Function
  ~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
    Private Function ShouldSerialize~dulla^@204~ ) As Boolean
        Return false
 ~dulla^@204~ on
    
    <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
    Private Funct~dulla^@204~ ializeSalesInfo() As Boolean
       ~dulla^@204~ 
    End Function
    
    <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~ nction ShouldSerializeStockCard() As ~dulla^@204~     Return false
    End Function
 ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
    Private Function ShouldSerializ~dulla^@204~ ail() As Boolean
        Return fals~dulla^@204~ nction
    
    <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
    Private F~dulla^@204~ dSerializeSupplier() As Boolean
    ~dulla^@204~ lse
    End Function
    
    <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~  Function ShouldSerializeUsers() As B~dulla^@204~    Return false
    End Function
  ~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
    Private Sub SchemaChanged(ByVal ~dulla^@204~ ect, ByVal e As System.ComponentModel~dulla^@204~ angeEventArgs)
        If (e.Action ~dulla^@204~ onentModel.CollectionChangeAction.Rem~dulla^@204~           Me.InitVars
        End If~dulla^@204~ 
    
    <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
    Public Shared F~dulla^@204~ pedDataSetSchema(ByVal xs As System.X~dulla^@204~ SchemaSet) As System.Xml.Schema.XmlSc~dulla^@204~ pe
        Dim ds As InventoryContro~dulla^@204~ t3 = New InventoryControlSystemDataSe~dulla^@204~ im type As System.Xml.Schema.XmlSchem~dulla^@204~ = New System.Xml.Schema.XmlSchemaComp~dulla^@204~     Dim sequence As System.Xml.Schema~dulla^@204~ uence = New System.Xml.Schema.XmlSche~dulla^@204~        xs.Add(ds.GetSchemaSerializabl~dulla^@204~ im any As System.Xml.Schema.XmlSchema~dulla^@204~ tem.Xml.Schema.XmlSchemaAny
        ~dulla^@204~  = ds.Namespace
        sequence.Ite~dulla^@204~         type.Particle = sequence
   ~dulla^@204~ ype
    End Function
    
    Publ~dulla^@204~ ub BlankTableRowChangeEventHandler(By~dulla^@204~  Object, ByVal e As BlankTableRowChan~dulla^@204~  
    Public Delegate Sub CashSalesR~dulla^@204~ Handler(ByVal sender As Object, ByVal~dulla^@204~ esRowChangeEvent)
    
    Public D~dulla^@204~ reditSalesRowChangeEventHandler(ByVal~dulla^@204~ ject, ByVal e As CreditSalesRowChange~dulla^@204~ 
    Public Delegate Sub CustomersRow~dulla^@204~ ndler(ByVal sender As Object, ByVal e~dulla^@204~ RowChangeEvent)
    
    Public Del~dulla^@204~ erRowChangeEventHandler(ByVal sender ~dulla^@204~ Val e As OrderRowChangeEvent)
    
~dulla^@204~ legate Sub ProductsRowChangeEventHand~dulla^@204~ der As Object, ByVal e As ProductsRowChangeEvent)
    
    Public Delegate Su~dulla^@204~ ChangeEventHandler(ByVal sender As Ob~dulla^@204~  As PurchaseRowChangeEvent)
    
  ~dulla^@204~ gate Sub PurchaseInfoRowChangeEventHa~dulla^@204~ ender As Object, ByVal e As PurchaseI~dulla^@204~ vent)
    
    Public Delegate Sub ~dulla^@204~ hangeEventHandler(ByVal sender As Obj~dulla^@204~ As SalesInfoRowChangeEvent)
    
  ~dulla^@204~ gate Sub StockCardRowChangeEventHandl~dulla^@204~ er As Object, ByVal e As StockCardRow~dulla^@204~ 
    
    Public Delegate Sub StockC~dulla^@204~ hangeEventHandler(ByVal sender As Obj~dulla^@204~ As StockCardDetailRowChangeEvent)
  ~dulla^@204~ c Delegate Sub SupplierRowChangeEvent~dulla^@204~  sender As Object, ByVal e As Supplie~dulla^@204~ nt)
    
    Public Delegate Sub Us~dulla^@204~ ventHandler(ByVal sender As Object, B~dulla^@204~ rsRowChangeEvent)
    
    <System.~dulla^@204~ ler.GeneratedCodeAttribute("System.Da~dulla^@204~ edDataSetGenerator", "2.0.0.0"),  _
~dulla^@204~ erializable(),  _
     System.Xml.Se~dulla^@204~ mlSchemaProviderAttribute("GetTypedTa~dulla^@204~  _
    Partial Public Class BlankTab~dulla^@204~         Inherits System.Data.DataTabl~dulla^@204~ plements System.Collections.IEnumerab~dulla^@204~ 
        Private columnPartNo As Syst~dulla^@204~ olumn
        
        Private colu~dulla^@204~  As System.Data.DataColumn
        ~dulla^@204~ ate columnReorderLevel As System.Data~dulla^@204~         
        Private columnShelf~dulla^@204~ Data.DataColumn
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Sub New()
            MyBase.N~dulla^@204~    Me.TableName = "BlankTable"
     ~dulla^@204~ inInit
            Me.InitClass
   ~dulla^@204~ ndInit
        End Sub
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Friend Sub New(ByVal table As ~dulla^@204~ ataTable)
            MyBase.New
  ~dulla^@204~ TableName = table.TableName
        ~dulla^@204~ .CaseSensitive <> table.DataSet.CaseS~dulla^@204~ n
                Me.CaseSensitive =~dulla^@204~ nsitive
            End If
        ~dulla^@204~ .Locale.ToString <> table.DataSet.Loc~dulla^@204~  Then
                Me.Locale = ta~dulla^@204~            End If
            If (ta~dulla^@204~  <> table.DataSet.Namespace) Then
  ~dulla^@204~  Me.Namespace = table.Namespace
    ~dulla^@204~ f
            Me.Prefix = table.Pref~dulla^@204~    Me.MinimumCapacity = table.Minimum~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ected Sub New(ByVal info As System.Ru~dulla^@204~ zation.SerializationInfo, ByVal conte~dulla^@204~ Runtime.Serialization.StreamingContex~dulla^@204~    MyBase.New(info, context)
       ~dulla^@204~ ars
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public ReadOnly Property PartNoCo~dulla^@204~ tem.Data.DataColumn
            Get~dulla^@204~     Return Me.columnPartNo
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public ReadOnly Property Descripti~dulla^@204~  System.Data.DataColumn
            ~dulla^@204~         Return Me.columnDescription
~dulla^@204~ nd Get
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public ReadOnly Property ~dulla^@204~ olumn() As System.Data.DataColumn
  ~dulla^@204~ 
                Return Me.columnReo~dulla^@204~           End Get
        End Proper~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public ReadOnl~dulla^@204~ elfNoColumn() As System.Data.DataColu~dulla^@204~    Get
                Return Me.col~dulla^@204~            End Get
        End Prope~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute(),  _
         System.Compo~dulla^@204~ wsable(false)>  _
        Public Rea~dulla^@204~ y Count() As Integer
            Get~dulla^@204~      Return Me.Rows.Count
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Default ReadOnly Property It~dulla^@204~ x As Integer) As BlankTableRow
     ~dulla^@204~                Return CType(Me.Rows(i~dulla^@204~ bleRow)
            End Get
       ~dulla^@204~ 
        
        Public Event Blan~dulla^@204~ ging As BlankTableRowChangeEventHandl~dulla^@204~ 
        Public Event BlankTableRowCh~dulla^@204~ kTableRowChangeEventHandler
        ~dulla^@204~ lic Event BlankTableRowDeleting As Bl~dulla^@204~ angeEventHandler
        
        P~dulla^@204~ lankTableRowDeleted As BlankTableRowC~dulla^@204~ dler
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ oads Sub AddBlankTableRow(ByVal row A~dulla^@204~ ow)
            Me.Rows.Add(row)
  ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~  Function AddBlankTableRow(ByVal Part~dulla^@204~  ByVal Description As String, ByVal R~dulla^@204~ s Integer, ByVal ShelfNo As String) A~dulla^@204~ ow
            Dim rowBlankTableRow ~dulla^@204~ Row = CType(Me.NewRow,BlankTableRow)~dulla^@204~ rowBlankTableRow.ItemArray = New Obje~dulla^@204~  Description, ReorderLevel, ShelfNo}~dulla^@204~ Me.Rows.Add(rowBlankTableRow)
      ~dulla^@204~ rowBlankTableRow
        End Functio~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Overrida~dulla^@204~ GetEnumerator() As System.Collections~dulla^@204~ Implements System.Collections.IEnumer~dulla^@204~ rator
            Return Me.Rows.Get~dulla^@204~        End Function
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Overrides Function Clone() ~dulla^@204~ a.DataTable
            Dim cln As B~dulla^@204~ Table = CType(MyBase.Clone,BlankTable~dulla^@204~            cln.InitVars
            ~dulla^@204~        End Function
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Protected Overrides Function Creat~dulla^@204~ s System.Data.DataTable
            ~dulla^@204~ ankTableDataTable
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Friend Sub Ini~dulla^@204~         Me.columnPartNo = MyBase.Colu~dulla^@204~ 
            Me.columnDescription = ~dulla^@204~ s("Description")
            Me.colu~dulla^@204~ l = MyBase.Columns("ReorderLevel")
 ~dulla^@204~ .columnShelfNo = MyBase.Columns("Shel~dulla^@204~   End Sub
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~  Sub InitClass()
            Me.colu~dulla^@204~ w System.Data.DataColumn("PartNo", Ge~dulla^@204~ , Nothing, System.Data.MappingType.El~dulla^@204~        MyBase.Columns.Add(Me.columnPa~dulla^@204~       Me.columnDescription = New Syst~dulla^@204~ olumn("Description", GetType(String),~dulla^@204~ tem.Data.MappingType.Element)
      ~dulla^@204~ Columns.Add(Me.columnDescription)
  ~dulla^@204~ columnReorderLevel = New System.Data.~dulla^@204~ eorderLevel", GetType(Integer), Nothi~dulla^@204~ ta.MappingType.Element)
            ~dulla^@204~ s.Add(Me.columnReorderLevel)
       ~dulla^@204~ nShelfNo = New System.Data.DataColumn~dulla^@204~ etType(String), Nothing, System.Data.~dulla^@204~ lement)
            MyBase.Columns.A~dulla^@204~ helfNo)
            Me.columnPartNo.~dulla^@204~ 0
            Me.columnDescription.M~dulla^@204~ 
            Me.columnShelfNo.MaxLen~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic Function NewBlankTableRow() As Bla~dulla^@204~            Return CType(Me.NewRow,Bla~dulla^@204~         End Function
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Protected Overrides Function NewR~dulla^@204~ (ByVal builder As System.Data.DataRow~dulla^@204~ ystem.Data.DataRow
            Retur~dulla^@204~ bleRow(builder)
        End Function~dulla^@204~        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protecte~dulla^@204~ unction GetRowType() As System.Type
~dulla^@204~ eturn GetType(BlankTableRow)
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pro~dulla^@204~ des Sub OnRowChanged(ByVal e As Syste~dulla^@204~ wChangeEventArgs)
            MyBase~dulla^@204~ (e)
            If (Not (Me.BlankTab~dulla^@204~ vent) Is Nothing) Then
             ~dulla^@204~  BlankTableRowChanged(Me, New BlankTa~dulla^@204~ vent(CType(e.Row,BlankTableRow), e.Ac~dulla^@204~        End If
        End Sub
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Protected Overrides Sub~dulla^@204~ g(ByVal e As System.Data.DataRowChang~dulla^@204~             MyBase.OnRowChanging(e)
~dulla^@204~ f (Not (Me.BlankTableRowChangingEvent~dulla^@204~  Then
                RaiseEvent Bla~dulla^@204~ nging(Me, New BlankTableRowChangeEven~dulla^@204~ ,BlankTableRow), e.Action))
        ~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ otected Overrides Sub OnRowDeleted(By~dulla^@204~ em.Data.DataRowChangeEventArgs)
    ~dulla^@204~ e.OnRowDeleted(e)
            If (No~dulla^@204~ bleRowDeletedEvent) Is Nothing) Then~dulla^@204~     RaiseEvent BlankTableRowDeleted(M~dulla^@204~ ableRowChangeEvent(CType(e.Row,BlankT~dulla^@204~ ction))
            End If
        ~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Protected~dulla^@204~ b OnRowDeleting(ByVal e As System.Dat~dulla^@204~ geEventArgs)
            MyBase.OnRo~dulla^@204~ 
            If (Not (Me.BlankTableRo~dulla^@204~ t) Is Nothing) Then
                ~dulla^@204~ ankTableRowDeleting(Me, New BlankTabl~dulla^@204~ nt(CType(e.Row,BlankTableRow), e.Acti~dulla^@204~      End If
        End Sub
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Sub RemoveBlankTab~dulla^@204~ ow As BlankTableRow)
            Me.~dulla^@204~ ow)
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Shared Function GetTypedTa~dulla^@204~ al xs As System.Xml.Schema.XmlSchemaS~dulla^@204~ .Xml.Schema.XmlSchemaComplexType
   ~dulla^@204~ type As System.Xml.Schema.XmlSchemaCo~dulla^@204~ ew System.Xml.Schema.XmlSchemaComplex~dulla^@204~      Dim sequence As System.Xml.Schem~dulla^@204~ quence = New System.Xml.Schema.XmlSch~dulla^@204~             Dim ds As InventoryContro~dulla^@204~ t3 = New InventoryControlSystemDataSe~dulla^@204~    xs.Add(ds.GetSchemaSerializable)
~dulla^@204~ im any1 As System.Xml.Schema.XmlSchem~dulla^@204~ stem.Xml.Schema.XmlSchemaAny
       ~dulla^@204~ espace = "http://www.w3.org/2001/XMLS~dulla^@204~        any1.MinOccurs = New Decimal(0~dulla^@204~   any1.MaxOccurs = Decimal.MaxValue
~dulla^@204~ ny1.ProcessContents = System.Xml.Sche~dulla^@204~ ontentProcessing.Lax
            seq~dulla^@204~ dd(any1)
            Dim any2 As Sys~dulla^@204~ a.XmlSchemaAny = New System.Xml.Schem~dulla^@204~ y
            any2.Namespace = "urn:~dulla^@204~ soft-com:xml-diffgram-v1"
          ~dulla^@204~ urs = New Decimal(1)
            any~dulla^@204~ ents = System.Xml.Schema.XmlSchemaCon~dulla^@204~ g.Lax
            sequence.Items.Add~dulla^@204~        Dim attribute1 As System.Xml.S~dulla^@204~ maAttribute = New System.Xml.Schema.X~dulla^@204~ bute
            attribute1.Name = "~dulla^@204~            attribute1.FixedValue = ds~dulla^@204~            type.Attributes.Add(attrib~dulla^@204~       Dim attribute2 As System.Xml.Sc~dulla^@204~ aAttribute = New System.Xml.Schema.Xm~dulla^@204~ ute
            attribute2.Name = "t~dulla^@204~ 
            attribute2.FixedValue =~dulla^@204~ ataTable"
            type.Attribute~dulla^@204~ te2)
            type.Particle = seq~dulla^@204~       Return type
        End Functi~dulla^@204~ lass
    
    <System.CodeDom.Compi~dulla^@204~ CodeAttribute("System.Data.Design.Typ~dulla^@204~ rator", "2.0.0.0"),  _
     System.S~dulla^@204~ ,  _
     System.Xml.Serialization.X~dulla^@204~ derAttribute("GetTypedTableSchema")> ~dulla^@204~ al Public Class CashSalesDataTable
 ~dulla^@204~ ts System.Data.DataTable
        Imp~dulla^@204~ m.Collections.IEnumerable
        
~dulla^@204~ te columnCashSalesInvoiceNo As System~dulla^@204~ umn
        
        Private column~dulla^@204~ m.Data.DataColumn
        
        ~dulla^@204~ nTotalAmount As System.Data.DataColum~dulla^@204~         Private columnVAT As System.D~dulla^@204~ n
        
        Private columnGr~dulla^@204~ ystem.Data.DataColumn
        
    ~dulla^@204~ olumnTotalInWords As System.Data.Data~dulla^@204~    
        Private columnCustomerNa~dulla^@204~ Data.DataColumn
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Sub New()
            MyBase.N~dulla^@204~    Me.TableName = "CashSales"
      ~dulla^@204~ nInit
            Me.InitClass
    ~dulla^@204~ dInit
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Friend Sub New(ByVal table As S~dulla^@204~ taTable)
            MyBase.New
   ~dulla^@204~ ableName = table.TableName
         ~dulla^@204~ CaseSensitive <> table.DataSet.CaseSe~dulla^@204~ 
                Me.CaseSensitive = ~dulla^@204~ sitive
            End If
         ~dulla^@204~ Locale.ToString <> table.DataSet.Loca~dulla^@204~ Then
                Me.Locale = tab~dulla^@204~           End If
            If (tab~dulla^@204~ <> table.DataSet.Namespace) Then
   ~dulla^@204~ Me.Namespace = table.Namespace
     ~dulla^@204~ 
            Me.Prefix = table.Prefi~dulla^@204~   Me.MinimumCapacity = table.MinimumC~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ cted Sub New(ByVal info As System.Run~dulla^@204~ ation.SerializationInfo, ByVal contex~dulla^@204~ untime.Serialization.StreamingContext~dulla^@204~   MyBase.New(info, context)
        ~dulla^@204~ rs
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public ReadOnly Property CashSales~dulla^@204~ mn() As System.Data.DataColumn
     ~dulla^@204~                Return Me.columnCashSa~dulla^@204~ 
            End Get
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Read~dulla^@204~  DateColumn() As System.Data.DataColu~dulla^@204~    Get
                Return Me.col~dulla^@204~         End Get
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public ReadOnly ~dulla^@204~ lAmountColumn() As System.Data.DataCo~dulla^@204~      Get
                Return Me.c~dulla^@204~ unt
            End Get
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ erty VATColumn() As System.Data.DataC~dulla^@204~       Get
                Return Me.~dulla^@204~           End Get
        End Proper~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public ReadOnl~dulla^@204~ andTotalColumn() As System.Data.DataC~dulla^@204~       Get
                Return Me.~dulla^@204~ tal
            End Get
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ erty TotalInWordsColumn() As System.D~dulla^@204~ n
            Get
                R~dulla^@204~ mnTotalInWords
            End Get
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ adOnly Property CustomerNameColumn() ~dulla^@204~ a.DataColumn
            Get
      ~dulla^@204~ urn Me.columnCustomerName
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~    System.ComponentModel.Browsable(fa~dulla^@204~      Public ReadOnly Property Count()~dulla^@204~             Get
                Retu~dulla^@204~ unt
            End Get
        End Property
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ lt ReadOnly Property Item(ByVal index~dulla^@204~ As CashSalesRow
            Get
   ~dulla^@204~ Return CType(Me.Rows(index),CashSales~dulla^@204~      End Get
        End Property
 ~dulla^@204~     Public Event CashSalesRowChanging~dulla^@204~ RowChangeEventHandler
        
    ~dulla^@204~ ent CashSalesRowChanged As CashSalesR~dulla^@204~ Handler
        
        Public Eve~dulla^@204~ owDeleting As CashSalesRowChangeEvent~dulla^@204~     
        Public Event CashSalesR~dulla^@204~ CashSalesRowChangeEventHandler
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Overloads Sub Ad~dulla^@204~ (ByVal row As CashSalesRow)
        ~dulla^@204~ dd(row)
        End Sub
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public Overloads Function Add~dulla^@204~ ByVal CashSalesInvoiceNo As String, B~dulla^@204~  Date, ByVal TotalAmount As Decimal, ~dulla^@204~ Double, ByVal GrandTotal As Decimal, ~dulla^@204~ Words As String, ByVal parentCustomer~dulla^@204~ Sales_Customers As CustomersRow) As C~dulla^@204~             Dim rowCashSalesRow As Ca~dulla^@204~ CType(Me.NewRow,CashSalesRow)
      ~dulla^@204~ SalesRow.ItemArray = New Object() {Ca~dulla^@204~ eNo, _Date, TotalAmount, VAT, GrandTo~dulla^@204~ ords, parentCustomersRowByFK_CashSale~dulla^@204~ )}
            Me.Rows.Add(rowCashSa~dulla^@204~         Return rowCashSalesRow
     ~dulla^@204~ on
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ n FindByCashSalesInvoiceNo(ByVal Cash~dulla^@204~ o As String) As CashSalesRow
       ~dulla^@204~ Type(Me.Rows.Find(New Object() {CashS~dulla^@204~ }),CashSalesRow)
        End Functio~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Overrida~dulla^@204~ GetEnumerator() As System.Collections~dulla^@204~ Implements System.Collections.IEnumer~dulla^@204~ rator
            Return Me.Rows.Get~dulla^@204~        End Function
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Overrides Function Clone() ~dulla^@204~ a.DataTable
            Dim cln As C~dulla^@204~ able = CType(MyBase.Clone,CashSalesDa~dulla^@204~          cln.InitVars
            Re~dulla^@204~      End Function
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Protected Overrides Function CreateI~dulla^@204~ System.Data.DataTable
            Re~dulla^@204~ SalesDataTable
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Friend Sub InitVa~dulla^@204~      Me.columnCashSalesInvoiceNo = My~dulla^@204~ "CashSalesInvoiceNo")
            Me~dulla^@204~  MyBase.Columns("Date")
            ~dulla^@204~ lAmount = MyBase.Columns("TotalAmount~dulla^@204~    Me.columnVAT = MyBase.Columns("VAT~dulla^@204~    Me.columnGrandTotal = MyBase.Colum~dulla^@204~ l")
            Me.columnTotalInWord~dulla^@204~ lumns("TotalInWords")
            Me~dulla^@204~ erName = MyBase.Columns("CustomerName~dulla^@204~ nd Sub
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ b InitClass()
            Me.columnC~dulla^@204~ ceNo = New System.Data.DataColumn("Ca~dulla^@204~ eNo", GetType(String), Nothing, Syste~dulla^@204~ gType.Element)
            MyBase.Co~dulla^@204~ columnCashSalesInvoiceNo)
          ~dulla^@204~ te = New System.Data.DataColumn("Date~dulla^@204~ te), Nothing, System.Data.MappingType~dulla^@204~           Me.columnDate.ExtendedPrope~dulla^@204~ nerator_ColumnPropNameInRow", "_Date"~dulla^@204~   Me.columnDate.ExtendedProperties.Ad~dulla^@204~ UserColumnName", "Date")
           ~dulla^@204~ ns.Add(Me.columnDate)
            Me~dulla^@204~ mount = New System.Data.DataColumn("T~dulla^@204~ GetType(Decimal), Nothing, System.Dat~dulla^@204~ .Element)
            MyBase.Columns~dulla^@204~ nTotalAmount)
            Me.columnV~dulla^@204~ em.Data.DataColumn("VAT", GetType(Dou~dulla^@204~ , System.Data.MappingType.Element)
 ~dulla^@204~ Base.Columns.Add(Me.columnVAT)
     ~dulla^@204~ umnGrandTotal = New System.Data.DataC~dulla^@204~ otal", GetType(Decimal), Nothing, Sys~dulla^@204~ ingType.Element)
            MyBase.~dulla^@204~ e.columnGrandTotal)
            Me.c~dulla^@204~ ords = New System.Data.DataColumn("To~dulla^@204~ GetType(String), Nothing, System.Data~dulla^@204~ Element)
            MyBase.Columns.~dulla^@204~ TotalInWords)
            Me.columnC~dulla^@204~  New System.Data.DataColumn("Customer~dulla^@204~ e(String), Nothing, System.Data.Mappi~dulla^@204~ t)
            MyBase.Columns.Add(Me~dulla^@204~ erName)
            Me.Constraints.A~dulla^@204~ .Data.UniqueConstraint("Constraint1",~dulla^@204~ ata.DataColumn() {Me.columnCashSalesI~dulla^@204~ ue))
            Me.columnCashSalesI~dulla^@204~ wDBNull = false
            Me.colum~dulla^@204~ oiceNo.Unique = true
            Me.~dulla^@204~ esInvoiceNo.MaxLength = 20
         ~dulla^@204~ ate.AllowDBNull = false
            ~dulla^@204~ lAmount.AllowDBNull = false
        ~dulla^@204~ VAT.AllowDBNull = false
            ~dulla^@204~ dTotal.AllowDBNull = false
         ~dulla^@204~ otalInWords.AllowDBNull = false
    ~dulla^@204~ lumnTotalInWords.MaxLength = 40
    ~dulla^@204~ lumnCustomerName.AllowDBNull = false~dulla^@204~ Me.columnCustomerName.MaxLength = 20~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ on NewCashSalesRow() As CashSalesRow~dulla^@204~ Return CType(Me.NewRow,CashSalesRow)~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ d Overrides Function NewRowFromBuilde~dulla^@204~ er As System.Data.DataRowBuilder) As ~dulla^@204~ ataRow
            Return New CashSa~dulla^@204~ r)
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Protected Overrides Function ~dulla^@204~ As System.Type
            Return Ge~dulla^@204~ esRow)
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Protected Overrides Sub O~dulla^@204~ yVal e As System.Data.DataRowChangeEv~dulla^@204~          MyBase.OnRowChanged(e)
    ~dulla^@204~ ot (Me.CashSalesRowChangedEvent) Is N~dulla^@204~ 
                RaiseEvent CashSales~dulla^@204~ , New CashSalesRowChangeEvent(CType(e~dulla^@204~ sRow), e.Action))
            End If~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ errides Sub OnRowChanging(ByVal e As ~dulla^@204~ ataRowChangeEventArgs)
            M~dulla^@204~ anging(e)
            If (Not (Me.Ca~dulla^@204~ ngingEvent) Is Nothing) Then
       ~dulla^@204~ eEvent CashSalesRowChanging(Me, New C~dulla^@204~ angeEvent(CType(e.Row,CashSalesRow), ~dulla^@204~            End If
        End Sub
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Protected Overrides~dulla^@204~ eted(ByVal e As System.Data.DataRowCh~dulla^@204~ )
            MyBase.OnRowDeleted(e)~dulla^@204~  If (Not (Me.CashSalesRowDeletedEvent~dulla^@204~  Then
                RaiseEvent Cas~dulla^@204~ ted(Me, New CashSalesRowChangeEvent(C~dulla^@204~ shSalesRow), e.Action))
            ~dulla^@204~    End Sub
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~ ted Overrides Sub OnRowDeleting(ByVal~dulla^@204~ Data.DataRowChangeEventArgs)
       ~dulla^@204~ nRowDeleting(e)
            If (Not ~dulla^@204~ RowDeletingEvent) Is Nothing) Then
 ~dulla^@204~   RaiseEvent CashSalesRowDeleting(Me,~dulla^@204~ sRowChangeEvent(CType(e.Row,CashSales~dulla^@204~ n))
            End If
        End ~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Sub Re~dulla^@204~ Row(ByVal row As CashSalesRow)
     ~dulla^@204~ s.Remove(row)
        End Sub
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared F~dulla^@204~ pedTableSchema(ByVal xs As System.Xml~dulla^@204~ hemaSet) As System.Xml.Schema.XmlSche~dulla^@204~ 
            Dim type As System.Xml.~dulla^@204~ emaComplexType = New System.Xml.Schem~dulla^@204~ mplexType
            Dim sequence A~dulla^@204~ Schema.XmlSchemaSequence = New System~dulla^@204~ mlSchemaSequence
            Dim ds ~dulla^@204~ ontrolSystemDataSet3 = New InventoryC~dulla^@204~ ataSet3
            xs.Add(ds.GetSch~dulla^@204~ le)
            Dim any1 As System.X~dulla^@204~ SchemaAny = New System.Xml.Schema.Xml~dulla^@204~           any1.Namespace = "http://ww~dulla^@204~ /XMLSchema"
            any1.MinOccu~dulla^@204~ mal(0)
            any1.MaxOccurs = ~dulla^@204~ lue
            any1.ProcessContents~dulla^@204~ .Schema.XmlSchemaContentProcessing.La~dulla^@204~   sequence.Items.Add(any1)
         ~dulla^@204~ s System.Xml.Schema.XmlSchemaAny = Ne~dulla^@204~ Schema.XmlSchemaAny
            any2~dulla^@204~ "urn:schemas-microsoft-com:xml-diffgr~dulla^@204~        any2.MinOccurs = New Decimal(1~dulla^@204~   any2.ProcessContents = System.Xml.S~dulla^@204~ maContentProcessing.Lax
            ~dulla^@204~ s.Add(any2)
            Dim attribut~dulla^@204~ Xml.Schema.XmlSchemaAttribute = New S~dulla^@204~ ema.XmlSchemaAttribute
            a~dulla^@204~ e = "namespace"
            attribut~dulla^@204~  = ds.Namespace
            type.Att~dulla^@204~ ttribute1)
            Dim attribute~dulla^@204~ ml.Schema.XmlSchemaAttribute = New Sy~dulla^@204~ ma.XmlSchemaAttribute
            at~dulla^@204~  = "tableTypeName"
            attri~dulla^@204~ lue = "CashSalesDataTable"
         ~dulla^@204~ butes.Add(attribute2)
            ty~dulla^@204~  sequence
            Return type
 ~dulla^@204~ nction
    End Class
    
    <Sys~dulla^@204~ ompiler.GeneratedCodeAttribute("Syste~dulla^@204~ .TypedDataSetGenerator", "2.0.0.0"), ~dulla^@204~ em.Serializable(),  _
     System.Xm~dulla^@204~ on.XmlSchemaProviderAttribute("GetTyp~dulla^@204~ ")>  _
    Partial Public Class Cred~dulla^@204~ ble
        Inherits System.Data.Dat~dulla^@204~    Implements System.Collections.IEnu~dulla^@204~     
        Private columnCreditSal~dulla^@204~ s System.Data.DataColumn
        
 ~dulla^@204~ e columnDate As System.Data.DataColum~dulla^@204~         Private columnTotalAmount As ~dulla^@204~ ataColumn
        
        Private ~dulla^@204~ System.Data.DataColumn
        
   ~dulla^@204~ columnGrandTotal As System.Data.DataC~dulla^@204~   
        Private columnTotalInWord~dulla^@204~ ata.DataColumn
        
        Pri~dulla^@204~ eDate As System.Data.DataColumn
    ~dulla^@204~  Private columnCustomerName As System~dulla^@204~ umn
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ w()
            MyBase.New
        ~dulla^@204~ ame = "CreditSales"
            Me.B~dulla^@204~          Me.InitClass
            Me~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ nd Sub New(ByVal table As System.Data~dulla^@204~             MyBase.New
            M~dulla^@204~  table.TableName
            If (tab~dulla^@204~ ive <> table.DataSet.CaseSensitive) T~dulla^@204~         Me.CaseSensitive = table.Case~dulla^@204~           End If
            If (tab~dulla^@204~ tring <> table.DataSet.Locale.ToStrin~dulla^@204~             Me.Locale = table.Locale~dulla^@204~ End If
            If (table.Namespa~dulla^@204~ ataSet.Namespace) Then
             ~dulla^@204~ ce = table.Namespace
            End~dulla^@204~     Me.Prefix = table.Prefix
       ~dulla^@204~ umCapacity = table.MinimumCapacity
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pr~dulla^@204~ ew(ByVal info As System.Runtime.Seria~dulla^@204~ alizationInfo, ByVal context As Syste~dulla^@204~ ialization.StreamingContext)
       ~dulla^@204~ ew(info, context)
            Me.Ini~dulla^@204~   End Sub
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ ReadOnly Property CreditSalesInvoiceN~dulla^@204~ System.Data.DataColumn
            G~dulla^@204~        Return Me.columnCreditSalesInv~dulla^@204~        End Get
        End Property~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public ReadOnly P~dulla^@204~ olumn() As System.Data.DataColumn
  ~dulla^@204~ 
                Return Me.columnDat~dulla^@204~   End Get
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public ReadOnly Proper~dulla^@204~ tColumn() As System.Data.DataColumn
~dulla^@204~ et
                Return Me.columnT~dulla^@204~            End Get
        End Prope~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public ReadOn~dulla^@204~ ATColumn() As System.Data.DataColumn~dulla^@204~ Get
                Return Me.column~dulla^@204~     End Get
        End Property
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public ReadOnly Prop~dulla^@204~ alColumn() As System.Data.DataColumn~dulla^@204~ Get
                Return Me.column~dulla^@204~            End Get
        End Prope~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public ReadOn~dulla^@204~ otalInWordsColumn() As System.Data.Da~dulla^@204~          Get
                Return ~dulla^@204~ lInWords
            End Get
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  Property DueDateColumn() As System.D~dulla^@204~ n
            Get
                R~dulla^@204~ mnDueDate
            End Get
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y Property CustomerNameColumn() As Sy~dulla^@204~ aColumn
            Get
           ~dulla^@204~ e.columnCustomerName
            End~dulla^@204~  End Property
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ stem.ComponentModel.Browsable(false)>~dulla^@204~ Public ReadOnly Property Count() As I~dulla^@204~        Get
                Return Me~dulla^@204~             End Get
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Defau~dulla^@204~ roperty Item(ByVal index As Integer) ~dulla^@204~ sRow
            Get
              ~dulla^@204~ e(Me.Rows(index),CreditSalesRow)
   ~dulla^@204~ Get
        End Property
        
~dulla^@204~ c Event CreditSalesRowChanging As Cre~dulla^@204~ angeEventHandler
        
        P~dulla^@204~ reditSalesRowChanged As CreditSalesRo~dulla^@204~ andler
        
        Public Even~dulla^@204~ RowDeleting As CreditSalesRowChangeEv~dulla^@204~        
        Public Event CreditS~dulla^@204~ d As CreditSalesRowChangeEventHandler~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Overloads~dulla^@204~ tSalesRow(ByVal row As CreditSalesRow~dulla^@204~   Me.Rows.Add(row)
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Overloads F~dulla^@204~ editSalesRow(ByVal CreditSalesInvoice~dulla^@204~  ByVal _Date As Date, ByVal TotalAmou~dulla^@204~ , ByVal VAT As Double, ByVal GrandTot~dulla^@204~ , ByVal TotalInWords As String, ByVal~dulla^@204~ ate, ByVal parentCustomersRowByFK_Cre~dulla^@204~ omers As CustomersRow) As CreditSales~dulla^@204~     Dim rowCreditSalesRow As CreditSa~dulla^@204~ e(Me.NewRow,CreditSalesRow)
        ~dulla^@204~ SalesRow.ItemArray = New Object() {Cr~dulla^@204~ iceNo, _Date, TotalAmount, VAT, Grand~dulla^@204~ nWords, DueDate, parentCustomersRowBy~dulla^@204~ s_Customers(0)}
            Me.Rows.~dulla^@204~ SalesRow)
            Return rowCred~dulla^@204~        End Function
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Function FindByCreditSalesI~dulla^@204~ l CreditSalesInvoiceNo As String) As CreditSalesRow
            Return CType(M~dulla^@204~ ew Object() {CreditSalesInvoiceNo}),C~dulla^@204~ )
        End Function
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Overridable Function Ge~dulla^@204~  As System.Collections.IEnumerator Im~dulla^@204~ em.Collections.IEnumerable.GetEnumera~dulla^@204~     Return Me.Rows.GetEnumerator
   ~dulla^@204~ tion
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ ides Function Clone() As System.Data.~dulla^@204~           Dim cln As CreditSalesDataT~dulla^@204~ MyBase.Clone,CreditSalesDataTable)
 ~dulla^@204~ n.InitVars
            Return cln
 ~dulla^@204~ nction
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ Overrides Function CreateInstance() A~dulla^@204~ .DataTable
            Return New Cr~dulla^@204~ Table
        End Function
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Friend Sub InitVars()
   ~dulla^@204~ olumnCreditSalesInvoiceNo = MyBase.Co~dulla^@204~ SalesInvoiceNo")
            Me.colu~dulla^@204~ se.Columns("Date")
            Me.co~dulla^@204~ nt = MyBase.Columns("TotalAmount")
 ~dulla^@204~ .columnVAT = MyBase.Columns("VAT")
 ~dulla^@204~ .columnGrandTotal = MyBase.Columns("G~dulla^@204~             Me.columnTotalInWords = M~dulla^@204~ ("TotalInWords")
            Me.colu~dulla^@204~ yBase.Columns("DueDate")
           ~dulla^@204~ tomerName = MyBase.Columns("CustomerN~dulla^@204~   End Sub
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~  Sub InitClass()
            Me.colu~dulla^@204~ InvoiceNo = New System.Data.DataColum~dulla^@204~ sInvoiceNo", GetType(String), Nothing~dulla^@204~ .MappingType.Element)
            My~dulla^@204~ Add(Me.columnCreditSalesInvoiceNo)
 ~dulla^@204~ .columnDate = New System.Data.DataCol~dulla^@204~ etType(Date), Nothing, System.Data.Ma~dulla^@204~ ment)
            Me.columnDate.Exte~dulla^@204~ s.Add("Generator_ColumnPropNameInRow"~dulla^@204~            Me.columnDate.ExtendedProp~dulla^@204~ enerator_UserColumnName", "Date")
  ~dulla^@204~ ase.Columns.Add(Me.columnDate)
     ~dulla^@204~ umnTotalAmount = New System.Data.Data~dulla^@204~ Amount", GetType(Decimal), Nothing, S~dulla^@204~ ppingType.Element)
            MyBas~dulla^@204~ (Me.columnTotalAmount)
            M~dulla^@204~  New System.Data.DataColumn("VAT", Ge~dulla^@204~ , Nothing, System.Data.MappingType.El~dulla^@204~        MyBase.Columns.Add(Me.columnVA~dulla^@204~    Me.columnGrandTotal = New System.D~dulla^@204~ n("GrandTotal", GetType(Decimal), Not~dulla^@204~ Data.MappingType.Element)
          ~dulla^@204~ mns.Add(Me.columnGrandTotal)
       ~dulla^@204~ nTotalInWords = New System.Data.DataC~dulla^@204~ nWords", GetType(String), Nothing, Sy~dulla^@204~ pingType.Element)
            MyBase~dulla^@204~ Me.columnTotalInWords)
            M~dulla^@204~ te = New System.Data.DataColumn("DueD~dulla^@204~ (Date), Nothing, System.Data.MappingT~dulla^@204~ 
            MyBase.Columns.Add(Me.co~dulla^@204~ 
            Me.columnCustomerName = ~dulla^@204~ ta.DataColumn("CustomerName", GetType~dulla^@204~ hing, System.Data.MappingType.Element~dulla^@204~   MyBase.Columns.Add(Me.columnCustome~dulla^@204~        Me.Constraints.Add(New System.~dulla^@204~ nstraint("Constraint1", New System.Da~dulla^@204~ () {Me.columnCreditSalesInvoiceNo}, t~dulla^@204~       Me.columnCreditSalesInvoiceNo.A~dulla^@204~ false
            Me.columnCreditSal~dulla^@204~ nique = true
            Me.columnCr~dulla^@204~ iceNo.MaxLength = 20
            Me.~dulla^@204~ lowDBNull = false
            Me.col~dulla^@204~ t.AllowDBNull = false
            Me~dulla^@204~ lowDBNull = false
            Me.col~dulla^@204~ .AllowDBNull = false
            Me.~dulla^@204~ Words.MaxLength = 40
            Me.~dulla^@204~ .AllowDBNull = false
            Me.~dulla^@204~ rName.AllowDBNull = false
          ~dulla^@204~ stomerName.MaxLength = 20
        En~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Func~dulla^@204~ tSalesRow() As CreditSalesRow
      ~dulla^@204~ CType(Me.NewRow,CreditSalesRow)
    ~dulla^@204~ ion
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ rrides Function NewRowFromBuilder(ByV~dulla^@204~  System.Data.DataRowBuilder) As Syste~dulla^@204~ w
            Return New CreditSales~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Protected Overrides Function Get~dulla^@204~ System.Type
            Return GetTy~dulla^@204~ sRow)
        End Function
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Protected Overrides Sub On~dulla^@204~ Val e As System.Data.DataRowChangeEve~dulla^@204~         MyBase.OnRowChanged(e)
     ~dulla^@204~ t (Me.CreditSalesRowChangedEvent) Is ~dulla^@204~ 
                RaiseEvent CreditSa~dulla^@204~ (Me, New CreditSalesRowChangeEvent(CT~dulla^@204~ ditSalesRow), e.Action))
           ~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ cted Overrides Sub OnRowChanging(ByVa~dulla^@204~ .Data.DataRowChangeEventArgs)
      ~dulla^@204~ OnRowChanging(e)
            If (Not~dulla^@204~ lesRowChangingEvent) Is Nothing) Then~dulla^@204~      RaiseEvent CreditSalesRowChangin~dulla^@204~ ditSalesRowChangeEvent(CType(e.Row,Cr~dulla^@204~ , e.Action))
            End If
   ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Prot~dulla^@204~ es Sub OnRowDeleted(ByVal e As System~dulla^@204~ ChangeEventArgs)
            MyBase.~dulla^@204~ e)
            If (Not (Me.CreditSal~dulla^@204~ vent) Is Nothing) Then
             ~dulla^@204~  CreditSalesRowDeleted(Me, New Credit~dulla^@204~ eEvent(CType(e.Row,CreditSalesRow), e~dulla^@204~           End If
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Protected Overrides ~dulla^@204~ ting(ByVal e As System.Data.DataRowCh~dulla^@204~ )
            MyBase.OnRowDeleting(e~dulla^@204~   If (Not (Me.CreditSalesRowDeletingE~dulla^@204~ ing) Then
                RaiseEvent~dulla^@204~ owDeleting(Me, New CreditSalesRowChan~dulla^@204~ (e.Row,CreditSalesRow), e.Action))
 ~dulla^@204~ d If
        End Sub
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Sub RemoveCreditSalesRow(~dulla^@204~ CreditSalesRow)
            Me.Rows.~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Shared Function GetTypedTableSc~dulla^@204~  As System.Xml.Schema.XmlSchemaSet) A~dulla^@204~ Schema.XmlSchemaComplexType
        ~dulla^@204~ As System.Xml.Schema.XmlSchemaComplex~dulla^@204~ stem.Xml.Schema.XmlSchemaComplexType~dulla^@204~ Dim sequence As System.Xml.Schema.Xml~dulla^@204~ e = New System.Xml.Schema.XmlSchemaSe~dulla^@204~        Dim ds As InventoryControlSyst~dulla^@204~ New InventoryControlSystemDataSet3
 ~dulla^@204~ .Add(ds.GetSchemaSerializable)
     ~dulla^@204~ y1 As System.Xml.Schema.XmlSchemaAny ~dulla^@204~ Xml.Schema.XmlSchemaAny
            ~dulla^@204~ e = "http://www.w3.org/2001/XMLSchema~dulla^@204~   any1.MinOccurs = New Decimal(0)
  ~dulla^@204~ 1.MaxOccurs = Decimal.MaxValue
     ~dulla^@204~ rocessContents = System.Xml.Schema.Xm~dulla^@204~ tProcessing.Lax
            sequence~dulla^@204~ y1)
            Dim any2 As System.X~dulla^@204~ SchemaAny = New System.Xml.Schema.Xml~dulla^@204~           any2.Namespace = "urn:schem~dulla^@204~ com:xml-diffgram-v1"
            any~dulla^@204~  New Decimal(1)
            any2.Pro~dulla^@204~ = System.Xml.Schema.XmlSchemaContentP~dulla^@204~ 
            sequence.Items.Add(any2~dulla^@204~   Dim attribute1 As System.Xml.Schema~dulla^@204~ ribute = New System.Xml.Schema.XmlSch~dulla^@204~ 
            attribute1.Name = "names~dulla^@204~       attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(att~dulla^@204~          Dim attribute2 As System.Xml~dulla^@204~ hemaAttribute = New System.Xml.Schema~dulla^@204~ ribute
            attribute2.Name =~dulla^@204~ me"
            attribute2.FixedValu~dulla^@204~ lesDataTable"
            type.Attri~dulla^@204~ ribute2)
            type.Particle =~dulla^@204~           Return type
        End Fu~dulla^@204~ nd Class
    
    <System.CodeDom.C~dulla^@204~ atedCodeAttribute("System.Data.Design~dulla^@204~ Generator", "2.0.0.0"),  _
     Syst~dulla^@204~ le(),  _
     System.Xml.Serializati~dulla^@204~ roviderAttribute("GetTypedTableSchema~dulla^@204~ artial Public Class CustomersDataTabl~dulla^@204~ herits System.Data.DataTable
       ~dulla^@204~ ystem.Collections.IEnumerable
      ~dulla^@204~ rivate columnCustomerName As System.D~dulla^@204~ n
        
        Private columnSu~dulla^@204~ em.Data.DataColumn
        
       ~dulla^@204~ mnKebele As System.Data.DataColumn
 ~dulla^@204~     Private columnHouseNo As System.D~dulla^@204~ n
        
        Private columnTe~dulla^@204~ ata.DataColumn
        
        Pri~dulla^@204~ x As System.Data.DataColumn
        ~dulla^@204~ vate columnPostalAddress As System.Da~dulla^@204~ 
        
        Private columnEma~dulla^@204~ Data.DataColumn
        
        Pr~dulla^@204~ ustomerVATRegNo As System.Data.DataCo~dulla^@204~  
        Private columnCustomerTINN~dulla^@204~ ata.DataColumn
        
        Pri~dulla^@204~ stomerDateOfReg As System.Data.DataCo~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Sub N~dulla^@204~      MyBase.New
            Me.Table~dulla^@204~ mers"
            Me.BeginInit
    ~dulla^@204~ itClass
            Me.EndInit
    ~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Frien~dulla^@204~ al table As System.Data.DataTable)
 ~dulla^@204~ Base.New
            Me.TableName = ~dulla^@204~ me
            If (table.CaseSensiti~dulla^@204~ ataSet.CaseSensitive) Then
         ~dulla^@204~ eSensitive = table.CaseSensitive
   ~dulla^@204~ If
            If (table.Locale.ToSt~dulla^@204~ .DataSet.Locale.ToString) Then
     ~dulla^@204~ .Locale = table.Locale
            E~dulla^@204~       If (table.Namespace <> table.Da~dulla^@204~ ce) Then
                Me.Namespac~dulla^@204~ espace
            End If
         ~dulla^@204~ = table.Prefix
            Me.Minimu~dulla^@204~ able.MinimumCapacity
        End Sub~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Protected Sub Ne~dulla^@204~ As System.Runtime.Serialization.Seria~dulla^@204~  ByVal context As System.Runtime.Seri~dulla^@204~ eamingContext)
            MyBase.Ne~dulla^@204~ xt)
            Me.InitVars
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public R~dulla^@204~ rty CustomerNameColumn() As System.Da~dulla^@204~ 
            Get
                Re~dulla^@204~ nCustomerName
            End Get
 ~dulla^@204~ operty
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ dOnly Property SubCityColumn() As Sys~dulla^@204~ Column
            Get
            ~dulla^@204~ .columnSubCity
            End Get
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ adOnly Property KebeleColumn() As Sys~dulla^@204~ Column
            Get
            ~dulla^@204~ .columnKebele
            End Get
 ~dulla^@204~ operty
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ dOnly Property HouseNoColumn() As Sys~dulla^@204~ Column
            Get
            ~dulla^@204~ .columnHouseNo
            End Get
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ adOnly Property TelColumn() As System~dulla^@204~ umn
            Get
               ~dulla^@204~ lumnTel
            End Get
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ Property FaxColumn() As System.Data.D~dulla^@204~           Get
                Return~dulla^@204~ 
            End Get
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Rea~dulla^@204~ y PostalAddressColumn() As System.Dat~dulla^@204~ 
            Get
                Ret~dulla^@204~ PostalAddress
            End Get
 ~dulla^@204~ operty
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ dOnly Property EmailColumn() As Syste~dulla^@204~ lumn
            Get
              ~dulla^@204~ olumnEmail
            End Get
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ly Property CustomerVATRegNoColumn() ~dulla^@204~ a.DataColumn
            Get
      ~dulla^@204~ urn Me.columnCustomerVATRegNo
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public ReadOnly Property Custom~dulla^@204~ () As System.Data.DataColumn
       ~dulla^@204~              Return Me.columnCustomer~dulla^@204~       End Get
        End Property
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public ReadOnly Pr~dulla^@204~ erDateOfRegColumn() As System.Data.Da~dulla^@204~          Get
                Return ~dulla^@204~ omerDateOfReg
            End Get
 ~dulla^@204~ operty
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute(),  _
     ~dulla^@204~ mponentModel.Browsable(false)>  _
  ~dulla^@204~ ReadOnly Property Count() As Integer~dulla^@204~ Get
                Return Me.Rows.C~dulla^@204~      End Get
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public Default Read~dulla^@204~  Item(ByVal index As Integer) As Cust~dulla^@204~          Get
                Return ~dulla^@204~ (index),CustomersRow)
            En~dulla^@204~   End Property
        
        Pub~dulla^@204~ tomersRowChanging As CustomersRowChan~dulla^@204~ r
        
        Public Event Cus~dulla^@204~ ged As CustomersRowChangeEventHandler~dulla^@204~        Public Event CustomersRowDelet~dulla^@204~ ersRowChangeEventHandler
        
 ~dulla^@204~  Event CustomersRowDeleted As Custome~dulla^@204~ entHandler
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Overloads Sub AddCustomersRow(ByVal ~dulla^@204~ ersRow)
            Me.Rows.Add(row)~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ oads Function AddCustomersRow(ByVal C~dulla^@204~ s String, ByVal SubCity As String, By~dulla^@204~  String, ByVal HouseNo As String, ByV~dulla^@204~ ing, ByVal Fax As String, ByVal Posta~dulla^@204~ tring, ByVal Email As String, ByVal C~dulla^@204~ No As String, ByVal CustomerTINNo As ~dulla^@204~  CustomerDateOfReg As Date) As Custom~dulla^@204~        Dim rowCustomersRow As Custome~dulla^@204~ (Me.NewRow,CustomersRow)
           ~dulla^@204~ Row.ItemArray = New Object() {Custome~dulla^@204~ y, Kebele, HouseNo, Tel, Fax, PostalA~dulla^@204~ , CustomerVATRegNo, CustomerTINNo, Cu~dulla^@204~ eg}
            Me.Rows.Add(rowCusto~dulla^@204~          Return rowCustomersRow
    ~dulla^@204~ ion
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ on FindByCustomerName(ByVal CustomerN~dulla^@204~ ) As CustomersRow
            Return~dulla^@204~ s.Find(New Object() {CustomerName}),C~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Overridable Function GetE~dulla^@204~ s System.Collections.IEnumerator Impl~dulla^@204~ .Collections.IEnumerable.GetEnumerato~dulla^@204~   Return Me.Rows.GetEnumerator
     ~dulla^@204~ on
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System~dulla^@204~ le
            Dim cln As CustomersD~dulla^@204~ ype(MyBase.Clone,CustomersDataTable)~dulla^@204~ cln.InitVars
            Return cln~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ d Overrides Function CreateInstance()~dulla^@204~ ta.DataTable
            Return New ~dulla^@204~ Table
        End Function
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Friend Sub InitVars()
   ~dulla^@204~ olumnCustomerName = MyBase.Columns("C~dulla^@204~ 
            Me.columnSubCity = MyBa~dulla^@204~ ubCity")
            Me.columnKebele~dulla^@204~ umns("Kebele")
            Me.column~dulla^@204~ ase.Columns("HouseNo")
            M~dulla^@204~  MyBase.Columns("Tel")
            M~dulla^@204~  MyBase.Columns("Fax")
            M~dulla^@204~ lAddress = MyBase.Columns("PostalAddr~dulla^@204~       Me.columnEmail = MyBase.Columns~dulla^@204~           Me.columnCustomerVATRegNo =~dulla^@204~ ns("CustomerVATRegNo")
            M~dulla^@204~ merTINNo = MyBase.Columns("CustomerTI~dulla^@204~       Me.columnCustomerDateOfReg = My~dulla^@204~ "CustomerDateOfReg")
        End Sub~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Private Sub Init~dulla^@204~         Me.columnCustomerName = New S~dulla^@204~ taColumn("CustomerName", GetType(Stri~dulla^@204~  System.Data.MappingType.Element)
  ~dulla^@204~ ase.Columns.Add(Me.columnCustomerName~dulla^@204~   Me.columnSubCity = New System.Data.~dulla^@204~ ubCity", GetType(String), Nothing, Sy~dulla^@204~ pingType.Element)
            MyBase~dulla^@204~ Me.columnSubCity)
            Me.col~dulla^@204~ ew System.Data.DataColumn("Kebele", G~dulla^@204~ ), Nothing, System.Data.MappingType.E~dulla^@204~         MyBase.Columns.Add(Me.columnK~dulla^@204~        Me.columnHouseNo = New System.~dulla^@204~ mn("HouseNo", GetType(String), Nothin~dulla^@204~ a.MappingType.Element)
            M~dulla^@204~ .Add(Me.columnHouseNo)
            M~dulla^@204~  New System.Data.DataColumn("Tel", Ge~dulla^@204~ , Nothing, System.Data.MappingType.El~dulla^@204~        MyBase.Columns.Add(Me.columnTe~dulla^@204~    Me.columnFax = New System.Data.Dat~dulla^@204~ , GetType(String), Nothing, System.Da~dulla^@204~ e.Element)
            MyBase.Column~dulla^@204~ mnFax)
            Me.columnPostalAd~dulla^@204~ ystem.Data.DataColumn("PostalAddress"~dulla^@204~ ing), Nothing, System.Data.MappingTyp~dulla^@204~            MyBase.Columns.Add(Me.colu~dulla^@204~ ss)
            Me.columnEmail = New~dulla^@204~ DataColumn("Email", GetType(String), ~dulla^@204~ em.Data.MappingType.Element)
       ~dulla^@204~ olumns.Add(Me.columnEmail)
         ~dulla^@204~ ustomerVATRegNo = New System.Data.Dat~dulla^@204~ omerVATRegNo", GetType(String), Nothi~dulla^@204~ ta.MappingType.Element)
            ~dulla^@204~ s.Add(Me.columnCustomerVATRegNo)
   ~dulla^@204~ olumnCustomerTINNo = New System.Data.~dulla^@204~ ustomerTINNo", GetType(String), Nothi~dulla^@204~ ta.MappingType.Element)
            ~dulla^@204~ s.Add(Me.columnCustomerTINNo)
      ~dulla^@204~ mnCustomerDateOfReg = New System.Data~dulla^@204~ CustomerDateOfReg", GetType(Date), No~dulla^@204~ .Data.MappingType.Element)
         ~dulla^@204~ umns.Add(Me.columnCustomerDateOfReg)~dulla^@204~ Me.Constraints.Add(New System.Data.Un~dulla^@204~ t("Constraint1", New System.Data.Data~dulla^@204~ columnCustomerName}, true))
        ~dulla^@204~ CustomerName.AllowDBNull = false
   ~dulla^@204~ olumnCustomerName.Unique = true
    ~dulla^@204~ lumnCustomerName.MaxLength = 20
    ~dulla^@204~ lumnSubCity.MaxLength = 20
         ~dulla^@204~ ebele.MaxLength = 10
            Me.~dulla^@204~ .MaxLength = 10
            Me.colum~dulla^@204~ h = 20
            Me.columnFax.MaxL~dulla^@204~            Me.columnPostalAddress.Max~dulla^@204~             Me.columnEmail.MaxLength ~dulla^@204~      Me.columnCustomerVATRegNo.MaxLen~dulla^@204~          Me.columnCustomerTINNo.MaxLe~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Function NewCustomersRow() As Cus~dulla^@204~           Return CType(Me.NewRow,Cust~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Protected Overrides Function NewRow~dulla^@204~ yVal builder As System.Data.DataRowBu~dulla^@204~ tem.Data.DataRow
            Return ~dulla^@204~ Row(builder)
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Protected Overrides~dulla^@204~ RowType() As System.Type
           ~dulla^@204~ pe(CustomersRow)
        End Functio~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Protected Overr~dulla^@204~ wChanged(ByVal e As System.Data.DataR~dulla^@204~ Args)
            MyBase.OnRowChange~dulla^@204~      If (Not (Me.CustomersRowChangedE~dulla^@204~ ing) Then
                RaiseEvent~dulla^@204~ Changed(Me, New CustomersRowChangeEve~dulla^@204~ w,CustomersRow), e.Action))
        ~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ otected Overrides Sub OnRowChanging(B~dulla^@204~ tem.Data.DataRowChangeEventArgs)
   ~dulla^@204~ se.OnRowChanging(e)
            If (~dulla^@204~ mersRowChangingEvent) Is Nothing) The~dulla^@204~       RaiseEvent CustomersRowChanging~dulla^@204~ omersRowChangeEvent(CType(e.Row,Custo~dulla^@204~ ction))
            End If
        ~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Protected~dulla^@204~ b OnRowDeleted(ByVal e As System.Data~dulla^@204~ eEventArgs)
            MyBase.OnRow~dulla^@204~            If (Not (Me.CustomersRowDe~dulla^@204~ s Nothing) Then
                Rais~dulla^@204~ ersRowDeleted(Me, New CustomersRowCha~dulla^@204~ e(e.Row,CustomersRow), e.Action))
  ~dulla^@204~  If
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Protected Overrides Sub OnRowDele~dulla^@204~ As System.Data.DataRowChangeEventArgs~dulla^@204~   MyBase.OnRowDeleting(e)
          ~dulla^@204~ .CustomersRowDeletingEvent) Is Nothin~dulla^@204~             RaiseEvent CustomersRowDe~dulla^@204~ w CustomersRowChangeEvent(CType(e.Row~dulla^@204~ ), e.Action))
            End If
  ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ eCustomersRow(ByVal row As CustomersR~dulla^@204~     Me.Rows.Remove(row)
        End ~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Shared~dulla^@204~ TypedTableSchema(ByVal xs As System.X~dulla^@204~ SchemaSet) As System.Xml.Schema.XmlSc~dulla^@204~ pe
            Dim type As System.Xm~dulla^@204~ chemaComplexType = New System.Xml.Sch~dulla^@204~ ComplexType
            Dim sequence~dulla^@204~ l.Schema.XmlSchemaSequence = New Syst~dulla^@204~ .XmlSchemaSequence
            Dim d~dulla^@204~ yControlSystemDataSet3 = New Inventor~dulla^@204~ mDataSet3
            xs.Add(ds.GetS~dulla^@204~ able)
            Dim any1 As System~dulla^@204~ mlSchemaAny = New System.Xml.Schema.X~dulla^@204~             any1.Namespace = "http://~dulla^@204~ 01/XMLSchema"
            any1.MinOc~dulla^@204~ cimal(0)
            any1.MaxOccurs ~dulla^@204~ Value
            any1.ProcessConten~dulla^@204~ ml.Schema.XmlSchemaContentProcessing.~dulla^@204~     sequence.Items.Add(any1)
       ~dulla^@204~  As System.Xml.Schema.XmlSchemaAny = ~dulla^@204~ l.Schema.XmlSchemaAny
            an~dulla^@204~ = "urn:schemas-microsoft-com:xml-diff~dulla^@204~          any2.MinOccurs = New Decimal~dulla^@204~     any2.ProcessContents = System.Xml~dulla^@204~ hemaContentProcessing.Lax
          ~dulla^@204~ ems.Add(any2)
            Dim attrib~dulla^@204~ m.Xml.Schema.XmlSchemaAttribute = New~dulla^@204~ chema.XmlSchemaAttribute
           ~dulla^@204~ ame = "namespace"
            attrib~dulla^@204~ ue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim~dulla^@204~ s System.Xml.Schema.XmlSchemaAttribut~dulla^@204~ m.Xml.Schema.XmlSchemaAttribute
    ~dulla^@204~ bute2.Name = "tableTypeName"
       ~dulla^@204~ e2.FixedValue = "CustomersDataTable"~dulla^@204~ type.Attributes.Add(attribute2)
    ~dulla^@204~ Particle = sequence
            Retu~dulla^@204~     End Function
    End Class
    ~dulla^@204~ .CodeDom.Compiler.GeneratedCodeAttrib~dulla^@204~ ata.Design.TypedDataSetGenerator", "2~dulla^@204~ 
     System.Serializable(),  _
    ~dulla^@204~ erialization.XmlSchemaProviderAttribu~dulla^@204~ ableSchema")>  _
    Partial Public ~dulla^@204~ taTable
        Inherits System.Data~dulla^@204~        Implements System.Collections.~dulla^@204~         
        Private columnOrder~dulla^@204~ Data.DataColumn
        
        Pr~dulla^@204~ artNo As System.Data.DataColumn
    ~dulla^@204~  Private columnDescription As System.~dulla^@204~ mn
        
        Private columnR~dulla^@204~ ty As System.Data.DataColumn
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Sub New()
       ~dulla^@204~ ew
            Me.TableName = "Order~dulla^@204~   Me.BeginInit
            Me.InitCl~dulla^@204~     Me.EndInit
        End Sub
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Friend Sub New(ByVal t~dulla^@204~ m.Data.DataTable)
            MyBase~dulla^@204~      Me.TableName = table.TableName
~dulla^@204~ f (table.CaseSensitive <> table.DataS~dulla^@204~ ive) Then
                Me.CaseSen~dulla^@204~ e.CaseSensitive
            End If
~dulla^@204~ f (table.Locale.ToString <> table.Dat~dulla^@204~ oString) Then
                Me.Loc~dulla^@204~ ocale
            End If
          ~dulla^@204~ amespace <> table.DataSet.Namespace) ~dulla^@204~          Me.Namespace = table.Namespa~dulla^@204~    End If
            Me.Prefix = ta~dulla^@204~            Me.MinimumCapacity = table~dulla^@204~ ity
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Protected Sub New(ByVal info As S~dulla^@204~ .Serialization.SerializationInfo, ByV~dulla^@204~  System.Runtime.Serialization.Streami~dulla^@204~            MyBase.New(info, context)~dulla^@204~ Me.InitVars
        End Sub
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public ReadOnly Property ~dulla^@204~ () As System.Data.DataColumn
       ~dulla^@204~              Return Me.columnOrderNo~dulla^@204~ End Get
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public ReadOnly Property~dulla^@204~ () As System.Data.DataColumn
       ~dulla^@204~              Return Me.columnPartNo
~dulla^@204~ nd Get
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public ReadOnly Property ~dulla^@204~ lumn() As System.Data.DataColumn
   ~dulla^@204~ 
                Return Me.columnDesc~dulla^@204~         End Get
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public ReadOnly ~dulla^@204~ iredQuantityColumn() As System.Data.D~dulla^@204~           Get
                Return~dulla^@204~ uiredQuantity
            End Get
 ~dulla^@204~ operty
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute(),  _
     ~dulla^@204~ mponentModel.Browsable(false)>  _
  ~dulla^@204~ ReadOnly Property Count() As Integer~dulla^@204~ Get
                Return Me.Rows.C~dulla^@204~      End Get
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public Default Read~dulla^@204~  Item(ByVal index As Integer) As Orde~dulla^@204~      Get
                Return CTyp~dulla^@204~ ex),OrderRow)
            End Get
 ~dulla^@204~ operty
        
        Public Even~dulla^@204~ nging As OrderRowChangeEventHandler
~dulla^@204~      Public Event OrderRowChanged As ~dulla^@204~ eEventHandler
        
        Publ~dulla^@204~ rRowDeleting As OrderRowChangeEventHa~dulla^@204~   
        Public Event OrderRowDele~dulla^@204~ owChangeEventHandler
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Overloads Sub AddOrderRow(~dulla^@204~ OrderRow)
            Me.Rows.Add(ro~dulla^@204~ nd Sub
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ rloads Function AddOrderRow(ByVal par~dulla^@204~ wByFK_Order_Products As ProductsRow, ~dulla^@204~ As String, ByVal Description As Strin~dulla^@204~ iredQuantity As Integer) As OrderRow~dulla^@204~ Dim rowOrderRow As OrderRow = CType(M~dulla^@204~ rRow)
            rowOrderRow.ItemAr~dulla^@204~ ect() {parentProductsRowByFK_Order_Pr~dulla^@204~ rtNo, Description, RequiredQuantity}~dulla^@204~ Me.Rows.Add(rowOrderRow)
           ~dulla^@204~ derRow
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Function FindByOrd~dulla^@204~ derNo As String) As OrderRow
       ~dulla^@204~ Type(Me.Rows.Find(New Object() {Order~dulla^@204~ )
        End Function
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Overridable Function Ge~dulla^@204~  As System.Collections.IEnumerator Im~dulla^@204~ em.Collections.IEnumerable.GetEnumera~dulla^@204~     Return Me.Rows.GetEnumerator
   ~dulla^@204~ tion
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ ides Function Clone() As System.Data.~dulla^@204~           Dim cln As OrderDataTable =~dulla^@204~ .Clone,OrderDataTable)
            c~dulla^@204~             Return cln
        End F~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Protected~dulla^@204~ nction CreateInstance() As System.Dat~dulla^@204~             Return New OrderDataTable~dulla^@204~  Function
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Sub InitVars()
            Me.column~dulla^@204~ ase.Columns("OrderNo")
            M~dulla^@204~ o = MyBase.Columns("PartNo")
       ~dulla^@204~ nDescription = MyBase.Columns("Descri~dulla^@204~         Me.columnRequiredQuantity = M~dulla^@204~ ("RequiredQuantity")
        End Sub~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Private Sub Init~dulla^@204~         Me.columnOrderNo = New System~dulla^@204~ umn("OrderNo", GetType(String), Nothi~dulla^@204~ ta.MappingType.Element)
            ~dulla^@204~ s.Add(Me.columnOrderNo)
            ~dulla^@204~ No = New System.Data.DataColumn("Part~dulla^@204~ String), Nothing, System.Data.Mapping~dulla^@204~ 
            MyBase.Columns.Add(Me.c~dulla^@204~ 
            Me.columnDescription = N~dulla^@204~ a.DataColumn("Description", GetType(S~dulla^@204~ ng, System.Data.MappingType.Element)~dulla^@204~ MyBase.Columns.Add(Me.columnDescripti~dulla^@204~     Me.columnRequiredQuantity = New S~dulla^@204~ taColumn("RequiredQuantity", GetType(~dulla^@204~ hing, System.Data.MappingType.Element~dulla^@204~   MyBase.Columns.Add(Me.columnRequire~dulla^@204~            Me.Constraints.Add(New Sys~dulla^@204~ ueConstraint("Constraint1", New Syste~dulla^@204~ lumn() {Me.columnOrderNo}, true))
  ~dulla^@204~ columnOrderNo.AllowDBNull = false
  ~dulla^@204~ columnOrderNo.Unique = true
        ~dulla^@204~ OrderNo.MaxLength = 20
            M~dulla^@204~ o.AllowDBNull = false
            Me~dulla^@204~ .MaxLength = 20
            Me.colum~dulla^@204~ AllowDBNull = false
            Me.c~dulla^@204~ ion.MaxLength = 20
            Me.co~dulla^@204~ uantity.AllowDBNull = false
        ~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Fu~dulla^@204~ erRow() As OrderRow
            Retu~dulla^@204~ ewRow,OrderRow)
        End Function~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Protected Overri~dulla^@204~ NewRowFromBuilder(ByVal builder As Sy~dulla^@204~ aRowBuilder) As System.Data.DataRow
            Return New OrderRow(builder)
~dulla^@204~ unction
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~  Overrides Function GetRowType() As S~dulla^@204~            Return GetType(OrderRow)
~dulla^@204~ unction
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~  Overrides Sub OnRowChanged(ByVal e A~dulla^@204~ .DataRowChangeEventArgs)
           ~dulla^@204~ Changed(e)
            If (Not (Me.O~dulla^@204~ dEvent) Is Nothing) Then
           ~dulla^@204~ nt OrderRowChanged(Me, New OrderRowCh~dulla^@204~ pe(e.Row,OrderRow), e.Action))
     ~dulla^@204~ 
        End Sub
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Protected Overrides Sub OnRowChangin~dulla^@204~ System.Data.DataRowChangeEventArgs)
~dulla^@204~ yBase.OnRowChanging(e)
            I~dulla^@204~ derRowChangingEvent) Is Nothing) Then~dulla^@204~      RaiseEvent OrderRowChanging(Me, ~dulla^@204~ hangeEvent(CType(e.Row,OrderRow), e.A~dulla^@204~         End If
        End Sub
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Protected Overrides Su~dulla^@204~ d(ByVal e As System.Data.DataRowChang~dulla^@204~             MyBase.OnRowDeleted(e)
 ~dulla^@204~  (Not (Me.OrderRowDeletedEvent) Is No~dulla^@204~                 RaiseEvent OrderRowDe~dulla^@204~  OrderRowChangeEvent(CType(e.Row,Orde~dulla^@204~ on))
            End If
        End~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Protected Ov~dulla^@204~ nRowDeleting(ByVal e As System.Data.D~dulla^@204~ ventArgs)
            MyBase.OnRowDe~dulla^@204~           If (Not (Me.OrderRowDeletin~dulla^@204~ thing) Then
                RaiseEve~dulla^@204~ leting(Me, New OrderRowChangeEvent(CT~dulla^@204~ erRow), e.Action))
            End I~dulla^@204~ d Sub
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ RemoveOrderRow(ByVal row As OrderRow)~dulla^@204~  Me.Rows.Remove(row)
        End Sub~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Shared Fu~dulla^@204~ edTableSchema(ByVal xs As System.Xml.~dulla^@204~ emaSet) As System.Xml.Schema.XmlSchem~dulla^@204~ 
            Dim type As System.Xml.S~dulla^@204~ maComplexType = New System.Xml.Schema~dulla^@204~ plexType
            Dim sequence As~dulla^@204~ chema.XmlSchemaSequence = New System.~dulla^@204~ lSchemaSequence
            Dim ds A~dulla^@204~ ntrolSystemDataSet3 = New InventoryCo~dulla^@204~ taSet3
            xs.Add(ds.GetSche~dulla^@204~ e)
            Dim any1 As System.Xm~dulla^@204~ chemaAny = New System.Xml.Schema.XmlS~dulla^@204~          any1.Namespace = "http://www~dulla^@204~ XMLSchema"
            any1.MinOccur~dulla^@204~ al(0)
            any1.MaxOccurs = D~dulla^@204~ ue
            any1.ProcessContents ~dulla^@204~ Schema.XmlSchemaContentProcessing.Lax~dulla^@204~  sequence.Items.Add(any1)
          ~dulla^@204~  System.Xml.Schema.XmlSchemaAny = New~dulla^@204~ chema.XmlSchemaAny
            any2.~dulla^@204~ urn:schemas-microsoft-com:xml-diffgra~dulla^@204~       any2.MinOccurs = New Decimal(1)~dulla^@204~  any2.ProcessContents = System.Xml.Sc~dulla^@204~ aContentProcessing.Lax
            s~dulla^@204~ .Add(any2)
            Dim attribute~dulla^@204~ ml.Schema.XmlSchemaAttribute = New Sy~dulla^@204~ ma.XmlSchemaAttribute
            at~dulla^@204~  = "namespace"
            attribute~dulla^@204~ = ds.Namespace
            type.Attr~dulla^@204~ tribute1)
            Dim attribute2~dulla^@204~ l.Schema.XmlSchemaAttribute = New Sys~dulla^@204~ a.XmlSchemaAttribute
            att~dulla^@204~ = "tableTypeName"
            attrib~dulla^@204~ ue = "OrderDataTable"
            ty~dulla^@204~ .Add(attribute2)
            type.Pa~dulla^@204~ ence
            Return type
      ~dulla^@204~ n
    End Class
    
    <System.C~dulla^@204~ er.GeneratedCodeAttribute("System.Dat~dulla^@204~ dDataSetGenerator", "2.0.0.0"),  _
 ~dulla^@204~ rializable(),  _
     System.Xml.Ser~dulla^@204~ lSchemaProviderAttribute("GetTypedTab~dulla^@204~ _
    Partial Public Class ProductsD~dulla^@204~      Inherits System.Data.DataTable
~dulla^@204~ ments System.Collections.IEnumerable~dulla^@204~       Private columnPartNo As System.~dulla^@204~ mn
        
        Private columnD~dulla^@204~  System.Data.DataColumn
        
  ~dulla^@204~  columnUnitCost As System.Data.DataCo~dulla^@204~  
        Private columnSellingPrice~dulla^@204~ ata.DataColumn
        
        Pri~dulla^@204~ llingPrice2 As System.Data.DataColumn~dulla^@204~        Private columnQtyAtShop1 As Sy~dulla^@204~ aColumn
        
        Private co~dulla^@204~ 2 As System.Data.DataColumn
        ~dulla^@204~ vate columnQtyAtStore As System.Data.~dulla^@204~        
        Private columnTotalQ~dulla^@204~ stem.Data.DataColumn
        
     ~dulla^@204~ lumnReorderLevel As System.Data.DataC~dulla^@204~   
        Private columnShelfNo As ~dulla^@204~ ataColumn
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Sub New()
            MyBase.New
  ~dulla^@204~ TableName = "Products"
            M~dulla^@204~             Me.InitClass
           ~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ riend Sub New(ByVal table As System.D~dulla^@204~ )
            MyBase.New
          ~dulla^@204~ e = table.TableName
            If (~dulla^@204~ sitive <> table.DataSet.CaseSensitive~dulla^@204~            Me.CaseSensitive = table.C~dulla^@204~ 
            End If
            If (~dulla^@204~ ToString <> table.DataSet.Locale.ToSt~dulla^@204~                Me.Locale = table.Loca~dulla^@204~    End If
            If (table.Name~dulla^@204~ e.DataSet.Namespace) Then
          ~dulla^@204~ space = table.Namespace
            ~dulla^@204~        Me.Prefix = table.Prefix
    ~dulla^@204~ nimumCapacity = table.MinimumCapacity~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ b New(ByVal info As System.Runtime.Se~dulla^@204~ erializationInfo, ByVal context As Sy~dulla^@204~ Serialization.StreamingContext)
    ~dulla^@204~ e.New(info, context)
            Me.~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic ReadOnly Property PartNoColumn() A~dulla^@204~ .DataColumn
            Get
       ~dulla^@204~ rn Me.columnPartNo
            End G~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c ReadOnly Property DescriptionColumn~dulla^@204~ Data.DataColumn
            Get
   ~dulla^@204~ Return Me.columnDescription
        ~dulla^@204~         End Property
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public ReadOnly Property UnitCost~dulla^@204~ ystem.Data.DataColumn
            Ge~dulla^@204~       Return Me.columnUnitCost
     ~dulla^@204~ t
        End Property
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public ReadOnly Property Selli~dulla^@204~ n() As System.Data.DataColumn
      ~dulla^@204~               Return Me.columnSelling~dulla^@204~        End Get
        End Property~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public ReadOnly P~dulla^@204~ ngPrice2Column() As System.Data.DataC~dulla^@204~       Get
                Return Me.~dulla^@204~ Price2
            End Get
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ roperty QtyAtShop1Column() As System.~dulla^@204~ mn
            Get
                ~dulla^@204~ umnQtyAtShop1
            End Get
 ~dulla^@204~ operty
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ dOnly Property QtyAtShop2Column() As ~dulla^@204~ ataColumn
            Get
         ~dulla^@204~  Me.columnQtyAtShop2
            End Get
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public ReadOnly Property QtyAtSt~dulla^@204~ s System.Data.DataColumn
           ~dulla^@204~          Return Me.columnQtyAtStore
~dulla^@204~ nd Get
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public ReadOnly Property ~dulla^@204~ Column() As System.Data.DataColumn
 ~dulla^@204~ t
                Return Me.columnTo~dulla^@204~             End Get
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public ReadO~dulla^@204~ ReorderLevelColumn() As System.Data.D~dulla^@204~           Get
                Return~dulla^@204~ rderLevel
            End Get
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y Property ShelfNoColumn() As System.~dulla^@204~ mn
            Get
                ~dulla^@204~ umnShelfNo
            End Get
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute(),  _
        ~dulla^@204~ nentModel.Browsable(false)>  _
     ~dulla^@204~ dOnly Property Count() As Integer
  ~dulla^@204~ 
                Return Me.Rows.Coun~dulla^@204~   End Get
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Default ReadOnl~dulla^@204~ em(ByVal index As Integer) As Product~dulla^@204~      Get
                Return CTyp~dulla^@204~ ex),ProductsRow)
            End Get~dulla^@204~  Property
        
        Public E~dulla^@204~ RowChanging As ProductsRowChangeEvent~dulla^@204~     
        Public Event ProductsRo~dulla^@204~ roductsRowChangeEventHandler
       ~dulla^@204~ blic Event ProductsRowDeleting As Pro~dulla^@204~ eEventHandler
        
        Publ~dulla^@204~ uctsRowDeleted As ProductsRowChangeEv~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ b AddProductsRow(ByVal row As Product~dulla^@204~       Me.Rows.Add(row)
        End S~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Overloa~dulla^@204~ ddProductsRow(ByVal PartNo As String,~dulla^@204~ ption As String, ByVal UnitCost As De~dulla^@204~ SellingPrice1 As Double, ByVal Sellin~dulla^@204~ uble, ByVal QtyAtShop1 As Integer, By~dulla^@204~ 2 As Integer, ByVal QtyAtStore As Int~dulla^@204~ otalQuantity As Integer, ByVal Reorde~dulla^@204~ eger, ByVal ShelfNo As String) As Pro~dulla^@204~          Dim rowProductsRow As Produc~dulla^@204~ (Me.NewRow,ProductsRow)
            ~dulla^@204~ w.ItemArray = New Object() {PartNo, D~dulla^@204~ nitCost, SellingPrice1, SellingPrice2~dulla^@204~  QtyAtShop2, QtyAtStore, TotalQuantit~dulla^@204~ el, ShelfNo}
            Me.Rows.Add~dulla^@204~ ow)
            Return rowProductsRo~dulla^@204~ d Function
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Function FindByPartNo(ByVal PartNo A~dulla^@204~ ProductsRow
            Return CType~dulla^@204~ (New Object() {PartNo}),ProductsRow)~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ verridable Function GetEnumerator() A~dulla^@204~ ections.IEnumerator Implements System~dulla^@204~ IEnumerable.GetEnumerator
          ~dulla^@204~ ows.GetEnumerator
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Overrid~dulla^@204~ lone() As System.Data.DataTable
    ~dulla^@204~ ln As ProductsDataTable = CType(MyBas~dulla^@204~ ctsDataTable)
            cln.InitVa~dulla^@204~    Return cln
        End Function
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Protected Override~dulla^@204~ eateInstance() As System.Data.DataTab~dulla^@204~    Return New ProductsDataTable
    ~dulla^@204~ ion
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ itVars()
            Me.columnPartNo~dulla^@204~ umns("PartNo")
            Me.column~dulla^@204~  MyBase.Columns("Description")
     ~dulla^@204~ umnUnitCost = MyBase.Columns("UnitCos~dulla^@204~     Me.columnSellingPrice1 = MyBase.C~dulla^@204~ ngPrice1")
            Me.columnSell~dulla^@204~ yBase.Columns("SellingPrice2")
     ~dulla^@204~ umnQtyAtShop1 = MyBase.Columns("QtyAt~dulla^@204~         Me.columnQtyAtShop2 = MyBase.~dulla^@204~ tShop2")
            Me.columnQtyAtS~dulla^@204~ .Columns("QtyAtStore")
            M~dulla^@204~ Quantity = MyBase.Columns("TotalQuant~dulla^@204~       Me.columnReorderLevel = MyBase.~dulla^@204~ derLevel")
            Me.columnShel~dulla^@204~ Columns("ShelfNo")
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Private Sub InitCl~dulla^@204~       Me.columnPartNo = New System.Da~dulla^@204~ ("PartNo", GetType(String), Nothing, ~dulla^@204~ appingType.Element)
            MyBa~dulla^@204~ d(Me.columnPartNo)
            Me.co~dulla^@204~ on = New System.Data.DataColumn("Desc~dulla^@204~ Type(String), Nothing, System.Data.Ma~dulla^@204~ ment)
            MyBase.Columns.Add~dulla^@204~ cription)
            Me.columnUnitC~dulla^@204~ tem.Data.DataColumn("UnitCost", GetTy~dulla^@204~ Nothing, System.Data.MappingType.Elem~dulla^@204~      MyBase.Columns.Add(Me.columnUnit~dulla^@204~       Me.columnSellingPrice1 = New Sy~dulla^@204~ aColumn("SellingPrice1", GetType(Doub~dulla^@204~  System.Data.MappingType.Element)
  ~dulla^@204~ ase.Columns.Add(Me.columnSellingPrice~dulla^@204~    Me.columnSellingPrice2 = New Syste~dulla^@204~ lumn("SellingPrice2", GetType(Double)~dulla^@204~ stem.Data.MappingType.Element)
     ~dulla^@204~ .Columns.Add(Me.columnSellingPrice2)~dulla^@204~ Me.columnQtyAtShop1 = New System.Data~dulla^@204~ QtyAtShop1", GetType(Integer), Nothin~dulla^@204~ a.MappingType.Element)
            M~dulla^@204~ .Add(Me.columnQtyAtShop1)
          ~dulla^@204~ yAtShop2 = New System.Data.DataColumn~dulla^@204~ , GetType(Integer), Nothing, System.D~dulla^@204~ pe.Element)
            MyBase.Colum~dulla^@204~ umnQtyAtShop2)
            Me.column~dulla^@204~ New System.Data.DataColumn("QtyAtStor~dulla^@204~ nteger), Nothing, System.Data.Mapping~dulla^@204~ 
            MyBase.Columns.Add(Me.c~dulla^@204~ re)
            Me.columnTotalQuanti~dulla^@204~ em.Data.DataColumn("TotalQuantity", G~dulla^@204~ r), Nothing, System.Data.MappingType.~dulla^@204~          MyBase.Columns.Add(Me.column~dulla^@204~ )
            Me.columnReorderLevel ~dulla^@204~ Data.DataColumn("ReorderLevel", GetTy~dulla^@204~ Nothing, System.Data.MappingType.Elem~dulla^@204~      MyBase.Columns.Add(Me.columnReor~dulla^@204~           Me.columnShelfNo = New Syst~dulla^@204~ olumn("ShelfNo", GetType(String), Not~dulla^@204~ Data.MappingType.Element)
          ~dulla^@204~ mns.Add(Me.columnShelfNo)
          ~dulla^@204~ nts.Add(New System.Data.UniqueConstra~dulla^@204~ nt1", New System.Data.DataColumn() {M~dulla^@204~ o}, true))
            Me.columnPart~dulla^@204~ l = false
            Me.columnPartN~dulla^@204~ ue
            Me.columnPartNo.MaxLe~dulla^@204~           Me.columnDescription.AllowD~dulla^@204~ 
            Me.columnDescription.Ma~dulla^@204~ 
            Me.columnSellingPrice1.A~dulla^@204~ false
            Me.columnSellingPr~dulla^@204~ ull = false
            Me.columnReo~dulla^@204~ owDBNull = false
            Me.colu~dulla^@204~ owDBNull = false
            Me.colu~dulla^@204~ Length = 20
        End Sub
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Function NewProduc~dulla^@204~ oductsRow
            Return CType(M~dulla^@204~ uctsRow)
        End Function
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Protected Overrides Fun~dulla^@204~ romBuilder(ByVal builder As System.Da~dulla^@204~ lder) As System.Data.DataRow
       ~dulla^@204~ ew ProductsRow(builder)
        End ~dulla^@204~      
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        ~dulla^@204~ rrides Function GetRowType() As Syste~dulla^@204~        Return GetType(ProductsRow)
 ~dulla^@204~ nction
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ Overrides Sub OnRowChanged(ByVal e As~dulla^@204~ DataRowChangeEventArgs)
            ~dulla^@204~ hanged(e)
            If (Not (Me.Pr~dulla^@204~ gedEvent) Is Nothing) Then
         ~dulla^@204~ vent ProductsRowChanged(Me, New Produ~dulla^@204~ vent(CType(e.Row,ProductsRow), e.Acti~dulla^@204~      End If
        End Sub
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Protected Overrides Sub O~dulla^@204~ ByVal e As System.Data.DataRowChangeE~dulla^@204~           MyBase.OnRowChanging(e)
  ~dulla^@204~ (Not (Me.ProductsRowChangingEvent) Is~dulla^@204~ n
                RaiseEvent Product~dulla^@204~ Me, New ProductsRowChangeEvent(CType(~dulla^@204~ sRow), e.Action))
            End If~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ errides Sub OnRowDeleted(ByVal e As S~dulla^@204~ taRowChangeEventArgs)
            My~dulla^@204~ eted(e)
            If (Not (Me.Prod~dulla^@204~ dEvent) Is Nothing) Then
           ~dulla^@204~ nt ProductsRowDeleted(Me, New Product~dulla^@204~ nt(CType(e.Row,ProductsRow), e.Action~dulla^@204~    End If
        End Sub
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Protected Overrides Sub OnR~dulla^@204~ Val e As System.Data.DataRowChangeEve~dulla^@204~         MyBase.OnRowDeleting(e)
    ~dulla^@204~ ot (Me.ProductsRowDeletingEvent) Is N~dulla^@204~ 
                RaiseEvent ProductsR~dulla^@204~ , New ProductsRowChangeEvent(CType(e.~dulla^@204~ ow), e.Action))
            End If
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ oveProductsRow(ByVal row As ProductsR~dulla^@204~     Me.Rows.Remove(row)
        End ~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Shared~dulla^@204~ TypedTableSchema(ByVal xs As System.X~dulla^@204~ SchemaSet) As System.Xml.Schema.XmlSc~dulla^@204~ pe
            Dim type As System.Xm~dulla^@204~ chemaComplexType = New System.Xml.Sch~dulla^@204~ ComplexType
            Dim sequence~dulla^@204~ l.Schema.XmlSchemaSequence = New Syst~dulla^@204~ .XmlSchemaSequence
            Dim d~dulla^@204~ yControlSystemDataSet3 = New Inventor~dulla^@204~ mDataSet3
            xs.Add(ds.GetS~dulla^@204~ able)
            Dim any1 As System~dulla^@204~ mlSchemaAny = New System.Xml.Schema.X~dulla^@204~             any1.Namespace = "http://~dulla^@204~ 01/XMLSchema"
            any1.MinOc~dulla^@204~ cimal(0)
            any1.MaxOccurs ~dulla^@204~ Value
            any1.ProcessConten~dulla^@204~ ml.Schema.XmlSchemaContentProcessing.~dulla^@204~     sequence.Items.Add(any1)
       ~dulla^@204~  As System.Xml.Schema.XmlSchemaAny = ~dulla^@204~ l.Schema.XmlSchemaAny
            an~dulla^@204~ = "urn:schemas-microsoft-com:xml-diff~dulla^@204~          any2.MinOccurs = New Decimal~dulla^@204~     any2.ProcessContents = System.Xml~dulla^@204~ hemaContentProcessing.Lax
          ~dulla^@204~ ems.Add(any2)
            Dim attrib~dulla^@204~ m.Xml.Schema.XmlSchemaAttribute = New~dulla^@204~ chema.XmlSchemaAttribute
           ~dulla^@204~ ame = "namespace"
            attrib~dulla^@204~ ue = ds.Namespace
            type.A~dulla^@204~ (attribute1)
            Dim attribu~dulla^@204~ .Xml.Schema.XmlSchemaAttribute = New ~dulla^@204~ hema.XmlSchemaAttribute
            ~dulla^@204~ me = "tableTypeName"
            att~dulla^@204~ Value = "ProductsDataTable"
        ~dulla^@204~ ibutes.Add(attribute2)
            t~dulla^@204~ = sequence
            Return type
~dulla^@204~ unction
    End Class
    
    <Sy~dulla^@204~ Compiler.GeneratedCodeAttribute("Syst~dulla^@204~ n.TypedDataSetGenerator", "2.0.0.0"),~dulla^@204~ tem.Serializable(),  _
     System.X~dulla^@204~ ion.XmlSchemaProviderAttribute("GetTy~dulla^@204~ a")>  _
    Partial Public Class Pur~dulla^@204~ e
        Inherits System.Data.DataT~dulla^@204~  Implements System.Collections.IEnume~dulla^@204~   
        Private columnPurchaseInv~dulla^@204~ tem.Data.DataColumn
        
      ~dulla^@204~ umnDateOfPurchase As System.Data.Data~dulla^@204~    
        Private columnTotalAmoun~dulla^@204~ ata.DataColumn
        
        Pri~dulla^@204~ ieghtCharge As System.Data.DataColumn~dulla^@204~        Private columnMiscellaneousCos~dulla^@204~ ata.DataColumn
        
        Pri~dulla^@204~ andTotal As System.Data.DataColumn
 ~dulla^@204~     Private columnSupplierID As Syste~dulla^@204~ lumn
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ ew()
            MyBase.New
       ~dulla^@204~ Name = "Purchase"
            Me.Beg~dulla^@204~        Me.InitClass
            Me.E~dulla^@204~    End Sub
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Sub New(ByVal table As System.Data.D~dulla^@204~           MyBase.New
            Me.~dulla^@204~ able.TableName
            If (table~dulla^@204~ e <> table.DataSet.CaseSensitive) The~dulla^@204~       Me.CaseSensitive = table.CaseSe~dulla^@204~         End If
            If (table~dulla^@204~ ing <> table.DataSet.Locale.ToString)~dulla^@204~           Me.Locale = table.Locale
 ~dulla^@204~ d If
            If (table.Namespace~dulla^@204~ aSet.Namespace) Then
               ~dulla^@204~  = table.Namespace
            End I~dulla^@204~   Me.Prefix = table.Prefix
         ~dulla^@204~ Capacity = table.MinimumCapacity
   ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Prot~dulla^@204~ (ByVal info As System.Runtime.Seriali~dulla^@204~ izationInfo, ByVal context As System.~dulla^@204~ lization.StreamingContext)
         ~dulla^@204~ (info, context)
            Me.InitV~dulla^@204~ End Sub
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ adOnly Property PurchaseInvoiceNoColu~dulla^@204~ m.Data.DataColumn
            Get
 ~dulla^@204~   Return Me.columnPurchaseInvoiceNo
~dulla^@204~ nd Get
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public ReadOnly Property ~dulla^@204~ eColumn() As System.Data.DataColumn
~dulla^@204~ et
                Return Me.columnD~dulla^@204~ 
            End Get
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Rea~dulla^@204~ y TotalAmountColumn() As System.Data.~dulla^@204~            Get
                Retur~dulla^@204~ talAmount
            End Get
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y Property FrieghtChargeColumn() As S~dulla^@204~ taColumn
            Get
          ~dulla^@204~ Me.columnFrieghtCharge
            E~dulla^@204~    End Property
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic ReadOnly Property Miscellaneous~dulla^@204~ As System.Data.DataColumn
          ~dulla^@204~           Return Me.columnMiscellaneo~dulla^@204~        End Get
        End Property~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public ReadOnly P~dulla^@204~ TotalColumn() As System.Data.DataColu~dulla^@204~    Get
                Return Me.col~dulla^@204~ 
            End Get
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Rea~dulla^@204~ y SupplierIDColumn() As System.Data.D~dulla^@204~           Get
                Return~dulla^@204~ plierID
            End Get
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute(),  _
         Sy~dulla^@204~ tModel.Browsable(false)>  _
        ~dulla^@204~ ly Property Count() As Integer
     ~dulla^@204~                Return Me.Rows.Count
            End Get
        End Property~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Default Re~dulla^@204~ ty Item(ByVal index As Integer) As Pu~dulla^@204~           Get
                Return~dulla^@204~ s(index),PurchaseRow)
            En~dulla^@204~   End Property
        
        Pub~dulla^@204~ chaseRowChanging As PurchaseRowChange~dulla^@204~ 
        
        Public Event Purch~dulla^@204~  As PurchaseRowChangeEventHandler
  ~dulla^@204~    Public Event PurchaseRowDeleting A~dulla^@204~ ChangeEventHandler
        
       ~dulla^@204~  PurchaseRowDeleted As PurchaseRowCha~dulla^@204~ er
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ ds Sub AddPurchaseRow(ByVal row As Pu~dulla^@204~            Me.Rows.Add(row)
        ~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Ov~dulla^@204~ ion AddPurchaseRow(ByVal PurchaseInvo~dulla^@204~ ng, ByVal DateOfPurchase As Date, ByV~dulla^@204~ t As Decimal, ByVal FrieghtCharge As ~dulla^@204~ l MiscellaneousCost As Decimal, ByVal~dulla^@204~ s Decimal, ByVal parentSupplierRowByF~dulla^@204~ pplier As SupplierRow) As PurchaseRow~dulla^@204~  Dim rowPurchaseRow As PurchaseRow = ~dulla^@204~ ow,PurchaseRow)
            rowPurch~dulla^@204~ ray = New Object() {PurchaseInvoiceNo~dulla^@204~ ase, TotalAmount, FrieghtCharge, Misc~dulla^@204~ , GrandTotal, parentSupplierRowByFK_P~dulla^@204~ ier(0)}
            Me.Rows.Add(rowP~dulla^@204~             Return rowPurchaseRow
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ tion FindByPurchaseInvoiceNo(ByVal Pu~dulla^@204~ No As String) As PurchaseRow
       ~dulla^@204~ Type(Me.Rows.Find(New Object() {Purch~dulla^@204~ ),PurchaseRow)
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Overridabl~dulla^@204~ tEnumerator() As System.Collections.I~dulla^@204~ plements System.Collections.IEnumerab~dulla^@204~ tor
            Return Me.Rows.GetEn~dulla^@204~      End Function
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Overrides Function Clone() As~dulla^@204~ DataTable
            Dim cln As Pur~dulla^@204~ e = CType(MyBase.Clone,PurchaseDataTa~dulla^@204~      cln.InitVars
            Return~dulla^@204~  End Function
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ tected Overrides Function CreateInsta~dulla^@204~ em.Data.DataTable
            Return~dulla^@204~ DataTable
        End Function
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Friend Sub InitVars()~dulla^@204~ Me.columnPurchaseInvoiceNo = MyBase.C~dulla^@204~ aseInvoiceNo")
            Me.column~dulla^@204~ e = MyBase.Columns("DateOfPurchase")~dulla^@204~ Me.columnTotalAmount = MyBase.Columns~dulla^@204~ ")
            Me.columnFrieghtCharg~dulla^@204~ lumns("FrieghtCharge")
            M~dulla^@204~ llaneousCost = MyBase.Columns("Miscel~dulla^@204~ 
            Me.columnGrandTotal = M~dulla^@204~ ("GrandTotal")
            Me.column~dulla^@204~ MyBase.Columns("SupplierID")
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Private ~dulla^@204~ ()
            Me.columnPurchaseInvo~dulla^@204~ ystem.Data.DataColumn("PurchaseInvoic~dulla^@204~ (String), Nothing, System.Data.Mappin~dulla^@204~ )
            MyBase.Columns.Add(Me.~dulla^@204~ eInvoiceNo)
            Me.columnDat~dulla^@204~  New System.Data.DataColumn("DateOfPu~dulla^@204~ ype(Date), Nothing, System.Data.Mappi~dulla^@204~ t)
            MyBase.Columns.Add(Me~dulla^@204~ Purchase)
            Me.columnTotal~dulla^@204~ System.Data.DataColumn("TotalAmount",~dulla^@204~ mal), Nothing, System.Data.MappingTyp~dulla^@204~            MyBase.Columns.Add(Me.colu~dulla^@204~ )
            Me.columnFrieghtCharge~dulla^@204~ .Data.DataColumn("FrieghtCharge", Get~dulla^@204~ , Nothing, System.Data.MappingType.El~dulla^@204~        MyBase.Columns.Add(Me.columnFr~dulla^@204~ 
            Me.columnMiscellaneousCo~dulla^@204~ em.Data.DataColumn("MiscellaneousCost~dulla^@204~ cimal), Nothing, System.Data.MappingT~dulla^@204~ 
            MyBase.Columns.Add(Me.co~dulla^@204~ eousCost)
            Me.columnGrand~dulla^@204~ ystem.Data.DataColumn("GrandTotal", G~dulla^@204~ l), Nothing, System.Data.MappingType.~dulla^@204~          MyBase.Columns.Add(Me.column~dulla^@204~             Me.columnSupplierID = New~dulla^@204~ DataColumn("SupplierID", GetType(Stri~dulla^@204~  System.Data.MappingType.Element)
  ~dulla^@204~ ase.Columns.Add(Me.columnSupplierID)~dulla^@204~ Me.Constraints.Add(New System.Data.Un~dulla^@204~ t("Constraint1", New System.Data.Data~dulla^@204~ columnPurchaseInvoiceNo}, true))
   ~dulla^@204~ olumnPurchaseInvoiceNo.AllowDBNull = ~dulla^@204~       Me.columnPurchaseInvoiceNo.Uniq~dulla^@204~           Me.columnPurchaseInvoiceNo.~dulla^@204~ 0
            Me.columnDateOfPurchas~dulla^@204~  = false
            Me.columnTotalA~dulla^@204~ Null = false
            Me.columnFr~dulla^@204~ llowDBNull = false
            Me.co~dulla^@204~ eousCost.AllowDBNull = false
       ~dulla^@204~ nGrandTotal.AllowDBNull = false
    ~dulla^@204~ lumnSupplierID.AllowDBNull = false
 ~dulla^@204~ .columnSupplierID.MaxLength = 20
   ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ ewPurchaseRow() As PurchaseRow
     ~dulla^@204~  CType(Me.NewRow,PurchaseRow)
      ~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pr~dulla^@204~ ides Function NewRowFromBuilder(ByVal~dulla^@204~ ystem.Data.DataRowBuilder) As System.~dulla^@204~ 
            Return New PurchaseRow(b~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Protected Overrides Function GetRowTy~dulla^@204~ m.Type
            Return GetType(Pu~dulla^@204~        End Function
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Protected Overrides Sub OnRowChang~dulla^@204~  System.Data.DataRowChangeEventArgs)~dulla^@204~ MyBase.OnRowChanged(e)
            I~dulla^@204~ rchaseRowChangedEvent) Is Nothing) Th~dulla^@204~        RaiseEvent PurchaseRowChanged(~dulla^@204~ aseRowChangeEvent(CType(e.Row,Purchas~dulla^@204~ on))
            End If
        End~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Protected Ov~dulla^@204~ nRowChanging(ByVal e As System.Data.D~dulla^@204~ ventArgs)
            MyBase.OnRowCh~dulla^@204~           If (Not (Me.PurchaseRowChan~dulla^@204~  Nothing) Then
                Raise~dulla^@204~ eRowChanging(Me, New PurchaseRowChang~dulla^@204~ e.Row,PurchaseRow), e.Action))
     ~dulla^@204~ 
        End Sub
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Protected Overrides Sub OnRowDeleted~dulla^@204~ ystem.Data.DataRowChangeEventArgs)
 ~dulla^@204~ Base.OnRowDeleted(e)
            If ~dulla^@204~ haseRowDeletedEvent) Is Nothing) Then~dulla^@204~      RaiseEvent PurchaseRowDeleted(Me~dulla^@204~ eRowChangeEvent(CType(e.Row,PurchaseR~dulla^@204~ ))
            End If
        End S~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Protected Over~dulla^@204~ owDeleting(ByVal e As System.Data.Dat~dulla^@204~ ntArgs)
            MyBase.OnRowDele~dulla^@204~         If (Not (Me.PurchaseRowDeleti~dulla^@204~ othing) Then
                RaiseEv~dulla^@204~ owDeleting(Me, New PurchaseRowChangeE~dulla^@204~ Row,PurchaseRow), e.Action))
       ~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Sub RemovePurchaseRow(ByVal row~dulla^@204~ ow)
            Me.Rows.Remove(row)~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~  Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As Sy~dulla^@204~ ma.XmlSchemaComplexType
            ~dulla^@204~ ystem.Xml.Schema.XmlSchemaComplexType~dulla^@204~ .Xml.Schema.XmlSchemaComplexType
   ~dulla^@204~ sequence As System.Xml.Schema.XmlSche~dulla^@204~ New System.Xml.Schema.XmlSchemaSequen~dulla^@204~    Dim ds As InventoryControlSystemDa~dulla^@204~ InventoryControlSystemDataSet3
     ~dulla^@204~ (ds.GetSchemaSerializable)
         ~dulla^@204~ s System.Xml.Schema.XmlSchemaAny = Ne~dulla^@204~ Schema.XmlSchemaAny
            any1~dulla^@204~ "http://www.w3.org/2001/XMLSchema"
 ~dulla^@204~ y1.MinOccurs = New Decimal(0)
      ~dulla^@204~ xOccurs = Decimal.MaxValue
         ~dulla^@204~ ssContents = System.Xml.Schema.XmlSch~dulla^@204~ cessing.Lax
            sequence.Ite~dulla^@204~ 
            Dim any2 As System.Xml.S~dulla^@204~ maAny = New System.Xml.Schema.XmlSche~dulla^@204~       any2.Namespace = "urn:schemas-m~dulla^@204~ xml-diffgram-v1"
            any2.Mi~dulla^@204~  Decimal(1)
            any2.Process~dulla^@204~ stem.Xml.Schema.XmlSchemaContentProce~dulla^@204~           sequence.Items.Add(any2)
 ~dulla^@204~ m attribute1 As System.Xml.Schema.Xml~dulla^@204~ te = New System.Xml.Schema.XmlSchemaA~dulla^@204~          attribute1.Name = "namespace~dulla^@204~   attribute1.FixedValue = ds.Namespac~dulla^@204~   type.Attributes.Add(attribute1)
  ~dulla^@204~  attribute2 As System.Xml.Schema.XmlS~dulla^@204~ e = New System.Xml.Schema.XmlSchemaAt~dulla^@204~         attribute2.Name = "tableTypeN~dulla^@204~      attribute2.FixedValue = "Purchas~dulla^@204~             type.Attributes.Add(attri~dulla^@204~        type.Particle = sequence
    ~dulla^@204~ n type
        End Function
    End~dulla^@204~ 
    <System.CodeDom.Compiler.Generat~dulla^@204~ te("System.Data.Design.TypedDataSetGe~dulla^@204~ 0.0.0"),  _
     System.Serializable~dulla^@204~ System.Xml.Serialization.XmlSchemaPro~dulla^@204~ e("GetTypedTableSchema")>  _
    Par~dulla^@204~ lass PurchaseInfoDataTable
        I~dulla^@204~ m.Data.DataTable
        Implements ~dulla^@204~ tions.IEnumerable
        
        ~dulla^@204~ nPartNo As System.Data.DataColumn
  ~dulla^@204~    Private columnDescription As Syste~dulla^@204~ lumn
        
        Private colum~dulla^@204~ tem.Data.DataColumn
        
      ~dulla^@204~ umnOrigin As System.Data.DataColumn
~dulla^@204~      Private columnNetWeight As Syste~dulla^@204~ lumn
        
        Private colum~dulla^@204~ System.Data.DataColumn
        
   ~dulla^@204~ columnPrice As System.Data.DataColumn~dulla^@204~        Private columnAmount As System~dulla^@204~ umn
        
        Private column~dulla^@204~  System.Data.DataColumn
        
  ~dulla^@204~  columnInvoiceNo As System.Data.DataC~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Sub ~dulla^@204~       MyBase.New
            Me.Tabl~dulla^@204~ haseInfo"
            Me.BeginInit
~dulla^@204~ e.InitClass
            Me.EndInit
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        F~dulla^@204~ (ByVal table As System.Data.DataTable~dulla^@204~   MyBase.New
            Me.TableNam~dulla^@204~ leName
            If (table.CaseSen~dulla^@204~ le.DataSet.CaseSensitive) Then
     ~dulla^@204~ .CaseSensitive = table.CaseSensitive~dulla^@204~ End If
            If (table.Locale.~dulla^@204~ able.DataSet.Locale.ToString) Then
 ~dulla^@204~   Me.Locale = table.Locale
         ~dulla^@204~           If (table.Namespace <> tabl~dulla^@204~ espace) Then
                Me.Name~dulla^@204~ .Namespace
            End If
     ~dulla^@204~ fix = table.Prefix
            Me.Mi~dulla^@204~  = table.MinimumCapacity
        End~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Protected Su~dulla^@204~ nfo As System.Runtime.Serialization.S~dulla^@204~ nfo, ByVal context As System.Runtime.~dulla^@204~ .StreamingContext)
            MyBas~dulla^@204~ ontext)
            Me.InitVars
   ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ roperty PartNoColumn() As System.Data~dulla^@204~             Get
                Retu~dulla^@204~ artNo
            End Get
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ operty DescriptionColumn() As System.~dulla^@204~ mn
            Get
                ~dulla^@204~ umnDescription
            End Get
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ adOnly Property BrandColumn() As Syst~dulla^@204~ olumn
            Get
             ~dulla^@204~ columnBrand
            End Get
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ nly Property OriginColumn() As System~dulla^@204~ umn
            Get
               ~dulla^@204~ lumnOrigin
            End Get
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ly Property NetWeightColumn() As Syst~dulla^@204~ olumn
            Get
             ~dulla^@204~ columnNetWeight
            End Get~dulla^@204~ Property
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ eadOnly Property QuantityColumn() As ~dulla^@204~ ataColumn
            Get
         ~dulla^@204~  Me.columnQuantity
            End G~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c ReadOnly Property PriceColumn() As ~dulla^@204~ ataColumn
            Get
         ~dulla^@204~  Me.columnPrice
            End Get~dulla^@204~ Property
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ eadOnly Property AmountColumn() As Sy~dulla^@204~ aColumn
            Get
           ~dulla^@204~ e.columnAmount
            End Get
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ adOnly Property SupplierIDColumn() As~dulla^@204~ DataColumn
            Get
        ~dulla^@204~ n Me.columnSupplierID
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic ReadOnly Property InvoiceNoColum~dulla^@204~ .Data.DataColumn
            Get
  ~dulla^@204~  Return Me.columnInvoiceNo
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~     System.ComponentModel.Browsable(f~dulla^@204~       Public ReadOnly Property Count(~dulla^@204~ 
            Get
                Ret~dulla^@204~ ount
            End Get
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ Only Property Item(ByVal index As Int~dulla^@204~ haseInfoRow
            Get
       ~dulla^@204~ rn CType(Me.Rows(index),PurchaseInfoR~dulla^@204~     End Get
        End Property
  ~dulla^@204~    Public Event PurchaseInfoRowChangi~dulla^@204~ eInfoRowChangeEventHandler
        ~dulla^@204~ ic Event PurchaseInfoRowChanged As Pu~dulla^@204~ ChangeEventHandler
        
       ~dulla^@204~  PurchaseInfoRowDeleting As PurchaseI~dulla^@204~ ventHandler
        
        Public~dulla^@204~ seInfoRowDeleted As PurchaseInfoRowCh~dulla^@204~ ler
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ads Sub AddPurchaseInfoRow(ByVal row ~dulla^@204~ foRow)
            Me.Rows.Add(row)~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ads Function AddPurchaseInfoRow(ByVal~dulla^@204~ ring, ByVal Description As String, By~dulla^@204~ String, ByVal Origin As String, ByVal~dulla^@204~  String, ByVal Quantity As Integer, B~dulla^@204~  Decimal, ByVal Amount As Decimal, By~dulla^@204~ plierRowByFK_PurchaseInfo_Supplier As~dulla^@204~  ByVal parentPurchaseRowByFK_PurchaseInfo_Purchase As PurchaseRow) As PurchaseI~dulla^@204~        Dim rowPurchaseInfoRow As Purc~dulla^@204~  CType(Me.NewRow,PurchaseInfoRow)
  ~dulla^@204~ PurchaseInfoRow.ItemArray = New Objec~dulla^@204~ Description, Brand, Origin, NetWeight~dulla^@204~ rice, Amount, parentSupplierRowByFK_P~dulla^@204~ upplier(0), parentPurchaseRowByFK_Pur~dulla^@204~ chase(0)}
            Me.Rows.Add(ro~dulla^@204~ Row)
            Return rowPurchaseI~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Function FindByPartNo(ByVal Par~dulla^@204~ ) As PurchaseInfoRow
            Ret~dulla^@204~ Rows.Find(New Object() {PartNo}),Purc~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Overridable Function GetE~dulla^@204~ s System.Collections.IEnumerator Impl~dulla^@204~ .Collections.IEnumerable.GetEnumerato~dulla^@204~   Return Me.Rows.GetEnumerator
     ~dulla^@204~ on
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ es Function Clone() As System.Data.Da~dulla^@204~         Dim cln As PurchaseInfoDataTa~dulla^@204~ yBase.Clone,PurchaseInfoDataTable)
 ~dulla^@204~ n.InitVars
            Return cln
 ~dulla^@204~ nction
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ Overrides Function CreateInstance() A~dulla^@204~ .DataTable
            Return New Pu~dulla^@204~ aTable
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Friend Sub InitVars()
  ~dulla^@204~ columnPartNo = MyBase.Columns("PartNo~dulla^@204~    Me.columnDescription = MyBase.Colu~dulla^@204~ ion")
            Me.columnBrand = M~dulla^@204~ ("Brand")
            Me.columnOrigi~dulla^@204~ lumns("Origin")
            Me.colum~dulla^@204~ MyBase.Columns("NetWeight")
        ~dulla^@204~ Quantity = MyBase.Columns("Quantity")~dulla^@204~  Me.columnPrice = MyBase.Columns("Pri~dulla^@204~      Me.columnAmount = MyBase.Columns~dulla^@204~            Me.columnSupplierID = MyBa~dulla^@204~ upplierID")
            Me.columnInv~dulla^@204~ se.Columns("InvoiceNo")
        End ~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Private Sub I~dulla^@204~            Me.columnPartNo = New Syst~dulla^@204~ olumn("PartNo", GetType(String), Noth~dulla^@204~ ata.MappingType.Element)
           ~dulla^@204~ ns.Add(Me.columnPartNo)
            ~dulla^@204~ ription = New System.Data.DataColumn(~dulla^@204~ , GetType(String), Nothing, System.Da~dulla^@204~ e.Element)
            MyBase.Column~dulla^@204~ mnDescription)
            Me.column~dulla^@204~ ystem.Data.DataColumn("Brand", GetTyp~dulla^@204~ thing, System.Data.MappingType.Elemen~dulla^@204~    MyBase.Columns.Add(Me.columnBrand)~dulla^@204~  Me.columnOrigin = New System.Data.Da~dulla^@204~ gin", GetType(String), Nothing, Syste~dulla^@204~ gType.Element)
            MyBase.Co~dulla^@204~ columnOrigin)
            Me.columnN~dulla^@204~ w System.Data.DataColumn("NetWeight",~dulla^@204~ ng), Nothing, System.Data.MappingType~dulla^@204~           MyBase.Columns.Add(Me.colum~dulla^@204~             Me.columnQuantity = New S~dulla^@204~ taColumn("Quantity", GetType(Integer)~dulla^@204~ stem.Data.MappingType.Element)
     ~dulla^@204~ .Columns.Add(Me.columnQuantity)
    ~dulla^@204~ lumnPrice = New System.Data.DataColum~dulla^@204~ tType(Decimal), Nothing, System.Data.~dulla^@204~ lement)
            MyBase.Columns.A~dulla^@204~ rice)
            Me.columnAmount = ~dulla^@204~ ta.DataColumn("Amount", GetType(Decim~dulla^@204~  System.Data.MappingType.Element)
  ~dulla^@204~ ase.Columns.Add(Me.columnAmount)
   ~dulla^@204~ olumnSupplierID = New System.Data.Dat~dulla^@204~ lierID", GetType(String), Nothing, Sy~dulla^@204~ pingType.Element)
            MyBase~dulla^@204~ Me.columnSupplierID)
            Me.~dulla^@204~ No = New System.Data.DataColumn("Invo~dulla^@204~ pe(String), Nothing, System.Data.Mapp~dulla^@204~ nt)
            MyBase.Columns.Add(M~dulla^@204~ ceNo)
            Me.Constraints.Add~dulla^@204~ ata.UniqueConstraint("Constraint1", N~dulla^@204~ a.DataColumn() {Me.columnPartNo}, tru~dulla^@204~     Me.columnPartNo.AllowDBNull = fal~dulla^@204~    Me.columnPartNo.Unique = true
   ~dulla^@204~ olumnPartNo.MaxLength = 20
         ~dulla^@204~ escription.AllowDBNull = false
     ~dulla^@204~ umnDescription.MaxLength = 20
      ~dulla^@204~ mnBrand.MaxLength = 10
            M~dulla^@204~ n.MaxLength = 10
            Me.colu~dulla^@204~ axLength = 10
            Me.columnQ~dulla^@204~ DBNull = false
            Me.column~dulla^@204~ BNull = false
            Me.columnS~dulla^@204~ owDBNull = false
            Me.colu~dulla^@204~ MaxLength = 20
            Me.column~dulla^@204~ owDBNull = false
            Me.colu~dulla^@204~ axLength = 20
        End Sub
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Function NewPurc~dulla^@204~  As PurchaseInfoRow
            Retu~dulla^@204~ ewRow,PurchaseInfoRow)
        End F~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Protected~dulla^@204~ nction NewRowFromBuilder(ByVal builde~dulla^@204~ ata.DataRowBuilder) As System.Data.Da~dulla^@204~       Return New PurchaseInfoRow(buil~dulla^@204~  End Function
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ tected Overrides Function GetRowType(~dulla^@204~ ype
            Return GetType(Purch~dulla^@204~         End Function
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Protected Overrides Sub OnRowChan~dulla^@204~ s System.Data.DataRowChangeEventArgs)~dulla^@204~  MyBase.OnRowChanged(e)
            ~dulla^@204~ urchaseInfoRowChangedEvent) Is Nothin~dulla^@204~             RaiseEvent PurchaseInfoRo~dulla^@204~ New PurchaseInfoRowChangeEvent(CType(~dulla^@204~ eInfoRow), e.Action))
            En~dulla^@204~  End Sub
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ d Overrides Sub OnRowChanging(ByVal e~dulla^@204~ ta.DataRowChangeEventArgs)
         ~dulla^@204~ owChanging(e)
            If (Not (M~dulla^@204~ oRowChangingEvent) Is Nothing) Then
~dulla^@204~    RaiseEvent PurchaseInfoRowChanging~dulla^@204~ haseInfoRowChangeEvent(CType(e.Row,Pu~dulla^@204~ ), e.Action))
            End If
  ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pro~dulla^@204~ des Sub OnRowDeleted(ByVal e As Syste~dulla^@204~ wChangeEventArgs)
            MyBase~dulla^@204~ (e)
            If (Not (Me.Purchase~dulla^@204~ dEvent) Is Nothing) Then
           ~dulla^@204~ nt PurchaseInfoRowDeleted(Me, New Pur~dulla^@204~ hangeEvent(CType(e.Row,PurchaseInfoRo~dulla^@204~ )
            End If
        End Su~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Protected Overr~dulla^@204~ wDeleting(ByVal e As System.Data.Data~dulla^@204~ tArgs)
            MyBase.OnRowDelet~dulla^@204~        If (Not (Me.PurchaseInfoRowDel~dulla^@204~ s Nothing) Then
                Rais~dulla^@204~ seInfoRowDeleting(Me, New PurchaseInf~dulla^@204~ nt(CType(e.Row,PurchaseInfoRow), e.Ac~dulla^@204~        End If
        End Sub
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Sub RemovePurcha~dulla^@204~ al row As PurchaseInfoRow)
         ~dulla^@204~ move(row)
        End Sub
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Shared Function GetT~dulla^@204~ ma(ByVal xs As System.Xml.Schema.XmlS~dulla^@204~ System.Xml.Schema.XmlSchemaComplexTyp~dulla^@204~   Dim type As System.Xml.Schema.XmlSc~dulla^@204~ pe = New System.Xml.Schema.XmlSchemaC~dulla^@204~            Dim sequence As System.Xml~dulla^@204~ hemaSequence = New System.Xml.Schema.~dulla^@204~ ence
            Dim ds As Inventory~dulla^@204~ DataSet3 = New InventoryControlSystem~dulla^@204~          xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.S~dulla^@204~ maAny = New System.Xml.Schema.XmlSche~dulla^@204~       any1.Namespace = "http://www.w3~dulla^@204~ Schema"
            any1.MinOccurs =~dulla^@204~ 0)
            any1.MaxOccurs = Deci~dulla^@204~ 
            any1.ProcessContents = S~dulla^@204~ ema.XmlSchemaContentProcessing.Lax
 ~dulla^@204~ quence.Items.Add(any1)
            D~dulla^@204~ stem.Xml.Schema.XmlSchemaAny = New Sy~dulla^@204~ ma.XmlSchemaAny
            any2.Nam~dulla^@204~ :schemas-microsoft-com:xml-diffgram-v~dulla^@204~    any2.MinOccurs = New Decimal(1)
 ~dulla^@204~ y2.ProcessContents = System.Xml.Schem~dulla^@204~ ntentProcessing.Lax
            sequ~dulla^@204~ d(any2)
            Dim attribute1 A~dulla^@204~ Schema.XmlSchemaAttribute = New Syste~dulla^@204~ XmlSchemaAttribute
            attri~dulla^@204~ "namespace"
            attribute1.F~dulla^@204~ s.Namespace
            type.Attribu~dulla^@204~ bute1)
            Dim attribute2 As~dulla^@204~ chema.XmlSchemaAttribute = New System~dulla^@204~ mlSchemaAttribute
            attrib~dulla^@204~ tableTypeName"
            attribute~dulla^@204~ = "PurchaseInfoDataTable"
          ~dulla^@204~ utes.Add(attribute2)
            typ~dulla^@204~ sequence
            Return type
  ~dulla^@204~ ction
    End Class
    
    <Syst~dulla^@204~ mpiler.GeneratedCodeAttribute("System~dulla^@204~ TypedDataSetGenerator", "2.0.0.0"),  ~dulla^@204~ m.Serializable(),  _
     System.Xml~dulla^@204~ n.XmlSchemaProviderAttribute("GetType~dulla^@204~ )>  _
    Partial Public Class Sales~dulla^@204~ 
        Inherits System.Data.DataTa~dulla^@204~ Implements System.Collections.IEnumer~dulla^@204~  
        Private columnPartNo As Sy~dulla^@204~ aColumn
        
        Private co~dulla^@204~ on As System.Data.DataColumn
       ~dulla^@204~ ivate columnQuantity As System.Data.D~dulla^@204~       
        Private columnUnitPri~dulla^@204~ Data.DataColumn
        
        Pr~dulla^@204~ mount As System.Data.DataColumn
    ~dulla^@204~  Private columnDateOfSale As System.D~dulla^@204~ n
        
        Private columnCa~dulla^@204~ eNo As System.Data.DataColumn
      ~dulla^@204~ rivate columnCreditSalesInvoiceNo As ~dulla^@204~ ataColumn
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Sub New()
            MyBase.New
  ~dulla^@204~ TableName = "SalesInfo"
            ~dulla^@204~ 
            Me.InitClass
          ~dulla^@204~ 
        End Sub
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Friend Sub New(ByVal table As System.~dulla^@204~ e)
            MyBase.New
         ~dulla^@204~ me = table.TableName
            If ~dulla^@204~ nsitive <> table.DataSet.CaseSensitiv~dulla^@204~             Me.CaseSensitive = table.~dulla^@204~ 
            End If
            If ~dulla^@204~ .ToString <> table.DataSet.Locale.ToS~dulla^@204~                 Me.Locale = table.Loc~dulla^@204~     End If
            If (table.Nam~dulla^@204~ le.DataSet.Namespace) Then
         ~dulla^@204~ espace = table.Namespace
           ~dulla^@204~         Me.Prefix = table.Prefix
   ~dulla^@204~ inimumCapacity = table.MinimumCapacit~dulla^@204~ d Sub
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ ub New(ByVal info As System.Runtime.S~dulla^@204~ SerializationInfo, ByVal context As S~dulla^@204~ .Serialization.StreamingContext)
   ~dulla^@204~ se.New(info, context)
            Me~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic ReadOnly Property PartNoColumn() ~dulla^@204~ a.DataColumn
            Get
      ~dulla^@204~ urn Me.columnPartNo
            End ~dulla^@204~ End Property
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic ReadOnly Property DescriptionColum~dulla^@204~ .Data.DataColumn
            Get
  ~dulla^@204~  Return Me.columnDescription
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public ReadOnly Property Quantit~dulla^@204~ System.Data.DataColumn
            G~dulla^@204~        Return Me.columnQuantity
    ~dulla^@204~ et
        End Property
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public ReadOnly Property Unit~dulla^@204~  As System.Data.DataColumn
         ~dulla^@204~            Return Me.columnUnitPrice~dulla^@204~ End Get
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public ReadOnly Property~dulla^@204~ () As System.Data.DataColumn
       ~dulla^@204~              Return Me.columnAmount
~dulla^@204~ nd Get
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public ReadOnly Property ~dulla^@204~ umn() As System.Data.DataColumn
    ~dulla^@204~                 Return Me.columnDateO~dulla^@204~       End Get
        End Property
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public ReadOnly Pr~dulla^@204~ lesInvoiceNoColumn() As System.Data.D~dulla^@204~           Get
                Return~dulla^@204~ hSalesInvoiceNo
            End Get~dulla^@204~ Property
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ eadOnly Property CreditSalesInvoiceNo~dulla^@204~ ystem.Data.DataColumn
            Ge~dulla^@204~       Return Me.columnCreditSalesInvo~dulla^@204~       End Get
        End Property
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute(),  _
         System.ComponentM~dulla^@204~ e(false)>  _
        Public ReadOnly~dulla^@204~ nt() As Integer
            Get
   ~dulla^@204~ Return Me.Rows.Count
            End~dulla^@204~  End Property
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Default ReadOnly Property Item(By~dulla^@204~ Integer) As SalesInfoRow
           ~dulla^@204~          Return CType(Me.Rows(index),~dulla^@204~ 
            End Get
        End Pr~dulla^@204~    
        Public Event SalesInfoRo~dulla^@204~ SalesInfoRowChangeEventHandler
     ~dulla^@204~ Public Event SalesInfoRowChanged As S~dulla^@204~ angeEventHandler
        
        P~dulla^@204~ alesInfoRowDeleting As SalesInfoRowCh~dulla^@204~ ler
        
        Public Event S~dulla^@204~ leted As SalesInfoRowChangeEventHandl~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Overloa~dulla^@204~ esInfoRow(ByVal row As SalesInfoRow)~dulla^@204~ Me.Rows.Add(row)
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Overloads Fun~dulla^@204~ sInfoRow(ByVal parentProductsRowByFK_~dulla^@204~ ducts As ProductsRow, ByVal Descripti~dulla^@204~  ByVal Quantity As Integer, ByVal Uni~dulla^@204~ imal, ByVal Amount As Decimal, ByVal ~dulla^@204~  Date, ByVal parentCashSalesRowByFK_S~dulla^@204~ Sales As CashSalesRow, ByVal parentCr~dulla^@204~ yFK_SalesInfo_CreditSales As CreditSa~dulla^@204~ lesInfoRow
            Dim rowSalesI~dulla^@204~ esInfoRow = CType(Me.NewRow,SalesInfo~dulla^@204~      rowSalesInfoRow.ItemArray = New ~dulla^@204~ entProductsRowByFK_SalesInfo_Products~dulla^@204~ ion, Quantity, UnitPrice, Amount, Dat~dulla^@204~ ntCashSalesRowByFK_SalesInfo_CashSale~dulla^@204~ reditSalesRowByFK_SalesInfo_CreditSal~dulla^@204~        Me.Rows.Add(rowSalesInfoRow)
~dulla^@204~ eturn rowSalesInfoRow
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Fun~dulla^@204~ artNo(ByVal PartNo As String) As Sale~dulla^@204~          Return CType(Me.Rows.Find(Ne~dulla^@204~ artNo}),SalesInfoRow)
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Ove~dulla^@204~ tion GetEnumerator() As System.Collec~dulla^@204~ ator Implements System.Collections.IE~dulla^@204~ Enumerator
            Return Me.Row~dulla^@204~ or
        End Function
        
        <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public Overrides Func~dulla^@204~ As System.Data.DataTable
           ~dulla^@204~ alesInfoDataTable = CType(MyBase.Clon~dulla^@204~ taTable)
            cln.InitVars
 ~dulla^@204~ turn cln
        End Function
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Protected Overrides Fun~dulla^@204~ nstance() As System.Data.DataTable
 ~dulla^@204~ turn New SalesInfoDataTable
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Frie~dulla^@204~ rs()
            Me.columnPartNo = M~dulla^@204~ ("PartNo")
            Me.columnDesc~dulla^@204~ ase.Columns("Description")
         ~dulla^@204~ uantity = MyBase.Columns("Quantity")~dulla^@204~ Me.columnUnitPrice = MyBase.Columns("~dulla^@204~             Me.columnAmount = MyBase.~dulla^@204~ nt")
            Me.columnDateOfSale~dulla^@204~ umns("DateOfSale")
            Me.co~dulla^@204~ InvoiceNo = MyBase.Columns("CashSales~dulla^@204~             Me.columnCreditSalesInvoi~dulla^@204~ .Columns("CreditSalesInvoiceNo")
   ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Priv~dulla^@204~ lass()
            Me.columnPartNo =~dulla^@204~ ata.DataColumn("PartNo", GetType(Stri~dulla^@204~  System.Data.MappingType.Element)
  ~dulla^@204~ ase.Columns.Add(Me.columnPartNo)
   ~dulla^@204~ olumnDescription = New System.Data.Da~dulla^@204~ cription", GetType(String), Nothing, ~dulla^@204~ appingType.Element)
            MyBa~dulla^@204~ d(Me.columnDescription)
            ~dulla^@204~ tity = New System.Data.DataColumn("Qu~dulla^@204~ ype(Integer), Nothing, System.Data.Ma~dulla^@204~ ment)
            MyBase.Columns.Add~dulla^@204~ ntity)
            Me.columnUnitPric~dulla^@204~ m.Data.DataColumn("UnitPrice", GetTyp~dulla^@204~ othing, System.Data.MappingType.Eleme~dulla^@204~     MyBase.Columns.Add(Me.columnUnitP~dulla^@204~       Me.columnAmount = New System.Da~dulla^@204~ ("Amount", GetType(Decimal), Nothing,~dulla^@204~ MappingType.Element)
            MyB~dulla^@204~ dd(Me.columnAmount)
            Me.c~dulla^@204~ le = New System.Data.DataColumn("Date~dulla^@204~ ype(Date), Nothing, System.Data.Mappi~dulla^@204~ t)
            MyBase.Columns.Add(Me~dulla^@204~ Sale)
            Me.columnCashSales~dulla^@204~ ew System.Data.DataColumn("CashSalesI~dulla^@204~ tType(String), Nothing, System.Data.M~dulla^@204~ ement)
            MyBase.Columns.Ad~dulla^@204~ shSalesInvoiceNo)
            Me.col~dulla^@204~ sInvoiceNo = New System.Data.DataColu~dulla^@204~ esInvoiceNo", GetType(String), Nothin~dulla^@204~ a.MappingType.Element)
            M~dulla^@204~ .Add(Me.columnCreditSalesInvoiceNo)
~dulla^@204~ e.Constraints.Add(New System.Data.Uni~dulla^@204~ ("Constraint1", New System.Data.DataC~dulla^@204~ olumnPartNo}, true))
            Me.~dulla^@204~ AllowDBNull = false
            Me.c~dulla^@204~ nique = true
            Me.columnPa~dulla^@204~ h = 20
            Me.columnDescript~dulla^@204~ ll = false
            Me.columnDesc~dulla^@204~ ngth = 20
            Me.columnQuant~dulla^@204~ ll = false
            Me.columnUnit~dulla^@204~ Null = false
            Me.columnAm~dulla^@204~ ull = false
            Me.columnDat~dulla^@204~ DBNull = false
            Me.column~dulla^@204~ iceNo.AllowDBNull = false
          ~dulla^@204~ shSalesInvoiceNo.MaxLength = 20
    ~dulla^@204~ lumnCreditSalesInvoiceNo.AllowDBNull ~dulla^@204~         Me.columnCreditSalesInvoiceNo~dulla^@204~ 20
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Function NewSalesInfoRow() ~dulla^@204~ ow
            Return CType(Me.NewRo~dulla^@204~ w)
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Protected Overrides Function ~dulla^@204~ lder(ByVal builder As System.Data.Dat~dulla^@204~ As System.Data.DataRow
            R~dulla^@204~ esInfoRow(builder)
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Protected Ove~dulla^@204~ on GetRowType() As System.Type
     ~dulla^@204~  GetType(SalesInfoRow)
        End F~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Protected~dulla^@204~ b OnRowChanged(ByVal e As System.Data~dulla^@204~ eEventArgs)
            MyBase.OnRow~dulla^@204~            If (Not (Me.SalesInfoRowCh~dulla^@204~ s Nothing) Then
                Rais~dulla^@204~ nfoRowChanged(Me, New SalesInfoRowCha~dulla^@204~ e(e.Row,SalesInfoRow), e.Action))
  ~dulla^@204~  If
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Protected Overrides Sub OnRowChan~dulla^@204~ As System.Data.DataRowChangeEventArgs~dulla^@204~   MyBase.OnRowChanging(e)
          ~dulla^@204~ .SalesInfoRowChangingEvent) Is Nothin~dulla^@204~             RaiseEvent SalesInfoRowCh~dulla^@204~ w SalesInfoRowChangeEvent(CType(e.Row~dulla^@204~ ), e.Action))
            End If
  ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pro~dulla^@204~ des Sub OnRowDeleted(ByVal e As Syste~dulla^@204~ wChangeEventArgs)
            MyBase~dulla^@204~ (e)
            If (Not (Me.SalesInf~dulla^@204~ ent) Is Nothing) Then
              ~dulla^@204~ SalesInfoRowDeleted(Me, New SalesInfo~dulla^@204~ t(CType(e.Row,SalesInfoRow), e.Action~dulla^@204~    End If
        End Sub
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Protected Overrides Sub OnR~dulla^@204~ Val e As System.Data.DataRowChangeEve~dulla^@204~         MyBase.OnRowDeleting(e)
    ~dulla^@204~ ot (Me.SalesInfoRowDeletingEvent) Is ~dulla^@204~ 
                RaiseEvent SalesInf~dulla^@204~ Me, New SalesInfoRowChangeEvent(CType~dulla^@204~ nfoRow), e.Action))
            End ~dulla^@204~ nd Sub
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~  RemoveSalesInfoRow(ByVal row As Sale~dulla^@204~           Me.Rows.Remove(row)
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ on GetTypedTableSchema(ByVal xs As Sy~dulla^@204~ ma.XmlSchemaSet) As System.Xml.Schema~dulla^@204~ plexType
            Dim type As Sys~dulla^@204~ a.XmlSchemaComplexType = New System.X~dulla^@204~ SchemaComplexType
            Dim se~dulla^@204~ tem.Xml.Schema.XmlSchemaSequence = Ne~dulla^@204~ Schema.XmlSchemaSequence
           ~dulla^@204~ ventoryControlSystemDataSet3 = New In~dulla^@204~ lSystemDataSet3
            xs.Add(d~dulla^@204~ rializable)
            Dim any1 As ~dulla^@204~ hema.XmlSchemaAny = New System.Xml.Sc~dulla^@204~ aAny
            any1.Namespace = "h~dulla^@204~ org/2001/XMLSchema"
            any1~dulla^@204~ New Decimal(0)
            any1.MaxO~dulla^@204~ al.MaxValue
            any1.Process~dulla^@204~ stem.Xml.Schema.XmlSchemaContentProce~dulla^@204~           sequence.Items.Add(any1)
 ~dulla^@204~ m any2 As System.Xml.Schema.XmlSchema~dulla^@204~ tem.Xml.Schema.XmlSchemaAny
        ~dulla^@204~ space = "urn:schemas-microsoft-com:xm~dulla^@204~ "
            any2.MinOccurs = New D~dulla^@204~           any2.ProcessContents = Syst~dulla^@204~ .XmlSchemaContentProcessing.Lax
    ~dulla^@204~ nce.Items.Add(any2)
            Dim ~dulla^@204~  System.Xml.Schema.XmlSchemaAttribute~dulla^@204~ .Xml.Schema.XmlSchemaAttribute
     ~dulla^@204~ ute1.Name = "namespace"
            ~dulla^@204~ xedValue = ds.Namespace
            ~dulla^@204~ es.Add(attribute1)
            Dim a~dulla^@204~ System.Xml.Schema.XmlSchemaAttribute ~dulla^@204~ Xml.Schema.XmlSchemaAttribute
      ~dulla^@204~ te2.Name = "tableTypeName"
         ~dulla^@204~ .FixedValue = "SalesInfoDataTable"
 ~dulla^@204~ pe.Attributes.Add(attribute2)
      ~dulla^@204~ rticle = sequence
            Return~dulla^@204~   End Function
    End Class
    
~dulla^@204~ odeDom.Compiler.GeneratedCodeAttribut~dulla^@204~ a.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _~dulla^@204~ .Xml.Serialization.XmlSchemaProviderA~dulla^@204~ TypedTableSchema")>  _
    Partial P~dulla^@204~ tockCardDataTable
        Inherits S~dulla^@204~ taTable
        Implements System.Co~dulla^@204~ umerable
        
        Private c~dulla^@204~ dNo As System.Data.DataColumn
      ~dulla^@204~ rivate columnPartNo As System.Data.Da~dulla^@204~      
        Private columnDescript~dulla^@204~ .Data.DataColumn
        
        P~dulla^@204~ CostPrice As System.Data.DataColumn
~dulla^@204~      Private columnSellingPrice As Sy~dulla^@204~ aColumn
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ b New()
            MyBase.New
    ~dulla^@204~ bleName = "StockCard"
            Me~dulla^@204~            Me.InitClass
            ~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ iend Sub New(ByVal table As System.Da~dulla^@204~ 
            MyBase.New
           ~dulla^@204~  = table.TableName
            If (t~dulla^@204~ itive <> table.DataSet.CaseSensitive)~dulla^@204~           Me.CaseSensitive = table.Ca~dulla^@204~             End If
            If (t~dulla^@204~ oString <> table.DataSet.Locale.ToStr~dulla^@204~               Me.Locale = table.Local~dulla^@204~   End If
            If (table.Names~dulla^@204~ .DataSet.Namespace) Then
           ~dulla^@204~ pace = table.Namespace
            E~dulla^@204~       Me.Prefix = table.Prefix
     ~dulla^@204~ imumCapacity = table.MinimumCapacity~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~  New(ByVal info As System.Runtime.Ser~dulla^@204~ rializationInfo, ByVal context As Sys~dulla^@204~ erialization.StreamingContext)
     ~dulla^@204~ .New(info, context)
            Me.I~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c ReadOnly Property StockCardNoColumn~dulla^@204~ Data.DataColumn
            Get
   ~dulla^@204~ Return Me.columnStockCardNo
        ~dulla^@204~         End Property
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public ReadOnly Property PartNoCo~dulla^@204~ tem.Data.DataColumn
            Get~dulla^@204~     Return Me.columnPartNo
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public ReadOnly Property Descripti~dulla^@204~  System.Data.DataColumn
            ~dulla^@204~         Return Me.columnDescription
~dulla^@204~ nd Get
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public ReadOnly Property ~dulla^@204~ mn() As System.Data.DataColumn
     ~dulla^@204~                Return Me.columnCostPr~dulla^@204~     End Get
        End Property
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public ReadOnly Prop~dulla^@204~ riceColumn() As System.Data.DataColum~dulla^@204~   Get
                Return Me.colu~dulla^@204~ e
            End Get
        End P~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute(),  _
         System.C~dulla^@204~ .Browsable(false)>  _
        Public~dulla^@204~ perty Count() As Integer
           ~dulla^@204~          Return Me.Rows.Count
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Default ReadOnly Propert~dulla^@204~ index As Integer) As StockCardRow
  ~dulla^@204~ 
                Return CType(Me.Row~dulla^@204~ kCardRow)
            End Get
     ~dulla^@204~ ty
        
        Public Event St~dulla^@204~ nging As StockCardRowChangeEventHandl~dulla^@204~ 
        Public Event StockCardRowCha~dulla^@204~ CardRowChangeEventHandler
        
~dulla^@204~ c Event StockCardRowDeleting As Stock~dulla^@204~ EventHandler
        
        Publi~dulla^@204~ CardRowDeleted As StockCardRowChangeE~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ ub AddStockCardRow(ByVal row As Stock~dulla^@204~          Me.Rows.Add(row)
        En~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Over~dulla^@204~ n AddStockCardRow(ByVal StockCardNo A~dulla^@204~ al parentSalesInfoRowByFK_StockCard_S~dulla^@204~ alesInfoRow, ByVal Description As Str~dulla^@204~ stPrice As Decimal, ByVal SellingPric~dulla^@204~  As StockCardRow
            Dim row~dulla^@204~ As StockCardRow = CType(Me.NewRow,Sto~dulla^@204~            rowStockCardRow.ItemArray ~dulla^@204~ ) {StockCardNo, parentSalesInfoRowByF~dulla^@204~ alesInfo(0), Description, CostPrice, ~dulla^@204~ 
            Me.Rows.Add(rowStockCar~dulla^@204~       Return rowStockCardRow
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ FindByStockCardNo(ByVal StockCardNo A~dulla^@204~ StockCardRow
            Return CTyp~dulla^@204~ d(New Object() {StockCardNo}),StockCa~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Overridable Function GetEnumera~dulla^@204~ em.Collections.IEnumerator Implements~dulla^@204~ ctions.IEnumerable.GetEnumerator
   ~dulla^@204~ rn Me.Rows.GetEnumerator
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ ction Clone() As System.Data.DataTabl~dulla^@204~   Dim cln As StockCardDataTable = CTy~dulla^@204~ ne,StockCardDataTable)
            c~dulla^@204~             Return cln
        End F~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Protected~dulla^@204~ nction CreateInstance() As System.Dat~dulla^@204~             Return New StockCardDataT~dulla^@204~  End Function
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ end Sub InitVars()
            Me.co~dulla^@204~ No = MyBase.Columns("StockCardNo")
 ~dulla^@204~ .columnPartNo = MyBase.Columns("PartN~dulla^@204~     Me.columnDescription = MyBase.Col~dulla^@204~ tion")
            Me.columnCostPric~dulla^@204~ lumns("CostPrice")
            Me.co~dulla^@204~ ice = MyBase.Columns("SellingPrice")~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ nitClass()
            Me.columnStoc~dulla^@204~  System.Data.DataColumn("StockCardNo"~dulla^@204~ ing), Nothing, System.Data.MappingTyp~dulla^@204~            MyBase.Columns.Add(Me.colu~dulla^@204~ )
            Me.columnPartNo = New ~dulla^@204~ ataColumn("PartNo", GetType(String), ~dulla^@204~ em.Data.MappingType.Element)
       ~dulla^@204~ olumns.Add(Me.columnPartNo)
        ~dulla^@204~ Description = New System.Data.DataCol~dulla^@204~ ion", GetType(String), Nothing, Syste~dulla^@204~ gType.Element)
            MyBase.Co~dulla^@204~ columnDescription)
            Me.co~dulla^@204~  = New System.Data.DataColumn("CostPr~dulla^@204~ (Decimal), Nothing, System.Data.Mappi~dulla^@204~ t)
            MyBase.Columns.Add(Me~dulla^@204~ ice)
            Me.columnSellingPri~dulla^@204~ em.Data.DataColumn("SellingPrice", Ge~dulla^@204~ ), Nothing, System.Data.MappingType.E~dulla^@204~         MyBase.Columns.Add(Me.columnS~dulla^@204~ 
            Me.Constraints.Add(New S~dulla^@204~ iqueConstraint("Constraint1", New Sys~dulla^@204~ Column() {Me.columnStockCardNo}, true~dulla^@204~    Me.columnStockCardNo.AllowDBNull =~dulla^@204~        Me.columnStockCardNo.Unique = ~dulla^@204~      Me.columnStockCardNo.MaxLength =~dulla^@204~     Me.columnPartNo.AllowDBNull = fal~dulla^@204~    Me.columnPartNo.MaxLength = 20
  ~dulla^@204~ columnDescription.AllowDBNull = false~dulla^@204~  Me.columnDescription.MaxLength = 20~dulla^@204~ Me.columnCostPrice.AllowDBNull = fals~dulla^@204~   Me.columnSellingPrice.AllowDBNull =~dulla^@204~    End Sub
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
        Public Function NewStockCardRow() A~dulla^@204~ w
            Return CType(Me.NewRow~dulla^@204~ )
        End Function
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Protected Overrides Function N~dulla^@204~ der(ByVal builder As System.Data.Data~dulla^@204~ s System.Data.DataRow
            Re~dulla^@204~ kCardRow(builder)
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Protected Over~dulla^@204~ n GetRowType() As System.Type
      ~dulla^@204~ GetType(StockCardRow)
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Protected ~dulla^@204~  OnRowChanged(ByVal e As System.Data.~dulla^@204~ EventArgs)
            MyBase.OnRowC~dulla^@204~           If (Not (Me.StockCardRowCha~dulla^@204~  Nothing) Then
                Raise~dulla^@204~ rdRowChanged(Me, New StockCardRowChan~dulla^@204~ (e.Row,StockCardRow), e.Action))
   ~dulla^@204~ If
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Protected Overrides Sub OnRowChang~dulla^@204~ s System.Data.DataRowChangeEventArgs)~dulla^@204~  MyBase.OnRowChanging(e)
           ~dulla^@204~ StockCardRowChangingEvent) Is Nothing~dulla^@204~            RaiseEvent StockCardRowCha~dulla^@204~  StockCardRowChangeEvent(CType(e.Row,~dulla^@204~ , e.Action))
            End If
   ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Prot~dulla^@204~ es Sub OnRowDeleted(ByVal e As System~dulla^@204~ ChangeEventArgs)
            MyBase.~dulla^@204~ e)
            If (Not (Me.StockCard~dulla^@204~ nt) Is Nothing) Then
               ~dulla^@204~ tockCardRowDeleted(Me, New StockCardR~dulla^@204~ (CType(e.Row,StockCardRow), e.Action)~dulla^@204~   End If
        End Sub
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Protected Overrides Sub OnRo~dulla^@204~ al e As System.Data.DataRowChangeEven~dulla^@204~        MyBase.OnRowDeleting(e)
     ~dulla^@204~ t (Me.StockCardRowDeletingEvent) Is N~dulla^@204~ 
                RaiseEvent StockCard~dulla^@204~ e, New StockCardRowChangeEvent(CType(~dulla^@204~ rdRow), e.Action))
            End I~dulla^@204~ d Sub
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ RemoveStockCardRow(ByVal row As Stock~dulla^@204~          Me.Rows.Remove(row)
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public S~dulla^@204~ n GetTypedTableSchema(ByVal xs As Sys~dulla^@204~ a.XmlSchemaSet) As System.Xml.Schema.~dulla^@204~ lexType
            Dim type As Syst~dulla^@204~ .XmlSchemaComplexType = New System.Xm~dulla^@204~ chemaComplexType
            Dim seq~dulla^@204~ em.Xml.Schema.XmlSchemaSequence = New~dulla^@204~ chema.XmlSchemaSequence
            ~dulla^@204~ entoryControlSystemDataSet3 = New Inv~dulla^@204~ SystemDataSet3
            xs.Add(ds~dulla^@204~ ializable)
            Dim any1 As S~dulla^@204~ ema.XmlSchemaAny = New System.Xml.Sch~dulla^@204~ Any
            any1.Namespace = "ht~dulla^@204~ rg/2001/XMLSchema"
            any1.~dulla^@204~ ew Decimal(0)
            any1.MaxOc~dulla^@204~ l.MaxValue
            any1.ProcessC~dulla^@204~ tem.Xml.Schema.XmlSchemaContentProces~dulla^@204~          sequence.Items.Add(any1)
  ~dulla^@204~  any2 As System.Xml.Schema.XmlSchemaA~dulla^@204~ em.Xml.Schema.XmlSchemaAny
         ~dulla^@204~ pace = "urn:schemas-microsoft-com:xml~dulla^@204~ 
            any2.MinOccurs = New De~dulla^@204~          any2.ProcessContents = Syste~dulla^@204~ XmlSchemaContentProcessing.Lax
     ~dulla^@204~ ce.Items.Add(any2)
            Dim a~dulla^@204~ System.Xml.Schema.XmlSchemaAttribute ~dulla^@204~ Xml.Schema.XmlSchemaAttribute
      ~dulla^@204~ te1.Name = "namespace"
            a~dulla^@204~ edValue = ds.Namespace
            t~dulla^@204~ s.Add(attribute1)
            Dim at~dulla^@204~ ystem.Xml.Schema.XmlSchemaAttribute =~dulla^@204~ ml.Schema.XmlSchemaAttribute
       ~dulla^@204~ e2.Name = "tableTypeName"
          ~dulla^@204~ FixedValue = "StockCardDataTable"
  ~dulla^@204~ e.Attributes.Add(attribute2)
       ~dulla^@204~ ticle = sequence
            Return ~dulla^@204~  End Function
    End Class
    
 ~dulla^@204~ deDom.Compiler.GeneratedCodeAttribute~dulla^@204~ .Design.TypedDataSetGenerator", "2.0.~dulla^@204~    System.Serializable(),  _
     Sy~dulla^@204~ alization.XmlSchemaProviderAttribute(~dulla^@204~ eSchema")>  _
    Partial Public Cla~dulla^@204~ etailDataTable
        Inherits Syst~dulla^@204~ able
        Implements System.Colle~dulla^@204~ rable
        
        Private colu~dulla^@204~ eNo As System.Data.DataColumn
      ~dulla^@204~ rivate columnDateOfSale As System.Dat~dulla^@204~ 
        
        Private columnDate~dulla^@204~ ystem.Data.DataColumn
        
    ~dulla^@204~ olumnQtyRecieved As System.Data.DataC~dulla^@204~   
        Private columnQtyIssued A~dulla^@204~ .DataColumn
        
        Privat~dulla^@204~ lance As System.Data.DataColumn
    ~dulla^@204~  Private columnStockCardNo As System.~dulla^@204~ mn
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ ()
            MyBase.New
         ~dulla^@204~ me = "StockCardDetail"
            M~dulla^@204~             Me.InitClass
           ~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ riend Sub New(ByVal table As System.D~dulla^@204~ )
            MyBase.New
          ~dulla^@204~ e = table.TableName
            If (~dulla^@204~ sitive <> table.DataSet.CaseSensitive~dulla^@204~            Me.CaseSensitive = table.C~dulla^@204~ 
            End If
            If (~dulla^@204~ ToString <> table.DataSet.Locale.ToSt~dulla^@204~                Me.Locale = table.Loca~dulla^@204~    End If
            If (table.Name~dulla^@204~ e.DataSet.Namespace) Then
          ~dulla^@204~ space = table.Namespace
            ~dulla^@204~        Me.Prefix = table.Prefix
    ~dulla^@204~ nimumCapacity = table.MinimumCapacity~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ b New(ByVal info As System.Runtime.Se~dulla^@204~ erializationInfo, ByVal context As Sy~dulla^@204~ Serialization.StreamingContext)
    ~dulla^@204~ e.New(info, context)
            Me.~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic ReadOnly Property SalesInvoiceNoCo~dulla^@204~ tem.Data.DataColumn
            Get~dulla^@204~     Return Me.columnSalesInvoiceNo
 ~dulla^@204~ d Get
        End Property
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public ReadOnly Property D~dulla^@204~ mn() As System.Data.DataColumn
     ~dulla^@204~                Return Me.columnDateOf~dulla^@204~      End Get
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public ReadOnly Pro~dulla^@204~ ievedColumn() As System.Data.DataColu~dulla^@204~    Get
                Return Me.col~dulla^@204~ ed
            End Get
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public R~dulla^@204~ rty QtyRecievedColumn() As System.Dat~dulla^@204~ 
            Get
                Ret~dulla^@204~ QtyRecieved
            End Get
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ nly Property QtyIssuedColumn() As Sys~dulla^@204~ Column
            Get
            ~dulla^@204~ .columnQtyIssued
            End Get~dulla^@204~  Property
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ ReadOnly Property QtyBalanceColumn() ~dulla^@204~ a.DataColumn
            Get
      ~dulla^@204~ urn Me.columnQtyBalance
            ~dulla^@204~     End Property
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stoc~dulla^@204~ () As System.Data.DataColumn
       ~dulla^@204~              Return Me.columnStockCar~dulla^@204~     End Get
        End Property
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e(),  _
         System.ComponentMod~dulla^@204~ false)>  _
        Public ReadOnly P~dulla^@204~ () As Integer
            Get
     ~dulla^@204~ turn Me.Rows.Count
            End G~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Default ReadOnly Property Item(ByVa~dulla^@204~ teger) As StockCardDetailRow
       ~dulla^@204~              Return CType(Me.Rows(ind~dulla^@204~ DetailRow)
            End Get
    ~dulla^@204~ rty
        
        Public Event S~dulla^@204~ lRowChanging As StockCardDetailRowCha~dulla^@204~ er
        
        Public Event St~dulla^@204~ RowChanged As StockCardDetailRowChang~dulla^@204~ 
        
        Public Event Stoc~dulla^@204~ wDeleting As StockCardDetailRowChange~dulla^@204~ 
        
        Public Event Stock~dulla^@204~ Deleted As StockCardDetailRowChangeEv~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ b AddStockCardDetailRow(ByVal row As ~dulla^@204~ ilRow)
            Me.Rows.Add(row)~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ads Function AddStockCardDetailRow(By~dulla^@204~ iceNo As String, ByVal DateOfSale As ~dulla^@204~ ateRecieved As Date, ByVal QtyRecieve~dulla^@204~  ByVal QtyIssued As Integer, ByVal Qt~dulla^@204~ nteger, ByVal parentStockCardRowByFK_~dulla^@204~ il_StockCard As StockCardRow) As Stoc~dulla^@204~ w
            Dim rowStockCardDetail~dulla^@204~ ardDetailRow = CType(Me.NewRow,StockC~dulla^@204~ 
            rowStockCardDetailRow.I~dulla^@204~ w Object() {SalesInvoiceNo, DateOfSal~dulla^@204~ ed, QtyRecieved, QtyIssued, QtyBalanc~dulla^@204~ kCardRowByFK_StockCardDetail_StockCar~dulla^@204~       Me.Rows.Add(rowStockCardDetailR~dulla^@204~     Return rowStockCardDetailRow
   ~dulla^@204~ tion
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ ion FindBySalesInvoiceNoDateOfSale(By~dulla^@204~ iceNo As String, ByVal DateOfSale As ~dulla^@204~ kCardDetailRow
            Return CT~dulla^@204~ ind(New Object() {SalesInvoiceNo, Dat~dulla^@204~ ckCardDetailRow)
        End Functio~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Overrida~dulla^@204~ GetEnumerator() As System.Collections~dulla^@204~ Implements System.Collections.IEnumer~dulla^@204~ rator
            Return Me.Rows.Get~dulla^@204~        End Function
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Overrides Function Clone() ~dulla^@204~ a.DataTable
            Dim cln As S~dulla^@204~ lDataTable = CType(MyBase.Clone,Stock~dulla^@204~ aTable)
            cln.InitVars
  ~dulla^@204~ urn cln
        End Function
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Protected Overrides Func~dulla^@204~ stance() As System.Data.DataTable
  ~dulla^@204~ urn New StockCardDetailDataTable
   ~dulla^@204~ tion
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ nitVars()
            Me.columnSales~dulla^@204~ yBase.Columns("SalesInvoiceNo")
    ~dulla^@204~ lumnDateOfSale = MyBase.Columns("Date~dulla^@204~          Me.columnDateRecieved = MyBa~dulla^@204~ ateRecieved")
            Me.columnQ~dulla^@204~ MyBase.Columns("QtyRecieved")
      ~dulla^@204~ mnQtyIssued = MyBase.Columns("QtyIssu~dulla^@204~      Me.columnQtyBalance = MyBase.Col~dulla^@204~ nce")
            Me.columnStockCard~dulla^@204~ olumns("StockCardNo")
        End Su~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Private Sub Ini~dulla^@204~          Me.columnSalesInvoiceNo = Ne~dulla^@204~ .DataColumn("SalesInvoiceNo", GetType~dulla^@204~ hing, System.Data.MappingType.Element~dulla^@204~   MyBase.Columns.Add(Me.columnSalesIn~dulla^@204~          Me.columnDateOfSale = New Sy~dulla^@204~ aColumn("DateOfSale", GetType(Date), ~dulla^@204~ em.Data.MappingType.Element)
       ~dulla^@204~ olumns.Add(Me.columnDateOfSale)
    ~dulla^@204~ lumnDateRecieved = New System.Data.Da~dulla^@204~ eRecieved", GetType(Date), Nothing, S~dulla^@204~ ppingType.Element)
            MyBas~dulla^@204~ (Me.columnDateRecieved)
            ~dulla^@204~ ecieved = New System.Data.DataColumn(~dulla^@204~ , GetType(Integer), Nothing, System.D~dulla^@204~ pe.Element)
            MyBase.Colum~dulla^@204~ umnQtyRecieved)
            Me.colum~dulla^@204~ New System.Data.DataColumn("QtyIssued~dulla^@204~ teger), Nothing, System.Data.MappingT~dulla^@204~ 
            MyBase.Columns.Add(Me.co~dulla^@204~ )
            Me.columnQtyBalance = ~dulla^@204~ ta.DataColumn("QtyBalance", GetType(I~dulla^@204~ ing, System.Data.MappingType.Element)~dulla^@204~  MyBase.Columns.Add(Me.columnQtyBalan~dulla^@204~     Me.columnStockCardNo = New System~dulla^@204~ umn("StockCardNo", GetType(String), N~dulla^@204~ m.Data.MappingType.Element)
        ~dulla^@204~ lumns.Add(Me.columnStockCardNo)
    ~dulla^@204~ nstraints.Add(New System.Data.UniqueC~dulla^@204~ nstraint1", New System.Data.DataColum~dulla^@204~ nSalesInvoiceNo, Me.columnDateOfSale}~dulla^@204~          Me.columnSalesInvoiceNo.Allo~dulla^@204~ se
            Me.columnSalesInvoice~dulla^@204~ = 20
            Me.columnDateOfSale~dulla^@204~ = false
            Me.columnStockCa~dulla^@204~ ull = false
            Me.columnSto~dulla^@204~ ength = 20
        End Sub
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Function NewStockCa~dulla^@204~  As StockCardDetailRow
            R~dulla^@204~ e.NewRow,StockCardDetailRow)
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pro~dulla^@204~ des Function NewRowFromBuilder(ByVal ~dulla^@204~ stem.Data.DataRowBuilder) As System.D~dulla^@204~             Return New StockCardDetai~dulla^@204~ 
        End Function
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Protected Overrides Function Ge~dulla^@204~  System.Type
            Return GetT~dulla^@204~ DetailRow)
        End Function
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Protected Overrides S~dulla^@204~ ed(ByVal e As System.Data.DataRowChan~dulla^@204~ 
            MyBase.OnRowChanged(e)
~dulla^@204~ f (Not (Me.StockCardDetailRowChangedE~dulla^@204~ ing) Then
                RaiseEvent~dulla^@204~ ailRowChanged(Me, New StockCardDetail~dulla^@204~ t(CType(e.Row,StockCardDetailRow), e.~dulla^@204~          End If
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Protected Overrides S~dulla^@204~ ing(ByVal e As System.Data.DataRowCha~dulla^@204~ 
            MyBase.OnRowChanging(e)~dulla^@204~  If (Not (Me.StockCardDetailRowChangi~dulla^@204~ othing) Then
                RaiseEv~dulla^@204~ DetailRowChanging(Me, New StockCardDe~dulla^@204~ Event(CType(e.Row,StockCardDetailRow)~dulla^@204~ 
            End If
        End Sub~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Protected Overrid~dulla^@204~ eleted(ByVal e As System.Data.DataRow~dulla^@204~ gs)
            MyBase.OnRowDeleted(~dulla^@204~    If (Not (Me.StockCardDetailRowDele~dulla^@204~ Nothing) Then
                RaiseE~dulla^@204~ dDetailRowDeleted(Me, New StockCardDe~dulla^@204~ Event(CType(e.Row,StockCardDetailRow)~dulla^@204~ 
            End If
        End Sub~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Protected Overrid~dulla^@204~ eleting(ByVal e As System.Data.DataRo~dulla^@204~ rgs)
            MyBase.OnRowDeletin~dulla^@204~      If (Not (Me.StockCardDetailRowDe~dulla^@204~ Is Nothing) Then
                Rai~dulla^@204~ CardDetailRowDeleting(Me, New StockCardDetailRowChangeEvent(CType(e.Row,StockCa~dulla^@204~  e.Action))
            End If
    ~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ tockCardDetailRow(ByVal row As StockC~dulla^@204~ 
            Me.Rows.Remove(row)
  ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ nction GetTypedTableSchema(ByVal xs A~dulla^@204~ Schema.XmlSchemaSet) As System.Xml.Sc~dulla^@204~ aComplexType
            Dim type As~dulla^@204~ chema.XmlSchemaComplexType = New Syst~dulla^@204~ .XmlSchemaComplexType
            Di~dulla^@204~  System.Xml.Schema.XmlSchemaSequence ~dulla^@204~ Xml.Schema.XmlSchemaSequence
       ~dulla^@204~ s InventoryControlSystemDataSet3 = Ne~dulla^@204~ ntrolSystemDataSet3
            xs.A~dulla^@204~ maSerializable)
            Dim any1~dulla^@204~ l.Schema.XmlSchemaAny = New System.Xm~dulla^@204~ chemaAny
            any1.Namespace ~dulla^@204~ .w3.org/2001/XMLSchema"
            ~dulla^@204~ s = New Decimal(0)
            any1.~dulla^@204~ ecimal.MaxValue
            any1.Pro~dulla^@204~ = System.Xml.Schema.XmlSchemaContentP~dulla^@204~ 
            sequence.Items.Add(any1~dulla^@204~   Dim any2 As System.Xml.Schema.XmlSc~dulla^@204~  System.Xml.Schema.XmlSchemaAny
    ~dulla^@204~ Namespace = "urn:schemas-microsoft-co~dulla^@204~ m-v1"
            any2.MinOccurs = N~dulla^@204~ 
            any2.ProcessContents = ~dulla^@204~ hema.XmlSchemaContentProcessing.Lax
~dulla^@204~ equence.Items.Add(any2)
            ~dulla^@204~ 1 As System.Xml.Schema.XmlSchemaAttri~dulla^@204~ stem.Xml.Schema.XmlSchemaAttribute
 ~dulla^@204~ tribute1.Name = "namespace"
        ~dulla^@204~ 1.FixedValue = ds.Namespace
        ~dulla^@204~ ibutes.Add(attribute1)
            D~dulla^@204~  As System.Xml.Schema.XmlSchemaAttrib~dulla^@204~ tem.Xml.Schema.XmlSchemaAttribute
  ~dulla^@204~ ribute2.Name = "tableTypeName"
     ~dulla^@204~ ute2.FixedValue = "StockCardDetailDat~dulla^@204~         type.Attributes.Add(attribute~dulla^@204~    type.Particle = sequence
        ~dulla^@204~ pe
        End Function
    End Cla~dulla^@204~  <System.CodeDom.Compiler.GeneratedCo~dulla^@204~ System.Data.Design.TypedDataSetGenera~dulla^@204~ 0"),  _
     System.Serializable(), ~dulla^@204~ em.Xml.Serialization.XmlSchemaProvide~dulla^@204~ etTypedTableSchema")>  _
    Partial~dulla^@204~  SupplierDataTable
        Inherits ~dulla^@204~ ataTable
        Implements System.C~dulla^@204~ numerable
        
        Private ~dulla^@204~ rID As System.Data.DataColumn
      ~dulla^@204~ rivate columnSupplierName As System.D~dulla^@204~ n
        
        Private columnAd~dulla^@204~ em.Data.DataColumn
        
       ~dulla^@204~ mnCity As System.Data.DataColumn
   ~dulla^@204~   Private columnCountry As System.Dat~dulla^@204~ 
        
        Private columnPhon~dulla^@204~ ata.DataColumn
        
        Pri~dulla^@204~ x As System.Data.DataColumn
        ~dulla^@204~ vate columnPostalAddress As System.Da~dulla^@204~ 
        
        Private columnWeb~dulla^@204~ m.Data.DataColumn
        
        ~dulla^@204~ nEmail As System.Data.DataColumn
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public Sub New()
   ~dulla^@204~ se.New
            Me.TableName = "S~dulla^@204~          Me.BeginInit
            Me~dulla^@204~            Me.EndInit
        End Su~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Friend Sub New(~dulla^@204~ s System.Data.DataTable)
           ~dulla^@204~             Me.TableName = table.Tabl~dulla^@204~       If (table.CaseSensitive <> tabl~dulla^@204~ eSensitive) Then
                Me.~dulla^@204~  = table.CaseSensitive
            E~dulla^@204~       If (table.Locale.ToString <> ta~dulla^@204~ ocale.ToString) Then
               ~dulla^@204~ table.Locale
            End If
   ~dulla^@204~ table.Namespace <> table.DataSet.Name~dulla^@204~                 Me.Namespace = table.~dulla^@204~           End If
            Me.Pref~dulla^@204~ efix
            Me.MinimumCapacity ~dulla^@204~ umCapacity
        End Sub
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Protected Sub New(ByVal in~dulla^@204~ Runtime.Serialization.SerializationIn~dulla^@204~ text As System.Runtime.Serialization.~dulla^@204~ ext)
            MyBase.New(info, co~dulla^@204~        Me.InitVars
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public ReadOnly Pr~dulla^@204~ erIDColumn() As System.Data.DataColum~dulla^@204~   Get
                Return Me.colu~dulla^@204~ 
            End Get
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Read~dulla^@204~  SupplierNameColumn() As System.Data.~dulla^@204~            Get
                Retur~dulla^@204~ pplierName
            End Get
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ly Property AddressColumn() As System~dulla^@204~ umn
            Get
               ~dulla^@204~ lumnAddress
            End Get
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ nly Property CityColumn() As System.D~dulla^@204~ n
            Get
                R~dulla^@204~ mnCity
            End Get
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ roperty CountryColumn() As System.Dat~dulla^@204~ 
            Get
                Ret~dulla^@204~ Country
            End Get
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ Property PhoneColumn() As System.Data~dulla^@204~             Get
                Retu~dulla^@204~ hone
            End Get
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ perty FaxColumn() As System.Data.Data~dulla^@204~        Get
                Return Me~dulla^@204~            End Get
        End Prope~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public ReadOn~dulla^@204~ ostalAddressColumn() As System.Data.D~dulla^@204~           Get
                Return~dulla^@204~ talAddress
            End Get
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ly Property WebsiteColumn() As System~dulla^@204~ umn
            Get
               ~dulla^@204~ lumnWebsite
            End Get
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ nly Property EmailColumn() As System.~dulla^@204~ mn
            Get
                ~dulla^@204~ umnEmail
            End Get
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute(),  _
         S~dulla^@204~ ntModel.Browsable(false)>  _
       ~dulla^@204~ nly Property Count() As Integer
    ~dulla^@204~                 Return Me.Rows.Count~dulla^@204~ End Get
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Default ReadOnly ~dulla^@204~ (ByVal index As Integer) As SupplierR~dulla^@204~    Get
                Return CType(~dulla^@204~ ),SupplierRow)
            End Get
~dulla^@204~ roperty
        
        Public Eve~dulla^@204~ wChanging As SupplierRowChangeEventHa~dulla^@204~   
        Public Event SupplierRowC~dulla^@204~ plierRowChangeEventHandler
        ~dulla^@204~ ic Event SupplierRowDeleting As Suppl~dulla^@204~ ventHandler
        
        Public~dulla^@204~ erRowDeleted As SupplierRowChangeEven~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public O~dulla^@204~ AddSupplierRow(ByVal row As SupplierR~dulla^@204~     Me.Rows.Add(row)
        End Sub~dulla^@204~        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public O~dulla^@204~ tion AddSupplierRow(ByVal SupplierID ~dulla^@204~ Val SupplierName As String, ByVal Add~dulla^@204~ g, ByVal City As String, ByVal Countr~dulla^@204~ ByVal Phone As String, ByVal Fax As S~dulla^@204~ PostalAddress As String, ByVal Websit~dulla^@204~ ByVal Email As String) As SupplierRow~dulla^@204~  Dim rowSupplierRow As SupplierRow = ~dulla^@204~ ow,SupplierRow)
            rowSuppl~dulla^@204~ ray = New Object() {SupplierID, Suppl~dulla^@204~ ess, City, Country, Phone, Fax, Posta~dulla^@204~ site, Email}
            Me.Rows.Add~dulla^@204~ ow)
            Return rowSupplierRo~dulla^@204~ d Function
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Function FindBySupplierID(ByVal Supp~dulla^@204~ ing) As SupplierRow
            Retu~dulla^@204~ ows.Find(New Object() {SupplierID}),S~dulla^@204~         End Function
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Overridable Function GetEn~dulla^@204~  System.Collections.IEnumerator Imple~dulla^@204~ Collections.IEnumerable.GetEnumerator~dulla^@204~  Return Me.Rows.GetEnumerator
      ~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~ s Function Clone() As System.Data.Dat~dulla^@204~        Dim cln As SupplierDataTable =~dulla^@204~ .Clone,SupplierDataTable)
          ~dulla^@204~ s
            Return cln
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Protec~dulla^@204~  Function CreateInstance() As System.~dulla^@204~ e
            Return New SupplierDat~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ riend Sub InitVars()
            Me.~dulla^@204~ rID = MyBase.Columns("SupplierID")
 ~dulla^@204~ .columnSupplierName = MyBase.Columns(~dulla^@204~ ")
            Me.columnAddress = My~dulla^@204~ "Address")
            Me.columnCity~dulla^@204~ umns("City")
            Me.columnCo~dulla^@204~ e.Columns("Country")
            Me.~dulla^@204~  MyBase.Columns("Phone")
           ~dulla^@204~  = MyBase.Columns("Fax")
           ~dulla^@204~ talAddress = MyBase.Columns("PostalAd~dulla^@204~         Me.columnWebsite = MyBase.Col~dulla^@204~ ")
            Me.columnEmail = MyBa~dulla^@204~ mail")
        End Sub
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Private Sub InitClass()
     ~dulla^@204~ umnSupplierID = New System.Data.DataC~dulla^@204~ erID", GetType(String), Nothing, Syst~dulla^@204~ ngType.Element)
            MyBase.C~dulla^@204~ .columnSupplierID)
            Me.co~dulla^@204~ ame = New System.Data.DataColumn("Sup~dulla^@204~ etType(String), Nothing, System.Data.~dulla^@204~ lement)
            MyBase.Columns.A~dulla^@204~ upplierName)
            Me.columnAd~dulla^@204~ ystem.Data.DataColumn("Address", GetT~dulla^@204~ Nothing, System.Data.MappingType.Elem~dulla^@204~      MyBase.Columns.Add(Me.columnAddr~dulla^@204~      Me.columnCity = New System.Data.~dulla^@204~ ity", GetType(String), Nothing, Syste~dulla^@204~ gType.Element)
            MyBase.Co~dulla^@204~ columnCity)
            Me.columnCou~dulla^@204~ stem.Data.DataColumn("Country", GetTy~dulla^@204~ othing, System.Data.MappingType.Eleme~dulla^@204~     MyBase.Columns.Add(Me.columnCount~dulla^@204~     Me.columnPhone = New System.Data.~dulla^@204~ hone", GetType(String), Nothing, Syst~dulla^@204~ ngType.Element)
            MyBase.C~dulla^@204~ .columnPhone)
            Me.columnF~dulla^@204~ em.Data.DataColumn("Fax", GetType(Str~dulla^@204~ , System.Data.MappingType.Element)
 ~dulla^@204~ Base.Columns.Add(Me.columnFax)
     ~dulla^@204~ umnPostalAddress = New System.Data.Da~dulla^@204~ talAddress", GetType(String), Nothing~dulla^@204~ .MappingType.Element)
            My~dulla^@204~ Add(Me.columnPostalAddress)
        ~dulla^@204~ Website = New System.Data.DataColumn(~dulla^@204~ tType(String), Nothing, System.Data.M~dulla^@204~ ement)
            MyBase.Columns.Ad~dulla^@204~ bsite)
            Me.columnEmail = ~dulla^@204~ ta.DataColumn("Email", GetType(String~dulla^@204~ ystem.Data.MappingType.Element)
    ~dulla^@204~ e.Columns.Add(Me.columnEmail)
      ~dulla^@204~ traints.Add(New System.Data.UniqueCon~dulla^@204~ traint1", New System.Data.DataColumn(~dulla^@204~ upplierID}, true))
            Me.co~dulla^@204~ D.AllowDBNull = false
            Me~dulla^@204~ erID.Unique = true
            Me.co~dulla^@204~ D.MaxLength = 20
            Me.colu~dulla^@204~ e.AllowDBNull = false
            Me~dulla^@204~ erName.MaxLength = 50
            Me~dulla^@204~ s.MaxLength = 20
            Me.colu~dulla^@204~ gth = 20
            Me.columnCountr~dulla^@204~  20
            Me.columnPhone.MaxLe~dulla^@204~           Me.columnFax.MaxLength = 20~dulla^@204~  Me.columnPostalAddress.MaxLength = 2~dulla^@204~   Me.columnWebsite.MaxLength = 20
  ~dulla^@204~ columnEmail.MaxLength = 20
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Fun~dulla^@204~ lierRow() As SupplierRow
           ~dulla^@204~ (Me.NewRow,SupplierRow)
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Protecte~dulla^@204~ unction NewRowFromBuilder(ByVal build~dulla^@204~ Data.DataRowBuilder) As System.Data.D~dulla^@204~        Return New SupplierRow(builder~dulla^@204~ d Function
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~ ted Overrides Function GetRowType() A~dulla^@204~ 
            Return GetType(Supplier~dulla^@204~  End Function
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ tected Overrides Sub OnRowChanged(ByV~dulla^@204~ m.Data.DataRowChangeEventArgs)
     ~dulla^@204~ .OnRowChanged(e)
            If (Not~dulla^@204~ RowChangedEvent) Is Nothing) Then
  ~dulla^@204~  RaiseEvent SupplierRowChanged(Me, Ne~dulla^@204~ ChangeEvent(CType(e.Row,SupplierRow),~dulla^@204~             End If
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Protected Override~dulla^@204~ anging(ByVal e As System.Data.DataRow~dulla^@204~ gs)
            MyBase.OnRowChanging~dulla^@204~     If (Not (Me.SupplierRowChangingEv~dulla^@204~ ng) Then
                RaiseEvent ~dulla^@204~ anging(Me, New SupplierRowChangeEvent~dulla^@204~ SupplierRow), e.Action))
           ~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ cted Overrides Sub OnRowDeleted(ByVal~dulla^@204~ Data.DataRowChangeEventArgs)
       ~dulla^@204~ nRowDeleted(e)
            If (Not (~dulla^@204~ wDeletedEvent) Is Nothing) Then
    ~dulla^@204~ aiseEvent SupplierRowDeleted(Me, New ~dulla^@204~ angeEvent(CType(e.Row,SupplierRow), e~dulla^@204~           End If
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Protected Overrides ~dulla^@204~ ting(ByVal e As System.Data.DataRowCh~dulla^@204~ )
            MyBase.OnRowDeleting(e~dulla^@204~   If (Not (Me.SupplierRowDeletingEven~dulla^@204~ ) Then
                RaiseEvent Su~dulla^@204~ ting(Me, New SupplierRowChangeEvent(C~dulla^@204~ pplierRow), e.Action))
            E~dulla^@204~   End Sub
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Sub RemoveSupplierRow(ByVal row As Su~dulla^@204~            Me.Rows.Remove(row)
     ~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ ion GetTypedTableSchema(ByVal xs As S~dulla^@204~ ema.XmlSchemaSet) As System.Xml.Schem~dulla^@204~ mplexType
            Dim type As Sy~dulla^@204~ ma.XmlSchemaComplexType = New System.~dulla^@204~ lSchemaComplexType
            Dim s~dulla^@204~ stem.Xml.Schema.XmlSchemaSequence = N~dulla^@204~ .Schema.XmlSchemaSequence
          ~dulla^@204~ nventoryControlSystemDataSet3 = New I~dulla^@204~ olSystemDataSet3
            xs.Add(ds.GetSchemaSerializable)
            Dim~dulla^@204~ em.Xml.Schema.XmlSchemaAny = New Syst~dulla^@204~ .XmlSchemaAny
            any1.Names~dulla^@204~ //www.w3.org/2001/XMLSchema"
       ~dulla^@204~ Occurs = New Decimal(0)
            ~dulla^@204~ s = Decimal.MaxValue
            any~dulla^@204~ ents = System.Xml.Schema.XmlSchemaCon~dulla^@204~ g.Lax
            sequence.Items.Add~dulla^@204~        Dim any2 As System.Xml.Schema.~dulla^@204~ = New System.Xml.Schema.XmlSchemaAny~dulla^@204~ any2.Namespace = "urn:schemas-microso~dulla^@204~ ffgram-v1"
            any2.MinOccur~dulla^@204~ al(1)
            any2.ProcessConten~dulla^@204~ ml.Schema.XmlSchemaContentProcessing.~dulla^@204~     sequence.Items.Add(any2)
       ~dulla^@204~ ibute1 As System.Xml.Schema.XmlSchema~dulla^@204~ ew System.Xml.Schema.XmlSchemaAttribu~dulla^@204~    attribute1.Name = "namespace"
   ~dulla^@204~ ibute1.FixedValue = ds.Namespace
   ~dulla^@204~ .Attributes.Add(attribute1)
        ~dulla^@204~ bute2 As System.Xml.Schema.XmlSchemaA~dulla^@204~ w System.Xml.Schema.XmlSchemaAttribut~dulla^@204~   attribute2.Name = "tableTypeName"
~dulla^@204~ ttribute2.FixedValue = "SupplierDataT~dulla^@204~       type.Attributes.Add(attribute2)~dulla^@204~  type.Particle = sequence
          ~dulla^@204~ 
        End Function
    End Class~dulla^@204~ System.CodeDom.Compiler.GeneratedCode~dulla^@204~ stem.Data.Design.TypedDataSetGenerato~dulla^@204~ ),  _
     System.Serializable(),  _~dulla^@204~ .Xml.Serialization.XmlSchemaProviderA~dulla^@204~ TypedTableSchema")>  _
    Partial P~dulla^@204~ sersDataTable
        Inherits Syste~dulla^@204~ ble
        Implements System.Collec~dulla^@204~ able
        
        Private colum~dulla^@204~ System.Data.DataColumn
        
   ~dulla^@204~ columnPassword As System.Data.DataCol~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Sub Ne~dulla^@204~     MyBase.New
            Me.TableN~dulla^@204~ 
            Me.BeginInit
         ~dulla^@204~ ss
            Me.EndInit
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Friend Sub~dulla^@204~ ble As System.Data.DataTable)
      ~dulla^@204~ New
            Me.TableName = table~dulla^@204~            If (table.CaseSensitive <>~dulla^@204~ t.CaseSensitive) Then
              ~dulla^@204~ itive = table.CaseSensitive
        ~dulla^@204~            If (table.Locale.ToString ~dulla^@204~ Set.Locale.ToString) Then
          ~dulla^@204~ le = table.Locale
            End If~dulla^@204~  If (table.Namespace <> table.DataSet~dulla^@204~ hen
                Me.Namespace = t~dulla^@204~ e
            End If
            Me~dulla^@204~ le.Prefix
            Me.MinimumCapa~dulla^@204~ MinimumCapacity
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Protected Sub New(ByV~dulla^@204~ stem.Runtime.Serialization.Serializat~dulla^@204~ l context As System.Runtime.Serializa~dulla^@204~ gContext)
            MyBase.New(inf~dulla^@204~             Me.InitVars
        End ~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public ReadOn~dulla^@204~ serNameColumn() As System.Data.DataCo~dulla^@204~      Get
                Return Me.c~dulla^@204~ 
            End Get
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Rea~dulla^@204~ y PasswordColumn() As System.Data.Dat~dulla^@204~         Get
                Return M~dulla^@204~ ord
            End Get
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute(),  _
         System~dulla^@204~ el.Browsable(false)>  _
        Publ~dulla^@204~ roperty Count() As Integer
         ~dulla^@204~            Return Me.Rows.Count
    ~dulla^@204~ et
        End Property
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public Default ReadOnly Prope~dulla^@204~ l index As Integer) As UsersRow
    ~dulla^@204~                 Return CType(Me.Rows(~dulla^@204~ ow)
            End Get
        End~dulla^@204~       
        Public Event UsersRow~dulla^@204~ sersRowChangeEventHandler
        
~dulla^@204~ c Event UsersRowChanged As UsersRowCh~dulla^@204~ ler
        
        Public Event U~dulla^@204~ ng As UsersRowChangeEventHandler
   ~dulla^@204~   Public Event UsersRowDeleted As Use~dulla^@204~ entHandler
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Overloads Sub AddUsersRow(ByVal row ~dulla^@204~ 
            Me.Rows.Add(row)
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ ction AddUsersRow(ByVal UserName As S~dulla^@204~ Password As String) As UsersRow
    ~dulla^@204~ owUsersRow As UsersRow = CType(Me.New~dulla^@204~ 
            rowUsersRow.ItemArray =~dulla^@204~  {UserName, Password}
            Me~dulla^@204~ UsersRow)
            Return rowUser~dulla^@204~  End Function
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Overridable Function GetEnumerato~dulla^@204~ .Collections.IEnumerator Implements S~dulla^@204~ ions.IEnumerable.GetEnumerator
     ~dulla^@204~  Me.Rows.GetEnumerator
        End F~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Ov~dulla^@204~ ion Clone() As System.Data.DataTable~dulla^@204~ Dim cln As UsersDataTable = CType(MyB~dulla^@204~ rsDataTable)
            cln.InitVar~dulla^@204~   Return cln
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Protected Overrides~dulla^@204~ ateInstance() As System.Data.DataTabl~dulla^@204~   Return New UsersDataTable
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Frie~dulla^@204~ rs()
            Me.columnUserName =~dulla^@204~ ns("UserName")
            Me.column~dulla^@204~ Base.Columns("Password")
        End~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Private Sub ~dulla^@204~             Me.columnUserName = New S~dulla^@204~ taColumn("UserName", GetType(String),~dulla^@204~ tem.Data.MappingType.Element)
      ~dulla^@204~ Columns.Add(Me.columnUserName)
     ~dulla^@204~ umnPassword = New System.Data.DataCol~dulla^@204~ ", GetType(String), Nothing, System.D~dulla^@204~ pe.Element)
            MyBase.Colum~dulla^@204~ umnPassword)
            Me.columnUs~dulla^@204~ BNull = false
            Me.columnU~dulla^@204~ ngth = 10
            Me.columnPassw~dulla^@204~ ll = false
            Me.columnPass~dulla^@204~ h = 6
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Function NewUsersRow() A~dulla^@204~            Return CType(Me.NewRow,Use~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ rotected Overrides Function NewRowFro~dulla^@204~ l builder As System.Data.DataRowBuild~dulla^@204~ .Data.DataRow
            Return New~dulla^@204~ lder)
        End Function
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Protected Overrides Functi~dulla^@204~ () As System.Type
            Return~dulla^@204~ sRow)
        End Function
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Protected Overrides Sub On~dulla^@204~ Val e As System.Data.DataRowChangeEve~dulla^@204~         MyBase.OnRowChanged(e)
     ~dulla^@204~ t (Me.UsersRowChangedEvent) Is Nothin~dulla^@204~             RaiseEvent UsersRowChange~dulla^@204~ rsRowChangeEvent(CType(e.Row,UsersRow~dulla^@204~ 
            End If
        End Sub~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Protected Overri~dulla^@204~ Changing(ByVal e As System.Data.DataR~dulla^@204~ Args)
            MyBase.OnRowChangi~dulla^@204~       If (Not (Me.UsersRowChangingEve~dulla^@204~ g) Then
                RaiseEvent UsersRowChanging(Me, New UsersRowChangeEven~dulla^@204~ ,UsersRow), e.Action))
            E~dulla^@204~   End Sub
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ ed Overrides Sub OnRowDeleted(ByVal e~dulla^@204~ ta.DataRowChangeEventArgs)
         ~dulla^@204~ owDeleted(e)
            If (Not (Me~dulla^@204~ tedEvent) Is Nothing) Then
         ~dulla^@204~ vent UsersRowDeleted(Me, New UsersRow~dulla^@204~ Type(e.Row,UsersRow), e.Action))
   ~dulla^@204~ If
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Protected Overrides Sub OnRowDelet~dulla^@204~ s System.Data.DataRowChangeEventArgs)~dulla^@204~  MyBase.OnRowDeleting(e)
           ~dulla^@204~ UsersRowDeletingEvent) Is Nothing) Th~dulla^@204~        RaiseEvent UsersRowDeleting(Me~dulla^@204~ wChangeEvent(CType(e.Row,UsersRow), e~dulla^@204~           End If
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Sub RemoveUse~dulla^@204~ ow As UsersRow)
            Me.Rows.~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Shared Function GetTypedTableSc~dulla^@204~  As System.Xml.Schema.XmlSchemaSet) A~dulla^@204~ Schema.XmlSchemaComplexType
        ~dulla^@204~ As System.Xml.Schema.XmlSchemaComplex~dulla^@204~ stem.Xml.Schema.XmlSchemaComplexType~dulla^@204~ Dim sequence As System.Xml.Schema.Xml~dulla^@204~ e = New System.Xml.Schema.XmlSchemaSe~dulla^@204~        Dim ds As InventoryControlSyst~dulla^@204~ New InventoryControlSystemDataSet3
 ~dulla^@204~ .Add(ds.GetSchemaSerializable)
     ~dulla^@204~ y1 As System.Xml.Schema.XmlSchemaAny ~dulla^@204~ Xml.Schema.XmlSchemaAny
            ~dulla^@204~ e = "http://www.w3.org/2001/XMLSchema~dulla^@204~   any1.MinOccurs = New Decimal(0)
  ~dulla^@204~ 1.MaxOccurs = Decimal.MaxValue
     ~dulla^@204~ rocessContents = System.Xml.Schema.Xm~dulla^@204~ tProcessing.Lax
            sequence~dulla^@204~ y1)
            Dim any2 As System.X~dulla^@204~ SchemaAny = New System.Xml.Schema.Xml~dulla^@204~           any2.Namespace = "urn:schem~dulla^@204~ com:xml-diffgram-v1"
            any~dulla^@204~  New Decimal(1)
            any2.Pro~dulla^@204~ = System.Xml.Schema.XmlSchemaContentP~dulla^@204~ 
            sequence.Items.Add(any2~dulla^@204~   Dim attribute1 As System.Xml.Schema~dulla^@204~ ribute = New System.Xml.Schema.XmlSch~dulla^@204~ 
            attribute1.Name = "names~dulla^@204~       attribute1.FixedValue = ds.Name~dulla^@204~       type.Attributes.Add(attribute1)~dulla^@204~  Dim attribute2 As System.Xml.Schema.~dulla^@204~ ibute = New System.Xml.Schema.XmlSche~dulla^@204~             attribute2.Name = "tableT~dulla^@204~          attribute2.FixedValue = "Use~dulla^@204~ 
            type.Attributes.Add(attr~dulla^@204~         type.Particle = sequence
   ~dulla^@204~ rn type
        End Function
    En~dulla^@204~ 
    <System.CodeDom.Compiler.Genera~dulla^@204~ ute("System.Data.Design.TypedDataSetG~dulla^@204~ .0.0.0")>  _
    Partial Public Clas~dulla^@204~ ow
        Inherits System.Data.Data~dulla^@204~ 
        Private tableBlankTable As ~dulla^@204~ aTable
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~  New(ByVal rb As System.Data.DataRowB~dulla^@204~         MyBase.New(rb)
            M~dulla^@204~ able = CType(Me.Table,BlankTableDataT~dulla^@204~   End Sub
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Property PartNo() As String
        ~dulla^@204~             Try 
                   ~dulla^@204~ (Me(Me.tableBlankTable.PartNoColumn),~dulla^@204~             Catch e As System.Invalid~dulla^@204~ 
                    Throw New Syste~dulla^@204~ TypingException("The value for column~dulla^@204~ table 'BlankTable' is DBNull.", e)
 ~dulla^@204~   End Try
            End Get
     ~dulla^@204~                Me(Me.tableBlankTable.~dulla^@204~  = value
            End Set
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  Description() As String
           ~dulla^@204~          Try 
                    Re~dulla^@204~ (Me.tableBlankTable.DescriptionColumn~dulla^@204~               Catch e As System.Inval~dulla^@204~ on
                    Throw New Sys~dulla^@204~ ngTypingException("The value for colu~dulla^@204~ on' in table 'BlankTable' is DBNull."~dulla^@204~          End Try
            End Get~dulla^@204~  Set
                Me(Me.tableBlan~dulla^@204~ ptionColumn) = value
            End~dulla^@204~  End Property
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Property ReorderLevel() As Intege~dulla^@204~   Get
                Try 
        ~dulla^@204~ eturn CType(Me(Me.tableBlankTable.Reo~dulla^@204~ mn),Integer)
                Catch e~dulla^@204~ validCastException
                 ~dulla^@204~ System.Data.StrongTypingException("Th~dulla^@204~ olumn 'ReorderLevel' in table 'BlankT~dulla^@204~ ll.", e)
                End Try
  ~dulla^@204~  Get
            Set
              ~dulla^@204~ BlankTable.ReorderLevelColumn) = valu~dulla^@204~   End Set
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Property ShelfN~dulla^@204~ 
            Get
                Tr~dulla^@204~            Return CType(Me(Me.tableBl~dulla^@204~ fNoColumn),String)
                C~dulla^@204~ tem.InvalidCastException
           ~dulla^@204~ w New System.Data.StrongTypingExcepti~dulla^@204~  for column 'ShelfNo' in table 'Blank~dulla^@204~ ull.", e)
                End Try
 ~dulla^@204~ d Get
            Set
             ~dulla^@204~ eBlankTable.ShelfNoColumn) = value
 ~dulla^@204~ d Set
        End Property
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Function IsPartNoNu~dulla^@204~ an
            Return Me.IsNull(Me.t~dulla^@204~ e.PartNoColumn)
        End Function~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Sub SetPa~dulla^@204~            Me(Me.tableBlankTable.Part~dulla^@204~ ystem.Convert.DBNull
        End Sub~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Function ~dulla^@204~ Null() As Boolean
            Return~dulla^@204~ .tableBlankTable.DescriptionColumn)
~dulla^@204~ unction
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ b SetDescriptionNull()
            M~dulla^@204~ nkTable.DescriptionColumn) = System.C~dulla^@204~ 
        End Sub
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Function IsReorderLevelNull()~dulla^@204~             Return Me.IsNull(Me.table~dulla^@204~ orderLevelColumn)
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Sub Set~dulla^@204~ ull()
            Me(Me.tableBlankTa~dulla^@204~ velColumn) = System.Convert.DBNull
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  IsShelfNoNull() As Boolean
        ~dulla^@204~ .IsNull(Me.tableBlankTable.ShelfNoCol~dulla^@204~  End Function
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Sub SetShelfNoNull()
           ~dulla^@204~ lankTable.ShelfNoColumn) = System.Con~dulla^@204~         End Sub
    End Class
    ~dulla^@204~ CodeDom.Compiler.GeneratedCodeAttribu~dulla^@204~ ta.Design.TypedDataSetGenerator", "2.~dulla^@204~     Partial Public Class CashSalesRow~dulla^@204~ erits System.Data.DataRow
        
~dulla^@204~ te tableCashSales As CashSalesDataTab~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Friend Sub New~dulla^@204~ System.Data.DataRowBuilder)
        ~dulla^@204~ w(rb)
            Me.tableCashSales ~dulla^@204~ ble,CashSalesDataTable)
        End ~dulla^@204~ 
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Publi~dulla^@204~ shSalesInvoiceNo() As String
       ~dulla^@204~              Return CType(Me(Me.table~dulla^@204~ hSalesInvoiceNoColumn),String)
     ~dulla^@204~ t
            Set
                M~dulla^@204~ hSales.CashSalesInvoiceNoColumn) = va~dulla^@204~     End Set
        End Property
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Property _Dat~dulla^@204~             Get
                Retu~dulla^@204~ e.tableCashSales.DateColumn),Date)
 ~dulla^@204~ d Get
            Set
             ~dulla^@204~ eCashSales.DateColumn) = value
     ~dulla^@204~ t
        End Property
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Property TotalAmount() ~dulla^@204~            Get
                Retur~dulla^@204~ .tableCashSales.TotalAmountColumn),De~dulla^@204~        End Get
            Set
    ~dulla^@204~ e(Me.tableCashSales.TotalAmountColumn~dulla^@204~           End Set
        End Proper~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Propert~dulla^@204~ uble
            Get
              ~dulla^@204~ e(Me(Me.tableCashSales.VATColumn),Dou~dulla^@204~      End Get
            Set
      ~dulla^@204~ Me.tableCashSales.VATColumn) = value~dulla^@204~ End Set
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Property GrandTot~dulla^@204~ al
            Get
                ~dulla^@204~ Me(Me.tableCashSales.GrandTotalColumn~dulla^@204~            End Get
            Set
~dulla^@204~    Me(Me.tableCashSales.GrandTotalCol~dulla^@204~ 
            End Set
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Prop~dulla^@204~ ords() As String
            Get
  ~dulla^@204~  Return CType(Me(Me.tableCashSales.To~dulla^@204~ umn),String)
            End Get
  ~dulla^@204~ 
                Me(Me.tableCashSale~dulla^@204~ sColumn) = value
            End Set~dulla^@204~  Property
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Property CustomerName() As String
  ~dulla^@204~ 
                Return CType(Me(Me.~dulla^@204~ s.CustomerNameColumn),String)
      ~dulla^@204~ 
            Set
                Me~dulla^@204~ Sales.CustomerNameColumn) = value
  ~dulla^@204~  Set
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Property CustomersRo~dulla^@204~ ersRow
            Get
            ~dulla^@204~ ype(Me.GetParentRow(Me.Table.ParentRe~dulla^@204~ ashSales_Customers")),CustomersRow)
~dulla^@204~ nd Get
            Set
            ~dulla^@204~ entRow(value, Me.Table.ParentRelation~dulla^@204~ es_Customers"))
            End Set~dulla^@204~ Property
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ unction GetSalesInfoRows() As SalesIn~dulla^@204~         Return CType(MyBase.GetChildR~dulla^@204~ ChildRelations("FK_SalesInfo_CashSale~dulla^@204~ oRow())
        End Function
    En~dulla^@204~ 
    <System.CodeDom.Compiler.Genera~dulla^@204~ ute("System.Data.Design.TypedDataSetG~dulla^@204~ .0.0.0")>  _
    Partial Public Clas~dulla^@204~ Row
        Inherits System.Data.Dat~dulla^@204~  
        Private tableCreditSales A~dulla^@204~ DataTable
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Sub New(ByVal rb As System.Data.DataR~dulla^@204~            MyBase.New(rb)
          ~dulla^@204~ ditSales = CType(Me.Table,CreditSales~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Property CreditSalesInvoiceNo() ~dulla^@204~           Get
                Return~dulla^@204~ tableCreditSales.CreditSalesInvoiceNo~dulla^@204~ g)
            End Get
            ~dulla^@204~         Me(Me.tableCreditSales.Credit~dulla^@204~ oColumn) = value
            End Set~dulla^@204~  Property
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Property _Date() As Date
           ~dulla^@204~          Return CType(Me(Me.tableCred~dulla^@204~ olumn),Date)
            End Get
  ~dulla^@204~ 
                Me(Me.tableCreditSa~dulla^@204~ n) = value
            End Set
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ty TotalAmount() As Decimal
        ~dulla^@204~             Return CType(Me(Me.tableC~dulla^@204~ talAmountColumn),Decimal)
          ~dulla^@204~           Set
                Me(Me.~dulla^@204~ les.TotalAmountColumn) = value
     ~dulla^@204~ t
        End Property
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Property VAT() As Doubl~dulla^@204~   Get
                Return CType(M~dulla^@204~ ditSales.VATColumn),Double)
        ~dulla^@204~             Set
                Me(M~dulla^@204~ Sales.VATColumn) = value
           ~dulla^@204~      End Property
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Property GrandTotal() As Deci~dulla^@204~     Get
                Return CType~dulla^@204~ reditSales.GrandTotalColumn),Decimal)~dulla^@204~  End Get
            Set
          ~dulla^@204~ ableCreditSales.GrandTotalColumn) = v~dulla^@204~      End Set
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public Property Tot~dulla^@204~ s String
            Get
          ~dulla^@204~                    Return CType(Me(Me~dulla^@204~ ales.TotalInWordsColumn),String)
   ~dulla^@204~ Catch e As System.InvalidCastExceptio~dulla^@204~           Throw New System.Data.Stron~dulla^@204~ ion("The value for column 'TotalInWor~dulla^@204~ 'CreditSales' is DBNull.", e)
      ~dulla^@204~  Try
            End Get
          ~dulla^@204~           Me(Me.tableCreditSales.Tota~dulla^@204~ n) = value
            End Set
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ty DueDate() As Date
            Get~dulla^@204~      Return CType(Me(Me.tableCreditSa~dulla^@204~ lumn),Date)
            End Get
   ~dulla^@204~ 
                Me(Me.tableCreditSal~dulla^@204~ umn) = value
            End Set
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ erty CustomerName() As String
      ~dulla^@204~               Return CType(Me(Me.tabl~dulla^@204~ CustomerNameColumn),String)
        ~dulla^@204~             Set
                Me(M~dulla^@204~ Sales.CustomerNameColumn) = value
  ~dulla^@204~  Set
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Property CustomersRo~dulla^@204~ ersRow
            Get
            ~dulla^@204~ ype(Me.GetParentRow(Me.Table.ParentRe~dulla^@204~ reditSales_Customers")),CustomersRow)~dulla^@204~  End Get
            Set
          ~dulla^@204~ arentRow(value, Me.Table.ParentRelati~dulla^@204~ tSales_Customers"))
            End ~dulla^@204~ End Property
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic Function IsTotalInWordsNull() As B~dulla^@204~        Return Me.IsNull(Me.tableCredi~dulla^@204~ nWordsColumn)
        End Function
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Sub SetTota~dulla^@204~ )
            Me(Me.tableCreditSales~dulla^@204~ Column) = System.Convert.DBNull
    ~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ tSalesInfoRows() As SalesInfoRow()
 ~dulla^@204~ turn CType(MyBase.GetChildRows(Me.Tab~dulla^@204~ ions("FK_SalesInfo_CreditSales")),Sal~dulla^@204~ 
        End Function
    End Class~dulla^@204~ ystem.CodeDom.Compiler.GeneratedCodeA~dulla^@204~ tem.Data.Design.TypedDataSetGenerator~dulla^@204~ >  _
    Partial Public Class CustomersRow
        Inherits System.Data.DataR~dulla^@204~ 
        Private tableCustomers As Cu~dulla^@204~ ble
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ w(ByVal rb As System.Data.DataRowBuil~dulla^@204~      MyBase.New(rb)
            Me.t~dulla^@204~  = CType(Me.Table,CustomersDataTable)~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ rty CustomerName() As String
       ~dulla^@204~              Return CType(Me(Me.table~dulla^@204~ tomerNameColumn),String)
           ~dulla^@204~          Set
                Me(Me.t~dulla^@204~ .CustomerNameColumn) = value
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Property SubCity() As Str~dulla^@204~     Get
                Try 
      ~dulla^@204~  Return CType(Me(Me.tableCustomers.Su~dulla^@204~ String)
                Catch e As S~dulla^@204~ CastException
                    Th~dulla^@204~ m.Data.StrongTypingException("The val~dulla^@204~  'SubCity' in table 'Customers' is DB~dulla^@204~                End Try
            E~dulla^@204~        Set
                Me(Me.tab~dulla^@204~ ubCityColumn) = value
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Property Kebele() As String
   ~dulla^@204~ 
                Try 
              ~dulla^@204~ CType(Me(Me.tableCustomers.KebeleColu~dulla^@204~                 Catch e As System.Inv~dulla^@204~ tion
                    Throw New S~dulla^@204~ rongTypingException("The value for co~dulla^@204~  in table 'Customers' is DBNull.", e)~dulla^@204~      End Try
            End Get
  ~dulla^@204~ 
                Me(Me.tableCustomer~dulla^@204~ n) = value
            End Set
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ty HouseNo() As String
            G~dulla^@204~        Try 
                    Retu~dulla^@204~ e.tableCustomers.HouseNoColumn),Strin~dulla^@204~        Catch e As System.InvalidCastE~dulla^@204~                  Throw New System.Dat~dulla^@204~ gException("The value for column 'Hou~dulla^@204~ e 'Customers' is DBNull.", e)
      ~dulla^@204~  Try
            End Get
          ~dulla^@204~           Me(Me.tableCustomers.HouseN~dulla^@204~ lue
            End Set
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ ) As String
            Get
       ~dulla^@204~ 
                    Return CType(Me~dulla^@204~ omers.TelColumn),String)
           ~dulla^@204~ As System.InvalidCastException
     ~dulla^@204~   Throw New System.Data.StrongTypingE~dulla^@204~  value for column 'Tel' in table 'Cus~dulla^@204~ Null.", e)
                End Try
~dulla^@204~ nd Get
            Set
            ~dulla^@204~ leCustomers.TelColumn) = value
     ~dulla^@204~ t
        End Property
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Property Fax() As Strin~dulla^@204~   Get
                Try 
        ~dulla^@204~ eturn CType(Me(Me.tableCustomers.FaxC~dulla^@204~ )
                Catch e As System.~dulla^@204~ ception
                    Throw Ne~dulla^@204~ .StrongTypingException("The value for~dulla^@204~  in table 'Customers' is DBNull.", e)~dulla^@204~      End Try
            End Get
  ~dulla^@204~ 
                Me(Me.tableCustomer~dulla^@204~ = value
            End Set
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ PostalAddress() As String
          ~dulla^@204~           Try 
                    R~dulla^@204~ e(Me.tableCustomers.PostalAddressColu~dulla^@204~                 Catch e As System.Inv~dulla^@204~ tion
                    Throw New S~dulla^@204~ rongTypingException("The value for co~dulla^@204~ ddress' in table 'Customers' is DBNul~dulla^@204~             End Try
            End ~dulla^@204~     Set
                Me(Me.tableC~dulla^@204~ alAddressColumn) = value
           ~dulla^@204~      End Property
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Property Email() As String
 ~dulla^@204~ t
                Try 
            ~dulla^@204~ n CType(Me(Me.tableCustomers.EmailCol~dulla^@204~ 
                Catch e As System.In~dulla^@204~ ption
                    Throw New ~dulla^@204~ trongTypingException("The value for c~dulla^@204~  in table 'Customers' is DBNull.", e)~dulla^@204~      End Try
            End Get
  ~dulla^@204~ 
                Me(Me.tableCustomer~dulla^@204~ ) = value
            End Set
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y CustomerVATRegNo() As String
     ~dulla^@204~                Try 
                ~dulla^@204~ ype(Me(Me.tableCustomers.CustomerVATR~dulla^@204~ tring)
                Catch e As Sy~dulla^@204~ astException
                    Thr~dulla^@204~ .Data.StrongTypingException("The valu~dulla^@204~ 'CustomerVATRegNo' in table 'Customer~dulla^@204~ ", e)
                End Try
     ~dulla^@204~ t
            Set
                M~dulla^@204~ tomers.CustomerVATRegNoColumn) = valu~dulla^@204~   End Set
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Property Custom~dulla^@204~ String
            Get
            ~dulla^@204~                  Return CType(Me(Me.t~dulla^@204~ .CustomerTINNoColumn),String)
      ~dulla^@204~ ch e As System.InvalidCastException
~dulla^@204~        Throw New System.Data.StrongTy~dulla^@204~ ("The value for column 'CustomerTINNo~dulla^@204~ ustomers' is DBNull.", e)
          ~dulla^@204~ 
            End Get
            Se~dulla^@204~       Me(Me.tableCustomers.CustomerTI~dulla^@204~ value
            End Set
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ stomerDateOfReg() As Date
          ~dulla^@204~           Try 
                    R~dulla^@204~ e(Me.tableCustomers.CustomerDateOfReg~dulla^@204~ 
                Catch e As System.I~dulla^@204~ eption
                    Throw New~dulla^@204~ StrongTypingException("The value for ~dulla^@204~ merDateOfReg' in table 'Customers' is~dulla^@204~ 
                End Try
          ~dulla^@204~           Set
                Me(Me.~dulla^@204~ s.CustomerDateOfRegColumn) = value
 ~dulla^@204~ d Set
        End Property
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Function IsSubCityN~dulla^@204~ ean
            Return Me.IsNull(Me.~dulla^@204~ s.SubCityColumn)
        End Functio~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Sub SetS~dulla^@204~ 
            Me(Me.tableCustomers.Sub~dulla^@204~  System.Convert.DBNull
        End S~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Functio~dulla^@204~ l() As Boolean
            Return Me~dulla^@204~ bleCustomers.KebeleColumn)
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ leNull()
            Me(Me.tableCust~dulla^@204~ olumn) = System.Convert.DBNull
     ~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ ouseNoNull() As Boolean
            ~dulla^@204~ ull(Me.tableCustomers.HouseNoColumn)~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ ub SetHouseNoNull()
            Me(M~dulla^@204~ ers.HouseNoColumn) = System.Convert.D~dulla^@204~   End Sub
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Function IsTelNull() As Boolean
    ~dulla^@204~ n Me.IsNull(Me.tableCustomers.TelColu~dulla^@204~ End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Sub SetTelNull()
        ~dulla^@204~ leCustomers.TelColumn) = System.Conve~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Function IsFaxNull() As Boolean
~dulla^@204~ eturn Me.IsNull(Me.tableCustomers.Fax~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Sub SetFaxNull()
            ~dulla^@204~ stomers.FaxColumn) = System.Convert.D~dulla^@204~   End Sub
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Function IsPostalAddressNull() As Boo~dulla^@204~      Return Me.IsNull(Me.tableCustome~dulla^@204~ essColumn)
        End Function
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public Sub SetPostalA~dulla^@204~ 
            Me(Me.tableCustomers.Pos~dulla^@204~ umn) = System.Convert.DBNull
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public F~dulla^@204~ ilNull() As Boolean
            Retu~dulla^@204~ Me.tableCustomers.EmailColumn)
     ~dulla^@204~ on
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ EmailNull()
            Me(Me.tableC~dulla^@204~ lColumn) = System.Convert.DBNull
   ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ sCustomerVATRegNoNull() As Boolean
 ~dulla^@204~ turn Me.IsNull(Me.tableCustomers.Cust~dulla^@204~ olumn)
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Sub SetCustomerVAT~dulla^@204~             Me(Me.tableCustomers.Cust~dulla^@204~ olumn) = System.Convert.DBNull
     ~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ ustomerTINNoNull() As Boolean
      ~dulla^@204~ Me.IsNull(Me.tableCustomers.CustomerT~dulla^@204~         End Function
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Sub SetCustomerTINNoNull()~dulla^@204~  Me(Me.tableCustomers.CustomerTINNoCo~dulla^@204~ m.Convert.DBNull
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Function IsCu~dulla^@204~ egNull() As Boolean
            Retu~dulla^@204~ Me.tableCustomers.CustomerDateOfRegCo~dulla^@204~   End Function
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Sub SetCustomerDateOfRegNull()
~dulla^@204~ e(Me.tableCustomers.CustomerDateOfReg~dulla^@204~ tem.Convert.DBNull
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Function Ge~dulla^@204~ s() As CashSalesRow()
            Re~dulla^@204~ Base.GetChildRows(Me.Table.ChildRelat~dulla^@204~ Sales_Customers")),CashSalesRow())
 ~dulla^@204~ nction
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ ction GetCreditSalesRows() As CreditS~dulla^@204~           Return CType(MyBase.GetChil~dulla^@204~ e.ChildRelations("FK_CreditSales_Cust~dulla^@204~ itSalesRow())
        End Function
~dulla^@204~ 
    
    <System.CodeDom.Compiler.~dulla^@204~ Attribute("System.Data.Design.TypedDa~dulla^@204~ r", "2.0.0.0")>  _
    Partial Publi~dulla^@204~ Row
        Inherits System.Data.Dat~dulla^@204~  
        Private tableOrder As Orde~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Friend~dulla^@204~ l rb As System.Data.DataRowBuilder)
~dulla^@204~ yBase.New(rb)
            Me.tableOr~dulla^@204~ e.Table,OrderDataTable)
        End ~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Proper~dulla^@204~ As String
            Get
         ~dulla^@204~  CType(Me(Me.tableOrder.OrderNoColumn~dulla^@204~           End Get
            Set
 ~dulla^@204~   Me(Me.tableOrder.OrderNoColumn) = v~dulla^@204~      End Set
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public Property Par~dulla^@204~ ng
            Get
                ~dulla^@204~ Me(Me.tableOrder.PartNoColumn),String~dulla^@204~   End Get
            Set
         ~dulla^@204~ tableOrder.PartNoColumn) = value
   ~dulla^@204~ Set
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Property Description(~dulla^@204~             Get
                Retu~dulla^@204~ e.tableOrder.DescriptionColumn),Strin~dulla^@204~    End Get
            Set
        ~dulla^@204~ .tableOrder.DescriptionColumn) = valu~dulla^@204~   End Set
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Property Requir~dulla^@204~ As Integer
            Get
        ~dulla^@204~ n CType(Me(Me.tableOrder.RequiredQuan~dulla^@204~ nteger)
            End Get
       ~dulla^@204~              Me(Me.tableOrder.Require~dulla^@204~ mn) = value
            End Set
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ rty ProductsRow() As ProductsRow
   ~dulla^@204~ 
                Return CType(Me.GetP~dulla^@204~ able.ParentRelations("FK_Order_Produc~dulla^@204~ sRow)
            End Get
         ~dulla^@204~            Me.SetParentRow(value, Me.~dulla^@204~ elations("FK_Order_Products"))
     ~dulla^@204~ t
        End Property
    End Clas~dulla^@204~ <System.CodeDom.Compiler.GeneratedCod~dulla^@204~ ystem.Data.Design.TypedDataSetGenerat~dulla^@204~ ")>  _
    Partial Public Class Prod~dulla^@204~     Inherits System.Data.DataRow
   ~dulla^@204~   Private tableProducts As ProductsDa~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Friend Su~dulla^@204~ b As System.Data.DataRowBuilder)
   ~dulla^@204~ se.New(rb)
            Me.tableProdu~dulla^@204~ e.Table,ProductsDataTable)
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Pro~dulla^@204~ ) As String
            Get
       ~dulla^@204~ rn CType(Me(Me.tableProducts.PartNoCo~dulla^@204~ 
            End Get
            Se~dulla^@204~       Me(Me.tableProducts.PartNoColum~dulla^@204~            End Set
        End Prope~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Proper~dulla^@204~ n() As String
            Get
     ~dulla^@204~ turn CType(Me(Me.tableProducts.Descri~dulla^@204~ String)
            End Get
       ~dulla^@204~              Me(Me.tableProducts.Desc~dulla^@204~ ) = value
            End Set
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y UnitCost() As Decimal
            ~dulla^@204~         Try 
                    Ret~dulla^@204~ Me.tableProducts.UnitCostColumn),Deci~dulla^@204~          Catch e As System.InvalidCas~dulla^@204~                    Throw New System.D~dulla^@204~ ingException("The value for column 'U~dulla^@204~ able 'Products' is DBNull.", e)
    ~dulla^@204~ nd Try
            End Get
        ~dulla^@204~             Me(Me.tableProducts.UnitC~dulla^@204~ value
            End Set
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ llingPrice1() As Double
            ~dulla^@204~         Return CType(Me(Me.tableProdu~dulla^@204~ ice1Column),Double)
            End ~dulla^@204~     Set
                Me(Me.tableP~dulla^@204~ ngPrice1Column) = value
            ~dulla^@204~     End Property
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Property SellingPrice2() As Do~dulla^@204~      Get
                Return CTyp~dulla^@204~ Products.SellingPrice2Column),Double)~dulla^@204~  End Get
            Set
          ~dulla^@204~ ableProducts.SellingPrice2Column) = v~dulla^@204~      End Set
        End Property
        
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Prop~dulla^@204~ p1() As Integer
            Get
   ~dulla^@204~ Try 
                    Return CTyp~dulla^@204~ Products.QtyAtShop1Column),Integer)
~dulla^@204~    Catch e As System.InvalidCastExcep~dulla^@204~              Throw New System.Data.St~dulla^@204~ eption("The value for column 'QtyAtSh~dulla^@204~  'Products' is DBNull.", e)
        ~dulla^@204~ ry
            End Get
            ~dulla^@204~         Me(Me.tableProducts.QtyAtShop~dulla^@204~ lue
            End Set
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ tShop2() As Integer
            Get~dulla^@204~     Try 
                    Return ~dulla^@204~ ableProducts.QtyAtShop2Column),Intege~dulla^@204~        Catch e As System.InvalidCastE~dulla^@204~                  Throw New System.Dat~dulla^@204~ gException("The value for column 'Qty~dulla^@204~ able 'Products' is DBNull.", e)
    ~dulla^@204~ nd Try
            End Get
        ~dulla^@204~             Me(Me.tableProducts.QtyAt~dulla^@204~ = value
            End Set
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ QtyAtStore() As Integer
            ~dulla^@204~         Try 
                    Ret~dulla^@204~ Me.tableProducts.QtyAtStoreColumn),In~dulla^@204~            Catch e As System.InvalidC~dulla^@204~ 
                    Throw New System~dulla^@204~ ypingException("The value for column ~dulla^@204~ in table 'Products' is DBNull.", e)
~dulla^@204~    End Try
            End Get
    ~dulla^@204~                 Me(Me.tableProducts.Q~dulla^@204~ mn) = value
            End Set
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ rty TotalQuantity() As Integer
     ~dulla^@204~                Try 
                ~dulla^@204~ ype(Me(Me.tableProducts.TotalQuantity~dulla^@204~ er)
                Catch e As Syste~dulla^@204~ Exception
                    Throw ~dulla^@204~ ta.StrongTypingException("The value f~dulla^@204~ talQuantity' in table 'Products' is D~dulla^@204~                 End Try
            ~dulla^@204~         Set
                Me(Me.ta~dulla^@204~ otalQuantityColumn) = value
        ~dulla^@204~         End Property
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Property ReorderLevel() As~dulla^@204~          Get
                Return ~dulla^@204~ ableProducts.ReorderLevelColumn),Inte~dulla^@204~      End Get
            Set
      ~dulla^@204~ Me.tableProducts.ReorderLevelColumn) ~dulla^@204~         End Set
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Property ~dulla^@204~ String
            Get
            ~dulla^@204~ ype(Me(Me.tableProducts.ShelfNoColumn~dulla^@204~           End Get
            Set
 ~dulla^@204~   Me(Me.tableProducts.ShelfNoColumn) ~dulla^@204~         End Set
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Function ~dulla^@204~ l() As Boolean
            Return Me~dulla^@204~ bleProducts.UnitCostColumn)
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ tCostNull()
            Me(Me.tableP~dulla^@204~ ostColumn) = System.Convert.DBNull
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  IsQtyAtShop1Null() As Boolean
     ~dulla^@204~  Me.IsNull(Me.tableProducts.QtyAtShop~dulla^@204~      End Function
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Sub SetQtyAtShop1Null()
    ~dulla^@204~ .tableProducts.QtyAtShop1Column) = Sy~dulla^@204~ DBNull
        End Sub
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Function IsQtyAtShop2Nu~dulla^@204~ an
            Return Me.IsNull(Me.t~dulla^@204~ QtyAtShop2Column)
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Sub Set~dulla^@204~ l()
            Me(Me.tableProducts.~dulla^@204~ umn) = System.Convert.DBNull
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public F~dulla^@204~ AtStoreNull() As Boolean
           ~dulla^@204~ Null(Me.tableProducts.QtyAtStoreColum~dulla^@204~ nd Function
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Sub SetQtyAtStoreNull()
          ~dulla^@204~ Products.QtyAtStoreColumn) = System.C~dulla^@204~ 
        End Sub
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Function IsTotalQuantityNull(~dulla^@204~ 
            Return Me.IsNull(Me.tabl~dulla^@204~ alQuantityColumn)
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Sub Set~dulla^@204~ Null()
            Me(Me.tableProduc~dulla^@204~ ityColumn) = System.Convert.DBNull
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  GetOrderRows() As OrderRow()
      ~dulla^@204~ CType(MyBase.GetChildRows(Me.Table.Ch~dulla^@204~ "FK_Order_Products")),OrderRow())
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ tion GetSalesInfoRows() As SalesInfoR~dulla^@204~      Return CType(MyBase.GetChildRows~dulla^@204~ ldRelations("FK_SalesInfo_Products"))~dulla^@204~ ())
        End Function
    End Cl~dulla^@204~   <System.CodeDom.Compiler.GeneratedC~dulla^@204~ "System.Data.Design.TypedDataSetGener~dulla^@204~ .0")>  _
    Partial Public Class Pu~dulla^@204~       Inherits System.Data.DataRow
 ~dulla^@204~     Private tablePurchase As Purchase~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Friend ~dulla^@204~  rb As System.Data.DataRowBuilder)
 ~dulla^@204~ Base.New(rb)
            Me.tablePur~dulla^@204~ (Me.Table,PurchaseDataTable)
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public P~dulla^@204~ aseInvoiceNo() As String
           ~dulla^@204~          Return CType(Me(Me.tablePurc~dulla^@204~ InvoiceNoColumn),String)
           ~dulla^@204~          Set
                Me(Me.t~dulla^@204~ PurchaseInvoiceNoColumn) = value
   ~dulla^@204~ Set
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Property DateOfPurcha~dulla^@204~ 
            Get
                Ret~dulla^@204~ Me.tablePurchase.DateOfPurchaseColumn~dulla^@204~         End Get
            Set
   ~dulla^@204~ Me(Me.tablePurchase.DateOfPurchaseCol~dulla^@204~ 
            End Set
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Prop~dulla^@204~ unt() As Decimal
            Get
  ~dulla^@204~  Return CType(Me(Me.tablePurchase.Tot~dulla^@204~ n),Decimal)
            End Get
   ~dulla^@204~ 
                Me(Me.tablePurchase.~dulla^@204~ lumn) = value
            End Set
 ~dulla^@204~ operty
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ perty FrieghtCharge() As Decimal
   ~dulla^@204~ 
                Return CType(Me(Me.t~dulla^@204~ FrieghtChargeColumn),Decimal)
      ~dulla^@204~ 
            Set
                Me~dulla^@204~ hase.FrieghtChargeColumn) = value
  ~dulla^@204~  Set
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Property Miscellaneo~dulla^@204~ ecimal
            Get
            ~dulla^@204~ ype(Me(Me.tablePurchase.Miscellaneous~dulla^@204~ ecimal)
            End Get
       ~dulla^@204~              Me(Me.tablePurchase.Misc~dulla^@204~ Column) = value
            End Set~dulla^@204~ Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Property GrandTotal() As Decim~dulla^@204~    Get
                Return CType(~dulla^@204~ rchase.GrandTotalColumn),Decimal)
  ~dulla^@204~  Get
            Set
              ~dulla^@204~ Purchase.GrandTotalColumn) = value
 ~dulla^@204~ d Set
        End Property
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Property SupplierID~dulla^@204~ 
            Get
                Ret~dulla^@204~ Me.tablePurchase.SupplierIDColumn),St~dulla^@204~       End Get
            Set
     ~dulla^@204~ (Me.tablePurchase.SupplierIDColumn) =~dulla^@204~        End Set
        End Property~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Property S~dulla^@204~ As SupplierRow
            Get
    ~dulla^@204~ eturn CType(Me.GetParentRow(Me.Table.~dulla^@204~ ns("FK_Purchase_Supplier")),SupplierR~dulla^@204~     End Get
            Set
       ~dulla^@204~ etParentRow(value, Me.Table.ParentRel~dulla^@204~ rchase_Supplier"))
            End S~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Function GetPurchaseInfoRows() As P~dulla^@204~ w()
            Return CType(MyBase.~dulla^@204~ Me.Table.ChildRelations("FK_PurchaseI~dulla^@204~ )),PurchaseInfoRow())
        End Fu~dulla^@204~ nd Class
    
    <System.CodeDom.C~dulla^@204~ atedCodeAttribute("System.Data.Design~dulla^@204~ Generator", "2.0.0.0")>  _
    Parti~dulla^@204~ ss PurchaseInfoRow
        Inherits ~dulla^@204~ ataRow
        
        Private tab~dulla^@204~ o As PurchaseInfoDataTable
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Friend Sub New(ByVal rb As ~dulla^@204~ ataRowBuilder)
            MyBase.Ne~dulla^@204~       Me.tablePurchaseInfo = CType(Me~dulla^@204~ seInfoDataTable)
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Property Part~dulla^@204~ g
            Get
                R~dulla^@204~ e(Me.tablePurchaseInfo.PartNoColumn),~dulla^@204~         End Get
            Set
   ~dulla^@204~ Me(Me.tablePurchaseInfo.PartNoColumn)~dulla^@204~          End Set
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Property~dulla^@204~ ) As String
            Get
       ~dulla^@204~ rn CType(Me(Me.tablePurchaseInfo.Desc~dulla^@204~ ),String)
            End Get
     ~dulla^@204~                Me(Me.tablePurchaseInf~dulla^@204~ Column) = value
            End Set~dulla^@204~ Property
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ roperty Brand() As String
          ~dulla^@204~           Try 
                    R~dulla^@204~ e(Me.tablePurchaseInfo.BrandColumn),S~dulla^@204~            Catch e As System.InvalidC~dulla^@204~ 
                    Throw New System~dulla^@204~ ypingException("The value for column ~dulla^@204~ ble 'PurchaseInfo' is DBNull.", e)
 ~dulla^@204~   End Try
            End Get
     ~dulla^@204~                Me(Me.tablePurchaseInf~dulla^@204~ ) = value
            End Set
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y Origin() As String
            Get~dulla^@204~      Try 
                    Return~dulla^@204~ tablePurchaseInfo.OriginColumn),Strin~dulla^@204~        Catch e As System.InvalidCastE~dulla^@204~                  Throw New System.Dat~dulla^@204~ gException("The value for column 'Ori~dulla^@204~  'PurchaseInfo' is DBNull.", e)
    ~dulla^@204~ nd Try
            End Get
        ~dulla^@204~             Me(Me.tablePurchaseInfo.O~dulla^@204~ = value
            End Set
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ NetWeight() As String
            Ge~dulla^@204~       Try 
                    Retur~dulla^@204~ .tablePurchaseInfo.NetWeightColumn),S~dulla^@204~            Catch e As System.InvalidC~dulla^@204~ 
                    Throw New System~dulla^@204~ ypingException("The value for column ~dulla^@204~ n table 'PurchaseInfo' is DBNull.", e~dulla^@204~       End Try
            End Get
 ~dulla^@204~ t
                Me(Me.tablePurchas~dulla^@204~ htColumn) = value
            End Se~dulla^@204~ d Property
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Property Quantity() As Integer
    ~dulla^@204~                 Return CType(Me(Me.ta~dulla^@204~ fo.QuantityColumn),Integer)
        ~dulla^@204~             Set
                Me(M~dulla^@204~ seInfo.QuantityColumn) = value
     ~dulla^@204~ t
        End Property
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Property Price() As Dec~dulla^@204~      Get
                Try 
     ~dulla^@204~   Return CType(Me(Me.tablePurchaseInf~dulla^@204~ ),Decimal)
                Catch e A~dulla^@204~ lidCastException
                   ~dulla^@204~ stem.Data.StrongTypingException("The ~dulla^@204~ umn 'Price' in table 'PurchaseInfo' i~dulla^@204~ )
                End Try
         ~dulla^@204~            Set
                Me(Me~dulla^@204~ eInfo.PriceColumn) = value
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Property Amount() As Decima~dulla^@204~   Get
                Return CType(M~dulla^@204~ chaseInfo.AmountColumn),Decimal)
   ~dulla^@204~ Get
            Set
               ~dulla^@204~ urchaseInfo.AmountColumn) = value
  ~dulla^@204~  Set
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Property SupplierID(~dulla^@204~             Get
                Retu~dulla^@204~ e.tablePurchaseInfo.SupplierIDColumn)~dulla^@204~          End Get
            Set
  ~dulla^@204~  Me(Me.tablePurchaseInfo.SupplierIDCo~dulla^@204~ 
            End Set
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Pro~dulla^@204~ No() As String
            Get
    ~dulla^@204~ eturn CType(Me(Me.tablePurchaseInfo.I~dulla^@204~ n),String)
            End Get
    ~dulla^@204~                 Me(Me.tablePurchaseIn~dulla^@204~ olumn) = value
            End Set
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ operty PurchaseRow() As PurchaseRow
~dulla^@204~ et
                Return CType(Me.G~dulla^@204~ e.Table.ParentRelations("FK_PurchaseI~dulla^@204~ )),PurchaseRow)
            End Get~dulla^@204~ Set
                Me.SetParentRow(~dulla^@204~ le.ParentRelations("FK_PurchaseInfo_P~dulla^@204~            End Set
        End Prope~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Proper~dulla^@204~ w() As SupplierRow
            Get
~dulla^@204~    Return CType(Me.GetParentRow(Me.Ta~dulla^@204~ ations("FK_PurchaseInfo_Supplier")),S~dulla^@204~             End Get
            Set~dulla^@204~     Me.SetParentRow(value, Me.Table.P~dulla^@204~ s("FK_PurchaseInfo_Supplier"))
     ~dulla^@204~ t
        End Property
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Function IsBrandNull() ~dulla^@204~            Return Me.IsNull(Me.tableP~dulla^@204~ randColumn)
        End Function
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Sub SetBrandN~dulla^@204~       Me(Me.tablePurchaseInfo.BrandCo~dulla^@204~ m.Convert.DBNull
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Function IsOr~dulla^@204~  Boolean
            Return Me.IsNul~dulla^@204~ chaseInfo.OriginColumn)
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public S~dulla^@204~ ull()
            Me(Me.tablePurchas~dulla^@204~ olumn) = System.Convert.DBNull
        End Sub
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ tion IsNetWeightNull() As Boolean
  ~dulla^@204~ urn Me.IsNull(Me.tablePurchaseInfo.Ne~dulla^@204~ )
        End Function
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Sub SetNetWeightNull()~dulla^@204~ Me(Me.tablePurchaseInfo.NetWeightColu~dulla^@204~ Convert.DBNull
        End Sub
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Function IsPric~dulla^@204~ olean
            Return Me.IsNull(M~dulla^@204~ seInfo.PriceColumn)
        End Func~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Sub S~dulla^@204~ 
            Me(Me.tablePurchaseInfo~dulla^@204~  = System.Convert.DBNull
        End~dulla^@204~  Class
    
    <System.CodeDom.Com~dulla^@204~ edCodeAttribute("System.Data.Design.T~dulla^@204~ nerator", "2.0.0.0")>  _
    Partial~dulla^@204~  SalesInfoRow
        Inherits Syste~dulla^@204~ w
        
        Private tableSal~dulla^@204~ esInfoDataTable
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ riend Sub New(ByVal rb As System.Data~dulla^@204~ er)
            MyBase.New(rb)
    ~dulla^@204~ bleSalesInfo = CType(Me.Table,SalesIn~dulla^@204~ 
        End Sub
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Property PartNo() As String
 ~dulla^@204~ t
                Return CType(Me(Me~dulla^@204~ fo.PartNoColumn),String)
           ~dulla^@204~          Set
                Me(Me.t~dulla^@204~ .PartNoColumn) = value
            E~dulla^@204~    End Property
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Property Description() As Strin~dulla^@204~   Get
                Return CType(M~dulla^@204~ esInfo.DescriptionColumn),String)
  ~dulla^@204~  Get
            Set
              ~dulla^@204~ SalesInfo.DescriptionColumn) = value~dulla^@204~ End Set
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Property Quantity~dulla^@204~ 
            Get
                Re~dulla^@204~ (Me.tableSalesInfo.QuantityColumn),In~dulla^@204~        End Get
            Set
    ~dulla^@204~ e(Me.tableSalesInfo.QuantityColumn) =~dulla^@204~        End Set
        End Property~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Property U~dulla^@204~  Decimal
            Get
          ~dulla^@204~ CType(Me(Me.tableSalesInfo.UnitPriceC~dulla^@204~ l)
            End Get
            ~dulla^@204~         Me(Me.tableSalesInfo.UnitPric~dulla^@204~ lue
            End Set
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ nt() As Decimal
            Get
   ~dulla^@204~ Return CType(Me(Me.tableSalesInfo.Amo~dulla^@204~ cimal)
            End Get
        ~dulla^@204~             Me(Me.tableSalesInfo.Amou~dulla^@204~ alue
            End Set
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ eOfSale() As Date
            Get
 ~dulla^@204~   Return CType(Me(Me.tableSalesInfo.D~dulla^@204~ mn),Date)
            End Get
     ~dulla^@204~                Me(Me.tableSalesInfo.D~dulla^@204~ mn) = value
            End Set
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ rty CashSalesInvoiceNo() As String
 ~dulla^@204~ t
                Return CType(Me(Me~dulla^@204~ fo.CashSalesInvoiceNoColumn),String)~dulla^@204~ End Get
            Set
           ~dulla^@204~ bleSalesInfo.CashSalesInvoiceNoColumn~dulla^@204~           End Set
        End Proper~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Propert~dulla^@204~ InvoiceNo() As String
            Ge~dulla^@204~       Return CType(Me(Me.tableSalesIn~dulla^@204~ sInvoiceNoColumn),String)
          ~dulla^@204~           Set
                Me(Me.~dulla^@204~ o.CreditSalesInvoiceNoColumn) = value~dulla^@204~  End Set
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Property CashSal~dulla^@204~ shSalesRow
            Get
        ~dulla^@204~ n CType(Me.GetParentRow(Me.Table.Pare~dulla^@204~ FK_SalesInfo_CashSales")),CashSalesRo~dulla^@204~    End Get
            Set
        ~dulla^@204~ tParentRow(value, Me.Table.ParentRela~dulla^@204~ esInfo_CashSales"))
            End ~dulla^@204~ End Property
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic Property CreditSalesRow() As Credi~dulla^@204~           Get
                Return~dulla^@204~ ParentRow(Me.Table.ParentRelations("F~dulla^@204~ reditSales")),CreditSalesRow)
      ~dulla^@204~ 
            Set
                Me~dulla^@204~ (value, Me.Table.ParentRelations("FK_~dulla^@204~ ditSales"))
            End Set
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ rty ProductsRow() As ProductsRow
   ~dulla^@204~ 
                Return CType(Me.GetP~dulla^@204~ able.ParentRelations("FK_SalesInfo_Pr~dulla^@204~ ductsRow)
            End Get
     ~dulla^@204~                Me.SetParentRow(value,~dulla^@204~ entRelations("FK_SalesInfo_Products")~dulla^@204~   End Set
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Property StockC~dulla^@204~ arentByFK_SalesInfo_StockCardDetail()~dulla^@204~ DetailRow
            Get
         ~dulla^@204~  CType(Me.GetParentRow(Me.Table.Paren~dulla^@204~ K_SalesInfo_StockCardDetail")),StockC~dulla^@204~ 
            End Get
            Se~dulla^@204~       Me.SetParentRow(value, Me.Table~dulla^@204~ ons("FK_SalesInfo_StockCardDetail"))~dulla^@204~ End Set
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Property StockCar~dulla^@204~ entByFK_SalesInfo_StockCardDetail1() ~dulla^@204~ etailRow
            Get
          ~dulla^@204~ CType(Me.GetParentRow(Me.Table.Parent~dulla^@204~ _SalesInfo_StockCardDetail1")),StockC~dulla^@204~ 
            End Get
            Se~dulla^@204~       Me.SetParentRow(value, Me.Table~dulla^@204~ ons("FK_SalesInfo_StockCardDetail1"))~dulla^@204~  End Set
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Function GetStoc~dulla^@204~ s StockCardRow()
            Return ~dulla^@204~ GetChildRows(Me.Table.ChildRelations(~dulla^@204~ _SalesInfo")),StockCardRow())
      ~dulla^@204~ n
    End Class
    
    <System.C~dulla^@204~ er.GeneratedCodeAttribute("System.Dat~dulla^@204~ dDataSetGenerator", "2.0.0.0")>  _
 ~dulla^@204~ blic Class StockCardRow
        Inhe~dulla^@204~ ata.DataRow
        
        Privat~dulla^@204~ ard As StockCardDataTable
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Friend Sub New(ByVal rb As S~dulla^@204~ taRowBuilder)
            MyBase.New~dulla^@204~      Me.tableStockCard = CType(Me.Tab~dulla^@204~ ataTable)
        End Sub
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Property StockCardNo~dulla^@204~ 
            Get
                Ret~dulla^@204~ Me.tableStockCard.StockCardNoColumn),~dulla^@204~         End Get
            Set
   ~dulla^@204~ Me(Me.tableStockCard.StockCardNoColum~dulla^@204~            End Set
        End Prope~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Proper~dulla^@204~ s String
            Get
          ~dulla^@204~ CType(Me(Me.tableStockCard.PartNoColu~dulla^@204~             End Get
            Set~dulla^@204~     Me(Me.tableStockCard.PartNoColumn~dulla^@204~           End Set
        End Proper~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Property Description() As String
            Get~dulla^@204~      Return CType(Me(Me.tableStockCar~dulla^@204~ Column),String)
            End Get~dulla^@204~ Set
                Me(Me.tableStock~dulla^@204~ ionColumn) = value
            End S~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Property CostPrice() As Decimal
  ~dulla^@204~ 
                Return CType(Me(Me.~dulla^@204~ d.CostPriceColumn),Decimal)
        ~dulla^@204~             Set
                Me(M~dulla^@204~ ard.CostPriceColumn) = value
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Property SellingPrice() A~dulla^@204~           Get
                Return~dulla^@204~ tableStockCard.SellingPriceColumn),De~dulla^@204~        End Get
            Set
    ~dulla^@204~ e(Me.tableStockCard.SellingPriceColum~dulla^@204~            End Set
        End Prope~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Proper~dulla^@204~ ow() As SalesInfoRow
            Get~dulla^@204~      Return CType(Me.GetParentRow(Me.~dulla^@204~ elations("FK_StockCard_SalesInfo")),S~dulla^@204~ 
            End Get
            Set~dulla^@204~      Me.SetParentRow(value, Me.Table.~dulla^@204~ ns("FK_StockCard_SalesInfo"))
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Function GetStockCardDet~dulla^@204~ StockCardDetailRow()
            Ret~dulla^@204~ ase.GetChildRows(Me.Table.ChildRelati~dulla^@204~ CardDetail_StockCard")),StockCardDeta~dulla^@204~      End Function
    End Class
   ~dulla^@204~ m.CodeDom.Compiler.GeneratedCodeAttri~dulla^@204~ Data.Design.TypedDataSetGenerator", "~dulla^@204~ 
    Partial Public Class StockCardD~dulla^@204~      Inherits System.Data.DataRow
  ~dulla^@204~    Private tableStockCardDetail As St~dulla^@204~ DataTable
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Sub New(ByVal rb As System.Data.DataR~dulla^@204~            MyBase.New(rb)
          ~dulla^@204~ ckCardDetail = CType(Me.Table,StockCa~dulla^@204~ able)
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Property SalesInvoiceNo(~dulla^@204~             Get
                Retu~dulla^@204~ e.tableStockCardDetail.SalesInvoiceNo~dulla^@204~ g)
            End Get
            ~dulla^@204~         Me(Me.tableStockCardDetail.Sa~dulla^@204~ olumn) = value
            End Set
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ operty DateOfSale() As Date
        ~dulla^@204~             Return CType(Me(Me.tableS~dulla^@204~ l.DateOfSaleColumn),Date)
          ~dulla^@204~           Set
                Me(Me.~dulla^@204~ dDetail.DateOfSaleColumn) = value
  ~dulla^@204~  Set
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Property DateRecieve~dulla^@204~             Get
                Try ~dulla^@204~          Return CType(Me(Me.tableStoc~dulla^@204~ ateRecievedColumn),Date)
           ~dulla^@204~ As System.InvalidCastException
     ~dulla^@204~   Throw New System.Data.StrongTypingE~dulla^@204~  value for column 'DateRecieved' in t~dulla^@204~ rdDetail' is DBNull.", e)
          ~dulla^@204~ 
            End Get
            Se~dulla^@204~       Me(Me.tableStockCardDetail.Date~dulla^@204~ n) = value
            End Set
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ty QtyRecieved() As Integer
        ~dulla^@204~             Try 
                   ~dulla^@204~ (Me(Me.tableStockCardDetail.QtyReciev~dulla^@204~ eger)
                Catch e As Sys~dulla^@204~ stException
                    Thro~dulla^@204~ Data.StrongTypingException("The value~dulla^@204~ QtyRecieved' in table 'StockCardDetai~dulla^@204~ ", e)
                End Try
     ~dulla^@204~ t
            Set
                M~dulla^@204~ ckCardDetail.QtyRecievedColumn) = val~dulla^@204~    End Set
        End Property
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public Property QtyIs~dulla^@204~ eger
            Get
              ~dulla^@204~                Return CType(Me(Me.tab~dulla^@204~ tail.QtyIssuedColumn),Integer)
     ~dulla^@204~ tch e As System.InvalidCastException~dulla^@204~         Throw New System.Data.StrongT~dulla^@204~ n("The value for column 'QtyIssued' i~dulla^@204~ kCardDetail' is DBNull.", e)
       ~dulla^@204~ Try
            End Get
           ~dulla^@204~          Me(Me.tableStockCardDetail.Q~dulla^@204~ n) = value
            End Set
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ty QtyBalance() As Integer
         ~dulla^@204~            Try 
                    ~dulla^@204~ Me(Me.tableStockCardDetail.QtyBalance~dulla^@204~ er)
                Catch e As Syste~dulla^@204~ Exception
                    Throw ~dulla^@204~ ta.StrongTypingException("The value f~dulla^@204~ yBalance' in table 'StockCardDetail' ~dulla^@204~ e)
                End Try
        ~dulla^@204~             Set
                Me(M~dulla^@204~ ardDetail.QtyBalanceColumn) = value
~dulla^@204~ nd Set
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Property StockCard~dulla^@204~ g
            Get
                R~dulla^@204~ e(Me.tableStockCardDetail.StockCardNo~dulla^@204~ g)
            End Get
            ~dulla^@204~         Me(Me.tableStockCardDetail.St~dulla^@204~ mn) = value
            End Set
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ rty StockCardRow() As StockCardRow
 ~dulla^@204~ t
                Return CType(Me.Ge~dulla^@204~ .Table.ParentRelations("FK_StockCardD~dulla^@204~ rd")),StockCardRow)
            End ~dulla^@204~     Set
                Me.SetParent~dulla^@204~ .Table.ParentRelations("FK_StockCardD~dulla^@204~ rd"))
            End Set
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ DateRecievedNull() As Boolean
      ~dulla^@204~ Me.IsNull(Me.tableStockCardDetail.Dat~dulla^@204~ mn)
        End Function
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Sub SetDateRecievedNu~dulla^@204~      Me(Me.tableStockCardDetail.DateR~dulla^@204~ ) = System.Convert.DBNull
        En~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Func~dulla^@204~ ievedNull() As Boolean
            R~dulla^@204~ ll(Me.tableStockCardDetail.QtyRecieve~dulla^@204~      End Function
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Sub SetQtyRecievedNull()
   ~dulla^@204~ e.tableStockCardDetail.QtyRecievedCol~dulla^@204~ .Convert.DBNull
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public Function IsQty~dulla^@204~ As Boolean
            Return Me.IsN~dulla^@204~ tockCardDetail.QtyIssuedColumn)
    ~dulla^@204~ ion
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ tQtyIssuedNull()
            Me(Me.t~dulla^@204~ Detail.QtyIssuedColumn) = System.Conv~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Function IsQtyBalanceNull() As B~dulla^@204~        Return Me.IsNull(Me.tableStock~dulla^@204~ yBalanceColumn)
        End Function~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Sub SetQt~dulla^@204~ )
            Me(Me.tableStockCardDe~dulla^@204~ ceColumn) = System.Convert.DBNull
  ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Public Function GetSalesInfoRowsByFK_SalesInf~dulla^@204~ tail() As SalesInfoRow()
           ~dulla^@204~ (MyBase.GetChildRows(Me.Table.ChildRe~dulla^@204~ alesInfo_StockCardDetail")),SalesInfo~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Function GetSalesInfoRowsByFK_S~dulla^@204~ kCardDetail1() As SalesInfoRow()
   ~dulla^@204~ rn CType(MyBase.GetChildRows(Me.Table~dulla^@204~ ns("FK_SalesInfo_StockCardDetail1")),~dulla^@204~ ))
        End Function
    End Cla~dulla^@204~  <System.CodeDom.Compiler.GeneratedCo~dulla^@204~ System.Data.Design.TypedDataSetGenera~dulla^@204~ 0")>  _
    Partial Public Class Sup~dulla^@204~      Inherits System.Data.DataRow
  ~dulla^@204~    Private tableSupplier As SupplierD~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Friend S~dulla^@204~ rb As System.Data.DataRowBuilder)
  ~dulla^@204~ ase.New(rb)
            Me.tableSupp~dulla^@204~ Me.Table,SupplierDataTable)
        ~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Pr~dulla^@204~ erID() As String
            Get
  ~dulla^@204~  Return CType(Me(Me.tableSupplier.Sup~dulla^@204~ ),String)
            End Get
     ~dulla^@204~                Me(Me.tableSupplier.Su~dulla^@204~ n) = value
            End Set
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ty SupplierName() As String
        ~dulla^@204~             Return CType(Me(Me.tableS~dulla^@204~ ierNameColumn),String)
            E~dulla^@204~        Set
                Me(Me.tab~dulla^@204~ pplierNameColumn) = value
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Property Address() As String~dulla^@204~  Get
                Try 
         ~dulla^@204~ turn CType(Me(Me.tableSupplier.Addres~dulla^@204~ ng)
                Catch e As Syste~dulla^@204~ Exception
                    Throw ~dulla^@204~ ta.StrongTypingException("The value f~dulla^@204~ dress' in table 'Supplier' is DBNull.~dulla^@204~           End Try
            End Ge~dulla^@204~   Set
                Me(Me.tableSup~dulla^@204~ Column) = value
            End Set~dulla^@204~ Property
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ roperty City() As String
           ~dulla^@204~          Try 
                    Re~dulla^@204~ (Me.tableSupplier.CityColumn),String)~dulla^@204~      Catch e As System.InvalidCastExc~dulla^@204~                Throw New System.Data.~dulla^@204~ xception("The value for column 'City'~dulla^@204~ pplier' is DBNull.", e)
            ~dulla^@204~             End Get
            Set~dulla^@204~     Me(Me.tableSupplier.CityColumn) =~dulla^@204~        End Set
        End Property~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Property C~dulla^@204~ tring
            Get
             ~dulla^@204~                 Return CType(Me(Me.ta~dulla^@204~ ountryColumn),String)
              ~dulla^@204~ System.InvalidCastException
        ~dulla^@204~ hrow New System.Data.StrongTypingExce~dulla^@204~ lue for column 'Country' in table 'Su~dulla^@204~ Null.", e)
                End Try
~dulla^@204~ nd Get
            Set
            ~dulla^@204~ leSupplier.CountryColumn) = value
  ~dulla^@204~  Set
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Property Phone() As ~dulla^@204~        Get
                Try 
   ~dulla^@204~     Return CType(Me(Me.tableSupplier.~dulla^@204~ String)
                Catch e As S~dulla^@204~ CastException
                    Th~dulla^@204~ m.Data.StrongTypingException("The val~dulla^@204~  'Phone' in table 'Supplier' is DBNul~dulla^@204~             End Try
            End ~dulla^@204~     Set
                Me(Me.tableS~dulla^@204~ Column) = value
            End Set~dulla^@204~ Property
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ roperty Fax() As String
            ~dulla^@204~         Try 
                    Ret~dulla^@204~ Me.tableSupplier.FaxColumn),String)
~dulla^@204~    Catch e As System.InvalidCastExcep~dulla^@204~              Throw New System.Data.St~dulla^@204~ eption("The value for column 'Fax' in~dulla^@204~ ier' is DBNull.", e)
               ~dulla^@204~          End Get
            Set
  ~dulla^@204~  Me(Me.tableSupplier.FaxColumn) = val~dulla^@204~    End Set
        End Property
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public Property Posta~dulla^@204~  String
            Get
           ~dulla^@204~                   Return CType(Me(Me.~dulla^@204~ .PostalAddressColumn),String)
      ~dulla^@204~ ch e As System.InvalidCastException
~dulla^@204~        Throw New System.Data.StrongTy~dulla^@204~ ("The value for column 'PostalAddress~dulla^@204~ upplier' is DBNull.", e)
           ~dulla^@204~ 
            End Get
            Set~dulla^@204~      Me(Me.tableSupplier.PostalAddres~dulla^@204~ lue
            End Set
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ ite() As String
            Get
   ~dulla^@204~ Try 
                    Return CTyp~dulla^@204~ Supplier.WebsiteColumn),String)
    ~dulla^@204~ atch e As System.InvalidCastException~dulla^@204~          Throw New System.Data.Strong~dulla^@204~ on("The value for column 'Website' in~dulla^@204~ ier' is DBNull.", e)
               ~dulla^@204~          End Get
            Set
  ~dulla^@204~  Me(Me.tableSupplier.WebsiteColumn) =~dulla^@204~        End Set
        End Property~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Property E~dulla^@204~ ing
            Get
               ~dulla^@204~               Return CType(Me(Me.tabl~dulla^@204~ ilColumn),String)
                Ca~dulla^@204~ em.InvalidCastException
            ~dulla^@204~  New System.Data.StrongTypingExceptio~dulla^@204~ for column 'Email' in table 'Supplier~dulla^@204~ , e)
                End Try
      ~dulla^@204~ 
            Set
                Me~dulla^@204~ lier.EmailColumn) = value
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Function IsAddressNull() As ~dulla^@204~         Return Me.IsNull(Me.tableSupp~dulla^@204~ olumn)
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Sub SetAddressNull~dulla^@204~    Me(Me.tableSupplier.AddressColumn)~dulla^@204~ vert.DBNull
        End Sub
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Function IsCityNul~dulla^@204~ n
            Return Me.IsNull(Me.ta~dulla^@204~ ityColumn)
        End Function
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public Sub SetCityNul~dulla^@204~     Me(Me.tableSupplier.CityColumn) =~dulla^@204~ rt.DBNull
        End Sub
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Function IsCountryNu~dulla^@204~ an
            Return Me.IsNull(Me.t~dulla^@204~ CountryColumn)
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Sub SetCou~dulla^@204~            Me(Me.tableSupplier.Countr~dulla^@204~ stem.Convert.DBNull
        End Sub~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Function I~dulla^@204~ As Boolean
            Return Me.IsN~dulla^@204~ upplier.PhoneColumn)
        End Fun~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Sub ~dulla^@204~ )
            Me(Me.tableSupplier.Ph~dulla^@204~ System.Convert.DBNull
        End Su~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Function IsFaxNull() As Boolean
            Retur~dulla^@204~ e.tableSupplier.FaxColumn)
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ ull()
            Me(Me.tableSupplie~dulla^@204~ = System.Convert.DBNull
        End ~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Functi~dulla^@204~ dressNull() As Boolean
            R~dulla^@204~ ll(Me.tableSupplier.PostalAddressColu~dulla^@204~ End Function
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic Sub SetPostalAddressNull()
      ~dulla^@204~ ableSupplier.PostalAddressColumn) = S~dulla^@204~ .DBNull
        End Sub
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public Function IsWebsiteNull~dulla^@204~ 
            Return Me.IsNull(Me.tab~dulla^@204~ bsiteColumn)
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public Sub SetWebsi~dulla^@204~          Me(Me.tableSupplier.WebsiteC~dulla^@204~ em.Convert.DBNull
        End Sub
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public Function IsE~dulla^@204~  Boolean
            Return Me.IsNul~dulla^@204~ plier.EmailColumn)
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Sub Se~dulla^@204~ 
            Me(Me.tableSupplier.Emai~dulla^@204~ stem.Convert.DBNull
        End Sub~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Function G~dulla^@204~ s() As PurchaseRow()
            Ret~dulla^@204~ ase.GetChildRows(Me.Table.ChildRelati~dulla^@204~ ase_Supplier")),PurchaseRow())
     ~dulla^@204~ on
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ n GetPurchaseInfoRows() As PurchaseIn~dulla^@204~         Return CType(MyBase.GetChildR~dulla^@204~ ChildRelations("FK_PurchaseInfo_Suppl~dulla^@204~ seInfoRow())
        End Function
 ~dulla^@204~ 
    
    <System.CodeDom.Compiler.G~dulla^@204~ ttribute("System.Data.Design.TypedDat~dulla^@204~ ", "2.0.0.0")>  _
    Partial Public~dulla^@204~ ow
        Inherits System.Data.Data~dulla^@204~ 
        Private tableUsers As Users~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Friend ~dulla^@204~  rb As System.Data.DataRowBuilder)
 ~dulla^@204~ Base.New(rb)
            Me.tableUse~dulla^@204~ .Table,UsersDataTable)
        End S~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Propert~dulla^@204~ As String
            Get
         ~dulla^@204~  CType(Me(Me.tableUsers.UserNameColum~dulla^@204~            End Get
            Set
~dulla^@204~    Me(Me.tableUsers.UserNameColumn) =~dulla^@204~        End Set
        End Property~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Property P~dulla^@204~ String
            Get
            ~dulla^@204~ ype(Me(Me.tableUsers.PasswordColumn),~dulla^@204~         End Get
            Set
   ~dulla^@204~ Me(Me.tableUsers.PasswordColumn) = va~dulla^@204~     End Set
        End Property
  ~dulla^@204~     
    <System.CodeDom.Compiler.Ge~dulla^@204~ tribute("System.Data.Design.TypedData~dulla^@204~ , "2.0.0.0")>  _
    Public Class Bl~dulla^@204~ angeEvent
        Inherits System.Ev~dulla^@204~     
        Private eventRow As Bla~dulla^@204~        
        Private eventAction ~dulla^@204~ a.DataRowAction
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Sub New(ByVal row As BlankTable~dulla^@204~ tion As System.Data.DataRowAction)
 ~dulla^@204~ Base.New
            Me.eventRow = r~dulla^@204~    Me.eventAction = action
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Rea~dulla^@204~ y Row() As BlankTableRow
           ~dulla^@204~          Return Me.eventRow
        ~dulla^@204~         End Property
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public ReadOnly Property Action()~dulla^@204~ ta.DataRowAction
            Get
  ~dulla^@204~  Return Me.eventAction
            E~dulla^@204~    End Property
    End Class
    ~dulla^@204~ CodeDom.Compiler.GeneratedCodeAttribu~dulla^@204~ ta.Design.TypedDataSetGenerator", "2.~dulla^@204~     Public Class CashSalesRowChangeEv~dulla^@204~ Inherits System.EventArgs
        
~dulla^@204~ te eventRow As CashSalesRow
        ~dulla^@204~ vate eventAction As System.Data.DataR~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public S~dulla^@204~ row As CashSalesRow, ByVal action As ~dulla^@204~ ataRowAction)
            MyBase.New~dulla^@204~  Me.eventRow = row
            Me.ev~dulla^@204~ ction
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public ReadOnly Property Row() ~dulla^@204~ ow
            Get
                ~dulla^@204~ ntRow
            End Get
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ operty Action() As System.Data.DataRo~dulla^@204~         Get
                Return M~dulla^@204~ 
            End Get
        End Pr~dulla^@204~ nd Class
    
    <System.CodeDom.C~dulla^@204~ atedCodeAttribute("System.Data.Design~dulla^@204~ Generator", "2.0.0.0")>  _
    Publi~dulla^@204~ tSalesRowChangeEvent
        Inherit~dulla^@204~ tArgs
        
        Private even~dulla^@204~ tSalesRow
        
        Private ~dulla^@204~ s System.Data.DataRowAction
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Sub New(ByVal row A~dulla^@204~ Row, ByVal action As System.Data.Data~dulla^@204~            MyBase.New
            Me~dulla^@204~ ow
            Me.eventAction = acti~dulla^@204~ nd Sub
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ dOnly Property Row() As CreditSalesRo~dulla^@204~   Get
                Return Me.even~dulla^@204~      End Get
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public ReadOnly Pro~dulla^@204~ ) As System.Data.DataRowAction
     ~dulla^@204~                Return Me.eventAction~dulla^@204~ End Get
        End Property
    En~dulla^@204~ 
    <System.CodeDom.Compiler.Genera~dulla^@204~ ute("System.Data.Design.TypedDataSetG~dulla^@204~ .0.0.0")>  _
    Public Class Custom~dulla^@204~ vent
        Inherits System.EventAr~dulla^@204~ 
        Private eventRow As Customer~dulla^@204~  
        Private eventAction As Sys~dulla^@204~ RowAction
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Sub New(ByVal row As CustomersRow, By~dulla^@204~  System.Data.DataRowAction)
        ~dulla^@204~ w
            Me.eventRow = row
   ~dulla^@204~ ventAction = action
        End Sub~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public ReadOnly P~dulla^@204~  As CustomersRow
            Get
  ~dulla^@204~  Return Me.eventRow
            End ~dulla^@204~ End Property
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic ReadOnly Property Action() As Syst~dulla^@204~ owAction
            Get
          ~dulla^@204~ Me.eventAction
            End Get
~dulla^@204~ roperty
    End Class
    
    <Sy~dulla^@204~ Compiler.GeneratedCodeAttribute("Syst~dulla^@204~ n.TypedDataSetGenerator", "2.0.0.0")>~dulla^@204~ ic Class OrderRowChangeEvent
       ~dulla^@204~ tem.EventArgs
        
        Priv~dulla^@204~ As OrderRow
        
        Privat~dulla^@204~  As System.Data.DataRowAction
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Sub New(ByVal row~dulla^@204~  ByVal action As System.Data.DataRowA~dulla^@204~        MyBase.New
            Me.eve~dulla^@204~             Me.eventAction = action
        End Sub
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  ReadOnly Property Row() As OrderRow~dulla^@204~ Get
                Return Me.eventR~dulla^@204~    End Get
        End Property
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public ReadOnly Prope~dulla^@204~ As System.Data.DataRowAction
       ~dulla^@204~              Return Me.eventAction
 ~dulla^@204~ d Get
        End Property
    End ~dulla^@204~     <System.CodeDom.Compiler.Generate~dulla^@204~ e("System.Data.Design.TypedDataSetGen~dulla^@204~ .0.0")>  _
    Public Class Products~dulla^@204~ t
        Inherits System.EventArgs~dulla^@204~       Private eventRow As ProductsRow~dulla^@204~        Private eventAction As System.~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ New(ByVal row As ProductsRow, ByVal a~dulla^@204~ em.Data.DataRowAction)
            M~dulla^@204~           Me.eventRow = row
        ~dulla^@204~ ction = action
        End Sub
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public ReadOnly Proper~dulla^@204~ roductsRow
            Get
        ~dulla^@204~ n Me.eventRow
            End Get
 ~dulla^@204~ operty
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ dOnly Property Action() As System.Dat~dulla^@204~ on
            Get
                ~dulla^@204~ ntAction
            End Get
      ~dulla^@204~ y
    End Class
    
    <System.C~dulla^@204~ er.GeneratedCodeAttribute("System.Dat~dulla^@204~ dDataSetGenerator", "2.0.0.0")>  _
 ~dulla^@204~ ss PurchaseRowChangeEvent
        In~dulla^@204~ .EventArgs
        
        Private~dulla^@204~ PurchaseRow
        
        Privat~dulla^@204~  As System.Data.DataRowAction
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Sub New(ByVal row~dulla^@204~ ow, ByVal action As System.Data.DataR~dulla^@204~           MyBase.New
            Me.~dulla^@204~ w
            Me.eventAction = actio~dulla^@204~ d Sub
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ Only Property Row() As PurchaseRow
 ~dulla^@204~ t
                Return Me.eventRow~dulla^@204~  End Get
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public ReadOnly Propert~dulla^@204~  System.Data.DataRowAction
         ~dulla^@204~            Return Me.eventAction
   ~dulla^@204~ Get
        End Property
    End Cl~dulla^@204~   <System.CodeDom.Compiler.GeneratedC~dulla^@204~ "System.Data.Design.TypedDataSetGener~dulla^@204~ .0")>  _
    Public Class PurchaseIn~dulla^@204~ ent
        Inherits System.EventArg~dulla^@204~         Private eventRow As PurchaseI~dulla^@204~    
        Private eventAction As S~dulla^@204~ taRowAction
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Sub New(ByVal row As PurchaseInfoRo~dulla^@204~ on As System.Data.DataRowAction)
   ~dulla^@204~ se.New
            Me.eventRow = row~dulla^@204~  Me.eventAction = action
        End~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public ReadO~dulla^@204~ Row() As PurchaseInfoRow
           ~dulla^@204~          Return Me.eventRow
        ~dulla^@204~         End Property
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public ReadOnly Property Action()~dulla^@204~ ta.DataRowAction
            Get
  ~dulla^@204~  Return Me.eventAction
            E~dulla^@204~    End Property
    End Class
    ~dulla^@204~ CodeDom.Compiler.GeneratedCodeAttribu~dulla^@204~ ta.Design.TypedDataSetGenerator", "2.~dulla^@204~     Public Class SalesInfoRowChangeEv~dulla^@204~ Inherits System.EventArgs
        
~dulla^@204~ te eventRow As SalesInfoRow
        ~dulla^@204~ vate eventAction As System.Data.DataR~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public S~dulla^@204~ row As SalesInfoRow, ByVal action As ~dulla^@204~ ataRowAction)
            MyBase.New~dulla^@204~  Me.eventRow = row
            Me.ev~dulla^@204~ ction
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public ReadOnly Property Row() ~dulla^@204~ ow
            Get
                ~dulla^@204~ ntRow
            End Get
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ operty Action() As System.Data.DataRo~dulla^@204~         Get
                Return M~dulla^@204~ 
            End Get
        End Pr~dulla^@204~ nd Class
    
    <System.CodeDom.C~dulla^@204~ atedCodeAttribute("System.Data.Design~dulla^@204~ Generator", "2.0.0.0")>  _
    Publi~dulla^@204~ CardRowChangeEvent
        Inherits ~dulla^@204~ rgs
        
        Private eventR~dulla^@204~ rdRow
        
        Private even~dulla^@204~ stem.Data.DataRowAction
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Sub New(ByVal row As St~dulla^@204~ yVal action As System.Data.DataRowAct~dulla^@204~      MyBase.New
            Me.event~dulla^@204~           Me.eventAction = action
  ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ Property Row() As StockCardRow
     ~dulla^@204~                Return Me.eventRow
  ~dulla^@204~  Get
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public ReadOnly Property Ac~dulla^@204~ tem.Data.DataRowAction
            G~dulla^@204~        Return Me.eventAction
       ~dulla^@204~ 
        End Property
    End Class~dulla^@204~ ystem.CodeDom.Compiler.GeneratedCodeA~dulla^@204~ tem.Data.Design.TypedDataSetGenerator~dulla^@204~ >  _
    Public Class StockCardDetai~dulla^@204~ nt
        Inherits System.EventArgs~dulla^@204~        Private eventRow As StockCardD~dulla^@204~      
        Private eventAction As~dulla^@204~ DataRowAction
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Sub New(ByVal row As StockCardDet~dulla^@204~  action As System.Data.DataRowAction)~dulla^@204~  MyBase.New
            Me.eventRow ~dulla^@204~       Me.eventAction = action
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ erty Row() As StockCardDetailRow
   ~dulla^@204~ 
                Return Me.eventRow
~dulla^@204~ nd Get
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public ReadOnly Property ~dulla^@204~ ystem.Data.DataRowAction
           ~dulla^@204~          Return Me.eventAction
     ~dulla^@204~ t
        End Property
    End Clas~dulla^@204~ <System.CodeDom.Compiler.GeneratedCod~dulla^@204~ ystem.Data.Design.TypedDataSetGenerat~dulla^@204~ ")>  _
    Public Class SupplierRowC~dulla^@204~        Inherits System.EventArgs
   ~dulla^@204~   Private eventRow As SupplierRow
  ~dulla^@204~    Private eventAction As System.Data~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~ ByVal row As SupplierRow, ByVal actio~dulla^@204~ ata.DataRowAction)
            MyBas~dulla^@204~       Me.eventRow = row
            ~dulla^@204~ n = action
        End Sub
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public ReadOnly Property R~dulla^@204~ ierRow
            Get
            ~dulla^@204~ .eventRow
            End Get
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y Property Action() As System.Data.Da~dulla^@204~             Get
                Retu~dulla^@204~ tion
            End Get
        En~dulla^@204~    End Class
    
    <System.CodeD~dulla^@204~ eneratedCodeAttribute("System.Data.De~dulla^@204~ aSetGenerator", "2.0.0.0")>  _
    Public Class UsersRowChangeEvent
        I~dulla^@204~ m.EventArgs
        
        Privat~dulla^@204~  UsersRow
        
        Private ~dulla^@204~ s System.Data.DataRowAction
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Sub New(ByVal row A~dulla^@204~ yVal action As System.Data.DataRowAct~dulla^@204~      MyBase.New
            Me.event~dulla^@204~           Me.eventAction = action
  ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ Property Row() As UsersRow
         ~dulla^@204~            Return Me.eventRow
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public ReadOnly Property Action~dulla^@204~ Data.DataRowAction
            Get
~dulla^@204~    Return Me.eventAction
           ~dulla^@204~      End Property
    End Class
End~dulla^@204~ espace InventoryControlSystemDataSet3~dulla^@204~ 
    
    <System.CodeDom.Compiler.~dulla^@204~ Attribute("System.Data.Design.TypedDa~dulla^@204~ r", "2.0.0.0"),  _
     System.Compo~dulla^@204~ ignerCategoryAttribute("code"),  _
 ~dulla^@204~ mponentModel.ToolboxItem(true),  _
 ~dulla^@204~ mponentModel.DataObjectAttribute(true~dulla^@204~ ystem.ComponentModel.DesignerAttribut~dulla^@204~ VSDesigner.DataSource.Design.TableAda~dulla^@204~  Microsoft.VSDesigner"& _ 
        "~dulla^@204~ .0.0, Culture=neutral, PublicKeyToken~dulla^@204~ 0a3a"),  _
     System.ComponentMode~dulla^@204~ KeywordAttribute("vs.data.TableAdapte~dulla^@204~ Partial Public Class BlankTableTableA~dulla^@204~    Inherits System.ComponentModel.Com~dulla^@204~    
        Private WithEvents _adap~dulla^@204~ .Data.SqlClient.SqlDataAdapter
     ~dulla^@204~ Private _connection As System.Data.Sq~dulla^@204~ nnection
        
        Private _~dulla^@204~ tion() As System.Data.SqlClient.SqlCo~dulla^@204~   
        Private _clearBeforeFill ~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~            MyBase.New
            Me~dulla^@204~ ill = true
        End Sub
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Private ReadOnly Property ~dulla^@204~ System.Data.SqlClient.SqlDataAdapter~dulla^@204~ Get
                If (Me._adapter ~dulla^@204~ hen
                    Me.InitAdapt~dulla^@204~        End If
                Return~dulla^@204~ 
            End Get
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Friend Prop~dulla^@204~ on() As System.Data.SqlClient.SqlConn~dulla^@204~        Get
                If (Me._c~dulla^@204~ Nothing) Then
                    Me~dulla^@204~ on
                End If
         ~dulla^@204~  Me._connection
            End Get~dulla^@204~ Set
                Me._connection =~dulla^@204~            If (Not (Me.Adapter.Insert~dulla^@204~ othing) Then
                    Me.~dulla^@204~ tCommand.Connection = value
        ~dulla^@204~ f
                If (Not (Me.Adapte~dulla^@204~ nd) Is Nothing) Then
               ~dulla^@204~ er.DeleteCommand.Connection = value
~dulla^@204~    End If
                If (Not (M~dulla^@204~ ateCommand) Is Nothing) Then
       ~dulla^@204~ Me.Adapter.UpdateCommand.Connection =~dulla^@204~            End If
                Di~dulla^@204~ r = 0
                Do While (i < ~dulla^@204~ lection.Length)
                    ~dulla^@204~ ommandCollection(i)) Is Nothing) Then~dulla^@204~              CType(Me.CommandCollecti~dulla^@204~ Data.SqlClient.SqlCommand).Connection~dulla^@204~                  End If
            ~dulla^@204~ i + 1)
                Loop
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Protected ReadOnly Property Comm~dulla^@204~ () As System.Data.SqlClient.SqlComman~dulla^@204~     Get
                If (Me._comm~dulla^@204~  Is Nothing) Then
                  ~dulla^@204~ andCollection
                End If~dulla^@204~      Return Me._commandCollection
  ~dulla^@204~  Get
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Property ClearBefore~dulla^@204~ lean
            Get
              ~dulla^@204~ clearBeforeFill
            End Get~dulla^@204~ Set
                Me._clearBeforeF~dulla^@204~             End Set
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Private Sub ~dulla^@204~ 
            Me._adapter = New Syste~dulla^@204~ ent.SqlDataAdapter
            Dim t~dulla^@204~ s System.Data.Common.DataTableMapping~dulla^@204~ .Data.Common.DataTableMapping
      ~dulla^@204~ pping.SourceTable = "Table"
        ~dulla^@204~ ing.DataSetTable = "BlankTable"
    ~dulla^@204~ Mapping.ColumnMappings.Add("PartNo", ~dulla^@204~           tableMapping.ColumnMappings~dulla^@204~ tion", "Description")
            ta~dulla^@204~ lumnMappings.Add("ReorderLevel", "Reo~dulla^@204~             tableMapping.ColumnMappin~dulla^@204~ No", "ShelfNo")
            Me._adap~dulla^@204~ ings.Add(tableMapping)
            M~dulla^@204~ sertCommand = New System.Data.SqlClie~dulla^@204~ 
            Me._adapter.InsertComma~dulla^@204~  = Me.Connection
            Me._ada~dulla^@204~ mmand.CommandText = "INSERT INTO [dbo~dulla^@204~ ] ([PartNo], [Description], [ReorderL~dulla^@204~ No"& _ 
                "]) VALUES (~dulla^@204~ cription, @ReorderLevel, @ShelfNo)"
~dulla^@204~ e._adapter.InsertCommand.CommandType ~dulla^@204~ .CommandType.Text
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@PartNo", System.Data.Sql~dulla^@204~ ar, 0, System.Data.ParameterDirection~dulla^@204~  "PartNo", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .InsertCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@Description", Sy~dulla^@204~ DbType.[Char], 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "Description", System.Dat~dulla^@204~ ion.Current, false, Nothing, "", "", ~dulla^@204~      Me._adapter.InsertCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ , System.Data.SqlDbType.Int, 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "ReorderLev~dulla^@204~ ata.DataRowVersion.Current, false, No~dulla^@204~ , ""))
            Me._adapter.Inser~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@ShelfNo", System.Data.SqlDbType.NVa~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ , System.Data.DataRowVersion.Current,~dulla^@204~ ng, "", "", ""))
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Private Sub InitConn~dulla^@204~          Me._connection = New System.~dulla^@204~ t.SqlConnection
            Me._conn~dulla^@204~ tionString = Global.InventoryControlS~dulla^@204~ ttings.Default.PurchaseInfoConnection~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ InitCommandCollection()
            ~dulla^@204~ llection = New System.Data.SqlClient.~dulla^@204~  {}
            Me._commandCollectio~dulla^@204~ stem.Data.SqlClient.SqlCommand
     ~dulla^@204~ mmandCollection(0).Connection = Me.Co~dulla^@204~          Me._commandCollection(0).Com~dulla^@204~ ELECT PartNo, Description, ReorderLev~dulla^@204~ ROM dbo.BlankTable"
            Me._~dulla^@204~ tion(0).CommandType = System.Data.Com~dulla^@204~ 
        End Sub
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~   System.ComponentModel.Design.HelpKe~dulla^@204~ e("vs.data.TableAdapter"),  _
      ~dulla^@204~ ponentModel.DataObjectMethodAttribute~dulla^@204~ nentModel.DataObjectMethodType.Fill, ~dulla^@204~       Public Overloads Overridable Fu~dulla^@204~ yVal dataTable As InventoryControlSys~dulla^@204~ lankTableDataTable) As Integer
     ~dulla^@204~ pter.SelectCommand = Me.CommandCollec~dulla^@204~         If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
 ~dulla^@204~ d If
            Dim returnValue As ~dulla^@204~ Adapter.Fill(dataTable)
            ~dulla^@204~ Value
        End Function
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
         System.ComponentModel.Des~dulla^@204~ rdAttribute("vs.data.TableAdapter"), ~dulla^@204~ System.ComponentModel.DataObjectMetho~dulla^@204~ stem.ComponentModel.DataObjectMethodT~dulla^@204~  true)>  _
        Public Overloads ~dulla^@204~ unction GetData() As InventoryControl~dulla^@204~ 3.BlankTableDataTable
            Me~dulla^@204~ ctCommand = Me.CommandCollection(0)
~dulla^@204~ im dataTable As InventoryControlSyste~dulla^@204~ nkTableDataTable = New InventoryContr~dulla^@204~ et3.BlankTableDataTable
            ~dulla^@204~ ll(dataTable)
            Return dat~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute(), ~dulla^@204~ System.ComponentModel.Design.HelpKeyw~dulla^@204~ "vs.data.TableAdapter")>  _
        ~dulla^@204~ ads Overridable Function Update(ByVal~dulla^@204~  InventoryControlSystemDataSet3.Blank~dulla^@204~ e) As Integer
            Return Me.~dulla^@204~ e(dataTable)
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te(),  _
         System.ComponentMo~dulla^@204~ lpKeywordAttribute("vs.data.TableAdap~dulla^@204~       Public Overloads Overridable Fu~dulla^@204~ (ByVal dataSet As InventoryControlSys~dulla^@204~ As Integer
            Return Me.Ada~dulla^@204~ ataSet, "BlankTable")
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute(),  _
         System.Co~dulla^@204~ Design.HelpKeywordAttribute("vs.data.~dulla^@204~ )>  _
        Public Overloads Overr~dulla^@204~ on Update(ByVal dataRow As System.Dat~dulla^@204~  Integer
            Return Me.Adapt~dulla^@204~  System.Data.DataRow() {dataRow})
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute(),  _
      ~dulla^@204~ ponentModel.Design.HelpKeywordAttribu~dulla^@204~ ableAdapter")>  _
        Public Ove~dulla^@204~ dable Function Update(ByVal dataRows(~dulla^@204~ ata.DataRow) As Integer
            ~dulla^@204~ pter.Update(dataRows)
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute(),  _
         System.Co~dulla^@204~ Design.HelpKeywordAttribute("vs.data.~dulla^@204~ ),  _
         System.ComponentModel~dulla^@204~ thodAttribute(System.ComponentModel.D~dulla^@204~ odType.Insert, true)>  _
        Pub~dulla^@204~  Overridable Function Insert(ByVal Pa~dulla^@204~ g, ByVal Description As String, ByVal~dulla^@204~  As System.Nullable(Of Integer), ByVa~dulla^@204~ String) As Integer
            If (P~dulla^@204~ ing) Then
                Me.Adapter~dulla^@204~ d.Parameters(0).Value = System.DBNull~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(0).Value = CType(PartN~dulla^@204~           End If
            If (Des~dulla^@204~ othing) Then
                Me.Adap~dulla^@204~ mand.Parameters(1).Value = System.DBN~dulla^@204~           Else
                Me.Ad~dulla^@204~ ommand.Parameters(1).Value = CType(De~dulla^@204~ ing)
            End If
           ~dulla^@204~ evel.HasValue = true) Then
         ~dulla^@204~ pter.InsertCommand.Parameters(2).Valu~dulla^@204~ rderLevel.Value,Integer)
           ~dulla^@204~           Me.Adapter.InsertCommand.Pa~dulla^@204~ alue = System.DBNull.Value
         ~dulla^@204~           If (ShelfNo Is Nothing) The~dulla^@204~       Me.Adapter.InsertCommand.Parame~dulla^@204~  = System.DBNull.Value
            E~dulla^@204~         Me.Adapter.InsertCommand.Para~dulla^@204~ ue = CType(ShelfNo,String)
         ~dulla^@204~           Dim previousConnectionState~dulla^@204~ ta.ConnectionState = Me.Adapter.Inser~dulla^@204~ ection.State
            If ((Me.Ada~dulla^@204~ mmand.Connection.State And System.Dat~dulla^@204~ tate.Open)  _
                      ~dulla^@204~ ata.ConnectionState.Open) Then
     ~dulla^@204~ .Adapter.InsertCommand.Connection.Ope~dulla^@204~   End If
            Try 
         ~dulla^@204~ turnValue As Integer = Me.Adapter.Ins~dulla^@204~ ecuteNonQuery
                Return~dulla^@204~ 
            Finally
               ~dulla^@204~ ConnectionState = System.Data.Connect~dulla^@204~ ed) Then
                    Me.Adap~dulla^@204~ mand.Connection.Close
              ~dulla^@204~          End Try
        End Functio~dulla^@204~ ass
    
    <System.CodeDom.Compil~dulla^@204~ odeAttribute("System.Data.Design.Type~dulla^@204~ ator", "2.0.0.0"),  _
     System.Co~dulla^@204~ DesignerCategoryAttribute("code"),  _~dulla^@204~ .ComponentModel.ToolboxItem(true),  _~dulla^@204~ .ComponentModel.DataObjectAttribute(t~dulla^@204~   System.ComponentModel.DesignerAttri~dulla^@204~ ft.VSDesigner.DataSource.Design.Table~dulla^@204~ er, Microsoft.VSDesigner"& _ 
      ~dulla^@204~ 8.0.0.0, Culture=neutral, PublicKeyTo~dulla^@204~ 1d50a3a"),  _
     System.ComponentM~dulla^@204~ elpKeywordAttribute("vs.data.TableAda~dulla^@204~    Partial Public Class CashSalesTabl~dulla^@204~      Inherits System.ComponentModel.C~dulla^@204~      
        Private WithEvents _ad~dulla^@204~ em.Data.SqlClient.SqlDataAdapter
   ~dulla^@204~   Private _connection As System.Data.~dulla^@204~ Connection
        
        Private~dulla^@204~ ection() As System.Data.SqlClient.Sql~dulla^@204~     
        Private _clearBeforeFil~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ 
            MyBase.New
            ~dulla^@204~ eFill = true
        End Sub
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Private ReadOnly Propert~dulla^@204~ s System.Data.SqlClient.SqlDataAdapte~dulla^@204~   Get
                If (Me._adapte~dulla^@204~  Then
                    Me.InitAda~dulla^@204~          End If
                Retu~dulla^@204~ r
            End Get
        End P~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Friend Pr~dulla^@204~ tion() As System.Data.SqlClient.SqlCo~dulla^@204~          Get
                If (Me.~dulla^@204~ s Nothing) Then
                    ~dulla^@204~ tion
                End If
       ~dulla^@204~ rn Me._connection
            End Ge~dulla^@204~   Set
                Me._connection~dulla^@204~              If (Not (Me.Adapter.Inse~dulla^@204~  Nothing) Then
                    M~dulla^@204~ ertCommand.Connection = value
      ~dulla^@204~  If
                If (Not (Me.Adap~dulla^@204~ mand) Is Nothing) Then
             ~dulla^@204~ pter.DeleteCommand.Connection = value~dulla^@204~      End If
                If (Not ~dulla^@204~ pdateCommand) Is Nothing) Then
     ~dulla^@204~   Me.Adapter.UpdateCommand.Connection~dulla^@204~              End If
                ~dulla^@204~ ger = 0
                Do While (i ~dulla^@204~ ollection.Length)
                  ~dulla^@204~ .CommandCollection(i)) Is Nothing) Th~dulla^@204~                CType(Me.CommandCollec~dulla^@204~ m.Data.SqlClient.SqlCommand).Connecti~dulla^@204~                    End If
          ~dulla^@204~  (i + 1)
                Loop
     ~dulla^@204~ t
        End Property
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Protected ReadOnly Property Co~dulla^@204~ on() As System.Data.SqlClient.SqlComm~dulla^@204~       Get
                If (Me._co~dulla^@204~ on Is Nothing) Then
                ~dulla^@204~ mmandCollection
                End ~dulla^@204~        Return Me._commandCollection
~dulla^@204~ nd Get
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Property ClearBefo~dulla^@204~ oolean
            Get
            ~dulla^@204~ ._clearBeforeFill
            End Ge~dulla^@204~   Set
                Me._clearBefor~dulla^@204~ 
            End Set
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter =~dulla^@204~ ata.SqlClient.SqlDataAdapter
       ~dulla^@204~ eMapping As System.Data.Common.DataTa~dulla^@204~ New System.Data.Common.DataTableMappi~dulla^@204~    tableMapping.SourceTable = "Table"~dulla^@204~  tableMapping.DataSetTable = "CashSal~dulla^@204~     tableMapping.ColumnMappings.Add("~dulla^@204~ iceNo", "CashSalesInvoiceNo")
      ~dulla^@204~ pping.ColumnMappings.Add("Date", "Dat~dulla^@204~     tableMapping.ColumnMappings.Add("~dulla^@204~  "TotalAmount")
            tableMap~dulla^@204~ ppings.Add("VAT", "VAT")
           ~dulla^@204~ .ColumnMappings.Add("GrandTotal", "Gr~dulla^@204~            tableMapping.ColumnMapping~dulla^@204~ nWords", "TotalInWords")
           ~dulla^@204~ .ColumnMappings.Add("CustomerName", "~dulla^@204~ )
            Me._adapter.TableMappi~dulla^@204~ Mapping)
            Me._adapter.Del~dulla^@204~ New System.Data.SqlClient.SqlCommand~dulla^@204~ Me._adapter.DeleteCommand.Connection ~dulla^@204~ on
            Me._adapter.DeleteCom~dulla^@204~ ext = "DELETE FROM [dbo].[CashSales] ~dulla^@204~ SalesInvoiceNo] = @Original_CashSales~dulla^@204~            "nvoiceNo) AND ([Date] = @~dulla^@204~ ) AND ([TotalAmount] = @Original_Tota~dulla^@204~                "nt) AND ([VAT] = @Ori~dulla^@204~ D ([GrandTotal] = @Original_GrandTota~dulla^@204~  
                "TotalInWords] = @~dulla^@204~ lInWords) AND ([CustomerName] = @Orig~dulla^@204~ "& _ 
                "Name))"
    ~dulla^@204~ dapter.DeleteCommand.CommandType = Sy~dulla^@204~ mandType.Text
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Original_CashSalesInvoiceNo"~dulla^@204~ .SqlDbType.NVarChar, 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "CashSalesInvoiceNo~dulla^@204~ a.DataRowVersion.Original, false, Not~dulla^@204~  ""))
            Me._adapter.Delete~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @Original_Date", System.Data.SqlDbTyp~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ e", System.Data.DataRowVersion.Origin~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@Original_TotalAmount",~dulla^@204~ SqlDbType.Money, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "TotalAmount", System.D~dulla^@204~ rsion.Original, false, Nothing, "", "~dulla^@204~         Me._adapter.DeleteCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ AT", System.Data.SqlDbType.Float, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "VAT",~dulla^@204~ DataRowVersion.Original, false, Nothi~dulla^@204~ "))
            Me._adapter.DeleteCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ riginal_GrandTotal", System.Data.SqlD~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ andTotal", System.Data.DataRowVersion~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.DeleteCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@Original_TotalI~dulla^@204~ em.Data.SqlDbType.[Char], 0, System.D~dulla^@204~ Direction.Input, 0, 0, "TotalInWords"~dulla^@204~ .DataRowVersion.Original, false, Noth~dulla^@204~ ""))
            Me._adapter.DeleteC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ Original_CustomerName", System.Data.S~dulla^@204~ r], 0, System.Data.ParameterDirection~dulla^@204~  "CustomerName", System.Data.DataRowV~dulla^@204~ al, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.InsertCommand = New System.Da~dulla^@204~ SqlCommand
            Me._adapter.I~dulla^@204~ Connection = Me.Connection
         ~dulla^@204~ r.InsertCommand.CommandText = "INSERT~dulla^@204~ CashSales] ([CashSalesInvoiceNo], [Da~dulla^@204~ ount], [VAT]"& _ 
                ",~dulla^@204~ , [TotalInWords], [CustomerName]) VAL~dulla^@204~ esInvoiceNo, @Da"& _ 
              ~dulla^@204~ Amount, @VAT, @GrandTotal, @TotalInWo~dulla^@204~ rName);"&Global.Microsoft.VisualBasic~dulla^@204~ bal.Microsoft.VisualBasic.ChrW(10)&"S~dulla^@204~ _ 
                "SalesInvoiceNo, ~dulla^@204~ ount, VAT, GrandTotal, TotalInWords, ~dulla^@204~ F"& _ 
                "ROM CashSale~dulla^@204~ SalesInvoiceNo = @CashSalesInvoiceNo)~dulla^@204~   Me._adapter.InsertCommand.CommandTy~dulla^@204~ ata.CommandType.Text
            Me.~dulla^@204~ rtCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@CashSalesInvoiceNo", ~dulla^@204~ qlDbType.NVarChar, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "CashSalesInvoiceNo",~dulla^@204~ DataRowVersion.Current, false, Nothin~dulla^@204~ ))
            Me._adapter.InsertCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ te", System.Data.SqlDbType.DateTime, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "Da~dulla^@204~ ata.DataRowVersion.Current, false, No~dulla^@204~ , ""))
            Me._adapter.Inser~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@TotalAmount", System.Data.SqlDbType~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ ount", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ertCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@VAT", System.Data.Sq~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ VAT", System.Data.DataRowVersion.Curr~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ rtCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@GrandTotal", System.D~dulla^@204~ .Money, 0, System.Data.ParameterDirec~dulla^@204~ , 0, "GrandTotal", System.Data.DataRo~dulla^@204~ ent, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.InsertCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@TotalInW~dulla^@204~ .Data.SqlDbType.[Char], 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "TotalInWords", ~dulla^@204~ ataRowVersion.Current, false, Nothing~dulla^@204~ )
            Me._adapter.InsertComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ tomerName", System.Data.SqlDbType.[Ch~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ me", System.Data.DataRowVersion.Curre~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand = New System.Data.SqlClient.~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~ Me.Connection
            Me._adapte~dulla^@204~ nd.CommandText = "UPDATE [dbo].[CashS~dulla^@204~ shSalesInvoiceNo] = @CashSalesInvoice~dulla^@204~ & _ 
                " @Date, [Total~dulla^@204~ talAmount, [VAT] = @VAT, [GrandTotal]~dulla^@204~ l, "& _ 
                "[TotalInWo~dulla^@204~ InWords, [CustomerName] = @CustomerNa~dulla^@204~ ashSale"& _ 
                "sInvoi~dulla^@204~ inal_CashSalesInvoiceNo) AND ([Date] ~dulla^@204~ ate) AND (["& _ 
                "To~dulla^@204~ @Original_TotalAmount) AND ([VAT] = @~dulla^@204~  AND ([GrandTot"& _ 
               ~dulla^@204~ inal_GrandTotal) AND ([TotalInWords] ~dulla^@204~ otalInWords) AND (["& _ 
           ~dulla^@204~ rName] = @Original_CustomerName));"&G~dulla^@204~ ft.VisualBasic.ChrW(13)&Global.Micros~dulla^@204~ ic.ChrW(10)&"SELECT CashSalesInvoiceN~dulla^@204~ "& _ 
                "lAmount, VAT,~dulla^@204~ TotalInWords, CustomerName FROM CashS~dulla^@204~ ashS"& _ 
                "alesInvoi~dulla^@204~ alesInvoiceNo)"
            Me._adap~dulla^@204~ mand.CommandType = System.Data.Comman~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ esInvoiceNo", System.Data.SqlDbType.N~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ lesInvoiceNo", System.Data.DataRowVer~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.UpdateCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@Date", Syste~dulla^@204~ ype.DateTime, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "Date", System.Data.DataRo~dulla^@204~ ent, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.UpdateCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@TotalAmo~dulla^@204~ Data.SqlDbType.Money, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "TotalAmount", Sys~dulla^@204~ RowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.Updat~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@VAT", System.Data.SqlDbType.Float, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "VA~dulla^@204~ ta.DataRowVersion.Current, false, Not~dulla^@204~  ""))
            Me._adapter.Update~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @GrandTotal", System.Data.SqlDbType.M~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ l", System.Data.DataRowVersion.Curren~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@TotalInWords", System.D~dulla^@204~ .[Char], 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "TotalInWords", System.Data.Dat~dulla^@204~ urrent, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.UpdateCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@Custo~dulla^@204~ tem.Data.SqlDbType.[Char], 0, System.~dulla^@204~ rDirection.Input, 0, 0, "CustomerName~dulla^@204~ a.DataRowVersion.Current, false, Noth~dulla^@204~ ""))
            Me._adapter.UpdateC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ Original_CashSalesInvoiceNo", System.~dulla^@204~ e.NVarChar, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "CashSalesInvoiceNo", System~dulla^@204~ Version.Original, false, Nothing, "",~dulla^@204~           Me._adapter.UpdateCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~ _Date", System.Data.SqlDbType.DateTim~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ m.Data.DataRowVersion.Original, false~dulla^@204~ , "", ""))
            Me._adapter.U~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@Original_TotalAmount", System.D~dulla^@204~ .Money, 0, System.Data.ParameterDirec~dulla^@204~ , 0, "TotalAmount", System.Data.DataR~dulla^@204~ ginal, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.UpdateCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@Origin~dulla^@204~ em.Data.SqlDbType.Float, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "VAT", System.D~dulla^@204~ rsion.Original, false, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ randTotal", System.Data.SqlDbType.Mon~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ , System.Data.DataRowVersion.Original~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@Original_TotalInWords", ~dulla^@204~ qlDbType.[Char], 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "TotalInWords", System.~dulla^@204~ ersion.Original, false, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ CustomerName", System.Data.SqlDbType.~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ rName", System.Data.DataRowVersion.Or~dulla^@204~ , Nothing, "", "", ""))
        End ~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Private Sub I~dulla^@204~ ()
            Me._connection = New ~dulla^@204~ qlClient.SqlConnection
            M~dulla^@204~ .ConnectionString = Global.InventoryC~dulla^@204~ My.MySettings.Default.PurchaseInfoCon~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ te Sub InitCommandCollection()
     ~dulla^@204~ mmandCollection = New System.Data.Sql~dulla^@204~ mand(0) {}
            Me._commandCo~dulla^@204~  New System.Data.SqlClient.SqlCommand~dulla^@204~  Me._commandCollection(0).Connection ~dulla^@204~ on
            Me._commandCollection~dulla^@204~ xt = "SELECT CashSalesInvoiceNo, Date~dulla^@204~ , VAT, GrandTotal, TotalInWords, Cust~dulla^@204~           "omerName FROM dbo.CashSale~dulla^@204~    Me._commandCollection(0).CommandTy~dulla^@204~ ata.CommandType.Text
        End Sub~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute(),  _
         System.Componen~dulla^@204~ .HelpKeywordAttribute("vs.data.TableA~dulla^@204~ 
         System.ComponentModel.DataO~dulla^@204~ tribute(System.ComponentModel.DataObj~dulla^@204~ .Fill, true)>  _
        Public Over~dulla^@204~ able Function Fill(ByVal dataTable As~dulla^@204~ trolSystemDataSet3.CashSalesDataTable~dulla^@204~ 
            Me.Adapter.SelectCommand~dulla^@204~ Collection(0)
            If (Me.Cle~dulla^@204~ = true) Then
                dataTab~dulla^@204~          End If
            Dim retu~dulla^@204~ teger = Me.Adapter.Fill(dataTable)
 ~dulla^@204~ turn returnValue
        End Functio~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute(),  _
         System.Compone~dulla^@204~ n.HelpKeywordAttribute("vs.data.Table~dulla^@204~ 
         System.ComponentModel.Data~dulla^@204~ ttribute(System.ComponentModel.DataOb~dulla^@204~ e.[Select], true)>  _
        Public~dulla^@204~ erridable Function GetData() As Inven~dulla^@204~ stemDataSet3.CashSalesDataTable
    ~dulla^@204~ apter.SelectCommand = Me.CommandColle~dulla^@204~          Dim dataTable As InventoryCo~dulla^@204~ taSet3.CashSalesDataTable = New Inven~dulla^@204~ stemDataSet3.CashSalesDataTable
    ~dulla^@204~ apter.Fill(dataTable)
            Re~dulla^@204~ e
        End Function
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~         System.ComponentModel.Design.~dulla^@204~ tribute("vs.data.TableAdapter")>  _
~dulla^@204~ c Overloads Overridable Function Upda~dulla^@204~ Table As InventoryControlSystemDataSe~dulla^@204~ ataTable) As Integer
            Ret~dulla^@204~ r.Update(dataTable)
        End Func~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute(),  _
         System.Comp~dulla^@204~ sign.HelpKeywordAttribute("vs.data.Ta~dulla^@204~   _
        Public Overloads Overrid~dulla^@204~  Update(ByVal dataSet As InventoryCon~dulla^@204~ aSet3) As Integer
            Return~dulla^@204~ pdate(dataSet, "CashSales")
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute(),  _
         Sys~dulla^@204~ Model.Design.HelpKeywordAttribute("vs~dulla^@204~ apter")>  _
        Public Overloads~dulla^@204~ Function Update(ByVal dataRow As Syst~dulla^@204~ ow) As Integer
            Return Me~dulla^@204~ te(New System.Data.DataRow() {dataRow~dulla^@204~ nd Function
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute(),  _
~dulla^@204~ em.ComponentModel.Design.HelpKeywordA~dulla^@204~ data.TableAdapter")>  _
        Publ~dulla^@204~ Overridable Function Update(ByVal dat~dulla^@204~ stem.Data.DataRow) As Integer
      ~dulla^@204~ Me.Adapter.Update(dataRows)
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute(),  _
         Sys~dulla^@204~ Model.Design.HelpKeywordAttribute("vs~dulla^@204~ apter"),  _
         System.Componen~dulla^@204~ jectMethodAttribute(System.ComponentM~dulla^@204~ ctMethodType.Delete, true)>  _
     ~dulla^@204~ rloads Overridable Function Delete(By~dulla^@204~ CashSalesInvoiceNo As String, ByVal O~dulla^@204~ As Date, ByVal Original_TotalAmount A~dulla^@204~ Val Original_VAT As Double, ByVal Ori~dulla^@204~ tal As Decimal, ByVal Original_TotalI~dulla^@204~ ing, ByVal Original_CustomerName As S~dulla^@204~ eger
            If (Original_CashSa~dulla^@204~ Is Nothing) Then
                Thr~dulla^@204~ .ArgumentNullException("Original_Cash~dulla^@204~ o")
            Else
              ~dulla^@204~ DeleteCommand.Parameters(0).Value = C~dulla^@204~ _CashSalesInvoiceNo,String)
        ~dulla^@204~            Me.Adapter.DeleteCommand.P~dulla^@204~ Value = CType(Original_Date,Date)
  ~dulla^@204~ Adapter.DeleteCommand.Parameters(2).V~dulla^@204~ Original_TotalAmount,Decimal)
      ~dulla^@204~ ter.DeleteCommand.Parameters(3).Value~dulla^@204~ inal_VAT,Double)
            Me.Adap~dulla^@204~ mand.Parameters(4).Value = CType(Orig~dulla^@204~ al,Decimal)
            If (Original~dulla^@204~  Is Nothing) Then
                Th~dulla^@204~ m.ArgumentNullException("Original_Tot~dulla^@204~             Else
                Me.Adapter.DeleteCommand.Parameters(5).Value ~dulla^@204~ nal_TotalInWords,String)
           ~dulla^@204~         If (Original_CustomerName Is ~dulla^@204~ 
                Throw New System.Ar~dulla^@204~ eption("Original_CustomerName")
    ~dulla^@204~ 
                Me.Adapter.DeleteCom~dulla^@204~ rs(6).Value = CType(Original_Customer~dulla^@204~ 
            End If
            Dim ~dulla^@204~ ctionState As System.Data.ConnectionS~dulla^@204~ pter.DeleteCommand.Connection.State
~dulla^@204~ f ((Me.Adapter.DeleteCommand.Connecti~dulla^@204~ System.Data.ConnectionState.Open)  _~dulla^@204~             <> System.Data.Connection~dulla^@204~ hen
                Me.Adapter.Delet~dulla^@204~ ection.Open
            End If
    ~dulla^@204~ 
                Dim returnValue As I~dulla^@204~ dapter.DeleteCommand.ExecuteNonQuery~dulla^@204~     Return returnValue
            F~dulla^@204~            If (previousConnectionStat~dulla^@204~ ta.ConnectionState.Closed) Then
    ~dulla^@204~    Me.Adapter.DeleteCommand.Connectio~dulla^@204~             End If
            End T~dulla^@204~ nd Function
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute(),  _
~dulla^@204~ em.ComponentModel.Design.HelpKeywordA~dulla^@204~ data.TableAdapter"),  _
         Sys~dulla^@204~ Model.DataObjectMethodAttribute(Syste~dulla^@204~ del.DataObjectMethodType.Insert, true~dulla^@204~   Public Overloads Overridable Functi~dulla^@204~ al CashSalesInvoiceNo As String, ByVa~dulla^@204~ te, ByVal TotalAmount As Decimal, ByV~dulla^@204~ ble, ByVal GrandTotal As Decimal, ByV~dulla^@204~ ds As String, ByVal CustomerName As S~dulla^@204~ eger
            If (CashSalesInvoic~dulla^@204~ g) Then
                Throw New Sy~dulla^@204~ NullException("CashSalesInvoiceNo")
~dulla^@204~ lse
                Me.Adapter.Inser~dulla^@204~ meters(0).Value = CType(CashSalesInvo~dulla^@204~ 
            End If
            Me.~dulla^@204~ tCommand.Parameters(1).Value = CType(~dulla^@204~             Me.Adapter.InsertCommand.~dulla^@204~ .Value = CType(TotalAmount,Decimal)
~dulla^@204~ e.Adapter.InsertCommand.Parameters(3)~dulla^@204~ e(VAT,Double)
            Me.Adapter~dulla^@204~ d.Parameters(4).Value = CType(GrandTo~dulla^@204~ 
            If (TotalInWords Is Noth~dulla^@204~               Throw New System.Argume~dulla^@204~ on("TotalInWords")
            Else~dulla^@204~     Me.Adapter.InsertCommand.Paramete~dulla^@204~  CType(TotalInWords,String)
        ~dulla^@204~            If (CustomerName Is Nothin~dulla^@204~             Throw New System.Argument~dulla^@204~ ("CustomerName")
            Else
 ~dulla^@204~   Me.Adapter.InsertCommand.Parameters~dulla^@204~ Type(CustomerName,String)
          ~dulla^@204~          Dim previousConnectionState ~dulla^@204~ a.ConnectionState = Me.Adapter.Insert~dulla^@204~ ction.State
            If ((Me.Adap~dulla^@204~ mand.Connection.State And System.Data~dulla^@204~ ate.Open)  _
                       ~dulla^@204~ ta.ConnectionState.Open) Then
      ~dulla^@204~ Adapter.InsertCommand.Connection.Open~dulla^@204~  End If
            Try 
          ~dulla^@204~ urnValue As Integer = Me.Adapter.Inse~dulla^@204~ cuteNonQuery
                Return ~dulla^@204~             Finally
                ~dulla^@204~ onnectionState = System.Data.Connecti~dulla^@204~ d) Then
                    Me.Adapt~dulla^@204~ and.Connection.Close
               ~dulla^@204~         End Try
        End Function~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute(),  _
         System.Componen~dulla^@204~ .HelpKeywordAttribute("vs.data.TableA~dulla^@204~ 
         System.ComponentModel.DataO~dulla^@204~ tribute(System.ComponentModel.DataObj~dulla^@204~ .Update, true)>  _
        Public Ov~dulla^@204~ idable Function Update(ByVal CashSale~dulla^@204~  String, ByVal _Date As Date, ByVal T~dulla^@204~  Decimal, ByVal VAT As Double, ByVal ~dulla^@204~  Decimal, ByVal TotalInWords As Strin~dulla^@204~ omerName As String, ByVal Original_Ca~dulla^@204~ eNo As String, ByVal Original_Date As~dulla^@204~ Original_TotalAmount As Decimal, ByVa~dulla^@204~ T As Double, ByVal Original_GrandTota~dulla^@204~  ByVal Original_TotalInWords As Strin~dulla^@204~ inal_CustomerName As String) As Integ~dulla^@204~    If (CashSalesInvoiceNo Is Nothing)~dulla^@204~           Throw New System.ArgumentNu~dulla^@204~ CashSalesInvoiceNo")
            Els~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~  = CType(CashSalesInvoiceNo,String)
~dulla^@204~ nd If
            Me.Adapter.UpdateC~dulla^@204~ ters(1).Value = CType(_Date,Date)
  ~dulla^@204~ Adapter.UpdateCommand.Parameters(2).V~dulla^@204~ TotalAmount,Decimal)
            Me.~dulla^@204~ eCommand.Parameters(3).Value = CType(~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ .Value = CType(GrandTotal,Decimal)
 ~dulla^@204~  (TotalInWords Is Nothing) Then
    ~dulla^@204~ hrow New System.ArgumentNullException~dulla^@204~ s")
            Else
              ~dulla^@204~ UpdateCommand.Parameters(5).Value = C~dulla^@204~ ords,String)
            End If
   ~dulla^@204~ CustomerName Is Nothing) Then
      ~dulla^@204~ ow New System.ArgumentNullException("~dulla^@204~ )
            Else
                ~dulla^@204~ dateCommand.Parameters(6).Value = CTy~dulla^@204~ me,String)
            End If
     ~dulla^@204~ iginal_CashSalesInvoiceNo Is Nothing)~dulla^@204~           Throw New System.ArgumentNu~dulla^@204~ Original_CashSalesInvoiceNo")
      ~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ (7).Value = CType(Original_CashSalesI~dulla^@204~ ng)
            End If
            ~dulla^@204~ dateCommand.Parameters(8).Value = CTy~dulla^@204~ ate,Date)
            Me.Adapter.Upd~dulla^@204~ rameters(9).Value = CType(Original_To~dulla^@204~ imal)
            Me.Adapter.UpdateC~dulla^@204~ ters(10).Value = CType(Original_VAT,D~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ ue = CType(Original_GrandTotal,Decima~dulla^@204~    If (Original_TotalInWords Is Nothi~dulla^@204~              Throw New System.Argumen~dulla^@204~ n("Original_TotalInWords")
         ~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ ).Value = CType(Original_TotalInWords~dulla^@204~          End If
            If (Orig~dulla^@204~ Name Is Nothing) Then
              ~dulla^@204~ ystem.ArgumentNullException("Original~dulla^@204~ ")
            Else
               ~dulla^@204~ pdateCommand.Parameters(13).Value = C~dulla^@204~ _CustomerName,String)
            En~dulla^@204~      Dim previousConnectionState As S~dulla^@204~ nnectionState = Me.Adapter.UpdateComm~dulla^@204~ n.State
            If ((Me.Adapter.~dulla^@204~ .Connection.State And System.Data.Con~dulla^@204~ Open)  _
                        <> ~dulla^@204~ onnectionState.Open) Then
          ~dulla^@204~ ter.UpdateCommand.Connection.Open
  ~dulla^@204~  If
            Try 
              ~dulla^@204~ alue As Integer = Me.Adapter.UpdateCo~dulla^@204~ NonQuery
                Return retu~dulla^@204~         Finally
                If (~dulla^@204~ ctionState = System.Data.ConnectionSt~dulla^@204~ hen
                    Me.Adapter.U~dulla^@204~ Connection.Close
                End~dulla^@204~     End Try
        End Function
  ~dulla^@204~     
    <System.CodeDom.Compiler.Ge~dulla^@204~ tribute("System.Data.Design.TypedData~dulla^@204~ , "2.0.0.0"),  _
     System.Compone~dulla^@204~ nerCategoryAttribute("code"),  _
   ~dulla^@204~ onentModel.ToolboxItem(true),  _
   ~dulla^@204~ onentModel.DataObjectAttribute(true),~dulla^@204~ tem.ComponentModel.DesignerAttribute(~dulla^@204~ Designer.DataSource.Design.TableAdapt~dulla^@204~ icrosoft.VSDesigner"& _ 
        ", ~dulla^@204~ .0, Culture=neutral, PublicKeyToken=b~dulla^@204~ 3a"),  _
     System.ComponentModel.~dulla^@204~ ywordAttribute("vs.data.TableAdapter"~dulla^@204~ rtial Public Class CreditSalesTableAd~dulla^@204~   Inherits System.ComponentModel.Comp~dulla^@204~   
        Private WithEvents _adapt~dulla^@204~ Data.SqlClient.SqlDataAdapter
      ~dulla^@204~ rivate _connection As System.Data.SqlClient.SqlConnection
        
        Pr~dulla^@204~ dCollection() As System.Data.SqlClien~dulla^@204~ 
        
        Private _clearBefo~dulla^@204~ lean
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ ew()
            MyBase.New
       ~dulla^@204~ BeforeFill = true
        End Sub
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Private ReadOnly Pr~dulla^@204~ r() As System.Data.SqlClient.SqlDataA~dulla^@204~        Get
                If (Me._a~dulla^@204~ hing) Then
                    Me.In~dulla^@204~               End If
               ~dulla^@204~ dapter
            End Get
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Frie~dulla^@204~ onnection() As System.Data.SqlClient.~dulla^@204~ 
            Get
                If~dulla^@204~ ion Is Nothing) Then
               ~dulla^@204~ onnection
                End If
  ~dulla^@204~  Return Me._connection
            E~dulla^@204~        Set
                Me._conne~dulla^@204~ 
                If (Not (Me.Adapter~dulla^@204~ d) Is Nothing) Then
                ~dulla^@204~ r.InsertCommand.Connection = value
 ~dulla^@204~   End If
                If (Not (Me~dulla^@204~ teCommand) Is Nothing) Then
        ~dulla^@204~ e.Adapter.DeleteCommand.Connection = ~dulla^@204~           End If
                If ~dulla^@204~ ter.UpdateCommand) Is Nothing) Then
~dulla^@204~        Me.Adapter.UpdateCommand.Conne~dulla^@204~ 
                End If
           ~dulla^@204~  Integer = 0
                Do Whil~dulla^@204~ mandCollection.Length)
             ~dulla^@204~ t (Me.CommandCollection(i)) Is Nothin~dulla^@204~                     CType(Me.CommandC~dulla^@204~ System.Data.SqlClient.SqlCommand).Con~dulla^@204~ ue
                    End If
     ~dulla^@204~   i = (i + 1)
                Loop
~dulla^@204~ nd Set
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Protected ReadOnly Proper~dulla^@204~ lection() As System.Data.SqlClient.Sq~dulla^@204~            Get
                If (M~dulla^@204~ lection Is Nothing) Then
           ~dulla^@204~ nitCommandCollection
               ~dulla^@204~             Return Me._commandCollect~dulla^@204~     End Get
        End Property
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Property Clea~dulla^@204~  As Boolean
            Get
       ~dulla^@204~ rn Me._clearBeforeFill
            E~dulla^@204~        Set
                Me._clear~dulla^@204~ value
            End Set
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Priva~dulla^@204~ apter()
            Me._adapter = Ne~dulla^@204~ .SqlClient.SqlDataAdapter
          ~dulla^@204~ pping As System.Data.Common.DataTable~dulla^@204~  System.Data.Common.DataTableMapping~dulla^@204~ tableMapping.SourceTable = "Table"
 ~dulla^@204~ bleMapping.DataSetTable = "CreditSale~dulla^@204~    tableMapping.ColumnMappings.Add("C~dulla^@204~ oiceNo", "CreditSalesInvoiceNo")
   ~dulla^@204~ eMapping.ColumnMappings.Add("Date", "~dulla^@204~        tableMapping.ColumnMappings.Ad~dulla^@204~ t", "TotalAmount")
            table~dulla^@204~ nMappings.Add("VAT", "VAT")
        ~dulla^@204~ ing.ColumnMappings.Add("GrandTotal", ~dulla^@204~ 
            tableMapping.ColumnMapp~dulla^@204~ alInWords", "TotalInWords")
        ~dulla^@204~ ing.ColumnMappings.Add("DueDate", "Du~dulla^@204~         tableMapping.ColumnMappings.A~dulla^@204~ ame", "CustomerName")
            Me~dulla^@204~ leMappings.Add(tableMapping)
       ~dulla^@204~ ter.DeleteCommand = New System.Data.S~dulla^@204~ ommand
            Me._adapter.Delet~dulla^@204~ ection = Me.Connection
            M~dulla^@204~ leteCommand.CommandText = "DELETE FRO~dulla^@204~ itSales] WHERE (([CreditSalesInvoiceN~dulla^@204~ l_Credit"& _ 
                "Sales~dulla^@204~ D ([Date] = @Original_Date) AND ([Tot~dulla^@204~ Original_Tot"& _ 
                "a~dulla^@204~ ([VAT] = @Original_VAT) AND ([GrandTo~dulla^@204~ nal_GrandTotal) "& _ 
              ~dulla^@204~ ull_TotalInWords = 1 AND [TotalInWord~dulla^@204~ R ([TotalInWords] = "& _ 
          ~dulla^@204~ nal_TotalInWords)) AND ([DueDate] = @~dulla^@204~ ate) AND ([CustomerName]"& _ 
      ~dulla^@204~  @Original_CustomerName))"
         ~dulla^@204~ r.DeleteCommand.CommandType = System.~dulla^@204~ ype.Text
            Me._adapter.Del~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@Original_CreditSalesInvoiceNo", S~dulla^@204~ lDbType.NVarChar, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "CreditSalesInvoiceNo"~dulla^@204~ .DataRowVersion.Original, false, Noth~dulla^@204~ ""))
            Me._adapter.DeleteC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ Original_Date", System.Data.SqlDbType~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@Original_TotalAmount", ~dulla^@204~ qlDbType.Money, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "TotalAmount", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.DeleteCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ T", System.Data.SqlDbType.Float, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "VAT", ~dulla^@204~ ataRowVersion.Original, false, Nothin~dulla^@204~ ))
            Me._adapter.DeleteCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ iginal_GrandTotal", System.Data.SqlDb~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ ndTotal", System.Data.DataRowVersion.~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .DeleteCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@IsNull_TotalInWo~dulla^@204~ Data.SqlDbType.Int, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "TotalInWords", Syst~dulla^@204~ owVersion.Original, true, Nothing, ""~dulla^@204~            Me._adapter.DeleteCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ l_TotalInWords", System.Data.SqlDbTyp~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ InWords", System.Data.DataRowVersion.~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .DeleteCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@Original_DueDate~dulla^@204~ a.SqlDbType.DateTime, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "DueDate", System.~dulla^@204~ ersion.Original, false, Nothing, "", ~dulla^@204~          Me._adapter.DeleteCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ CustomerName", System.Data.SqlDbType.~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ rName", System.Data.DataRowVersion.Or~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ nsertCommand = New System.Data.SqlCli~dulla^@204~ d
            Me._adapter.InsertComm~dulla^@204~ n = Me.Connection
            Me._ad~dulla^@204~ ommand.CommandText = "INSERT INTO [db~dulla^@204~ es] ([CreditSalesInvoiceNo], [Date], ~dulla^@204~ , ["& _ 
                "VAT], [Gra~dulla^@204~ talInWords], [DueDate], [CustomerName~dulla^@204~ reditSa"& _ 
                "lesInv~dulla^@204~ , @TotalAmount, @VAT, @GrandTotal, @T~dulla^@204~ @DueDate, @"& _ 
                "Cu~dulla^@204~ &Global.Microsoft.VisualBasic.ChrW(13~dulla^@204~ osoft.VisualBasic.ChrW(10)&"SELECT Cr~dulla^@204~ iceNo, Date, TotalAmount, VAT, GrandT~dulla^@204~                " TotalInWords, DueDat~dulla^@204~ me FROM CreditSales WHERE (CreditSale~dulla^@204~  
                "o = @CreditSalesI~dulla^@204~            Me._adapter.InsertCommand.~dulla^@204~  System.Data.CommandType.Text
      ~dulla^@204~ pter.InsertCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@CreditSalesI~dulla^@204~ stem.Data.SqlDbType.NVarChar, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "CreditSal~dulla^@204~  System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            ~dulla^@204~ nsertCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@Date", System.Data~dulla^@204~ teTime, 0, System.Data.ParameterDirec~dulla^@204~ , 0, "Date", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.InsertCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@TotalAmount", ~dulla^@204~ qlDbType.Money, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "TotalAmount", System.Da~dulla^@204~ sion.Current, false, Nothing, "", "",~dulla^@204~       Me._adapter.InsertCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ .Data.SqlDbType.Float, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "VAT", System.Dat~dulla^@204~ ion.Current, false, Nothing, "", "", ~dulla^@204~      Me._adapter.InsertCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ System.Data.SqlDbType.Money, 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "GrandTotal~dulla^@204~ a.DataRowVersion.Current, false, Noth~dulla^@204~ ""))
            Me._adapter.InsertC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ TotalInWords", System.Data.SqlDbType.~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ Words", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ sertCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@DueDate", System.Da~dulla^@204~ DateTime, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "DueDate", System.Data.DataRow~dulla^@204~ nt, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.InsertCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@CustomerN~dulla^@204~ Data.SqlDbType.[Char], 0, System.Data~dulla^@204~ ection.Input, 0, 0, "CustomerName", S~dulla^@204~ taRowVersion.Current, false, Nothing,~dulla^@204~ 
            Me._adapter.UpdateComma~dulla^@204~ em.Data.SqlClient.SqlCommand
       ~dulla^@204~ ter.UpdateCommand.Connection = Me.Con~dulla^@204~         Me._adapter.UpdateCommand.Com~dulla^@204~ PDATE [dbo].[CreditSales] SET [Credit~dulla^@204~ o] = @CreditSalesInvoiceNo, [D"& _ 
~dulla^@204~    "ate] = @Date, [TotalAmount] = @To~dulla^@204~ AT] = @VAT, [GrandTotal] = @GrandT"& ~dulla^@204~        "otal, [TotalInWords] = @Total~dulla^@204~ Date] = @DueDate, [CustomerName] = @C~dulla^@204~            "stomerName WHERE (([Credi~dulla^@204~ No] = @Original_CreditSalesInvoiceNo)~dulla^@204~                "([Date] = @Original_D~dulla^@204~ talAmount] = @Original_TotalAmount) A~dulla^@204~  
                " = @Original_VAT)~dulla^@204~ otal] = @Original_GrandTotal) AND ((@~dulla^@204~ "& _ 
                "nWords = 1 AN~dulla^@204~ ds] IS NULL) OR ([TotalInWords] = @Or~dulla^@204~ nWor"& _ 
                "ds)) AND ~dulla^@204~ @Original_DueDate) AND ([CustomerName~dulla^@204~ _Custome"& _ 
                "rName~dulla^@204~ icrosoft.VisualBasic.ChrW(13)&Global.~dulla^@204~ ualBasic.ChrW(10)&"SELECT CreditSales~dulla^@204~ te, TotalAmount, VAT, GrandTotal, Tot~dulla^@204~             "InWords, DueDate, Custom~dulla^@204~ reditSales WHERE (CreditSalesInvoiceN~dulla^@204~                 "reditSalesInvoiceNo)~dulla^@204~   Me._adapter.UpdateCommand.CommandTy~dulla^@204~ ata.CommandType.Text
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@CreditSalesInvoiceNo"~dulla^@204~ .SqlDbType.NVarChar, 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "CreditSalesInvoice~dulla^@204~ ata.DataRowVersion.Current, false, No~dulla^@204~ , ""))
            Me._adapter.Updat~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@Date", System.Data.SqlDbType.DateTi~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ em.Data.DataRowVersion.Current, false~dulla^@204~ , "", ""))
            Me._adapter.U~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@TotalAmount", System.Data.SqlDb~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ alAmount", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@VAT", System.Dat~dulla^@204~ loat, 0, System.Data.ParameterDirecti~dulla^@204~ 0, "VAT", System.Data.DataRowVersion.~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ UpdateCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@GrandTotal", Syst~dulla^@204~ Type.Money, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "GrandTotal", System.Data.Da~dulla^@204~ Current, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Tota~dulla^@204~ stem.Data.SqlDbType.[Char], 0, System~dulla^@204~ erDirection.Input, 0, 0, "TotalInWord~dulla^@204~ ta.DataRowVersion.Current, false, Not~dulla^@204~  ""))
            Me._adapter.Update~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @DueDate", System.Data.SqlDbType.Date~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~  System.Data.DataRowVersion.Current, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@CustomerName", System.Data~dulla^@204~ har], 0, System.Data.ParameterDirecti~dulla^@204~ 0, "CustomerName", System.Data.DataRo~dulla^@204~ ent, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.UpdateCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@Original~dulla^@204~ nvoiceNo", System.Data.SqlDbType.NVar~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ esInvoiceNo", System.Data.DataRowVers~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.UpdateCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@Original_Dat~dulla^@204~ ta.SqlDbType.DateTime, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "Date", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ talAmount", System.Data.SqlDbType.Mon~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@Original_VAT", System.D~dulla^@204~ .Float, 0, System.Data.ParameterDirec~dulla^@204~ , 0, "VAT", System.Data.DataRowVersio~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Original_Grand~dulla^@204~ m.Data.SqlDbType.Money, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "GrandTotal", Sy~dulla^@204~ aRowVersion.Original, false, Nothing,~dulla^@204~ 
            Me._adapter.UpdateComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ ll_TotalInWords", System.Data.SqlDbTy~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ Words", System.Data.DataRowVersion.Or~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ dateCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@Original_TotalInWor~dulla^@204~ ata.SqlDbType.[Char], 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "TotalInWords", Sy~dulla^@204~ aRowVersion.Original, false, Nothing,~dulla^@204~ 
            Me._adapter.UpdateComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ inal_DueDate", System.Data.SqlDbType.~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ te", System.Data.DataRowVersion.Origi~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@Original_CustomerName~dulla^@204~ a.SqlDbType.[Char], 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "CustomerName", Syst~dulla^@204~ owVersion.Original, false, Nothing, "~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ rivate Sub InitConnection()
        ~dulla^@204~ ction = New System.Data.SqlClient.Sql~dulla^@204~            Me._connection.ConnectionS~dulla^@204~ l.InventoryControlSystem.My.MySetting~dulla^@204~ chaseInfoConnection
        End Sub
        
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Private S~dulla^@204~ dCollection()
            Me._comman~dulla^@204~  New System.Data.SqlClient.SqlCommand~dulla^@204~        Me._commandCollection(0) = New~dulla^@204~ SqlClient.SqlCommand
            Me.~dulla^@204~ ction(0).Connection = Me.Connection
~dulla^@204~ e._commandCollection(0).CommandText =~dulla^@204~ itSalesInvoiceNo, Date, TotalAmount, ~dulla^@204~ al, TotalInWords, Du"& _ 
          ~dulla^@204~  CustomerName FROM dbo.CreditSales"
~dulla^@204~ e._commandCollection(0).CommandType =~dulla^@204~ CommandType.Text
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e(),  _
         System.ComponentMod~dulla^@204~ pKeywordAttribute("vs.data.TableAdapt~dulla^@204~       System.ComponentModel.DataObjec~dulla^@204~ ute(System.ComponentModel.DataObjectM~dulla^@204~ l, true)>  _
        Public Overload~dulla^@204~  Function Fill(ByVal dataTable As Inv~dulla^@204~ SystemDataSet3.CreditSalesDataTable) ~dulla^@204~            Me.Adapter.SelectCommand =~dulla^@204~ llection(0)
            If (Me.Clear~dulla^@204~ true) Then
                dataTable~dulla^@204~        End If
            Dim return~dulla^@204~ ger = Me.Adapter.Fill(dataTable)
   ~dulla^@204~ rn returnValue
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute(),  _
         System.Component~dulla^@204~ HelpKeywordAttribute("vs.data.TableAd~dulla^@204~          System.ComponentModel.DataOb~dulla^@204~ ribute(System.ComponentModel.DataObje~dulla^@204~ [Select], true)>  _
        Public O~dulla^@204~ ridable Function GetData() As Invento~dulla^@204~ emDataSet3.CreditSalesDataTable
    ~dulla^@204~ apter.SelectCommand = Me.CommandColle~dulla^@204~          Dim dataTable As InventoryCo~dulla^@204~ taSet3.CreditSalesDataTable = New Inv~dulla^@204~ SystemDataSet3.CreditSalesDataTable
~dulla^@204~ e.Adapter.Fill(dataTable)
          ~dulla^@204~ Table
        End Function
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
         System.ComponentModel.Des~dulla^@204~ rdAttribute("vs.data.TableAdapter")> ~dulla^@204~ ublic Overloads Overridable Function ~dulla^@204~ dataTable As InventoryControlSystemDa~dulla^@204~ SalesDataTable) As Integer
         ~dulla^@204~ Adapter.Update(dataTable)
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute(),  _
         Syste~dulla^@204~ del.Design.HelpKeywordAttribute("vs.d~dulla^@204~ ter")>  _
        Public Overloads O~dulla^@204~ nction Update(ByVal dataSet As Invent~dulla^@204~ temDataSet3) As Integer
            ~dulla^@204~ pter.Update(dataSet, "CreditSales")
~dulla^@204~ unction
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute(),  _
    ~dulla^@204~ omponentModel.Design.HelpKeywordAttri~dulla^@204~ .TableAdapter")>  _
        Public O~dulla^@204~ ridable Function Update(ByVal dataRow~dulla^@204~ ta.DataRow) As Integer
            R~dulla^@204~ ter.Update(New System.Data.DataRow() ~dulla^@204~        End Function
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~     System.ComponentModel.Design.Help~dulla^@204~ ute("vs.data.TableAdapter")>  _
    ~dulla^@204~ erloads Overridable Function Update(B~dulla^@204~ () As System.Data.DataRow) As Integer~dulla^@204~  Return Me.Adapter.Update(dataRows)
~dulla^@204~ unction
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute(),  _
    ~dulla^@204~ omponentModel.Design.HelpKeywordAttri~dulla^@204~ .TableAdapter"),  _
         System.~dulla^@204~ l.DataObjectMethodAttribute(System.Co~dulla^@204~ DataObjectMethodType.Delete, true)>  ~dulla^@204~ blic Overloads Overridable Function D~dulla^@204~ riginal_CreditSalesInvoiceNo As Strin~dulla^@204~ inal_Date As Date, ByVal Original_Tot~dulla^@204~ ecimal, ByVal Original_VAT As Double,~dulla^@204~ al_GrandTotal As Decimal, ByVal Origi~dulla^@204~ rds As String, ByVal Original_DueDate~dulla^@204~ al Original_CustomerName As String) A~dulla^@204~           If (Original_CreditSalesInv~dulla^@204~ hing) Then
                Throw New~dulla^@204~ entNullException("Original_CreditSale~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(0).Value = CType~dulla^@204~ ditSalesInvoiceNo,String)
          ~dulla^@204~          Me.Adapter.DeleteCommand.Par~dulla^@204~ lue = CType(Original_Date,Date)
    ~dulla^@204~ apter.DeleteCommand.Parameters(2).Val~dulla^@204~ iginal_TotalAmount,Decimal)
        ~dulla^@204~ r.DeleteCommand.Parameters(3).Value =~dulla^@204~ al_VAT,Double)
            Me.Adapte~dulla^@204~ nd.Parameters(4).Value = CType(Origin~dulla^@204~ ,Decimal)
            If (Original_T~dulla^@204~ s Nothing) Then
                Me.A~dulla^@204~ Command.Parameters(5).Value = CType(1~dulla^@204~              Me.Adapter.DeleteCommand~dulla^@204~ ).Value = System.DBNull.Value
      ~dulla^@204~                Me.Adapter.DeleteComma~dulla^@204~ (5).Value = CType(0,Object)
        ~dulla^@204~ apter.DeleteCommand.Parameters(6).Val~dulla^@204~ iginal_TotalInWords,String)
        ~dulla^@204~            Me.Adapter.DeleteCommand.P~dulla^@204~ Value = CType(Original_DueDate,Date)~dulla^@204~ If (Original_CustomerName Is Nothing)~dulla^@204~           Throw New System.ArgumentNu~dulla^@204~ Original_CustomerName")
            ~dulla^@204~          Me.Adapter.DeleteCommand.Par~dulla^@204~ lue = CType(Original_CustomerName,Str~dulla^@204~      End If
            Dim previous~dulla^@204~ te As System.Data.ConnectionState = M~dulla^@204~ eteCommand.Connection.State
        ~dulla^@204~ dapter.DeleteCommand.Connection.State~dulla^@204~ ata.ConnectionState.Open)  _
       ~dulla^@204~     <> System.Data.ConnectionState.Op~dulla^@204~              Me.Adapter.DeleteCommand~dulla^@204~ pen
            End If
            ~dulla^@204~          Dim returnValue As Integer =~dulla^@204~ eleteCommand.ExecuteNonQuery
       ~dulla^@204~ rn returnValue
            Finally
~dulla^@204~    If (previousConnectionState = Syst~dulla^@204~ ctionState.Closed) Then
            ~dulla^@204~ apter.DeleteCommand.Connection.Close~dulla^@204~     End If
            End Try
    ~dulla^@204~ ion
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute(),  _
        ~dulla^@204~ nentModel.Design.HelpKeywordAttribute~dulla^@204~ leAdapter"),  _
         System.Comp~dulla^@204~ taObjectMethodAttribute(System.Compon~dulla^@204~ ObjectMethodType.Insert, true)>  _
 ~dulla^@204~  Overloads Overridable Function Inser~dulla^@204~ tSalesInvoiceNo As String, ByVal _Dat~dulla^@204~ Val TotalAmount As Decimal, ByVal VAT~dulla^@204~ yVal GrandTotal As Decimal, ByVal Tot~dulla^@204~ String, ByVal DueDate As Date, ByVal ~dulla^@204~ As String) As Integer
            If~dulla^@204~ InvoiceNo Is Nothing) Then
         ~dulla^@204~ New System.ArgumentNullException("Cre~dulla^@204~ ceNo")
            Else
           ~dulla^@204~ er.InsertCommand.Parameters(0).Value ~dulla^@204~ tSalesInvoiceNo,String)
            ~dulla^@204~        Me.Adapter.InsertCommand.Param~dulla^@204~ e = CType(_Date,Date)
            Me~dulla^@204~ rtCommand.Parameters(2).Value = CType~dulla^@204~ Decimal)
            Me.Adapter.Inse~dulla^@204~ ameters(3).Value = CType(VAT,Double)~dulla^@204~ Me.Adapter.InsertCommand.Parameters(4~dulla^@204~ pe(GrandTotal,Decimal)
            I~dulla^@204~ ds Is Nothing) Then
                ~dulla^@204~ sertCommand.Parameters(5).Value = Sys~dulla^@204~ lue
            Else
              ~dulla^@204~ InsertCommand.Parameters(5).Value = C~dulla^@204~ ords,String)
            End If
   ~dulla^@204~ dapter.InsertCommand.Parameters(6).Va~dulla^@204~ ueDate,Date)
            If (Custome~dulla^@204~ ing) Then
                Throw New ~dulla^@204~ ntNullException("CustomerName")
    ~dulla^@204~ 
                Me.Adapter.InsertCom~dulla^@204~ rs(7).Value = CType(CustomerName,Stri~dulla^@204~     End If
            Dim previousC~dulla^@204~ e As System.Data.ConnectionState = Me~dulla^@204~ rtCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connectio~dulla^@204~ ystem.Data.ConnectionState.Open)  _
~dulla^@204~            <> System.Data.ConnectionS~dulla^@204~ en
                Me.Adapter.Insert~dulla^@204~ ction.Open
            End If
     ~dulla^@204~                 Dim returnValue As In~dulla^@204~ apter.InsertCommand.ExecuteNonQuery
~dulla^@204~    Return returnValue
            Fi~dulla^@204~           If (previousConnectionState~dulla^@204~ a.ConnectionState.Closed) Then
     ~dulla^@204~   Me.Adapter.InsertCommand.Connection~dulla^@204~            End If
            End Tr~dulla^@204~ d Function
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute(),  _
 ~dulla^@204~ m.ComponentModel.Design.HelpKeywordAt~dulla^@204~ ata.TableAdapter"),  _
         Syst~dulla^@204~ odel.DataObjectMethodAttribute(System~dulla^@204~ el.DataObjectMethodType.Update, true)~dulla^@204~  Public Overloads Overridable Functio~dulla^@204~                     ByVal CreditSales~dulla^@204~ String,  _
                    ByVal~dulla^@204~ e,  _
                    ByVal Tota~dulla^@204~ cimal,  _
                    ByVal ~dulla^@204~ ,  _
                    ByVal Grand~dulla^@204~ mal,  _
                    ByVal To~dulla^@204~  String,  _
                    ByVa~dulla^@204~ Date,  _
                    ByVal C~dulla^@204~ s String,  _
                    ByV~dulla^@204~ reditSalesInvoiceNo As String,  _
  ~dulla^@204~      ByVal Original_Date As Date,  _~dulla^@204~         ByVal Original_TotalAmount As~dulla^@204~ 
                    ByVal Original_V~dulla^@204~   _
                    ByVal Origin~dulla^@204~  As Decimal,  _
                    ~dulla^@204~ l_TotalInWords As String,  _
       ~dulla^@204~ ByVal Original_DueDate As Date,  _
 ~dulla^@204~       ByVal Original_CustomerName As ~dulla^@204~ teger
            If (CreditSalesInv~dulla^@204~ hing) Then
                Throw New~dulla^@204~ entNullException("CreditSalesInvoiceN~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(0).Value = CType(CreditSa~dulla^@204~ String)
            End If
        ~dulla^@204~ r.UpdateCommand.Parameters(1).Value =~dulla^@204~ Date)
            Me.Adapter.UpdateC~dulla^@204~ ters(2).Value = CType(TotalAmount,Dec~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~  = CType(VAT,Double)
            Me.~dulla^@204~ eCommand.Parameters(4).Value = CType(~dulla^@204~ cimal)
            If (TotalInWords ~dulla^@204~ hen
                Me.Adapter.Updat~dulla^@204~ meters(5).Value = System.DBNull.Value~dulla^@204~  Else
                Me.Adapter.Upd~dulla^@204~ rameters(5).Value = CType(TotalInWord~dulla^@204~           End If
            Me.Adap~dulla^@204~ mand.Parameters(6).Value = CType(DueD~dulla^@204~           If (CustomerName Is Nothing~dulla^@204~            Throw New System.ArgumentN~dulla^@204~ "CustomerName")
            Else
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ ype(CustomerName,String)
           ~dulla^@204~         If (Original_CreditSalesInvoi~dulla^@204~ ng) Then
                Throw New S~dulla^@204~ tNullException("Original_CreditSalesI~dulla^@204~            Else
                Me.A~dulla^@204~ Command.Parameters(8).Value = CType(O~dulla^@204~ tSalesInvoiceNo,String)
            ~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ e = CType(Original_Date,Date)
      ~dulla^@204~ ter.UpdateCommand.Parameters(10).Valu~dulla^@204~ ginal_TotalAmount,Decimal)
         ~dulla^@204~ .UpdateCommand.Parameters(11).Value =~dulla^@204~ al_VAT,Double)
            Me.Adapte~dulla^@204~ nd.Parameters(12).Value = CType(Origi~dulla^@204~ l,Decimal)
            If (Original_~dulla^@204~ Is Nothing) Then
                Me.~dulla^@204~ eCommand.Parameters(13).Value = CType~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ (14).Value = System.DBNull.Value
   ~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(13).Value = CType(0,Object)
    ~dulla^@204~ e.Adapter.UpdateCommand.Parameters(14~dulla^@204~ pe(Original_TotalInWords,String)
   ~dulla^@204~ If
            Me.Adapter.UpdateComm~dulla^@204~ s(15).Value = CType(Original_DueDate,~dulla^@204~       If (Original_CustomerName Is No~dulla^@204~                 Throw New System.Argu~dulla^@204~ tion("Original_CustomerName")
      ~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ (16).Value = CType(Original_CustomerN~dulla^@204~             End If
            Dim p~dulla^@204~ tionState As System.Data.ConnectionSt~dulla^@204~ ter.UpdateCommand.Connection.State
 ~dulla^@204~  ((Me.Adapter.UpdateCommand.Connectio~dulla^@204~ ystem.Data.ConnectionState.Open)  _
~dulla^@204~            <> System.Data.ConnectionS~dulla^@204~ en
                Me.Adapter.Update~dulla^@204~ ction.Open
            End If
     ~dulla^@204~                 Dim returnValue As In~dulla^@204~ apter.UpdateCommand.ExecuteNonQuery
~dulla^@204~    Return returnValue
            Fi~dulla^@204~           If (previousConnectionState~dulla^@204~ a.ConnectionState.Closed) Then
     ~dulla^@204~   Me.Adapter.UpdateCommand.Connection~dulla^@204~            End If
            End Tr~dulla^@204~ d Function
    End Class
    
    ~dulla^@204~ om.Compiler.GeneratedCodeAttribute("S~dulla^@204~ sign.TypedDataSetGenerator", "2.0.0.0~dulla^@204~ System.ComponentModel.DesignerCategor~dulla^@204~ ode"),  _
     System.ComponentModel~dulla^@204~ true),  _
     System.ComponentModel~dulla^@204~ tribute(true),  _
     System.Compon~dulla^@204~ gnerAttribute("Microsoft.VSDesigner.D~dulla^@204~ ign.TableAdapterDesigner, Microsoft.V~dulla^@204~  
        ", Version=8.0.0.0, Cultur~dulla^@204~ blicKeyToken=b03f5f7f11d50a3a"),  _
~dulla^@204~ omponentModel.Design.HelpKeywordAttri~dulla^@204~ .TableAdapter")>  _
    Partial Publ~dulla^@204~ omersTableAdapter
        Inherits S~dulla^@204~ ntModel.Component
        
        ~dulla^@204~ vents _adapter As System.Data.SqlClie~dulla^@204~ pter
        
        Private _conn~dulla^@204~ tem.Data.SqlClient.SqlConnection
   ~dulla^@204~   Private _commandCollection() As Sys~dulla^@204~ lient.SqlCommand
        
        P~dulla^@204~ BeforeFill As Boolean
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Sub New()
            My~dulla^@204~          Me.ClearBeforeFill = true
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pr~dulla^@204~ y Property Adapter() As System.Data.S~dulla^@204~ ataAdapter
            Get
        ~dulla^@204~ e._adapter Is Nothing) Then
        ~dulla^@204~ e.InitAdapter
                End If~dulla^@204~      Return Me._adapter
            ~dulla^@204~     End Property
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Friend Property Connection() As Syste~dulla^@204~ ent.SqlConnection
            Get
 ~dulla^@204~   If (Me._connection Is Nothing) Then~dulla^@204~          Me.InitConnection
         ~dulla^@204~ 
                Return Me._connecti~dulla^@204~    End Get
            Set
        ~dulla^@204~ onnection = value
                If~dulla^@204~ pter.InsertCommand) Is Nothing) Then~dulla^@204~         Me.Adapter.InsertCommand.Conn~dulla^@204~ e
                End If
          ~dulla^@204~  (Me.Adapter.DeleteCommand) Is Nothin~dulla^@204~                 Me.Adapter.DeleteComm~dulla^@204~ n = value
                End If
  ~dulla^@204~  If (Not (Me.Adapter.UpdateCommand) I~dulla^@204~ en
                    Me.Adapter.Up~dulla^@204~ onnection = value
                En~dulla^@204~          Dim i As Integer = 0
      ~dulla^@204~ While (i < Me.CommandCollection.Lengt~dulla^@204~            If (Not (Me.CommandCollect~dulla^@204~ thing) Then
                        ~dulla^@204~ andCollection(i),System.Data.SqlClien~dulla^@204~ .Connection = value
                ~dulla^@204~                    i = (i + 1)
     ~dulla^@204~ op
            End Set
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As~dulla^@204~ SqlClient.SqlCommand()
            G~dulla^@204~        If (Me._commandCollection Is N~dulla^@204~ 
                    Me.InitCommandCo~dulla^@204~              End If
                ~dulla^@204~ mmandCollection
            End Get~dulla^@204~ Property
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ roperty ClearBeforeFill() As Boolean~dulla^@204~ Get
                Return Me._clear~dulla^@204~            End Get
            Set
~dulla^@204~    Me._clearBeforeFill = value
     ~dulla^@204~ t
        End Property
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Private Sub InitAdapter()
   ~dulla^@204~ adapter = New System.Data.SqlClient.S~dulla^@204~ 
            Dim tableMapping As Sys~dulla^@204~ on.DataTableMapping = New System.Data~dulla^@204~ ableMapping
            tableMapping~dulla^@204~ = "Table"
            tableMapping.D~dulla^@204~  "Customers"
            tableMappin~dulla^@204~ ngs.Add("CustomerName", "CustomerName~dulla^@204~    tableMapping.ColumnMappings.Add("S~dulla^@204~ City")
            tableMapping.Colu~dulla^@204~ d("Kebele", "Kebele")
            ta~dulla^@204~ lumnMappings.Add("HouseNo", "HouseNo"~dulla^@204~   tableMapping.ColumnMappings.Add("Te~dulla^@204~            tableMapping.ColumnMapping~dulla^@204~ "Fax")
            tableMapping.Colu~dulla^@204~ d("PostalAddress", "PostalAddress")
~dulla^@204~ ableMapping.ColumnMappings.Add("Email~dulla^@204~             tableMapping.ColumnMappin~dulla^@204~ merVATRegNo", "CustomerVATRegNo")
  ~dulla^@204~ leMapping.ColumnMappings.Add("Custome~dulla^@204~ tomerTINNo")
            tableMappin~dulla^@204~ ngs.Add("CustomerDateOfReg", "Custome~dulla^@204~ 
            Me._adapter.TableMapping~dulla^@204~ pping)
            Me._adapter.Delet~dulla^@204~ w System.Data.SqlClient.SqlCommand
 ~dulla^@204~ ._adapter.DeleteCommand.Connection = ~dulla^@204~ 
            Me._adapter.DeleteComma~dulla^@204~ t = "DELETE FROM [dbo].[Customers] WH~dulla^@204~ erName] = @Original_CustomerName) AN"~dulla^@204~          "D ((@IsNull_SubCity = 1 AND~dulla^@204~  NULL) OR ([SubCity] = @Original_SubC~dulla^@204~              ")) AND ((@IsNull_Kebele~dulla^@204~ ele] IS NULL) OR ([Kebele] = @Origina~dulla^@204~ 
                "e)) AND ((@IsNull_H~dulla^@204~ D [HouseNo] IS NULL) OR ([HouseNo] = ~dulla^@204~  _ 
                "ouseNo)) AND ((~dulla^@204~  1 AND [Tel] IS NULL) OR ([Tel] = @Or~dulla^@204~ AN"& _ 
                "D ((@IsNull~dulla^@204~ [Fax] IS NULL) OR ([Fax] = @Original_~dulla^@204~ IsNull"& _ 
                "_Postal~dulla^@204~ ND [PostalAddress] IS NULL) OR ([Post~dulla^@204~ @Original_"& _ 
                "Pos~dulla^@204~ AND ((@IsNull_Email = 1 AND [Email] I~dulla^@204~ Email] = @Orig"& _ 
                ~dulla^@204~  AND ((@IsNull_CustomerVATRegNo = 1 A~dulla^@204~ ATRegNo] IS NULL) "& _ 
            ~dulla^@204~ tomerVATRegNo] = @Original_CustomerVA~dulla^@204~ ((@IsNull_CustomerTINN"& _ 
        ~dulla^@204~ 1 AND [CustomerTINNo] IS NULL) OR ([C~dulla^@204~  = @Original_CustomerTINNo"& _ 
    ~dulla^@204~ )) AND ((@IsNull_CustomerDateOfReg = ~dulla^@204~ erDateOfReg] IS NULL) OR ([Cus"& _ 
~dulla^@204~    "tomerDateOfReg] = @Original_Custo~dulla^@204~ ))"
            Me._adapter.DeleteCo~dulla^@204~ Type = System.Data.CommandType.Text
~dulla^@204~ e._adapter.DeleteCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@Origin~dulla^@204~ me", System.Data.SqlDbType.[Char], 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Cust~dulla^@204~ stem.Data.DataRowVersion.Original, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@IsNull_SubCity", System.Data~dulla^@204~ t, 0, System.Data.ParameterDirection.~dulla^@204~ "SubCity", System.Data.DataRowVersion~dulla^@204~ ue, Nothing, "", "", ""))
          ~dulla^@204~ .DeleteCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@Original_SubCity~dulla^@204~ a.SqlDbType.[Char], 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "SubCity", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.DeleteCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ le", System.Data.SqlDbType.Int, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "Kebele"~dulla^@204~ .DataRowVersion.Original, true, Nothi~dulla^@204~ "))
            Me._adapter.DeleteCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ riginal_Kebele", System.Data.SqlDbTyp~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ e", System.Data.DataRowVersion.Origin~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@IsNull_HouseNo", Syste~dulla^@204~ ype.Int, 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "HouseNo", System.Data.DataRowV~dulla^@204~ al, true, Nothing, "", "", ""))
    ~dulla^@204~ dapter.DeleteCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@Original_H~dulla^@204~ em.Data.SqlDbType.[Char], 0, System.D~dulla^@204~ Direction.Input, 0, 0, "HouseNo", Sys~dulla^@204~ RowVersion.Original, false, Nothing, ~dulla^@204~ 
            Me._adapter.DeleteComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ l_Tel", System.Data.SqlDbType.Int, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Tel"~dulla^@204~ .DataRowVersion.Original, true, Nothi~dulla^@204~ "))
            Me._adapter.DeleteCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ riginal_Tel", System.Data.SqlDbType.[~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ stem.Data.DataRowVersion.Original, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@IsNull_Fax", System.Data.Sql~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@Original_Fax", System.Da~dulla^@204~ [Char], 0, System.Data.ParameterDirec~dulla^@204~ , 0, "Fax", System.Data.DataRowVersio~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.DeleteCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@IsNull_PostalA~dulla^@204~ em.Data.SqlDbType.Int, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "PostalAddress", ~dulla^@204~ ataRowVersion.Original, true, Nothing~dulla^@204~ )
            Me._adapter.DeleteComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ginal_PostalAddress", System.Data.Sql~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ PostalAddress", System.Data.DataRowVe~dulla^@204~ l, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.DeleteCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@IsNull_Ema~dulla^@204~ ata.SqlDbType.Int, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "Email", System.Data.~dulla^@204~ n.Original, true, Nothing, "", "", ""~dulla^@204~    Me._adapter.DeleteCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Or~dulla^@204~ , System.Data.SqlDbType.[Char], 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "Email",~dulla^@204~ DataRowVersion.Original, false, Nothi~dulla^@204~ "))
            Me._adapter.DeleteCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ sNull_CustomerVATRegNo", System.Data.~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ CustomerVATRegNo", System.Data.DataRo~dulla^@204~ inal, true, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.DeleteCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@Original~dulla^@204~ egNo", System.Data.SqlDbType.NVarChar~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ gNo", System.Data.DataRowVersion.Orig~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ eteCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@IsNull_CustomerTINNo~dulla^@204~ a.SqlDbType.Int, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "CustomerTINNo", System.Data.DataRowVersion.Original, true, Nothi~dulla^@204~ "))
            Me._adapter.DeleteCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ riginal_CustomerTINNo", System.Data.S~dulla^@204~ r], 0, System.Data.ParameterDirection~dulla^@204~  "CustomerTINNo", System.Data.DataRow~dulla^@204~ nal, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.DeleteCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@IsNull_C~dulla^@204~ Reg", System.Data.SqlDbType.Int, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "Custom~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Original_CustomerDateOfReg~dulla^@204~ a.SqlDbType.DateTime, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "CustomerDateOfReg~dulla^@204~ a.DataRowVersion.Original, false, Not~dulla^@204~  ""))
            Me._adapter.Insert~dulla^@204~  System.Data.SqlClient.SqlCommand
  ~dulla^@204~ _adapter.InsertCommand.Connection = M~dulla^@204~ 
            Me._adapter.InsertComman~dulla^@204~  = "INSERT INTO [dbo].[Customers] ([C~dulla^@204~  [SubCity], [Kebele], [HouseNo], [T"&~dulla^@204~         "el], [Fax], [PostalAddress],~dulla^@204~ stomerVATRegNo], [CustomerTINNo], [Cu~dulla^@204~             "omerDateOfReg]) VALUES (~dulla^@204~ , @SubCity, @Kebele, @HouseNo, @Tel, ~dulla^@204~                 "@PostalAddress, @Ema~dulla^@204~ VATRegNo, @CustomerTINNo, @CustomerDa~dulla^@204~ obal.Microsoft.VisualBasic.ChrW(13)&G~dulla^@204~ ft.VisualBasic.ChrW(10)&"SELECT Custo~dulla^@204~ ity, Kebele, HouseNo, Tel, Fax, Posta~dulla^@204~ il, "& _ 
                "CustomerV~dulla^@204~ omerTINNo, CustomerDateOfReg FROM Cus~dulla^@204~ (Custome"& _ 
                "rName~dulla^@204~ ame)"
            Me._adapter.Insert~dulla^@204~ ndType = System.Data.CommandType.Text~dulla^@204~  Me._adapter.InsertCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Cust~dulla^@204~ stem.Data.SqlDbType.[Char], 0, System~dulla^@204~ erDirection.Input, 0, 0, "CustomerNam~dulla^@204~ ta.DataRowVersion.Current, false, Not~dulla^@204~  ""))
            Me._adapter.Insert~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @SubCity", System.Data.SqlDbType.[Cha~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ ystem.Data.DataRowVersion.Current, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Kebele", System.Data.SqlDbTy~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ le", System.Data.DataRowVersion.Curre~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ tCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@HouseNo", System.Data.~dulla^@204~ ar], 0, System.Data.ParameterDirectio~dulla^@204~ , "HouseNo", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.InsertCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Tel", System.D~dulla^@204~ .[Char], 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "Tel", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.InsertCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Fax", System.D~dulla^@204~ .[Char], 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "Fax", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.InsertCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@PostalAddress"~dulla^@204~ .SqlDbType.[Char], 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "PostalAddress", Syst~dulla^@204~ owVersion.Current, false, Nothing, ""~dulla^@204~            Me._adapter.InsertCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~  System.Data.SqlDbType.[Char], 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "Email", ~dulla^@204~ ataRowVersion.Current, false, Nothing~dulla^@204~ )
            Me._adapter.InsertComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ tomerVATRegNo", System.Data.SqlDbType~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ omerVATRegNo", System.Data.DataRowVer~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.InsertCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@CustomerTINN~dulla^@204~ ta.SqlDbType.[Char], 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "CustomerTINNo", Sy~dulla^@204~ aRowVersion.Current, false, Nothing, ~dulla^@204~ 
            Me._adapter.InsertComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ merDateOfReg", System.Data.SqlDbType.~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ merDateOfReg", System.Data.DataRowVer~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.UpdateCommand = New System.Data.~dulla^@204~ Command
            Me._adapter.Upda~dulla^@204~ nection = Me.Connection
            ~dulla^@204~ pdateCommand.CommandText = "UPDATE [d~dulla^@204~ s] SET [CustomerName] = @CustomerName~dulla^@204~  @SubCity"& _ 
                ", [K~dulla^@204~ ele, [HouseNo] = @HouseNo, [Tel] = @T~dulla^@204~ Fax, [PostalA"& _ 
                "~dulla^@204~ stalAddress, [Email] = @Email, [Custo~dulla^@204~ = @CustomerVATReg"& _ 
             ~dulla^@204~ omerTINNo] = @CustomerTINNo, [Custome~dulla^@204~  @CustomerDateOfReg W"& _ 
         ~dulla^@204~ (([CustomerName] = @Original_Customer~dulla^@204~ IsNull_SubCity = 1 AND [S"& _ 
     ~dulla^@204~ bCity] IS NULL) OR ([SubCity] = @Orig~dulla^@204~ ) AND ((@IsNull_Kebele = 1 AN"& _ 
 ~dulla^@204~   "D [Kebele] IS NULL) OR ([Kebele] =~dulla^@204~ bele)) AND ((@IsNull_HouseNo = 1 "& _~dulla^@204~       "AND [HouseNo] IS NULL) OR ([Ho~dulla^@204~ ginal_HouseNo)) AND ((@IsNull_Tel = 1~dulla^@204~           " AND [Tel] IS NULL) OR ([T~dulla^@204~ al_Tel)) AND ((@IsNull_Fax = 1 AND [F~dulla^@204~               "IS NULL) OR ([Fax] = @~dulla^@204~ ) AND ((@IsNull_PostalAddress = 1 AND~dulla^@204~ 
                "Address] IS NULL) ~dulla^@204~ dress] = @Original_PostalAddress)) AN~dulla^@204~ & _ 
                "Email = 1 AND ~dulla^@204~ LL) OR ([Email] = @Original_Email)) A~dulla^@204~ Cus"& _ 
                "tomerVATRe~dulla^@204~ CustomerVATRegNo] IS NULL) OR ([Custo~dulla^@204~ = @Orig"& _ 
                "inal_C~dulla^@204~ No)) AND ((@IsNull_CustomerTINNo = 1 ~dulla^@204~ TINNo] IS N"& _ 
                "UL~dulla^@204~ merTINNo] = @Original_CustomerTINNo))~dulla^@204~ l_CustomerDateO"& _ 
               ~dulla^@204~ D [CustomerDateOfReg] IS NULL) OR ([C~dulla^@204~ Reg] = @Original_Cu"& _ 
           ~dulla^@204~ ateOfReg)));"&Global.Microsoft.Visual~dulla^@204~ )&Global.Microsoft.VisualBasic.ChrW(1~dulla^@204~ stomerName, SubCity, Kebele, HouseNo,~dulla^@204~ "& _ 
                "stalAddress, ~dulla^@204~ erVATRegNo, CustomerTINNo, CustomerDa~dulla^@204~ Cust"& _ 
                "omers WHE~dulla^@204~ ame = @CustomerName)"
            Me~dulla^@204~ ateCommand.CommandType = System.Data.~dulla^@204~ ext
            Me._adapter.UpdateCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ ustomerName", System.Data.SqlDbType.[~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ Name", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@SubCity", System.Dat~dulla^@204~ Char], 0, System.Data.ParameterDirect~dulla^@204~  0, "SubCity", System.Data.DataRowVer~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.UpdateCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@Kebele", Sys~dulla^@204~ bType.[Char], 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "Kebele", System.Data.Data~dulla^@204~ rrent, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.UpdateCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@HouseN~dulla^@204~ ta.SqlDbType.[Char], 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "HouseNo", System.D~dulla^@204~ rsion.Current, false, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter("@Tel", System.Data.SqlDbType.[Char], 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "Tel", ~dulla^@204~ ataRowVersion.Current, false, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ", System.Data.SqlDbType.[Char], 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "Fax", ~dulla^@204~ ataRowVersion.Current, false, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ talAddress", System.Data.SqlDbType.[C~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ ress", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@Email", System.Data.~dulla^@204~ ar], 0, System.Data.ParameterDirectio~dulla^@204~ , "Email", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@CustomerVATRegNo~dulla^@204~ a.SqlDbType.NVarChar, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "CustomerVATRegNo"~dulla^@204~ .DataRowVersion.Current, false, Nothi~dulla^@204~ "))
            Me._adapter.UpdateCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ ustomerTINNo", System.Data.SqlDbType.~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ rTINNo", System.Data.DataRowVersion.C~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ pdateCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@CustomerDateOfReg"~dulla^@204~ .SqlDbType.DateTime, 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "CustomerDateOfReg"~dulla^@204~ .DataRowVersion.Current, false, Nothi~dulla^@204~ "))
            Me._adapter.UpdateCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ riginal_CustomerName", System.Data.Sq~dulla^@204~ ], 0, System.Data.ParameterDirection.~dulla^@204~ "CustomerName", System.Data.DataRowVe~dulla^@204~ l, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@IsNull_Sub~dulla^@204~ .Data.SqlDbType.Int, 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "SubCity", System.D~dulla^@204~ rsion.Original, true, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ bCity", System.Data.SqlDbType.[Char],~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "S~dulla^@204~ em.Data.DataRowVersion.Original, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@IsNull_Kebele", System.Data.Sq~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ bele", System.Data.DataRowVersion.Ori~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@Original_Kebele", Sy~dulla^@204~ DbType.[Char], 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "Kebele", System.Data.Dat~dulla^@204~ riginal, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@IsNu~dulla^@204~ System.Data.SqlDbType.Int, 0, System.~dulla^@204~ rDirection.Input, 0, 0, "HouseNo", Sy~dulla^@204~ aRowVersion.Original, true, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ nal_HouseNo", System.Data.SqlDbType.[~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ , System.Data.DataRowVersion.Original~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@IsNull_Tel", System.Data~dulla^@204~ t, 0, System.Data.ParameterDirection.~dulla^@204~ "Tel", System.Data.DataRowVersion.Ori~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@Original_Tel", Syste~dulla^@204~ ype.[Char], 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "Tel", System.Data.DataRowVe~dulla^@204~ l, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@IsNull_Fax~dulla^@204~ a.SqlDbType.Int, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "Fax", System.Data.Data~dulla^@204~ iginal, true, Nothing, "", "", ""))
~dulla^@204~ e._adapter.UpdateCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@Origin~dulla^@204~ em.Data.SqlDbType.[Char], 0, System.D~dulla^@204~ Direction.Input, 0, 0, "Fax", System.~dulla^@204~ ersion.Original, false, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ stalAddress", System.Data.SqlDbType.I~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ ss", System.Data.DataRowVersion.Origi~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@Original_PostalAddress~dulla^@204~ a.SqlDbType.[Char], 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "PostalAddress", Sys~dulla^@204~ RowVersion.Original, false, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ l_Email", System.Data.SqlDbType.Int, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "Em~dulla^@204~ Data.DataRowVersion.Original, true, N~dulla^@204~ ", ""))
            Me._adapter.Upda~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@Original_Email", System.Data.SqlDb~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ ail", System.Data.DataRowVersion.Orig~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@IsNull_CustomerVATRe~dulla^@204~ Data.SqlDbType.Int, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "CustomerVATRegNo", ~dulla^@204~ ataRowVersion.Original, true, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ginal_CustomerVATRegNo", System.Data.~dulla^@204~ rChar, 0, System.Data.ParameterDirect~dulla^@204~  0, "CustomerVATRegNo", System.Data.D~dulla^@204~ .Original, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.UpdateCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Is~dulla^@204~ TINNo", System.Data.SqlDbType.Int, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Cust~dulla^@204~ ystem.Data.DataRowVersion.Original, t~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Original_CustomerTINNo", Sys~dulla^@204~ bType.[Char], 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "CustomerTINNo", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ omerDateOfReg", System.Data.SqlDbType~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ ateOfReg", System.Data.DataRowVersion~dulla^@204~ ue, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@Original_Custome~dulla^@204~ System.Data.SqlDbType.DateTime, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "Custome~dulla^@204~ System.Data.DataRowVersion.Original, ~dulla^@204~ g, "", "", ""))
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Private Sub InitConne~dulla^@204~         Me._connection = New System.D~dulla^@204~ .SqlConnection
            Me._conne~dulla^@204~ ionString = Global.InventoryControlSy~dulla^@204~ tings.Default.PurchaseInfoConnection~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ nitCommandCollection()
            M~dulla^@204~ lection = New System.Data.SqlClient.S~dulla^@204~ {}
            Me._commandCollection~dulla^@204~ tem.Data.SqlClient.SqlCommand
      ~dulla^@204~ mandCollection(0).Connection = Me.Con~dulla^@204~         Me._commandCollection(0).Comm~dulla^@204~ LECT CustomerName, SubCity, Kebele, HouseNo, Tel, Fax, PostalAddress, Email, Cu~dulla^@204~           "stomerVATRegNo, CustomerTI~dulla^@204~ DateOfReg FROM dbo.Customers"
      ~dulla^@204~ mandCollection(0).CommandType = Syste~dulla^@204~ dType.Text
        End Sub
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
         System.ComponentModel.Des~dulla^@204~ rdAttribute("vs.data.TableAdapter"), ~dulla^@204~ System.ComponentModel.DataObjectMetho~dulla^@204~ stem.ComponentModel.DataObjectMethodT~dulla^@204~ e)>  _
        Public Overloads Over~dulla^@204~ ion Fill(ByVal dataTable As Inventory~dulla^@204~ DataSet3.CustomersDataTable) As Integ~dulla^@204~    Me.Adapter.SelectCommand = Me.Comm~dulla^@204~ (0)
            If (Me.ClearBeforeFi~dulla^@204~ en
                dataTable.Clear
~dulla^@204~ nd If
            Dim returnValue As~dulla^@204~ .Adapter.Fill(dataTable)
           ~dulla^@204~ nValue
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
         System.ComponentModel.De~dulla^@204~ ordAttribute("vs.data.TableAdapter"),~dulla^@204~  System.ComponentModel.DataObjectMeth~dulla^@204~ ystem.ComponentModel.DataObjectMethod~dulla^@204~ , true)>  _
        Public Overloads~dulla^@204~ Function GetData() As InventoryContro~dulla^@204~ t3.CustomersDataTable
            Me~dulla^@204~ ctCommand = Me.CommandCollection(0)
~dulla^@204~ im dataTable As InventoryControlSyste~dulla^@204~ tomersDataTable = New InventoryContro~dulla^@204~ t3.CustomersDataTable
            Me~dulla^@204~ (dataTable)
            Return dataT~dulla^@204~  End Function
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ stem.ComponentModel.Design.HelpKeywor~dulla^@204~ s.data.TableAdapter")>  _
        Pu~dulla^@204~ s Overridable Function Update(ByVal d~dulla^@204~ nventoryControlSystemDataSet3.Custome~dulla^@204~ As Integer
            Return Me.Ada~dulla^@204~ ataTable)
        End Function
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ ),  _
         System.ComponentModel~dulla^@204~ eywordAttribute("vs.data.TableAdapter~dulla^@204~    Public Overloads Overridable Funct~dulla^@204~ Val dataSet As InventoryControlSystem~dulla^@204~ Integer
            Return Me.Adapte~dulla^@204~ Set, "Customers")
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute(),  _
         System.Compon~dulla^@204~ gn.HelpKeywordAttribute("vs.data.Tabl~dulla^@204~ _
        Public Overloads Overridab~dulla^@204~ pdate(ByVal dataRow As System.Data.Da~dulla^@204~ eger
            Return Me.Adapter.U~dulla^@204~ tem.Data.DataRow() {dataRow})
      ~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute(),  _
         S~dulla^@204~ ntModel.Design.HelpKeywordAttribute("~dulla^@204~ Adapter")>  _
        Public Overloa~dulla^@204~ e Function Update(ByVal dataRows() As~dulla^@204~ DataRow) As Integer
            Retu~dulla^@204~ .Update(dataRows)
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute(),  _
         System.Compon~dulla^@204~ gn.HelpKeywordAttribute("vs.data.Tabl~dulla^@204~ _
         System.ComponentModel.Dat~dulla^@204~ Attribute(System.ComponentModel.DataO~dulla^@204~ pe.Delete, true)>  _
        Public ~dulla^@204~ rridable Function Delete(ByVal Origin~dulla^@204~ me As String, ByVal Original_SubCity ~dulla^@204~ Val Original_Kebele As String, ByVal ~dulla^@204~ eNo As String, ByVal Original_Tel As ~dulla^@204~  Original_Fax As String, ByVal Origin~dulla^@204~ ess As String, ByVal Original_Email A~dulla^@204~ al Original_CustomerVATRegNo As Strin~dulla^@204~ inal_CustomerTINNo As String, ByVal O~dulla^@204~ merDateOfReg As System.Nullable(Of Da~dulla^@204~ er
            If (Original_Customer~dulla^@204~ ng) Then
                Throw New S~dulla^@204~ tNullException("Original_CustomerName~dulla^@204~    Else
                Me.Adapter.D~dulla^@204~ Parameters(0).Value = CType(Original_~dulla^@204~ String)
            End If
        ~dulla^@204~ nal_SubCity Is Nothing) Then
       ~dulla^@204~ dapter.DeleteCommand.Parameters(1).Va~dulla^@204~ ,Object)
                Me.Adapter.~dulla^@204~ .Parameters(2).Value = System.DBNull.~dulla^@204~       Else
                Me.Adapte~dulla^@204~ nd.Parameters(1).Value = CType(0,Obje~dulla^@204~         Me.Adapter.DeleteCommand.Para~dulla^@204~ ue = CType(Original_SubCity,String)
~dulla^@204~ nd If
            If (Original_Kebel~dulla^@204~  Then
                Me.Adapter.Del~dulla^@204~ rameters(3).Value = CType(1,Object)
~dulla^@204~    Me.Adapter.DeleteCommand.Parameter~dulla^@204~ System.DBNull.Value
            Else~dulla^@204~      Me.Adapter.DeleteCommand.Paramet~dulla^@204~ = CType(0,Object)
                Me~dulla^@204~ teCommand.Parameters(4).Value = CType~dulla^@204~ ele,String)
            End If
    ~dulla^@204~ riginal_HouseNo Is Nothing) Then
   ~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(5~dulla^@204~ pe(1,Object)
                Me.Adap~dulla^@204~ mand.Parameters(6).Value = System.DBN~dulla^@204~           Else
                Me.Ad~dulla^@204~ ommand.Parameters(5).Value = CType(0,~dulla^@204~             Me.Adapter.DeleteCommand.~dulla^@204~ .Value = CType(Original_HouseNo,Strin~dulla^@204~    End If
            If (Original_T~dulla^@204~ ) Then
                Me.Adapter.De~dulla^@204~ arameters(7).Value = CType(1,Object)~dulla^@204~     Me.Adapter.DeleteCommand.Paramete~dulla^@204~  System.DBNull.Value
            Els~dulla^@204~       Me.Adapter.DeleteCommand.Parame~dulla^@204~  = CType(0,Object)
                M~dulla^@204~ eteCommand.Parameters(8).Value = CTyp~dulla^@204~ l,String)
            End If
      ~dulla^@204~ ginal_Fax Is Nothing) Then
         ~dulla^@204~ pter.DeleteCommand.Parameters(9).Valu~dulla^@204~ bject)
                Me.Adapter.De~dulla^@204~ arameters(10).Value = System.DBNull.V~dulla^@204~      Else
                Me.Adapter~dulla^@204~ d.Parameters(9).Value = CType(0,Objec~dulla^@204~        Me.Adapter.DeleteCommand.Param~dulla^@204~ ue = CType(Original_Fax,String)
    ~dulla^@204~ f
            If (Original_PostalAdd~dulla^@204~ ng) Then
                Me.Adapter.~dulla^@204~ .Parameters(11).Value = CType(1,Objec~dulla^@204~        Me.Adapter.DeleteCommand.Param~dulla^@204~ ue = System.DBNull.Value
           ~dulla^@204~           Me.Adapter.DeleteCommand.Pa~dulla^@204~ Value = CType(0,Object)
            ~dulla^@204~ r.DeleteCommand.Parameters(12).Value ~dulla^@204~ nal_PostalAddress,String)
          ~dulla^@204~          If (Original_Email Is Nothin~dulla^@204~             Me.Adapter.DeleteCommand.~dulla^@204~ ).Value = CType(1,Object)
          ~dulla^@204~ ter.DeleteCommand.Parameters(14).Valu~dulla^@204~ Null.Value
            Else
       ~dulla^@204~ dapter.DeleteCommand.Parameters(13).V~dulla^@204~ 0,Object)
                Me.Adapter~dulla^@204~ d.Parameters(14).Value = CType(Origin~dulla^@204~ ng)
            End If
            ~dulla^@204~ CustomerVATRegNo Is Nothing) Then
  ~dulla^@204~  Me.Adapter.DeleteCommand.Parameters(~dulla^@204~ Type(1,Object)
                Me.Ad~dulla^@204~ ommand.Parameters(16).Value = System.~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(15).Value = CTyp~dulla^@204~                 Me.Adapter.DeleteComm~dulla^@204~ s(16).Value = CType(Original_Customer~dulla^@204~ ng)
            End If
            ~dulla^@204~ CustomerTINNo Is Nothing) Then
     ~dulla^@204~ .Adapter.DeleteCommand.Parameters(17)~dulla^@204~ e(1,Object)
                Me.Adapt~dulla^@204~ and.Parameters(18).Value = System.DBN~dulla^@204~           Else
                Me.Ad~dulla^@204~ ommand.Parameters(17).Value = CType(0~dulla^@204~              Me.Adapter.DeleteCommand~dulla^@204~ 8).Value = CType(Original_CustomerTIN~dulla^@204~            End If
            If (Or~dulla^@204~ erDateOfReg.HasValue = true) Then
  ~dulla^@204~  Me.Adapter.DeleteCommand.Parameters(~dulla^@204~ Type(0,Object)
                Me.Ad~dulla^@204~ ommand.Parameters(20).Value = CType(Original_CustomerDateOfReg.Value,Date)
   ~dulla^@204~ 
                Me.Adapter.DeleteCo~dulla^@204~ ers(19).Value = CType(1,Object)
    ~dulla^@204~ e.Adapter.DeleteCommand.Parameters(20~dulla^@204~ tem.DBNull.Value
            End If~dulla^@204~ Dim previousConnectionState As System~dulla^@204~ ionState = Me.Adapter.DeleteCommand.C~dulla^@204~ te
            If ((Me.Adapter.Delet~dulla^@204~ ection.State And System.Data.Connecti~dulla^@204~   _
                        <> Syste~dulla^@204~ tionState.Open) Then
               ~dulla^@204~ eleteCommand.Connection.Open
       ~dulla^@204~             Try 
                Dim~dulla^@204~ As Integer = Me.Adapter.DeleteCommand~dulla^@204~ ery
                Return returnVal~dulla^@204~    Finally
                If (previ~dulla^@204~ State = System.Data.ConnectionState.C~dulla^@204~                     Me.Adapter.Delete~dulla^@204~ ction.Close
                End If
~dulla^@204~ nd Try
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
         System.ComponentModel.De~dulla^@204~ ordAttribute("vs.data.TableAdapter"),~dulla^@204~  System.ComponentModel.DataObjectMeth~dulla^@204~ ystem.ComponentModel.DataObjectMethod~dulla^@204~ true)>  _
        Public Overloads O~dulla^@204~ nction Insert(ByVal CustomerName As S~dulla^@204~ SubCity As String, ByVal Kebele As St~dulla^@204~ ouseNo As String, ByVal Tel As String~dulla^@204~ s String, ByVal PostalAddress As Stri~dulla^@204~ il As String, ByVal CustomerVATRegNo ~dulla^@204~ Val CustomerTINNo As String, ByVal Cu~dulla^@204~ eg As System.Nullable(Of Date)) As In~dulla^@204~       If (CustomerName Is Nothing) Th~dulla^@204~        Throw New System.ArgumentNullE~dulla^@204~ tomerName")
            Else
      ~dulla^@204~ Adapter.InsertCommand.Parameters(0).V~dulla^@204~ CustomerName,String)
            End~dulla^@204~     If (SubCity Is Nothing) Then
   ~dulla^@204~ Me.Adapter.InsertCommand.Parameters(1~dulla^@204~ tem.DBNull.Value
            Else
 ~dulla^@204~   Me.Adapter.InsertCommand.Parameters~dulla^@204~ Type(SubCity,String)
            End~dulla^@204~     If (Kebele Is Nothing) Then
    ~dulla^@204~ e.Adapter.InsertCommand.Parameters(2)~dulla^@204~ em.DBNull.Value
            Else
  ~dulla^@204~  Me.Adapter.InsertCommand.Parameters(~dulla^@204~ ype(Kebele,String)
            End I~dulla^@204~   If (HouseNo Is Nothing) Then
     ~dulla^@204~ .Adapter.InsertCommand.Parameters(3).~dulla^@204~ m.DBNull.Value
            Else
   ~dulla^@204~ Me.Adapter.InsertCommand.Parameters(3~dulla^@204~ pe(HouseNo,String)
            End I~dulla^@204~   If (Tel Is Nothing) Then
         ~dulla^@204~ pter.InsertCommand.Parameters(4).Valu~dulla^@204~ Null.Value
            Else
       ~dulla^@204~ dapter.InsertCommand.Parameters(4).Va~dulla^@204~ el,String)
            End If
     ~dulla^@204~ x Is Nothing) Then
                M~dulla^@204~ ertCommand.Parameters(5).Value = Syst~dulla^@204~ ue
            Else
               ~dulla^@204~ nsertCommand.Parameters(5).Value = CT~dulla^@204~ g)
            End If
            I~dulla^@204~ ess Is Nothing) Then
               ~dulla^@204~ nsertCommand.Parameters(6).Value = Sy~dulla^@204~ alue
            Else
             ~dulla^@204~ .InsertCommand.Parameters(6).Value = ~dulla^@204~ ddress,String)
            End If
 ~dulla^@204~  (Email Is Nothing) Then
           ~dulla^@204~ er.InsertCommand.Parameters(7).Value ~dulla^@204~ ll.Value
            Else
         ~dulla^@204~ pter.InsertCommand.Parameters(7).Valu~dulla^@204~ il,String)
            End If
     ~dulla^@204~ stomerVATRegNo Is Nothing) Then
    ~dulla^@204~ e.Adapter.InsertCommand.Parameters(8)~dulla^@204~ em.DBNull.Value
            Else
  ~dulla^@204~  Me.Adapter.InsertCommand.Parameters(~dulla^@204~ ype(CustomerVATRegNo,String)
       ~dulla^@204~             If (CustomerTINNo Is Noth~dulla^@204~               Me.Adapter.InsertComman~dulla^@204~ 9).Value = System.DBNull.Value
     ~dulla^@204~                 Me.Adapter.InsertComm~dulla^@204~ s(9).Value = CType(CustomerTINNo,Stri~dulla^@204~     End If
            If (CustomerD~dulla^@204~ alue = true) Then
                Me~dulla^@204~ rtCommand.Parameters(10).Value = CTyp~dulla^@204~ eOfReg.Value,Date)
            Else~dulla^@204~     Me.Adapter.InsertCommand.Paramete~dulla^@204~ = System.DBNull.Value
            En~dulla^@204~      Dim previousConnectionState As S~dulla^@204~ nnectionState = Me.Adapter.InsertComm~dulla^@204~ n.State
            If ((Me.Adapter.~dulla^@204~ .Connection.State And System.Data.Con~dulla^@204~ Open)  _
                        <> ~dulla^@204~ onnectionState.Open) Then
          ~dulla^@204~ ter.InsertCommand.Connection.Open
  ~dulla^@204~  If
            Try 
              ~dulla^@204~ alue As Integer = Me.Adapter.InsertCo~dulla^@204~ NonQuery
                Return retu~dulla^@204~         Finally
                If (~dulla^@204~ ctionState = System.Data.ConnectionSt~dulla^@204~ hen
                    Me.Adapter.I~dulla^@204~ Connection.Close
                End~dulla^@204~     End Try
        End Function
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e(),  _
         System.ComponentMod~dulla^@204~ pKeywordAttribute("vs.data.TableAdapt~dulla^@204~       System.ComponentModel.DataObjec~dulla^@204~ ute(System.ComponentModel.DataObjectM~dulla^@204~ ate, true)>  _
        Public Overlo~dulla^@204~ le Function Update( _
              ~dulla^@204~ ustomerName As String,  _
          ~dulla^@204~ al SubCity As String,  _
           ~dulla^@204~ l Kebele As String,  _
             ~dulla^@204~ HouseNo As String,  _
              ~dulla^@204~ el As String,  _
                   ~dulla^@204~  String,  _
                    ByVa~dulla^@204~ ss As String,  _
                   ~dulla^@204~ As String,  _
                    By~dulla^@204~ ATRegNo As String,  _
              ~dulla^@204~ ustomerTINNo As String,  _
         ~dulla^@204~ Val CustomerDateOfReg As System.Nulla~dulla^@204~   _
                    ByVal Origin~dulla^@204~ me As String,  _
                   ~dulla^@204~ al_SubCity As String,  _
           ~dulla^@204~ l Original_Kebele As String,  _
    ~dulla^@204~    ByVal Original_HouseNo As String, ~dulla^@204~            ByVal Original_Tel As Stri~dulla^@204~                ByVal Original_Fax As ~dulla^@204~                    ByVal Original_Pos~dulla^@204~  String,  _
                    ByVa~dulla^@204~ ail As String,  _
                  ~dulla^@204~ nal_CustomerVATRegNo As String,  _
 ~dulla^@204~       ByVal Original_CustomerTINNo As~dulla^@204~                     ByVal Original_Cu~dulla^@204~ eg As System.Nullable(Of Date)) As In~dulla^@204~       If (CustomerName Is Nothing) Th~dulla^@204~        Throw New System.ArgumentNullE~dulla^@204~ tomerName")
            Else
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(0).V~dulla^@204~ CustomerName,String)
            End~dulla^@204~     If (SubCity Is Nothing) Then
   ~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(1~dulla^@204~ tem.DBNull.Value
            Else
 ~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ Type(SubCity,String)
            End~dulla^@204~     If (Kebele Is Nothing) Then
    ~dulla^@204~ e.Adapter.UpdateCommand.Parameters(2)~dulla^@204~ em.DBNull.Value
            Else
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ ype(Kebele,String)
            End I~dulla^@204~   If (HouseNo Is Nothing) Then
     ~dulla^@204~ .Adapter.UpdateCommand.Parameters(3).~dulla^@204~ m.DBNull.Value
            Else
   ~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(3~dulla^@204~ pe(HouseNo,String)
            End I~dulla^@204~   If (Tel Is Nothing) Then
         ~dulla^@204~ pter.UpdateCommand.Parameters(4).Valu~dulla^@204~ Null.Value
            Else
       ~dulla^@204~ dapter.UpdateCommand.Parameters(4).Va~dulla^@204~ el,String)
            End If
     ~dulla^@204~ x Is Nothing) Then
                M~dulla^@204~ ateCommand.Parameters(5).Value = Syst~dulla^@204~ ue
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Va~dulla^@204~ ax,String)
            End If
     ~dulla^@204~ stalAddress Is Nothing) Then
       ~dulla^@204~ dapter.UpdateCommand.Parameters(6).Va~dulla^@204~ DBNull.Value
            Else
     ~dulla^@204~ .Adapter.UpdateCommand.Parameters(6).~dulla^@204~ (PostalAddress,String)
            E~dulla^@204~       If (Email Is Nothing) Then
   ~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(7~dulla^@204~ tem.DBNull.Value
            Else
 ~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ Type(Email,String)
            End I~dulla^@204~   If (CustomerVATRegNo Is Nothing) Th~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ e = System.DBNull.Value
            ~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ lue = CType(CustomerVATRegNo,String)~dulla^@204~ End If
            If (CustomerTINNo~dulla^@204~ Then
                Me.Adapter.Upda~dulla^@204~ ameters(9).Value = System.DBNull.Valu~dulla^@204~   Else
                Me.Adapter.Up~dulla^@204~ arameters(9).Value = CType(CustomerTI~dulla^@204~             End If
            If (C~dulla^@204~ Reg.HasValue = true) Then
          ~dulla^@204~ ter.UpdateCommand.Parameters(10).Valu~dulla^@204~ tomerDateOfReg.Value,Date)
         ~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ ).Value = System.DBNull.Value
      ~dulla^@204~ 
            If (Original_CustomerNam~dulla^@204~  Then
                Throw New Syst~dulla^@204~ llException("Original_CustomerName")~dulla^@204~ Else
                Me.Adapter.Upda~dulla^@204~ ameters(11).Value = CType(Original_Cu~dulla^@204~ ring)
            End If
          ~dulla^@204~ l_SubCity Is Nothing) Then
         ~dulla^@204~ pter.UpdateCommand.Parameters(12).Val~dulla^@204~ Object)
                Me.Adapter.U~dulla^@204~ Parameters(13).Value = System.DBNull.~dulla^@204~       Else
                Me.Adapte~dulla^@204~ nd.Parameters(12).Value = CType(0,Obj~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ alue = CType(Original_SubCity,String)~dulla^@204~  End If
            If (Original_Keb~dulla^@204~ g) Then
                Me.Adapter.U~dulla^@204~ Parameters(14).Value = CType(1,Object~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~ e = System.DBNull.Value
            ~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ alue = CType(0,Object)
             ~dulla^@204~ .UpdateCommand.Parameters(15).Value =~dulla^@204~ al_Kebele,String)
            End If~dulla^@204~  If (Original_HouseNo Is Nothing) The~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~ e = CType(1,Object)
                ~dulla^@204~ dateCommand.Parameters(17).Value = Sy~dulla^@204~ alue
            Else
             ~dulla^@204~ .UpdateCommand.Parameters(16).Value =~dulla^@204~ ct)
                Me.Adapter.Updat~dulla^@204~ meters(17).Value = CType(Original_Hou~dulla^@204~ 
            End If
            If (~dulla^@204~ Is Nothing) Then
                Me.~dulla^@204~ eCommand.Parameters(18).Value = CType~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ (19).Value = System.DBNull.Value
   ~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(18).Value = CType(0,Object)
    ~dulla^@204~ e.Adapter.UpdateCommand.Parameters(19~dulla^@204~ pe(Original_Tel,String)
            ~dulla^@204~        If (Original_Fax Is Nothing) T~dulla^@204~         Me.Adapter.UpdateCommand.Para~dulla^@204~ lue = CType(1,Object)
              ~dulla^@204~ UpdateCommand.Parameters(21).Value = ~dulla^@204~ .Value
            Else
           ~dulla^@204~ er.UpdateCommand.Parameters(20).Value~dulla^@204~ ject)
                Me.Adapter.Upd~dulla^@204~ rameters(21).Value = CType(Original_F~dulla^@204~            End If
            If (Or~dulla^@204~ Address Is Nothing) Then
           ~dulla^@204~ er.UpdateCommand.Parameters(22).Value~dulla^@204~ ject)
                Me.Adapter.Upd~dulla^@204~ rameters(23).Value = System.DBNull.Va~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(22).Value = CType(0,Objec~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ ue = CType(Original_PostalAddress,Str~dulla^@204~      End If
            If (Original~dulla^@204~ hing) Then
                Me.Adapte~dulla^@204~ nd.Parameters(24).Value = CType(1,Obj~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ alue = System.DBNull.Value
         ~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ ).Value = CType(0,Object)
          ~dulla^@204~ ter.UpdateCommand.Parameters(25).Valu~dulla^@204~ ginal_Email,String)
            End ~dulla^@204~    If (Original_CustomerVATRegNo Is N~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(26).Value = CType(1,Object)
     ~dulla^@204~ .Adapter.UpdateCommand.Parameters(27)~dulla^@204~ em.DBNull.Value
            Else
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ Type(0,Object)
                Me.Ad~dulla^@204~ ommand.Parameters(27).Value = CType(O~dulla^@204~ merVATRegNo,String)
            End ~dulla^@204~    If (Original_CustomerTINNo Is Noth~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 28).Value = CType(1,Object)
        ~dulla^@204~ apter.UpdateCommand.Parameters(29).Va~dulla^@204~ DBNull.Value
            Else
     ~dulla^@204~ .Adapter.UpdateCommand.Parameters(28)~dulla^@204~ e(0,Object)
                Me.Adapt~dulla^@204~ and.Parameters(29).Value = CType(Orig~dulla^@204~ TINNo,String)
            End If
  ~dulla^@204~ (Original_CustomerDateOfReg.HasValue ~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(30).Value = CType(0,Object)
     ~dulla^@204~ .Adapter.UpdateCommand.Parameters(31)~dulla^@204~ e(Original_CustomerDateOfReg.Value,Da~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(30).Value = CType(1,Objec~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ ue = System.DBNull.Value
           ~dulla^@204~         Dim previousConnectionState A~dulla^@204~ .ConnectionState = Me.Adapter.UpdateC~dulla^@204~ tion.State
            If ((Me.Adapt~dulla^@204~ and.Connection.State And System.Data.~dulla^@204~ te.Open)  _
                        ~dulla^@204~ a.ConnectionState.Open) Then
       ~dulla^@204~ dapter.UpdateCommand.Connection.Open~dulla^@204~ End If
            Try 
           ~dulla^@204~ rnValue As Integer = Me.Adapter.Updat~dulla^@204~ uteNonQuery
                Return r~dulla^@204~            Finally
                I~dulla^@204~ nnectionState = System.Data.Connectio~dulla^@204~ ) Then
                    Me.Adapte~dulla^@204~ nd.Connection.Close
                ~dulla^@204~        End Try
        End Function~dulla^@204~ s
    
    <System.CodeDom.Compiler~dulla^@204~ eAttribute("System.Data.Design.TypedD~dulla^@204~ or", "2.0.0.0"),  _
     System.Comp~dulla^@204~ signerCategoryAttribute("code"),  _
~dulla^@204~ omponentModel.ToolboxItem(true),  _
~dulla^@204~ omponentModel.DataObjectAttribute(tru~dulla^@204~ System.ComponentModel.DesignerAttribu~dulla^@204~ .VSDesigner.DataSource.Design.TableAd~dulla^@204~ , Microsoft.VSDesigner"& _ 
        ~dulla^@204~ 0.0.0, Culture=neutral, PublicKeyToke~dulla^@204~ 50a3a"),  _
     System.ComponentMod~dulla^@204~ pKeywordAttribute("vs.data.TableAdapt~dulla^@204~  Partial Public Class OrderTableAdapt~dulla^@204~ nherits System.ComponentModel.Compone~dulla^@204~ 
        Private WithEvents _adapter ~dulla^@204~ a.SqlClient.SqlDataAdapter
        ~dulla^@204~ ate _connection As System.Data.SqlCli~dulla^@204~ tion
        
        Private _comm~dulla^@204~ () As System.Data.SqlClient.SqlComman~dulla^@204~         Private _clearBeforeFill As B~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Sub~dulla^@204~        MyBase.New
            Me.Cle~dulla^@204~ = true
        End Sub
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Private ReadOnly Property Adap~dulla^@204~ em.Data.SqlClient.SqlDataAdapter
   ~dulla^@204~ 
                If (Me._adapter Is Nothing) Then
                    Me.InitA~dulla^@204~            End If
                Re~dulla^@204~ ter
            End Get
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Friend ~dulla^@204~ ection() As System.Data.SqlClient.Sql~dulla^@204~            Get
                If (M~dulla^@204~  Is Nothing) Then
                  ~dulla^@204~ ection
                End If
     ~dulla^@204~ turn Me._connection
            End ~dulla^@204~     Set
                Me._connecti~dulla^@204~                If (Not (Me.Adapter.In~dulla^@204~ Is Nothing) Then
                   ~dulla^@204~ nsertCommand.Connection = value
    ~dulla^@204~ nd If
                If (Not (Me.Ad~dulla^@204~ ommand) Is Nothing) Then
           ~dulla^@204~ dapter.DeleteCommand.Connection = val~dulla^@204~        End If
                If (No~dulla^@204~ .UpdateCommand) Is Nothing) Then
   ~dulla^@204~     Me.Adapter.UpdateCommand.Connecti~dulla^@204~                End If
              ~dulla^@204~ teger = 0
                Do While (~dulla^@204~ dCollection.Length)
                ~dulla^@204~ Me.CommandCollection(i)) Is Nothing) ~dulla^@204~                  CType(Me.CommandColl~dulla^@204~ tem.Data.SqlClient.SqlCommand).Connec~dulla^@204~ 
                    End If
        ~dulla^@204~  = (i + 1)
                Loop
   ~dulla^@204~ Set
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Protected ReadOnly Property ~dulla^@204~ tion() As System.Data.SqlClient.SqlCo~dulla^@204~         Get
                If (Me._~dulla^@204~ tion Is Nothing) Then
              ~dulla^@204~ CommandCollection
                En~dulla^@204~          Return Me._commandCollection~dulla^@204~  End Get
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Property ClearBe~dulla^@204~  Boolean
            Get
          ~dulla^@204~ Me._clearBeforeFill
            End ~dulla^@204~     Set
                Me._clearBef~dulla^@204~ ue
            End Set
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Private ~dulla^@204~ er()
            Me._adapter = New S~dulla^@204~ lClient.SqlDataAdapter
            D~dulla^@204~ ng As System.Data.Common.DataTableMap~dulla^@204~ stem.Data.Common.DataTableMapping
  ~dulla^@204~ leMapping.SourceTable = "Table"
    ~dulla^@204~ Mapping.DataSetTable = "Order"
     ~dulla^@204~ apping.ColumnMappings.Add("OrderNo", ~dulla^@204~            tableMapping.ColumnMapping~dulla^@204~ ", "PartNo")
            tableMappin~dulla^@204~ ngs.Add("Description", "Description")~dulla^@204~  tableMapping.ColumnMappings.Add("Req~dulla^@204~ ", "RequiredQuantity")
            M~dulla^@204~ bleMappings.Add(tableMapping)
      ~dulla^@204~ pter.DeleteCommand = New System.Data.~dulla^@204~ Command
            Me._adapter.Dele~dulla^@204~ nection = Me.Connection
            ~dulla^@204~ eleteCommand.CommandText = "DELETE FR~dulla^@204~ er] WHERE (([OrderNo] = @Original_Ord~dulla^@204~ artNo] = "& _ 
                "@Ori~dulla^@204~  AND ([Description] = @Original_Descr~dulla^@204~ [RequiredQuan"& _ 
                "~dulla^@204~ inal_RequiredQuantity))"
           ~dulla^@204~ DeleteCommand.CommandType = System.Da~dulla^@204~ e.Text
            Me._adapter.Delet~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@Original_OrderNo", System.Data.SqlD~dulla^@204~ r, 0, System.Data.ParameterDirection.~dulla^@204~ "OrderNo", System.Data.DataRowVersion~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.DeleteCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@Original_PartNo~dulla^@204~ a.SqlDbType.NVarChar, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "PartNo", System.D~dulla^@204~ rsion.Original, false, Nothing, "", "~dulla^@204~         Me._adapter.DeleteCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ escription", System.Data.SqlDbType.[C~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ on", System.Data.DataRowVersion.Origi~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@Original_RequiredQuan~dulla^@204~ .Data.SqlDbType.Int, 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "RequiredQuantity",~dulla^@204~ DataRowVersion.Original, false, Nothi~dulla^@204~ "))
            Me._adapter.InsertCo~dulla^@204~ ystem.Data.SqlClient.SqlCommand
    ~dulla^@204~ dapter.InsertCommand.Connection = Me.~dulla^@204~            Me._adapter.InsertCommand.~dulla^@204~  "INSERT INTO [dbo].[Order] ([OrderNo~dulla^@204~ [Description], [RequiredQuantity]"& _~dulla^@204~       ") VALUES (@OrderNo, @PartNo, @~dulla^@204~ @RequiredQuantity);"&Global.Microsoft~dulla^@204~ ChrW(13)&Global.Microsoft.VisualBasic~dulla^@204~ LECT OrderNo, "& _ 
                ~dulla^@204~ ription, RequiredQuantity FROM [Order~dulla^@204~ rNo = @OrderNo)"
            Me._ada~dulla^@204~ mmand.CommandType = System.Data.Comma~dulla^@204~             Me._adapter.InsertCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ o", System.Data.SqlDbType.NVarChar, 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Ord~dulla^@204~ .Data.DataRowVersion.Current, false, ~dulla^@204~ "", ""))
            Me._adapter.Ins~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@PartNo", System.Data.SqlDbType.NV~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ , System.Data.DataRowVersion.Current,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@Description", System.Data~dulla^@204~ har], 0, System.Data.ParameterDirecti~dulla^@204~ 0, "Description", System.Data.DataRow~dulla^@204~ nt, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.InsertCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@RequiredQ~dulla^@204~ tem.Data.SqlDbType.Int, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "RequiredQuantit~dulla^@204~ ta.DataRowVersion.Current, false, Not~dulla^@204~  ""))
            Me._adapter.Update~dulla^@204~  System.Data.SqlClient.SqlCommand
  ~dulla^@204~ _adapter.UpdateCommand.Connection = M~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~  = "UPDATE [dbo].[Order] SET [OrderNo~dulla^@204~  [PartNo] = @PartNo, [Description] "&~dulla^@204~         "= @Description, [RequiredQua~dulla^@204~ uiredQuantity WHERE (([OrderNo] = @Or~dulla^@204~             "inal_OrderNo) AND ([Part~dulla^@204~ al_PartNo) AND ([Description] = @Orig~dulla^@204~                 "escription) AND ([Re~dulla^@204~ y] = @Original_RequiredQuantity));"&G~dulla^@204~ ft.VisualBasic.ChrW(13)&Global.Micros~dulla^@204~ ic.ChrW(10)&"SELECT Orde"& _ 
      ~dulla^@204~ o, PartNo, Description, RequiredQuant~dulla^@204~ er] WHERE (OrderNo = @OrderN"& _ 
  ~dulla^@204~  "o)"
            Me._adapter.Update~dulla^@204~ ndType = System.Data.CommandType.Text~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Orde~dulla^@204~ Data.SqlDbType.NVarChar, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "OrderNo", Syst~dulla^@204~ owVersion.Current, false, Nothing, ""~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ , System.Data.SqlDbType.NVarChar, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "PartN~dulla^@204~ ta.DataRowVersion.Current, false, Not~dulla^@204~  ""))
            Me._adapter.Update~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @Description", System.Data.SqlDbType.~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ tion", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@RequiredQuantity", S~dulla^@204~ lDbType.Int, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "RequiredQuantity", System.~dulla^@204~ ersion.Current, false, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlP~dulla^@204~ iginal_OrderNo", System.Data.SqlDbTyp~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ erNo", System.Data.DataRowVersion.Ori~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ dateCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@Original_PartNo", S~dulla^@204~ lDbType.NVarChar, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "PartNo", System.Data.~dulla^@204~ n.Original, false, Nothing, "", "", "~dulla^@204~     Me._adapter.UpdateCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@O~dulla^@204~ iption", System.Data.SqlDbType.[Char]~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@Original_RequiredQuantity~dulla^@204~ a.SqlDbType.Int, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "RequiredQuantity", Sys~dulla^@204~ RowVersion.Original, false, Nothing, ~dulla^@204~ 
        End Sub
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Private Sub InitConnection()
       ~dulla^@204~ ection = New System.Data.SqlClient.Sq~dulla^@204~             Me._connection.Connection~dulla^@204~ al.InventoryControlSystem.My.MySettin~dulla^@204~ rchaseInfoConnection
        End Sub~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Private Sub Init~dulla^@204~ tion()
            Me._commandCollec~dulla^@204~ stem.Data.SqlClient.SqlCommand(0) {}~dulla^@204~ Me._commandCollection(0) = New System~dulla^@204~ nt.SqlCommand
            Me._comman~dulla^@204~ ).Connection = Me.Connection
       ~dulla^@204~ andCollection(0).CommandText = "SELEC~dulla^@204~ rtNo, Description, RequiredQuantity F~dulla^@204~ r]"
            Me._commandCollectio~dulla^@204~ ype = System.Data.CommandType.Text
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute(),  _
         S~dulla^@204~ ntModel.Design.HelpKeywordAttribute("~dulla^@204~ Adapter"),  _
         System.Compon~dulla^@204~ ObjectMethodAttribute(System.Componen~dulla^@204~ jectMethodType.Fill, true)>  _
     ~dulla^@204~ rloads Overridable Function Fill(ByVa~dulla^@204~ s InventoryControlSystemDataSet3.Orde~dulla^@204~ s Integer
            Me.Adapter.Sel~dulla^@204~ Me.CommandCollection(0)
            ~dulla^@204~ eforeFill = true) Then
             ~dulla^@204~ Clear
            End If
          ~dulla^@204~ alue As Integer = Me.Adapter.Fill(dat~dulla^@204~         Return returnValue
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute(),  _
         Syst~dulla^@204~ odel.Design.HelpKeywordAttribute("vs.~dulla^@204~ pter"),  _
         System.Component~dulla^@204~ ectMethodAttribute(System.ComponentMo~dulla^@204~ tMethodType.[Select], true)>  _
    ~dulla^@204~ erloads Overridable Function GetData(~dulla^@204~ yControlSystemDataSet3.OrderDataTable~dulla^@204~  Me.Adapter.SelectCommand = Me.Comman~dulla^@204~ )
            Dim dataTable As Inven~dulla^@204~ stemDataSet3.OrderDataTable = New Inv~dulla^@204~ SystemDataSet3.OrderDataTable
      ~dulla^@204~ ter.Fill(dataTable)
            Retu~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~       System.ComponentModel.Design.He~dulla^@204~ ibute("vs.data.TableAdapter")>  _
  ~dulla^@204~ Overloads Overridable Function Update~dulla^@204~ ble As InventoryControlSystemDataSet3~dulla^@204~ le) As Integer
            Return Me~dulla^@204~ te(dataTable)
        End Function
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute(),  _
         System.ComponentM~dulla^@204~ elpKeywordAttribute("vs.data.TableAda~dulla^@204~        Public Overloads Overridable F~dulla^@204~ e(ByVal dataSet As InventoryControlSy~dulla^@204~  As Integer
            Return Me.Ad~dulla^@204~ dataSet, "Order")
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute(),  _
         System.Compon~dulla^@204~ gn.HelpKeywordAttribute("vs.data.Tabl~dulla^@204~ _
        Public Overloads Overridab~dulla^@204~ pdate(ByVal dataRow As System.Data.Da~dulla^@204~ eger
            Return Me.Adapter.U~dulla^@204~ tem.Data.DataRow() {dataRow})
      ~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute(),  _
         S~dulla^@204~ ntModel.Design.HelpKeywordAttribute("~dulla^@204~ Adapter")>  _
        Public Overloa~dulla^@204~ e Function Update(ByVal dataRows() As~dulla^@204~ DataRow) As Integer
            Retu~dulla^@204~ .Update(dataRows)
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute(),  _
         System.Compon~dulla^@204~ gn.HelpKeywordAttribute("vs.data.Tabl~dulla^@204~ _
         System.ComponentModel.Dat~dulla^@204~ Attribute(System.ComponentModel.DataO~dulla^@204~ pe.Delete, true)>  _
        Public ~dulla^@204~ rridable Function Delete(ByVal Origin~dulla^@204~  String, ByVal Original_PartNo As Str~dulla^@204~ iginal_Description As String, ByVal O~dulla^@204~ redQuantity As Integer) As Integer
 ~dulla^@204~  (Original_OrderNo Is Nothing) Then
~dulla^@204~    Throw New System.ArgumentNullExcep~dulla^@204~ l_OrderNo")
            Else
      ~dulla^@204~ Adapter.DeleteCommand.Parameters(0).V~dulla^@204~ Original_OrderNo,String)
           ~dulla^@204~         If (Original_PartNo Is Nothin~dulla^@204~             Throw New System.Argument~dulla^@204~ ("Original_PartNo")
            Else~dulla^@204~      Me.Adapter.DeleteCommand.Paramet~dulla^@204~ = CType(Original_PartNo,String)
    ~dulla^@204~ f
            If (Original_Descripti~dulla^@204~ ) Then
                Throw New Sys~dulla^@204~ ullException("Original_Description")~dulla^@204~ Else
                Me.Adapter.Dele~dulla^@204~ ameters(2).Value = CType(Original_Des~dulla^@204~ ng)
            End If
            ~dulla^@204~ leteCommand.Parameters(3).Value = CTy~dulla^@204~ equiredQuantity,Integer)
           ~dulla^@204~ ConnectionState As System.Data.Connec~dulla^@204~ e.Adapter.DeleteCommand.Connection.St~dulla^@204~     If ((Me.Adapter.DeleteCommand.Con~dulla^@204~  And System.Data.ConnectionState.Open~dulla^@204~                  <> System.Data.Conne~dulla^@204~ en) Then
                Me.Adapter.~dulla^@204~ .Connection.Open
            End If~dulla^@204~ Try 
                Dim returnValue~dulla^@204~  Me.Adapter.DeleteCommand.ExecuteNonQ~dulla^@204~          Return returnValue
        ~dulla^@204~                 If (previousConnectio~dulla^@204~ em.Data.ConnectionState.Closed) Then~dulla^@204~         Me.Adapter.DeleteCommand.Conn~dulla^@204~ 
                End If
            ~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute(),~dulla^@204~  System.ComponentModel.Design.HelpKey~dulla^@204~ ("vs.data.TableAdapter"),  _
       ~dulla^@204~ onentModel.DataObjectMethodAttribute(~dulla^@204~ entModel.DataObjectMethodType.Insert,~dulla^@204~        Public Overloads Overridable F~dulla^@204~ t(ByVal OrderNo As String, ByVal Part~dulla^@204~  ByVal Description As String, ByVal R~dulla^@204~ ty As Integer) As Integer
          ~dulla^@204~  Is Nothing) Then
                Th~dulla^@204~ m.ArgumentNullException("OrderNo")
 ~dulla^@204~ se
                Me.Adapter.Insert~dulla^@204~ eters(0).Value = CType(OrderNo,String~dulla^@204~   End If
            If (PartNo Is N~dulla^@204~ 
                Throw New System.Arg~dulla^@204~ ption("PartNo")
            Else
  ~dulla^@204~  Me.Adapter.InsertCommand.Parameters(~dulla^@204~ ype(PartNo,String)
            End I~dulla^@204~   If (Description Is Nothing) Then
 ~dulla^@204~   Throw New System.ArgumentNullExcept~dulla^@204~ ion")
            Else
            ~dulla^@204~ r.InsertCommand.Parameters(2).Value =~dulla^@204~ ption,String)
            End If
  ~dulla^@204~ Adapter.InsertCommand.Parameters(3).V~dulla^@204~ RequiredQuantity,Integer)
          ~dulla^@204~ sConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Conn~dulla^@204~ 
            If ((Me.Adapter.InsertCo~dulla^@204~ ion.State And System.Data.ConnectionS~dulla^@204~ 
                        <> System.D~dulla^@204~ nState.Open) Then
                Me~dulla^@204~ rtCommand.Connection.Open
          ~dulla^@204~          Try 
                Dim re~dulla^@204~ Integer = Me.Adapter.InsertCommand.Ex~dulla^@204~ 
                Return returnValue~dulla^@204~ Finally
                If (previous~dulla^@204~ te = System.Data.ConnectionState.Clos~dulla^@204~                  Me.Adapter.InsertCom~dulla^@204~ on.Close
                End If
   ~dulla^@204~ Try
        End Function
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
         System.ComponentModel.Desig~dulla^@204~ Attribute("vs.data.TableAdapter"),  _~dulla^@204~ stem.ComponentModel.DataObjectMethodA~dulla^@204~ em.ComponentModel.DataObjectMethodTyp~dulla^@204~ e)>  _
        Public Overloads Over~dulla^@204~ ion Update(ByVal OrderNo As String, B~dulla^@204~ s String, ByVal Description As String~dulla^@204~ redQuantity As Integer, ByVal Origina~dulla^@204~ String, ByVal Original_PartNo As Stri~dulla^@204~ ginal_Description As String, ByVal Or~dulla^@204~ edQuantity As Integer) As Integer
  ~dulla^@204~ (OrderNo Is Nothing) Then
          ~dulla^@204~ ew System.ArgumentNullException("Orde~dulla^@204~       Else
                Me.Adapte~dulla^@204~ nd.Parameters(0).Value = CType(OrderN~dulla^@204~           End If
            If (Par~dulla^@204~ g) Then
                Throw New Sy~dulla^@204~ NullException("PartNo")
            ~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ lue = CType(PartNo,String)
         ~dulla^@204~           If (Description Is Nothing)~dulla^@204~           Throw New System.ArgumentNu~dulla^@204~ Description")
            Else
    ~dulla^@204~ e.Adapter.UpdateCommand.Parameters(2)~dulla^@204~ e(Description,String)
            En~dulla^@204~      Me.Adapter.UpdateCommand.Paramet~dulla^@204~ = CType(RequiredQuantity,Integer)
  ~dulla^@204~ (Original_OrderNo Is Nothing) Then
 ~dulla^@204~   Throw New System.ArgumentNullExcept~dulla^@204~ _OrderNo")
            Else
       ~dulla^@204~ dapter.UpdateCommand.Parameters(4).Va~dulla^@204~ riginal_OrderNo,String)
            ~dulla^@204~        If (Original_PartNo Is Nothing~dulla^@204~            Throw New System.ArgumentN~dulla^@204~ "Original_PartNo")
            Else~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~  CType(Original_PartNo,String)
     ~dulla^@204~ 
            If (Original_Descriptio~dulla^@204~  Then
                Throw New Syst~dulla^@204~ llException("Original_Description")
~dulla^@204~ lse
                Me.Adapter.Updat~dulla^@204~ meters(6).Value = CType(Original_Desc~dulla^@204~ g)
            End If
            M~dulla^@204~ ateCommand.Parameters(7).Value = CTyp~dulla^@204~ quiredQuantity,Integer)
            ~dulla^@204~ onnectionState As System.Data.Connect~dulla^@204~ .Adapter.UpdateCommand.Connection.Sta~dulla^@204~    If ((Me.Adapter.UpdateCommand.Conn~dulla^@204~ And System.Data.ConnectionState.Open)~dulla^@204~                 <> System.Data.Connec~dulla^@204~ n) Then
                Me.Adapter.U~dulla^@204~ Connection.Open
            End If
~dulla^@204~ ry 
                Dim returnValue ~dulla^@204~ Me.Adapter.UpdateCommand.ExecuteNonQu~dulla^@204~         Return returnValue
         ~dulla^@204~                If (previousConnection~dulla^@204~ m.Data.ConnectionState.Closed) Then
~dulla^@204~        Me.Adapter.UpdateCommand.Conne~dulla^@204~                 End If
            E~dulla^@204~    End Function
    End Class
    ~dulla^@204~ CodeDom.Compiler.GeneratedCodeAttribu~dulla^@204~ ta.Design.TypedDataSetGenerator", "2.~dulla^@204~      System.ComponentModel.DesignerCa~dulla^@204~ te("code"),  _
     System.Component~dulla^@204~ Item(true),  _
     System.Component~dulla^@204~ ectAttribute(true),  _
     System.C~dulla^@204~ .DesignerAttribute("Microsoft.VSDesig~dulla^@204~ e.Design.TableAdapterDesigner, Micros~dulla^@204~ r"& _ 
        ", Version=8.0.0.0, C~dulla^@204~ l, PublicKeyToken=b03f5f7f11d50a3a"),~dulla^@204~ tem.ComponentModel.Design.HelpKeyword~dulla^@204~ .data.TableAdapter")>  _
    Partial~dulla^@204~  ProductsTableAdapter
        Inheri~dulla^@204~ ponentModel.Component
        
    ~dulla^@204~ ithEvents _adapter As System.Data.Sql~dulla^@204~ aAdapter
        
        Private _~dulla^@204~  System.Data.SqlClient.SqlConnection~dulla^@204~       Private _commandCollection() As~dulla^@204~ SqlClient.SqlCommand
        
     ~dulla^@204~ learBeforeFill As Boolean
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Sub New()
          ~dulla^@204~ 
            Me.ClearBeforeFill = tru~dulla^@204~ d Sub
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ dOnly Property Adapter() As System.Da~dulla^@204~ SqlDataAdapter
            Get
    ~dulla^@204~ f (Me._adapter Is Nothing) Then
    ~dulla^@204~    Me.InitAdapter
                En~dulla^@204~          Return Me._adapter
        ~dulla^@204~         End Property
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Friend Property Connection() As S~dulla^@204~ lClient.SqlConnection
            Ge~dulla^@204~       If (Me._connection Is Nothing) ~dulla^@204~              Me.InitConnection
     ~dulla^@204~ d If
                Return Me._conn~dulla^@204~        End Get
            Set
    ~dulla^@204~ e._connection = value
              ~dulla^@204~ .Adapter.InsertCommand) Is Nothing) T~dulla^@204~             Me.Adapter.InsertCommand.~dulla^@204~ value
                End If
      ~dulla^@204~ (Not (Me.Adapter.DeleteCommand) Is No~dulla^@204~                     Me.Adapter.Delete~dulla^@204~ ction = value
                End If~dulla^@204~      If (Not (Me.Adapter.UpdateComman~dulla^@204~ ) Then
                    Me.Adapte~dulla^@204~ nd.Connection = value
              ~dulla^@204~              Dim i As Integer = 0
  ~dulla^@204~  Do While (i < Me.CommandCollection.L~dulla^@204~                If (Not (Me.CommandCol~dulla^@204~ s Nothing) Then
                    ~dulla^@204~ CommandCollection(i),System.Data.SqlC~dulla^@204~ and).Connection = value
            ~dulla^@204~ f
                    i = (i + 1)
 ~dulla^@204~   Loop
            End Set
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Prot~dulla^@204~ y Property CommandCollection() As Sys~dulla^@204~ lient.SqlCommand()
            Get
~dulla^@204~    If (Me._commandCollection Is Nothi~dulla^@204~                  Me.InitCommandCollec~dulla^@204~          End If
                Retu~dulla^@204~ dCollection
            End Get
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ rty ClearBeforeFill() As Boolean
   ~dulla^@204~ 
                Return Me._clearBefo~dulla^@204~        End Get
            Set
    ~dulla^@204~ e._clearBeforeFill = value
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Private Sub InitAdapter()
       ~dulla^@204~ ter = New System.Data.SqlClient.SqlDa~dulla^@204~           Dim tableMapping As System.~dulla^@204~ ataTableMapping = New System.Data.Com~dulla^@204~ Mapping
            tableMapping.Sou~dulla^@204~ able"
            tableMapping.DataS~dulla^@204~ oducts"
            tableMapping.Col~dulla^@204~ dd("PartNo", "PartNo")
            t~dulla^@204~ olumnMappings.Add("Description", "Des~dulla^@204~            tableMapping.ColumnMapping~dulla^@204~ st", "UnitCost")
            tableMa~dulla^@204~ appings.Add("SellingPrice1", "Selling~dulla^@204~          tableMapping.ColumnMappings.~dulla^@204~ rice2", "SellingPrice2")
           ~dulla^@204~ .ColumnMappings.Add("QtyAtShop1", "Qt~dulla^@204~            tableMapping.ColumnMapping~dulla^@204~ hop2", "QtyAtShop2")
            tableMapping.ColumnMappings.Add("QtyAtStore",~dulla^@204~ )
            tableMapping.ColumnMap~dulla^@204~ talQuantity", "TotalQuantity")
     ~dulla^@204~ apping.ColumnMappings.Add("ReorderLev~dulla^@204~ Level")
            tableMapping.Col~dulla^@204~ dd("ShelfNo", "ShelfNo")
           ~dulla^@204~ TableMappings.Add(tableMapping)
    ~dulla^@204~ dapter.DeleteCommand = New System.Dat~dulla^@204~ qlCommand
            Me._adapter.De~dulla^@204~ onnection = Me.Connection
          ~dulla^@204~ .DeleteCommand.CommandText = "DELETE ~dulla^@204~ roducts] WHERE (([PartNo] = @Original~dulla^@204~ ([Descripti"& _ 
                "on~dulla^@204~ _Description) AND ((@IsNull_UnitCost ~dulla^@204~ Cost] IS NULL) "& _ 
               ~dulla^@204~ st] = @Original_UnitCost)) AND ([Sell~dulla^@204~ @Original_SellingPr"& _ 
           ~dulla^@204~ ND ([SellingPrice2] = @Original_Selli~dulla^@204~  ((@IsNull_QtyAtShop1 ="& _ 
       ~dulla^@204~ AND [QtyAtShop1] IS NULL) OR ([QtyAtS~dulla^@204~ inal_QtyAtShop1)) AND ((@Is"& _ 
   ~dulla^@204~ "Null_QtyAtShop2 = 1 AND [QtyAtShop2]~dulla^@204~ ([QtyAtShop2] = @Original_QtyAt"& _ ~dulla^@204~     "Shop2)) AND ((@IsNull_QtyAtStore~dulla^@204~ AtStore] IS NULL) OR ([QtyAtStore] "&~dulla^@204~         "= @Original_QtyAtStore)) AND~dulla^@204~ talQuantity = 1 AND [TotalQuantity] I~dulla^@204~             "NULL) OR ([TotalQuantity~dulla^@204~ _TotalQuantity)) AND ([ReorderLevel] ~dulla^@204~                 "ginal_ReorderLevel) ~dulla^@204~ ] = @Original_ShelfNo))"
           ~dulla^@204~ DeleteCommand.CommandType = System.Da~dulla^@204~ e.Text
            Me._adapter.Delet~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@Original_PartNo", System.Data.SqlDb~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ PartNo", System.Data.DataRowVersion.O~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ DeleteCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@Original_Descript~dulla^@204~ Data.SqlDbType.[Char], 0, System.Data~dulla^@204~ ection.Input, 0, 0, "Description", Sy~dulla^@204~ aRowVersion.Original, false, Nothing,~dulla^@204~ 
            Me._adapter.DeleteComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ ll_UnitCost", System.Data.SqlDbType.I~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ System.Data.DataRowVersion.Original, ~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@Original_UnitCost", System.~dulla^@204~ e.Money, 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "UnitCost", System.Data.DataRow~dulla^@204~ nal, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.DeleteCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@Original~dulla^@204~ 1", System.Data.SqlDbType.Float, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "Sellin~dulla^@204~ tem.Data.DataRowVersion.Original, fal~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@Original_SellingPrice2", Syst~dulla^@204~ Type.Float, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "SellingPrice2", System.Data~dulla^@204~ on.Original, false, Nothing, "", "", ~dulla^@204~      Me._adapter.DeleteCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ hop1", System.Data.SqlDbType.Int, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "QtyAt~dulla^@204~ m.Data.DataRowVersion.Original, true,~dulla^@204~  "", ""))
            Me._adapter.De~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@Original_QtyAtShop1", System.Dat~dulla^@204~ nt, 0, System.Data.ParameterDirection~dulla^@204~  "QtyAtShop1", System.Data.DataRowVer~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.DeleteCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@IsNull_QtyA~dulla^@204~ em.Data.SqlDbType.Int, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "QtyAtShop2", Sys~dulla^@204~ RowVersion.Original, true, Nothing, "~dulla^@204~             Me._adapter.DeleteCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ al_QtyAtShop2", System.Data.SqlDbType~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ 2", System.Data.DataRowVersion.Origin~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@IsNull_QtyAtStore", Sy~dulla^@204~ DbType.Int, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "QtyAtStore", System.Data.Da~dulla^@204~ Original, true, Nothing, "", "", ""))~dulla^@204~  Me._adapter.DeleteCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Orig~dulla^@204~ re", System.Data.SqlDbType.Int, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "QtyAtSt~dulla^@204~ Data.DataRowVersion.Original, false, ~dulla^@204~ "", ""))
            Me._adapter.Del~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@IsNull_TotalQuantity", System.Dat~dulla^@204~ nt, 0, System.Data.ParameterDirection~dulla^@204~  "TotalQuantity", System.Data.DataRow~dulla^@204~ nal, true, Nothing, "", "", ""))
   ~dulla^@204~ adapter.DeleteCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Original_~dulla^@204~ ", System.Data.SqlDbType.Int, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "TotalQuan~dulla^@204~ .Data.DataRowVersion.Original, false,~dulla^@204~  "", ""))
            Me._adapter.De~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@Original_ReorderLevel", System.D~dulla^@204~ .Int, 0, System.Data.ParameterDirecti~dulla^@204~ 0, "ReorderLevel", System.Data.DataRo~dulla^@204~ inal, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.DeleteCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Origina~dulla^@204~ ystem.Data.SqlDbType.NVarChar, 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "ShelfNo"~dulla^@204~ .DataRowVersion.Original, false, Noth~dulla^@204~ ""))
            Me._adapter.InsertC~dulla^@204~ System.Data.SqlClient.SqlCommand
   ~dulla^@204~ adapter.InsertCommand.Connection = Me~dulla^@204~             Me._adapter.InsertCommand~dulla^@204~ = "INSERT INTO [dbo].[Products] ([Par~dulla^@204~ ption], [UnitCost], [SellingPrice1"& ~dulla^@204~        "], [SellingPrice2], [QtyAtSho~dulla^@204~ op2], [QtyAtStore], [TotalQuantity], ~dulla^@204~            "ReorderLevel], [ShelfNo])~dulla^@204~ tNo, @Description, @UnitCost, @Sellin~dulla^@204~                "e1, @SellingPrice2, @~dulla^@204~ QtyAtShop2, @QtyAtStore, @TotalQuanti~dulla^@204~  
                "derLevel, @ShelfN~dulla^@204~ icrosoft.VisualBasic.ChrW(13)&Global.~dulla^@204~ ualBasic.ChrW(10)&"SELECT PartNo, Des~dulla^@204~ tCost, SellingPrice1, Selli"& _ 
   ~dulla^@204~ "ngPrice2, QtyAtShop1, QtyAtShop2, Qt~dulla^@204~ alQuantity, ReorderLevel, Shelf"& _ ~dulla^@204~     "No FROM Products WHERE (PartNo =~dulla^@204~            Me._adapter.InsertCommand.~dulla^@204~  System.Data.CommandType.Text
      ~dulla^@204~ pter.InsertCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@PartNo", Sys~dulla^@204~ bType.NVarChar, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "PartNo", System.Data.Da~dulla^@204~ Current, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.InsertCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Desc~dulla^@204~ tem.Data.SqlDbType.[Char], 0, System.~dulla^@204~ rDirection.Input, 0, 0, "Description"~dulla^@204~ .DataRowVersion.Current, false, Nothi~dulla^@204~ "))
            Me._adapter.InsertCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ nitCost", System.Data.SqlDbType.Money~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ stem.Data.DataRowVersion.Current, fal~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@SellingPrice1", System.Data.S~dulla^@204~ t, 0, System.Data.ParameterDirection.~dulla^@204~ "SellingPrice1", System.Data.DataRowV~dulla^@204~ t, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.InsertCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@SellingPri~dulla^@204~ Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "SellingPr~dulla^@204~ .Data.DataRowVersion.Current, false, ~dulla^@204~ "", ""))
            Me._adapter.Ins~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@QtyAtShop1", System.Data.SqlDbTyp~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ p1", System.Data.DataRowVersion.Curre~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ tCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@QtyAtShop2", System.Da~dulla^@204~ Int, 0, System.Data.ParameterDirectio~dulla^@204~ , "QtyAtShop2", System.Data.DataRowVe~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.InsertCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@QtyAtStore"~dulla^@204~ .SqlDbType.Int, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "QtyAtStore", System.Dat~dulla^@204~ ion.Current, false, Nothing, "", "", ~dulla^@204~      Me._adapter.InsertCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ ", System.Data.SqlDbType.Int, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "TotalQuan~dulla^@204~ .Data.DataRowVersion.Current, false, ~dulla^@204~ "", ""))
            Me._adapter.Ins~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@ReorderLevel", System.Data.SqlDbT~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ rLevel", System.Data.DataRowVersion.C~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ nsertCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@ShelfNo", System.D~dulla^@204~ .NVarChar, 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "ShelfNo", System.Data.DataRo~dulla^@204~ ent, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.UpdateCommand = New System.D~dulla^@204~ .SqlCommand
            Me._adapter.~dulla^@204~ .Connection = Me.Connection
        ~dulla^@204~ er.UpdateCommand.CommandText = "UPDAT~dulla^@204~ ucts] SET [PartNo] = @PartNo, [Descri~dulla^@204~ cription, [Un"& _ 
                "~dulla^@204~ itCost, [SellingPrice1] = @SellingPri~dulla^@204~ Price2] = @Sellin"& _ 
             ~dulla^@204~ [QtyAtShop1] = @QtyAtShop1, [QtyAtSho~dulla^@204~ hop2, [QtyAtStore] = "& _ 
         ~dulla^@204~ tStore, [TotalQuantity] = @TotalQuant~dulla^@204~ Level] = @ReorderLevel, ["& _ 
     ~dulla^@204~ helfNo] = @ShelfNo WHERE (([PartNo] =~dulla^@204~ rtNo) AND ([Description] = @O"& _ 
 ~dulla^@204~   "riginal_Description) AND ((@IsNull~dulla^@204~  AND [UnitCost] IS NULL) OR ([Uni"& _~dulla^@204~       "tCost] = @Original_UnitCost)) ~dulla^@204~ Price1] = @Original_SellingPrice1) AN~dulla^@204~           "D ([SellingPrice2] = @Orig~dulla^@204~ rice2) AND ((@IsNull_QtyAtShop1 = 1 A~dulla^@204~               "QtyAtShop1] IS NULL) O~dulla^@204~ 1] = @Original_QtyAtShop1)) AND ((@Is~dulla^@204~ 
                "AtShop2 = 1 AND [Q~dulla^@204~  NULL) OR ([QtyAtShop2] = @Original_Q~dulla^@204~ & _ 
                "AND ((@IsNull_~dulla^@204~ 1 AND [QtyAtStore] IS NULL) OR ([QtyA~dulla^@204~ igi"& _ 
                "nal_QtyAtS~dulla^@204~ @IsNull_TotalQuantity = 1 AND [TotalQ~dulla^@204~ ULL) OR"& _ 
                " ([Tot~dulla^@204~  @Original_TotalQuantity)) AND ([Reor~dulla^@204~ Original_Re"& _ 
                "or~dulla^@204~  ([ShelfNo] = @Original_ShelfNo));"&G~dulla^@204~ ft.VisualBasic.ChrW(13)&Global.Micros~dulla^@204~ ic.ChrW(10)&"SELECT PartNo, Descripti~dulla^@204~                "nitCost, SellingPrice~dulla^@204~ ce2, QtyAtShop1, QtyAtShop2, QtyAtSto~dulla^@204~  
                "Quantity, Reorder~dulla^@204~ o FROM Products WHERE (PartNo = @Part~dulla^@204~      Me._adapter.UpdateCommand.Comman~dulla^@204~ m.Data.CommandType.Text
            ~dulla^@204~ pdateCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@PartNo", System.Da~dulla^@204~ NVarChar, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "PartNo", System.Data.DataRowV~dulla^@204~ t, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@Descriptio~dulla^@204~ ta.SqlDbType.[Char], 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "Description", Syst~dulla^@204~ owVersion.Current, false, Nothing, ""~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ t", System.Data.SqlDbType.Money, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "UnitCo~dulla^@204~ ata.DataRowVersion.Current, false, No~dulla^@204~ , ""))
            Me._adapter.Updat~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@SellingPrice1", System.Data.SqlDbTy~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ ngPrice1", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@SellingPrice2", ~dulla^@204~ qlDbType.Float, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "SellingPrice2", System.~dulla^@204~ ersion.Current, false, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ ", System.Data.SqlDbType.Int, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "QtyAtShop~dulla^@204~ ta.DataRowVersion.Current, false, Not~dulla^@204~  ""))
            Me._adapter.Update~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @QtyAtShop2", System.Data.SqlDbType.I~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ , System.Data.DataRowVersion.Current,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@QtyAtStore", System.Data.~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ QtyAtStore", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@TotalQuantity"~dulla^@204~ .SqlDbType.Int, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "TotalQuantity", System.~dulla^@204~ ersion.Current, false, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ el", System.Data.SqlDbType.Int, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "Reorder~dulla^@204~ m.Data.DataRowVersion.Current, false,~dulla^@204~  "", ""))
            Me._adapter.Up~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@ShelfNo", System.Data.SqlDbType.~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ No", System.Data.DataRowVersion.Curre~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@Original_PartNo", Syst~dulla^@204~ Type.NVarChar, 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "PartNo", System.Data.Dat~dulla^@204~ riginal, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Orig~dulla^@204~ ion", System.Data.SqlDbType.[Char], 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Des~dulla^@204~ stem.Data.DataRowVersion.Original, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@IsNull_UnitCost", System.Dat~dulla^@204~ nt, 0, System.Data.ParameterDirection~dulla^@204~  "UnitCost", System.Data.DataRowVersi~dulla^@204~ true, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Original_UnitC~dulla^@204~ Data.SqlDbType.Money, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "UnitCost", System~dulla^@204~ Version.Original, false, Nothing, "",~dulla^@204~           Me._adapter.UpdateCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~ _SellingPrice1", System.Data.SqlDbTyp~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ gPrice1", System.Data.DataRowVersion.~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@Original_Selling~dulla^@204~ em.Data.SqlDbType.Float, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "SellingPrice2"~dulla^@204~ .DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@IsNull_QtyAtShop1", System.Da~dulla^@204~ Int, 0, System.Data.ParameterDirectio~dulla^@204~ , "QtyAtShop1", System.Data.DataRowVe~dulla^@204~ l, true, Nothing, "", "", ""))
     ~dulla^@204~ apter.UpdateCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@Original_Qt~dulla^@204~ stem.Data.SqlDbType.Int, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "QtyAtShop1", S~dulla^@204~ taRowVersion.Original, false, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ull_QtyAtShop2", System.Data.SqlDbTyp~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ p2", System.Data.DataRowVersion.Origi~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@Original_QtyAtShop2", ~dulla^@204~ qlDbType.Int, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "QtyAtShop2", System.Data.~dulla^@204~ n.Original, false, Nothing, "", "", "~dulla^@204~     Me._adapter.UpdateCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@I~dulla^@204~ ore", System.Data.SqlDbType.Int, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "QtyAtS~dulla^@204~ .Data.DataRowVersion.Original, true, ~dulla^@204~ "", ""))
            Me._adapter.Upd~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@Original_QtyAtStore", System.Data~dulla^@204~ t, 0, System.Data.ParameterDirection.~dulla^@204~ "QtyAtStore", System.Data.DataRowVers~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.UpdateCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@IsNull_Total~dulla^@204~ stem.Data.SqlDbType.Int, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "TotalQuantity"~dulla^@204~ .DataRowVersion.Original, true, Nothi~dulla^@204~ "))
            Me._adapter.UpdateCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ riginal_TotalQuantity", System.Data.S~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ otalQuantity", System.Data.DataRowVer~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.UpdateCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@Original_Re~dulla^@204~ System.Data.SqlDbType.Int, 0, System.~dulla^@204~ rDirection.Input, 0, 0, "ReorderLevel~dulla^@204~ a.DataRowVersion.Original, false, Not~dulla^@204~  ""))
            Me._adapter.Update~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @Original_ShelfNo", System.Data.SqlDb~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ ShelfNo", System.Data.DataRowVersion.~dulla^@204~ se, Nothing, "", "", ""))
        En~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Private Sub~dulla^@204~ on()
            Me._connection = Ne~dulla^@204~ .SqlClient.SqlConnection
           ~dulla^@204~ on.ConnectionString = Global.Inventor~dulla^@204~ m.My.MySettings.Default.PurchaseInfoC~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ vate Sub InitCommandCollection()
   ~dulla^@204~ commandCollection = New System.Data.S~dulla^@204~ ommand(0) {}
            Me._command~dulla^@204~  = New System.Data.SqlClient.SqlComma~dulla^@204~    Me._commandCollection(0).Connectio~dulla^@204~ tion
            Me._commandCollecti~dulla^@204~ Text = "SELECT PartNo, Description, U~dulla^@204~ ingPrice1, SellingPrice2, QtyAtShop1,~dulla^@204~             "tyAtShop2, QtyAtStore, T~dulla^@204~  ReorderLevel, ShelfNo FROM dbo.Produ~dulla^@204~      Me._commandCollection(0).Command~dulla^@204~ .Data.CommandType.Text
        End S~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute(),  _
         System.Compon~dulla^@204~ gn.HelpKeywordAttribute("vs.data.Tabl~dulla^@204~ _
         System.ComponentModel.Dat~dulla^@204~ Attribute(System.ComponentModel.DataO~dulla^@204~ pe.Fill, true)>  _
        Public Ov~dulla^@204~ idable Function Fill(ByVal dataTable ~dulla^@204~ ontrolSystemDataSet3.ProductsDataTabl~dulla^@204~ 
            Me.Adapter.SelectComman~dulla^@204~ dCollection(0)
            If (Me.Cl~dulla^@204~  = true) Then
                dataTa~dulla^@204~           End If
            Dim ret~dulla^@204~ nteger = Me.Adapter.Fill(dataTable)
~dulla^@204~ eturn returnValue
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute(),  _
         System.Compon~dulla^@204~ gn.HelpKeywordAttribute("vs.data.Tabl~dulla^@204~ _
         System.ComponentModel.Dat~dulla^@204~ Attribute(System.ComponentModel.DataO~dulla^@204~ pe.[Select], true)>  _
        Publi~dulla^@204~ verridable Function GetData() As Inve~dulla^@204~ ystemDataSet3.ProductsDataTable
    ~dulla^@204~ apter.SelectCommand = Me.CommandColle~dulla^@204~          Dim dataTable As InventoryCo~dulla^@204~ taSet3.ProductsDataTable = New Invent~dulla^@204~ temDataSet3.ProductsDataTable
      ~dulla^@204~ ter.Fill(dataTable)
            Retu~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~       System.ComponentModel.Design.He~dulla^@204~ ibute("vs.data.TableAdapter")>  _
  ~dulla^@204~ Overloads Overridable Function Update~dulla^@204~ ble As InventoryControlSystemDataSet3~dulla^@204~ Table) As Integer
            Return~dulla^@204~ pdate(dataTable)
        End Functio~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute(),  _
         System.Compone~dulla^@204~ n.HelpKeywordAttribute("vs.data.Table~dulla^@204~ 
        Public Overloads Overridabl~dulla^@204~ date(ByVal dataSet As InventoryContro~dulla^@204~ t3) As Integer
            Return Me~dulla^@204~ te(dataSet, "Products")
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute(),  _
         System.~dulla^@204~ l.Design.HelpKeywordAttribute("vs.dat~dulla^@204~ r")>  _
        Public Overloads Ove~dulla^@204~ tion Update(ByVal dataRow As System.D~dulla^@204~ As Integer
            Return Me.Ada~dulla^@204~ ew System.Data.DataRow() {dataRow})
~dulla^@204~ unction
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute(),  _
    ~dulla^@204~ omponentModel.Design.HelpKeywordAttri~dulla^@204~ .TableAdapter")>  _
        Public O~dulla^@204~ ridable Function Update(ByVal dataRow~dulla^@204~ .Data.DataRow) As Integer
          ~dulla^@204~ dapter.Update(dataRows)
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute(),  _
         System.~dulla^@204~ l.Design.HelpKeywordAttribute("vs.dat~dulla^@204~ r"),  _
         System.ComponentMod~dulla^@204~ MethodAttribute(System.ComponentModel~dulla^@204~ thodType.Delete, true)>  _
        P~dulla^@204~ ds Overridable Function Delete(ByVal ~dulla^@204~ No As String, ByVal Original_Descript~dulla^@204~ , ByVal Original_UnitCost As System.N~dulla^@204~ cimal), ByVal Original_SellingPrice1 ~dulla^@204~ Val Original_SellingPrice2 As Double,~dulla^@204~ al_QtyAtShop1 As System.Nullable(Of I~dulla^@204~ l Original_QtyAtShop2 As System.Nulla~dulla^@204~ r), ByVal Original_QtyAtStore As Syst~dulla^@204~ f Integer), ByVal Original_TotalQuant~dulla^@204~ .Nullable(Of Integer), ByVal Original~dulla^@204~  As Integer, ByVal Original_ShelfNo A~dulla^@204~ Integer
            If (Original_Par~dulla^@204~ g) Then
                Throw New Sy~dulla^@204~ NullException("Original_PartNo")
   ~dulla^@204~ 
                Me.Adapter.DeleteCo~dulla^@204~ ers(0).Value = CType(Original_PartNo,~dulla^@204~         End If
            If (Origi~dulla^@204~ on Is Nothing) Then
                ~dulla^@204~ tem.ArgumentNullException("Original_D~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(1).Value = CType~dulla^@204~ cription,String)
            End If~dulla^@204~ If (Original_UnitCost.HasValue = true~dulla^@204~            Me.Adapter.DeleteCommand.P~dulla^@204~ Value = CType(0,Object)
            ~dulla^@204~ r.DeleteCommand.Parameters(3).Value =~dulla^@204~ al_UnitCost.Value,Decimal)
            Else
                Me.Adapter.Delete~dulla^@204~ eters(2).Value = CType(1,Object)
   ~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(3~dulla^@204~ tem.DBNull.Value
            End If~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(4~dulla^@204~ pe(Original_SellingPrice1,Double)
  ~dulla^@204~ Adapter.DeleteCommand.Parameters(5).V~dulla^@204~ Original_SellingPrice2,Double)
     ~dulla^@204~ iginal_QtyAtShop1.HasValue = true) Th~dulla^@204~        Me.Adapter.DeleteCommand.Param~dulla^@204~ e = CType(0,Object)
                ~dulla^@204~ leteCommand.Parameters(7).Value = CTy~dulla^@204~ tyAtShop1.Value,Integer)
           ~dulla^@204~           Me.Adapter.DeleteCommand.Pa~dulla^@204~ alue = CType(1,Object)
             ~dulla^@204~ .DeleteCommand.Parameters(7).Value = ~dulla^@204~ .Value
            End If
         ~dulla^@204~ al_QtyAtShop2.HasValue = true) Then
~dulla^@204~    Me.Adapter.DeleteCommand.Parameter~dulla^@204~ CType(0,Object)
                Me.A~dulla^@204~ Command.Parameters(9).Value = CType(O~dulla^@204~ Shop2.Value,Integer)
            Els~dulla^@204~       Me.Adapter.DeleteCommand.Parame~dulla^@204~  = CType(1,Object)
                M~dulla^@204~ eteCommand.Parameters(9).Value = Syst~dulla^@204~ ue
            End If
            I~dulla^@204~ tyAtStore.HasValue = true) Then
    ~dulla^@204~ e.Adapter.DeleteCommand.Parameters(10~dulla^@204~ pe(0,Object)
                Me.Adap~dulla^@204~ mand.Parameters(11).Value = CType(Ori~dulla^@204~ ore.Value,Integer)
            Else~dulla^@204~     Me.Adapter.DeleteCommand.Paramete~dulla^@204~ = CType(1,Object)
                Me~dulla^@204~ teCommand.Parameters(11).Value = Syst~dulla^@204~ ue
            End If
            I~dulla^@204~ otalQuantity.HasValue = true) Then
 ~dulla^@204~   Me.Adapter.DeleteCommand.Parameters~dulla^@204~ CType(0,Object)
                Me.A~dulla^@204~ Command.Parameters(13).Value = CType(~dulla^@204~ lQuantity.Value,Integer)
           ~dulla^@204~           Me.Adapter.DeleteCommand.Pa~dulla^@204~ Value = CType(1,Object)
            ~dulla^@204~ r.DeleteCommand.Parameters(13).Value ~dulla^@204~ ll.Value
            End If
       ~dulla^@204~ er.DeleteCommand.Parameters(14).Value~dulla^@204~ inal_ReorderLevel,Integer)
         ~dulla^@204~ al_ShelfNo Is Nothing) Then
        ~dulla^@204~  New System.ArgumentNullException("Or~dulla^@204~ o")
            Else
              ~dulla^@204~ DeleteCommand.Parameters(15).Value = ~dulla^@204~ l_ShelfNo,String)
            End If~dulla^@204~  Dim previousConnectionState As Syste~dulla^@204~ tionState = Me.Adapter.DeleteCommand.~dulla^@204~ ate
            If ((Me.Adapter.Dele~dulla^@204~ nection.State And System.Data.Connect~dulla^@204~ )  _
                        <> Syst~dulla^@204~ ctionState.Open) Then
              ~dulla^@204~ DeleteCommand.Connection.Open
      ~dulla^@204~ 
            Try 
                Di~dulla^@204~  As Integer = Me.Adapter.DeleteComman~dulla^@204~ uery
                Return returnVa~dulla^@204~     Finally
                If (prev~dulla^@204~ nState = System.Data.ConnectionState.~dulla^@204~ 
                    Me.Adapter.Delet~dulla^@204~ ection.Close
                End If~dulla^@204~ End Try
        End Function
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
         System.ComponentModel.D~dulla^@204~ wordAttribute("vs.data.TableAdapter")~dulla^@204~   System.ComponentModel.DataObjectMet~dulla^@204~ System.ComponentModel.DataObjectMetho~dulla^@204~  true)>  _
        Public Overloads ~dulla^@204~ unction Insert(ByVal PartNo As String~dulla^@204~ iption As String, ByVal UnitCost As S~dulla^@204~ e(Of Decimal), ByVal SellingPrice1 As~dulla^@204~ l SellingPrice2 As Double, ByVal QtyA~dulla^@204~ tem.Nullable(Of Integer), ByVal QtyAt~dulla^@204~ em.Nullable(Of Integer), ByVal QtyAtS~dulla^@204~ m.Nullable(Of Integer), ByVal TotalQu~dulla^@204~ tem.Nullable(Of Integer), ByVal Reord~dulla^@204~ teger, ByVal ShelfNo As String) As In~dulla^@204~       If (PartNo Is Nothing) Then
  ~dulla^@204~  Throw New System.ArgumentNullExcepti~dulla^@204~ 
            Else
                Me~dulla^@204~ rtCommand.Parameters(0).Value = CType~dulla^@204~ g)
            End If
            I~dulla^@204~ n Is Nothing) Then
                T~dulla^@204~ em.ArgumentNullException("Description~dulla^@204~    Else
                Me.Adapter.I~dulla^@204~ Parameters(1).Value = CType(Descripti~dulla^@204~            End If
            If (Un~dulla^@204~ ue = true) Then
                Me.A~dulla^@204~ Command.Parameters(2).Value = CType(U~dulla^@204~ ,Decimal)
            Else
        ~dulla^@204~ apter.InsertCommand.Parameters(2).Val~dulla^@204~ BNull.Value
            End If
    ~dulla^@204~ apter.InsertCommand.Parameters(3).Val~dulla^@204~ llingPrice1,Double)
            Me.A~dulla^@204~ Command.Parameters(4).Value = CType(S~dulla^@204~ Double)
            If (QtyAtShop1.H~dulla^@204~ e) Then
                Me.Adapter.I~dulla^@204~ Parameters(5).Value = CType(QtyAtShop~dulla^@204~ er)
            Else
              ~dulla^@204~ InsertCommand.Parameters(5).Value = S~dulla^@204~ Value
            End If
          ~dulla^@204~ op2.HasValue = true) Then
          ~dulla^@204~ ter.InsertCommand.Parameters(6).Value~dulla^@204~ tShop2.Value,Integer)
            El~dulla^@204~        Me.Adapter.InsertCommand.Param~dulla^@204~ e = System.DBNull.Value
            ~dulla^@204~        If (QtyAtStore.HasValue = true~dulla^@204~            Me.Adapter.InsertCommand.P~dulla^@204~ Value = CType(QtyAtStore.Value,Intege~dulla^@204~    Else
                Me.Adapter.I~dulla^@204~ Parameters(7).Value = System.DBNull.V~dulla^@204~      End If
            If (TotalQua~dulla^@204~ e = true) Then
                Me.Ad~dulla^@204~ ommand.Parameters(8).Value = CType(To~dulla^@204~ alue,Integer)
            Else
    ~dulla^@204~ e.Adapter.InsertCommand.Parameters(8)~dulla^@204~ em.DBNull.Value
            End If
~dulla^@204~ e.Adapter.InsertCommand.Parameters(9)~dulla^@204~ e(ReorderLevel,Integer)
            ~dulla^@204~ s Nothing) Then
                Thro~dulla^@204~ ArgumentNullException("ShelfNo")
   ~dulla^@204~ 
                Me.Adapter.InsertCo~dulla^@204~ ers(10).Value = CType(ShelfNo,String)~dulla^@204~  End If
            Dim previousConn~dulla^@204~ s System.Data.ConnectionState = Me.Ad~dulla^@204~ ommand.Connection.State
            ~dulla^@204~ er.InsertCommand.Connection.State And~dulla^@204~ ConnectionState.Open)  _
           ~dulla^@204~ <> System.Data.ConnectionState.Open) ~dulla^@204~          Me.Adapter.InsertCommand.Con~dulla^@204~ 
            End If
            Try ~dulla^@204~      Dim returnValue As Integer = Me.~dulla^@204~ tCommand.ExecuteNonQuery
           ~dulla^@204~ eturnValue
            Finally
    ~dulla^@204~ f (previousConnectionState = System.D~dulla^@204~ nState.Closed) Then
                ~dulla^@204~ r.InsertCommand.Connection.Close
   ~dulla^@204~ End If
            End Try
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute(),  _
         Sys~dulla^@204~ Model.Design.HelpKeywordAttribute("vs~dulla^@204~ apter"),  _
         System.Componen~dulla^@204~ jectMethodAttribute(System.ComponentM~dulla^@204~ ctMethodType.Update, true)>  _
     ~dulla^@204~ rloads Overridable Function Update( _~dulla^@204~          ByVal PartNo As String,  _
~dulla^@204~        ByVal Description As String,  ~dulla^@204~           ByVal UnitCost As System.Nu~dulla^@204~ imal),  _
                    ByVal ~dulla^@204~  As Double,  _
                    B~dulla^@204~ rice2 As Double,  _
                ~dulla^@204~ AtShop1 As System.Nullable(Of Integer~dulla^@204~               ByVal QtyAtShop2 As Sys~dulla^@204~ Of Integer),  _
                    ~dulla^@204~ ore As System.Nullable(Of Integer),  ~dulla^@204~           ByVal TotalQuantity As Syst~dulla^@204~ f Integer),  _
                    B~dulla^@204~ evel As Integer,  _
                ~dulla^@204~ lfNo As String,  _
                 ~dulla^@204~ inal_PartNo As String,  _
                    ByVal Original_Description As St~dulla^@204~                  ByVal Original_UnitC~dulla^@204~ .Nullable(Of Decimal),  _
          ~dulla^@204~ al Original_SellingPrice1 As Double, ~dulla^@204~            ByVal Original_SellingPric~dulla^@204~   _
                    ByVal Origin~dulla^@204~  As System.Nullable(Of Integer),  _
~dulla^@204~        ByVal Original_QtyAtShop2 As S~dulla^@204~ e(Of Integer),  _
                  ~dulla^@204~ nal_QtyAtStore As System.Nullable(Of ~dulla^@204~ 
                    ByVal Original_T~dulla^@204~ As System.Nullable(Of Integer),  _
 ~dulla^@204~       ByVal Original_ReorderLevel As ~dulla^@204~                     ByVal Original_Sh~dulla^@204~ ng) As Integer
            If (PartN~dulla^@204~  Then
                Throw New Syst~dulla^@204~ llException("PartNo")
            El~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ e = CType(PartNo,String)
           ~dulla^@204~         If (Description Is Nothing) T~dulla^@204~         Throw New System.ArgumentNull~dulla^@204~ scription")
            Else
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(1).V~dulla^@204~ Description,String)
            End ~dulla^@204~    If (UnitCost.HasValue = true) Then~dulla^@204~      Me.Adapter.UpdateCommand.Paramet~dulla^@204~ = CType(UnitCost.Value,Decimal)
    ~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(2).Value = System.DBNull.Value
  ~dulla^@204~  If
            Me.Adapter.UpdateCom~dulla^@204~ rs(3).Value = CType(SellingPrice1,Dou~dulla^@204~      Me.Adapter.UpdateCommand.Paramet~dulla^@204~ = CType(SellingPrice2,Double)
      ~dulla^@204~ AtShop1.HasValue = true) Then
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(5).V~dulla^@204~ QtyAtShop1.Value,Integer)
          ~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ Value = System.DBNull.Value
        ~dulla^@204~            If (QtyAtShop2.HasValue = ~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ (6).Value = CType(QtyAtShop2.Value,In~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(6).Value = System.DBNu~dulla^@204~          End If
            If (QtyA~dulla^@204~ ue = true) Then
                Me.A~dulla^@204~ Command.Parameters(7).Value = CType(Q~dulla^@204~ ue,Integer)
            Else
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(7).V~dulla^@204~ .DBNull.Value
            End If
  ~dulla^@204~ (TotalQuantity.HasValue = true) Then~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~  CType(TotalQuantity.Value,Integer)
~dulla^@204~ lse
                Me.Adapter.Updat~dulla^@204~ meters(8).Value = System.DBNull.Value~dulla^@204~  End If
            Me.Adapter.Updat~dulla^@204~ meters(9).Value = CType(ReorderLevel,~dulla^@204~          If (ShelfNo Is Nothing) Then~dulla^@204~      Throw New System.ArgumentNullExc~dulla^@204~ No")
            Else
             ~dulla^@204~ .UpdateCommand.Parameters(10).Value =~dulla^@204~ o,String)
            End If
      ~dulla^@204~ ginal_PartNo Is Nothing) Then
      ~dulla^@204~ ow New System.ArgumentNullException("~dulla^@204~ No")
            Else
             ~dulla^@204~ .UpdateCommand.Parameters(11).Value =~dulla^@204~ al_PartNo,String)
            End If~dulla^@204~  If (Original_Description Is Nothing)~dulla^@204~           Throw New System.ArgumentNu~dulla^@204~ Original_Description")
            E~dulla^@204~         Me.Adapter.UpdateCommand.Para~dulla^@204~ lue = CType(Original_Description,Stri~dulla^@204~     End If
            If (Original_~dulla^@204~ alue = true) Then
                Me~dulla^@204~ teCommand.Parameters(13).Value = CTyp~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(14).Value = CType(Original_UnitCost~dulla^@204~ l)
            Else
               ~dulla^@204~ pdateCommand.Parameters(13).Value = C~dulla^@204~ )
                Me.Adapter.UpdateC~dulla^@204~ ters(14).Value = System.DBNull.Value~dulla^@204~ End If
            Me.Adapter.Update~dulla^@204~ eters(15).Value = CType(Original_Sell~dulla^@204~ ble)
            Me.Adapter.UpdateCo~dulla^@204~ ers(16).Value = CType(Original_Sellin~dulla^@204~ e)
            If (Original_QtyAtSho~dulla^@204~  true) Then
                Me.Adapt~dulla^@204~ and.Parameters(17).Value = CType(0,Ob~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ Value = CType(Original_QtyAtShop1.Val~dulla^@204~             Else
                Me.~dulla^@204~ eCommand.Parameters(17).Value = CType~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ (18).Value = System.DBNull.Value
   ~dulla^@204~ If
            If (Original_QtyAtSho~dulla^@204~  true) Then
                Me.Adapt~dulla^@204~ and.Parameters(19).Value = CType(0,Ob~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ Value = CType(Original_QtyAtShop2.Val~dulla^@204~             Else
                Me.~dulla^@204~ eCommand.Parameters(19).Value = CType~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ (20).Value = System.DBNull.Value
   ~dulla^@204~ If
            If (Original_QtyAtSto~dulla^@204~  true) Then
                Me.Adapt~dulla^@204~ and.Parameters(21).Value = CType(0,Ob~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ Value = CType(Original_QtyAtStore.Val~dulla^@204~             Else
                Me.~dulla^@204~ eCommand.Parameters(21).Value = CType~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ (22).Value = System.DBNull.Value
   ~dulla^@204~ If
            If (Original_TotalQua~dulla^@204~ e = true) Then
                Me.Ad~dulla^@204~ ommand.Parameters(23).Value = CType(0~dulla^@204~              Me.Adapter.UpdateCommand~dulla^@204~ 4).Value = CType(Original_TotalQuanti~dulla^@204~ ger)
            Else
             ~dulla^@204~ .UpdateCommand.Parameters(23).Value =~dulla^@204~ ct)
                Me.Adapter.Updat~dulla^@204~ meters(24).Value = System.DBNull.Valu~dulla^@204~   End If
            Me.Adapter.Upda~dulla^@204~ ameters(25).Value = CType(Original_Re~dulla^@204~ teger)
            If (Original_Shel~dulla^@204~ g) Then
                Throw New Sy~dulla^@204~ NullException("Original_ShelfNo")
  ~dulla^@204~ e
                Me.Adapter.UpdateC~dulla^@204~ ters(26).Value = CType(Original_Shelf~dulla^@204~            End If
            Dim pr~dulla^@204~ ionState As System.Data.ConnectionSta~dulla^@204~ er.UpdateCommand.Connection.State
  ~dulla^@204~ ((Me.Adapter.UpdateCommand.Connection~dulla^@204~ stem.Data.ConnectionState.Open)  _
 ~dulla^@204~           <> System.Data.ConnectionSt~dulla^@204~ n
                Me.Adapter.UpdateC~dulla^@204~ tion.Open
            End If
      ~dulla^@204~                Dim returnValue As Int~dulla^@204~ pter.UpdateCommand.ExecuteNonQuery
 ~dulla^@204~   Return returnValue
            Fin~dulla^@204~          If (previousConnectionState ~dulla^@204~ .ConnectionState.Closed) Then
      ~dulla^@204~  Me.Adapter.UpdateCommand.Connection.~dulla^@204~           End If
            End Try~dulla^@204~  Function
    End Class
    
    <~dulla^@204~ m.Compiler.GeneratedCodeAttribute("Sy~dulla^@204~ ign.TypedDataSetGenerator", "2.0.0.0"~dulla^@204~ ystem.ComponentModel.DesignerCategory~dulla^@204~ de"),  _
     System.ComponentModel.~dulla^@204~ rue),  _
     System.ComponentModel.~dulla^@204~ ribute(true),  _
     System.Compone~dulla^@204~ nerAttribute("Microsoft.VSDesigner.Da~dulla^@204~ gn.TableAdapterDesigner, Microsoft.VS~dulla^@204~ 
        ", Version=8.0.0.0, Culture~dulla^@204~ licKeyToken=b03f5f7f11d50a3a"),  _
 ~dulla^@204~ mponentModel.Design.HelpKeywordAttrib~dulla^@204~ TableAdapter")>  _
    Partial Publi~dulla^@204~ aseTableAdapter
        Inherits Sys~dulla^@204~ Model.Component
        
        Pr~dulla^@204~ nts _adapter As System.Data.SqlClient~dulla^@204~ er
        
        Private _connec~dulla^@204~ m.Data.SqlClient.SqlConnection
     ~dulla^@204~ Private _commandCollection() As Syste~dulla^@204~ ent.SqlCommand
        
        Pri~dulla^@204~ foreFill As Boolean
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
        ~dulla^@204~ w
            Me.ClearBeforeFill = t~dulla^@204~ End Sub
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ eadOnly Property Adapter() As System.~dulla^@204~ t.SqlDataAdapter
            Get
  ~dulla^@204~  If (Me._adapter Is Nothing) Then
  ~dulla^@204~      Me.InitAdapter
                ~dulla^@204~            Return Me._adapter
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Friend Property Connection() As~dulla^@204~ SqlClient.SqlConnection
            ~dulla^@204~         If (Me._connection Is Nothing~dulla^@204~                Me.InitConnection
   ~dulla^@204~ End If
                Return Me._co~dulla^@204~          End Get
            Set
  ~dulla^@204~  Me._connection = value
            ~dulla^@204~ Me.Adapter.InsertCommand) Is Nothing)~dulla^@204~               Me.Adapter.InsertComman~dulla^@204~ = value
                End If
    ~dulla^@204~ f (Not (Me.Adapter.DeleteCommand) Is ~dulla^@204~ 
                    Me.Adapter.Dele~dulla^@204~ nection = value
                End ~dulla^@204~        If (Not (Me.Adapter.UpdateComm~dulla^@204~ ng) Then
                    Me.Adap~dulla^@204~ mand.Connection = value
            ~dulla^@204~                Dim i As Integer = 0
~dulla^@204~    Do While (i < Me.CommandCollection~dulla^@204~                  If (Not (Me.CommandC~dulla^@204~  Is Nothing) Then
                  ~dulla^@204~ e.CommandCollection(i),System.Data.Sq~dulla^@204~ mmand).Connection = value
          ~dulla^@204~  If
                    i = (i + 1)~dulla^@204~     Loop
            End Set
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pr~dulla^@204~ nly Property CommandCollection() As S~dulla^@204~ lClient.SqlCommand()
            Get~dulla^@204~      If (Me._commandCollection Is Not~dulla^@204~                    Me.InitCommandColl~dulla^@204~            End If
                Re~dulla^@204~ andCollection
            End Get
 ~dulla^@204~ operty
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ perty ClearBeforeFill() As Boolean
 ~dulla^@204~ t
                Return Me._clearBe~dulla^@204~          End Get
            Set
  ~dulla^@204~  Me._clearBeforeFill = value
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Private Sub InitAdapter()
     ~dulla^@204~ apter = New System.Data.SqlClient.Sql~dulla^@204~             Dim tableMapping As Syste~dulla^@204~ .DataTableMapping = New System.Data.C~dulla^@204~ leMapping
            tableMapping.S~dulla^@204~ "Table"
            tableMapping.Dat~dulla^@204~ Purchase"
            tableMapping.C~dulla^@204~ .Add("PurchaseInvoiceNo", "PurchaseIn~dulla^@204~           tableMapping.ColumnMappings~dulla^@204~ urchase", "DateOfPurchase")
        ~dulla^@204~ ing.ColumnMappings.Add("TotalAmount",~dulla^@204~ ")
            tableMapping.ColumnMa~dulla^@204~ rieghtCharge", "FrieghtCharge")
    ~dulla^@204~ Mapping.ColumnMappings.Add("Miscellan~dulla^@204~ iscellaneousCost")
            table~dulla^@204~ nMappings.Add("GrandTotal", "GrandTot~dulla^@204~      tableMapping.ColumnMappings.Add(~dulla^@204~  "SupplierID")
            Me._adapt~dulla^@204~ ngs.Add(tableMapping)
            Me~dulla^@204~ eteCommand = New System.Data.SqlClien~dulla^@204~ 
            Me._adapter.DeleteComman~dulla^@204~ = Me.Connection
            Me._adap~dulla^@204~ mand.CommandText = "DELETE FROM [dbo]~dulla^@204~ HERE (([PurchaseInvoiceNo] = @Origina~dulla^@204~ o"& _ 
                "iceNo) AND (~dulla^@204~ se] = @Original_DateOfPurchase) AND (~dulla^@204~  = @O"& _ 
                "riginal_~dulla^@204~ AND ([FrieghtCharge] = @Original_Frie~dulla^@204~ D ([Misce"& _ 
                "llan~dulla^@204~ Original_MiscellaneousCost) AND ([Gra~dulla^@204~ riginal_Grand"& _ 
                "~dulla^@204~ SupplierID] = @Original_SupplierID))"~dulla^@204~  Me._adapter.DeleteCommand.CommandTyp~dulla^@204~ ta.CommandType.Text
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@Original_PurchaseInvoi~dulla^@204~ .Data.SqlDbType.NVarChar, 0, System.D~dulla^@204~ Direction.Input, 0, 0, "PurchaseInvoi~dulla^@204~ .Data.DataRowVersion.Original, false,~dulla^@204~  "", ""))
            Me._adapter.De~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@Original_DateOfPurchase", System~dulla^@204~ pe.DateTime, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "DateOfPurchase", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.DeleteCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ talAmount", System.Data.SqlDbType.Mon~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@Original_FrieghtCharge"~dulla^@204~ .SqlDbType.Money, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "FrieghtCharge", Syste~dulla^@204~ wVersion.Original, false, Nothing, ""~dulla^@204~            Me._adapter.DeleteCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ l_MiscellaneousCost", System.Data.Sql~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ iscellaneousCost", System.Data.DataRo~dulla^@204~ inal, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.DeleteCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Origina~dulla^@204~ , System.Data.SqlDbType.Money, 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "GrandTot~dulla^@204~ ata.DataRowVersion.Original, false, N~dulla^@204~ ", ""))
            Me._adapter.Dele~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@Original_SupplierID", System.Data.~dulla^@204~ rChar, 0, System.Data.ParameterDirect~dulla^@204~  0, "SupplierID", System.Data.DataRow~dulla^@204~ nal, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.InsertCommand = New System.D~dulla^@204~ .SqlCommand
            Me._adapter.~dulla^@204~ .Connection = Me.Connection
        ~dulla^@204~ er.InsertCommand.CommandText = "INSER~dulla^@204~ [Purchase] ([PurchaseInvoiceNo], [Dat~dulla^@204~  [TotalAmount"& _ 
                "~dulla^@204~ arge], [MiscellaneousCost], [GrandTot~dulla^@204~ rID]) VALUES (@Pu"& _ 
             ~dulla^@204~ oiceNo, @DateOfPurchase, @TotalAmount~dulla^@204~ rge, @MiscellaneousCo"& _ 
         ~dulla^@204~ GrandTotal, @SupplierID);"&Global.Mic~dulla^@204~ Basic.ChrW(13)&Global.Microsoft.Visua~dulla^@204~ 0)&"SELECT PurchaseInvoiceNo, DateOfP~dulla^@204~ lA"& _ 
                "mount, Frie~dulla^@204~ scellaneousCost, GrandTotal, Supplier~dulla^@204~ ase WH"& _ 
                "ERE (Pu~dulla^@204~ No = @PurchaseInvoiceNo)"
          ~dulla^@204~ .InsertCommand.CommandType = System.D~dulla^@204~ pe.Text
            Me._adapter.Inse~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@PurchaseInvoiceNo", System.Data.Sq~dulla^@204~ har, 0, System.Data.ParameterDirectio~dulla^@204~ , "PurchaseInvoiceNo", System.Data.Da~dulla^@204~ Current, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.InsertCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Date~dulla^@204~ System.Data.SqlDbType.DateTime, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "DateOfP~dulla^@204~ tem.Data.DataRowVersion.Current, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@TotalAmount", System.Data.SqlD~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ talAmount", System.Data.DataRowVersio~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.InsertCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@FrieghtCharge",~dulla^@204~ SqlDbType.Money, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "FrieghtCharge", System~dulla^@204~ Version.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ iscellaneousCost", System.Data.SqlDbT~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ ellaneousCost", System.Data.DataRowVe~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.InsertCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@GrandTotal"~dulla^@204~ .SqlDbType.Money, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "GrandTotal", System.D~dulla^@204~ rsion.Current, false, Nothing, "", ""~dulla^@204~        Me._adapter.InsertCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ , System.Data.SqlDbType.NVarChar, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Suppl~dulla^@204~ m.Data.DataRowVersion.Current, false,~dulla^@204~  "", ""))
            Me._adapter.Up~dulla^@204~  New System.Data.SqlClient.SqlCommand~dulla^@204~  Me._adapter.UpdateCommand.Connection~dulla^@204~ ion
            Me._adapter.UpdateCo~dulla^@204~ Text = "UPDATE [dbo].[Purchase] SET [~dulla^@204~ ceNo] = @PurchaseInvoiceNo, [DateOfPu~dulla^@204~             "hase] = @DateOfPurchase,~dulla^@204~ ] = @TotalAmount, [FrieghtCharge] = @~dulla^@204~                 "tCharge, [Miscellane~dulla^@204~ iscellaneousCost, [GrandTotal] = @Gra~dulla^@204~ _ 
                "SupplierID] = @S~dulla^@204~ RE (([PurchaseInvoiceNo] = @Original_~dulla^@204~ c"& _ 
                "eNo) AND ([D~dulla^@204~ ] = @Original_DateOfPurchase) AND ([T~dulla^@204~  @Ori"& _ 
                "ginal_To~dulla^@204~ D ([FrieghtCharge] = @Original_Friegh~dulla^@204~ ([Miscell"& _ 
                "aneo~dulla^@204~ iginal_MiscellaneousCost) AND ([Grand~dulla^@204~ ginal_GrandTo"& _ 
                "~dulla^@204~ pplierID] = @Original_SupplierID));"&~dulla^@204~ oft.VisualBasic.ChrW(13)&Global.Micro~dulla^@204~ sic.ChrW(10)&"SELECT PurchaseInvoiceN~dulla^@204~ 
                "OfPurchase, TotalAm~dulla^@204~ Charge, MiscellaneousCost, GrandTotal~dulla^@204~  _ 
                "D FROM Purchase~dulla^@204~ aseInvoiceNo = @PurchaseInvoiceNo)"
~dulla^@204~ e._adapter.UpdateCommand.CommandType ~dulla^@204~ .CommandType.Text
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@PurchaseInvoiceNo", Syst~dulla^@204~ Type.NVarChar, 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "PurchaseInvoiceNo", Syst~dulla^@204~ owVersion.Current, false, Nothing, ""~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ urchase", System.Data.SqlDbType.DateT~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ hase", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@TotalAmount", System~dulla^@204~ pe.Money, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "TotalAmount", System.Data.Dat~dulla^@204~ urrent, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.UpdateCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@Frieg~dulla^@204~ stem.Data.SqlDbType.Money, 0, System.~dulla^@204~ rDirection.Input, 0, 0, "FrieghtCharg~dulla^@204~ ta.DataRowVersion.Current, false, Not~dulla^@204~  ""))
            Me._adapter.Update~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @MiscellaneousCost", System.Data.SqlD~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ scellaneousCost", System.Data.DataRow~dulla^@204~ nt, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.UpdateCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@GrandTota~dulla^@204~ ta.SqlDbType.Money, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "GrandTotal", System~dulla^@204~ Version.Current, false, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ D", System.Data.SqlDbType.NVarChar, 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Sup~dulla^@204~ tem.Data.DataRowVersion.Current, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Original_PurchaseInvoiceNo", S~dulla^@204~ lDbType.NVarChar, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "PurchaseInvoiceNo", S~dulla^@204~ taRowVersion.Original, false, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ginal_DateOfPurchase", System.Data.Sq~dulla^@204~ ime, 0, System.Data.ParameterDirectio~dulla^@204~ , "DateOfPurchase", System.Data.DataR~dulla^@204~ ginal, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.UpdateCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@Origin~dulla^@204~ t", System.Data.SqlDbType.Money, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "TotalA~dulla^@204~ m.Data.DataRowVersion.Original, false~dulla^@204~ , "", ""))
            Me._adapter.U~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@Original_FrieghtCharge", System~dulla^@204~ pe.Money, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "FrieghtCharge", System.Data.D~dulla^@204~ .Original, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.UpdateCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Or~dulla^@204~ laneousCost", System.Data.SqlDbType.M~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ eousCost", System.Data.DataRowVersion~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.UpdateCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@Original_GrandT~dulla^@204~ .Data.SqlDbType.Money, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "GrandTotal", Sys~dulla^@204~ RowVersion.Original, false, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ nal_SupplierID", System.Data.SqlDbTyp~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ plierID", System.Data.DataRowVersion.~dulla^@204~ se, Nothing, "", "", ""))
        En~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Private Sub~dulla^@204~ on()
            Me._connection = Ne~dulla^@204~ .SqlClient.SqlConnection
           ~dulla^@204~ on.ConnectionString = Global.Inventor~dulla^@204~ m.My.MySettings.Default.PurchaseInfoC~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ vate Sub InitCommandCollection()
   ~dulla^@204~ commandCollection = New System.Data.S~dulla^@204~ ommand(0) {}
            Me._command~dulla^@204~  = New System.Data.SqlClient.SqlComma~dulla^@204~    Me._commandCollection(0).Connectio~dulla^@204~ tion
            Me._commandCollecti~dulla^@204~ Text = "SELECT PurchaseInvoiceNo, Dat~dulla^@204~ TotalAmount, FrieghtCharge, Miscellan~dulla^@204~             "usCost, GrandTotal, Supp~dulla^@204~ bo.Purchase"
            Me._command~dulla^@204~ .CommandType = System.Data.CommandTyp~dulla^@204~    End Sub
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute(),  _
 ~dulla^@204~ m.ComponentModel.Design.HelpKeywordAt~dulla^@204~ ata.TableAdapter"),  _
         Syst~dulla^@204~ odel.DataObjectMethodAttribute(System~dulla^@204~ el.DataObjectMethodType.Fill, true)> ~dulla^@204~ ublic Overloads Overridable Function ~dulla^@204~ taTable As InventoryControlSystemData~dulla^@204~ DataTable) As Integer
            Me~dulla^@204~ ctCommand = Me.CommandCollection(0)
~dulla^@204~ f (Me.ClearBeforeFill = true) Then
 ~dulla^@204~   dataTable.Clear
            End If~dulla^@204~  Dim returnValue As Integer = Me.Adap~dulla^@204~ Table)
            Return returnValu~dulla^@204~ d Function
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute(),  _
 ~dulla^@204~ m.ComponentModel.Design.HelpKeywordAt~dulla^@204~ ata.TableAdapter"),  _
         Syst~dulla^@204~ odel.DataObjectMethodAttribute(System~dulla^@204~ el.DataObjectMethodType.[Select], tru~dulla^@204~    Public Overloads Overridable Funct~dulla^@204~  As InventoryControlSystemDataSet3.Pu~dulla^@204~ le
            Me.Adapter.SelectComm~dulla^@204~ andCollection(0)
            Dim dataTable As InventoryControlSystemDataSet3.P~dulla^@204~ ble = New InventoryControlSystemDataS~dulla^@204~ ataTable
            Me.Adapter.Fill~dulla^@204~             Return dataTable
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute(),  _
         Sy~dulla^@204~ tModel.Design.HelpKeywordAttribute("v~dulla^@204~ dapter")>  _
        Public Overload~dulla^@204~  Function Update(ByVal dataTable As I~dulla^@204~ olSystemDataSet3.PurchaseDataTable) A~dulla^@204~           Return Me.Adapter.Update(da~dulla^@204~      End Function
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~   System.ComponentModel.Design.HelpKe~dulla^@204~ e("vs.data.TableAdapter")>  _
      ~dulla^@204~ loads Overridable Function Update(ByV~dulla^@204~  InventoryControlSystemDataSet3) As I~dulla^@204~        Return Me.Adapter.Update(dataS~dulla^@204~ ")
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~          System.ComponentModel.Design~dulla^@204~ ttribute("vs.data.TableAdapter")>  _~dulla^@204~ ic Overloads Overridable Function Upd~dulla^@204~ aRow As System.Data.DataRow) As Integ~dulla^@204~    Return Me.Adapter.Update(New Syste~dulla^@204~ w() {dataRow})
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute(),  _
         System.Component~dulla^@204~ HelpKeywordAttribute("vs.data.TableAd~dulla^@204~         Public Overloads Overridable ~dulla^@204~ te(ByVal dataRows() As System.Data.Da~dulla^@204~ eger
            Return Me.Adapter.U~dulla^@204~ s)
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~          System.ComponentModel.Design~dulla^@204~ ttribute("vs.data.TableAdapter"),  _~dulla^@204~ tem.ComponentModel.DataObjectMethodAt~dulla^@204~ m.ComponentModel.DataObjectMethodType~dulla^@204~ )>  _
        Public Overloads Overr~dulla^@204~ on Delete(ByVal Original_PurchaseInvo~dulla^@204~ ng, ByVal Original_DateOfPurchase As ~dulla^@204~ riginal_TotalAmount As Decimal, ByVal~dulla^@204~ eghtCharge As Decimal, ByVal Original~dulla^@204~ sCost As Decimal, ByVal Original_Gran~dulla^@204~ imal, ByVal Original_SupplierID As St~dulla^@204~ ger
            If (Original_Purchas~dulla^@204~  Nothing) Then
                Throw~dulla^@204~ rgumentNullException("Original_Purcha~dulla^@204~ 
            Else
                M~dulla^@204~ eteCommand.Parameters(0).Value = CTyp~dulla^@204~ rchaseInvoiceNo,String)
            ~dulla^@204~        Me.Adapter.DeleteCommand.Param~dulla^@204~ e = CType(Original_DateOfPurchase,Dat~dulla^@204~    Me.Adapter.DeleteCommand.Parameter~dulla^@204~ CType(Original_TotalAmount,Decimal)
~dulla^@204~ e.Adapter.DeleteCommand.Parameters(3)~dulla^@204~ e(Original_FrieghtCharge,Decimal)
  ~dulla^@204~ Adapter.DeleteCommand.Parameters(4).V~dulla^@204~ Original_MiscellaneousCost,Decimal)
~dulla^@204~ e.Adapter.DeleteCommand.Parameters(5)~dulla^@204~ e(Original_GrandTotal,Decimal)
     ~dulla^@204~ iginal_SupplierID Is Nothing) Then
 ~dulla^@204~   Throw New System.ArgumentNullExcept~dulla^@204~ _SupplierID")
            Else
    ~dulla^@204~ e.Adapter.DeleteCommand.Parameters(6)~dulla^@204~ e(Original_SupplierID,String)
      ~dulla^@204~ 
            Dim previousConnectionSt~dulla^@204~ .Data.ConnectionState = Me.Adapter.De~dulla^@204~ onnection.State
            If ((Me.~dulla^@204~ eCommand.Connection.State And System.~dulla^@204~ onState.Open)  _
                   ~dulla^@204~ m.Data.ConnectionState.Open) Then
  ~dulla^@204~  Me.Adapter.DeleteCommand.Connection.~dulla^@204~      End If
            Try 
      ~dulla^@204~  returnValue As Integer = Me.Adapter.~dulla^@204~ .ExecuteNonQuery
                Ret~dulla^@204~ ue
            Finally
            ~dulla^@204~ ousConnectionState = System.Data.Conn~dulla^@204~ losed) Then
                    Me.A~dulla^@204~ Command.Connection.Close
           ~dulla^@204~             End Try
        End Func~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute(),  _
         System.Comp~dulla^@204~ sign.HelpKeywordAttribute("vs.data.Ta~dulla^@204~   _
         System.ComponentModel.D~dulla^@204~ odAttribute(System.ComponentModel.Dat~dulla^@204~ Type.Insert, true)>  _
        Publi~dulla^@204~ verridable Function Insert(ByVal Purc~dulla^@204~  As String, ByVal DateOfPurchase As D~dulla^@204~ talAmount As Decimal, ByVal FrieghtCh~dulla^@204~ al, ByVal MiscellaneousCost As Decima~dulla^@204~ dTotal As Decimal, ByVal SupplierID A~dulla^@204~ Integer
            If (PurchaseInvo~dulla^@204~ ing) Then
                Throw New ~dulla^@204~ ntNullException("PurchaseInvoiceNo")~dulla^@204~ Else
                Me.Adapter.Inse~dulla^@204~ ameters(0).Value = CType(PurchaseInvo~dulla^@204~ 
            End If
            Me.~dulla^@204~ tCommand.Parameters(1).Value = CType(~dulla^@204~ e,Date)
            Me.Adapter.Inser~dulla^@204~ meters(2).Value = CType(TotalAmount,D~dulla^@204~         Me.Adapter.InsertCommand.Para~dulla^@204~ ue = CType(FrieghtCharge,Decimal)
  ~dulla^@204~ Adapter.InsertCommand.Parameters(4).V~dulla^@204~ MiscellaneousCost,Decimal)
         ~dulla^@204~ .InsertCommand.Parameters(5).Value = ~dulla^@204~ tal,Decimal)
            If (Supplie~dulla^@204~ g) Then
                Throw New Sy~dulla^@204~ NullException("SupplierID")
        ~dulla^@204~              Me.Adapter.InsertCommand~dulla^@204~ ).Value = CType(SupplierID,String)
 ~dulla^@204~ d If
            Dim previousConnect~dulla^@204~ ystem.Data.ConnectionState = Me.Adapt~dulla^@204~ and.Connection.State
            If ~dulla^@204~ InsertCommand.Connection.State And Sy~dulla^@204~ nectionState.Open)  _
              ~dulla^@204~ System.Data.ConnectionState.Open) The~dulla^@204~       Me.Adapter.InsertCommand.Connec~dulla^@204~           End If
            Try 
 ~dulla^@204~   Dim returnValue As Integer = Me.Ada~dulla^@204~ mmand.ExecuteNonQuery
              ~dulla^@204~ rnValue
            Finally
       ~dulla^@204~ previousConnectionState = System.Data~dulla^@204~ ate.Closed) Then
                   ~dulla^@204~ nsertCommand.Connection.Close
      ~dulla^@204~  If
            End Try
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute(),  _
         System~dulla^@204~ el.Design.HelpKeywordAttribute("vs.da~dulla^@204~ er"),  _
         System.ComponentMo~dulla^@204~ tMethodAttribute(System.ComponentMode~dulla^@204~ ethodType.Update, true)>  _
        ~dulla^@204~ ads Overridable Function Update(ByVal~dulla^@204~ iceNo As String, ByVal DateOfPurchase~dulla^@204~ al TotalAmount As Decimal, ByVal Frie~dulla^@204~ Decimal, ByVal MiscellaneousCost As D~dulla^@204~  GrandTotal As Decimal, ByVal Supplie~dulla^@204~ , ByVal Original_PurchaseInvoiceNo As~dulla^@204~ l Original_DateOfPurchase As Date, By~dulla^@204~ TotalAmount As Decimal, ByVal Origina~dulla^@204~ ge As Decimal, ByVal Original_Miscell~dulla^@204~  Decimal, ByVal Original_GrandTotal A~dulla^@204~ Val Original_SupplierID As String) As~dulla^@204~          If (PurchaseInvoiceNo Is Not~dulla^@204~                Throw New System.Argum~dulla^@204~ ion("PurchaseInvoiceNo")
           ~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ alue = CType(PurchaseInvoiceNo,String~dulla^@204~   End If
            Me.Adapter.Upda~dulla^@204~ ameters(1).Value = CType(DateOfPurcha~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ lue = CType(TotalAmount,Decimal)
   ~dulla^@204~ dapter.UpdateCommand.Parameters(3).Va~dulla^@204~ rieghtCharge,Decimal)
            Me~dulla^@204~ teCommand.Parameters(4).Value = CType~dulla^@204~ sCost,Decimal)
            Me.Adapte~dulla^@204~ nd.Parameters(5).Value = CType(GrandT~dulla^@204~ 
            If (SupplierID Is Nothi~dulla^@204~              Throw New System.Argumen~dulla^@204~ n("SupplierID")
            Else
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ ype(SupplierID,String)
            E~dulla^@204~       If (Original_PurchaseInvoiceNo ~dulla^@204~ hen
                Throw New System.ArgumentNullException("Original_PurchaseI~dulla^@204~            Else
                Me.A~dulla^@204~ Command.Parameters(7).Value = CType(O~dulla^@204~ aseInvoiceNo,String)
            End~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~  CType(Original_DateOfPurchase,Date)~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(9~dulla^@204~ pe(Original_TotalAmount,Decimal)
   ~dulla^@204~ dapter.UpdateCommand.Parameters(10).V~dulla^@204~ Original_FrieghtCharge,Decimal)
    ~dulla^@204~ apter.UpdateCommand.Parameters(11).Va~dulla^@204~ riginal_MiscellaneousCost,Decimal)
 ~dulla^@204~ .Adapter.UpdateCommand.Parameters(12)~dulla^@204~ e(Original_GrandTotal,Decimal)
     ~dulla^@204~ iginal_SupplierID Is Nothing) Then
 ~dulla^@204~   Throw New System.ArgumentNullExcept~dulla^@204~ _SupplierID")
            Else
    ~dulla^@204~ e.Adapter.UpdateCommand.Parameters(13~dulla^@204~ pe(Original_SupplierID,String)
     ~dulla^@204~ 
            Dim previousConnectionS~dulla^@204~ m.Data.ConnectionState = Me.Adapter.U~dulla^@204~ Connection.State
            If ((Me~dulla^@204~ teCommand.Connection.State And System~dulla^@204~ ionState.Open)  _
                  ~dulla^@204~ em.Data.ConnectionState.Open) Then
 ~dulla^@204~   Me.Adapter.UpdateCommand.Connection~dulla^@204~       End If
            Try 
     ~dulla^@204~ m returnValue As Integer = Me.Adapter~dulla^@204~ d.ExecuteNonQuery
                Re~dulla^@204~ lue
            Finally
           ~dulla^@204~ iousConnectionState = System.Data.Con~dulla^@204~ Closed) Then
                    Me.~dulla^@204~ eCommand.Connection.Close
          ~dulla^@204~ 
            End Try
        End Fun~dulla^@204~ d Class
    
    <System.CodeDom.Co~dulla^@204~ tedCodeAttribute("System.Data.Design.~dulla^@204~ enerator", "2.0.0.0"),  _
     Syste~dulla^@204~ del.DesignerCategoryAttribute("code")~dulla^@204~ stem.ComponentModel.ToolboxItem(true)~dulla^@204~ stem.ComponentModel.DataObjectAttribu~dulla^@204~ 
     System.ComponentModel.DesignerA~dulla^@204~ rosoft.VSDesigner.DataSource.Design.T~dulla^@204~ signer, Microsoft.VSDesigner"& _ 
  ~dulla^@204~ ion=8.0.0.0, Culture=neutral, PublicK~dulla^@204~ f7f11d50a3a"),  _
     System.Compon~dulla^@204~ gn.HelpKeywordAttribute("vs.data.Tabl~dulla^@204~ _
    Partial Public Class PurchaseI~dulla^@204~ er
        Inherits System.Component~dulla^@204~ nt
        
        Private WithEve~dulla^@204~ As System.Data.SqlClient.SqlDataAdapt~dulla^@204~ 
        Private _connection As Syste~dulla^@204~ ent.SqlConnection
        
        ~dulla^@204~ andCollection() As System.Data.SqlCli~dulla^@204~ d
        
        Private _clearBe~dulla^@204~ oolean
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~  New()
            MyBase.New
     ~dulla^@204~ arBeforeFill = true
        End Sub~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Private ReadOnly ~dulla^@204~ ter() As System.Data.SqlClient.SqlDat~dulla^@204~          Get
                If (Me.~dulla^@204~ othing) Then
                    Me.~dulla^@204~                 End If
             ~dulla^@204~ _adapter
            End Get
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Fr~dulla^@204~  Connection() As System.Data.SqlClien~dulla^@204~ on
            Get
                ~dulla^@204~ ction Is Nothing) Then
             ~dulla^@204~ tConnection
                End If
~dulla^@204~    Return Me._connection
           ~dulla^@204~          Set
                Me._con~dulla^@204~ ue
                If (Not (Me.Adapt~dulla^@204~ and) Is Nothing) Then
              ~dulla^@204~ ter.InsertCommand.Connection = value~dulla^@204~     End If
                If (Not (~dulla^@204~ leteCommand) Is Nothing) Then
      ~dulla^@204~  Me.Adapter.DeleteCommand.Connection ~dulla^@204~             End If
                I~dulla^@204~ apter.UpdateCommand) Is Nothing) Then~dulla^@204~          Me.Adapter.UpdateCommand.Con~dulla^@204~ ue
                End If
         ~dulla^@204~ As Integer = 0
                Do Wh~dulla^@204~ ommandCollection.Length)
           ~dulla^@204~ Not (Me.CommandCollection(i)) Is Noth~dulla^@204~                       CType(Me.Comman~dulla^@204~ ),System.Data.SqlClient.SqlCommand).C~dulla^@204~ alue
                    End If
   ~dulla^@204~     i = (i + 1)
                Loop~dulla^@204~  End Set
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Protected ReadOnly Prop~dulla^@204~ ollection() As System.Data.SqlClient.~dulla^@204~ 
            Get
                If ~dulla^@204~ ollection Is Nothing) Then
         ~dulla^@204~ .InitCommandCollection
             ~dulla^@204~               Return Me._commandColle~dulla^@204~       End Get
        End Property
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Property Cl~dulla^@204~ () As Boolean
            Get
     ~dulla^@204~ turn Me._clearBeforeFill
           ~dulla^@204~          Set
                Me._cle~dulla^@204~ = value
            End Set
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pri~dulla^@204~ Adapter()
            Me._adapter = ~dulla^@204~ ta.SqlClient.SqlDataAdapter
        ~dulla^@204~ Mapping As System.Data.Common.DataTab~dulla^@204~ ew System.Data.Common.DataTableMappin~dulla^@204~   tableMapping.SourceTable = "Table"~dulla^@204~ tableMapping.DataSetTable = "Purchase~dulla^@204~       tableMapping.ColumnMappings.Add~dulla^@204~ artNo")
            tableMapping.Col~dulla^@204~ dd("Description", "Description")
   ~dulla^@204~ eMapping.ColumnMappings.Add("Brand", ~dulla^@204~          tableMapping.ColumnMappings.~dulla^@204~  "Origin")
            tableMapping.~dulla^@204~ s.Add("NetWeight", "NetWeight")
    ~dulla^@204~ Mapping.ColumnMappings.Add("Quantity"~dulla^@204~ 
            tableMapping.ColumnMapp~dulla^@204~ ce", "Price")
            tableMappi~dulla^@204~ ings.Add("Amount", "Amount")
       ~dulla^@204~ ping.ColumnMappings.Add("SupplierID",~dulla^@204~ )
            tableMapping.ColumnMap~dulla^@204~ voiceNo", "InvoiceNo")
            M~dulla^@204~ bleMappings.Add(tableMapping)
      ~dulla^@204~ pter.DeleteCommand = New System.Data.~dulla^@204~ Command
            Me._adapter.Dele~dulla^@204~ nection = Me.Connection
            ~dulla^@204~ eleteCommand.CommandText = "DELETE FR~dulla^@204~ chaseInfo] WHERE (([PartNo] = @Origin~dulla^@204~ D ([Descr"& _ 
                "ipti~dulla^@204~ al_Description) AND ((@IsNull_Brand =~dulla^@204~ ] IS NULL) OR"& _ 
                "~dulla^@204~ Original_Brand)) AND ((@IsNull_Origin~dulla^@204~ gin] IS NULL) OR "& _ 
             ~dulla^@204~  = @Original_Origin)) AND ((@IsNull_N~dulla^@204~ AND [NetWeight] IS NU"& _ 
         ~dulla^@204~ R ([NetWeight] = @Original_NetWeight)~dulla^@204~ ity] = @Original_Quantity"& _ 
     ~dulla^@204~  AND ((@IsNull_Price = 1 AND [Price] ~dulla^@204~ [Price] = @Original_Price)) A"& _ 
 ~dulla^@204~   "ND ([Amount] = @Original_Amount) A~dulla^@204~ ID] = @Original_SupplierID) AND ("& _~dulla^@204~       "[InvoiceNo] = @Original_Invoic~dulla^@204~        Me._adapter.DeleteCommand.Comm~dulla^@204~ tem.Data.CommandType.Text
          ~dulla^@204~ .DeleteCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@Original_PartNo"~dulla^@204~ .SqlDbType.NVarChar, 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "PartNo", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.DeleteCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ scription", System.Data.SqlDbType.[Ch~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ n", System.Data.DataRowVersion.Origin~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@IsNull_Brand", System.~dulla^@204~ e.Int, 0, System.Data.ParameterDirect~dulla^@204~  0, "Brand", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
~dulla^@204~ e._adapter.DeleteCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@Origin~dulla^@204~ stem.Data.SqlDbType.[Char], 0, System~dulla^@204~ erDirection.Input, 0, 0, "Brand", Sys~dulla^@204~ RowVersion.Original, false, Nothing, ~dulla^@204~ 
            Me._adapter.DeleteComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ l_Origin", System.Data.SqlDbType.Int,~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "O~dulla^@204~ m.Data.DataRowVersion.Original, true,~dulla^@204~  "", ""))
            Me._adapter.De~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@Original_Origin", System.Data.Sq~dulla^@204~ ], 0, System.Data.ParameterDirection.~dulla^@204~ "Origin", System.Data.DataRowVersion.~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .DeleteCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@IsNull_NetWeight~dulla^@204~ a.SqlDbType.Int, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "NetWeight", System.Dat~dulla^@204~ ion.Original, true, Nothing, "", "", ~dulla^@204~      Me._adapter.DeleteCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ eight", System.Data.SqlDbType.[Char],~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "N~dulla^@204~ stem.Data.DataRowVersion.Original, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Original_Quantity", System.D~dulla^@204~ .Int, 0, System.Data.ParameterDirecti~dulla^@204~ 0, "Quantity", System.Data.DataRowVer~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.DeleteCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@IsNull_Pric~dulla^@204~ ta.SqlDbType.Int, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "Price", System.Data.D~dulla^@204~ .Original, true, Nothing, "", "", "")~dulla^@204~   Me._adapter.DeleteCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@Ori~dulla^@204~  System.Data.SqlDbType.Money, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "Price", S~dulla^@204~ taRowVersion.Original, false, Nothing~dulla^@204~ )
            Me._adapter.DeleteComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ginal_Amount", System.Data.SqlDbType.~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@Original_SupplierID", Sys~dulla^@204~ bType.NVarChar, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "SupplierID", System.Dat~dulla^@204~ ion.Original, false, Nothing, "", "",~dulla^@204~       Me._adapter.DeleteCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ oiceNo", System.Data.SqlDbType.NVarCh~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand = New System.Data.SqlClient.Sql~dulla^@204~         Me._adapter.InsertCommand.Con~dulla^@204~ Connection
            Me._adapter.I~dulla^@204~ CommandText = "INSERT INTO [dbo].[Pur~dulla^@204~ PartNo], [Description], [Brand], [Ori~dulla^@204~  
                "tWeight], [Quanti~dulla^@204~  [Amount], [SupplierID], [InvoiceNo])~dulla^@204~ "& _ 
                "tNo, @Descrip~dulla^@204~  @Origin, @NetWeight, @Quantity, @Pri~dulla^@204~ @Sup"& _ 
                "plierID, ~dulla^@204~ &Global.Microsoft.VisualBasic.ChrW(13~dulla^@204~ osoft.VisualBasic.ChrW(10)&"SELECT Pa~dulla^@204~ tion, Brand, Origin, NetWeight, Qua"&~dulla^@204~         "ntity, Price, Amount, Suppli~dulla^@204~ No FROM PurchaseInfo WHERE (PartNo = ~dulla^@204~             "artNo)"
            Me.~dulla^@204~ rtCommand.CommandType = System.Data.C~dulla^@204~ xt
            Me._adapter.InsertCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ rtNo", System.Data.SqlDbType.NVarChar~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ em.Data.DataRowVersion.Current, false~dulla^@204~ , "", ""))
            Me._adapter.I~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@Description", System.Data.SqlDb~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ scription", System.Data.DataRowVersio~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.InsertCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@Brand", System.~dulla^@204~ e.[Char], 0, System.Data.ParameterDir~dulla^@204~  0, 0, "Brand", System.Data.DataRowVe~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.InsertCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@Origin", Sy~dulla^@204~ DbType.[Char], 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "Origin", System.Data.Dat~dulla^@204~ urrent, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.InsertCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@NetWe~dulla^@204~ .Data.SqlDbType.[Char], 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "NetWeight", Sys~dulla^@204~ RowVersion.Current, false, Nothing, "~dulla^@204~             Me._adapter.InsertCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ ty", System.Data.SqlDbType.Int, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "Quantit~dulla^@204~ ta.DataRowVersion.Current, false, Not~dulla^@204~  ""))
            Me._adapter.Insert~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @Price", System.Data.SqlDbType.Money,~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "P~dulla^@204~ .Data.DataRowVersion.Current, false, ~dulla^@204~ "", ""))
            Me._adapter.Ins~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@Amount", System.Data.SqlDbType.Mo~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ ystem.Data.DataRowVersion.Current, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@SupplierID", System.Data.Sql~dulla^@204~ ar, 0, System.Data.ParameterDirection~dulla^@204~  "SupplierID", System.Data.DataRowVer~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.InsertCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@InvoiceNo", ~dulla^@204~ qlDbType.NVarChar, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "InvoiceNo", System.D~dulla^@204~ rsion.Current, false, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand = Ne~dulla^@204~ .SqlClient.SqlCommand
            Me~dulla^@204~ ateCommand.Connection = Me.Connection~dulla^@204~  Me._adapter.UpdateCommand.CommandTex~dulla^@204~ dbo].[PurchaseInfo] SET [PartNo] = @P~dulla^@204~ iption] = @Description,"& _ 
       ~dulla^@204~ rand] = @Brand, [Origin] = @Origin, [~dulla^@204~ @NetWeight, [Quantity] = @Q"& _ 
   ~dulla^@204~ "uantity, [Price] = @Price, [Amount] ~dulla^@204~ upplierID] = @SupplierID, [Invo"& _ ~dulla^@204~     "iceNo] = @InvoiceNo WHERE (([Par~dulla^@204~ nal_PartNo) AND ([Description] = @O"&~dulla^@204~         "riginal_Description) AND ((@~dulla^@204~ = 1 AND [Brand] IS NULL) OR ([Brand] ~dulla^@204~             "@Original_Brand)) AND ((~dulla^@204~ n = 1 AND [Origin] IS NULL) OR ([Orig~dulla^@204~                 "@Original_Origin)) A~dulla^@204~ NetWeight = 1 AND [NetWeight] IS NULL~dulla^@204~ _ 
                "Weight] = @Origi~dulla^@204~ )) AND ([Quantity] = @Original_Quanti~dulla^@204~ N"& _ 
                "ull_Price = ~dulla^@204~  IS NULL) OR ([Price] = @Original_Pri~dulla^@204~ ount]"& _ 
                " = @Orig~dulla^@204~ AND ([SupplierID] = @Original_Supplie~dulla^@204~ voiceNo] "& _ 
                "= @O~dulla^@204~ ceNo));"&Global.Microsoft.VisualBasic~dulla^@204~ bal.Microsoft.VisualBasic.ChrW(10)&"S~dulla^@204~  Description, Brand, Origin, NetWeigh~dulla^@204~              "Quantity, Price, Amount~dulla^@204~  InvoiceNo FROM PurchaseInfo WHERE (P~dulla^@204~ 
                " @PartNo)"
       ~dulla^@204~ ter.UpdateCommand.CommandType = Syste~dulla^@204~ dType.Text
            Me._adapter.U~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@PartNo", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirectio~dulla^@204~ , "PartNo", System.Data.DataRowVersio~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.UpdateCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@Description", S~dulla^@204~ lDbType.[Char], 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "Description", System.Da~dulla^@204~ sion.Current, false, Nothing, "", "",~dulla^@204~       Me._adapter.UpdateCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ em.Data.SqlDbType.[Char], 0, System.D~dulla^@204~ Direction.Input, 0, 0, "Brand", Syste~dulla^@204~ wVersion.Current, false, Nothing, "",~dulla^@204~           Me._adapter.UpdateCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~  System.Data.SqlDbType.[Char], 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "Origin",~dulla^@204~ DataRowVersion.Current, false, Nothin~dulla^@204~ ))
            Me._adapter.UpdateCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ tWeight", System.Data.SqlDbType.[Char~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ System.Data.DataRowVersion.Current, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@Quantity", System.Data.SqlD~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ tity", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@Price", System.Data.~dulla^@204~ ey, 0, System.Data.ParameterDirection~dulla^@204~  "Price", System.Data.DataRowVersion.~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ UpdateCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@Amount", System.D~dulla^@204~ .Money, 0, System.Data.ParameterDirec~dulla^@204~ , 0, "Amount", System.Data.DataRowVer~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.UpdateCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@SupplierID",~dulla^@204~ SqlDbType.NVarChar, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "SupplierID", System~dulla^@204~ Version.Current, false, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ ", System.Data.SqlDbType.NVarChar, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Invo~dulla^@204~ m.Data.DataRowVersion.Current, false,~dulla^@204~  "", ""))
            Me._adapter.Up~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@Original_PartNo", System.Data.Sq~dulla^@204~ har, 0, System.Data.ParameterDirectio~dulla^@204~ , "PartNo", System.Data.DataRowVersio~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Original_Descr~dulla^@204~ em.Data.SqlDbType.[Char], 0, System.D~dulla^@204~ Direction.Input, 0, 0, "Description",~dulla^@204~ DataRowVersion.Original, false, Nothi~dulla^@204~ "))
            Me._adapter.UpdateCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ sNull_Brand", System.Data.SqlDbType.I~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ tem.Data.DataRowVersion.Original, tru~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Original_Brand", System.Data.S~dulla^@204~ r], 0, System.Data.ParameterDirection~dulla^@204~  "Brand", System.Data.DataRowVersion.~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@IsNull_Origin", ~dulla^@204~ qlDbType.Int, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "Origin", System.Data.Data~dulla^@204~ iginal, true, Nothing, "", "", ""))
~dulla^@204~ e._adapter.UpdateCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@Origin~dulla^@204~ ystem.Data.SqlDbType.[Char], 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "Origin", S~dulla^@204~ taRowVersion.Original, false, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ull_NetWeight", System.Data.SqlDbType~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@Original_NetWeight", Sys~dulla^@204~ bType.[Char], 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "NetWeight", System.Data.D~dulla^@204~ .Original, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.UpdateCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Or~dulla^@204~ ty", System.Data.SqlDbType.Int, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "Quantit~dulla^@204~ ta.DataRowVersion.Original, false, No~dulla^@204~ , ""))
            Me._adapter.Updat~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@IsNull_Price", System.Data.SqlDbTyp~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ System.Data.DataRowVersion.Original, ~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@Original_Price", System.Dat~dulla^@204~ oney, 0, System.Data.ParameterDirecti~dulla^@204~ 0, "Price", System.Data.DataRowVersio~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Original_Amoun~dulla^@204~ ta.SqlDbType.Money, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "Amount", System.Dat~dulla^@204~ ion.Original, false, Nothing, "", "",~dulla^@204~       Me._adapter.UpdateCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ plierID", System.Data.SqlDbType.NVarC~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@Original_InvoiceNo", Sy~dulla^@204~ DbType.NVarChar, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "InvoiceNo", System.Dat~dulla^@204~ ion.Original, false, Nothing, "", "",~dulla^@204~   End Sub
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~  Sub InitConnection()
            Me~dulla^@204~ = New System.Data.SqlClient.SqlConnec~dulla^@204~      Me._connection.ConnectionString ~dulla^@204~ ntoryControlSystem.My.MySettings.Defa~dulla^@204~ nfoConnection
        End Sub
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Private Sub InitCommand~dulla^@204~ 
            Me._commandCollection = ~dulla^@204~ ta.SqlClient.SqlCommand(0) {}
      ~dulla^@204~ mandCollection(0) = New System.Data.S~dulla^@204~ ommand
            Me._commandCollec~dulla^@204~ ction = Me.Connection
            Me~dulla^@204~ ection(0).CommandText = "SELECT PartN~dulla^@204~ n, Brand, Origin, NetWeight, Quantity~dulla^@204~ nt, Su"& _ 
                "pplierI~dulla^@204~ FROM dbo.PurchaseInfo"
            M~dulla^@204~ lection(0).CommandType = System.Data.~dulla^@204~ ext
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~      System.ComponentModel.Design.Hel~dulla^@204~ bute("vs.data.TableAdapter"),  _
   ~dulla^@204~ ComponentModel.DataObjectMethodAttrib~dulla^@204~ mponentModel.DataObjectMethodType.Fil~dulla^@204~ 
        Public Overloads Overridable~dulla^@204~ l(ByVal dataTable As InventoryControl~dulla^@204~ 3.PurchaseInfoDataTable) As Integer
~dulla^@204~ e.Adapter.SelectCommand = Me.CommandC~dulla^@204~ 
            If (Me.ClearBeforeFill =~dulla^@204~                 dataTable.Clear
    ~dulla^@204~ f
            Dim returnValue As Int~dulla^@204~ pter.Fill(dataTable)
            Ret~dulla^@204~ ue
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~          System.ComponentModel.Design~dulla^@204~ ttribute("vs.data.TableAdapter"),  _~dulla^@204~ tem.ComponentModel.DataObjectMethodAt~dulla^@204~ m.ComponentModel.DataObjectMethodType~dulla^@204~ ue)>  _
        Public Overloads Overridable Function GetData() As InventoryCo~dulla^@204~ taSet3.PurchaseInfoDataTable
       ~dulla^@204~ er.SelectCommand = Me.CommandCollecti~dulla^@204~       Dim dataTable As InventoryContr~dulla^@204~ et3.PurchaseInfoDataTable = New Inven~dulla^@204~ stemDataSet3.PurchaseInfoDataTable
 ~dulla^@204~ .Adapter.Fill(dataTable)
           ~dulla^@204~ able
        End Function
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
         System.ComponentModel.Desi~dulla^@204~ dAttribute("vs.data.TableAdapter")>  ~dulla^@204~ blic Overloads Overridable Function U~dulla^@204~ ataTable As InventoryControlSystemDat~dulla^@204~ eInfoDataTable) As Integer
         ~dulla^@204~ Adapter.Update(dataTable)
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute(),  _
         Syste~dulla^@204~ del.Design.HelpKeywordAttribute("vs.d~dulla^@204~ ter")>  _
        Public Overloads O~dulla^@204~ nction Update(ByVal dataSet As Invent~dulla^@204~ temDataSet3) As Integer
            ~dulla^@204~ pter.Update(dataSet, "PurchaseInfo")~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute(),  _
   ~dulla^@204~ ComponentModel.Design.HelpKeywordAttr~dulla^@204~ a.TableAdapter")>  _
        Public ~dulla^@204~ rridable Function Update(ByVal dataRo~dulla^@204~ ata.DataRow) As Integer
            ~dulla^@204~ pter.Update(New System.Data.DataRow()~dulla^@204~         End Function
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~      System.ComponentModel.Design.Hel~dulla^@204~ bute("vs.data.TableAdapter")>  _
   ~dulla^@204~ verloads Overridable Function Update(~dulla^@204~ s() As System.Data.DataRow) As Intege~dulla^@204~   Return Me.Adapter.Update(dataRows)~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute(),  _
   ~dulla^@204~ ComponentModel.Design.HelpKeywordAttr~dulla^@204~ a.TableAdapter"),  _
         System~dulla^@204~ el.DataObjectMethodAttribute(System.C~dulla^@204~ .DataObjectMethodType.Delete, true)> ~dulla^@204~ ublic Overloads Overridable Function ~dulla^@204~ Original_PartNo As String, ByVal Orig~dulla^@204~ ion As String, ByVal Original_Brand A~dulla^@204~ al Original_Origin As String, ByVal O~dulla^@204~ ight As String, ByVal Original_Quanti~dulla^@204~ , ByVal Original_Price As System.Null~dulla^@204~ al), ByVal Original_Amount As Decimal~dulla^@204~ nal_SupplierID As String, ByVal Origi~dulla^@204~  As String) As Integer
            I~dulla^@204~ artNo Is Nothing) Then
             ~dulla^@204~ System.ArgumentNullException("Origina~dulla^@204~            Else
                Me.A~dulla^@204~ Command.Parameters(0).Value = CType(O~dulla^@204~ o,String)
            End If
      ~dulla^@204~ ginal_Description Is Nothing) Then
 ~dulla^@204~   Throw New System.ArgumentNullExcept~dulla^@204~ _Description")
            Else
   ~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(1~dulla^@204~ pe(Original_Description,String)
    ~dulla^@204~ f
            If (Original_Brand Is ~dulla^@204~ 
                Me.Adapter.DeleteCo~dulla^@204~ ers(2).Value = CType(1,Object)
     ~dulla^@204~ .Adapter.DeleteCommand.Parameters(3).~dulla^@204~ m.DBNull.Value
            Else
   ~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(2~dulla^@204~ pe(0,Object)
                Me.Adap~dulla^@204~ mand.Parameters(3).Value = CType(Orig~dulla^@204~ ring)
            End If
          ~dulla^@204~ l_Origin Is Nothing) Then
          ~dulla^@204~ ter.DeleteCommand.Parameters(4).Value~dulla^@204~ ject)
                Me.Adapter.Del~dulla^@204~ rameters(5).Value = System.DBNull.Val~dulla^@204~    Else
                Me.Adapter.D~dulla^@204~ Parameters(4).Value = CType(0,Object)~dulla^@204~      Me.Adapter.DeleteCommand.Paramet~dulla^@204~ = CType(Original_Origin,String)
    ~dulla^@204~ f
            If (Original_NetWeight~dulla^@204~ Then
                Me.Adapter.Dele~dulla^@204~ ameters(6).Value = CType(1,Object)
 ~dulla^@204~   Me.Adapter.DeleteCommand.Parameters~dulla^@204~ ystem.DBNull.Value
            Else~dulla^@204~     Me.Adapter.DeleteCommand.Paramete~dulla^@204~  CType(0,Object)
                Me.~dulla^@204~ eCommand.Parameters(7).Value = CType(~dulla^@204~ eight,String)
            End If
  ~dulla^@204~ Adapter.DeleteCommand.Parameters(8).V~dulla^@204~ Original_Quantity,Integer)
         ~dulla^@204~ al_Price.HasValue = true) Then
     ~dulla^@204~ .Adapter.DeleteCommand.Parameters(9).~dulla^@204~ (0,Object)
                Me.Adapte~dulla^@204~ nd.Parameters(10).Value = CType(Origi~dulla^@204~ ue,Decimal)
            Else
      ~dulla^@204~ Adapter.DeleteCommand.Parameters(9).V~dulla^@204~ 1,Object)
                Me.Adapter~dulla^@204~ d.Parameters(10).Value = System.DBNul~dulla^@204~         End If
            Me.Adapte~dulla^@204~ nd.Parameters(11).Value = CType(Origi~dulla^@204~ cimal)
            If (Original_Supp~dulla^@204~ hing) Then
                Throw New~dulla^@204~ entNullException("Original_SupplierID~dulla^@204~    Else
                Me.Adapter.D~dulla^@204~ Parameters(12).Value = CType(Original~dulla^@204~ tring)
            End If
         ~dulla^@204~ al_InvoiceNo Is Nothing) Then
      ~dulla^@204~ ow New System.ArgumentNullException("~dulla^@204~ iceNo")
            Else
          ~dulla^@204~ ter.DeleteCommand.Parameters(13).Valu~dulla^@204~ ginal_InvoiceNo,String)
            ~dulla^@204~        Dim previousConnectionState As~dulla^@204~ ConnectionState = Me.Adapter.DeleteCo~dulla^@204~ ion.State
            If ((Me.Adapte~dulla^@204~ nd.Connection.State And System.Data.C~dulla^@204~ e.Open)  _
                        <~dulla^@204~ .ConnectionState.Open) Then
        ~dulla^@204~ apter.DeleteCommand.Connection.Open
~dulla^@204~ nd If
            Try 
            ~dulla^@204~ nValue As Integer = Me.Adapter.Delete~dulla^@204~ teNonQuery
                Return re~dulla^@204~           Finally
                If~dulla^@204~ nectionState = System.Data.Connection~dulla^@204~  Then
                    Me.Adapter~dulla^@204~ d.Connection.Close
                E~dulla^@204~       End Try
        End Function
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute(),  _
         System.ComponentM~dulla^@204~ elpKeywordAttribute("vs.data.TableAda~dulla^@204~         System.ComponentModel.DataObj~dulla^@204~ ibute(System.ComponentModel.DataObjec~dulla^@204~ nsert, true)>  _
        Public Over~dulla^@204~ able Function Insert(ByVal PartNo As ~dulla^@204~  Description As String, ByVal Brand A~dulla^@204~ al Origin As String, ByVal NetWeight ~dulla^@204~ Val Quantity As Integer, ByVal Price ~dulla^@204~ lable(Of Decimal), ByVal Amount As De~dulla^@204~ SupplierID As String, ByVal InvoiceNo~dulla^@204~ s Integer
            If (PartNo Is ~dulla^@204~ 
                Throw New System.Ar~dulla^@204~ eption("PartNo")
            Else
 ~dulla^@204~   Me.Adapter.InsertCommand.Parameters~dulla^@204~ Type(PartNo,String)
            End ~dulla^@204~    If (Description Is Nothing) Then
~dulla^@204~    Throw New System.ArgumentNullExcep~dulla^@204~ tion")
            Else
           ~dulla^@204~ er.InsertCommand.Parameters(1).Value ~dulla^@204~ iption,String)
            End If
 ~dulla^@204~  (Brand Is Nothing) Then
           ~dulla^@204~ er.InsertCommand.Parameters(2).Value ~dulla^@204~ ll.Value
            Else
         ~dulla^@204~ pter.InsertCommand.Parameters(2).Valu~dulla^@204~ nd,String)
            End If
     ~dulla^@204~ igin Is Nothing) Then
              ~dulla^@204~ InsertCommand.Parameters(3).Value = S~dulla^@204~ Value
            Else
            ~dulla^@204~ r.InsertCommand.Parameters(3).Value =~dulla^@204~ ,String)
            End If
       ~dulla^@204~ eight Is Nothing) Then
             ~dulla^@204~ .InsertCommand.Parameters(4).Value = ~dulla^@204~ .Value
            Else
           ~dulla^@204~ er.InsertCommand.Parameters(4).Value ~dulla^@204~ ight,String)
            End If
   ~dulla^@204~ dapter.InsertCommand.Parameters(5).Va~dulla^@204~ uantity,Integer)
            If (Price.HasValue = true) Then
                ~dulla^@204~ sertCommand.Parameters(6).Value = CTy~dulla^@204~ e,Decimal)
            Else
       ~dulla^@204~ dapter.InsertCommand.Parameters(6).Va~dulla^@204~ DBNull.Value
            End If
   ~dulla^@204~ dapter.InsertCommand.Parameters(7).Va~dulla^@204~ mount,Decimal)
            If (Suppl~dulla^@204~ ing) Then
                Throw New ~dulla^@204~ ntNullException("SupplierID")
      ~dulla^@204~                Me.Adapter.InsertComma~dulla^@204~ (8).Value = CType(SupplierID,String)~dulla^@204~ End If
            If (InvoiceNo Is ~dulla^@204~ 
                Throw New System.Ar~dulla^@204~ eption("InvoiceNo")
            Else~dulla^@204~      Me.Adapter.InsertCommand.Paramet~dulla^@204~ = CType(InvoiceNo,String)
          ~dulla^@204~          Dim previousConnectionState ~dulla^@204~ a.ConnectionState = Me.Adapter.Insert~dulla^@204~ ction.State
            If ((Me.Adap~dulla^@204~ mand.Connection.State And System.Data~dulla^@204~ ate.Open)  _
                       ~dulla^@204~ ta.ConnectionState.Open) Then
      ~dulla^@204~ Adapter.InsertCommand.Connection.Open~dulla^@204~  End If
            Try 
          ~dulla^@204~ urnValue As Integer = Me.Adapter.Inse~dulla^@204~ cuteNonQuery
                Return ~dulla^@204~             Finally
                ~dulla^@204~ onnectionState = System.Data.Connecti~dulla^@204~ d) Then
                    Me.Adapt~dulla^@204~ and.Connection.Close
               ~dulla^@204~         End Try
        End Function~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute(),  _
         System.Componen~dulla^@204~ .HelpKeywordAttribute("vs.data.TableA~dulla^@204~ 
         System.ComponentModel.DataO~dulla^@204~ tribute(System.ComponentModel.DataObj~dulla^@204~ .Update, true)>  _
        Public Ov~dulla^@204~ idable Function Update( _
          ~dulla^@204~ al PartNo As String,  _
            ~dulla^@204~  Description As String,  _
         ~dulla^@204~ Val Brand As String,  _
            ~dulla^@204~  Origin As String,  _
              ~dulla^@204~ etWeight As String,  _
             ~dulla^@204~ Quantity As Integer,  _
            ~dulla^@204~  Price As System.Nullable(Of Decimal)~dulla^@204~              ByVal Amount As Decimal,~dulla^@204~             ByVal SupplierID As Strin~dulla^@204~               ByVal InvoiceNo As Stri~dulla^@204~                ByVal Original_PartNo ~dulla^@204~ 
                    ByVal Original_~dulla^@204~ s String,  _
                    ByV~dulla^@204~ rand As String,  _
                 ~dulla^@204~ inal_Origin As String,  _
          ~dulla^@204~ al Original_NetWeight As String,  _
~dulla^@204~        ByVal Original_Quantity As Int~dulla^@204~                  ByVal Original_Price~dulla^@204~ llable(Of Decimal),  _
             ~dulla^@204~ Original_Amount As Decimal,  _
     ~dulla^@204~   ByVal Original_SupplierID As String~dulla^@204~              ByVal Original_InvoiceNo~dulla^@204~ s Integer
            If (PartNo Is ~dulla^@204~ 
                Throw New System.Ar~dulla^@204~ eption("PartNo")
            Else
 ~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ Type(PartNo,String)
            End ~dulla^@204~    If (Description Is Nothing) Then
~dulla^@204~    Throw New System.ArgumentNullExcep~dulla^@204~ tion")
            Else
           ~dulla^@204~ er.UpdateCommand.Parameters(1).Value ~dulla^@204~ iption,String)
            End If
 ~dulla^@204~  (Brand Is Nothing) Then
           ~dulla^@204~ er.UpdateCommand.Parameters(2).Value ~dulla^@204~ ll.Value
            Else
         ~dulla^@204~ pter.UpdateCommand.Parameters(2).Valu~dulla^@204~ nd,String)
            End If
     ~dulla^@204~ igin Is Nothing) Then
              ~dulla^@204~ UpdateCommand.Parameters(3).Value = S~dulla^@204~ Value
            Else
            ~dulla^@204~ r.UpdateCommand.Parameters(3).Value =~dulla^@204~ ,String)
            End If
       ~dulla^@204~ eight Is Nothing) Then
             ~dulla^@204~ .UpdateCommand.Parameters(4).Value = ~dulla^@204~ .Value
            Else
           ~dulla^@204~ er.UpdateCommand.Parameters(4).Value ~dulla^@204~ ight,String)
            End If
   ~dulla^@204~ dapter.UpdateCommand.Parameters(5).Va~dulla^@204~ uantity,Integer)
            If (Pri~dulla^@204~  true) Then
                Me.Adapt~dulla^@204~ and.Parameters(6).Value = CType(Price~dulla^@204~ l)
            Else
               ~dulla^@204~ pdateCommand.Parameters(6).Value = Sy~dulla^@204~ alue
            End If
           ~dulla^@204~ pdateCommand.Parameters(7).Value = CT~dulla^@204~ cimal)
            If (SupplierID Is~dulla^@204~ n
                Throw New System.A~dulla^@204~ ception("SupplierID")
            El~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ e = CType(SupplierID,String)
       ~dulla^@204~             If (InvoiceNo Is Nothing)~dulla^@204~           Throw New System.ArgumentNu~dulla^@204~ InvoiceNo")
            Else
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(9).V~dulla^@204~ InvoiceNo,String)
            End If~dulla^@204~  If (Original_PartNo Is Nothing) Then~dulla^@204~      Throw New System.ArgumentNullExc~dulla^@204~ nal_PartNo")
            Else
     ~dulla^@204~ .Adapter.UpdateCommand.Parameters(10)~dulla^@204~ e(Original_PartNo,String)
          ~dulla^@204~          If (Original_Description Is ~dulla^@204~ 
                Throw New System.Ar~dulla^@204~ eption("Original_Description")
     ~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(11).Value = CType(Original_Descript~dulla^@204~             End If
            If (O~dulla^@204~  Is Nothing) Then
                Me~dulla^@204~ teCommand.Parameters(12).Value = CTyp~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(13).Value = System.DBNull.Value
  ~dulla^@204~ e
                Me.Adapter.UpdateC~dulla^@204~ ters(12).Value = CType(0,Object)
   ~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(1~dulla^@204~ ype(Original_Brand,String)
         ~dulla^@204~           If (Original_Origin Is Noth~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 14).Value = CType(1,Object)
        ~dulla^@204~ apter.UpdateCommand.Parameters(15).Va~dulla^@204~ DBNull.Value
            Else
     ~dulla^@204~ .Adapter.UpdateCommand.Parameters(14)~dulla^@204~ e(0,Object)
                Me.Adapt~dulla^@204~ and.Parameters(15).Value = CType(Orig~dulla^@204~ tring)
            End If
         ~dulla^@204~ al_NetWeight Is Nothing) Then
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(16).~dulla^@204~ (1,Object)
                Me.Adapte~dulla^@204~ nd.Parameters(17).Value = System.DBNu~dulla^@204~          Else
                Me.Ada~dulla^@204~ mmand.Parameters(16).Value = CType(0,~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ ).Value = CType(Original_NetWeight,St~dulla^@204~       End If
            Me.Adapter.~dulla^@204~ .Parameters(18).Value = CType(Origina~dulla^@204~ teger)
            If (Original_Pric~dulla^@204~ true) Then
                Me.Adapte~dulla^@204~ nd.Parameters(19).Value = CType(0,Obj~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ alue = CType(Original_Price.Value,Dec~dulla^@204~       Else
                Me.Adapte~dulla^@204~ nd.Parameters(19).Value = CType(1,Obj~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ alue = System.DBNull.Value
         ~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ Value = CType(Original_Amount,Decimal~dulla^@204~   If (Original_SupplierID Is Nothing)~dulla^@204~           Throw New System.ArgumentNu~dulla^@204~ Original_SupplierID")
            El~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ ue = CType(Original_SupplierID,String~dulla^@204~   End If
            If (Original_In~dulla^@204~ thing) Then
                Throw Ne~dulla^@204~ mentNullException("Original_InvoiceNo~dulla^@204~    Else
                Me.Adapter.U~dulla^@204~ Parameters(23).Value = CType(Original~dulla^@204~ ring)
            End If
          ~dulla^@204~ sConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Conn~dulla^@204~ 
            If ((Me.Adapter.UpdateCo~dulla^@204~ ion.State And System.Data.ConnectionS~dulla^@204~ 
                        <> System.D~dulla^@204~ nState.Open) Then
                Me~dulla^@204~ teCommand.Connection.Open
          ~dulla^@204~          Try 
                Dim re~dulla^@204~ Integer = Me.Adapter.UpdateCommand.Ex~dulla^@204~ 
                Return returnValue~dulla^@204~ Finally
                If (previous~dulla^@204~ te = System.Data.ConnectionState.Clos~dulla^@204~                  Me.Adapter.UpdateCom~dulla^@204~ on.Close
                End If
   ~dulla^@204~ Try
        End Function
    End Cl~dulla^@204~   <System.CodeDom.Compiler.GeneratedC~dulla^@204~ "System.Data.Design.TypedDataSetGener~dulla^@204~ .0"),  _
     System.ComponentModel.~dulla^@204~ oryAttribute("code"),  _
     System~dulla^@204~ el.ToolboxItem(true),  _
     System~dulla^@204~ el.DataObjectAttribute(true),  _
   ~dulla^@204~ onentModel.DesignerAttribute("Microso~dulla^@204~ .DataSource.Design.TableAdapterDesign~dulla^@204~ .VSDesigner"& _ 
        ", Version=~dulla^@204~ ure=neutral, PublicKeyToken=b03f5f7f1~dulla^@204~ 
     System.ComponentModel.Design.H~dulla^@204~ ribute("vs.data.TableAdapter")>  _
 ~dulla^@204~ blic Class SalesInfoTableAdapter
   ~dulla^@204~  System.ComponentModel.Component
   ~dulla^@204~   Private WithEvents _adapter As Syst~dulla^@204~ ient.SqlDataAdapter
        
      ~dulla^@204~ nnection As System.Data.SqlClient.Sql~dulla^@204~        
        Private _commandColl~dulla^@204~ ystem.Data.SqlClient.SqlCommand
    ~dulla^@204~  Private _clearBeforeFill As Boolean~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Sub New()~dulla^@204~ MyBase.New
            Me.ClearBefor~dulla^@204~ 
        End Sub
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Private ReadOnly Property Adapter() A~dulla^@204~ .SqlClient.SqlDataAdapter
          ~dulla^@204~           If (Me._adapter Is Nothing)~dulla^@204~               Me.InitAdapter
       ~dulla^@204~ If
                Return Me._adapte~dulla^@204~   End Get
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Friend Property Connec~dulla^@204~ tem.Data.SqlClient.SqlConnection
   ~dulla^@204~ 
                If (Me._connection I~dulla^@204~ en
                    Me.InitConnec~dulla^@204~          End If
                Retu~dulla^@204~ tion
            End Get
          ~dulla^@204~           Me._connection = value
   ~dulla^@204~ If (Not (Me.Adapter.InsertCommand) Is~dulla^@204~ n
                    Me.Adapter.Ins~dulla^@204~ nnection = value
                End~dulla^@204~         If (Not (Me.Adapter.DeleteCom~dulla^@204~ ing) Then
                    Me.Ada~dulla^@204~ mmand.Connection = value
           ~dulla^@204~                 If (Not (Me.Adapter.U~dulla^@204~  Is Nothing) Then
                  ~dulla^@204~ UpdateCommand.Connection = value
   ~dulla^@204~ End If
                Dim i As Inte~dulla^@204~             Do While (i < Me.CommandC~dulla^@204~ gth)
                    If (Not (Me~dulla^@204~ ction(i)) Is Nothing) Then
         ~dulla^@204~   CType(Me.CommandCollection(i),Syste~dulla^@204~ ent.SqlCommand).Connection = value
 ~dulla^@204~       End If
                    i =~dulla^@204~              Loop
            End Se~dulla^@204~ d Property
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~ ted ReadOnly Property CommandCollecti~dulla^@204~ m.Data.SqlClient.SqlCommand()
      ~dulla^@204~               If (Me._commandCollecti~dulla^@204~ ) Then
                    Me.InitCo~dulla^@204~ on
                End If
         ~dulla^@204~  Me._commandCollection
            E~dulla^@204~    End Property
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Property ClearBeforeFill() As B~dulla^@204~        Get
                Return Me~dulla^@204~ Fill
            End Get
          ~dulla^@204~           Me._clearBeforeFill = value~dulla^@204~  End Set
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Private Sub InitAdapter~dulla^@204~    Me._adapter = New System.Data.SqlC~dulla^@204~ Adapter
            Dim tableMapping~dulla^@204~ ta.Common.DataTableMapping = New Syst~dulla^@204~ n.DataTableMapping
            table~dulla^@204~ eTable = "Table"
            tableMa~dulla^@204~ Table = "SalesInfo"
            tabl~dulla^@204~ mnMappings.Add("PartNo", "PartNo")
 ~dulla^@204~ bleMapping.ColumnMappings.Add("Descri~dulla^@204~ ription")
            tableMapping.C~dulla^@204~ .Add("Quantity", "Quantity")
       ~dulla^@204~ ping.ColumnMappings.Add("UnitPrice", ~dulla^@204~ 
            tableMapping.ColumnMappi~dulla^@204~ nt", "Amount")
            tableMapp~dulla^@204~ pings.Add("DateOfSale", "DateOfSale")~dulla^@204~  tableMapping.ColumnMappings.Add("Cas~dulla^@204~ No", "CashSalesInvoiceNo")
         ~dulla^@204~ ng.ColumnMappings.Add("CreditSalesInv~dulla^@204~ ditSalesInvoiceNo")
            Me._~dulla^@204~ Mappings.Add(tableMapping)
         ~dulla^@204~ r.DeleteCommand = New System.Data.Sql~dulla^@204~ mand
            Me._adapter.DeleteC~dulla^@204~ tion = Me.Connection
            Me.~dulla^@204~ teCommand.CommandText = "DELETE FROM ~dulla^@204~ nfo] WHERE (([PartNo] = @Original_Par~dulla^@204~ script"& _ 
                "ion] = ~dulla^@204~ cription) AND ([Quantity] = @Original~dulla^@204~ D ([UnitPr"& _ 
                "ice~dulla^@204~ _UnitPrice) AND ([Amount] = @Original~dulla^@204~ ([DateOfSale] "& _ 
                ~dulla^@204~ DateOfSale) AND ([CashSalesInvoiceNo]~dulla^@204~ CashSalesInvoiceNo"& _ 
            ~dulla^@204~ CreditSalesInvoiceNo] = @Original_Cre~dulla^@204~ ceNo))"
            Me._adapter.Dele~dulla^@204~ mandType = System.Data.CommandType.Te~dulla^@204~    Me._adapter.DeleteCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Or~dulla^@204~ ", System.Data.SqlDbType.NVarChar, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Part~dulla^@204~ ata.DataRowVersion.Original, false, N~dulla^@204~ ", ""))
            Me._adapter.Dele~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@Original_Description", System.Data~dulla^@204~ har], 0, System.Data.ParameterDirecti~dulla^@204~ 0, "Description", System.Data.DataRow~dulla^@204~ nal, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.DeleteCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@Original~dulla^@204~ ystem.Data.SqlDbType.Int, 0, System.D~dulla^@204~ Direction.Input, 0, 0, "Quantity", Sy~dulla^@204~ aRowVersion.Original, false, Nothing,~dulla^@204~ 
            Me._adapter.DeleteComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ inal_UnitPrice", System.Data.SqlDbTyp~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ ice", System.Data.DataRowVersion.Orig~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ eteCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@Original_Amount", Sy~dulla^@204~ DbType.Money, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "Amount", System.Data.Data~dulla^@204~ iginal, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.DeleteCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@Origi~dulla^@204~ e", System.Data.SqlDbType.DateTime, 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Dat~dulla^@204~ tem.Data.DataRowVersion.Original, fal~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@Original_CashSalesInvoiceNo",~dulla^@204~ SqlDbType.NVarChar, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "CashSalesInvoiceNo"~dulla^@204~ .DataRowVersion.Original, false, Noth~dulla^@204~ ""))
            Me._adapter.DeleteC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ Original_CreditSalesInvoiceNo", Syste~dulla^@204~ ype.NVarChar, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "CreditSalesInvoiceNo", System.Data.DataRowVersion.Original, false, ~dulla^@204~ "", ""))
            Me._adapter.Ins~dulla^@204~ New System.Data.SqlClient.SqlCommand~dulla^@204~ Me._adapter.InsertCommand.Connection ~dulla^@204~ on
            Me._adapter.InsertCom~dulla^@204~ ext = "INSERT INTO [dbo].[SalesInfo] ~dulla^@204~ escription], [Quantity], [UnitPrice],~dulla^@204~            "[Amount], [DateOfSale], [~dulla^@204~ iceNo], [CreditSalesInvoiceNo]) VALUE~dulla^@204~                "artNo, @Description, ~dulla^@204~ nitPrice, @Amount, @DateOfSale, @Cash~dulla^@204~  
                "iceNo, @CreditSal~dulla^@204~ "&Global.Microsoft.VisualBasic.ChrW(1~dulla^@204~ rosoft.VisualBasic.ChrW(10)&"SELECT P~dulla^@204~ ption, Quantity, UnitPrice,"& _ 
   ~dulla^@204~ " Amount, DateOfSale, CashSalesInvoic~dulla^@204~ lesInvoiceNo FROM SalesInfo WHE"& _ ~dulla^@204~     "RE (PartNo = @PartNo)"
        ~dulla^@204~ er.InsertCommand.CommandType = System~dulla^@204~ Type.Text
            Me._adapter.In~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@PartNo", System.Data.SqlDbType.N~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ ", System.Data.DataRowVersion.Current~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@Description", System.Dat~dulla^@204~ Char], 0, System.Data.ParameterDirect~dulla^@204~  0, "Description", System.Data.DataRo~dulla^@204~ ent, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.InsertCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@Quantity~dulla^@204~ a.SqlDbType.Int, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "Quantity", System.Data~dulla^@204~ on.Current, false, Nothing, "", "", "~dulla^@204~     Me._adapter.InsertCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@U~dulla^@204~ stem.Data.SqlDbType.Money, 0, System.~dulla^@204~ rDirection.Input, 0, 0, "UnitPrice", ~dulla^@204~ ataRowVersion.Current, false, Nothing~dulla^@204~ )
            Me._adapter.InsertComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ unt", System.Data.SqlDbType.Money, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Amou~dulla^@204~ ata.DataRowVersion.Current, false, No~dulla^@204~ , ""))
            Me._adapter.Inser~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@DateOfSale", System.Data.SqlDbType.~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ fSale", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ sertCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@CashSalesInvoiceNo"~dulla^@204~ .SqlDbType.NVarChar, 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "CashSalesInvoiceNo~dulla^@204~ a.DataRowVersion.Current, false, Noth~dulla^@204~ ""))
            Me._adapter.InsertC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ CreditSalesInvoiceNo", System.Data.Sq~dulla^@204~ har, 0, System.Data.ParameterDirectio~dulla^@204~ , "CreditSalesInvoiceNo", System.Data~dulla^@204~ on.Current, false, Nothing, "", "", "~dulla^@204~     Me._adapter.UpdateCommand = New S~dulla^@204~ lClient.SqlCommand
            Me._a~dulla^@204~ Command.Connection = Me.Connection
 ~dulla^@204~ ._adapter.UpdateCommand.CommandText =~dulla^@204~ ].[SalesInfo] SET [PartNo] = @PartNo,~dulla^@204~ ] = @Description, [Q"& _ 
          ~dulla^@204~ y] = @Quantity, [UnitPrice] = @UnitPr~dulla^@204~  = @Amount, [DateOfSale]"& _ 
      ~dulla^@204~  @DateOfSale, [CashSalesInvoiceNo] = ~dulla^@204~ oiceNo, [CreditSalesInvoiceN"& _ 
  ~dulla^@204~  "o] = @CreditSalesInvoiceNo WHERE ((~dulla^@204~ riginal_PartNo) AND ([Descriptio"& _ ~dulla^@204~      "n] = @Original_Description) AND~dulla^@204~ = @Original_Quantity) AND ([UnitPric"~dulla^@204~          "e] = @Original_UnitPrice) A~dulla^@204~ = @Original_Amount) AND ([DateOfSale]~dulla^@204~              "@Original_DateOfSale) A~dulla^@204~ sInvoiceNo] = @Original_CashSalesInvo~dulla^@204~ 
                "AND ([CreditSalesIn~dulla^@204~ riginal_CreditSalesInvoiceNo));"&Glob~dulla^@204~ VisualBasic.ChrW(13)&Global.Microsoft~dulla^@204~ ChrW(10)&"SELECT PartNo, "& _ 
     ~dulla^@204~ escription, Quantity, UnitPrice, Amou~dulla^@204~ e, CashSalesInvoiceNo, Credit"& _ 
 ~dulla^@204~   "SalesInvoiceNo FROM SalesInfo WHER~dulla^@204~ PartNo)"
            Me._adapter.Upd~dulla^@204~ mmandType = System.Data.CommandType.T~dulla^@204~     Me._adapter.UpdateCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@P~dulla^@204~ m.Data.SqlDbType.NVarChar, 0, System.~dulla^@204~ rDirection.Input, 0, 0, "PartNo", Sys~dulla^@204~ RowVersion.Current, false, Nothing, "~dulla^@204~             Me._adapter.UpdateCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ ption", System.Data.SqlDbType.[Char],~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "D~dulla^@204~ System.Data.DataRowVersion.Current, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@Quantity", System.Data.SqlD~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ tity", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@UnitPrice", System.D~dulla^@204~ .Money, 0, System.Data.ParameterDirec~dulla^@204~ , 0, "UnitPrice", System.Data.DataRow~dulla^@204~ nt, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.UpdateCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Amount", ~dulla^@204~ qlDbType.Money, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "Amount", System.Data.Da~dulla^@204~ Current, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Date~dulla^@204~ em.Data.SqlDbType.DateTime, 0, System~dulla^@204~ erDirection.Input, 0, 0, "DateOfSale"~dulla^@204~ .DataRowVersion.Current, false, Nothi~dulla^@204~ "))
            Me._adapter.UpdateCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ ashSalesInvoiceNo", System.Data.SqlDb~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ CashSalesInvoiceNo", System.Data.Data~dulla^@204~ rrent, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.UpdateCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@Credit~dulla^@204~ o", System.Data.SqlDbType.NVarChar, 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Cre~dulla^@204~ ceNo", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@Original_PartNo", Sy~dulla^@204~ DbType.NVarChar, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "PartNo", System.Data.D~dulla^@204~ .Original, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.UpdateCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Or~dulla^@204~ ption", System.Data.SqlDbType.[Char],~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "D~dulla^@204~ System.Data.DataRowVersion.Original, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Original_Quantity", System~dulla^@204~ pe.Int, 0, System.Data.ParameterDirec~dulla^@204~ , 0, "Quantity", System.Data.DataRowV~dulla^@204~ al, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.UpdateCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Original_~dulla^@204~ ystem.Data.SqlDbType.Money, 0, System~dulla^@204~ erDirection.Input, 0, 0, "UnitPrice",~dulla^@204~ DataRowVersion.Original, false, Nothi~dulla^@204~ "))
            Me._adapter.UpdateCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ riginal_Amount", System.Data.SqlDbTyp~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@Original_DateOfSale", S~dulla^@204~ lDbType.DateTime, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "DateOfSale", System.D~dulla^@204~ rsion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ iginal_CashSalesInvoiceNo", System.Da~dulla^@204~ NVarChar, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "CashSalesInvoiceNo", System.D~dulla^@204~ rsion.Original, false, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ reditSalesInvoiceNo", System.Data.Sql~dulla^@204~ ar, 0, System.Data.ParameterDirection~dulla^@204~  "CreditSalesInvoiceNo", System.Data.~dulla^@204~ n.Original, false, Nothing, "", "", "~dulla^@204~ End Sub
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ ub InitConnection()
            Me._~dulla^@204~ New System.Data.SqlClient.SqlConnecti~dulla^@204~    Me._connection.ConnectionString = ~dulla^@204~ oryControlSystem.My.MySettings.Defaul~dulla^@204~ oConnection
        End Sub
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Private Sub InitCommandCo~dulla^@204~            Me._commandCollection = Ne~dulla^@204~ .SqlClient.SqlCommand(0) {}
        ~dulla^@204~ ndCollection(0) = New System.Data.Sql~dulla^@204~ mand
            Me._commandCollecti~dulla^@204~ ion = Me.Connection
            Me._~dulla^@204~ tion(0).CommandText = "SELECT PartNo,~dulla^@204~  Quantity, UnitPrice, Amount, DateOfS~dulla^@204~ sInv"& _ 
                "oiceNo, C~dulla^@204~ oiceNo FROM dbo.SalesInfo"
         ~dulla^@204~ dCollection(0).CommandType = System.D~dulla^@204~ pe.Text
        End Sub
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~          System.ComponentModel.Design~dulla^@204~ ttribute("vs.data.TableAdapter"),  _~dulla^@204~ tem.ComponentModel.DataObjectMethodAt~dulla^@204~ m.ComponentModel.DataObjectMethodType~dulla^@204~   _
        Public Overloads Overrid~dulla^@204~  Fill(ByVal dataTable As InventoryCon~dulla^@204~ aSet3.SalesInfoDataTable) As Integer~dulla^@204~ Me.Adapter.SelectCommand = Me.Command~dulla^@204~ 
            If (Me.ClearBeforeFill ~dulla^@204~ 
                dataTable.Clear
   ~dulla^@204~ If
            Dim returnValue As In~dulla^@204~ apter.Fill(dataTable)
            Re~dulla^@204~ lue
        End Function
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
         System.ComponentModel.Desig~dulla^@204~ Attribute("vs.data.TableAdapter"),  _~dulla^@204~ stem.ComponentModel.DataObjectMethodA~dulla^@204~ em.ComponentModel.DataObjectMethodTyp~dulla^@204~ rue)>  _
        Public Overloads Ov~dulla^@204~ ction GetData() As InventoryControlSy~dulla^@204~ SalesInfoDataTable
            Me.Ad~dulla^@204~ ommand = Me.CommandCollection(0)
   ~dulla^@204~ dataTable As InventoryControlSystemDa~dulla^@204~ nfoDataTable = New InventoryControlSy~dulla^@204~ SalesInfoDataTable
            Me.Ad~dulla^@204~ taTable)
            Return dataTabl~dulla^@204~ d Function
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute(),  _
 ~dulla^@204~ m.ComponentModel.Design.HelpKeywordAt~dulla^@204~ ata.TableAdapter")>  _
        Publi~dulla^@204~ verridable Function Update(ByVal data~dulla^@204~ ntoryControlSystemDataSet3.SalesInfoD~dulla^@204~ Integer
            Return Me.Adapte~dulla^@204~ Table)
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
         System.ComponentModel.De~dulla^@204~ ordAttribute("vs.data.TableAdapter")>~dulla^@204~ Public Overloads Overridable Function~dulla^@204~  dataSet As InventoryControlSystemDat~dulla^@204~ eger
            Return Me.Adapter.U~dulla^@204~ , "SalesInfo")
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute(),  _
         System.Component~dulla^@204~ HelpKeywordAttribute("vs.data.TableAd~dulla^@204~         Public Overloads Overridable ~dulla^@204~ te(ByVal dataRow As System.Data.DataR~dulla^@204~ r
            Return Me.Adapter.Upda~dulla^@204~ .Data.DataRow() {dataRow})
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute(),  _
         Syst~dulla^@204~ odel.Design.HelpKeywordAttribute("vs.~dulla^@204~ pter")>  _
        Public Overloads ~dulla^@204~ unction Update(ByVal dataRows() As Sy~dulla^@204~ aRow) As Integer
            Return ~dulla^@204~ date(dataRows)
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute(),  _
         System.Component~dulla^@204~ HelpKeywordAttribute("vs.data.TableAd~dulla^@204~          System.ComponentModel.DataOb~dulla^@204~ ribute(System.ComponentModel.DataObje~dulla^@204~ Delete, true)>  _
        Public Ove~dulla^@204~ dable Function Delete(ByVal Original_~dulla^@204~ ing, ByVal Original_Description As St~dulla^@204~ riginal_Quantity As Integer, ByVal Or~dulla^@204~ ice As Decimal, ByVal Original_Amount~dulla^@204~ ByVal Original_DateOfSale As Date, By~dulla^@204~ CashSalesInvoiceNo As String, ByVal O~dulla^@204~ tSalesInvoiceNo As String) As Integer~dulla^@204~  If (Original_PartNo Is Nothing) Then~dulla^@204~      Throw New System.ArgumentNullExc~dulla^@204~ nal_PartNo")
            Else
     ~dulla^@204~ .Adapter.DeleteCommand.Parameters(0).~dulla^@204~ (Original_PartNo,String)
           ~dulla^@204~         If (Original_Description Is N~dulla^@204~ 
                Throw New System.Arg~dulla^@204~ ption("Original_Description")
      ~dulla^@204~                Me.Adapter.DeleteComma~dulla^@204~ (1).Value = CType(Original_Descriptio~dulla^@204~           End If
            Me.Adap~dulla^@204~ mand.Parameters(2).Value = CType(Orig~dulla^@204~ ,Integer)
            Me.Adapter.Del~dulla^@204~ rameters(3).Value = CType(Original_Un~dulla^@204~ al)
            Me.Adapter.DeleteCom~dulla^@204~ rs(4).Value = CType(Original_Amount,D~dulla^@204~         Me.Adapter.DeleteCommand.Para~dulla^@204~ ue = CType(Original_DateOfSale,Date)~dulla^@204~ If (Original_CashSalesInvoiceNo Is No~dulla^@204~                 Throw New System.Argu~dulla^@204~ tion("Original_CashSalesInvoiceNo")
~dulla^@204~ lse
                Me.Adapter.Delet~dulla^@204~ meters(6).Value = CType(Original_Cash~dulla^@204~ o,String)
            End If
      ~dulla^@204~ ginal_CreditSalesInvoiceNo Is Nothing~dulla^@204~            Throw New System.ArgumentN~dulla^@204~ "Original_CreditSalesInvoiceNo")
   ~dulla^@204~ 
                Me.Adapter.DeleteCo~dulla^@204~ ers(7).Value = CType(Original_CreditS~dulla^@204~ ,String)
            End If
       ~dulla^@204~ iousConnectionState As System.Data.Co~dulla^@204~  = Me.Adapter.DeleteCommand.Connectio~dulla^@204~         If ((Me.Adapter.DeleteCommand~dulla^@204~ tate And System.Data.ConnectionState.~dulla^@204~                      <> System.Data.C~dulla^@204~ e.Open) Then
                Me.Adap~dulla^@204~ mand.Connection.Open
            End~dulla^@204~     Try 
                Dim returnV~dulla^@204~ er = Me.Adapter.DeleteCommand.Execute~dulla^@204~              Return returnValue
    ~dulla^@204~ ly
                If (previousConne~dulla^@204~ System.Data.ConnectionState.Closed) T~dulla^@204~             Me.Adapter.DeleteCommand.~dulla^@204~ ose
                End If
        ~dulla^@204~         End Function
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~      System.ComponentModel.Design.Hel~dulla^@204~ bute("vs.data.TableAdapter"),  _
   ~dulla^@204~ ComponentModel.DataObjectMethodAttrib~dulla^@204~ mponentModel.DataObjectMethodType.Ins~dulla^@204~ _
        Public Overloads Overridab~dulla^@204~ nsert(ByVal PartNo As String, ByVal D~dulla^@204~  String, ByVal Quantity As Integer, B~dulla^@204~ e As Decimal, ByVal Amount As Decimal~dulla^@204~ fSale As Date, ByVal CashSalesInvoice~dulla^@204~  ByVal CreditSalesInvoiceNo As String~dulla^@204~ 
            If (PartNo Is Nothing) T~dulla^@204~         Throw New System.ArgumentNull~dulla^@204~ rtNo")
            Else
           ~dulla^@204~ er.InsertCommand.Parameters(0).Value ~dulla^@204~ o,String)
            End If
      ~dulla^@204~ cription Is Nothing) Then
          ~dulla^@204~ ew System.ArgumentNullException("Description")
            Else
             ~dulla^@204~ .InsertCommand.Parameters(1).Value = ~dulla^@204~ tion,String)
            End If
   ~dulla^@204~ dapter.InsertCommand.Parameters(2).Va~dulla^@204~ uantity,Integer)
            Me.Adap~dulla^@204~ mand.Parameters(3).Value = CType(Unit~dulla^@204~ )
            Me.Adapter.InsertComma~dulla^@204~ (4).Value = CType(Amount,Decimal)
  ~dulla^@204~ Adapter.InsertCommand.Parameters(5).V~dulla^@204~ DateOfSale,Date)
            If (Cas~dulla^@204~ No Is Nothing) Then
                ~dulla^@204~ tem.ArgumentNullException("CashSalesI~dulla^@204~            Else
                Me.A~dulla^@204~ Command.Parameters(6).Value = CType(C~dulla^@204~ ceNo,String)
            End If
   ~dulla^@204~ CreditSalesInvoiceNo Is Nothing) Then~dulla^@204~      Throw New System.ArgumentNullExc~dulla^@204~ tSalesInvoiceNo")
            Else
~dulla^@204~    Me.Adapter.InsertCommand.Parameter~dulla^@204~ CType(CreditSalesInvoiceNo,String)
 ~dulla^@204~ d If
            Dim previousConnect~dulla^@204~ ystem.Data.ConnectionState = Me.Adapt~dulla^@204~ and.Connection.State
            If ~dulla^@204~ InsertCommand.Connection.State And Sy~dulla^@204~ nectionState.Open)  _
              ~dulla^@204~ System.Data.ConnectionState.Open) The~dulla^@204~       Me.Adapter.InsertCommand.Connec~dulla^@204~           End If
            Try 
 ~dulla^@204~   Dim returnValue As Integer = Me.Ada~dulla^@204~ mmand.ExecuteNonQuery
              ~dulla^@204~ rnValue
            Finally
       ~dulla^@204~ previousConnectionState = System.Data~dulla^@204~ ate.Closed) Then
                   ~dulla^@204~ nsertCommand.Connection.Close
      ~dulla^@204~  If
            End Try
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute(),  _
         System~dulla^@204~ el.Design.HelpKeywordAttribute("vs.da~dulla^@204~ er"),  _
         System.ComponentMo~dulla^@204~ tMethodAttribute(System.ComponentMode~dulla^@204~ ethodType.Update, true)>  _
        ~dulla^@204~ ads Overridable Function Update( _
 ~dulla^@204~       ByVal PartNo As String,  _
   ~dulla^@204~     ByVal Description As String,  _
~dulla^@204~        ByVal Quantity As Integer,  _~dulla^@204~         ByVal UnitPrice As Decimal,  ~dulla^@204~           ByVal Amount As Decimal,  _~dulla^@204~          ByVal DateOfSale As Date,  _~dulla^@204~          ByVal CashSalesInvoiceNo As ~dulla^@204~                    ByVal CreditSalesI~dulla^@204~ tring,  _
                    ByVal ~dulla^@204~ No As String,  _
                   ~dulla^@204~ al_Description As String,  _
       ~dulla^@204~ ByVal Original_Quantity As Integer,  ~dulla^@204~           ByVal Original_UnitPrice As~dulla^@204~ 
                    ByVal Original_A~dulla^@204~ mal,  _
                    ByVal Or~dulla^@204~ Sale As Date,  _
                   ~dulla^@204~ al_CashSalesInvoiceNo As String,  _
~dulla^@204~        ByVal Original_CreditSalesInvo~dulla^@204~ ng) As Integer
            If (PartN~dulla^@204~  Then
                Throw New Syst~dulla^@204~ llException("PartNo")
            El~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ e = CType(PartNo,String)
           ~dulla^@204~         If (Description Is Nothing) T~dulla^@204~         Throw New System.ArgumentNull~dulla^@204~ scription")
            Else
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(1).V~dulla^@204~ Description,String)
            End ~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~ CType(Quantity,Integer)
            ~dulla^@204~ dateCommand.Parameters(3).Value = CTy~dulla^@204~ Decimal)
            Me.Adapter.Upda~dulla^@204~ ameters(4).Value = CType(Amount,Decim~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~  CType(DateOfSale,Date)
            ~dulla^@204~ InvoiceNo Is Nothing) Then
         ~dulla^@204~ New System.ArgumentNullException("Cas~dulla^@204~ No")
            Else
             ~dulla^@204~ .UpdateCommand.Parameters(6).Value = ~dulla^@204~ esInvoiceNo,String)
            End ~dulla^@204~    If (CreditSalesInvoiceNo Is Nothin~dulla^@204~             Throw New System.Argument~dulla^@204~ ("CreditSalesInvoiceNo")
           ~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ alue = CType(CreditSalesInvoiceNo,Str~dulla^@204~      End If
            If (Original~dulla^@204~ thing) Then
                Throw Ne~dulla^@204~ mentNullException("Original_PartNo")~dulla^@204~ Else
                Me.Adapter.Upda~dulla^@204~ ameters(8).Value = CType(Original_Par~dulla^@204~             End If
            If (O~dulla^@204~ iption Is Nothing) Then
            ~dulla^@204~  System.ArgumentNullException("Origin~dulla^@204~ n")
            Else
              ~dulla^@204~ UpdateCommand.Parameters(9).Value = C~dulla^@204~ _Description,String)
            End~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~ = CType(Original_Quantity,Integer)
 ~dulla^@204~ .Adapter.UpdateCommand.Parameters(11)~dulla^@204~ e(Original_UnitPrice,Decimal)
      ~dulla^@204~ ter.UpdateCommand.Parameters(12).Valu~dulla^@204~ ginal_Amount,Decimal)
            Me~dulla^@204~ teCommand.Parameters(13).Value = CTyp~dulla^@204~ teOfSale,Date)
            If (Origi~dulla^@204~ InvoiceNo Is Nothing) Then
         ~dulla^@204~ New System.ArgumentNullException("Ori~dulla^@204~ esInvoiceNo")
            Else
    ~dulla^@204~ e.Adapter.UpdateCommand.Parameters(14~dulla^@204~ pe(Original_CashSalesInvoiceNo,String~dulla^@204~   End If
            If (Original_Cr~dulla^@204~ iceNo Is Nothing) Then
             ~dulla^@204~ System.ArgumentNullException("Origina~dulla^@204~ InvoiceNo")
            Else
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(15).~dulla^@204~ (Original_CreditSalesInvoiceNo,String~dulla^@204~   End If
            Dim previousCon~dulla^@204~ As System.Data.ConnectionState = Me.A~dulla^@204~ Command.Connection.State
           ~dulla^@204~ ter.UpdateCommand.Connection.State An~dulla^@204~ .ConnectionState.Open)  _
          ~dulla^@204~  <> System.Data.ConnectionState.Open)~dulla^@204~           Me.Adapter.UpdateCommand.Co~dulla^@204~ 
            End If
            Try~dulla^@204~       Dim returnValue As Integer = Me~dulla^@204~ teCommand.ExecuteNonQuery
          ~dulla^@204~ returnValue
            Finally
   ~dulla^@204~ If (previousConnectionState = System.~dulla^@204~ onState.Closed) Then
               ~dulla^@204~ er.UpdateCommand.Connection.Close
  ~dulla^@204~  End If
            End Try
       ~dulla^@204~ 
    End Class
    
    <System.Co~dulla^@204~ r.GeneratedCodeAttribute("System.Data~dulla^@204~ DataSetGenerator", "2.0.0.0"),  _
  ~dulla^@204~ ponentModel.DesignerCategoryAttribute~dulla^@204~ 
     System.ComponentModel.ToolboxIt~dulla^@204~ 
     System.ComponentModel.DataObjec~dulla^@204~ ue),  _
     System.ComponentModel.D~dulla^@204~ ute("Microsoft.VSDesigner.DataSource.~dulla^@204~ dapterDesigner, Microsoft.VSDesigner"~dulla^@204~  ", Version=8.0.0.0, Culture=neutral,~dulla^@204~ en=b03f5f7f11d50a3a"),  _
     Syste~dulla^@204~ del.Design.HelpKeywordAttribute("vs.d~dulla^@204~ ter")>  _
    Partial Public Class S~dulla^@204~ Adapter
        Inherits System.Comp~dulla^@204~ mponent
        
        Private Wi~dulla^@204~ pter As System.Data.SqlClient.SqlData~dulla^@204~     
        Private _connection As ~dulla^@204~ qlClient.SqlConnection
        
   ~dulla^@204~ _commandCollection() As System.Data.S~dulla^@204~ ommand
        
        Private _cl~dulla^@204~  As Boolean
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Sub New()
            MyBase.New
~dulla^@204~ e.ClearBeforeFill = true
        End~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Private Read~dulla^@204~  Adapter() As System.Data.SqlClient.S~dulla^@204~ 
            Get
                If~dulla^@204~  Is Nothing) Then
                  ~dulla^@204~ ter
                End If
        ~dulla^@204~ n Me._adapter
            End Get
 ~dulla^@204~ operty
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ iend Property Connection() As System.~dulla^@204~ t.SqlConnection
            Get
   ~dulla^@204~ If (Me._connection Is Nothing) Then
~dulla^@204~        Me.InitConnection
           ~dulla^@204~                 Return Me._connection~dulla^@204~  End Get
            Set
          ~dulla^@204~ nection = value
                If (~dulla^@204~ er.InsertCommand) Is Nothing) Then
 ~dulla^@204~       Me.Adapter.InsertCommand.Connec~dulla^@204~ 
                End If
            ~dulla^@204~ Me.Adapter.DeleteCommand) Is Nothing)~dulla^@204~               Me.Adapter.DeleteComman~dulla^@204~ = value
                End If
    ~dulla^@204~ f (Not (Me.Adapter.UpdateCommand) Is ~dulla^@204~ 
                    Me.Adapter.Upda~dulla^@204~ nection = value
                End ~dulla^@204~        Dim i As Integer = 0
        ~dulla^@204~ ile (i < Me.CommandCollection.Length)~dulla^@204~          If (Not (Me.CommandCollectio~dulla^@204~ ing) Then
                        CT~dulla^@204~ dCollection(i),System.Data.SqlClient.~dulla^@204~ onnection = value
                  ~dulla^@204~                  i = (i + 1)
       ~dulla^@204~ 
            End Set
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Protected ~dulla^@204~ erty CommandCollection() As System.Da~dulla^@204~ SqlCommand()
            Get
      ~dulla^@204~ (Me._commandCollection Is Nothing) Th~dulla^@204~            Me.InitCommandCollection
~dulla^@204~    End If
                Return Me.~dulla^@204~ ction
            End Get
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ earBeforeFill() As Boolean
         ~dulla^@204~            Return Me._clearBeforeFill~dulla^@204~  End Get
            Set
          ~dulla^@204~ arBeforeFill = value
            End~dulla^@204~  End Property
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ vate Sub InitAdapter()
            M~dulla^@204~ New System.Data.SqlClient.SqlDataAdap~dulla^@204~     Dim tableMapping As System.Data.C~dulla^@204~ leMapping = New System.Data.Common.Da~dulla^@204~ g
            tableMapping.SourceTab~dulla^@204~ 
            tableMapping.DataSetTabl~dulla^@204~ d"
            tableMapping.ColumnMa~dulla^@204~ tockCardNo", "StockCardNo")
        ~dulla^@204~ ing.ColumnMappings.Add("PartNo", "Par~dulla^@204~       tableMapping.ColumnMappings.Add~dulla^@204~ ", "Description")
            tableM~dulla^@204~ Mappings.Add("CostPrice", "CostPrice"~dulla^@204~   tableMapping.ColumnMappings.Add("Se~dulla^@204~ "SellingPrice")
            Me._adap~dulla^@204~ ings.Add(tableMapping)
            M~dulla^@204~ leteCommand = New System.Data.SqlClie~dulla^@204~ 
            Me._adapter.DeleteComma~dulla^@204~  = Me.Connection
            Me._ada~dulla^@204~ mmand.CommandText = "DELETE FROM [dbo~dulla^@204~  WHERE (([StockCardNo] = @Original_St~dulla^@204~ D "& _ 
                "([PartNo] =~dulla^@204~ rtNo) AND ([Description] = @Original_~dulla^@204~ AND (["& _ 
                "CostPri~dulla^@204~ al_CostPrice) AND ([SellingPrice] = @~dulla^@204~ ingPrice))"& _ 
                ""
~dulla^@204~ e._adapter.DeleteCommand.CommandType ~dulla^@204~ .CommandType.Text
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@Original_StockCardNo", S~dulla^@204~ lDbType.NVarChar, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "StockCardNo", System.~dulla^@204~ ersion.Original, false, Nothing, "", ~dulla^@204~          Me._adapter.DeleteCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ PartNo", System.Data.SqlDbType.NVarCh~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ stem.Data.DataRowVersion.Original, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Original_Description", Syste~dulla^@204~ ype.[Char], 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "Description", System.Data.D~dulla^@204~ .Original, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.DeleteCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Or~dulla^@204~ ice", System.Data.SqlDbType.Money, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Cost~dulla^@204~ m.Data.DataRowVersion.Original, false~dulla^@204~ , "", ""))
            Me._adapter.D~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@Original_SellingPrice", System.~dulla^@204~ e.Money, 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "SellingPrice", System.Data.Dat~dulla^@204~ riginal, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.InsertCommand = New Syst~dulla^@204~ ient.SqlCommand
            Me._adap~dulla^@204~ mand.Connection = Me.Connection
    ~dulla^@204~ dapter.InsertCommand.CommandText = "I~dulla^@204~ bo].[StockCard] ([StockCardNo], [Part~dulla^@204~ tion], [CostPrice"& _ 
             ~dulla^@204~ ngPrice]) VALUES (@StockCardNo, @Part~dulla^@204~ ion, @CostPrice, @Sel"& _ 
         ~dulla^@204~ rice);"&Global.Microsoft.VisualBasic.~dulla^@204~ al.Microsoft.VisualBasic.ChrW(10)&"SE~dulla^@204~ dNo, PartNo, Description, CostPrice, ~dulla^@204~ FR"& _ 
                "OM StockCar~dulla^@204~ kCardNo = @StockCardNo)"
           ~dulla^@204~ InsertCommand.CommandType = System.Da~dulla^@204~ e.Text
            Me._adapter.Inser~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@StockCardNo", System.Data.SqlDbType~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ kCardNo", System.Data.DataRowVersion.~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ InsertCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@PartNo", System.D~dulla^@204~ .NVarChar, 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "PartNo", System.Data.DataRow~dulla^@204~ nt, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.InsertCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Descripti~dulla^@204~ ata.SqlDbType.[Char], 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "Description", Sys~dulla^@204~ RowVersion.Current, false, Nothing, "~dulla^@204~             Me._adapter.InsertCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ ice", System.Data.SqlDbType.Money, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Cost~dulla^@204~ m.Data.DataRowVersion.Current, false,~dulla^@204~  "", ""))
            Me._adapter.In~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@SellingPrice", System.Data.SqlDb~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ lingPrice", System.Data.DataRowVersio~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.UpdateCommand = New System.Data.Sql~dulla^@204~ mand
            Me._adapter.UpdateC~dulla^@204~ tion = Me.Connection
            Me.~dulla^@204~ teCommand.CommandText = "UPDATE [dbo]~dulla^@204~ SET [StockCardNo] = @StockCardNo, [Pa~dulla^@204~ No, [D"& _ 
                "escript~dulla^@204~ iption, [CostPrice] = @CostPrice, [Se~dulla^@204~  @SellingP"& _ 
                "ric~dulla^@204~ ockCardNo] = @Original_StockCardNo) A~dulla^@204~ = @Original_Pa"& _ 
                ~dulla^@204~ Description] = @Original_Description)~dulla^@204~ ice] = @Original_C"& _ 
            ~dulla^@204~ ) AND ([SellingPrice] = @Original_Sel~dulla^@204~ &Global.Microsoft.VisualBasic.ChrW(13~dulla^@204~ osoft.VisualBasic.ChrW(10)&"SELECT St~dulla^@204~ & _ 
                "artNo, Descrip~dulla^@204~ ce, SellingPrice FROM StockCard WHERE~dulla^@204~  = "& _ 
                "@StockCard~dulla^@204~      Me._adapter.UpdateCommand.Comman~dulla^@204~ m.Data.CommandType.Text
            ~dulla^@204~ pdateCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@StockCardNo", Syst~dulla^@204~ Type.NVarChar, 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "StockCardNo", System.Dat~dulla^@204~ ion.Current, false, Nothing, "", "", ~dulla^@204~      Me._adapter.UpdateCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ em.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Par~dulla^@204~ Data.DataRowVersion.Current, false, N~dulla^@204~ ", ""))
            Me._adapter.Upda~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@Description", System.Data.SqlDbTyp~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ iption", System.Data.DataRowVersion.C~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ pdateCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@CostPrice", System~dulla^@204~ pe.Money, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "CostPrice", System.Data.DataR~dulla^@204~ rent, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.UpdateCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Selling~dulla^@204~ m.Data.SqlDbType.Money, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "SellingPrice", ~dulla^@204~ ataRowVersion.Current, false, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ginal_StockCardNo", System.Data.SqlDb~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ StockCardNo", System.Data.DataRowVers~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.UpdateCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@Original_Par~dulla^@204~ Data.SqlDbType.NVarChar, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "PartNo", Syste~dulla^@204~ wVersion.Original, false, Nothing, ""~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ l_Description", System.Data.SqlDbType~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ ption", System.Data.DataRowVersion.Or~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ pdateCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@Original_CostPrice~dulla^@204~ a.SqlDbType.Money, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "CostPrice", System.D~dulla^@204~ rsion.Original, false, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ ellingPrice", System.Data.SqlDbType.M~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ ice", System.Data.DataRowVersion.Orig~dulla^@204~ Nothing, "", "", ""))
        End Su~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Private Sub Ini~dulla^@204~ 
            Me._connection = New Sy~dulla^@204~ Client.SqlConnection
            Me.~dulla^@204~ onnectionString = Global.InventoryCon~dulla^@204~ .MySettings.Default.PurchaseInfoConne~dulla^@204~   End Sub
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~  Sub InitCommandCollection()
       ~dulla^@204~ andCollection = New System.Data.SqlCl~dulla^@204~ nd(0) {}
            Me._commandColl~dulla^@204~ ew System.Data.SqlClient.SqlCommand
~dulla^@204~ e._commandCollection(0).Connection = ~dulla^@204~ 
            Me._commandCollection(0~dulla^@204~  = "SELECT StockCardNo, PartNo, Descr~dulla^@204~ rice, SellingPrice FROM dbo.StockCa"&~dulla^@204~         "rd"
            Me._command~dulla^@204~ .CommandType = System.Data.CommandTyp~dulla^@204~    End Sub
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute(),  _
 ~dulla^@204~ m.ComponentModel.Design.HelpKeywordAt~dulla^@204~ ata.TableAdapter"),  _
         Syst~dulla^@204~ odel.DataObjectMethodAttribute(System~dulla^@204~ el.DataObjectMethodType.Fill, true)> ~dulla^@204~ ublic Overloads Overridable Function ~dulla^@204~ taTable As InventoryControlSystemData~dulla^@204~ dDataTable) As Integer
            M~dulla^@204~ ectCommand = Me.CommandCollection(0)~dulla^@204~ If (Me.ClearBeforeFill = true) Then
~dulla^@204~    dataTable.Clear
            End I~dulla^@204~   Dim returnValue As Integer = Me.Ada~dulla^@204~ aTable)
            Return returnVal~dulla^@204~ nd Function
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute(),  _
~dulla^@204~ em.ComponentModel.Design.HelpKeywordA~dulla^@204~ data.TableAdapter"),  _
         Sys~dulla^@204~ Model.DataObjectMethodAttribute(Syste~dulla^@204~ del.DataObjectMethodType.[Select], tr~dulla^@204~     Public Overloads Overridable Func~dulla^@204~ ) As InventoryControlSystemDataSet3.S~dulla^@204~ able
            Me.Adapter.SelectCo~dulla^@204~ mmandCollection(0)
            Dim d~dulla^@204~ nventoryControlSystemDataSet3.StockCa~dulla^@204~  New InventoryControlSystemDataSet3.S~dulla^@204~ able
            Me.Adapter.Fill(dat~dulla^@204~         Return dataTable
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute(),  _
         System~dulla^@204~ el.Design.HelpKeywordAttribute("vs.da~dulla^@204~ er")>  _
        Public Overloads Ov~dulla^@204~ ction Update(ByVal dataTable As Inven~dulla^@204~ stemDataSet3.StockCardDataTable) As I~dulla^@204~        Return Me.Adapter.Update(dataT~dulla^@204~   End Function
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute(),  ~dulla^@204~ ystem.ComponentModel.Design.HelpKeywo~dulla^@204~ vs.data.TableAdapter")>  _
        P~dulla^@204~ ds Overridable Function Update(ByVal ~dulla^@204~ ventoryControlSystemDataSet3) As Inte~dulla^@204~     Return Me.Adapter.Update(dataSet,~dulla^@204~ 
        End Function
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~        System.ComponentModel.Design.H~dulla^@204~ ribute("vs.data.TableAdapter")>  _
 ~dulla^@204~  Overloads Overridable Function Updat~dulla^@204~ ow As System.Data.DataRow) As Integer~dulla^@204~  Return Me.Adapter.Update(New System.~dulla^@204~ ) {dataRow})
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te(),  _
         System.ComponentMo~dulla^@204~ lpKeywordAttribute("vs.data.TableAdap~dulla^@204~       Public Overloads Overridable Fu~dulla^@204~ (ByVal dataRows() As System.Data.Data~dulla^@204~ er
            Return Me.Adapter.Upd~dulla^@204~ 
        End Function
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~        System.ComponentModel.Design.H~dulla^@204~ ribute("vs.data.TableAdapter"),  _
 ~dulla^@204~ m.ComponentModel.DataObjectMethodAttr~dulla^@204~ ComponentModel.DataObjectMethodType.D~dulla^@204~   _
        Public Overloads Overrid~dulla^@204~  Delete(ByVal Original_StockCardNo As~dulla^@204~ l Original_PartNo As String, ByVal Or~dulla^@204~ ption As String, ByVal Original_CostP~dulla^@204~ al, ByVal Original_SellingPrice As De~dulla^@204~ eger
            If (Original_StockC~dulla^@204~ ing) Then
                Throw New ~dulla^@204~ ntNullException("Original_StockCardNo~dulla^@204~    Else
                Me.Adapter.D~dulla^@204~ Parameters(0).Value = CType(Original_~dulla^@204~ tring)
            End If
         ~dulla^@204~ al_PartNo Is Nothing) Then
         ~dulla^@204~ New System.ArgumentNullException("Ori~dulla^@204~ )
            Else
                ~dulla^@204~ leteCommand.Parameters(1).Value = CTy~dulla^@204~ artNo,String)
            End If
  ~dulla^@204~ (Original_Description Is Nothing) The~dulla^@204~       Throw New System.ArgumentNullEx~dulla^@204~ inal_Description")
            Else~dulla^@204~     Me.Adapter.DeleteCommand.Paramete~dulla^@204~  CType(Original_Description,String)
~dulla^@204~ nd If
            Me.Adapter.DeleteC~dulla^@204~ ters(3).Value = CType(Original_CostPr~dulla^@204~ 
            Me.Adapter.DeleteCommand~dulla^@204~ ).Value = CType(Original_SellingPrice~dulla^@204~           Dim previousConnectionState~dulla^@204~ ta.ConnectionState = Me.Adapter.Delet~dulla^@204~ ection.State
            If ((Me.Ada~dulla^@204~ mmand.Connection.State And System.Dat~dulla^@204~ tate.Open)  _
                      ~dulla^@204~ ata.ConnectionState.Open) Then
     ~dulla^@204~ .Adapter.DeleteCommand.Connection.Ope~dulla^@204~   End If
            Try 
         ~dulla^@204~ turnValue As Integer = Me.Adapter.Del~dulla^@204~ ecuteNonQuery
                Return~dulla^@204~ 
            Finally
               ~dulla^@204~ ConnectionState = System.Data.Connect~dulla^@204~ ed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
      ~dulla^@204~  If
            End Try
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute(),  _
         System~dulla^@204~ el.Design.HelpKeywordAttribute("vs.da~dulla^@204~ er"),  _
         System.ComponentMo~dulla^@204~ tMethodAttribute(System.ComponentMode~dulla^@204~ ethodType.Insert, true)>  _
        ~dulla^@204~ ads Overridable Function Insert(ByVal~dulla^@204~ As String, ByVal PartNo As String, By~dulla^@204~ on As String, ByVal CostPrice As Deci~dulla^@204~ llingPrice As Decimal) As Integer
  ~dulla^@204~ (StockCardNo Is Nothing) Then
      ~dulla^@204~ ow New System.ArgumentNullException("~dulla^@204~ 
            Else
                M~dulla^@204~ ertCommand.Parameters(0).Value = CTyp~dulla^@204~ ,String)
            End If
       ~dulla^@204~ No Is Nothing) Then
                ~dulla^@204~ tem.ArgumentNullException("PartNo")
~dulla^@204~ lse
                Me.Adapter.Inser~dulla^@204~ meters(1).Value = CType(PartNo,String~dulla^@204~   End If
            If (Description~dulla^@204~ Then
                Throw New Syste~dulla^@204~ lException("Description")
          ~dulla^@204~            Me.Adapter.InsertCommand.P~dulla^@204~ Value = CType(Description,String)
  ~dulla^@204~  If
            Me.Adapter.InsertCom~dulla^@204~ rs(3).Value = CType(CostPrice,Decimal~dulla^@204~   Me.Adapter.InsertCommand.Parameters~dulla^@204~ Type(SellingPrice,Decimal)
         ~dulla^@204~ usConnectionState As System.Data.Conn~dulla^@204~  Me.Adapter.InsertCommand.Connection.~dulla^@204~       If ((Me.Adapter.InsertCommand.C~dulla^@204~ te And System.Data.ConnectionState.Op~dulla^@204~                    <> System.Data.Con~dulla^@204~ Open) Then
                Me.Adapte~dulla^@204~ nd.Connection.Open
            End I~dulla^@204~   Try 
                Dim returnVal~dulla^@204~  = Me.Adapter.InsertCommand.ExecuteNo~dulla^@204~            Return returnValue
      ~dulla^@204~ 
                If (previousConnect~dulla^@204~ stem.Data.ConnectionState.Closed) The~dulla^@204~           Me.Adapter.InsertCommand.Co~dulla^@204~ e
                End If
          ~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~    System.ComponentModel.Design.HelpK~dulla^@204~ te("vs.data.TableAdapter"),  _
     ~dulla^@204~ mponentModel.DataObjectMethodAttribut~dulla^@204~ onentModel.DataObjectMethodType.Updat~dulla^@204~ 
        Public Overloads Overridable~dulla^@204~ ate(ByVal StockCardNo As String, ByVa~dulla^@204~ tring, ByVal Description As String, B~dulla^@204~ e As Decimal, ByVal SellingPrice As D~dulla^@204~  Original_StockCardNo As String, ByVa~dulla^@204~ rtNo As String, ByVal Original_Descri~dulla^@204~ ng, ByVal Original_CostPrice As Decim~dulla^@204~ ginal_SellingPrice As Decimal) As Int~dulla^@204~      If (StockCardNo Is Nothing) Then~dulla^@204~      Throw New System.ArgumentNullExc~dulla^@204~ CardNo")
            Else
         ~dulla^@204~ pter.UpdateCommand.Parameters(0).Valu~dulla^@204~ ckCardNo,String)
            End If~dulla^@204~ If (PartNo Is Nothing) Then
        ~dulla^@204~  New System.ArgumentNullException("Pa~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(1).Value = CType(PartN~dulla^@204~           End If
            If (Des~dulla^@204~ othing) Then
                Throw N~dulla^@204~ umentNullException("Description")
  ~dulla^@204~ e
                Me.Adapter.UpdateC~dulla^@204~ ters(2).Value = CType(Description,Str~dulla^@204~      End If
            Me.Adapter.U~dulla^@204~ Parameters(3).Value = CType(CostPrice~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ alue = CType(SellingPrice,Decimal)
 ~dulla^@204~  (Original_StockCardNo Is Nothing) Th~dulla^@204~        Throw New System.ArgumentNullE~dulla^@204~ ginal_StockCardNo")
            Else~dulla^@204~      Me.Adapter.UpdateCommand.Paramet~dulla^@204~ = CType(Original_StockCardNo,String)~dulla^@204~ End If
            If (Original_Part~dulla^@204~ ) Then
                Throw New Sys~dulla^@204~ ullException("Original_PartNo")
    ~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(6).Value = CType(Original_PartNo,S~dulla^@204~        End If
            If (Origin~dulla^@204~ n Is Nothing) Then
                T~dulla^@204~ em.ArgumentNullException("Original_De~dulla^@204~             Else
                Me.~dulla^@204~ eCommand.Parameters(7).Value = CType(~dulla^@204~ ription,String)
            End If
~dulla^@204~ e.Adapter.UpdateCommand.Parameters(8)~dulla^@204~ e(Original_CostPrice,Decimal)
      ~dulla^@204~ ter.UpdateCommand.Parameters(9).Value~dulla^@204~ inal_SellingPrice,Decimal)
         ~dulla^@204~ usConnectionState As System.Data.Conn~dulla^@204~  Me.Adapter.UpdateCommand.Connection.~dulla^@204~       If ((Me.Adapter.UpdateCommand.C~dulla^@204~ te And System.Data.ConnectionState.Op~dulla^@204~                    <> System.Data.Con~dulla^@204~ Open) Then
                Me.Adapte~dulla^@204~ nd.Connection.Open
            End I~dulla^@204~   Try 
                Dim returnVal~dulla^@204~  = Me.Adapter.UpdateCommand.ExecuteNo~dulla^@204~            Return returnValue
      ~dulla^@204~ 
                If (previousConnect~dulla^@204~ stem.Data.ConnectionState.Closed) The~dulla^@204~           Me.Adapter.UpdateCommand.Co~dulla^@204~ e
                End If
          ~dulla^@204~       End Function
    End Class
  ~dulla^@204~ em.CodeDom.Compiler.GeneratedCodeAttr~dulla^@204~ .Data.Design.TypedDataSetGenerator", ~dulla^@204~ _
     System.ComponentModel.Designe~dulla^@204~ ibute("code"),  _
     System.Compon~dulla^@204~ boxItem(true),  _
     System.Compon~dulla^@204~ ObjectAttribute(true),  _
     Syste~dulla^@204~ del.DesignerAttribute("Microsoft.VSDe~dulla^@204~ urce.Design.TableAdapterDesigner, Mic~dulla^@204~ gner"& _ 
        ", Version=8.0.0.0~dulla^@204~ tral, PublicKeyToken=b03f5f7f11d50a3a~dulla^@204~ System.ComponentModel.Design.HelpKeyw~dulla^@204~ "vs.data.TableAdapter")>  _
    Part~dulla^@204~ ass StockCardDetailTableAdapter
    ~dulla^@204~ System.ComponentModel.Component
    ~dulla^@204~  Private WithEvents _adapter As Syste~dulla^@204~ ent.SqlDataAdapter
        
       ~dulla^@204~ nection As System.Data.SqlClient.SqlC~dulla^@204~       
        Private _commandColle~dulla^@204~ stem.Data.SqlClient.SqlCommand
     ~dulla^@204~ Private _clearBeforeFill As Boolean
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Sub New()
~dulla^@204~ yBase.New
            Me.ClearBefore~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ rivate ReadOnly Property Adapter() As~dulla^@204~ SqlClient.SqlDataAdapter
           ~dulla^@204~          If (Me._adapter Is Nothing) ~dulla^@204~              Me.InitAdapter
        ~dulla^@204~ f
                Return Me._adapter~dulla^@204~  End Get
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Friend Property Connect~dulla^@204~ em.Data.SqlClient.SqlConnection
    ~dulla^@204~                 If (Me._connection Is~dulla^@204~ n
                    Me.InitConnect~dulla^@204~         End If
                Retur~dulla^@204~ ion
            End Get
           ~dulla^@204~          Me._connection = value
    ~dulla^@204~ f (Not (Me.Adapter.InsertCommand) Is ~dulla^@204~ 
                    Me.Adapter.Inse~dulla^@204~ nection = value
                End ~dulla^@204~        If (Not (Me.Adapter.DeleteComm~dulla^@204~ ng) Then
                    Me.Adap~dulla^@204~ mand.Connection = value
            ~dulla^@204~                If (Not (Me.Adapter.Up~dulla^@204~ Is Nothing) Then
                   ~dulla^@204~ pdateCommand.Connection = value
    ~dulla^@204~ nd If
                Dim i As Integ~dulla^@204~            Do While (i < Me.CommandCo~dulla^@204~ th)
                    If (Not (Me.~dulla^@204~ tion(i)) Is Nothing) Then
          ~dulla^@204~  CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = v~dulla^@204~              End If
                ~dulla^@204~ 1)
                Loop
           ~dulla^@204~      End Property
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Protected ReadOnly Property CommandC~dulla^@204~ s System.Data.SqlClient.SqlCommand()~dulla^@204~ Get
                If (Me._commandC~dulla^@204~ Nothing) Then
                    Me~dulla^@204~ ollection
                End If
  ~dulla^@204~  Return Me._commandCollection
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Property ClearBeforeFill~dulla^@204~ 
            Get
                Re~dulla^@204~ rBeforeFill
            End Get
   ~dulla^@204~ 
                Me._clearBeforeFill ~dulla^@204~         End Set
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Private Sub Init~dulla^@204~           Me._adapter = New System.Da~dulla^@204~ SqlDataAdapter
            Dim table~dulla^@204~ stem.Data.Common.DataTableMapping = N~dulla^@204~ a.Common.DataTableMapping
          ~dulla^@204~ g.SourceTable = "Table"
            ~dulla^@204~ DataSetTable = "StockCardDetail"
   ~dulla^@204~ eMapping.ColumnMappings.Add("SalesInv~dulla^@204~ esInvoiceNo")
            tableMappi~dulla^@204~ ings.Add("DateOfSale", "DateOfSale")~dulla^@204~ tableMapping.ColumnMappings.Add("Date~dulla^@204~ ateRecieved")
            tableMappi~dulla^@204~ ings.Add("QtyRecieved", "QtyRecieved"~dulla^@204~   tableMapping.ColumnMappings.Add("Qt~dulla^@204~ yIssued")
            tableMapping.C~dulla^@204~ .Add("QtyBalance", "QtyBalance")
   ~dulla^@204~ eMapping.ColumnMappings.Add("StockCar~dulla^@204~ ardNo")
            Me._adapter.Tabl~dulla^@204~ (tableMapping)
            Me._adapt~dulla^@204~ and = New System.Data.SqlClient.SqlCo~dulla^@204~       Me._adapter.DeleteCommand.Conne~dulla^@204~ nnection
            Me._adapter.Del~dulla^@204~ mmandText = "DELETE FROM [dbo].[Stock~dulla^@204~ HERE (([SalesInvoiceNo] = @Original_S~dulla^@204~ 
                "oiceNo) AND ([DateO~dulla^@204~ ginal_DateOfSale) AND ((@IsNull_DateR~dulla^@204~  _ 
                " AND [DateRecie~dulla^@204~  OR ([DateRecieved] = @Original_DateR~dulla^@204~  ("& _ 
                "(@IsNull_Qt~dulla^@204~  AND [QtyRecieved] IS NULL) OR ([QtyR~dulla^@204~ rigina"& _ 
                "l_QtyRe~dulla^@204~ ((@IsNull_QtyIssued = 1 AND [QtyIssue~dulla^@204~ R ([QtyIss"& _ 
                "ued~dulla^@204~ _QtyIssued)) AND ((@IsNull_QtyBalance~dulla^@204~ Balance] IS NU"& _ 
                ~dulla^@204~ Balance] = @Original_QtyBalance)) AND~dulla^@204~ o] = @Original_Sto"& _ 
            ~dulla^@204~ ))"
            Me._adapter.DeleteCo~dulla^@204~ Type = System.Data.CommandType.Text
~dulla^@204~ e._adapter.DeleteCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@Origin~dulla^@204~ ceNo", System.Data.SqlDbType.NVarChar~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ o", System.Data.DataRowVersion.Origin~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@Original_DateOfSale", ~dulla^@204~ qlDbType.DateTime, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "DateOfSale", System.~dulla^@204~ ersion.Original, false, Nothing, "", ~dulla^@204~          Me._adapter.DeleteCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ teRecieved", System.Data.SqlDbType.In~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@Original_DateRecieved", ~dulla^@204~ qlDbType.DateTime, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "DateRecieved", Syste~dulla^@204~ wVersion.Original, false, Nothing, ""~dulla^@204~            Me._adapter.DeleteCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ QtyRecieved", System.Data.SqlDbType.I~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@Original_QtyRecieved", S~dulla^@204~ lDbType.Int, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "QtyRecieved", System.Data.~dulla^@204~ n.Original, false, Nothing, "", "", "~dulla^@204~     Me._adapter.DeleteCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@I~dulla^@204~ ed", System.Data.SqlDbType.Int, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "QtyIssu~dulla^@204~ ata.DataRowVersion.Original, true, No~dulla^@204~ , ""))
            Me._adapter.Delet~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@Original_QtyIssued", System.Data.Sq~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ yIssued", System.Data.DataRowVersion.~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .DeleteCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@IsNull_QtyBalanc~dulla^@204~ ta.SqlDbType.Int, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "QtyBalance", System.D~dulla^@204~ rsion.Original, true, Nothing, "", ""~dulla^@204~        Me._adapter.DeleteCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ yBalance", System.Data.SqlDbType.Int,~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "Q~dulla^@204~ ystem.Data.DataRowVersion.Original, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@Original_StockCardNo", Syst~dulla^@204~ Type.NVarChar, 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "StockCardNo", System.Dat~dulla^@204~ ion.Original, false, Nothing, "", "",~dulla^@204~       Me._adapter.InsertCommand = New~dulla^@204~ SqlClient.SqlCommand
            Me.~dulla^@204~ rtCommand.Connection = Me.Connection~dulla^@204~ Me._adapter.InsertCommand.CommandText~dulla^@204~ TO [dbo].[StockCardDetail] ([SalesInv~dulla^@204~ eOfSale], [DateRecieve"& _ 
        ~dulla^@204~ [QtyRecieved], [QtyIssued], [QtyBalan~dulla^@204~ rdNo]) VALUES (@SalesInvoi"& _ 
    ~dulla^@204~ ceNo, @DateOfSale, @DateRecieved, @Qt~dulla^@204~ tyIssued, @QtyBalance, @StockC"& _ 
~dulla^@204~    "ardNo);"&Global.Microsoft.VisualB~dulla^@204~ &Global.Microsoft.VisualBasic.ChrW(10~dulla^@204~ esInvoiceNo, DateOfSale, DateRecieved~dulla^@204~ , QtyIssued"& _ 
                ", ~dulla^@204~ tockCardNo FROM StockCardDetail WHERE~dulla^@204~ = @DateOfSale) "& _ 
               ~dulla^@204~ nvoiceNo = @SalesInvoiceNo)"
       ~dulla^@204~ ter.InsertCommand.CommandType = Syste~dulla^@204~ dType.Text
            Me._adapter.I~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@SalesInvoiceNo", System.Data.Sq~dulla^@204~ har, 0, System.Data.ParameterDirectio~dulla^@204~ , "SalesInvoiceNo", System.Data.DataR~dulla^@204~ rent, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.InsertCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@DateOfS~dulla^@204~ Data.SqlDbType.DateTime, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "DateOfSale", S~dulla^@204~ taRowVersion.Current, false, Nothing,~dulla^@204~ 
            Me._adapter.InsertComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ Recieved", System.Data.SqlDbType.Date~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ ved", System.Data.DataRowVersion.Curr~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ rtCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@QtyRecieved", System.~dulla^@204~ e.Int, 0, System.Data.ParameterDirect~dulla^@204~  0, "QtyRecieved", System.Data.DataRo~dulla^@204~ ent, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.InsertCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@QtyIssue~dulla^@204~ ta.SqlDbType.Int, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "QtyIssued", System.Da~dulla^@204~ sion.Current, false, Nothing, "", "",~dulla^@204~       Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlPar~dulla^@204~ alance", System.Data.SqlDbType.Int, 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Qty~dulla^@204~ tem.Data.DataRowVersion.Current, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@StockCardNo", System.Data.SqlD~dulla^@204~ r, 0, System.Data.ParameterDirection.~dulla^@204~ "StockCardNo", System.Data.DataRowVer~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.UpdateCommand = New System.Data.~dulla^@204~ Command
            Me._adapter.Upda~dulla^@204~ nection = Me.Connection
            ~dulla^@204~ pdateCommand.CommandText = "UPDATE [d~dulla^@204~ dDetail] SET [SalesInvoiceNo] = @Sale~dulla^@204~ DateOfSal"& _ 
                "e] =~dulla^@204~  [DateRecieved] = @DateRecieved, [Qty~dulla^@204~ QtyRecieved, "& _ 
                "~dulla^@204~  @QtyIssued, [QtyBalance] = @QtyBalan~dulla^@204~ dNo] = @StockCard"& _ 
             ~dulla^@204~ (([SalesInvoiceNo] = @Original_SalesI~dulla^@204~  ([DateOfSale] = @Ori"& _ 
         ~dulla^@204~ _DateOfSale) AND ((@IsNull_DateReciev~dulla^@204~ ateRecieved] IS NULL) OR "& _ 
     ~dulla^@204~ [DateRecieved] = @Original_DateReciev~dulla^@204~ sNull_QtyRecieved = 1 AND [Qt"& _ 
 ~dulla^@204~   "yRecieved] IS NULL) OR ([QtyReciev~dulla^@204~ al_QtyRecieved)) AND ((@IsNull_Qt"& _~dulla^@204~       "yIssued = 1 AND [QtyIssued] IS~dulla^@204~ tyIssued] = @Original_QtyIssued)) AND~dulla^@204~           " ((@IsNull_QtyBalance = 1 ~dulla^@204~ ce] IS NULL) OR ([QtyBalance] = @Orig~dulla^@204~               "_QtyBalance)) AND ([St~dulla^@204~ @Original_StockCardNo));"&Global.Micr~dulla^@204~ asic.ChrW(13)&Global.Microsoft.Visual~dulla^@204~ )&"SELECT SalesInvoice"& _ 
        ~dulla^@204~ DateOfSale, DateRecieved, QtyRecieved~dulla^@204~ QtyBalance, StockCardNo FR"& _ 
    ~dulla^@204~ OM StockCardDetail WHERE (DateOfSale ~dulla^@204~ ) AND (SalesInvoiceNo = @Sales"& _ 
~dulla^@204~    "InvoiceNo)"
            Me._adap~dulla^@204~ mand.CommandType = System.Data.Comman~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ voiceNo", System.Data.SqlDbType.NVarC~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ ceNo", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@DateOfSale", System.~dulla^@204~ e.DateTime, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "DateOfSale", System.Data.Da~dulla^@204~ Current, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Date~dulla^@204~ stem.Data.SqlDbType.DateTime, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "DateRecie~dulla^@204~ Data.DataRowVersion.Current, false, N~dulla^@204~ ", ""))
            Me._adapter.Upda~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@QtyRecieved", System.Data.SqlDbTyp~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ ved", System.Data.DataRowVersion.Curr~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@QtyIssued", System.Da~dulla^@204~ Int, 0, System.Data.ParameterDirectio~dulla^@204~ , "QtyIssued", System.Data.DataRowVer~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.UpdateCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@QtyBalance",~dulla^@204~ SqlDbType.Int, 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "QtyBalance", System.Data~dulla^@204~ on.Current, false, Nothing, "", "", "~dulla^@204~     Me._adapter.UpdateCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@S~dulla^@204~ System.Data.SqlDbType.NVarChar, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "StockCa~dulla^@204~ .Data.DataRowVersion.Current, false, ~dulla^@204~ "", ""))
            Me._adapter.Upd~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@Original_SalesInvoiceNo", System.~dulla^@204~ e.NVarChar, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "SalesInvoiceNo", System.Dat~dulla^@204~ ion.Original, false, Nothing, "", "",~dulla^@204~       Me._adapter.UpdateCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ eOfSale", System.Data.SqlDbType.DateT~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@IsNull_DateRecieved", S~dulla^@204~ lDbType.Int, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "DateRecieved", System.Data~dulla^@204~ on.Original, true, Nothing, "", "", "~dulla^@204~     Me._adapter.UpdateCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@O~dulla^@204~ ecieved", System.Data.SqlDbType.DateT~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ ed", System.Data.DataRowVersion.Origi~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@IsNull_QtyRecieved", ~dulla^@204~ qlDbType.Int, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "QtyRecieved", System.Data~dulla^@204~ on.Original, true, Nothing, "", "", "~dulla^@204~     Me._adapter.UpdateCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@O~dulla^@204~ cieved", System.Data.SqlDbType.Int, 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Qty~dulla^@204~ stem.Data.DataRowVersion.Original, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@IsNull_QtyIssued", System.Da~dulla^@204~ Int, 0, System.Data.ParameterDirectio~dulla^@204~ , "QtyIssued", System.Data.DataRowVer~dulla^@204~ , true, Nothing, "", "", ""))
      ~dulla^@204~ pter.UpdateCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@Original_Qty~dulla^@204~ em.Data.SqlDbType.Int, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "QtyIssued", Syst~dulla^@204~ owVersion.Original, false, Nothing, "~dulla^@204~             Me._adapter.UpdateCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ _QtyBalance", System.Data.SqlDbType.I~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ , System.Data.DataRowVersion.Original~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@Original_QtyBalance", Sys~dulla^@204~ bType.Int, 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "QtyBalance", System.Data.Dat~dulla^@204~ riginal, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Orig~dulla^@204~ dNo", System.Data.SqlDbType.NVarChar,~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "S~dulla^@204~ System.Data.DataRowVersion.Original, ~dulla^@204~ g, "", "", ""))
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Private Sub InitConne~dulla^@204~         Me._connection = New System.D~dulla^@204~ .SqlConnection
            Me._conne~dulla^@204~ ionString = Global.InventoryControlSy~dulla^@204~ tings.Default.PurchaseInfoConnection~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ nitCommandCollection()
            M~dulla^@204~ lection = New System.Data.SqlClient.S~dulla^@204~ {}
            Me._commandCollection~dulla^@204~ tem.Data.SqlClient.SqlCommand
      ~dulla^@204~ mandCollection(0).Connection = Me.Con~dulla^@204~         Me._commandCollection(0).Comm~dulla^@204~ LECT SalesInvoiceNo, DateOfSale, Date~dulla^@204~ Recieved, QtyIssued, QtyBalan"& _ 
 ~dulla^@204~   "ce, StockCardNo FROM dbo.StockCard~dulla^@204~         Me._commandCollection(0).Comm~dulla^@204~ tem.Data.CommandType.Text
        En~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute(),  _
         System.Com~dulla^@204~ esign.HelpKeywordAttribute("vs.data.T~dulla^@204~ ,  _
         System.ComponentModel.~dulla^@204~ hodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
      ~dulla^@204~ loads Overridable Function Fill(ByVal~dulla^@204~  InventoryControlSystemDataSet3.Stock~dulla^@204~ aTable) As Integer
            Me.Ad~dulla^@204~ ommand = Me.CommandCollection(0)
   ~dulla^@204~ Me.ClearBeforeFill = true) Then
    ~dulla^@204~ ataTable.Clear
            End If
 ~dulla^@204~ m returnValue As Integer = Me.Adapter~dulla^@204~ le)
            Return returnValue
~dulla^@204~ unction
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute(),  _
    ~dulla^@204~ omponentModel.Design.HelpKeywordAttri~dulla^@204~ .TableAdapter"),  _
         System.~dulla^@204~ l.DataObjectMethodAttribute(System.Co~dulla^@204~ DataObjectMethodType.[Select], true)>~dulla^@204~ Public Overloads Overridable Function~dulla^@204~  InventoryControlSystemDataSet3.Stock~dulla^@204~ aTable
            Me.Adapter.Select~dulla^@204~ CommandCollection(0)
            Dim~dulla^@204~  InventoryControlSystemDataSet3.Stock~dulla^@204~ aTable = New InventoryControlSystemDa~dulla^@204~ ardDetailDataTable
            Me.Ad~dulla^@204~ taTable)
            Return dataTabl~dulla^@204~ d Function
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute(),  _
 ~dulla^@204~ m.ComponentModel.Design.HelpKeywordAt~dulla^@204~ ata.TableAdapter")>  _
        Publi~dulla^@204~ verridable Function Update(ByVal data~dulla^@204~ ntoryControlSystemDataSet3.StockCardD~dulla^@204~ e) As Integer
            Return Me.~dulla^@204~ e(dataTable)
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te(),  _
         System.ComponentMo~dulla^@204~ lpKeywordAttribute("vs.data.TableAdap~dulla^@204~       Public Overloads Overridable Fu~dulla^@204~ (ByVal dataSet As InventoryControlSys~dulla^@204~ As Integer
            Return Me.Ada~dulla^@204~ ataSet, "StockCardDetail")
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute(),  _
         Syst~dulla^@204~ odel.Design.HelpKeywordAttribute("vs.~dulla^@204~ pter")>  _
        Public Overloads ~dulla^@204~ unction Update(ByVal dataRow As Syste~dulla^@204~ w) As Integer
            Return Me.~dulla^@204~ e(New System.Data.DataRow() {dataRow}~dulla^@204~ d Function
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute(),  _
 ~dulla^@204~ m.ComponentModel.Design.HelpKeywordAt~dulla^@204~ ata.TableAdapter")>  _
        Publi~dulla^@204~ verridable Function Update(ByVal data~dulla^@204~ tem.Data.DataRow) As Integer
       ~dulla^@204~ e.Adapter.Update(dataRows)
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute(),  _
         Syst~dulla^@204~ odel.Design.HelpKeywordAttribute("vs.~dulla^@204~ pter"),  _
         System.Component~dulla^@204~ ectMethodAttribute(System.ComponentMo~dulla^@204~ tMethodType.Delete, true)>  _
      ~dulla^@204~ loads Overridable Function Delete(ByV~dulla^@204~ alesInvoiceNo As String, ByVal Origin~dulla^@204~  As Date, ByVal Original_DateRecieved~dulla^@204~ llable(Of Date), ByVal Original_QtyRe~dulla^@204~ tem.Nullable(Of Integer), ByVal Origi~dulla^@204~  As System.Nullable(Of Integer), ByVa~dulla^@204~ yBalance As System.Nullable(Of Intege~dulla^@204~ ginal_StockCardNo As String) As Integ~dulla^@204~    If (Original_SalesInvoiceNo Is Not~dulla^@204~                Throw New System.Argum~dulla^@204~ ion("Original_SalesInvoiceNo")
     ~dulla^@204~                 Me.Adapter.DeleteComm~dulla^@204~ s(0).Value = CType(Original_SalesInvo~dulla^@204~ 
            End If
            Me.~dulla^@204~ eCommand.Parameters(1).Value = CType(~dulla^@204~ OfSale,Date)
            If (Origina~dulla^@204~ d.HasValue = true) Then
            ~dulla^@204~ r.DeleteCommand.Parameters(2).Value =~dulla^@204~ ct)
                Me.Adapter.Delet~dulla^@204~ meters(3).Value = CType(Original_Date~dulla^@204~ e,Date)
            Else
          ~dulla^@204~ ter.DeleteCommand.Parameters(2).Value~dulla^@204~ ject)
                Me.Adapter.Del~dulla^@204~ rameters(3).Value = System.DBNull.Val~dulla^@204~    End If
            If (Original_Q~dulla^@204~ sValue = true) Then
                ~dulla^@204~ leteCommand.Parameters(4).Value = CTy~dulla^@204~ 
                Me.Adapter.DeleteCom~dulla^@204~ rs(5).Value = CType(Original_QtyRecie~dulla^@204~ eger)
            Else
            ~dulla^@204~ r.DeleteCommand.Parameters(4).Value =~dulla^@204~ ct)
                Me.Adapter.Delet~dulla^@204~ meters(5).Value = System.DBNull.Value~dulla^@204~  End If
            If (Original_Qty~dulla^@204~ ue = true) Then
                Me.A~dulla^@204~ Command.Parameters(6).Value = CType(0~dulla^@204~              Me.Adapter.DeleteCommand~dulla^@204~ ).Value = CType(Original_QtyIssued.Va~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(6).Value = CType~dulla^@204~                Me.Adapter.DeleteComma~dulla^@204~ (7).Value = System.DBNull.Value
    ~dulla^@204~ f
            If (Original_QtyBalanc~dulla^@204~ true) Then
                Me.Adapte~dulla^@204~ nd.Parameters(8).Value = CType(0,Obje~dulla^@204~         Me.Adapter.DeleteCommand.Para~dulla^@204~ ue = CType(Original_QtyBalance.Value,~dulla^@204~          Else
                Me.Ada~dulla^@204~ mmand.Parameters(8).Value = CType(1,O~dulla^@204~            Me.Adapter.DeleteCommand.P~dulla^@204~ Value = System.DBNull.Value
        ~dulla^@204~            If (Original_StockCardNo I~dulla^@204~ en
                Throw New System.~dulla^@204~ xception("Original_StockCardNo")
   ~dulla^@204~ 
                Me.Adapter.DeleteCo~dulla^@204~ ers(10).Value = CType(Original_StockC~dulla^@204~ 
            End If
            Dim~dulla^@204~ ectionState As System.Data.Connection~dulla^@204~ apter.DeleteCommand.Connection.State~dulla^@204~ If ((Me.Adapter.DeleteCommand.Connect~dulla^@204~  System.Data.ConnectionState.Open)  _~dulla^@204~              <> System.Data.Connectio~dulla^@204~ Then
                Me.Adapter.Dele~dulla^@204~ nection.Open
            End If
   ~dulla^@204~ 
                Dim returnValue As ~dulla^@204~ Adapter.DeleteCommand.ExecuteNonQuery~dulla^@204~      Return returnValue
            ~dulla^@204~             If (previousConnectionSta~dulla^@204~ ata.ConnectionState.Closed) Then
   ~dulla^@204~     Me.Adapter.DeleteCommand.Connecti~dulla^@204~              End If
            End ~dulla^@204~ End Function
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ tem.ComponentModel.Design.HelpKeyword~dulla^@204~ .data.TableAdapter"),  _
         Sy~dulla^@204~ tModel.DataObjectMethodAttribute(Syst~dulla^@204~ odel.DataObjectMethodType.Insert, tru~dulla^@204~    Public Overloads Overridable Funct~dulla^@204~ Val SalesInvoiceNo As String, ByVal D~dulla^@204~ Date, ByVal DateRecieved As System.Nu~dulla^@204~ e), ByVal QtyRecieved As System.Nulla~dulla^@204~ r), ByVal QtyIssued As System.Nullabl~dulla^@204~ , ByVal QtyBalance As System.Nullable~dulla^@204~  ByVal StockCardNo As String) As Inte~dulla^@204~     If (SalesInvoiceNo Is Nothing) Th~dulla^@204~        Throw New System.ArgumentNullE~dulla^@204~ esInvoiceNo")
            Else
    ~dulla^@204~ e.Adapter.InsertCommand.Parameters(0)~dulla^@204~ e(SalesInvoiceNo,String)
           ~dulla^@204~         Me.Adapter.InsertCommand.Para~dulla^@204~ ue = CType(DateOfSale,Date)
        ~dulla^@204~ ecieved.HasValue = true) Then
      ~dulla^@204~ Adapter.InsertCommand.Parameters(2).V~dulla^@204~ DateRecieved.Value,Date)
           ~dulla^@204~           Me.Adapter.InsertCommand.Pa~dulla^@204~ alue = System.DBNull.Value
         ~dulla^@204~           If (QtyRecieved.HasValue = ~dulla^@204~                Me.Adapter.InsertComma~dulla^@204~ (3).Value = CType(QtyRecieved.Value,I~dulla^@204~         Else
                Me.Adap~dulla^@204~ mand.Parameters(3).Value = System.DBN~dulla^@204~           End If
            If (Qty~dulla^@204~ ue = true) Then
                Me.A~dulla^@204~ Command.Parameters(4).Value = CType(Q~dulla^@204~ e,Integer)
            Else
       ~dulla^@204~ dapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End~dulla^@204~     If (QtyBalance.HasValue = true) T~dulla^@204~         Me.Adapter.InsertCommand.Para~dulla^@204~ ue = CType(QtyBalance.Value,Integer)~dulla^@204~ Else
                Me.Adapter.Inse~dulla^@204~ ameters(5).Value = System.DBNull.Valu~dulla^@204~   End If
            If (StockCardNo~dulla^@204~ Then
                Throw New Syste~dulla^@204~ lException("StockCardNo")
          ~dulla^@204~            Me.Adapter.InsertCommand.P~dulla^@204~ Value = CType(StockCardNo,String)
  ~dulla^@204~  If
            Dim previousConnecti~dulla^@204~ stem.Data.ConnectionState = Me.Adapte~dulla^@204~ nd.Connection.State
            If (~dulla^@204~ nsertCommand.Connection.State And Sys~dulla^@204~ ectionState.Open)  _
               ~dulla^@204~ ystem.Data.ConnectionState.Open) Then~dulla^@204~      Me.Adapter.InsertCommand.Connect~dulla^@204~          End If
            Try 
  ~dulla^@204~  Dim returnValue As Integer = Me.Adap~dulla^@204~ mand.ExecuteNonQuery
               ~dulla^@204~ nValue
            Finally
        ~dulla^@204~ reviousConnectionState = System.Data.~dulla^@204~ te.Closed) Then
                    ~dulla^@204~ sertCommand.Connection.Close
       ~dulla^@204~ If
            End Try
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute(),  _
         System.~dulla^@204~ l.Design.HelpKeywordAttribute("vs.dat~dulla^@204~ r"),  _
         System.ComponentMod~dulla^@204~ MethodAttribute(System.ComponentModel~dulla^@204~ thodType.Update, true)>  _
        P~dulla^@204~ ds Overridable Function Update(ByVal ~dulla^@204~ o As String, ByVal DateOfSale As Date~dulla^@204~ ecieved As System.Nullable(Of Date), ~dulla^@204~ eved As System.Nullable(Of Integer), ~dulla^@204~ ed As System.Nullable(Of Integer), By~dulla^@204~ e As System.Nullable(Of Integer), ByV~dulla^@204~ o As String, ByVal Original_SalesInvo~dulla^@204~ ng, ByVal Original_DateOfSale As Date~dulla^@204~ nal_DateRecieved As System.Nullable(O~dulla^@204~ l Original_QtyRecieved As System.Null~dulla^@204~ er), ByVal Original_QtyIssued As Syst~dulla^@204~ f Integer), ByVal Original_QtyBalance~dulla^@204~ llable(Of Integer), ByVal Original_St~dulla^@204~ String) As Integer
            If (S~dulla^@204~  Is Nothing) Then
                Th~dulla^@204~ m.ArgumentNullException("SalesInvoice~dulla^@204~      Else
                Me.Adapter~dulla^@204~ d.Parameters(0).Value = CType(SalesIn~dulla^@204~ g)
            End If
            M~dulla^@204~ ateCommand.Parameters(1).Value = CTyp~dulla^@204~ Date)
            If (DateRecieved.H~dulla^@204~ e) Then
                Me.Adapter.U~dulla^@204~ Parameters(2).Value = CType(DateRecie~dulla^@204~ e)
            Else
               ~dulla^@204~ pdateCommand.Parameters(2).Value = Sy~dulla^@204~ alue
            End If
           ~dulla^@204~ ved.HasValue = true) Then
          ~dulla^@204~ ter.UpdateCommand.Parameters(3).Value~dulla^@204~ ecieved.Value,Integer)
            E~dulla^@204~         Me.Adapter.UpdateCommand.Para~dulla^@204~ ue = System.DBNull.Value
           ~dulla^@204~         If (QtyIssued.HasValue = true~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ Value = CType(QtyIssued.Value,Integer~dulla^@204~   Else
                Me.Adapter.Up~dulla^@204~ arameters(4).Value = System.DBNull.Va~dulla^@204~     End If
            If (QtyBalanc~dulla^@204~ true) Then
                Me.Adapte~dulla^@204~ nd.Parameters(5).Value = CType(QtyBal~dulla^@204~ teger)
            Else
           ~dulla^@204~ er.UpdateCommand.Parameters(5).Value ~dulla^@204~ ll.Value
            End If
       ~dulla^@204~ kCardNo Is Nothing) Then
           ~dulla^@204~ w System.ArgumentNullException("Stock~dulla^@204~          Else
                Me.Ada~dulla^@204~ mmand.Parameters(6).Value = CType(Sto~dulla^@204~ ng)
            End If
            ~dulla^@204~ SalesInvoiceNo Is Nothing) Then
    ~dulla^@204~ hrow New System.ArgumentNullException~dulla^@204~ lesInvoiceNo")
            Else
   ~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(7~dulla^@204~ pe(Original_SalesInvoiceNo,String)
 ~dulla^@204~ d If
            Me.Adapter.UpdateCo~dulla^@204~ ers(8).Value = CType(Original_DateOfS~dulla^@204~           If (Original_DateRecieved.H~dulla^@204~ e) Then
                Me.Adapter.U~dulla^@204~ Parameters(9).Value = CType(0,Object)~dulla^@204~      Me.Adapter.UpdateCommand.Paramet~dulla^@204~  = CType(Original_DateRecieved.Value,~dulla^@204~       Else
                Me.Adapte~dulla^@204~ nd.Parameters(9).Value = CType(1,Obje~dulla^@204~         Me.Adapter.UpdateCommand.Para~dulla^@204~ lue = System.DBNull.Value
          ~dulla^@204~          If (Original_QtyRecieved.Has~dulla^@204~  Then
                Me.Adapter.Upd~dulla^@204~ rameters(11).Value = CType(0,Object)~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~ = CType(Original_QtyRecieved.Value,In~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(11).Value = CType(1,Ob~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ Value = System.DBNull.Value
        ~dulla^@204~            If (Original_QtyIssued.Has~dulla^@204~  Then
                Me.Adapter.Upd~dulla^@204~ rameters(13).Value = CType(0,Object)~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~ = CType(Original_QtyIssued.Value,Inte~dulla^@204~      Else
                Me.Adapter~dulla^@204~ d.Parameters(13).Value = CType(1,Obje~dulla^@204~         Me.Adapter.UpdateCommand.Para~dulla^@204~ lue = System.DBNull.Value
          ~dulla^@204~          If (Original_QtyBalance.HasV~dulla^@204~ Then
                Me.Adapter.Upda~dulla^@204~ ameters(15).Value = CType(0,Object)
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~  CType(Original_QtyBalance.Value,Inte~dulla^@204~      Else
                Me.Adapter~dulla^@204~ d.Parameters(15).Value = CType(1,Obje~dulla^@204~         Me.Adapter.UpdateCommand.Para~dulla^@204~ lue = System.DBNull.Value
          ~dulla^@204~          If (Original_StockCardNo Is ~dulla^@204~ 
                Throw New System.Ar~dulla^@204~ eption("Original_StockCardNo")
     ~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(17).Value = CType(Original_StockCar~dulla^@204~             End If
            Dim p~dulla^@204~ tionState As System.Data.ConnectionSt~dulla^@204~ ter.UpdateCommand.Connection.State
 ~dulla^@204~  ((Me.Adapter.UpdateCommand.Connectio~dulla^@204~ ystem.Data.ConnectionState.Open)  _
~dulla^@204~            <> System.Data.ConnectionS~dulla^@204~ en
                Me.Adapter.Update~dulla^@204~ ction.Open
            End If
     ~dulla^@204~                 Dim returnValue As In~dulla^@204~ apter.UpdateCommand.ExecuteNonQuery
~dulla^@204~    Return returnValue
            Fi~dulla^@204~           If (previousConnectionState~dulla^@204~ a.ConnectionState.Closed) Then
     ~dulla^@204~   Me.Adapter.UpdateCommand.Connection~dulla^@204~            End If
            End Tr~dulla^@204~ d Function
    End Class
    
    ~dulla^@204~ om.Compiler.GeneratedCodeAttribute("S~dulla^@204~ sign.TypedDataSetGenerator", "2.0.0.0~dulla^@204~ System.ComponentModel.DesignerCategor~dulla^@204~ ode"),  _
     System.ComponentModel~dulla^@204~ true),  _
     System.ComponentModel~dulla^@204~ tribute(true),  _
     System.Compon~dulla^@204~ gnerAttribute("Microsoft.VSDesigner.D~dulla^@204~ ign.TableAdapterDesigner, Microsoft.V~dulla^@204~  
        ", Version=8.0.0.0, Cultur~dulla^@204~ blicKeyToken=b03f5f7f11d50a3a"),  _
~dulla^@204~ omponentModel.Design.HelpKeywordAttri~dulla^@204~ .TableAdapter")>  _
    Partial Publ~dulla^@204~ lierTableAdapter
        Inherits Sy~dulla^@204~ tModel.Component
        
        P~dulla^@204~ ents _adapter As System.Data.SqlClien~dulla^@204~ ter
        
        Private _conne~dulla^@204~ em.Data.SqlClient.SqlConnection
    ~dulla^@204~  Private _commandCollection() As Syst~dulla^@204~ ient.SqlCommand
        
        Pr~dulla^@204~ eforeFill As Boolean
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
       ~dulla^@204~ ew
            Me.ClearBeforeFill = ~dulla^@204~  End Sub
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ ReadOnly Property Adapter() As System~dulla^@204~ nt.SqlDataAdapter
            Get
 ~dulla^@204~   If (Me._adapter Is Nothing) Then
 ~dulla^@204~       Me.InitAdapter
               ~dulla^@204~             Return Me._adapter
     ~dulla^@204~ t
        End Property
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Friend Property Connection() A~dulla^@204~ .SqlClient.SqlConnection
           ~dulla^@204~          If (Me._connection Is Nothin~dulla^@204~                 Me.InitConnection
  ~dulla^@204~  End If
                Return Me._c~dulla^@204~           End Get
            Set
 ~dulla^@204~   Me._connection = value
           ~dulla^@204~ (Me.Adapter.InsertCommand) Is Nothing~dulla^@204~                Me.Adapter.InsertComma~dulla^@204~  = value
                End If
   ~dulla^@204~ If (Not (Me.Adapter.DeleteCommand) Is~dulla^@204~ n
                    Me.Adapter.Del~dulla^@204~ nnection = value
                End~dulla^@204~         If (Not (Me.Adapter.UpdateCom~dulla^@204~ ing) Then
                    Me.Ada~dulla^@204~ mmand.Connection = value
           ~dulla^@204~                 Dim i As Integer = 0~dulla^@204~     Do While (i < Me.CommandCollectio~dulla^@204~                   If (Not (Me.Command~dulla^@204~ ) Is Nothing) Then
                 ~dulla^@204~ Me.CommandCollection(i),System.Data.S~dulla^@204~ ommand).Connection = value
         ~dulla^@204~ d If
                    i = (i + 1)~dulla^@204~      Loop
            End Set
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ Only Property CommandCollection() As ~dulla^@204~ qlClient.SqlCommand()
            Ge~dulla^@204~       If (Me._commandCollection Is No~dulla^@204~                     Me.InitCommandCol~dulla^@204~             End If
                R~dulla^@204~ mandCollection
            End Get
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ operty ClearBeforeFill() As Boolean
~dulla^@204~ et
                Return Me._clearB~dulla^@204~           End Get
            Set
 ~dulla^@204~   Me._clearBeforeFill = value
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Private Sub InitAdapter()
    ~dulla^@204~ dapter = New System.Data.SqlClient.Sq~dulla^@204~ 
            Dim tableMapping As Syst~dulla^@204~ n.DataTableMapping = New System.Data.~dulla^@204~ bleMapping
            tableMapping.~dulla^@204~  "Table"
            tableMapping.Da~dulla^@204~ "Supplier"
            tableMapping.~dulla^@204~ s.Add("SupplierID", "SupplierID")
  ~dulla^@204~ leMapping.ColumnMappings.Add("Supplie~dulla^@204~ lierName")
            tableMapping.~dulla^@204~ s.Add("Address", "Address")
        ~dulla^@204~ ing.ColumnMappings.Add("City", "City"~dulla^@204~   tableMapping.ColumnMappings.Add("Co~dulla^@204~ try")
            tableMapping.Colum~dulla^@204~ ("Phone", "Phone")
            table~dulla^@204~ nMappings.Add("Fax", "Fax")
        ~dulla^@204~ ing.ColumnMappings.Add("PostalAddress~dulla^@204~ ress")
            tableMapping.Colu~dulla^@204~ d("Website", "Website")
            ~dulla^@204~ ColumnMappings.Add("Email", "Email")~dulla^@204~ Me._adapter.TableMappings.Add(tableMa~dulla^@204~        Me._adapter.DeleteCommand = Ne~dulla^@204~ .SqlClient.SqlCommand
            Me~dulla^@204~ eteCommand.Connection = Me.Connection~dulla^@204~  Me._adapter.DeleteCommand.CommandTex~dulla^@204~ ROM [dbo].[Supplier] WHERE (([Supplie~dulla^@204~ nal_SupplierID) AND ([S"& _ 
       ~dulla^@204~ lierName] = @Original_SupplierName) A~dulla^@204~ Address = 1 AND [Address] I"& _ 
   ~dulla^@204~ "S NULL) OR ([Address] = @Original_Ad~dulla^@204~ (@IsNull_City = 1 AND [City] IS"& _ ~dulla^@204~     " NULL) OR ([City] = @Original_Ci~dulla^@204~ sNull_Country = 1 AND [Country] IS "&~dulla^@204~         "NULL) OR ([Country] = @Origi~dulla^@204~  AND ((@IsNull_Phone = 1 AND [Phone] ~dulla^@204~             " NULL) OR ([Phone] = @Or~dulla^@204~ ) AND ((@IsNull_Fax = 1 AND [Fax] IS ~dulla^@204~                 "OR ([Fax] = @Origina~dulla^@204~ (@IsNull_PostalAddress = 1 AND [Posta~dulla^@204~ _ 
                "IS NULL) OR ([Po~dulla^@204~ = @Original_PostalAddress)) AND ((@Is~dulla^@204~ ="& _ 
                " 1 AND [Webs~dulla^@204~  OR ([Website] = @Original_Website)) ~dulla^@204~ _Emai"& _ 
                "l = 1 AN~dulla^@204~ NULL) OR ([Email] = @Original_Email))~dulla^@204~    Me._adapter.DeleteCommand.CommandT~dulla^@204~ Data.CommandType.Text
            Me~dulla^@204~ eteCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@Original_SupplierID"~dulla^@204~ .SqlDbType.NVarChar, 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "SupplierID", Syste~dulla^@204~ wVersion.Original, false, Nothing, ""~dulla^@204~            Me._adapter.DeleteCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ l_SupplierName", System.Data.SqlDbTyp~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ ierName", System.Data.DataRowVersion.~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .DeleteCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@IsNull_Address",~dulla^@204~ SqlDbType.Int, 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "Address", System.Data.Da~dulla^@204~ Original, true, Nothing, "", "", ""))~dulla^@204~  Me._adapter.DeleteCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Orig~dulla^@204~ , System.Data.SqlDbType.[Char], 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "Address~dulla^@204~ a.DataRowVersion.Original, false, Not~dulla^@204~  ""))
            Me._adapter.Delete~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @IsNull_City", System.Data.SqlDbType.~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ tem.Data.DataRowVersion.Original, tru~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Original_City", System.Data.Sq~dulla^@204~ ], 0, System.Data.ParameterDirection.~dulla^@204~ "City", System.Data.DataRowVersion.Or~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ eleteCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@IsNull_Country", S~dulla^@204~ lDbType.Int, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "Country", System.Data.Data~dulla^@204~ iginal, true, Nothing, "", "", ""))
~dulla^@204~ e._adapter.DeleteCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@Origin~dulla^@204~ System.Data.SqlDbType.[Char], 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "Country",~dulla^@204~ DataRowVersion.Original, false, Nothi~dulla^@204~ "))
            Me._adapter.DeleteCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ sNull_Phone", System.Data.SqlDbType.I~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ tem.Data.DataRowVersion.Original, tru~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Original_Phone", System.Data.S~dulla^@204~ r], 0, System.Data.ParameterDirection~dulla^@204~  "Phone", System.Data.DataRowVersion.~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .DeleteCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@IsNull_Fax", Sys~dulla^@204~ bType.Int, 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "Fax", System.Data.DataRowVer~dulla^@204~ , true, Nothing, "", "", ""))
      ~dulla^@204~ pter.DeleteCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@Original_Fax~dulla^@204~ a.SqlDbType.[Char], 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "Fax", System.Data.D~dulla^@204~ .Original, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.DeleteCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Is~dulla^@204~ dress", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, ~dulla^@204~ ress", System.Data.DataRowVersion.Ori~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ eteCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@Original_PostalAddre~dulla^@204~ ata.SqlDbType.[Char], 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "PostalAddress", S~dulla^@204~ taRowVersion.Original, false, Nothing~dulla^@204~ )
            Me._adapter.DeleteComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ull_Website", System.Data.SqlDbType.I~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ ystem.Data.DataRowVersion.Original, t~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Original_Website", System.Da~dulla^@204~ [Char], 0, System.Data.ParameterDirec~dulla^@204~ , 0, "Website", System.Data.DataRowVe~dulla^@204~ l, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.DeleteCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@IsNull_Ema~dulla^@204~ ata.SqlDbType.Int, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "Email", System.Data.~dulla^@204~ n.Original, true, Nothing, "", "", ""~dulla^@204~    Me._adapter.DeleteCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Or~dulla^@204~ , System.Data.SqlDbType.[Char], 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "Email",~dulla^@204~ DataRowVersion.Original, false, Nothi~dulla^@204~ "))
            Me._adapter.InsertCo~dulla^@204~ ystem.Data.SqlClient.SqlCommand
    ~dulla^@204~ dapter.InsertCommand.Connection = Me.~dulla^@204~            Me._adapter.InsertCommand.~dulla^@204~  "INSERT INTO [dbo].[Supplier] ([Supp~dulla^@204~ plierName], [Address], [City], [C"& _~dulla^@204~       "ountry], [Phone], [Fax], [Post~dulla^@204~ Website], [Email]) VALUES (@SupplierI~dulla^@204~           "D, @SupplierName, @Address~dulla^@204~ ntry, @Phone, @Fax, @PostalAddress, @~dulla^@204~               "ite, @Email);"&Global.~dulla^@204~ ualBasic.ChrW(13)&Global.Microsoft.Vi~dulla^@204~ W(10)&"SELECT SupplierID, SupplierNam~dulla^@204~ ity, Country, Phone, F"& _ 
        ~dulla^@204~ PostalAddress, Website, Email FROM Su~dulla^@204~ (SupplierID = @SupplierID)"& _ 
    ~dulla^@204~ "
            Me._adapter.InsertComm~dulla^@204~ pe = System.Data.CommandType.Text
  ~dulla^@204~ _adapter.InsertCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@Supplier~dulla^@204~ ata.SqlDbType.NVarChar, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "SupplierID", Sy~dulla^@204~ aRowVersion.Current, false, Nothing, ~dulla^@204~ 
            Me._adapter.InsertComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ ierName", System.Data.SqlDbType.[Char~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ ", System.Data.DataRowVersion.Current~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@Address", System.Data.Sq~dulla^@204~ ], 0, System.Data.ParameterDirection.~dulla^@204~ "Address", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .InsertCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@City", System.Da~dulla^@204~ [Char], 0, System.Data.ParameterDirec~dulla^@204~ , 0, "City", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.InsertCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Country", Syst~dulla^@204~ Type.[Char], 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "Country", System.Data.Data~dulla^@204~ rrent, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.InsertCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@Phone"~dulla^@204~ .SqlDbType.[Char], 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "Phone", System.Data.~dulla^@204~ n.Current, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.InsertCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Fa~dulla^@204~ ta.SqlDbType.[Char], 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "Fax", System.Data.~dulla^@204~ n.Current, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.InsertCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Po~dulla^@204~  System.Data.SqlDbType.[Char], 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "PostalAd~dulla^@204~ m.Data.DataRowVersion.Current, false,~dulla^@204~  "", ""))
            Me._adapter.In~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@Website", System.Data.SqlDbType.~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ ", System.Data.DataRowVersion.Current~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@Email", System.Data.SqlD~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ mail", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand = New System.Data.SqlClien~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ = Me.Connection
            Me._adap~dulla^@204~ mand.CommandText = "UPDATE [dbo].[Sup~dulla^@204~ upplierID] = @SupplierID, [SupplierNa~dulla^@204~ e"& _ 
                "rName, [Addr~dulla^@204~ ss, [City] = @City, [Country] = @Coun~dulla^@204~ = @Ph"& _ 
                "one, [Fa~dulla^@204~ ostalAddress] = @PostalAddress, [Webs~dulla^@204~ te, [Emai"& _ 
                "l] =~dulla^@204~  (([SupplierID] = @Original_SupplierI~dulla^@204~ lierName] = @"& _ 
                "~dulla^@204~ lierName) AND ((@IsNull_Address = 1 A~dulla^@204~ IS NULL) OR ([Add"& _ 
             ~dulla^@204~ Original_Address)) AND ((@IsNull_City~dulla^@204~ y] IS NULL) OR ([City"& _ 
         ~dulla^@204~ Original_City)) AND ((@IsNull_Country~dulla^@204~ ntry] IS NULL) OR ([Count"& _ 
     ~dulla^@204~ y] = @Original_Country)) AND ((@IsNul~dulla^@204~ ND [Phone] IS NULL) OR ([Phon"& _ 
 ~dulla^@204~   "e] = @Original_Phone)) AND ((@IsNu~dulla^@204~ D [Fax] IS NULL) OR ([Fax] = @Ori"& _~dulla^@204~       "ginal_Fax)) AND ((@IsNull_Post~dulla^@204~  AND [PostalAddress] IS NULL) OR ([Po~dulla^@204~           "stalAddress] = @Original_P~dulla^@204~ ) AND ((@IsNull_Website = 1 AND [Webs~dulla^@204~               " IS NULL) OR ([Website~dulla^@204~ _Website)) AND ((@IsNull_Email = 1 AN~dulla^@204~ 
                "] IS NULL) OR ([Em~dulla^@204~ nal_Email)));"&Global.Microsoft.Visua~dulla^@204~ 3)&Global.Microsoft.VisualBasic.ChrW(~dulla^@204~ upplierID, SupplierName, A"& _ 
    ~dulla^@204~ ddress, City, Country, Phone, Fax, Po~dulla^@204~ Website, Email FROM Supplier W"& _ 
~dulla^@204~    "HERE (SupplierID = @SupplierID)"~dulla^@204~ Me._adapter.UpdateCommand.CommandType~dulla^@204~ a.CommandType.Text
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@SupplierID", System.Dat~dulla^@204~ VarChar, 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "SupplierID", System.Data.DataR~dulla^@204~ rent, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.UpdateCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Supplie~dulla^@204~ m.Data.SqlDbType.[Char], 0, System.Da~dulla^@204~ irection.Input, 0, 0, "SupplierName",~dulla^@204~ DataRowVersion.Current, false, Nothin~dulla^@204~ ))
            Me._adapter.UpdateCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ dress", System.Data.SqlDbType.[Char],~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "A~dulla^@204~ em.Data.DataRowVersion.Current, false~dulla^@204~ , "", ""))
            Me._adapter.U~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@City", System.Data.SqlDbType.[C~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ stem.Data.DataRowVersion.Current, fal~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@Country", System.Data.SqlDbTy~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ try", System.Data.DataRowVersion.Curr~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@Phone", System.Data.SqlDbType.[Char], 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "Phone", System.Data.DataRow~dulla^@204~ nt, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.UpdateCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Fax", Sys~dulla^@204~ bType.[Char], 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "Fax", System.Data.DataRow~dulla^@204~ nt, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.UpdateCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@PostalAdd~dulla^@204~ .Data.SqlDbType.[Char], 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "PostalAddress",~dulla^@204~ DataRowVersion.Current, false, Nothin~dulla^@204~ ))
            Me._adapter.UpdateCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ bsite", System.Data.SqlDbType.[Char],~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "W~dulla^@204~ em.Data.DataRowVersion.Current, false~dulla^@204~ , "", ""))
            Me._adapter.U~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@Email", System.Data.SqlDbType.[~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ System.Data.DataRowVersion.Current, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@Original_SupplierID", Syste~dulla^@204~ ype.NVarChar, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "SupplierID", System.Data.~dulla^@204~ n.Original, false, Nothing, "", "", "~dulla^@204~     Me._adapter.UpdateCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@O~dulla^@204~ ierName", System.Data.SqlDbType.[Char~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@IsNull_Address", System~dulla^@204~ pe.Int, 0, System.Data.ParameterDirec~dulla^@204~ , 0, "Address", System.Data.DataRowVe~dulla^@204~ l, true, Nothing, "", "", ""))
     ~dulla^@204~ apter.UpdateCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@Original_Ad~dulla^@204~ m.Data.SqlDbType.[Char], 0, System.Da~dulla^@204~ irection.Input, 0, 0, "Address", Syst~dulla^@204~ owVersion.Original, false, Nothing, "~dulla^@204~             Me._adapter.UpdateCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ _City", System.Data.SqlDbType.Int, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "City~dulla^@204~ a.DataRowVersion.Original, true, Noth~dulla^@204~ ""))
            Me._adapter.UpdateC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ Original_City", System.Data.SqlDbType~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@IsNull_Country", System.D~dulla^@204~ .Int, 0, System.Data.ParameterDirecti~dulla^@204~ 0, "Country", System.Data.DataRowVers~dulla^@204~  true, Nothing, "", "", ""))
       ~dulla^@204~ ter.UpdateCommand.Parameters.Add(New ~dulla^@204~ qlClient.SqlParameter("@Original_Coun~dulla^@204~ Data.SqlDbType.[Char], 0, System.Data~dulla^@204~ ection.Input, 0, 0, "Country", System~dulla^@204~ Version.Original, false, Nothing, "",~dulla^@204~           Me._adapter.UpdateCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~ hone", System.Data.SqlDbType.Int, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Phone~dulla^@204~ a.DataRowVersion.Original, true, Noth~dulla^@204~ ""))
            Me._adapter.UpdateC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ Original_Phone", System.Data.SqlDbTyp~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@IsNull_Fax", System.Dat~dulla^@204~ nt, 0, System.Data.ParameterDirection~dulla^@204~  "Fax", System.Data.DataRowVersion.Or~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ dateCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@Original_Fax", Syst~dulla^@204~ Type.[Char], 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "Fax", System.Data.DataRowV~dulla^@204~ al, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.UpdateCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@IsNull_Po~dulla^@204~  System.Data.SqlDbType.Int, 0, System~dulla^@204~ erDirection.Input, 0, 0, "PostalAddre~dulla^@204~ ata.DataRowVersion.Original, true, No~dulla^@204~ , ""))
            Me._adapter.Updat~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@Original_PostalAddress", System.Dat~dulla^@204~ Char], 0, System.Data.ParameterDirect~dulla^@204~  0, "PostalAddress", System.Data.Data~dulla^@204~ iginal, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.UpdateCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@IsNul~dulla^@204~ ystem.Data.SqlDbType.Int, 0, System.D~dulla^@204~ Direction.Input, 0, 0, "Website", Sys~dulla^@204~ RowVersion.Original, true, Nothing, "~dulla^@204~             Me._adapter.UpdateCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ al_Website", System.Data.SqlDbType.[C~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@IsNull_Email", System.Dat~dulla^@204~ nt, 0, System.Data.ParameterDirection~dulla^@204~  "Email", System.Data.DataRowVersion.~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ UpdateCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@Original_Email", ~dulla^@204~ qlDbType.[Char], 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "Email", System.Data.Da~dulla^@204~ Original, false, Nothing, "", "", "")~dulla^@204~ d Sub
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~  InitConnection()
            Me._co~dulla^@204~ w System.Data.SqlClient.SqlConnection~dulla^@204~  Me._connection.ConnectionString = Gl~dulla^@204~ yControlSystem.My.MySettings.Default.~dulla^@204~ onnection
        End Sub
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Private Sub InitCommandColl~dulla^@204~          Me._commandCollection = New ~dulla^@204~ qlClient.SqlCommand(0) {}
          ~dulla^@204~ Collection(0) = New System.Data.SqlCl~dulla^@204~ nd
            Me._commandCollection~dulla^@204~ n = Me.Connection
            Me._co~dulla^@204~ on(0).CommandText = "SELECT SupplierI~dulla^@204~ me, Address, City, Country, Phone, Fa~dulla^@204~ es"& _ 
                "s, Website,~dulla^@204~ bo.Supplier"
            Me._command~dulla^@204~ .CommandType = System.Data.CommandTyp~dulla^@204~    End Sub
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute(),  _
 ~dulla^@204~ m.ComponentModel.Design.HelpKeywordAt~dulla^@204~ ata.TableAdapter"),  _
         Syst~dulla^@204~ odel.DataObjectMethodAttribute(System~dulla^@204~ el.DataObjectMethodType.Fill, true)> ~dulla^@204~ ublic Overloads Overridable Function ~dulla^@204~ taTable As InventoryControlSystemData~dulla^@204~ DataTable) As Integer
            Me~dulla^@204~ ctCommand = Me.CommandCollection(0)
~dulla^@204~ f (Me.ClearBeforeFill = true) Then
 ~dulla^@204~   dataTable.Clear
            End If~dulla^@204~  Dim returnValue As Integer = Me.Adap~dulla^@204~ Table)
            Return returnValu~dulla^@204~ d Function
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute(),  _
 ~dulla^@204~ m.ComponentModel.Design.HelpKeywordAt~dulla^@204~ ata.TableAdapter"),  _
         Syst~dulla^@204~ odel.DataObjectMethodAttribute(System~dulla^@204~ el.DataObjectMethodType.[Select], tru~dulla^@204~    Public Overloads Overridable Funct~dulla^@204~  As InventoryControlSystemDataSet3.Su~dulla^@204~ le
            Me.Adapter.SelectComm~dulla^@204~ andCollection(0)
            Dim dat~dulla^@204~ entoryControlSystemDataSet3.SupplierD~dulla^@204~ w InventoryControlSystemDataSet3.SupplierDataTable
            Me.Adapter.Fill~dulla^@204~             Return dataTable
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute(),  _
         Sy~dulla^@204~ tModel.Design.HelpKeywordAttribute("v~dulla^@204~ dapter")>  _
        Public Overload~dulla^@204~  Function Update(ByVal dataTable As I~dulla^@204~ olSystemDataSet3.SupplierDataTable) A~dulla^@204~           Return Me.Adapter.Update(da~dulla^@204~      End Function
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~   System.ComponentModel.Design.HelpKe~dulla^@204~ e("vs.data.TableAdapter")>  _
      ~dulla^@204~ loads Overridable Function Update(ByV~dulla^@204~  InventoryControlSystemDataSet3) As I~dulla^@204~        Return Me.Adapter.Update(dataS~dulla^@204~ ")
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~          System.ComponentModel.Design~dulla^@204~ ttribute("vs.data.TableAdapter")>  _~dulla^@204~ ic Overloads Overridable Function Upd~dulla^@204~ aRow As System.Data.DataRow) As Integ~dulla^@204~    Return Me.Adapter.Update(New Syste~dulla^@204~ w() {dataRow})
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute(),  _
         System.Component~dulla^@204~ HelpKeywordAttribute("vs.data.TableAd~dulla^@204~         Public Overloads Overridable ~dulla^@204~ te(ByVal dataRows() As System.Data.Da~dulla^@204~ eger
            Return Me.Adapter.U~dulla^@204~ s)
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~          System.ComponentModel.Design~dulla^@204~ ttribute("vs.data.TableAdapter"),  _~dulla^@204~ tem.ComponentModel.DataObjectMethodAt~dulla^@204~ m.ComponentModel.DataObjectMethodType~dulla^@204~ )>  _
        Public Overloads Overr~dulla^@204~ on Delete(ByVal Original_SupplierID A~dulla^@204~ al Original_SupplierName As String, B~dulla^@204~ _Address As String, ByVal Original_Ci~dulla^@204~  ByVal Original_Country As String, By~dulla^@204~ Phone As String, ByVal Original_Fax A~dulla^@204~ al Original_PostalAddress As String, ~dulla^@204~ l_Website As String, ByVal Original_E~dulla^@204~ g) As Integer
            If (Origin~dulla^@204~  Is Nothing) Then
                Th~dulla^@204~ m.ArgumentNullException("Original_Sup~dulla^@204~           Else
                Me.Ad~dulla^@204~ ommand.Parameters(0).Value = CType(Or~dulla^@204~ erID,String)
            End If
   ~dulla^@204~ Original_SupplierName Is Nothing) The~dulla^@204~       Throw New System.ArgumentNullEx~dulla^@204~ inal_SupplierName")
            Else~dulla^@204~      Me.Adapter.DeleteCommand.Paramet~dulla^@204~ = CType(Original_SupplierName,String)~dulla^@204~  End If
            If (Original_Add~dulla^@204~ ng) Then
                Me.Adapter.~dulla^@204~ .Parameters(2).Value = CType(1,Object~dulla^@204~       Me.Adapter.DeleteCommand.Parame~dulla^@204~  = System.DBNull.Value
            E~dulla^@204~         Me.Adapter.DeleteCommand.Para~dulla^@204~ ue = CType(0,Object)
               ~dulla^@204~ eleteCommand.Parameters(3).Value = CT~dulla^@204~ Address,String)
            End If
~dulla^@204~ f (Original_City Is Nothing) Then
  ~dulla^@204~  Me.Adapter.DeleteCommand.Parameters(~dulla^@204~ ype(1,Object)
                Me.Ada~dulla^@204~ mmand.Parameters(5).Value = System.DB~dulla^@204~            Else
                Me.A~dulla^@204~ Command.Parameters(4).Value = CType(0~dulla^@204~              Me.Adapter.DeleteCommand~dulla^@204~ ).Value = CType(Original_City,String)~dulla^@204~  End If
            If (Original_Cou~dulla^@204~ ng) Then
                Me.Adapter.~dulla^@204~ .Parameters(6).Value = CType(1,Object~dulla^@204~       Me.Adapter.DeleteCommand.Parame~dulla^@204~  = System.DBNull.Value
            E~dulla^@204~         Me.Adapter.DeleteCommand.Para~dulla^@204~ ue = CType(0,Object)
               ~dulla^@204~ eleteCommand.Parameters(7).Value = CT~dulla^@204~ Country,String)
            End If
~dulla^@204~ f (Original_Phone Is Nothing) Then
 ~dulla^@204~   Me.Adapter.DeleteCommand.Parameters~dulla^@204~ Type(1,Object)
                Me.Ad~dulla^@204~ ommand.Parameters(9).Value = System.D~dulla^@204~             Else
                Me.~dulla^@204~ eCommand.Parameters(8).Value = CType(~dulla^@204~               Me.Adapter.DeleteComman~dulla^@204~ 9).Value = CType(Original_Phone,Strin~dulla^@204~    End If
            If (Original_F~dulla^@204~ ) Then
                Me.Adapter.De~dulla^@204~ arameters(10).Value = CType(1,Object)~dulla^@204~      Me.Adapter.DeleteCommand.Paramet~dulla^@204~  = System.DBNull.Value
            E~dulla^@204~         Me.Adapter.DeleteCommand.Para~dulla^@204~ lue = CType(0,Object)
              ~dulla^@204~ DeleteCommand.Parameters(11).Value = ~dulla^@204~ l_Fax,String)
            End If
  ~dulla^@204~ (Original_PostalAddress Is Nothing) T~dulla^@204~         Me.Adapter.DeleteCommand.Para~dulla^@204~ lue = CType(1,Object)
              ~dulla^@204~ DeleteCommand.Parameters(13).Value = ~dulla^@204~ .Value
            Else
           ~dulla^@204~ er.DeleteCommand.Parameters(12).Value~dulla^@204~ ject)
                Me.Adapter.Del~dulla^@204~ rameters(13).Value = CType(Original_P~dulla^@204~ String)
            End If
        ~dulla^@204~ nal_Website Is Nothing) Then
       ~dulla^@204~ dapter.DeleteCommand.Parameters(14).V~dulla^@204~ 1,Object)
                Me.Adapter~dulla^@204~ d.Parameters(15).Value = System.DBNul~dulla^@204~         Else
                Me.Adap~dulla^@204~ mand.Parameters(14).Value = CType(0,O~dulla^@204~            Me.Adapter.DeleteCommand.P~dulla^@204~ .Value = CType(Original_Website,Strin~dulla^@204~    End If
            If (Original_E~dulla^@204~ ng) Then
                Me.Adapter.~dulla^@204~ .Parameters(16).Value = CType(1,Objec~dulla^@204~        Me.Adapter.DeleteCommand.Param~dulla^@204~ ue = System.DBNull.Value
           ~dulla^@204~           Me.Adapter.DeleteCommand.Pa~dulla^@204~ Value = CType(0,Object)
            ~dulla^@204~ r.DeleteCommand.Parameters(17).Value ~dulla^@204~ nal_Email,String)
            End If~dulla^@204~  Dim previousConnectionState As Syste~dulla^@204~ tionState = Me.Adapter.DeleteCommand.~dulla^@204~ ate
            If ((Me.Adapter.Dele~dulla^@204~ nection.State And System.Data.Connect~dulla^@204~ )  _
                        <> Syst~dulla^@204~ ctionState.Open) Then
              ~dulla^@204~ DeleteCommand.Connection.Open
      ~dulla^@204~ 
            Try 
                Di~dulla^@204~  As Integer = Me.Adapter.DeleteComman~dulla^@204~ uery
                Return returnVa~dulla^@204~     Finally
                If (prev~dulla^@204~ nState = System.Data.ConnectionState.~dulla^@204~ 
                    Me.Adapter.Delet~dulla^@204~ ection.Close
                End If~dulla^@204~ End Try
        End Function
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
         System.ComponentModel.D~dulla^@204~ wordAttribute("vs.data.TableAdapter")~dulla^@204~   System.ComponentModel.DataObjectMet~dulla^@204~ System.ComponentModel.DataObjectMetho~dulla^@204~  true)>  _
        Public Overloads ~dulla^@204~ unction Insert(ByVal SupplierID As St~dulla^@204~ upplierName As String, ByVal Address ~dulla^@204~ Val City As String, ByVal Country As ~dulla^@204~  Phone As String, ByVal Fax As String~dulla^@204~ lAddress As String, ByVal Website As ~dulla^@204~  Email As String) As Integer
       ~dulla^@204~ lierID Is Nothing) Then
            ~dulla^@204~  System.ArgumentNullException("Suppli~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(0).Value = CType(Suppl~dulla^@204~ 
            End If
            If ~dulla^@204~  Is Nothing) Then
                Th~dulla^@204~ m.ArgumentNullException("SupplierName~dulla^@204~    Else
                Me.Adapter.I~dulla^@204~ Parameters(1).Value = CType(SupplierN~dulla^@204~             End If
            If (A~dulla^@204~ hing) Then
                Me.Adapte~dulla^@204~ nd.Parameters(2).Value = System.DBNul~dulla^@204~         Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CT~dulla^@204~ tring)
            End If
         ~dulla^@204~ s Nothing) Then
                Me.A~dulla^@204~ Command.Parameters(3).Value = System.~dulla^@204~ 
            Else
                Me~dulla^@204~ rtCommand.Parameters(3).Value = CType~dulla^@204~ 
            End If
            If ~dulla^@204~ othing) Then
                Me.Adap~dulla^@204~ mand.Parameters(4).Value = System.DBN~dulla^@204~           Else
                Me.Ad~dulla^@204~ ommand.Parameters(4).Value = CType(Co~dulla^@204~ 
            End If
            If ~dulla^@204~ hing) Then
                Me.Adapte~dulla^@204~ nd.Parameters(5).Value = System.DBNul~dulla^@204~         Else
                Me.Adap~dulla^@204~ mand.Parameters(5).Value = CType(Phon~dulla^@204~           End If
            If (Fax~dulla^@204~ Then
                Me.Adapter.Inse~dulla^@204~ ameters(6).Value = System.DBNull.Valu~dulla^@204~   Else
                Me.Adapter.In~dulla^@204~ arameters(6).Value = CType(Fax,String~dulla^@204~   End If
            If (PostalAddre~dulla^@204~ ) Then
                Me.Adapter.In~dulla^@204~ arameters(7).Value = System.DBNull.Va~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(7).Value = CType(PostalAd~dulla^@204~ 
            End If
            If ~dulla^@204~ othing) Then
                Me.Adap~dulla^@204~ mand.Parameters(8).Value = System.DBN~dulla^@204~           Else
                Me.Ad~dulla^@204~ ommand.Parameters(8).Value = CType(We~dulla^@204~ 
            End If
            If ~dulla^@204~ hing) Then
                Me.Adapte~dulla^@204~ nd.Parameters(9).Value = System.DBNul~dulla^@204~         Else
                Me.Adap~dulla^@204~ mand.Parameters(9).Value = CType(Emai~dulla^@204~           End If
            Dim pre~dulla^@204~ onState As System.Data.ConnectionStat~dulla^@204~ r.InsertCommand.Connection.State
   ~dulla^@204~ (Me.Adapter.InsertCommand.Connection.~dulla^@204~ tem.Data.ConnectionState.Open)  _
  ~dulla^@204~          <> System.Data.ConnectionSta~dulla^@204~ 
                Me.Adapter.InsertCo~dulla^@204~ ion.Open
            End If
       ~dulla^@204~               Dim returnValue As Inte~dulla^@204~ ter.InsertCommand.ExecuteNonQuery
  ~dulla^@204~  Return returnValue
            Fina~dulla^@204~         If (previousConnectionState =~dulla^@204~ ConnectionState.Closed) Then
       ~dulla^@204~ Me.Adapter.InsertCommand.Connection.C~dulla^@204~          End If
            End Try~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute(),  _
   ~dulla^@204~ ComponentModel.Design.HelpKeywordAttr~dulla^@204~ a.TableAdapter"),  _
         System~dulla^@204~ el.DataObjectMethodAttribute(System.C~dulla^@204~ .DataObjectMethodType.Update, true)> ~dulla^@204~ ublic Overloads Overridable Function ~dulla^@204~                   ByVal SupplierID As~dulla^@204~                     ByVal SupplierNam~dulla^@204~  _
                    ByVal Address~dulla^@204~ _
                    ByVal City As ~dulla^@204~                    ByVal Country As S~dulla^@204~                   ByVal Phone As Stri~dulla^@204~                ByVal Fax As String,  ~dulla^@204~           ByVal PostalAddress As Stri~dulla^@204~                ByVal Website As Strin~dulla^@204~               ByVal Email As String, ~dulla^@204~            ByVal Original_SupplierID ~dulla^@204~ 
                    ByVal Original_~dulla^@204~ As String,  _
                    By~dulla^@204~ Address As String,  _
              ~dulla^@204~ riginal_City As String,  _
         ~dulla^@204~ Val Original_Country As String,  _
 ~dulla^@204~       ByVal Original_Phone As String,~dulla^@204~             ByVal Original_Fax As Str~dulla^@204~                 ByVal Original_Postal~dulla^@204~ ring,  _
                    ByVal O~dulla^@204~ te As String,  _
                   ~dulla^@204~ al_Email As String) As Integer
     ~dulla^@204~ pplierID Is Nothing) Then
          ~dulla^@204~ ew System.ArgumentNullException("Supp~dulla^@204~          Else
                Me.Ada~dulla^@204~ mmand.Parameters(0).Value = CType(Sup~dulla^@204~ g)
            End If
            I~dulla^@204~ me Is Nothing) Then
                ~dulla^@204~ tem.ArgumentNullException("SupplierNa~dulla^@204~      Else
                Me.Adapter~dulla^@204~ d.Parameters(1).Value = CType(Supplie~dulla^@204~ 
            End If
            If ~dulla^@204~ othing) Then
                Me.Adap~dulla^@204~ mand.Parameters(2).Value = System.DBN~dulla^@204~           Else
                Me.Ad~dulla^@204~ ommand.Parameters(2).Value = CType(Ad~dulla^@204~ 
            End If
            If ~dulla^@204~ ing) Then
                Me.Adapter~dulla^@204~ d.Parameters(3).Value = System.DBNull~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(3).Value = CType(City,~dulla^@204~         End If
            If (Count~dulla^@204~ ) Then
                Me.Adapter.Up~dulla^@204~ arameters(4).Value = System.DBNull.Va~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(4).Value = CType(Country,~dulla^@204~         End If
            If (Phone~dulla^@204~ Then
                Me.Adapter.Upda~dulla^@204~ ameters(5).Value = System.DBNull.Valu~dulla^@204~   Else
                Me.Adapter.Up~dulla^@204~ arameters(5).Value = CType(Phone,Stri~dulla^@204~     End If
            If (Fax Is No~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(6).Value = System.DBNull.Value
   ~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(6).Value = CType(Fax,String)
   ~dulla^@204~ If
            If (PostalAddress Is ~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(7).Value = System.DBNull.Value
 ~dulla^@204~ se
                Me.Adapter.Update~dulla^@204~ eters(7).Value = CType(PostalAddress,~dulla^@204~         End If
            If (Websi~dulla^@204~ ) Then
                Me.Adapter.Up~dulla^@204~ arameters(8).Value = System.DBNull.Va~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(8).Value = CType(Website,~dulla^@204~         End If
            If (Email~dulla^@204~ Then
                Me.Adapter.Upda~dulla^@204~ ameters(9).Value = System.DBNull.Valu~dulla^@204~   Else
                Me.Adapter.Up~dulla^@204~ arameters(9).Value = CType(Email,Stri~dulla^@204~     End If
            If (Original_~dulla^@204~  Nothing) Then
                Throw~dulla^@204~ rgumentNullException("Original_Suppli~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(10).Value = CType(Orig~dulla^@204~ ID,String)
            End If
     ~dulla^@204~ iginal_SupplierName Is Nothing) Then~dulla^@204~     Throw New System.ArgumentNullExce~dulla^@204~ al_SupplierName")
            Else
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~  CType(Original_SupplierName,String)~dulla^@204~ End If
            If (Original_Addr~dulla^@204~ g) Then
                Me.Adapter.U~dulla^@204~ Parameters(12).Value = CType(1,Object~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~ e = System.DBNull.Value
            ~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ alue = CType(0,Object)
             ~dulla^@204~ .UpdateCommand.Parameters(13).Value =~dulla^@204~ al_Address,String)
            End I~dulla^@204~   If (Original_City Is Nothing) Then~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~ = CType(1,Object)
                Me~dulla^@204~ teCommand.Parameters(15).Value = Syst~dulla^@204~ ue
            Else
               ~dulla^@204~ pdateCommand.Parameters(14).Value = C~dulla^@204~ )
                Me.Adapter.UpdateC~dulla^@204~ ters(15).Value = CType(Original_City,~dulla^@204~         End If
            If (Origi~dulla^@204~ s Nothing) Then
                Me.A~dulla^@204~ Command.Parameters(16).Value = CType(~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 17).Value = System.DBNull.Value
    ~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parame~dulla^@204~ e = CType(Original_Country,String)
 ~dulla^@204~ d If
            If (Original_Phone ~dulla^@204~ hen
                Me.Adapter.Updat~dulla^@204~ meters(18).Value = CType(1,Object)
 ~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ System.DBNull.Value
            Else~dulla^@204~      Me.Adapter.UpdateCommand.Paramet~dulla^@204~  = CType(0,Object)
                M~dulla^@204~ ateCommand.Parameters(19).Value = CTy~dulla^@204~ hone,String)
            End If
   ~dulla^@204~ Original_Fax Is Nothing) Then
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(20).~dulla^@204~ (1,Object)
                Me.Adapte~dulla^@204~ nd.Parameters(21).Value = System.DBNu~dulla^@204~          Else
                Me.Ada~dulla^@204~ mmand.Parameters(20).Value = CType(0,~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ ).Value = CType(Original_Fax,String)~dulla^@204~ End If
            If (Original_Post~dulla^@204~ Nothing) Then
                Me.Ada~dulla^@204~ mmand.Parameters(22).Value = CType(1,~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ ).Value = System.DBNull.Value
      ~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ (22).Value = CType(0,Object)
       ~dulla^@204~ dapter.UpdateCommand.Parameters(23).V~dulla^@204~ Original_PostalAddress,String)
     ~dulla^@204~ 
            If (Original_Website Is~dulla^@204~ n
                Me.Adapter.UpdateC~dulla^@204~ ters(24).Value = CType(1,Object)
   ~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(2~dulla^@204~ stem.DBNull.Value
            Else
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~  CType(0,Object)
                Me.~dulla^@204~ eCommand.Parameters(25).Value = CType~dulla^@204~ site,String)
            End If
   ~dulla^@204~ Original_Email Is Nothing) Then
    ~dulla^@204~ e.Adapter.UpdateCommand.Parameters(26~dulla^@204~ pe(1,Object)
                Me.Adap~dulla^@204~ mand.Parameters(27).Value = System.DB~dulla^@204~            Else
                Me.A~dulla^@204~ Command.Parameters(26).Value = CType(~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 27).Value = CType(Original_Email,Stri~dulla^@204~     End If
            Dim previousC~dulla^@204~ e As System.Data.ConnectionState = Me~dulla^@204~ teCommand.Connection.State
         ~dulla^@204~ apter.UpdateCommand.Connection.State ~dulla^@204~ ta.ConnectionState.Open)  _
        ~dulla^@204~    <> System.Data.ConnectionState.Ope~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ en
            End If
            T~dulla^@204~         Dim returnValue As Integer = ~dulla^@204~ dateCommand.ExecuteNonQuery
        ~dulla^@204~ n returnValue
            Finally
 ~dulla^@204~   If (previousConnectionState = Syste~dulla^@204~ tionState.Closed) Then
             ~dulla^@204~ pter.UpdateCommand.Connection.Close
~dulla^@204~    End If
            End Try
     ~dulla^@204~ on
    End Class
    
    <System.~dulla^@204~ ler.GeneratedCodeAttribute("System.Da~dulla^@204~ edDataSetGenerator", "2.0.0.0"),  _
~dulla^@204~ omponentModel.DesignerCategoryAttribu~dulla^@204~ _
     System.ComponentModel.Toolbox~dulla^@204~ _
     System.ComponentModel.DataObj~dulla^@204~ true),  _
     System.ComponentModel~dulla^@204~ ibute("Microsoft.VSDesigner.DataSourc~dulla^@204~ eAdapterDesigner, Microsoft.VSDesigne~dulla^@204~    ", Version=8.0.0.0, Culture=neutra~dulla^@204~ oken=b03f5f7f11d50a3a"),  _
     Sys~dulla^@204~ Model.Design.HelpKeywordAttribute("vs~dulla^@204~ apter")>  _
    Partial Public Class~dulla^@204~ apter
        Inherits System.Compon~dulla^@204~ onent
        
        Private With~dulla^@204~ er As System.Data.SqlClient.SqlDataAd~dulla^@204~   
        Private _connection As Sy~dulla^@204~ Client.SqlConnection
        
     ~dulla^@204~ ommandCollection() As System.Data.Sql~dulla^@204~ mand
        
        Private _clea~dulla^@204~ s Boolean
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Sub New()
            MyBase.New
  ~dulla^@204~ ClearBeforeFill = true
        End S~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Private ReadOn~dulla^@204~ dapter() As System.Data.SqlClient.Sql~dulla^@204~             Get
                If (~dulla^@204~ s Nothing) Then
                    ~dulla^@204~ r
                End If
          ~dulla^@204~ Me._adapter
            End Get
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ rty Connection() As System.Data.SqlCl~dulla^@204~ ction
            Get
             ~dulla^@204~ nnection Is Nothing) Then
          ~dulla^@204~ InitConnection
                End I~dulla^@204~       Return Me._connection
        ~dulla^@204~             Set
                Me._~dulla^@204~ value
                If (Not (Me.Ad~dulla^@204~ ommand) Is Nothing) Then
           ~dulla^@204~ dapter.InsertCommand.Connection = val~dulla^@204~        End If
                If (No~dulla^@204~ .DeleteCommand) Is Nothing) Then
   ~dulla^@204~     Me.Adapter.DeleteCommand.Connecti~dulla^@204~                End If
              ~dulla^@204~ .Adapter.UpdateCommand) Is Nothing) T~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ value
                End If
      ~dulla^@204~  i As Integer = 0
                Do~dulla^@204~ e.CommandCollection.Length)
        ~dulla^@204~ f (Not (Me.CommandCollection(i)) Is N~dulla^@204~ 
                        CType(Me.Com~dulla^@204~ n(i),System.Data.SqlClient.SqlCommand~dulla^@204~ = value
                    End If
~dulla^@204~        i = (i + 1)
                L~dulla^@204~     End Set
        End Property
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Protected ReadOnly P~dulla^@204~ ndCollection() As System.Data.SqlClie~dulla^@204~ ()
            Get
                ~dulla^@204~ ndCollection Is Nothing) Then
      ~dulla^@204~  Me.InitCommandCollection
          ~dulla^@204~ 
                Return Me._commandCo~dulla^@204~          End Get
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Property~dulla^@204~ ill() As Boolean
            Get
  ~dulla^@204~  Return Me._clearBeforeFill
        ~dulla^@204~             Set
                Me._~dulla^@204~ ll = value
            End Set
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ nitAdapter()
            Me._adapter~dulla^@204~ .Data.SqlClient.SqlDataAdapter
     ~dulla^@204~ bleMapping As System.Data.Common.Data~dulla^@204~ = New System.Data.Common.DataTableMap~dulla^@204~      tableMapping.SourceTable = "Tabl~dulla^@204~    tableMapping.DataSetTable = "Users~dulla^@204~   tableMapping.ColumnMappings.Add("Us~dulla^@204~ rName")
            tableMapping.Col~dulla^@204~ dd("Password", "Password")
         ~dulla^@204~ r.TableMappings.Add(tableMapping)
  ~dulla^@204~ _adapter.InsertCommand = New System.D~dulla^@204~ .SqlCommand
            Me._adapter.~dulla^@204~ .Connection = Me.Connection
        ~dulla^@204~ er.InsertCommand.CommandText = "INSER~dulla^@204~ [Users] ([UserName], [Password]) VALU~dulla^@204~ , @Password)"
            Me._adapte~dulla^@204~ nd.CommandType = System.Data.CommandT~dulla^@204~          Me._adapter.InsertCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ , System.Data.SqlDbType.[Char], 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "UserNam~dulla^@204~ ta.DataRowVersion.Current, false, Not~dulla^@204~  ""))
            Me._adapter.Insert~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @Password", System.Data.SqlDbType.[Ch~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~  System.Data.DataRowVersion.Current, ~dulla^@204~ g, "", "", ""))
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Private Sub InitConne~dulla^@204~         Me._connection = New System.Data.SqlClient.SqlConnection
            M~dulla^@204~ .ConnectionString = Global.InventoryC~dulla^@204~ My.MySettings.Default.PurchaseInfoCon~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ te Sub InitCommandCollection()
     ~dulla^@204~ mmandCollection = New System.Data.Sql~dulla^@204~ mand(0) {}
            Me._commandCo~dulla^@204~  New System.Data.SqlClient.SqlCommand~dulla^@204~  Me._commandCollection(0).Connection ~dulla^@204~ on
            Me._commandCollection~dulla^@204~ xt = "SELECT UserName, Password FROM ~dulla^@204~            Me._commandCollection(0).C~dulla^@204~ System.Data.CommandType.Text
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute(),  _
         System.~dulla^@204~ l.Design.HelpKeywordAttribute("vs.dat~dulla^@204~ r"),  _
         System.ComponentMod~dulla^@204~ MethodAttribute(System.ComponentModel~dulla^@204~ thodType.Fill, true)>  _
        Pub~dulla^@204~  Overridable Function Fill(ByVal data~dulla^@204~ ntoryControlSystemDataSet3.UsersDataT~dulla^@204~ ger
            Me.Adapter.SelectCom~dulla^@204~ mandCollection(0)
            If (Me~dulla^@204~ ill = true) Then
                dat~dulla^@204~ 
            End If
            Dim ~dulla^@204~ s Integer = Me.Adapter.Fill(dataTable~dulla^@204~   Return returnValue
        End Fun~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute(),  _
         System.Com~dulla^@204~ esign.HelpKeywordAttribute("vs.data.T~dulla^@204~ ,  _
         System.ComponentModel.~dulla^@204~ hodAttribute(System.ComponentModel.Da~dulla^@204~ dType.[Select], true)>  _
        Pu~dulla^@204~ s Overridable Function GetData() As I~dulla^@204~ olSystemDataSet3.UsersDataTable
    ~dulla^@204~ apter.SelectCommand = Me.CommandColle~dulla^@204~          Dim dataTable As InventoryCo~dulla^@204~ taSet3.UsersDataTable = New Inventory~dulla^@204~ DataSet3.UsersDataTable
            ~dulla^@204~ ll(dataTable)
            Return dat~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute(), ~dulla^@204~ System.ComponentModel.Design.HelpKeyw~dulla^@204~ "vs.data.TableAdapter")>  _
        ~dulla^@204~ ads Overridable Function Update(ByVal~dulla^@204~  InventoryControlSystemDataSet3.Users~dulla^@204~  Integer
            Return Me.Adapt~dulla^@204~ aTable)
        End Function
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
         System.ComponentModel.D~dulla^@204~ wordAttribute("vs.data.TableAdapter")~dulla^@204~  Public Overloads Overridable Functio~dulla^@204~ l dataSet As InventoryControlSystemDa~dulla^@204~ teger
            Return Me.Adapter.~dulla^@204~ t, "Users")
        End Function
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e(),  _
         System.ComponentMod~dulla^@204~ pKeywordAttribute("vs.data.TableAdapt~dulla^@204~      Public Overloads Overridable Fun~dulla^@204~ ByVal dataRow As System.Data.DataRow)~dulla^@204~             Return Me.Adapter.Update(~dulla^@204~ ta.DataRow() {dataRow})
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute(),  _
         System.~dulla^@204~ l.Design.HelpKeywordAttribute("vs.dat~dulla^@204~ r")>  _
        Public Overloads Ove~dulla^@204~ tion Update(ByVal dataRows() As Syste~dulla^@204~ w) As Integer
            Return Me.~dulla^@204~ e(dataRows)
        End Function
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e(),  _
         System.ComponentMod~dulla^@204~ pKeywordAttribute("vs.data.TableAdapt~dulla^@204~       System.ComponentModel.DataObjec~dulla^@204~ ute(System.ComponentModel.DataObjectM~dulla^@204~ ert, true)>  _
        Public Overlo~dulla^@204~ le Function Insert(ByVal UserName As ~dulla^@204~  Password As String) As Integer
    ~dulla^@204~ serName Is Nothing) Then
           ~dulla^@204~ w System.ArgumentNullException("UserN~dulla^@204~       Else
                Me.Adapte~dulla^@204~ nd.Parameters(0).Value = CType(UserNa~dulla^@204~            End If
            If (Pa~dulla^@204~ hing) Then
                Throw New~dulla^@204~ entNullException("Password")
       ~dulla^@204~               Me.Adapter.InsertComman~dulla^@204~ 1).Value = CType(Password,String)
  ~dulla^@204~  If
            Dim previousConnecti~dulla^@204~ stem.Data.ConnectionState = Me.Adapte~dulla^@204~ nd.Connection.State
            If (~dulla^@204~ nsertCommand.Connection.State And Sys~dulla^@204~ ectionState.Open)  _
               ~dulla^@204~ ystem.Data.ConnectionState.Open) Then~dulla^@204~      Me.Adapter.InsertCommand.Connect~dulla^@204~          End If
            Try 
  ~dulla^@204~  Dim returnValue As Integer = Me.Adap~dulla^@204~ mand.ExecuteNonQuery
               ~dulla^@204~ nValue
            Finally
        ~dulla^@204~ reviousConnectionState = System.Data.~dulla^@204~ te.Closed) Then
                    ~dulla^@204~ sertCommand.Connection.Close
       ~dulla^@204~ If
            End Try
        End Function
    End Class
End Namespace
