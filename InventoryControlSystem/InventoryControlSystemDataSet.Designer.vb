'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.312
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("InventoryControlSystemDataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class InventoryControlSystemDataSet
    Inherits System.Data.DataSet
    
    Private tableCompanyInfo As CompanyInfoDataTable
    
    Private tableCustomer As CustomerDataTable
    
    Private tableInvoice As InvoiceDataTable
    
    Private tableOrder As OrderDataTable
    
    Private tableProductInfo As ProductInfoDataTable
    
    Private tableProducts As ProductsDataTable
    
    Private tableProductsAvialable As ProductsAvialableDataTable
    
    Private tablePurchase As PurchaseDataTable
    
    Private tablePurchaseInfo As PurchaseInfoDataTable
    
    Private tableSales As SalesDataTable
    
    Private tableSalesInfo As SalesInfoDataTable
    
    Private tableStockCard As StockCardDataTable
    
    Private tableStockCardDetail As StockCardDetailDataTable
    
    Private tableSupplier As SupplierDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CompanyInfo")) Is Nothing) Then
                MyBase.Tables.Add(New CompanyInfoDataTable(ds.Tables("CompanyInfo")))
            End If
            If (Not (ds.Tables("Customer")) Is Nothing) Then
                MyBase.Tables.Add(New CustomerDataTable(ds.Tables("Customer")))
            End If
            If (Not (ds.Tables("Invoice")) Is Nothing) Then
                MyBase.Tables.Add(New InvoiceDataTable(ds.Tables("Invoice")))
            End If
            If (Not (ds.Tables("Order")) Is Nothing) Then
                MyBase.Tables.Add(New OrderDataTable(ds.Tables("Order")))
            End If
            If (Not (ds.Tables("ProductInfo")) Is Nothing) Then
                MyBase.Tables.Add(New ProductInfoDataTable(ds.Tables("ProductInfo")))
            End If
            If (Not (ds.Tables("Products")) Is Nothing) Then
                MyBase.Tables.Add(New ProductsDataTable(ds.Tables("Products")))
            End If
            If (Not (ds.Tables("ProductsAvialable")) Is Nothing) Then
                MyBase.Tables.Add(New ProductsAvialableDataTable(ds.Tables("ProductsAvialable")))
            End If
            If (Not (ds.Tables("Purchase")) Is Nothing) Then
                MyBase.Tables.Add(New PurchaseDataTable(ds.Tables("Purchase")))
            End If
            If (Not (ds.Tables("PurchaseInfo")) Is Nothing) Then
                MyBase.Tables.Add(New PurchaseInfoDataTable(ds.Tables("PurchaseInfo")))
            End If
            If (Not (ds.Tables("Sales")) Is Nothing) Then
                MyBase.Tables.Add(New SalesDataTable(ds.Tables("Sales")))
            End If
            If (Not (ds.Tables("SalesInfo")) Is Nothing) Then
                MyBase.Tables.Add(New SalesInfoDataTable(ds.Tables("SalesInfo")))
            End If
            If (Not (ds.Tables("StockCard")) Is Nothing) Then
                MyBase.Tables.Add(New StockCardDataTable(ds.Tables("StockCard")))
            End If
            If (Not (ds.Tables("StockCardDetail")) Is Nothing) Then
                MyBase.Tables.Add(New StockCardDetailDataTable(ds.Tables("StockCardDetail")))
            End If
            If (Not (ds.Tables("Supplier")) Is Nothing) Then
                MyBase.Tables.Add(New SupplierDataTable(ds.Tables("Supplier")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CompanyInfo() As CompanyInfoDataTable
        Get
            Return Me.tableCompanyInfo
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Customer() As CustomerDataTable
        Get
            Return Me.tableCustomer
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Invoice() As InvoiceDataTable
        Get
            Return Me.tableInvoice
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Order() As OrderDataTable
        Get
            Return Me.tableOrder
        End Get
    End Property
    
    <Sy ~dulla^@204~ ~dulla^@204~ nUserCodeAttribute(),  _
     System~dulla^@204~ el.Browsable(false),  _
     System.~dulla^@204~ l.DesignerSerializationVisibility(Sys~dulla^@204~ Model.DesignerSerializationVisibility~dulla^@204~ 
    Public ReadOnly Property Produc~dulla^@204~ oductInfoDataTable
        Get
    ~dulla^@204~ n Me.tableProductInfo
        End Ge~dulla^@204~ operty
    
    <System.Diagnostics~dulla^@204~ serCodeAttribute(),  _
     System.C~dulla^@204~ .Browsable(false),  _
     System.Co~dulla^@204~ DesignerSerializationVisibility(Syste~dulla^@204~ del.DesignerSerializationVisibility.C~dulla^@204~     Public ReadOnly Property Products~dulla^@204~ sDataTable
        Get
            ~dulla^@204~ leProducts
        End Get
    End ~dulla^@204~  
    <System.Diagnostics.DebuggerNo~dulla^@204~ ibute(),  _
     System.ComponentMod~dulla^@204~ false),  _
     System.ComponentMode~dulla^@204~ ializationVisibility(System.Component~dulla^@204~ rSerializationVisibility.Content)>  _~dulla^@204~ ReadOnly Property ProductsAvialable()~dulla^@204~ vialableDataTable
        Get
     ~dulla^@204~  Me.tableProductsAvialable
        E~dulla^@204~ nd Property
    
    <System.Diagno~dulla^@204~ rNonUserCodeAttribute(),  _
     Sys~dulla^@204~ Model.Browsable(false),  _
     Syst~dulla^@204~ odel.DesignerSerializationVisibility(~dulla^@204~ entModel.DesignerSerializationVisibil~dulla^@204~   _
    Public ReadOnly Property Pur~dulla^@204~ rchaseDataTable
        Get
       ~dulla^@204~ e.tablePurchase
        End Get
   ~dulla^@204~ 
    
    <System.Diagnostics.Debug~dulla^@204~ eAttribute(),  _
     System.Compone~dulla^@204~ able(false),  _
     System.Componen~dulla^@204~ erSerializationVisibility(System.Comp~dulla^@204~ signerSerializationVisibility.Content~dulla^@204~ blic ReadOnly Property PurchaseInfo()~dulla^@204~ nfoDataTable
        Get
          ~dulla^@204~ ablePurchaseInfo
        End Get
  ~dulla^@204~ y
    
    <System.Diagnostics.Debu~dulla^@204~ deAttribute(),  _
     System.Compon~dulla^@204~ sable(false),  _
     System.Compone~dulla^@204~ nerSerializationVisibility(System.Com~dulla^@204~ esignerSerializationVisibility.Conten~dulla^@204~ ublic ReadOnly Property Sales() As Sa~dulla^@204~ 
        Get
            Return Me.t~dulla^@204~       End Get
    End Property
    ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~     System.ComponentModel.Browsable(f~dulla^@204~    System.ComponentModel.DesignerSeri~dulla^@204~ bility(System.ComponentModel.Designer~dulla^@204~ Visibility.Content)>  _
    Public R~dulla^@204~ rty SalesInfo() As SalesInfoDataTable~dulla^@204~ 
            Return Me.tableSalesInf~dulla^@204~ d Get
    End Property
    
    <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute(), ~dulla^@204~ em.ComponentModel.Browsable(false),  ~dulla^@204~ m.ComponentModel.DesignerSerializatio~dulla^@204~ ystem.ComponentModel.DesignerSerializ~dulla^@204~ ty.Content)>  _
    Public ReadOnly ~dulla^@204~ kCard() As StockCardDataTable
      ~dulla^@204~       Return Me.tableStockCard
     ~dulla^@204~    End Property
    
    <System.Di~dulla^@204~ uggerNonUserCodeAttribute(),  _
    ~dulla^@204~ nentModel.Browsable(false),  _
     ~dulla^@204~ entModel.DesignerSerializationVisibil~dulla^@204~ mponentModel.DesignerSerializationVis~dulla^@204~ nt)>  _
    Public ReadOnly Property~dulla^@204~ ail() As StockCardDetailDataTable
  ~dulla^@204~           Return Me.tableStockCardDet~dulla^@204~ End Get
    End Property
    
    ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~ stem.ComponentModel.Browsable(false),~dulla^@204~ tem.ComponentModel.DesignerSerializat~dulla^@204~ (System.ComponentModel.DesignerSerial~dulla^@204~ lity.Content)>  _
    Public ReadOnl~dulla^@204~ pplier() As SupplierDataTable
      ~dulla^@204~       Return Me.tableSupplier
      ~dulla^@204~   End Property
    
    <System.Dia~dulla^@204~ ggerNonUserCodeAttribute(),  _
     ~dulla^@204~ entModel.BrowsableAttribute(true),  _~dulla^@204~ .ComponentModel.DesignerSerialization~dulla^@204~ ribute(System.ComponentModel.Designer~dulla^@204~ Visibility.Visible)>  _
    Public O~dulla^@204~ erty SchemaSerializationMode() As Sys~dulla^@204~ maSerializationMode
        Get
   ~dulla^@204~ rn Me._schemaSerializationMode
     ~dulla^@204~        Set
            Me._schemaSer~dulla^@204~ e = value
        End Set
    End P~dulla^@204~ 
    <System.Diagnostics.DebuggerNon~dulla^@204~ bute(),  _
     System.ComponentMode~dulla^@204~ ializationVisibilityAttribute(System.~dulla^@204~ l.DesignerSerializationVisibility.Hid~dulla^@204~  Public Shadows ReadOnly Property Tab~dulla^@204~ em.Data.DataTableCollection
        ~dulla^@204~     Return MyBase.Tables
        End~dulla^@204~  Property
    
    <System.Diagnost~dulla^@204~ onUserCodeAttribute(),  _
     Syste~dulla^@204~ del.DesignerSerializationVisibilityAt~dulla^@204~ m.ComponentModel.DesignerSerializatio~dulla^@204~ idden)>  _
    Public Shadows ReadOn~dulla^@204~ elations() As System.Data.DataRelatio~dulla^@204~         Get
            Return MyBas~dulla^@204~         End Get
    End Property
  ~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
    Protected Overrides Sub Initiali~dulla^@204~ Set()
        Me.BeginInit
        ~dulla^@204~ 
        Me.EndInit
    End Sub
   ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~     Public Overrides Function Clone()~dulla^@204~ ta.DataSet
        Dim cln As Invent~dulla^@204~ temDataSet = CType(MyBase.Clone,Inven~dulla^@204~ stemDataSet)
        cln.InitVars
 ~dulla^@204~ hemaSerializationMode = Me.SchemaSeri~dulla^@204~ 
        Return cln
    End Functio~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
    Protected Overrides Functio~dulla^@204~ lizeTables() As Boolean
        Retu~dulla^@204~  End Function
    
    <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
    Pr~dulla^@204~ ides Function ShouldSerializeRelation~dulla^@204~ n
        Return false
    End Func~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
    Protected Overrides Sub ~dulla^@204~ izable(ByVal reader As System.Xml.Xml~dulla^@204~     If (Me.DetermineSchemaSerializati~dulla^@204~ ) = System.Data.SchemaSerializationMo~dulla^@204~ ema) Then
            Me.Reset
    ~dulla^@204~ s As System.Data.DataSet = New System~dulla^@204~ 
            ds.ReadXml(reader)
   ~dulla^@204~ Not (ds.Tables("CompanyInfo")) Is Not~dulla^@204~                MyBase.Tables.Add(New ~dulla^@204~ taTable(ds.Tables("CompanyInfo")))
 ~dulla^@204~ d If
            If (Not (ds.Tables(~dulla^@204~ Is Nothing) Then
                MyB~dulla^@204~ d(New CustomerDataTable(ds.Tables("Cu~dulla^@204~            End If
            If (No~dulla^@204~ "Invoice")) Is Nothing) Then
       ~dulla^@204~ se.Tables.Add(New InvoiceDataTable(ds~dulla^@204~ ice")))
            End If
        ~dulla^@204~ ds.Tables("Order")) Is Nothing) Then~dulla^@204~     MyBase.Tables.Add(New OrderDataTa~dulla^@204~ ("Order")))
            End If
    ~dulla^@204~ ot (ds.Tables("ProductInfo")) Is Noth~dulla^@204~               MyBase.Tables.Add(New P~dulla^@204~ aTable(ds.Tables("ProductInfo")))
  ~dulla^@204~  If
            If (Not (ds.Tables("~dulla^@204~ s Nothing) Then
                MyBa~dulla^@204~ (New ProductsDataTable(ds.Tables("Pro~dulla^@204~           End If
            If (Not~dulla^@204~ ProductsAvialable")) Is Nothing) Then~dulla^@204~      MyBase.Tables.Add(New ProductsAv~dulla^@204~ ble(ds.Tables("ProductsAvialable")))~dulla^@204~ End If
            If (Not (ds.Table~dulla^@204~ ) Is Nothing) Then
                M~dulla^@204~ Add(New PurchaseDataTable(ds.Tables("~dulla^@204~ 
            End If
            If (~dulla^@204~ s("PurchaseInfo")) Is Nothing) Then
~dulla^@204~    MyBase.Tables.Add(New PurchaseInfo~dulla^@204~ Tables("PurchaseInfo")))
           ~dulla^@204~         If (Not (ds.Tables("Sales")) ~dulla^@204~ hen
                MyBase.Tables.Ad~dulla^@204~ taTable(ds.Tables("Sales")))
            End If
            If (Not (ds.Table~dulla^@204~ )) Is Nothing) Then
                ~dulla^@204~ .Add(New SalesInfoDataTable(ds.Tables~dulla^@204~ ))
            End If
            I~dulla^@204~ bles("StockCard")) Is Nothing) Then
~dulla^@204~    MyBase.Tables.Add(New StockCardDat~dulla^@204~ les("StockCard")))
            End I~dulla^@204~   If (Not (ds.Tables("StockCardDetail~dulla^@204~ g) Then
                MyBase.Table~dulla^@204~ ckCardDetailDataTable(ds.Tables("Stoc~dulla^@204~ ))
            End If
            I~dulla^@204~ bles("Supplier")) Is Nothing) Then
 ~dulla^@204~   MyBase.Tables.Add(New SupplierDataT~dulla^@204~ s("Supplier")))
            End If
~dulla^@204~ e.DataSetName = ds.DataSetName
     ~dulla^@204~ fix = ds.Prefix
            Me.Names~dulla^@204~ espace
            Me.Locale = ds.Lo~dulla^@204~      Me.CaseSensitive = ds.CaseSensit~dulla^@204~     Me.EnforceConstraints = ds.Enforc~dulla^@204~ 
            Me.Merge(ds, false, Syst~dulla^@204~ ngSchemaAction.Add)
            Me.I~dulla^@204~     Else
            Me.ReadXml(read~dulla^@204~     Me.InitVars
        End If
    ~dulla^@204~ 
    <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
    Protected Overrides F~dulla^@204~ hemaSerializable() As System.Xml.Sche~dulla^@204~ 
        Dim stream As System.IO.Memo~dulla^@204~ w System.IO.MemoryStream
        Me.~dulla^@204~ a(New System.Xml.XmlTextWriter(stream~dulla^@204~         stream.Position = 0
        ~dulla^@204~ .Xml.Schema.XmlSchema.Read(New System~dulla^@204~ eader(stream), Nothing)
    End Func~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
    Friend Overloads Sub Ini~dulla^@204~     Me.InitVars(true)
    End Sub
 ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
    Friend Overloads Sub InitVars(B~dulla^@204~ e As Boolean)
        Me.tableCompan~dulla^@204~ (MyBase.Tables("CompanyInfo"),Company~dulla^@204~ )
        If (initTable = true) Then~dulla^@204~  If (Not (Me.tableCompanyInfo) Is Not~dulla^@204~                Me.tableCompanyInfo.In~dulla^@204~        End If
        End If
      ~dulla^@204~ tomer = CType(MyBase.Tables("Customer~dulla^@204~ taTable)
        If (initTable = tru~dulla^@204~         If (Not (Me.tableCustomer) Is~dulla^@204~ n
                Me.tableCustomer.I~dulla^@204~         End If
        End If
     ~dulla^@204~ voice = CType(MyBase.Tables("Invoice"~dulla^@204~ Table)
        If (initTable = true)~dulla^@204~       If (Not (Me.tableInvoice) Is No~dulla^@204~                 Me.tableInvoice.InitV~dulla^@204~     End If
        End If
        M~dulla^@204~ = CType(MyBase.Tables("Order"),OrderD~dulla^@204~       If (initTable = true) Then
   ~dulla^@204~ Not (Me.tableOrder) Is Nothing) Then~dulla^@204~     Me.tableOrder.InitVars
         ~dulla^@204~       End If
        Me.tableProduct~dulla^@204~ MyBase.Tables("ProductInfo"),ProductI~dulla^@204~ 
        If (initTable = true) Then~dulla^@204~ If (Not (Me.tableProductInfo) Is Noth~dulla^@204~               Me.tableProductInfo.Ini~dulla^@204~       End If
        End If
       ~dulla^@204~ ucts = CType(MyBase.Tables("Products"~dulla^@204~ aTable)
        If (initTable = true~dulla^@204~        If (Not (Me.tableProducts) Is ~dulla^@204~ 
                Me.tableProducts.In~dulla^@204~        End If
        End If
      ~dulla^@204~ ductsAvialable = CType(MyBase.Tables(~dulla^@204~ lable"),ProductsAvialableDataTable)
~dulla^@204~ nitTable = true) Then
            If~dulla^@204~ leProductsAvialable) Is Nothing) Then~dulla^@204~      Me.tableProductsAvialable.InitVa~dulla^@204~    End If
        End If
        Me~dulla^@204~ e = CType(MyBase.Tables("Purchase"),P~dulla^@204~ ble)
        If (initTable = true) T~dulla^@204~     If (Not (Me.tablePurchase) Is Not~dulla^@204~                Me.tablePurchase.InitV~dulla^@204~     End If
        End If
        M~dulla^@204~ seInfo = CType(MyBase.Tables("Purchas~dulla^@204~ aseInfoDataTable)
        If (initTa~dulla^@204~ hen
            If (Not (Me.tablePur~dulla^@204~  Nothing) Then
                Me.ta~dulla^@204~ fo.InitVars
            End If
    ~dulla^@204~        Me.tableSales = CType(MyBase.T~dulla^@204~ ),SalesDataTable)
        If (initTa~dulla^@204~ hen
            If (Not (Me.tableSal~dulla^@204~ g) Then
                Me.tableSale~dulla^@204~            End If
        End If
  ~dulla^@204~ eSalesInfo = CType(MyBase.Tables("Sal~dulla^@204~ sInfoDataTable)
        If (initTabl~dulla^@204~ n
            If (Not (Me.tableSales~dulla^@204~ ing) Then
                Me.tableSa~dulla^@204~ ars
            End If
        End ~dulla^@204~ e.tableStockCard = CType(MyBase.Table~dulla^@204~ ),StockCardDataTable)
        If (in~dulla^@204~ e) Then
            If (Not (Me.tabl~dulla^@204~ s Nothing) Then
                Me.t~dulla^@204~ .InitVars
            End If
      ~dulla^@204~      Me.tableStockCardDetail = CType(~dulla^@204~ ("StockCardDetail"),StockCardDetailDa~dulla^@204~      If (initTable = true) Then
    ~dulla^@204~ ot (Me.tableStockCardDetail) Is Nothi~dulla^@204~              Me.tableStockCardDetail.~dulla^@204~          End If
        End If
    ~dulla^@204~ upplier = CType(MyBase.Tables("Suppli~dulla^@204~ DataTable)
        If (initTable = t~dulla^@204~           If (Not (Me.tableSupplier) ~dulla^@204~ hen
                Me.tableSupplier~dulla^@204~           End If
        End If
   ~dulla^@204~  
    <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
    Private Sub InitClas~dulla^@204~ Me.DataSetName = "InventoryControlSys~dulla^@204~         Me.Prefix = ""
        Me.Na~dulla^@204~ tp://tempuri.org/InventoryControlSyst~dulla^@204~ "
        Me.EnforceConstraints = tr~dulla^@204~ e.SchemaSerializationMode = System.Da~dulla^@204~ alizationMode.IncludeSchema
        ~dulla^@204~ nyInfo = New CompanyInfoDataTable
  ~dulla^@204~ Tables.Add(Me.tableCompanyInfo)
    ~dulla^@204~ ustomer = New CustomerDataTable
    ~dulla^@204~ bles.Add(Me.tableCustomer)
        M~dulla^@204~ e = New InvoiceDataTable
        MyB~dulla^@204~ d(Me.tableInvoice)
        Me.tableO~dulla^@204~ derDataTable
        MyBase.Tables.A~dulla^@204~ der)
        Me.tableProductInfo = N~dulla^@204~ oDataTable
        MyBase.Tables.Add~dulla^@204~ uctInfo)
        Me.tableProducts = ~dulla^@204~ ataTable
        MyBase.Tables.Add(M~dulla^@204~ ts)
        Me.tableProductsAvialabl~dulla^@204~ ctsAvialableDataTable
        MyBase~dulla^@204~ e.tableProductsAvialable)
        Me~dulla^@204~ e = New PurchaseDataTable
        My~dulla^@204~ dd(Me.tablePurchase)
        Me.tabl~dulla^@204~  = New PurchaseInfoDataTable
       ~dulla^@204~ s.Add(Me.tablePurchaseInfo)
        ~dulla^@204~  = New SalesDataTable
        MyBase~dulla^@204~ e.tableSales)
        Me.tableSalesI~dulla^@204~ esInfoDataTable
        MyBase.Table~dulla^@204~ eSalesInfo)
        Me.tableStockCar~dulla^@204~ CardDataTable
        MyBase.Tables.~dulla^@204~ tockCard)
        Me.tableStockCardD~dulla^@204~ tockCardDetailDataTable
        MyBa~dulla^@204~ (Me.tableStockCardDetail)
        Me~dulla^@204~ r = New SupplierDataTable
        My~dulla^@204~ dd(Me.tableSupplier)
    End Sub
  ~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
    Private Function ShouldSerialize~dulla^@204~  As Boolean
        Return false
  ~dulla^@204~ n
    
    <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
    Private Functi~dulla^@204~ alizeCustomer() As Boolean
        R~dulla^@204~     End Function
    
    <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ tion ShouldSerializeInvoice() As Bool~dulla^@204~ Return false
    End Function
    ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~   Private Function ShouldSerializeOrd~dulla^@204~ an
        Return false
    End Fun~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
    Private Function Should~dulla^@204~ uctInfo() As Boolean
        Return ~dulla^@204~ d Function
    
    <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
    Private Function ShouldSerializeProducts() As B~dulla^@204~    Return false
    End Function
  ~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
    Private Function ShouldSerialize~dulla^@204~ able() As Boolean
        Return fal~dulla^@204~ unction
    
    <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
    Private ~dulla^@204~ ldSerializePurchase() As Boolean
   ~dulla^@204~ alse
    End Function
    
    <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ e Function ShouldSerializePurchaseInf~dulla^@204~ n
        Return false
    End Func~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
    Private Function ShouldS~dulla^@204~ () As Boolean
        Return false
~dulla^@204~ ion
    
    <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
    Private Func~dulla^@204~ rializeSalesInfo() As Boolean
      ~dulla^@204~ e
    End Function
    
    <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ unction ShouldSerializeStockCard() As~dulla^@204~      Return false
    End Function
~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
    Private Function ShouldSeriali~dulla^@204~ tail() As Boolean
        Return fal~dulla^@204~ unction
    
    <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
    Private ~dulla^@204~ ldSerializeSupplier() As Boolean
   ~dulla^@204~ alse
    End Function
    
    <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ e Sub SchemaChanged(ByVal sender As O~dulla^@204~ e As System.ComponentModel.Collection~dulla^@204~ gs)
        If (e.Action = System.Co~dulla^@204~ CollectionChangeAction.Remove) Then
~dulla^@204~ e.InitVars
        End If
    End S~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
    Public Shared Function Get~dulla^@204~ chema(ByVal xs As System.Xml.Schema.X~dulla^@204~ As System.Xml.Schema.XmlSchemaComplex~dulla^@204~  Dim ds As InventoryControlSystemData~dulla^@204~ entoryControlSystemDataSet
        D~dulla^@204~ stem.Xml.Schema.XmlSchemaComplexType ~dulla^@204~ Xml.Schema.XmlSchemaComplexType
    ~dulla^@204~ nce As System.Xml.Schema.XmlSchemaSeq~dulla^@204~ ystem.Xml.Schema.XmlSchemaSequence
 ~dulla^@204~ (ds.GetSchemaSerializable)
        D~dulla^@204~ tem.Xml.Schema.XmlSchemaAny = New Sys~dulla^@204~ a.XmlSchemaAny
        any.Namespace~dulla^@204~ ce
        sequence.Items.Add(any)
~dulla^@204~ Particle = sequence
        Return t~dulla^@204~ Function
    
    Public Delegate S~dulla^@204~ oRowChangeEventHandler(ByVal sender A~dulla^@204~ al e As CompanyInfoRowChangeEvent)
 ~dulla^@204~ ic Delegate Sub CustomerRowChangeEven~dulla^@204~ l sender As Object, ByVal e As Custom~dulla^@204~ ent)
    
    Public Delegate Sub I~dulla^@204~ geEventHandler(ByVal sender As Object~dulla^@204~ InvoiceRowChangeEvent)
    
    Pub~dulla^@204~ Sub OrderRowChangeEventHandler(ByVal ~dulla^@204~ ect, ByVal e As OrderRowChangeEvent)~dulla^@204~ blic Delegate Sub ProductInfoRowChang~dulla^@204~ (ByVal sender As Object, ByVal e As P~dulla^@204~ ChangeEvent)
    
    Public Delega~dulla^@204~ tsRowChangeEventHandler(ByVal sender ~dulla^@204~ Val e As ProductsRowChangeEvent)
   ~dulla^@204~  Delegate Sub ProductsAvialableRowCha~dulla^@204~ er(ByVal sender As Object, ByVal e As~dulla^@204~ lableRowChangeEvent)
    
    Publi~dulla^@204~ b PurchaseRowChangeEventHandler(ByVal~dulla^@204~ ject, ByVal e As PurchaseRowChangeEve~dulla^@204~   Public Delegate Sub PurchaseInfoRow~dulla^@204~ ndler(ByVal sender As Object, ByVal e~dulla^@204~ nfoRowChangeEvent)
    
    Public ~dulla^@204~ SalesRowChangeEventHandler(ByVal send~dulla^@204~  ByVal e As SalesRowChangeEvent)
   ~dulla^@204~  Delegate Sub SalesInfoRowChangeEvent~dulla^@204~  sender As Object, ByVal e As SalesIn~dulla^@204~ ent)
    
    Public Delegate Sub S~dulla^@204~ angeEventHandler(ByVal sender As Obje~dulla^@204~ s StockCardRowChangeEvent)
    
   ~dulla^@204~ ate Sub StockCardDetailRowChangeEvent~dulla^@204~  sender As Object, ByVal e As StockCa~dulla^@204~ angeEvent)
    
    Public Delegate~dulla^@204~ RowChangeEventHandler(ByVal sender As~dulla^@204~ l e As SupplierRowChangeEvent)
    ~dulla^@204~ CodeDom.Compiler.GeneratedCodeAttribu~dulla^@204~ ta.Design.TypedDataSetGenerator", "2.~dulla^@204~      System.Serializable(),  _
     ~dulla^@204~ rialization.XmlSchemaProviderAttribut~dulla^@204~ bleSchema")>  _
    Partial Public C~dulla^@204~ nfoDataTable
        Inherits System~dulla^@204~ le
        Implements System.Collect~dulla^@204~ ble
        
        Private column~dulla^@204~ s System.Data.DataColumn
        
 ~dulla^@204~ e columnAddress As System.Data.DataCo~dulla^@204~  
        Private columnCity As Syst~dulla^@204~ olumn
        
        Private colu~dulla^@204~ System.Data.DataColumn
        
   ~dulla^@204~ columnTel As System.Data.DataColumn
~dulla^@204~      Private columnFax As System.Data~dulla^@204~         
        Private columnPosta~dulla^@204~ ystem.Data.DataColumn
        
    ~dulla^@204~ olumnEmail As System.Data.DataColumn~dulla^@204~       Private columnCompantVATRegNo A~dulla^@204~ .DataColumn
        
        Privat~dulla^@204~ nyTINNo As System.Data.DataColumn
  ~dulla^@204~    Private columnCompanyDateOfReg As ~dulla^@204~ ataColumn
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Sub New()
            MyBase.New
  ~dulla^@204~ TableName = "CompanyInfo"
          ~dulla^@204~ t
            Me.InitClass
        ~dulla^@204~ t
        End Sub
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Friend Sub New(ByVal table As Syste~dulla^@204~ ble)
            MyBase.New
       ~dulla^@204~ Name = table.TableName
            I~dulla^@204~ Sensitive <> table.DataSet.CaseSensit~dulla^@204~               Me.CaseSensitive = tabl~dulla^@204~ ve
            End If
            I~dulla^@204~ le.ToString <> table.DataSet.Locale.T~dulla^@204~ 
                Me.Locale = table.L~dulla^@204~       End If
            If (table.N~dulla^@204~ able.DataSet.Namespace) Then
       ~dulla^@204~ amespace = table.Namespace
         ~dulla^@204~           Me.Prefix = table.Prefix
 ~dulla^@204~ .MinimumCapacity = table.MinimumCapac~dulla^@204~ End Sub
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~  Sub New(ByVal info As System.Runtime~dulla^@204~ n.SerializationInfo, ByVal context As~dulla^@204~ me.Serialization.StreamingContext)
 ~dulla^@204~ Base.New(info, context)
            ~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic ReadOnly Property CompanyNameCo~dulla^@204~ tem.Data.DataColumn
            Get~dulla^@204~     Return Me.columnCompanyName
    ~dulla^@204~ et
        End Property
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public ReadOnly Property Addr~dulla^@204~ s System.Data.DataColumn
           ~dulla^@204~          Return Me.columnAddress
   ~dulla^@204~ Get
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public ReadOnly Property Cit~dulla^@204~ System.Data.DataColumn
            G~dulla^@204~        Return Me.columnCity
        ~dulla^@204~         End Property
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public ReadOnly Property CountryC~dulla^@204~ stem.Data.DataColumn
            Get~dulla^@204~      Return Me.columnCountry
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public ReadOnly Property TelColu~dulla^@204~ m.Data.DataColumn
            Get
 ~dulla^@204~   Return Me.columnTel
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic ReadOnly Property FaxColumn() As~dulla^@204~ DataColumn
            Get
        ~dulla^@204~ n Me.columnFax
            End Get
~dulla^@204~ roperty
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic ReadOnly Property PostalAddress~dulla^@204~ ystem.Data.DataColumn
            Ge~dulla^@204~       Return Me.columnPostalAddress
~dulla^@204~ nd Get
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public ReadOnly Property ~dulla^@204~  As System.Data.DataColumn
         ~dulla^@204~            Return Me.columnEmail
   ~dulla^@204~ Get
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public ReadOnly Property Com~dulla^@204~ olumn() As System.Data.DataColumn
  ~dulla^@204~ 
                Return Me.columnCom~dulla^@204~ 
            End Get
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Read~dulla^@204~  CompanyTINNoColumn() As System.Data.~dulla^@204~            Get
                Retur~dulla^@204~ mpanyTINNo
            End Get
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ly Property CompanyDateOfRegColumn() ~dulla^@204~ a.DataColumn
            Get
      ~dulla^@204~ urn Me.columnCompanyDateOfReg
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~        System.ComponentModel.Browsabl~dulla^@204~ 
        Public ReadOnly Property Cou~dulla^@204~ er
            Get
                ~dulla^@204~ s.Count
            End Get
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ eadOnly Property Item(ByVal index As ~dulla^@204~ ompanyInfoRow
            Get
     ~dulla^@204~ turn CType(Me.Rows(index),CompanyInfo~dulla^@204~      End Get
        End Property
 ~dulla^@204~     Public Event CompanyInfoRowChangi~dulla^@204~ InfoRowChangeEventHandler
        
~dulla^@204~ c Event CompanyInfoRowChanged As Comp~dulla^@204~ ngeEventHandler
        
        Pu~dulla^@204~ mpanyInfoRowDeleting As CompanyInfoRo~dulla^@204~ andler
        
        Public Even~dulla^@204~ RowDeleted As CompanyInfoRowChangeEve~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~  AddCompanyInfoRow(ByVal row As Compa~dulla^@204~            Me.Rows.Add(row)
        ~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Ov~dulla^@204~ ion AddCompanyInfoRow(ByVal CompanyNa~dulla^@204~  ByVal Address As String, ByVal City ~dulla^@204~ Val Country As String, ByVal Tel As S~dulla^@204~ Fax As String, ByVal PostalAddress As~dulla^@204~ l Email As String, ByVal CompantVATRe~dulla^@204~ ByVal CompanyTINNo As String, ByVal C~dulla^@204~ eg As Date) As CompanyInfoRow
      ~dulla^@204~ CompanyInfoRow As CompanyInfoRow = CT~dulla^@204~ ,CompanyInfoRow)
            rowComp~dulla^@204~ emArray = New Object() {CompanyName, ~dulla^@204~ , Country, Tel, Fax, PostalAddress, E~dulla^@204~ VATRegNo, CompanyTINNo, CompanyDateOf~dulla^@204~      Me.Rows.Add(rowCompanyInfoRow)
~dulla^@204~ eturn rowCompanyInfoRow
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public O~dulla^@204~ nction GetEnumerator() As System.Coll~dulla^@204~ erator Implements System.Collections.~dulla^@204~ etEnumerator
            Return Me.R~dulla^@204~ ator
        End Function
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Overrides Function C~dulla^@204~ tem.Data.DataTable
            Dim c~dulla^@204~ InfoDataTable = CType(MyBase.Clone,Co~dulla^@204~ Table)
            cln.InitVars
   ~dulla^@204~ rn cln
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Protected Overrides Funct~dulla^@204~ tance() As System.Data.DataTable
   ~dulla^@204~ rn New CompanyInfoDataTable
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Frie~dulla^@204~ rs()
            Me.columnCompanyNam~dulla^@204~ lumns("CompanyName")
            Me.~dulla^@204~  = MyBase.Columns("Address")
       ~dulla^@204~ nCity = MyBase.Columns("City")
     ~dulla^@204~ umnCountry = MyBase.Columns("Country"~dulla^@204~   Me.columnTel = MyBase.Columns("Tel"~dulla^@204~   Me.columnFax = MyBase.Columns("Fax"~dulla^@204~   Me.columnPostalAddress = MyBase.Col~dulla^@204~ ddress")
            Me.columnEmail ~dulla^@204~ mns("Email")
            Me.columnCo~dulla^@204~  = MyBase.Columns("CompantVATRegNo")~dulla^@204~ Me.columnCompanyTINNo = MyBase.Column~dulla^@204~ No")
            Me.columnCompanyDat~dulla^@204~ se.Columns("CompanyDateOfReg")
     ~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Privat~dulla^@204~ ss()
            Me.columnCompanyNam~dulla^@204~ m.Data.DataColumn("CompanyName", GetT~dulla^@204~ Nothing, System.Data.MappingType.Elem~dulla^@204~      MyBase.Columns.Add(Me.columnComp~dulla^@204~          Me.columnAddress = New Syste~dulla^@204~ lumn("Address", GetType(String), Noth~dulla^@204~ ata.MappingType.Element)
           ~dulla^@204~ ns.Add(Me.columnAddress)
           ~dulla^@204~ y = New System.Data.DataColumn("City"~dulla^@204~ ing), Nothing, System.Data.MappingTyp~dulla^@204~            MyBase.Columns.Add(Me.colu~dulla^@204~         Me.columnCountry = New System~dulla^@204~ umn("Country", GetType(String), Nothi~dulla^@204~ ta.MappingType.Element)
            ~dulla^@204~ s.Add(Me.columnCountry)
            ~dulla^@204~ = New System.Data.DataColumn("Tel", G~dulla^@204~ ), Nothing, System.Data.MappingType.E~dulla^@204~         MyBase.Columns.Add(Me.columnT~dulla^@204~     Me.columnFax = New System.Data.Da~dulla^@204~ ", GetType(String), Nothing, System.D~dulla^@204~ pe.Element)
            MyBase.Colum~dulla^@204~ umnFax)
            Me.columnPostalA~dulla^@204~ System.Data.DataColumn("PostalAddress~dulla^@204~ ring), Nothing, System.Data.MappingTy~dulla^@204~             MyBase.Columns.Add(Me.col~dulla^@204~ ess)
            Me.columnEmail = Ne~dulla^@204~ .DataColumn("Email", GetType(String),~dulla^@204~ tem.Data.MappingType.Element)
      ~dulla^@204~ Columns.Add(Me.columnEmail)
        ~dulla^@204~ CompantVATRegNo = New System.Data.Dat~dulla^@204~ antVATRegNo", GetType(Date), Nothing,~dulla^@204~ MappingType.Element)
            MyB~dulla^@204~ dd(Me.columnCompantVATRegNo)
       ~dulla^@204~ nCompanyTINNo = New System.Data.DataC~dulla^@204~ yTINNo", GetType(String), Nothing, Sy~dulla^@204~ pingType.Element)
            MyBase~dulla^@204~ Me.columnCompanyTINNo)
            M~dulla^@204~ nyDateOfReg = New System.Data.DataCol~dulla^@204~ ateOfReg", GetType(Date), Nothing, Sy~dulla^@204~ pingType.Element)
            MyBase~dulla^@204~ Me.columnCompanyDateOfReg)
         ~dulla^@204~ ompanyName.AllowDBNull = false
     ~dulla^@204~ umnCompanyName.MaxLength = 20
      ~dulla^@204~ mnAddress.AllowDBNull = false
      ~dulla^@204~ mnAddress.MaxLength = 20
           ~dulla^@204~ y.AllowDBNull = false
            Me~dulla^@204~ axLength = 20
            Me.columnC~dulla^@204~ BNull = false
            Me.columnC~dulla^@204~ gth = 20
            Me.columnTel.Ma~dulla^@204~ 
            Me.columnFax.MaxLength =~dulla^@204~     Me.columnPostalAddress.MaxLength ~dulla^@204~      Me.columnEmail.MaxLength = 20
 ~dulla^@204~ .columnCompantVATRegNo.AllowDBNull = ~dulla^@204~       Me.columnCompanyTINNo.AllowDBNu~dulla^@204~            Me.columnCompanyTINNo.MaxL~dulla^@204~            Me.columnCompanyDateOfReg.~dulla^@204~  false
        End Sub
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Function NewCompanyInfo~dulla^@204~ anyInfoRow
            Return CType(~dulla^@204~ panyInfoRow)
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Protected Overrides~dulla^@204~ RowFromBuilder(ByVal builder As Syste~dulla^@204~ wBuilder) As System.Data.DataRow
   ~dulla^@204~ rn New CompanyInfoRow(builder)
        End Function
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~ ted Overrides Function GetRowType() A~dulla^@204~ 
            Return GetType(CompanyI~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Protected Overrides Sub OnRowChanged(~dulla^@204~ stem.Data.DataRowChangeEventArgs)
  ~dulla^@204~ ase.OnRowChanged(e)
            If (~dulla^@204~ nyInfoRowChangedEvent) Is Nothing) Th~dulla^@204~        RaiseEvent CompanyInfoRowChang~dulla^@204~ mpanyInfoRowChangeEvent(CType(e.Row,C~dulla^@204~ ), e.Action))
            End If
  ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pro~dulla^@204~ des Sub OnRowChanging(ByVal e As Syst~dulla^@204~ owChangeEventArgs)
            MyBas~dulla^@204~ ng(e)
            If (Not (Me.Compan~dulla^@204~ ingEvent) Is Nothing) Then
         ~dulla^@204~ vent CompanyInfoRowChanging(Me, New C~dulla^@204~ ChangeEvent(CType(e.Row,CompanyInfoRo~dulla^@204~ )
            End If
        End Su~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Protected Overr~dulla^@204~ wDeleted(ByVal e As System.Data.DataR~dulla^@204~ Args)
            MyBase.OnRowDelete~dulla^@204~      If (Not (Me.CompanyInfoRowDelete~dulla^@204~ thing) Then
                RaiseEve~dulla^@204~ oRowDeleted(Me, New CompanyInfoRowCha~dulla^@204~ e(e.Row,CompanyInfoRow), e.Action))
~dulla^@204~ nd If
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Protected Overrides Sub OnRowDe~dulla^@204~ e As System.Data.DataRowChangeEventAr~dulla^@204~     MyBase.OnRowDeleting(e)
        ~dulla^@204~ Me.CompanyInfoRowDeletingEvent) Is No~dulla^@204~                 RaiseEvent CompanyInf~dulla^@204~ Me, New CompanyInfoRowChangeEvent(CTy~dulla^@204~ anyInfoRow), e.Action))
            ~dulla^@204~    End Sub
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Sub RemoveCompanyInfoRow(ByVal row A~dulla^@204~ Row)
            Me.Rows.Remove(row)~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ d Function GetTypedTableSchema(ByVal ~dulla^@204~ Xml.Schema.XmlSchemaSet) As System.Xm~dulla^@204~ chemaComplexType
            Dim typ~dulla^@204~ ml.Schema.XmlSchemaComplexType = New ~dulla^@204~ hema.XmlSchemaComplexType
          ~dulla^@204~ e As System.Xml.Schema.XmlSchemaSeque~dulla^@204~ tem.Xml.Schema.XmlSchemaSequence
   ~dulla^@204~ ds As InventoryControlSystemDataSet =~dulla^@204~ yControlSystemDataSet
            xs~dulla^@204~ hemaSerializable)
            Dim an~dulla^@204~ Xml.Schema.XmlSchemaAny = New System.~dulla^@204~ lSchemaAny
            any1.Namespac~dulla^@204~ ww.w3.org/2001/XMLSchema"
          ~dulla^@204~ urs = New Decimal(0)
            any~dulla^@204~  Decimal.MaxValue
            any1.P~dulla^@204~ s = System.Xml.Schema.XmlSchemaConten~dulla^@204~ ax
            sequence.Items.Add(an~dulla^@204~     Dim any2 As System.Xml.Schema.Xml~dulla^@204~ ew System.Xml.Schema.XmlSchemaAny
  ~dulla^@204~ 2.Namespace = "urn:schemas-microsoft-~dulla^@204~ ram-v1"
            any2.MinOccurs =~dulla^@204~ 1)
            any2.ProcessContents ~dulla^@204~ Schema.XmlSchemaContentProcessing.Lax~dulla^@204~  sequence.Items.Add(any2)
          ~dulla^@204~ te1 As System.Xml.Schema.XmlSchemaAtt~dulla^@204~ System.Xml.Schema.XmlSchemaAttribute~dulla^@204~ attribute1.Name = "namespace"
      ~dulla^@204~ te1.FixedValue = ds.Namespace
      ~dulla^@204~ tributes.Add(attribute1)
           ~dulla^@204~ e2 As System.Xml.Schema.XmlSchemaAttr~dulla^@204~ ystem.Xml.Schema.XmlSchemaAttribute
~dulla^@204~ ttribute2.Name = "tableTypeName"
   ~dulla^@204~ ibute2.FixedValue = "CompanyInfoDataT~dulla^@204~       type.Attributes.Add(attribute2)~dulla^@204~  type.Particle = sequence
          ~dulla^@204~ 
        End Function
    End Class~dulla^@204~ System.CodeDom.Compiler.GeneratedCode~dulla^@204~ stem.Data.Design.TypedDataSetGenerato~dulla^@204~ ),  _
     System.Serializable(),  _~dulla^@204~ .Xml.Serialization.XmlSchemaProviderA~dulla^@204~ TypedTableSchema")>  _
    Partial P~dulla^@204~ ustomerDataTable
        Inherits Sy~dulla^@204~ aTable
        Implements System.Col~dulla^@204~ merable
        
        Private co~dulla^@204~ D As System.Data.DataColumn
        ~dulla^@204~ vate columnCustomerName As System.Dat~dulla^@204~ 
        
        Private columnAddr~dulla^@204~ .Data.DataColumn
        
        P~dulla^@204~ City As System.Data.DataColumn
     ~dulla^@204~ Private columnCountry As System.Data.~dulla^@204~        
        Private columnTel As~dulla^@204~ DataColumn
        
        Private~dulla^@204~  System.Data.DataColumn
        
  ~dulla^@204~  columnPostalAddress As System.Data.D~dulla^@204~       
        Private columnEmail A~dulla^@204~ .DataColumn
        
        Privat~dulla^@204~ merVATRegNo As System.Data.DataColumn~dulla^@204~        Private columnCustomerTINNo As~dulla^@204~ DataColumn
        
        Private~dulla^@204~ erDateOfReg As System.Data.DataColumn~dulla^@204~        Private columnProductDateOfSup~dulla^@204~ .Data.DataColumn
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Sub New()
            MyBase.~dulla^@204~     Me.TableName = "Customer"
      ~dulla^@204~ nInit
            Me.InitClass
    ~dulla^@204~ dInit
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Friend Sub New(ByVal table As S~dulla^@204~ taTable)
            MyBase.New
   ~dulla^@204~ ableName = table.TableName
         ~dulla^@204~ CaseSensitive <> table.DataSet.CaseSe~dulla^@204~ 
                Me.CaseSensitive = ~dulla^@204~ sitive
            End If
         ~dulla^@204~ Locale.ToString <> table.DataSet.Loca~dulla^@204~ Then
                Me.Locale = tab~dulla^@204~           End If
            If (tab~dulla^@204~ <> table.DataSet.Namespace) Then
   ~dulla^@204~ Me.Namespace = table.Namespace
     ~dulla^@204~ 
            Me.Prefix = table.Prefi~dulla^@204~   Me.MinimumCapacity = table.MinimumC~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ cted Sub New(ByVal info As System.Run~dulla^@204~ ation.SerializationInfo, ByVal contex~dulla^@204~ untime.Serialization.StreamingContext~dulla^@204~   MyBase.New(info, context)
        ~dulla^@204~ rs
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public ReadOnly Property CustomerI~dulla^@204~ System.Data.DataColumn
            G~dulla^@204~        Return Me.columnCustomerID
  ~dulla^@204~  Get
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public ReadOnly Property Cu~dulla^@204~ umn() As System.Data.DataColumn
    ~dulla^@204~                 Return Me.columnCusto~dulla^@204~         End Get
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public ReadOnly ~dulla^@204~ essColumn() As System.Data.DataColumn~dulla^@204~  Get
                Return Me.colum~dulla^@204~          End Get
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public ReadOnly~dulla^@204~ yColumn() As System.Data.DataColumn
~dulla^@204~ et
                Return Me.columnC~dulla^@204~     End Get
        End Property
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public ReadOnly Prop~dulla^@204~ olumn() As System.Data.DataColumn
  ~dulla^@204~ 
                Return Me.columnCou~dulla^@204~      End Get
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public ReadOnly Pro~dulla^@204~ mn() As System.Data.DataColumn
     ~dulla^@204~                Return Me.columnTel
 ~dulla^@204~ d Get
        End Property
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Pr~dulla^@204~ umn() As System.Data.DataColumn
    ~dulla^@204~                 Return Me.columnFax
~dulla^@204~ nd Get
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public ReadOnly Property ~dulla^@204~ Column() As System.Data.DataColumn
 ~dulla^@204~ t
                Return Me.columnPo~dulla^@204~             End Get
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public ReadO~dulla^@204~ EmailColumn() As System.Data.DataColu~dulla^@204~    Get
                Return Me.col~dulla^@204~          End Get
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public ReadOnly~dulla^@204~ tomerVATRegNoColumn() As System.Data.~dulla^@204~            Get
                Retur~dulla^@204~ stomerVATRegNo
            End Get
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ adOnly Property CustomerTINNoColumn()~dulla^@204~ ta.DataColumn
            Get
     ~dulla^@204~ turn Me.columnCustomerTINNo
        ~dulla^@204~         End Property
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public ReadOnly Property Customer~dulla^@204~ mn() As System.Data.DataColumn
     ~dulla^@204~                Return Me.columnCustom~dulla^@204~             End Get
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public ReadO~dulla^@204~ ProductDateOfSupplyColumn() As System~dulla^@204~ umn
            Get
               ~dulla^@204~ lumnProductDateOfSupply
            ~dulla^@204~     End Property
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute(),~dulla^@204~  System.ComponentModel.Browsable(fals~dulla^@204~    Public ReadOnly Property Count() A~dulla^@204~           Get
                Return~dulla^@204~ t
            End Get
        End P~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public De~dulla^@204~ y Property Item(ByVal index As Intege~dulla^@204~ rRow
            Get
              ~dulla^@204~ e(Me.Rows(index),CustomerRow)
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ vent CustomerRowChanging As CustomerR~dulla^@204~ Handler
        
        Public Eve~dulla^@204~ wChanged As CustomerRowChangeEventHan~dulla^@204~  
        Public Event CustomerRowDe~dulla^@204~ tomerRowChangeEventHandler
        ~dulla^@204~ ic Event CustomerRowDeleted As Custom~dulla^@204~ entHandler
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Overloads Sub AddCustomerRow(ByVal r~dulla^@204~ rRow)
            Me.Rows.Add(row)
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ ds Function AddCustomerRow(ByVal Cust~dulla^@204~ ing, ByVal CustomerName As String, By~dulla^@204~ s String, ByVal City As String, ByVal~dulla^@204~ tring, ByVal Tel As String, ByVal Fax~dulla^@204~ yVal PostalAddress As String, ByVal E~dulla^@204~ g, ByVal CustomerVATRegNo As String, ~dulla^@204~ rTINNo As String, ByVal CustomerDateO~dulla^@204~  ByVal ProductDateOfSupply As Date) A~dulla^@204~ 
            Dim rowCustomerRow As C~dulla^@204~ CType(Me.NewRow,CustomerRow)
       ~dulla^@204~ merRow.ItemArray = New Object() {Cust~dulla^@204~ merName, Address, City, Country, Tel,~dulla^@204~ ddress, Email, CustomerVATRegNo, Cust~dulla^@204~ stomerDateOfReg, ProductDateOfSupply}~dulla^@204~  Me.Rows.Add(rowCustomerRow)
       ~dulla^@204~ owCustomerRow
        End Function
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Function Fi~dulla^@204~ D(ByVal CustomerID As String) As Cust~dulla^@204~         Return CType(Me.Rows.Find(New~dulla^@204~ stomerID}),CustomerRow)
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public O~dulla^@204~ nction GetEnumerator() As System.Coll~dulla^@204~ erator Implements System.Collections.~dulla^@204~ etEnumerator
            Return Me.R~dulla^@204~ ator
        End Function
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Overrides Function C~dulla^@204~ tem.Data.DataTable
            Dim c~dulla^@204~ rDataTable = CType(MyBase.Clone,Custo~dulla^@204~ 
            cln.InitVars
         ~dulla^@204~ 
        End Function
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Protected Overrides Function Cr~dulla^@204~ ) As System.Data.DataTable
         ~dulla^@204~  CustomerDataTable
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Friend Sub In~dulla^@204~          Me.columnCustomerID = MyBase~dulla^@204~ tomerID")
            Me.columnCusto~dulla^@204~ ase.Columns("CustomerName")
        ~dulla^@204~ Address = MyBase.Columns("Address")
~dulla^@204~ e.columnCity = MyBase.Columns("City")~dulla^@204~  Me.columnCountry = MyBase.Columns("C~dulla^@204~          Me.columnTel = MyBase.Column~dulla^@204~          Me.columnFax = MyBase.Column~dulla^@204~          Me.columnPostalAddress = MyB~dulla^@204~ PostalAddress")
            Me.colum~dulla^@204~ se.Columns("Email")
            Me.c~dulla^@204~ VATRegNo = MyBase.Columns("CustomerVA~dulla^@204~          Me.columnCustomerTINNo = MyB~dulla^@204~ CustomerTINNo")
            Me.colum~dulla^@204~ OfReg = MyBase.Columns("CustomerDateO~dulla^@204~        Me.columnProductDateOfSupply =~dulla^@204~ ns("ProductDateOfSupply")
        En~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Private Sub~dulla^@204~ 
            Me.columnCustomerID = Ne~dulla^@204~ .DataColumn("CustomerID", GetType(Str~dulla^@204~ , System.Data.MappingType.Element)
 ~dulla^@204~ Base.Columns.Add(Me.columnCustomerID)~dulla^@204~  Me.columnCustomerName = New System.D~dulla^@204~ n("CustomerName", GetType(String), No~dulla^@204~ .Data.MappingType.Element)
         ~dulla^@204~ umns.Add(Me.columnCustomerName)
    ~dulla^@204~ lumnAddress = New System.Data.DataCol~dulla^@204~ , GetType(String), Nothing, System.Da~dulla^@204~ e.Element)
            MyBase.Column~dulla^@204~ mnAddress)
            Me.columnCity~dulla^@204~ .Data.DataColumn("City", GetType(Stri~dulla^@204~  System.Data.MappingType.Element)
  ~dulla^@204~ ase.Columns.Add(Me.columnCity)
     ~dulla^@204~ umnCountry = New System.Data.DataColu~dulla^@204~  GetType(String), Nothing, System.Dat~dulla^@204~ .Element)
            MyBase.Columns~dulla^@204~ nCountry)
            Me.columnTel =~dulla^@204~ ata.DataColumn("Tel", GetType(String)~dulla^@204~ stem.Data.MappingType.Element)
     ~dulla^@204~ .Columns.Add(Me.columnTel)
         ~dulla^@204~ ax = New System.Data.DataColumn("Fax"~dulla^@204~ ing), Nothing, System.Data.MappingTyp~dulla^@204~            MyBase.Columns.Add(Me.colu~dulla^@204~        Me.columnPostalAddress = New S~dulla^@204~ taColumn("PostalAddress", GetType(Str~dulla^@204~ , System.Data.MappingType.Element)
 ~dulla^@204~ Base.Columns.Add(Me.columnPostalAddre~dulla^@204~     Me.columnEmail = New System.Data.~dulla^@204~ mail", GetType(String), Nothing, Syst~dulla^@204~ ngType.Element)
            MyBase.C~dulla^@204~ .columnEmail)
            Me.columnC~dulla^@204~ No = New System.Data.DataColumn("Cust~dulla^@204~ , GetType(String), Nothing, System.Da~dulla^@204~ e.Element)
            MyBase.Column~dulla^@204~ mnCustomerVATRegNo)
            Me.c~dulla^@204~ TINNo = New System.Data.DataColumn("C~dulla^@204~ , GetType(String), Nothing, System.Da~dulla^@204~ e.Element)
            MyBase.Column~dulla^@204~ mnCustomerTINNo)
            Me.colu~dulla^@204~ eOfReg = New System.Data.DataColumn("~dulla^@204~ fReg", GetType(Date), Nothing, System~dulla^@204~ Type.Element)
            MyBase.Col~dulla^@204~ olumnCustomerDateOfReg)
            ~dulla^@204~ uctDateOfSupply = New System.Data.Dat~dulla^@204~ uctDateOfSupply", GetType(Date), Nothing, System.Data.MappingType.Element)
   ~dulla^@204~ se.Columns.Add(Me.columnProductDateOf~dulla^@204~         Me.Constraints.Add(New System~dulla^@204~ onstraint("Constraint1", New System.D~dulla^@204~ n() {Me.columnCustomerID}, true))
  ~dulla^@204~ columnCustomerID.AllowDBNull = false~dulla^@204~ Me.columnCustomerID.Unique = true
  ~dulla^@204~ columnCustomerID.MaxLength = 20
    ~dulla^@204~ lumnCustomerName.MaxLength = 20
    ~dulla^@204~ lumnAddress.AllowDBNull = false
    ~dulla^@204~ lumnAddress.MaxLength = 20
         ~dulla^@204~ ity.AllowDBNull = false
            ~dulla^@204~ .MaxLength = 20
            Me.colum~dulla^@204~ wDBNull = false
            Me.colum~dulla^@204~ ength = 20
            Me.columnTel.~dulla^@204~  false
            Me.columnTel.MaxL~dulla^@204~            Me.columnFax.AllowDBNull =~dulla^@204~        Me.columnFax.MaxLength = 20
 ~dulla^@204~ .columnPostalAddress.AllowDBNull = fa~dulla^@204~     Me.columnPostalAddress.MaxLength ~dulla^@204~      Me.columnEmail.AllowDBNull = fal~dulla^@204~    Me.columnEmail.MaxLength = 20
   ~dulla^@204~ olumnCustomerVATRegNo.MaxLength = 20~dulla^@204~ Me.columnCustomerTINNo.MaxLength = 20~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ ion NewCustomerRow() As CustomerRow
~dulla^@204~ eturn CType(Me.NewRow,CustomerRow)
 ~dulla^@204~ nction
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ Overrides Function NewRowFromBuilder(~dulla^@204~  As System.Data.DataRowBuilder) As Sy~dulla^@204~ aRow
            Return New Customer~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Protected Overrides Function Get~dulla^@204~ System.Type
            Return GetTy~dulla^@204~ w)
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Protected Overrides Sub OnRow~dulla^@204~  e As System.Data.DataRowChangeEventA~dulla^@204~      MyBase.OnRowChanged(e)
        ~dulla^@204~ Me.CustomerRowChangedEvent) Is Nothin~dulla^@204~             RaiseEvent CustomerRowCha~dulla^@204~ CustomerRowChangeEvent(CType(e.Row,Cu~dulla^@204~ .Action))
            End If
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Protect~dulla^@204~ Sub OnRowChanging(ByVal e As System.D~dulla^@204~ angeEventArgs)
            MyBase.On~dulla^@204~ )
            If (Not (Me.CustomerRo~dulla^@204~ t) Is Nothing) Then
                ~dulla^@204~ stomerRowChanging(Me, New CustomerRow~dulla^@204~ Type(e.Row,CustomerRow), e.Action))
~dulla^@204~ nd If
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Protected Overrides Sub OnRowDe~dulla^@204~  As System.Data.DataRowChangeEventArg~dulla^@204~    MyBase.OnRowDeleted(e)
          ~dulla^@204~ .CustomerRowDeletedEvent) Is Nothing)~dulla^@204~           RaiseEvent CustomerRowDelet~dulla^@204~ stomerRowChangeEvent(CType(e.Row,Cust~dulla^@204~ ction))
            End If
        ~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Protected~dulla^@204~ b OnRowDeleting(ByVal e As System.Dat~dulla^@204~ geEventArgs)
            MyBase.OnRo~dulla^@204~ 
            If (Not (Me.CustomerRowD~dulla^@204~  Is Nothing) Then
                Ra~dulla^@204~ omerRowDeleting(Me, New CustomerRowCh~dulla^@204~ pe(e.Row,CustomerRow), e.Action))
  ~dulla^@204~  If
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Sub RemoveCustomerRow(ByVa~dulla^@204~ omerRow)
            Me.Rows.Remove(~dulla^@204~  End Sub
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ hared Function GetTypedTableSchema(By~dulla^@204~ tem.Xml.Schema.XmlSchemaSet) As Syste~dulla^@204~ XmlSchemaComplexType
            Dim~dulla^@204~ em.Xml.Schema.XmlSchemaComplexType = ~dulla^@204~ l.Schema.XmlSchemaComplexType
      ~dulla^@204~ uence As System.Xml.Schema.XmlSchemaS~dulla^@204~  System.Xml.Schema.XmlSchemaSequence~dulla^@204~ Dim ds As InventoryControlSystemDataS~dulla^@204~ ntoryControlSystemDataSet
          ~dulla^@204~ etSchemaSerializable)
            Di~dulla^@204~ tem.Xml.Schema.XmlSchemaAny = New Sys~dulla^@204~ a.XmlSchemaAny
            any1.Name~dulla^@204~ ://www.w3.org/2001/XMLSchema"
      ~dulla^@204~ nOccurs = New Decimal(0)
           ~dulla^@204~ rs = Decimal.MaxValue
            an~dulla^@204~ tents = System.Xml.Schema.XmlSchemaCo~dulla^@204~ ng.Lax
            sequence.Items.Ad~dulla^@204~         Dim any2 As System.Xml.Schema~dulla^@204~  = New System.Xml.Schema.XmlSchemaAny~dulla^@204~  any2.Namespace = "urn:schemas-micros~dulla^@204~ iffgram-v1"
            any2.MinOccu~dulla^@204~ mal(1)
            any2.ProcessConte~dulla^@204~ Xml.Schema.XmlSchemaContentProcessing~dulla^@204~      sequence.Items.Add(any2)
      ~dulla^@204~ ribute1 As System.Xml.Schema.XmlSchem~dulla^@204~ New System.Xml.Schema.XmlSchemaAttrib~dulla^@204~     attribute1.Name = "namespace"
  ~dulla^@204~ ribute1.FixedValue = ds.Namespace
  ~dulla^@204~ e.Attributes.Add(attribute1)
       ~dulla^@204~ ibute2 As System.Xml.Schema.XmlSchema~dulla^@204~ ew System.Xml.Schema.XmlSchemaAttribu~dulla^@204~    attribute2.Name = "tableTypeName"~dulla^@204~ attribute2.FixedValue = "CustomerData~dulla^@204~        type.Attributes.Add(attribute2~dulla^@204~   type.Particle = sequence
         ~dulla^@204~ e
        End Function
    End Clas~dulla^@204~ <System.CodeDom.Compiler.GeneratedCod~dulla^@204~ ystem.Data.Design.TypedDataSetGenerat~dulla^@204~ "),  _
     System.Serializable(),  ~dulla^@204~ m.Xml.Serialization.XmlSchemaProvider~dulla^@204~ tTypedTableSchema")>  _
    Partial ~dulla^@204~ InvoiceDataTable
        Inherits Sy~dulla^@204~ aTable
        Implements System.Col~dulla^@204~ merable
        
        Private co~dulla^@204~  As System.Data.DataColumn
        ~dulla^@204~ ate columnDate As System.Data.DataCol~dulla^@204~ 
        Private columnTotalAmount A~dulla^@204~ .DataColumn
        
        Privat~dulla^@204~ htCharge As System.Data.DataColumn
 ~dulla^@204~     Private columnMiscellaneousCost A~dulla^@204~ .DataColumn
        
        Privat~dulla^@204~ PurchaseAmount As System.Data.DataCol~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Sub Ne~dulla^@204~     MyBase.New
            Me.TableN~dulla^@204~ e"
            Me.BeginInit
       ~dulla^@204~ lass
            Me.EndInit
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Friend S~dulla^@204~ table As System.Data.DataTable)
    ~dulla^@204~ e.New
            Me.TableName = tab~dulla^@204~ 
            If (table.CaseSensitive ~dulla^@204~ Set.CaseSensitive) Then
            ~dulla^@204~ nsitive = table.CaseSensitive
      ~dulla^@204~ 
            If (table.Locale.ToStrin~dulla^@204~ taSet.Locale.ToString) Then
        ~dulla^@204~ cale = table.Locale
            End ~dulla^@204~    If (table.Namespace <> table.DataS~dulla^@204~  Then
                Me.Namespace =~dulla^@204~ ace
            End If
            ~dulla^@204~ able.Prefix
            Me.MinimumCa~dulla^@204~ e.MinimumCapacity
        End Sub
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Protected Sub New(B~dulla^@204~ System.Runtime.Serialization.Serializ~dulla^@204~ Val context As System.Runtime.Seriali~dulla^@204~ ingContext)
            MyBase.New(i~dulla^@204~ 
            Me.InitVars
        En~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Read~dulla^@204~  InvoiceNoColumn() As System.Data.Dat~dulla^@204~         Get
                Return M~dulla^@204~ ceNo
            End Get
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ perty DateColumn() As System.Data.Dat~dulla^@204~         Get
                Return Me.columnDate
            End Get
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ Property TotalAmountColumn() As Syste~dulla^@204~ lumn
            Get
              ~dulla^@204~ olumnTotalAmount
            End Get~dulla^@204~  Property
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ ReadOnly Property FrieghtChargeColumn~dulla^@204~ Data.DataColumn
            Get
   ~dulla^@204~ Return Me.columnFrieghtCharge
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public ReadOnly Property Miscel~dulla^@204~ lumn() As System.Data.DataColumn
   ~dulla^@204~ 
                Return Me.columnMisc~dulla^@204~ 
            End Get
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Rea~dulla^@204~ y TotalPurchaseAmountColumn() As Syst~dulla^@204~ olumn
            Get
             ~dulla^@204~ columnTotalPurchaseAmount
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~    System.ComponentModel.Browsable(fa~dulla^@204~      Public ReadOnly Property Count()~dulla^@204~             Get
                Retu~dulla^@204~ unt
            End Get
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ nly Property Item(ByVal index As Inte~dulla^@204~ ceRow
            Get
             ~dulla^@204~ pe(Me.Rows(index),InvoiceRow)
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ vent InvoiceRowChanging As InvoiceRow~dulla^@204~ ndler
        
        Public Event~dulla^@204~ anged As InvoiceRowChangeEventHandler~dulla^@204~        Public Event InvoiceRowDeletin~dulla^@204~ owChangeEventHandler
        
     ~dulla^@204~ nt InvoiceRowDeleted As InvoiceRowCha~dulla^@204~ er
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ ds Sub AddInvoiceRow(ByVal row As Inv~dulla^@204~          Me.Rows.Add(row)
        En~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Over~dulla^@204~ n AddInvoiceRow(ByVal InvoiceNo As St~dulla^@204~ Date As Date, ByVal TotalAmount As In~dulla^@204~ FrieghtCharge As Integer, ByVal Misce~dulla^@204~ As Integer, ByVal TotalPurchaseAmount~dulla^@204~ As InvoiceRow
            Dim rowInv~dulla^@204~ voiceRow = CType(Me.NewRow,InvoiceRow~dulla^@204~   rowInvoiceRow.ItemArray = New Objec~dulla^@204~ o, _Date, TotalAmount, FrieghtCharge,~dulla^@204~ sCost, TotalPurchaseAmount}
        ~dulla^@204~ dd(rowInvoiceRow)
            Return~dulla^@204~ w
        End Function
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Function FindByInvoiceN~dulla^@204~ ceNo As String) As InvoiceRow
      ~dulla^@204~ CType(Me.Rows.Find(New Object() {Invo~dulla^@204~ ceRow)
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Overridable Functi~dulla^@204~ tor() As System.Collections.IEnumerat~dulla^@204~  System.Collections.IEnumerable.GetEn~dulla^@204~          Return Me.Rows.GetEnumerator~dulla^@204~  Function
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Overrides Function Clone() As System.~dulla^@204~ e
            Dim cln As InvoiceData~dulla^@204~ (MyBase.Clone,InvoiceDataTable)
    ~dulla^@204~ nitVars
            Return cln
    ~dulla^@204~ ion
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ rrides Function CreateInstance() As S~dulla^@204~ taTable
            Return New Invoi~dulla^@204~         End Function
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Friend Sub InitVars()
          ~dulla^@204~ voiceNo = MyBase.Columns("InvoiceNo")~dulla^@204~  Me.columnDate = MyBase.Columns("Date~dulla^@204~    Me.columnTotalAmount = MyBase.Colu~dulla^@204~ unt")
            Me.columnFrieghtCh~dulla^@204~ .Columns("FrieghtCharge")
          ~dulla^@204~ scellaneousCost = MyBase.Columns("Mis~dulla^@204~ t")
            Me.columnTotalPurcha~dulla^@204~ Base.Columns("TotalPurchaseAmount")
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ itClass()
            Me.columnInvoi~dulla^@204~ stem.Data.DataColumn("InvoiceNo", Get~dulla^@204~  Nothing, System.Data.MappingType.Ele~dulla^@204~       MyBase.Columns.Add(Me.columnInv~dulla^@204~         Me.columnDate = New System.Da~dulla^@204~ ("Date", GetType(Date), Nothing, Syst~dulla^@204~ ngType.Element)
            Me.colum~dulla^@204~ dProperties.Add("Generator_ColumnProp~dulla^@204~ _Date")
            Me.columnDate.Ex~dulla^@204~ ies.Add("Generator_UserColumnName", "~dulla^@204~        MyBase.Columns.Add(Me.columnDa~dulla^@204~     Me.columnTotalAmount = New System~dulla^@204~ umn("TotalAmount", GetType(Integer), ~dulla^@204~ em.Data.MappingType.Element)
       ~dulla^@204~ olumns.Add(Me.columnTotalAmount)
   ~dulla^@204~ olumnFrieghtCharge = New System.Data.~dulla^@204~ rieghtCharge", GetType(Integer), Noth~dulla^@204~ ata.MappingType.Element)
           ~dulla^@204~ ns.Add(Me.columnFrieghtCharge)
     ~dulla^@204~ umnMiscellaneousCost = New System.Dat~dulla^@204~ "MiscellaneousCost", GetType(Integer)~dulla^@204~ stem.Data.MappingType.Element)
     ~dulla^@204~ .Columns.Add(Me.columnMiscellaneousCo~dulla^@204~     Me.columnTotalPurchaseAmount = Ne~dulla^@204~ .DataColumn("TotalPurchaseAmount", Ge~dulla^@204~ ), Nothing, System.Data.MappingType.E~dulla^@204~         MyBase.Columns.Add(Me.columnT~dulla^@204~ mount)
            Me.Constraints.Ad~dulla^@204~ Data.UniqueConstraint("Constraint1", ~dulla^@204~ ta.DataColumn() {Me.columnInvoiceNo},~dulla^@204~         Me.columnInvoiceNo.AllowDBNul~dulla^@204~           Me.columnInvoiceNo.Unique =~dulla^@204~       Me.columnInvoiceNo.MaxLength = ~dulla^@204~    Me.columnDate.AllowDBNull = false~dulla^@204~ Me.columnTotalAmount.AllowDBNull = fa~dulla^@204~     Me.columnTotalPurchaseAmount.Allo~dulla^@204~ se
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Function NewInvoiceRow() As~dulla^@204~             Return CType(Me.NewRow,In~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Protected Overrides Function NewRow~dulla^@204~ yVal builder As System.Data.DataRowBu~dulla^@204~ tem.Data.DataRow
            Return ~dulla^@204~ w(builder)
        End Function
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Protected Overrides F~dulla^@204~ wType() As System.Type
            R~dulla^@204~ (InvoiceRow)
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Protected Overrides~dulla^@204~ nged(ByVal e As System.Data.DataRowCh~dulla^@204~ )
            MyBase.OnRowChanged(e)~dulla^@204~  If (Not (Me.InvoiceRowChangedEvent) ~dulla^@204~ hen
                RaiseEvent Invoi~dulla^@204~ Me, New InvoiceRowChangeEvent(CType(e~dulla^@204~ ow), e.Action))
            End If
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ rides Sub OnRowChanging(ByVal e As Sy~dulla^@204~ aRowChangeEventArgs)
            MyB~dulla^@204~ ging(e)
            If (Not (Me.Invo~dulla^@204~ gEvent) Is Nothing) Then
           ~dulla^@204~ nt InvoiceRowChanging(Me, New Invoice~dulla^@204~ t(CType(e.Row,InvoiceRow), e.Action))~dulla^@204~  End If
        End Sub
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Protected Overrides Sub OnRow~dulla^@204~  e As System.Data.DataRowChangeEventA~dulla^@204~      MyBase.OnRowDeleted(e)
        ~dulla^@204~ Me.InvoiceRowDeletedEvent) Is Nothing~dulla^@204~            RaiseEvent InvoiceRowDelet~dulla^@204~ voiceRowChangeEvent(CType(e.Row,InvoiceRow), e.Action))
            End If
  ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pro~dulla^@204~ des Sub OnRowDeleting(ByVal e As Syst~dulla^@204~ owChangeEventArgs)
            MyBas~dulla^@204~ ng(e)
            If (Not (Me.Invoic~dulla^@204~ vent) Is Nothing) Then
             ~dulla^@204~  InvoiceRowDeleting(Me, New InvoiceRo~dulla^@204~ CType(e.Row,InvoiceRow), e.Action))
~dulla^@204~ nd If
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Sub RemoveInvoiceRow(ByV~dulla^@204~ oiceRow)
            Me.Rows.Remove(~dulla^@204~  End Sub
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ hared Function GetTypedTableSchema(By~dulla^@204~ tem.Xml.Schema.XmlSchemaSet) As Syste~dulla^@204~ XmlSchemaComplexType
            Dim~dulla^@204~ em.Xml.Schema.XmlSchemaComplexType = ~dulla^@204~ l.Schema.XmlSchemaComplexType
      ~dulla^@204~ uence As System.Xml.Schema.XmlSchemaS~dulla^@204~  System.Xml.Schema.XmlSchemaSequence~dulla^@204~ Dim ds As InventoryControlSystemDataS~dulla^@204~ ntoryControlSystemDataSet
          ~dulla^@204~ etSchemaSerializable)
            Di~dulla^@204~ tem.Xml.Schema.XmlSchemaAny = New Sys~dulla^@204~ a.XmlSchemaAny
            any1.Name~dulla^@204~ ://www.w3.org/2001/XMLSchema"
      ~dulla^@204~ nOccurs = New Decimal(0)
           ~dulla^@204~ rs = Decimal.MaxValue
            an~dulla^@204~ tents = System.Xml.Schema.XmlSchemaCo~dulla^@204~ ng.Lax
            sequence.Items.Ad~dulla^@204~         Dim any2 As System.Xml.Schema~dulla^@204~  = New System.Xml.Schema.XmlSchemaAny~dulla^@204~  any2.Namespace = "urn:schemas-micros~dulla^@204~ iffgram-v1"
            any2.MinOccu~dulla^@204~ mal(1)
            any2.ProcessConte~dulla^@204~ Xml.Schema.XmlSchemaContentProcessing~dulla^@204~      sequence.Items.Add(any2)
      ~dulla^@204~ ribute1 As System.Xml.Schema.XmlSchem~dulla^@204~ New System.Xml.Schema.XmlSchemaAttrib~dulla^@204~     attribute1.Name = "namespace"
  ~dulla^@204~ ribute1.FixedValue = ds.Namespace
  ~dulla^@204~ e.Attributes.Add(attribute1)
       ~dulla^@204~ ibute2 As System.Xml.Schema.XmlSchema~dulla^@204~ ew System.Xml.Schema.XmlSchemaAttribu~dulla^@204~    attribute2.Name = "tableTypeName"~dulla^@204~ attribute2.FixedValue = "InvoiceDataT~dulla^@204~       type.Attributes.Add(attribute2)~dulla^@204~  type.Particle = sequence
          ~dulla^@204~ 
        End Function
    End Class~dulla^@204~ System.CodeDom.Compiler.GeneratedCode~dulla^@204~ stem.Data.Design.TypedDataSetGenerato~dulla^@204~ ),  _
     System.Serializable(),  _~dulla^@204~ .Xml.Serialization.XmlSchemaProviderA~dulla^@204~ TypedTableSchema")>  _
    Partial P~dulla^@204~ rderDataTable
        Inherits Syste~dulla^@204~ ble
        Implements System.Collec~dulla^@204~ able
        
        Private colum~dulla^@204~ ystem.Data.DataColumn
        
    ~dulla^@204~ olumnPartNo As System.Data.DataColumn~dulla^@204~        Private columnDescription As S~dulla^@204~ taColumn
        
        Private c~dulla^@204~  As System.Data.DataColumn
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Sub New()
         ~dulla^@204~ 
            Me.TableName = "Order"~dulla^@204~ Me.BeginInit
            Me.InitClas~dulla^@204~   Me.EndInit
        End Sub
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Friend Sub New(ByVal tab~dulla^@204~ Data.DataTable)
            MyBase.N~dulla^@204~    Me.TableName = table.TableName
  ~dulla^@204~ (table.CaseSensitive <> table.DataSet~dulla^@204~ e) Then
                Me.CaseSensi~dulla^@204~ CaseSensitive
            End If
  ~dulla^@204~ (table.Locale.ToString <> table.DataS~dulla^@204~ tring) Then
                Me.Local~dulla^@204~ ale
            End If
            ~dulla^@204~ espace <> table.DataSet.Namespace) Th~dulla^@204~        Me.Namespace = table.Namespace~dulla^@204~  End If
            Me.Prefix = tabl~dulla^@204~          Me.MinimumCapacity = table.M~dulla^@204~ y
        End Sub
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Protected Sub New(ByVal info As Sys~dulla^@204~ erialization.SerializationInfo, ByVal~dulla^@204~ ystem.Runtime.Serialization.Streaming~dulla^@204~          MyBase.New(info, context)
 ~dulla^@204~ .InitVars
        End Sub
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public ReadOnly Property Or~dulla^@204~  As System.Data.DataColumn
         ~dulla^@204~            Return Me.columnOrderNo
 ~dulla^@204~ d Get
        End Property
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public ReadOnly Property P~dulla^@204~  As System.Data.DataColumn
         ~dulla^@204~            Return Me.columnPartNo
  ~dulla^@204~  Get
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public ReadOnly Property De~dulla^@204~ mn() As System.Data.DataColumn
     ~dulla^@204~                Return Me.columnDescri~dulla^@204~       End Get
        End Property
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public ReadOnly Pr~dulla^@204~ tyColumn() As System.Data.DataColumn~dulla^@204~ Get
                Return Me.column~dulla^@204~          End Get
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute(),  _
         System.Compone~dulla^@204~ able(false)>  _
        Public ReadO~dulla^@204~ Count() As Integer
            Get
~dulla^@204~    Return Me.Rows.Count
            ~dulla^@204~     End Property
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Default ReadOnly Property Item~dulla^@204~ As Integer) As OrderRow
            ~dulla^@204~         Return CType(Me.Rows(index),O~dulla^@204~          End Get
        End Propert~dulla^@204~         Public Event OrderRowChanging~dulla^@204~ hangeEventHandler
        
        ~dulla^@204~ OrderRowChanged As OrderRowChangeEven~dulla^@204~      
        Public Event OrderRowD~dulla^@204~ derRowChangeEventHandler
        
 ~dulla^@204~  Event OrderRowDeleted As OrderRowCha~dulla^@204~ er
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ ds Sub AddOrderRow(ByVal row As Order~dulla^@204~      Me.Rows.Add(row)
        End Su~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Overload~dulla^@204~ dOrderRow(ByVal OrderNo As String, By~dulla^@204~  String, ByVal Description As String,~dulla^@204~ ty As Integer) As OrderRow
         ~dulla^@204~ erRow As OrderRow = CType(Me.NewRow,O~dulla^@204~          rowOrderRow.ItemArray = New ~dulla^@204~ erNo, PartNo, Description, Quantity}~dulla^@204~ Me.Rows.Add(rowOrderRow)
           ~dulla^@204~ derRow
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Function FindByOrd~dulla^@204~ derNo As String) As OrderRow
       ~dulla^@204~ Type(Me.Rows.Find(New Object() {Order~dulla^@204~ )
        End Function
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Overridable Function Ge~dulla^@204~  As System.Collections.IEnumerator Im~dulla^@204~ em.Collections.IEnumerable.GetEnumera~dulla^@204~     Return Me.Rows.GetEnumerator
   ~dulla^@204~ tion
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ ides Function Clone() As System.Data.~dulla^@204~           Dim cln As OrderDataTable =~dulla^@204~ .Clone,OrderDataTable)
            c~dulla^@204~             Return cln
        End F~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Protected~dulla^@204~ nction CreateInstance() As System.Dat~dulla^@204~             Return New OrderDataTable~dulla^@204~  Function
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Sub InitVars()
            Me.columnOrderNo = MyBase.Columns("OrderNo")
     ~dulla^@204~ umnPartNo = MyBase.Columns("PartNo")~dulla^@204~ Me.columnDescription = MyBase.Columns~dulla^@204~ ")
            Me.columnQuantity = M~dulla^@204~ ("Quantity")
        End Sub
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Private Sub InitClass()~dulla^@204~ Me.columnOrderNo = New System.Data.Da~dulla^@204~ erNo", GetType(String), Nothing, Syst~dulla^@204~ ngType.Element)
            MyBase.C~dulla^@204~ .columnOrderNo)
            Me.colum~dulla^@204~  System.Data.DataColumn("PartNo", Get~dulla^@204~  Nothing, System.Data.MappingType.Ele~dulla^@204~       MyBase.Columns.Add(Me.columnPar~dulla^@204~      Me.columnDescription = New Syste~dulla^@204~ lumn("Description", GetType(String), ~dulla^@204~ em.Data.MappingType.Element)
       ~dulla^@204~ olumns.Add(Me.columnDescription)
   ~dulla^@204~ olumnQuantity = New System.Data.DataC~dulla^@204~ ty", GetType(Integer), Nothing, Syste~dulla^@204~ gType.Element)
            MyBase.Co~dulla^@204~ columnQuantity)
            Me.Const~dulla^@204~ w System.Data.UniqueConstraint("Const~dulla^@204~ System.Data.DataColumn() {Me.columnOr~dulla^@204~ )
            Me.columnOrderNo.Allow~dulla^@204~ e
            Me.columnOrderNo.Uniqu~dulla^@204~          Me.columnOrderNo.MaxLength =~dulla^@204~     Me.columnPartNo.AllowDBNull = fal~dulla^@204~    Me.columnPartNo.MaxLength = 20
  ~dulla^@204~ columnDescription.AllowDBNull = false~dulla^@204~  Me.columnDescription.MaxLength = 20~dulla^@204~ Me.columnQuantity.AllowDBNull = false~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ ion NewOrderRow() As OrderRow
      ~dulla^@204~ CType(Me.NewRow,OrderRow)
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Protec~dulla^@204~  Function NewRowFromBuilder(ByVal bui~dulla^@204~ m.Data.DataRowBuilder) As System.Data~dulla^@204~          Return New OrderRow(builder)~dulla^@204~  Function
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ ed Overrides Function GetRowType() As~dulla^@204~ 
            Return GetType(OrderRow)~dulla^@204~  Function
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ ed Overrides Sub OnRowChanged(ByVal e~dulla^@204~ ta.DataRowChangeEventArgs)
         ~dulla^@204~ owChanged(e)
            If (Not (Me~dulla^@204~ gedEvent) Is Nothing) Then
         ~dulla^@204~ vent OrderRowChanged(Me, New OrderRow~dulla^@204~ Type(e.Row,OrderRow), e.Action))
   ~dulla^@204~ If
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Protected Overrides Sub OnRowChang~dulla^@204~ s System.Data.DataRowChangeEventArgs)~dulla^@204~  MyBase.OnRowChanging(e)
           ~dulla^@204~ OrderRowChangingEvent) Is Nothing) Th~dulla^@204~        RaiseEvent OrderRowChanging(Me~dulla^@204~ wChangeEvent(CType(e.Row,OrderRow), e~dulla^@204~           End If
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Protected Overrides ~dulla^@204~ ted(ByVal e As System.Data.DataRowCha~dulla^@204~ 
            MyBase.OnRowDeleted(e)~dulla^@204~ If (Not (Me.OrderRowDeletedEvent) Is ~dulla^@204~ 
                RaiseEvent OrderRow~dulla^@204~ ew OrderRowChangeEvent(CType(e.Row,Or~dulla^@204~ tion))
            End If
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Protected ~dulla^@204~  OnRowDeleting(ByVal e As System.Data~dulla^@204~ eEventArgs)
            MyBase.OnRow~dulla^@204~             If (Not (Me.OrderRowDelet~dulla^@204~ Nothing) Then
                RaiseE~dulla^@204~ Deleting(Me, New OrderRowChangeEvent(~dulla^@204~ rderRow), e.Action))
            End~dulla^@204~ End Sub
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ b RemoveOrderRow(ByVal row As OrderRo~dulla^@204~    Me.Rows.Remove(row)
        End S~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Shared ~dulla^@204~ ypedTableSchema(ByVal xs As System.Xm~dulla^@204~ chemaSet) As System.Xml.Schema.XmlSch~dulla^@204~ e
            Dim type As System.Xml~dulla^@204~ hemaComplexType = New System.Xml.Sche~dulla^@204~ omplexType
            Dim sequence ~dulla^@204~ .Schema.XmlSchemaSequence = New Syste~dulla^@204~ XmlSchemaSequence
            Dim ds~dulla^@204~ ControlSystemDataSet = New InventoryC~dulla^@204~ ataSet
            xs.Add(ds.GetSche~dulla^@204~ e)
            Dim any1 As System.Xm~dulla^@204~ chemaAny = New System.Xml.Schema.XmlS~dulla^@204~          any1.Namespace = "http://www~dulla^@204~ XMLSchema"
            any1.MinOccur~dulla^@204~ al(0)
            any1.MaxOccurs = D~dulla^@204~ ue
            any1.ProcessContents ~dulla^@204~ Schema.XmlSchemaContentProcessing.Lax~dulla^@204~  sequence.Items.Add(any1)
          ~dulla^@204~  System.Xml.Schema.XmlSchemaAny = New~dulla^@204~ chema.XmlSchemaAny
            any2.~dulla^@204~ urn:schemas-microsoft-com:xml-diffgra~dulla^@204~       any2.MinOccurs = New Decimal(1)~dulla^@204~  any2.ProcessContents = System.Xml.Sc~dulla^@204~ aContentProcessing.Lax
            s~dulla^@204~ .Add(any2)
            Dim attribute~dulla^@204~ ml.Schema.XmlSchemaAttribute = New Sy~dulla^@204~ ma.XmlSchemaAttribute
            at~dulla^@204~  = "namespace"
            attribute~dulla^@204~ = ds.Namespace
            type.Attr~dulla^@204~ tribute1)
            Dim attribute2~dulla^@204~ l.Schema.XmlSchemaAttribute = New Sys~dulla^@204~ a.XmlSchemaAttribute
            att~dulla^@204~ = "tableTypeName"
            attrib~dulla^@204~ ue = "OrderDataTable"
            ty~dulla^@204~ .Add(attribute2)
            type.Pa~dulla^@204~ ence
            Return type
      ~dulla^@204~ n
    End Class
    
    <System.C~dulla^@204~ er.GeneratedCodeAttribute("System.Dat~dulla^@204~ dDataSetGenerator", "2.0.0.0"),  _
 ~dulla^@204~ rializable(),  _
     System.Xml.Ser~dulla^@204~ lSchemaProviderAttribute("GetTypedTab~dulla^@204~ _
    Partial Public Class ProductIn~dulla^@204~         Inherits System.Data.DataTabl~dulla^@204~ plements System.Collections.IEnumerab~dulla^@204~ 
        Private columnPartNo As Syst~dulla^@204~ olumn
        
        Private colu~dulla^@204~  As System.Data.DataColumn
        ~dulla^@204~ ate columnBrand As System.Data.DataCo~dulla^@204~  
        Private columnOrigin As Sy~dulla^@204~ aColumn
        
        Private co~dulla^@204~  As System.Data.DataColumn
        ~dulla^@204~ ate columnSellingPrice1 As System.Dat~dulla^@204~ 
        
        Private columnSell~dulla^@204~ System.Data.DataColumn
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Sub New()
            M~dulla^@204~           Me.TableName = "ProductInfo~dulla^@204~   Me.BeginInit
            Me.InitCl~dulla^@204~     Me.EndInit
        End Sub
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Friend Sub New(ByVal t~dulla^@204~ m.Data.DataTable)
            MyBase~dulla^@204~      Me.TableName = table.TableName
~dulla^@204~ f (table.CaseSensitive <> table.DataS~dulla^@204~ ive) Then
                Me.CaseSen~dulla^@204~ e.CaseSensitive
            End If
~dulla^@204~ f (table.Locale.ToString <> table.Dat~dulla^@204~ oString) Then
                Me.Loc~dulla^@204~ ocale
            End If
          ~dulla^@204~ amespace <> table.DataSet.Namespace) ~dulla^@204~          Me.Namespace = table.Namespa~dulla^@204~    End If
            Me.Prefix = ta~dulla^@204~            Me.MinimumCapacity = table~dulla^@204~ ity
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Protected Sub New(ByVal info As S~dulla^@204~ .Serialization.SerializationInfo, ByV~dulla^@204~  System.Runtime.Serialization.Streami~dulla^@204~            MyBase.New(info, context)~dulla^@204~ Me.InitVars
        End Sub
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly P~dulla^@204~ oColumn() As System.Data.DataColumn
~dulla^@204~ et
                Return Me.columnP~dulla^@204~       End Get
        End Property
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public ReadOnly Pr~dulla^@204~ tNameColumn() As System.Data.DataColu~dulla^@204~    Get
                Return Me.col~dulla^@204~ e
            End Get
        End P~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Re~dulla^@204~ ty BrandColumn() As System.Data.DataC~dulla^@204~       Get
                Return Me.~dulla^@204~             End Get
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public ReadO~dulla^@204~ OriginColumn() As System.Data.DataCol~dulla^@204~     Get
                Return Me.co~dulla^@204~            End Get
        End Prope~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public ReadOn~dulla^@204~ nitPriceColumn() As System.Data.DataC~dulla^@204~       Get
                Return Me.~dulla^@204~ ce
            End Get
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public R~dulla^@204~ rty SellingPrice1Column() As System.D~dulla^@204~ n
            Get
                R~dulla^@204~ mnSellingPrice1
            End Get~dulla^@204~ Property
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ eadOnly Property SellingPrice2Column(~dulla^@204~ ata.DataColumn
            Get
    ~dulla^@204~ eturn Me.columnSellingPrice2
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~       System.ComponentModel.Browsable~dulla^@204~         Public ReadOnly Property Coun~dulla^@204~ r
            Get
                R~dulla^@204~ .Count
            End Get
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ adOnly Property Item(ByVal index As I~dulla^@204~ oductInfoRow
            Get
      ~dulla^@204~ urn CType(Me.Rows(index),ProductInfoR~dulla^@204~     End Get
        End Property
  ~dulla^@204~    Public Event ProductInfoRowChangin~dulla^@204~ nfoRowChangeEventHandler
        
 ~dulla^@204~  Event ProductInfoRowChanged As Produ~dulla^@204~ geEventHandler
        
        Pub~dulla^@204~ ductInfoRowDeleting As ProductInfoRow~dulla^@204~ ndler
        
        Public Event~dulla^@204~ owDeleted As ProductInfoRowChangeEven~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public O~dulla^@204~ AddProductInfoRow(ByVal row As Produc~dulla^@204~           Me.Rows.Add(row)
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Ove~dulla^@204~ on AddProductInfoRow(ByVal PartNo As ~dulla^@204~  ProductName As String, ByVal Brand A~dulla^@204~ al Origin As String, ByVal UnitPrice ~dulla^@204~ Val SellingPrice1 As Double, ByVal Se~dulla^@204~ s Double) As ProductInfoRow
        ~dulla^@204~ oductInfoRow As ProductInfoRow = CTyp~dulla^@204~ roductInfoRow)
            rowProduc~dulla^@204~ Array = New Object() {PartNo, Product~dulla^@204~ Origin, UnitPrice, SellingPrice1, Sel~dulla^@204~             Me.Rows.Add(rowProductInf~dulla^@204~       Return rowProductInfoRow
     ~dulla^@204~ on
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ n FindByPartNo(ByVal PartNo As String~dulla^@204~ nfoRow
            Return CType(Me.R~dulla^@204~ Object() {PartNo}),ProductInfoRow)
 ~dulla^@204~ nction
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ rridable Function GetEnumerator() As ~dulla^@204~ tions.IEnumerator Implements System.C~dulla^@204~ numerable.GetEnumerator
            ~dulla^@204~ s.GetEnumerator
        End Function~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Overrides~dulla^@204~ ne() As System.Data.DataTable
      ~dulla^@204~  As ProductInfoDataTable = CType(MyBa~dulla^@204~ uctInfoDataTable)
            cln.In~dulla^@204~        Return cln
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Protected Over~dulla^@204~ n CreateInstance() As System.Data.Dat~dulla^@204~        Return New ProductInfoDataTabl~dulla^@204~ d Function
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Sub InitVars()
            Me.colum~dulla^@204~ ase.Columns("PartNo")
            Me~dulla^@204~ tName = MyBase.Columns("ProductName")~dulla^@204~  Me.columnBrand = MyBase.Columns("Bra~dulla^@204~      Me.columnOrigin = MyBase.Columns~dulla^@204~            Me.columnUnitPrice = MyBas~dulla^@204~ itPrice")
            Me.columnSelli~dulla^@204~ Base.Columns("SellingPrice1")
      ~dulla^@204~ mnSellingPrice2 = MyBase.Columns("Sel~dulla^@204~ 
        End Sub
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Private Sub InitClass()
            ~dulla^@204~ No = New System.Data.DataColumn("Part~dulla^@204~ String), Nothing, System.Data.Mapping~dulla^@204~ 
            MyBase.Columns.Add(Me.c~dulla^@204~ 
            Me.columnProductName = N~dulla^@204~ a.DataColumn("ProductName", GetType(S~dulla^@204~ ng, System.Data.MappingType.Element)~dulla^@204~ MyBase.Columns.Add(Me.columnProductNa~dulla^@204~     Me.columnBrand = New System.Data.~dulla^@204~ rand", GetType(String), Nothing, Syst~dulla^@204~ ngType.Element)
            MyBase.C~dulla^@204~ .columnBrand)
            Me.columnO~dulla^@204~ ystem.Data.DataColumn("Origin", GetTy~dulla^@204~ othing, System.Data.MappingType.Eleme~dulla^@204~     MyBase.Columns.Add(Me.columnOrigi~dulla^@204~    Me.columnUnitPrice = New System.Da~dulla^@204~ ("UnitPrice", GetType(Double), Nothin~dulla^@204~ a.MappingType.Element)
            M~dulla^@204~ .Add(Me.columnUnitPrice)
           ~dulla^@204~ lingPrice1 = New System.Data.DataColu~dulla^@204~ ice1", GetType(Double), Nothing, Syst~dulla^@204~ ngType.Element)
            MyBase.C~dulla^@204~ .columnSellingPrice1)
            Me~dulla^@204~ gPrice2 = New System.Data.DataColumn(~dulla^@204~ 2", GetType(Double), Nothing, System.~dulla^@204~ ype.Element)
            MyBase.Colu~dulla^@204~ lumnSellingPrice2)
            Me.Co~dulla^@204~ (New System.Data.UniqueConstraint("Co~dulla^@204~ ew System.Data.DataColumn() {Me.colum~dulla^@204~ e))
            Me.columnPartNo.Allo~dulla^@204~ se
            Me.columnPartNo.Uniqu~dulla^@204~          Me.columnPartNo.MaxLength = ~dulla^@204~    Me.columnProductName.AllowDBNull =~dulla^@204~        Me.columnProductName.MaxLength~dulla^@204~       Me.columnBrand.AllowDBNull = fa~dulla^@204~     Me.columnBrand.MaxLength = 20
  ~dulla^@204~ columnOrigin.AllowDBNull = false
   ~dulla^@204~ olumnOrigin.MaxLength = 20
         ~dulla^@204~ nitPrice.AllowDBNull = false
       ~dulla^@204~ nSellingPrice1.AllowDBNull = false
 ~dulla^@204~ .columnSellingPrice2.AllowDBNull = fa~dulla^@204~ End Sub
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ nction NewProductInfoRow() As Product~dulla^@204~         Return CType(Me.NewRow,Produc~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Protected Overrides Function NewRow~dulla^@204~ yVal builder As System.Data.DataRowBu~dulla^@204~ tem.Data.DataRow
            Return ~dulla^@204~ foRow(builder)
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Protected Overrid~dulla^@204~ etRowType() As System.Type
         ~dulla^@204~ Type(ProductInfoRow)
        End Fun~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Protected O~dulla^@204~ OnRowChanged(ByVal e As System.Data.D~dulla^@204~ ventArgs)
            MyBase.OnRowCh~dulla^@204~          If (Not (Me.ProductInfoRowChangedEvent) Is Nothing) Then
            ~dulla^@204~ t ProductInfoRowChanged(Me, New Produ~dulla^@204~ geEvent(CType(e.Row,ProductInfoRow), ~dulla^@204~            End If
        End Sub
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Protected Overrides~dulla^@204~ nging(ByVal e As System.Data.DataRowC~dulla^@204~ s)
            MyBase.OnRowChanging(~dulla^@204~    If (Not (Me.ProductInfoRowChanging~dulla^@204~ hing) Then
                RaiseEven~dulla^@204~ RowChanging(Me, New ProductInfoRowCha~dulla^@204~ e(e.Row,ProductInfoRow), e.Action))
~dulla^@204~ nd If
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Protected Overrides Sub OnRowDe~dulla^@204~  As System.Data.DataRowChangeEventArg~dulla^@204~    MyBase.OnRowDeleted(e)
          ~dulla^@204~ .ProductInfoRowDeletedEvent) Is Nothi~dulla^@204~              RaiseEvent ProductInfoRo~dulla^@204~ New ProductInfoRowChangeEvent(CType(e~dulla^@204~ nfoRow), e.Action))
            End ~dulla^@204~ nd Sub
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ Overrides Sub OnRowDeleting(ByVal e A~dulla^@204~ .DataRowChangeEventArgs)
           ~dulla^@204~ Deleting(e)
            If (Not (Me.~dulla^@204~ wDeletingEvent) Is Nothing) Then
   ~dulla^@204~ RaiseEvent ProductInfoRowDeleting(Me,~dulla^@204~ nfoRowChangeEvent(CType(e.Row,Product~dulla^@204~ ction))
            End If
        ~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Su~dulla^@204~ ctInfoRow(ByVal row As ProductInfoRow~dulla^@204~   Me.Rows.Remove(row)
        End Su~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Shared F~dulla^@204~ pedTableSchema(ByVal xs As System.Xml~dulla^@204~ hemaSet) As System.Xml.Schema.XmlSche~dulla^@204~ 
            Dim type As System.Xml.~dulla^@204~ emaComplexType = New System.Xml.Schem~dulla^@204~ mplexType
            Dim sequence A~dulla^@204~ Schema.XmlSchemaSequence = New System~dulla^@204~ mlSchemaSequence
            Dim ds ~dulla^@204~ ontrolSystemDataSet = New InventoryCo~dulla^@204~ taSet
            xs.Add(ds.GetSchem~dulla^@204~ )
            Dim any1 As System.Xml~dulla^@204~ hemaAny = New System.Xml.Schema.XmlSc~dulla^@204~         any1.Namespace = "http://www.~dulla^@204~ MLSchema"
            any1.MinOccurs~dulla^@204~ l(0)
            any1.MaxOccurs = De~dulla^@204~ e
            any1.ProcessContents =~dulla^@204~ chema.XmlSchemaContentProcessing.Lax~dulla^@204~ sequence.Items.Add(any1)
           ~dulla^@204~ System.Xml.Schema.XmlSchemaAny = New ~dulla^@204~ hema.XmlSchemaAny
            any2.N~dulla^@204~ rn:schemas-microsoft-com:xml-diffgram~dulla^@204~      any2.MinOccurs = New Decimal(1)~dulla^@204~ any2.ProcessContents = System.Xml.Sch~dulla^@204~ ContentProcessing.Lax
            se~dulla^@204~ Add(any2)
            Dim attribute1~dulla^@204~ l.Schema.XmlSchemaAttribute = New Sys~dulla^@204~ a.XmlSchemaAttribute
            att~dulla^@204~ = "namespace"
            attribute1~dulla^@204~  ds.Namespace
            type.Attri~dulla^@204~ ribute1)
            Dim attribute2 ~dulla^@204~ .Schema.XmlSchemaAttribute = New Syst~dulla^@204~ .XmlSchemaAttribute
            attr~dulla^@204~  "tableTypeName"
            attribu~dulla^@204~ e = "ProductInfoDataTable"
         ~dulla^@204~ butes.Add(attribute2)
            ty~dulla^@204~  sequence
            Return type
 ~dulla^@204~ nction
    End Class
    
    <Sys~dulla^@204~ ompiler.GeneratedCodeAttribute("Syste~dulla^@204~ .TypedDataSetGenerator", "2.0.0.0"), ~dulla^@204~ em.Serializable(),  _
     System.Xm~dulla^@204~ on.XmlSchemaProviderAttribute("GetTyp~dulla^@204~ ")>  _
    Partial Public Class Prod~dulla^@204~ 
        Inherits System.Data.DataTa~dulla^@204~ Implements System.Collections.IEnumer~dulla^@204~  
        Private columnPartNo As Sy~dulla^@204~ aColumn
        
        Private co~dulla^@204~ me As System.Data.DataColumn
       ~dulla^@204~ ivate columnBrand As System.Data.Data~dulla^@204~    
        Private columnOrigin As ~dulla^@204~ ataColumn
        
        Private ~dulla^@204~  As System.Data.DataColumn
        ~dulla^@204~ ate columnReorderLevel As System.Data~dulla^@204~         
        Private columnSelli~dulla^@204~ ystem.Data.DataColumn
        
    ~dulla^@204~ olumnSellingPrice2 As System.Data.Dat~dulla^@204~     
        Private columnNetWeight~dulla^@204~ ta.DataColumn
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Sub New()
            MyBase.New~dulla^@204~  Me.TableName = "Products"
         ~dulla^@204~ it
            Me.InitClass
       ~dulla^@204~ it
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Friend Sub New(ByVal table As Syst~dulla^@204~ able)
            MyBase.New
      ~dulla^@204~ eName = table.TableName
            ~dulla^@204~ eSensitive <> table.DataSet.CaseSensi~dulla^@204~                Me.CaseSensitive = tab~dulla^@204~ ive
            End If
            ~dulla^@204~ ale.ToString <> table.DataSet.Locale.~dulla^@204~ n
                Me.Locale = table.~dulla^@204~        End If
            If (table.~dulla^@204~ table.DataSet.Namespace) Then
      ~dulla^@204~ Namespace = table.Namespace
        ~dulla^@204~            Me.Prefix = table.Prefix
~dulla^@204~ e.MinimumCapacity = table.MinimumCapa~dulla^@204~  End Sub
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ d Sub New(ByVal info As System.Runtim~dulla^@204~ on.SerializationInfo, ByVal context A~dulla^@204~ ime.Serialization.StreamingContext)
~dulla^@204~ yBase.New(info, context)
           ~dulla^@204~ 
        End Sub
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public ReadOnly Property PartNoColumn~dulla^@204~ Data.DataColumn
            Get
   ~dulla^@204~ Return Me.columnPartNo
            E~dulla^@204~    End Property
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic ReadOnly Property ProductNameCo~dulla^@204~ tem.Data.DataColumn
            Get~dulla^@204~     Return Me.columnProductName
    ~dulla^@204~ et
        End Property
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public ReadOnly Property Bran~dulla^@204~ System.Data.DataColumn
            G~dulla^@204~        Return Me.columnBrand
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public ReadOnly Property OriginC~dulla^@204~ stem.Data.DataColumn
            Get~dulla^@204~      Return Me.columnOrigin
        ~dulla^@204~         End Property
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public ReadOnly Property ShelfNoC~dulla^@204~ stem.Data.DataColumn
            Get~dulla^@204~      Return Me.columnShelfNo
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public ReadOnly Property Reorder~dulla^@204~  As System.Data.DataColumn
         ~dulla^@204~            Return Me.columnReorderLev~dulla^@204~    End Get
        End Property
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public ReadOnly Prope~dulla^@204~ ice1Column() As System.Data.DataColum~dulla^@204~   Get
                Return Me.colu~dulla^@204~ e1
            End Get
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public R~dulla^@204~ rty SellingPrice2Column() As System.D~dulla^@204~ n
            Get
                R~dulla^@204~ mnSellingPrice2
            End Get~dulla^@204~ Property
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ eadOnly Property NetWeightColumn() As~dulla^@204~ DataColumn
            Get
        ~dulla^@204~ n Me.columnNetWeight
            End~dulla^@204~  End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribu~dulla^@204~       System.ComponentModel.Browsable~dulla^@204~         Public ReadOnly Property Coun~dulla^@204~ r
            Get
                R~dulla^@204~ .Count
            End Get
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ adOnly Property Item(ByVal index As I~dulla^@204~ oductsRow
            Get
         ~dulla^@204~  CType(Me.Rows(index),ProductsRow)
 ~dulla^@204~ d Get
        End Property
        ~dulla^@204~ lic Event ProductsRowChanging As Prod~dulla^@204~ EventHandler
        
        Publi~dulla^@204~ ctsRowChanged As ProductsRowChangeEve~dulla^@204~       
        Public Event Products~dulla^@204~ s ProductsRowChangeEventHandler
    ~dulla^@204~  Public Event ProductsRowDeleted As P~dulla^@204~ ngeEventHandler
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Overloads Sub AddProductsRow(By~dulla^@204~ oductsRow)
            Me.Rows.Add(r~dulla^@204~ End Sub
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ erloads Function AddProductsRow(ByVal~dulla^@204~ ring, ByVal ProductName As String, By~dulla^@204~ String, ByVal Origin As String, ByVal~dulla^@204~ tring, ByVal ReorderLevel As Integer,~dulla^@204~ gPrice1 As Double, ByVal SellingPrice~dulla^@204~ ByVal NetWeight As Double) As Product~dulla^@204~      Dim rowProductsRow As ProductsRo~dulla^@204~ NewRow,ProductsRow)
            rowP~dulla^@204~ emArray = New Object() {PartNo, Produ~dulla^@204~ , Origin, ShelfNo, ReorderLevel, Sell~dulla^@204~ llingPrice2, NetWeight}
            ~dulla^@204~ owProductsRow)
            Return ro~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Function FindByPartNo(ByV~dulla^@204~ String) As ProductsRow
            R~dulla^@204~ e.Rows.Find(New Object() {PartNo}),Pr~dulla^@204~        End Function
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Overridable Function GetEnu~dulla^@204~ System.Collections.IEnumerator Implem~dulla^@204~ ollections.IEnumerable.GetEnumerator~dulla^@204~ Return Me.Rows.GetEnumerator
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~  Function Clone() As System.Data.Data~dulla^@204~       Dim cln As ProductsDataTable = ~dulla^@204~ Clone,ProductsDataTable)
           ~dulla^@204~ 
            Return cln
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Protect~dulla^@204~ Function CreateInstance() As System.D~dulla^@204~ 
            Return New ProductsData~dulla^@204~   End Function
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ iend Sub InitVars()
            Me.c~dulla^@204~  MyBase.Columns("PartNo")
          ~dulla^@204~ oductName = MyBase.Columns("ProductNa~dulla^@204~      Me.columnBrand = MyBase.Columns(~dulla^@204~          Me.columnOrigin = MyBase.Col~dulla^@204~ )
            Me.columnShelfNo = MyB~dulla^@204~ ShelfNo")
            Me.columnReord~dulla^@204~ ase.Columns("ReorderLevel")
        ~dulla^@204~ SellingPrice1 = MyBase.Columns("Selli~dulla^@204~            Me.columnSellingPrice2 = M~dulla^@204~ ("SellingPrice2")
            Me.col~dulla^@204~ = MyBase.Columns("NetWeight")
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Private~dulla^@204~ s()
            Me.columnPartNo = Ne~dulla^@204~ .DataColumn("PartNo", GetType(String)~dulla^@204~ stem.Data.MappingType.Element)
     ~dulla^@204~ .Columns.Add(Me.columnPartNo)
      ~dulla^@204~ mnProductName = New System.Data.DataC~dulla^@204~ tName", GetType(String), Nothing, Sys~dulla^@204~ ingType.Element)
            MyBase.~dulla^@204~ e.columnProductName)
            Me.~dulla^@204~  New System.Data.DataColumn("Brand", ~dulla^@204~ g), Nothing, System.Data.MappingType.~dulla^@204~          MyBase.Columns.Add(Me.column~dulla^@204~        Me.columnOrigin = New System.D~dulla^@204~ n("Origin", GetType(String), Nothing,~dulla^@204~ MappingType.Element)
            MyB~dulla^@204~ dd(Me.columnOrigin)
            Me.c~dulla^@204~ = New System.Data.DataColumn("ShelfNo~dulla^@204~ ring), Nothing, System.Data.MappingTy~dulla^@204~             MyBase.Columns.Add(Me.col~dulla^@204~             Me.columnReorderLevel = N~dulla^@204~ a.DataColumn("ReorderLevel", GetType(~dulla^@204~ hing, System.Data.MappingType.Element~dulla^@204~   MyBase.Columns.Add(Me.columnReorder~dulla^@204~        Me.columnSellingPrice1 = New S~dulla^@204~ taColumn("SellingPrice1", GetType(Dou~dulla^@204~ , System.Data.MappingType.Element)
 ~dulla^@204~ Base.Columns.Add(Me.columnSellingPric~dulla^@204~     Me.columnSellingPrice2 = New Syst~dulla^@204~ olumn("SellingPrice2", GetType(Double~dulla^@204~ ystem.Data.MappingType.Element)
    ~dulla^@204~ e.Columns.Add(Me.columnSellingPrice2)~dulla^@204~  Me.columnNetWeight = New System.Data~dulla^@204~ NetWeight", GetType(Double), Nothing,~dulla^@204~ MappingType.Element)
            MyB~dulla^@204~ dd(Me.columnNetWeight)
            M~dulla^@204~ .Add(New System.Data.UniqueConstraint~dulla^@204~ ", New System.Data.DataColumn() {Me.c~dulla^@204~  true))
            Me.columnPartNo.~dulla^@204~  false
            Me.columnPartNo.U~dulla^@204~ 
            Me.columnPartNo.MaxLengt~dulla^@204~        Me.columnProductName.AllowDBNu~dulla^@204~            Me.columnProductName.MaxLe~dulla^@204~           Me.columnBrand.AllowDBNull ~dulla^@204~         Me.columnBrand.MaxLength = 20~dulla^@204~  Me.columnOrigin.MaxLength = 20
    ~dulla^@204~ lumnShelfNo.AllowDBNull = false
    ~dulla^@204~ lumnShelfNo.MaxLength = 20
         ~dulla^@204~ eorderLevel.AllowDBNull = false
    ~dulla^@204~ lumnSellingPrice1.AllowDBNull = false~dulla^@204~  Me.columnNetWeight.AllowDBNull = fal~dulla^@204~ nd Sub
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ ction NewProductsRow() As ProductsRow~dulla^@204~  Return CType(Me.NewRow,ProductsRow)~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ d Overrides Function NewRowFromBuilde~dulla^@204~ er As System.Data.DataRowBuilder) As ~dulla^@204~ ataRow
            Return New Produc~dulla^@204~ )
        End Function
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Protected Overrides Function G~dulla^@204~ s System.Type
            Return Get~dulla^@204~ Row)
        End Function
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Protected Overrides Sub OnR~dulla^@204~ al e As System.Data.DataRowChangeEven~dulla^@204~        MyBase.OnRowChanged(e)
      ~dulla^@204~  (Me.ProductsRowChangedEvent) Is Noth~dulla^@204~               RaiseEvent ProductsRowC~dulla^@204~ w ProductsRowChangeEvent(CType(e.Row,~dulla^@204~  e.Action))
            End If
    ~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Prote~dulla^@204~ s Sub OnRowChanging(ByVal e As System~dulla^@204~ ChangeEventArgs)
            MyBase.~dulla^@204~ (e)
            If (Not (Me.Products~dulla^@204~ ent) Is Nothing) Then
              ~dulla^@204~ ProductsRowChanging(Me, New ProductsR~dulla^@204~ (CType(e.Row,ProductsRow), e.Action))~dulla^@204~  End If
        End Sub
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Protected Overrides Sub OnRow~dulla^@204~  e As System.Data.DataRowChangeEventA~dulla^@204~      MyBase.OnRowDeleted(e)
        ~dulla^@204~ Me.ProductsRowDeletedEvent) Is Nothin~dulla^@204~             RaiseEvent ProductsRowDel~dulla^@204~ ProductsRowChangeEvent(CType(e.Row,Pr~dulla^@204~ .Action))
            End If
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Protect~dulla^@204~ Sub OnRowDeleting(ByVal e As System.D~dulla^@204~ angeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Pr~dulla^@204~ tingEvent) Is Nothing) Then
        ~dulla^@204~ Event ProductsRowDeleting(Me, New Pro~dulla^@204~ eEvent(CType(e.Row,ProductsRow), e.Ac~dulla^@204~        End If
        End Sub
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Sub RemoveProduc~dulla^@204~ ow As ProductsRow)
            Me.Ro~dulla^@204~ )
        End Sub
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Shared Function GetTypedTabl~dulla^@204~  xs As System.Xml.Schema.XmlSchemaSet~dulla^@204~ ml.Schema.XmlSchemaComplexType
     ~dulla^@204~ pe As System.Xml.Schema.XmlSchemaComp~dulla^@204~  System.Xml.Schema.XmlSchemaComplexTy~dulla^@204~    Dim sequence As System.Xml.Schema.~dulla^@204~ ence = New System.Xml.Schema.XmlSchem~dulla^@204~           Dim ds As InventoryControlS~dulla^@204~ = New InventoryControlSystemDataSet
~dulla^@204~ s.Add(ds.GetSchemaSerializable)
    ~dulla^@204~ ny1 As System.Xml.Schema.XmlSchemaAny~dulla^@204~ .Xml.Schema.XmlSchemaAny
           ~dulla^@204~ ce = "http://www.w3.org/2001/XMLSchem~dulla^@204~    any1.MinOccurs = New Decimal(0)
 ~dulla^@204~ y1.MaxOccurs = Decimal.MaxValue
    ~dulla^@204~ ProcessContents = System.Xml.Schema.X~dulla^@204~ ntProcessing.Lax
            sequenc~dulla^@204~ ny1)
            Dim any2 As System.~dulla^@204~ lSchemaAny = New System.Xml.Schema.Xm~dulla^@204~            any2.Namespace = "urn:sche~dulla^@204~ -com:xml-diffgram-v1"
            an~dulla^@204~ = New Decimal(1)
            any2.Pr~dulla^@204~  = System.Xml.Schema.XmlSchemaContent~dulla^@204~ x
            sequence.Items.Add(any~dulla^@204~    Dim attribute1 As System.Xml.Schem~dulla^@204~ tribute = New System.Xml.Schema.XmlSc~dulla^@204~ 
            attribute1.Name = "name~dulla^@204~        attribute1.FixedValue = ds.Nam~dulla^@204~        type.Attributes.Add(attribute1~dulla^@204~   Dim attribute2 As System.Xml.Schema~dulla^@204~ ribute = New System.Xml.Schema.XmlSch~dulla^@204~ 
            attribute2.Name = "table~dulla^@204~           attribute2.FixedValue = "Pr~dulla^@204~ le"
            type.Attributes.Add(~dulla^@204~             type.Particle = sequence~dulla^@204~ Return type
        End Function
  ~dulla^@204~     
    <System.CodeDom.Compiler.Ge~dulla^@204~ tribute("System.Data.Design.TypedData~dulla^@204~ , "2.0.0.0"),  _
     System.Seriali~dulla^@204~      System.Xml.Serialization.XmlSche~dulla^@204~ ribute("GetTypedTableSchema")>  _
  ~dulla^@204~ lic Class ProductsAvialableDataTable~dulla^@204~ rits System.Data.DataTable
        I~dulla^@204~ tem.Collections.IEnumerable
        ~dulla^@204~ vate columnPartNo As System.Data.Data~dulla^@204~    
        Private columnQtyInShop1~dulla^@204~ ta.DataColumn
        
        Priv~dulla^@204~ InShop2 As System.Data.DataColumn
  ~dulla^@204~    Private columnQtyInStore As System~dulla^@204~ umn
        
        Private column~dulla^@204~ ystem.Data.DataColumn
        
    ~dulla^@204~ olumnAmount As System.Data.DataColumn~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Sub New()~dulla^@204~  MyBase.New
            Me.TableName~dulla^@204~ vialable"
            Me.BeginInit
~dulla^@204~ e.InitClass
            Me.EndInit
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        F~dulla^@204~ (ByVal table As System.Data.DataTable~dulla^@204~   MyBase.New
            Me.TableNam~dulla^@204~ leName
            If (table.CaseSen~dulla^@204~ le.DataSet.CaseSensitive) Then
     ~dulla^@204~ .CaseSensitive = table.CaseSensitive~dulla^@204~ End If
            If (table.Locale.~dulla^@204~ able.DataSet.Locale.ToString) Then
 ~dulla^@204~   Me.Locale = table.Locale
         ~dulla^@204~           If (table.Namespace <> tabl~dulla^@204~ espace) Then
                Me.Name~dulla^@204~ .Namespace
            End If
     ~dulla^@204~ fix = table.Prefix
            Me.Mi~dulla^@204~  = table.MinimumCapacity
        End~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Protected Su~dulla^@204~ nfo As System.Runtime.Serialization.S~dulla^@204~ nfo, ByVal context As System.Runtime.~dulla^@204~ .StreamingContext)
            MyBas~dulla^@204~ ontext)
            Me.InitVars
   ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ roperty PartNoColumn() As System.Data~dulla^@204~             Get
                Retu~dulla^@204~ artNo
            End Get
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ operty QtyInShop1Column() As System.D~dulla^@204~ n
            Get
                R~dulla^@204~ mnQtyInShop1
            End Get
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ Only Property QtyInShop2Column() As S~dulla^@204~ taColumn
            Get
          ~dulla^@204~ Me.columnQtyInShop2
            End ~dulla^@204~ End Property
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic ReadOnly Property QtyInStoreColumn~dulla^@204~ Data.DataColumn
            Get
   ~dulla^@204~ Return Me.columnQtyInStore
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public ReadOnly Property TotalQtyC~dulla^@204~ stem.Data.DataColumn
            Get~dulla^@204~      Return Me.columnTotalQty
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public ReadOnly Property Amount~dulla^@204~ ystem.Data.DataColumn
            Ge~dulla^@204~       Return Me.columnAmount
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~       System.ComponentModel.Browsable~dulla^@204~         Public ReadOnly Property Coun~dulla^@204~ r
            Get
                R~dulla^@204~ .Count
            End Get
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ adOnly Property Item(ByVal index As I~dulla^@204~ oductsAvialableRow
            Get
~dulla^@204~    Return CType(Me.Rows(index),Produc~dulla^@204~ w)
            End Get
        End ~dulla^@204~      
        Public Event ProductsA~dulla^@204~ anging As ProductsAvialableRowChangeE~dulla^@204~         
        Public Event Produc~dulla^@204~ wChanged As ProductsAvialableRowChang~dulla^@204~ 
        
        Public Event Prod~dulla^@204~ RowDeleting As ProductsAvialableRowCh~dulla^@204~ ler
        
        Public Event P~dulla^@204~ bleRowDeleted As ProductsAvialableRow~dulla^@204~ ndler
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ loads Sub AddProductsAvialableRow(ByV~dulla^@204~ ductsAvialableRow)
            Me.Ro~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Overloads Function AddProductsA~dulla^@204~ yVal PartNo As String, ByVal QtyInSho~dulla^@204~ , ByVal QtyInShop2 As Integer, ByVal ~dulla^@204~  Integer, ByVal TotalQty As Integer, ~dulla^@204~ As Integer) As ProductsAvialableRow
~dulla^@204~ im rowProductsAvialableRow As Product~dulla^@204~  = CType(Me.NewRow,ProductsAvialableR~dulla^@204~     rowProductsAvialableRow.ItemArray~dulla^@204~ () {PartNo, QtyInShop1, QtyInShop2, Q~dulla^@204~ talQty, Amount}
            Me.Rows.~dulla^@204~ tsAvialableRow)
            Return r~dulla^@204~ alableRow
        End Function
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Function FindBy~dulla^@204~ PartNo As String) As ProductsAvialabl~dulla^@204~      Return CType(Me.Rows.Find(New Ob~dulla^@204~ o}),ProductsAvialableRow)
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ Function GetEnumerator() As System.Collections.IEnumerator Implements System.Co~dulla^@204~ umerable.GetEnumerator
            R~dulla^@204~ .GetEnumerator
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Overrides ~dulla^@204~ e() As System.Data.DataTable
       ~dulla^@204~ As ProductsAvialableDataTable = CType~dulla^@204~ ,ProductsAvialableDataTable)
       ~dulla^@204~ Vars
            Return cln
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pro~dulla^@204~ des Function CreateInstance() As Syst~dulla^@204~ able
            Return New Products~dulla^@204~ Table
        End Function
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Friend Sub InitVars()
   ~dulla^@204~ olumnPartNo = MyBase.Columns("PartNo"~dulla^@204~   Me.columnQtyInShop1 = MyBase.Column~dulla^@204~ ")
            Me.columnQtyInShop2 =~dulla^@204~ ns("QtyInShop2")
            Me.colu~dulla^@204~ = MyBase.Columns("QtyInStore")
     ~dulla^@204~ umnTotalQty = MyBase.Columns("TotalQt~dulla^@204~     Me.columnAmount = MyBase.Columns(~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ vate Sub InitClass()
            Me.~dulla^@204~ = New System.Data.DataColumn("PartNo"~dulla^@204~ ing), Nothing, System.Data.MappingTyp~dulla^@204~            MyBase.Columns.Add(Me.colu~dulla^@204~           Me.columnQtyInShop1 = New S~dulla^@204~ taColumn("QtyInShop1", GetType(Intege~dulla^@204~ System.Data.MappingType.Element)
   ~dulla^@204~ se.Columns.Add(Me.columnQtyInShop1)
~dulla^@204~ e.columnQtyInShop2 = New System.Data.~dulla^@204~ tyInShop2", GetType(Integer), Nothing~dulla^@204~ .MappingType.Element)
            My~dulla^@204~ Add(Me.columnQtyInShop2)
           ~dulla^@204~ InStore = New System.Data.DataColumn(~dulla^@204~  GetType(Integer), Nothing, System.Da~dulla^@204~ e.Element)
            MyBase.Column~dulla^@204~ mnQtyInStore)
            Me.columnT~dulla^@204~  System.Data.DataColumn("TotalQty", G~dulla^@204~ r), Nothing, System.Data.MappingType.~dulla^@204~          MyBase.Columns.Add(Me.column~dulla^@204~           Me.columnAmount = New Syste~dulla^@204~ lumn("Amount", GetType(Integer), Noth~dulla^@204~ ata.MappingType.Element)
           ~dulla^@204~ ns.Add(Me.columnAmount)
            ~dulla^@204~ s.Add(New System.Data.UniqueConstrain~dulla^@204~ 1", New System.Data.DataColumn() {Me.~dulla^@204~ , true))
            Me.columnPartNo~dulla^@204~ = false
            Me.columnPartNo.~dulla^@204~ 
            Me.columnPartNo.MaxLeng~dulla^@204~         Me.columnQtyInShop1.AllowDBNu~dulla^@204~            Me.columnQtyInShop2.AllowD~dulla^@204~ 
            Me.columnQtyInStore.All~dulla^@204~ lse
            Me.columnTotalQty.Al~dulla^@204~ alse
            Me.columnAmount.All~dulla^@204~ lse
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Function NewProductsAviala~dulla^@204~ roductsAvialableRow
            Retu~dulla^@204~ ewRow,ProductsAvialableRow)
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Prot~dulla^@204~ es Function NewRowFromBuilder(ByVal b~dulla^@204~ tem.Data.DataRowBuilder) As System.Da~dulla^@204~            Return New ProductsAvialab~dulla^@204~ )
        End Function
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Protected Overrides Function G~dulla^@204~ s System.Type
            Return Get~dulla^@204~ AvialableRow)
        End Function
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Protected Override~dulla^@204~ anged(ByVal e As System.Data.DataRowC~dulla^@204~ s)
            MyBase.OnRowChanged(e~dulla^@204~   If (Not (Me.ProductsAvialableRowCha~dulla^@204~  Nothing) Then
                Raise~dulla^@204~ sAvialableRowChanged(Me, New Products~dulla^@204~ hangeEvent(CType(e.Row,ProductsAviala~dulla^@204~ tion))
            End If
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Protected ~dulla^@204~  OnRowChanging(ByVal e As System.Data~dulla^@204~ eEventArgs)
            MyBase.OnRow~dulla^@204~             If (Not (Me.ProductsAvial~dulla^@204~ ngEvent) Is Nothing) Then
          ~dulla^@204~ ent ProductsAvialableRowChanging(Me, ~dulla^@204~ vialableRowChangeEvent(CType(e.Row,Pr~dulla^@204~ leRow), e.Action))
            End I~dulla^@204~ d Sub
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ verrides Sub OnRowDeleted(ByVal e As ~dulla^@204~ ataRowChangeEventArgs)
            M~dulla^@204~ leted(e)
            If (Not (Me.Pro~dulla^@204~ eRowDeletedEvent) Is Nothing) Then
 ~dulla^@204~   RaiseEvent ProductsAvialableRowDele~dulla^@204~ roductsAvialableRowChangeEvent(CType(~dulla^@204~ sAvialableRow), e.Action))
         ~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ tected Overrides Sub OnRowDeleting(By~dulla^@204~ em.Data.DataRowChangeEventArgs)
    ~dulla^@204~ e.OnRowDeleting(e)
            If (N~dulla^@204~ tsAvialableRowDeletingEvent) Is Nothi~dulla^@204~              RaiseEvent ProductsAvial~dulla^@204~ ng(Me, New ProductsAvialableRowChange~dulla^@204~ .Row,ProductsAvialableRow), e.Action)~dulla^@204~   End If
        End Sub
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Sub RemoveProductsAvi~dulla^@204~ al row As ProductsAvialableRow)
    ~dulla^@204~ ws.Remove(row)
        End Sub
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Shared Function~dulla^@204~ eSchema(ByVal xs As System.Xml.Schema~dulla^@204~ ) As System.Xml.Schema.XmlSchemaCompl~dulla^@204~        Dim type As System.Xml.Schema.~dulla^@204~ lexType = New System.Xml.Schema.XmlSc~dulla^@204~ pe
            Dim sequence As Syste~dulla^@204~ XmlSchemaSequence = New System.Xml.Sc~dulla^@204~ aSequence
            Dim ds As Inve~dulla^@204~ ystemDataSet = New InventoryControlSy~dulla^@204~             xs.Add(ds.GetSchemaSerial~dulla^@204~         Dim any1 As System.Xml.Schema~dulla^@204~  = New System.Xml.Schema.XmlSchemaAny~dulla^@204~  any1.Namespace = "http://www.w3.org/~dulla^@204~ a"
            any1.MinOccurs = New ~dulla^@204~            any1.MaxOccurs = Decimal.M~dulla^@204~         any1.ProcessContents = System~dulla^@204~ mlSchemaContentProcessing.Lax
      ~dulla^@204~ e.Items.Add(any1)
            Dim an~dulla^@204~ Xml.Schema.XmlSchemaAny = New System.~dulla^@204~ lSchemaAny
            any2.Namespac~dulla^@204~ mas-microsoft-com:xml-diffgram-v1"
 ~dulla^@204~ y2.MinOccurs = New Decimal(1)
      ~dulla^@204~ ocessContents = System.Xml.Schema.Xml~dulla^@204~ Processing.Lax
            sequence.~dulla^@204~ 2)
            Dim attribute1 As Sys~dulla^@204~ a.XmlSchemaAttribute = New System.Xml~dulla^@204~ hemaAttribute
            attribute1~dulla^@204~ space"
            attribute1.FixedV~dulla^@204~ espace
            type.Attributes.A~dulla^@204~ )
            Dim attribute2 As Syst~dulla^@204~ .XmlSchemaAttribute = New System.Xml.~dulla^@204~ emaAttribute
            attribute2.~dulla^@204~ TypeName"
            attribute2.Fix~dulla^@204~ oductsAvialableDataTable"
          ~dulla^@204~ utes.Add(attribute2)
            typ~dulla^@204~ sequence
            Return type
  ~dulla^@204~ ction
    End Class
    
    <Syst~dulla^@204~ mpiler.GeneratedCodeAttribute("System~dulla^@204~ TypedDataSetGenerator", "2.0.0.0"),  ~dulla^@204~ m.Serializable(),  _
     System.Xml~dulla^@204~ n.XmlSchemaProviderAttribute("GetType~dulla^@204~ )>  _
    Partial Public Class Purch~dulla^@204~ 
        Inherits System.Data.DataTab~dulla^@204~ mplements System.Collections.IEnumera~dulla^@204~ 
        Private columnSupplierID As~dulla^@204~ DataColumn
        
        Private~dulla^@204~ eNo As System.Data.DataColumn
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Sub New()
            MyBase.New
            Me.TableName~dulla^@204~ 
            Me.BeginInit
         ~dulla^@204~ ss
            Me.EndInit
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Friend Sub~dulla^@204~ ble As System.Data.DataTable)
      ~dulla^@204~ New
            Me.TableName = table~dulla^@204~            If (table.CaseSensitive <>~dulla^@204~ t.CaseSensitive) Then
              ~dulla^@204~ itive = table.CaseSensitive
        ~dulla^@204~            If (table.Locale.ToString ~dulla^@204~ Set.Locale.ToString) Then
          ~dulla^@204~ le = table.Locale
            End If~dulla^@204~  If (table.Namespace <> table.DataSet~dulla^@204~ hen
                Me.Namespace = t~dulla^@204~ e
            End If
            Me~dulla^@204~ le.Prefix
            Me.MinimumCapa~dulla^@204~ MinimumCapacity
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Protected Sub New(ByV~dulla^@204~ stem.Runtime.Serialization.Serializat~dulla^@204~ l context As System.Runtime.Serializa~dulla^@204~ gContext)
            MyBase.New(inf~dulla^@204~             Me.InitVars
        End ~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public ReadOn~dulla^@204~ upplierIDColumn() As System.Data.Data~dulla^@204~        Get
                Return Me~dulla^@204~ erID
            End Get
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ perty InvoiceNoColumn() As System.Dat~dulla^@204~ 
            Get
                Ret~dulla^@204~ InvoiceNo
            End Get
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute(),  _
         ~dulla^@204~ entModel.Browsable(false)>  _
      ~dulla^@204~ Only Property Count() As Integer
   ~dulla^@204~ 
                Return Me.Rows.Count~dulla^@204~  End Get
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Default ReadOnly~dulla^@204~ m(ByVal index As Integer) As Purchase~dulla^@204~     Get
                Return CType~dulla^@204~ x),PurchaseRow)
            End Get~dulla^@204~ Property
        
        Public Ev~dulla^@204~ owChanging As PurchaseRowChangeEventH~dulla^@204~    
        Public Event PurchaseRow~dulla^@204~ rchaseRowChangeEventHandler
        ~dulla^@204~ lic Event PurchaseRowDeleting As Purc~dulla^@204~ EventHandler
        
        Publi~dulla^@204~ aseRowDeleted As PurchaseRowChangeEve~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~  AddPurchaseRow(ByVal row As Purchase~dulla^@204~      Me.Rows.Add(row)
        End Su~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Overload~dulla^@204~ dPurchaseRow(ByVal SupplierID As Stri~dulla^@204~ oiceNo As String) As PurchaseRow
   ~dulla^@204~ rowPurchaseRow As PurchaseRow = CType~dulla^@204~ rchaseRow)
            rowPurchaseRo~dulla^@204~  New Object() {SupplierID, InvoiceNo}~dulla^@204~  Me.Rows.Add(rowPurchaseRow)
       ~dulla^@204~ owPurchaseRow
        End Function
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Function Fi~dulla^@204~ DInvoiceNo(ByVal SupplierID As String~dulla^@204~ ceNo As String) As PurchaseRow
     ~dulla^@204~  CType(Me.Rows.Find(New Object() {Sup~dulla^@204~ iceNo}),PurchaseRow)
        End Fun~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Over~dulla^@204~ ion GetEnumerator() As System.Collect~dulla^@204~ tor Implements System.Collections.IEn~dulla^@204~ numerator
            Return Me.Rows~dulla^@204~ r
        End Function
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Overrides Function Clon~dulla^@204~ .Data.DataTable
            Dim cln ~dulla^@204~ taTable = CType(MyBase.Clone,Purchase~dulla^@204~            cln.InitVars
            ~dulla^@204~        End Function
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Protected Overrides Function Creat~dulla^@204~ s System.Data.DataTable
            ~dulla^@204~ rchaseDataTable
        End Function~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Friend Sub InitV~dulla^@204~       Me.columnSupplierID = MyBase.Co~dulla^@204~ erID")
            Me.columnInvoiceN~dulla^@204~ lumns("InvoiceNo")
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Private Sub InitCl~dulla^@204~       Me.columnSupplierID = New Syste~dulla^@204~ lumn("SupplierID", GetType(String), N~dulla^@204~ m.Data.MappingType.Element)
        ~dulla^@204~ lumns.Add(Me.columnSupplierID)
     ~dulla^@204~ umnInvoiceNo = New System.Data.DataCo~dulla^@204~ No", GetType(String), Nothing, System~dulla^@204~ Type.Element)
            MyBase.Col~dulla^@204~ olumnInvoiceNo)
            Me.Const~dulla^@204~ w System.Data.UniqueConstraint("Const~dulla^@204~ System.Data.DataColumn() {Me.columnSu~dulla^@204~ columnInvoiceNo}, true))
           ~dulla^@204~ plierID.AllowDBNull = false
        ~dulla^@204~ SupplierID.MaxLength = 50
          ~dulla^@204~ voiceNo.AllowDBNull = false
        ~dulla^@204~ InvoiceNo.MaxLength = 50
        End~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Funct~dulla^@204~ seRow() As PurchaseRow
            R~dulla^@204~ e.NewRow,PurchaseRow)
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Protected ~dulla^@204~ ction NewRowFromBuilder(ByVal builder~dulla^@204~ ta.DataRowBuilder) As System.Data.Dat~dulla^@204~      Return New PurchaseRow(builder)~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ d Overrides Function GetRowType() As ~dulla^@204~             Return GetType(PurchaseRo~dulla^@204~ nd Function
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ cted Overrides Sub OnRowChanged(ByVal~dulla^@204~ Data.DataRowChangeEventArgs)
       ~dulla^@204~ nRowChanged(e)
            If (Not (~dulla^@204~ wChangedEvent) Is Nothing) Then
    ~dulla^@204~ aiseEvent PurchaseRowChanged(Me, New ~dulla^@204~ angeEvent(CType(e.Row,PurchaseRow), e~dulla^@204~           End If
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Protected Overrides ~dulla^@204~ ging(ByVal e As System.Data.DataRowCh~dulla^@204~ )
            MyBase.OnRowChanging(e~dulla^@204~   If (Not (Me.PurchaseRowChangingEven~dulla^@204~ ) Then
                RaiseEvent Pu~dulla^@204~ ging(Me, New PurchaseRowChangeEvent(C~dulla^@204~ rchaseRow), e.Action))
            E~dulla^@204~   End Sub
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ ed Overrides Sub OnRowDeleted(ByVal e~dulla^@204~ ta.DataRowChangeEventArgs)
         ~dulla^@204~ owDeleted(e)
            If (Not (Me~dulla^@204~ eletedEvent) Is Nothing) Then
      ~dulla^@204~ seEvent PurchaseRowDeleted(Me, New Pu~dulla^@204~ geEvent(CType(e.Row,PurchaseRow), e.A~dulla^@204~         End If
        End Sub
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Protected Overrides Su~dulla^@204~ ng(ByVal e As System.Data.DataRowChan~dulla^@204~ 
            MyBase.OnRowDeleting(e)~dulla^@204~ If (Not (Me.PurchaseRowDeletingEvent)~dulla^@204~ Then
                RaiseEvent Purc~dulla^@204~ ng(Me, New PurchaseRowChangeEvent(CTy~dulla^@204~ haseRow), e.Action))
            End~dulla^@204~ End Sub
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ b RemovePurchaseRow(ByVal row As Purc~dulla^@204~          Me.Rows.Remove(row)
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public S~dulla^@204~ n GetTypedTableSchema(ByVal xs As Sys~dulla^@204~ a.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type~dulla^@204~ l.Schema.XmlSchemaComplexType = New S~dulla^@204~ ema.XmlSchemaComplexType
           ~dulla^@204~  As System.Xml.Schema.XmlSchemaSequen~dulla^@204~ em.Xml.Schema.XmlSchemaSequence
    ~dulla^@204~ s As InventoryControlSystemDataSet = ~dulla^@204~ ControlSystemDataSet
            xs.~dulla^@204~ emaSerializable)
            Dim any~dulla^@204~ ml.Schema.XmlSchemaAny = New System.X~dulla^@204~ SchemaAny
            any1.Namespace~dulla^@204~ w.w3.org/2001/XMLSchema"
           ~dulla^@204~ rs = New Decimal(0)
            any1~dulla^@204~ Decimal.MaxValue
            any1.Pr~dulla^@204~  = System.Xml.Schema.XmlSchemaContent~dulla^@204~ x
            sequence.Items.Add(any~dulla^@204~    Dim any2 As System.Xml.Schema.XmlS~dulla^@204~ w System.Xml.Schema.XmlSchemaAny
   ~dulla^@204~ .Namespace = "urn:schemas-microsoft-c~dulla^@204~ am-v1"
            any2.MinOccurs = ~dulla^@204~ )
            any2.ProcessContents =~dulla^@204~ chema.XmlSchemaContentProcessing.Lax~dulla^@204~ sequence.Items.Add(any2)
           ~dulla^@204~ e1 As System.Xml.Schema.XmlSchemaAttr~dulla^@204~ ystem.Xml.Schema.XmlSchemaAttribute
~dulla^@204~ ttribute1.Name = "namespace"
       ~dulla^@204~ e1.FixedValue = ds.Namespace
       ~dulla^@204~ ributes.Add(attribute1)
            ~dulla^@204~ 2 As System.Xml.Schema.XmlSchemaAttri~dulla^@204~ stem.Xml.Schema.XmlSchemaAttribute
 ~dulla^@204~ tribute2.Name = "tableTypeName"
    ~dulla^@204~ bute2.FixedValue = "PurchaseDataTable~dulla^@204~   type.Attributes.Add(attribute2)
  ~dulla^@204~ e.Particle = sequence
            Re~dulla^@204~       End Function
    End Class
  ~dulla^@204~ em.CodeDom.Compiler.GeneratedCodeAttr~dulla^@204~ .Data.Design.TypedDataSetGenerator", ~dulla^@204~ _
     System.Serializable(),  _
  ~dulla^@204~ .Serialization.XmlSchemaProviderAttri~dulla^@204~ dTableSchema")>  _
    Partial Publi~dulla^@204~ aseInfoDataTable
        Inherits Sy~dulla^@204~ aTable
        Implements System.Col~dulla^@204~ merable
        
        Private co~dulla^@204~  System.Data.DataColumn
        
  ~dulla^@204~  columnQuantity As System.Data.DataCo~dulla^@204~  
        Private columnAmount As Sy~dulla^@204~ aColumn
        
        Private co~dulla^@204~ D As System.Data.DataColumn
        ~dulla^@204~ vate columnInvoiceNo As System.Data.D~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~           MyBase.New
            Me.~dulla^@204~ PurchaseInfo"
            Me.BeginIn~dulla^@204~    Me.InitClass
            Me.EndIn~dulla^@204~ nd Sub
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~  New(ByVal table As System.Data.DataT~dulla^@204~       MyBase.New
            Me.Tabl~dulla^@204~ .TableName
            If (table.Cas~dulla^@204~  table.DataSet.CaseSensitive) Then
 ~dulla^@204~   Me.CaseSensitive = table.CaseSensit~dulla^@204~     End If
            If (table.Loc~dulla^@204~ <> table.DataSet.Locale.ToString) The~dulla^@204~       Me.Locale = table.Locale
     ~dulla^@204~ 
            If (table.Namespace <> ~dulla^@204~ .Namespace) Then
                Me.~dulla^@204~ able.Namespace
            End If
 ~dulla^@204~ .Prefix = table.Prefix
            M~dulla^@204~ city = table.MinimumCapacity
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Protecte~dulla^@204~ al info As System.Runtime.Serializati~dulla^@204~ ionInfo, ByVal context As System.Runt~dulla^@204~ tion.StreamingContext)
            M~dulla^@204~ o, context)
            Me.InitVars~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ly Property PartNoColumn() As System.~dulla^@204~ mn
            Get
                ~dulla^@204~ umnPartNo
            End Get
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y Property QuantityColumn() As System~dulla^@204~ umn
            Get
               ~dulla^@204~ lumnQuantity
            End Get
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ Only Property AmountColumn() As Syste~dulla^@204~ lumn
            Get
              ~dulla^@204~ olumnAmount
            End Get
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ nly Property SupplierIDColumn() As Sy~dulla^@204~ aColumn
            Get
           ~dulla^@204~ e.columnSupplierID
            End G~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c ReadOnly Property InvoiceNoColumn()~dulla^@204~ ta.DataColumn
            Get
     ~dulla^@204~ turn Me.columnInvoiceNo
            ~dulla^@204~     End Property
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute(),~dulla^@204~  System.ComponentModel.Browsable(fals~dulla^@204~    Public ReadOnly Property Count() A~dulla^@204~           Get
                Return~dulla^@204~ t
            End Get
        End P~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public De~dulla^@204~ y Property Item(ByVal index As Intege~dulla^@204~ eInfoRow
            Get
          ~dulla^@204~ CType(Me.Rows(index),PurchaseInfoRow)~dulla^@204~  End Get
        End Property
     ~dulla^@204~ Public Event PurchaseInfoRowChanging ~dulla^@204~ foRowChangeEventHandler
        
  ~dulla^@204~ Event PurchaseInfoRowChanged As Purch~dulla^@204~ ngeEventHandler
        
        Pu~dulla^@204~ rchaseInfoRowDeleting As PurchaseInfo~dulla^@204~ tHandler
        
        Public Ev~dulla^@204~ nfoRowDeleted As PurchaseInfoRowChang~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~  Sub AddPurchaseInfoRow(ByVal row As ~dulla^@204~ ow)
            Me.Rows.Add(row)
  ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~  Function AddPurchaseInfoRow(ByVal Pa~dulla^@204~ g, ByVal Quantity As Integer, ByVal A~dulla^@204~ ger, ByVal SupplierID As String, ByVa~dulla^@204~ s String) As PurchaseInfoRow
       ~dulla^@204~ urchaseInfoRow As PurchaseInfoRow = C~dulla^@204~ w,PurchaseInfoRow)
            rowPu~dulla^@204~ .ItemArray = New Object() {PartNo, Qu~dulla^@204~ t, SupplierID, InvoiceNo}
          ~dulla^@204~ (rowPurchaseInfoRow)
            Ret~dulla^@204~ seInfoRow
        End Function
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Function FindBy~dulla^@204~ PartNo As String) As PurchaseInfoRow~dulla^@204~ Return CType(Me.Rows.Find(New Object(~dulla^@204~ urchaseInfoRow)
        End Function~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Overridab~dulla^@204~ etEnumerator() As System.Collections.~dulla^@204~ mplements System.Collections.IEnumera~dulla^@204~ ator
            Return Me.Rows.GetE~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Overrides Function Clone() A~dulla^@204~ .DataTable
            Dim cln As Pu~dulla^@204~ aTable = CType(MyBase.Clone,PurchaseI~dulla^@204~ 
            cln.InitVars
         ~dulla^@204~ 
        End Function
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Protected Overrides Function Cr~dulla^@204~ ) As System.Data.DataTable
         ~dulla^@204~  PurchaseInfoDataTable
        End F~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Friend Su~dulla^@204~ 
            Me.columnPartNo = MyBase~dulla^@204~ tNo")
            Me.columnQuantity ~dulla^@204~ mns("Quantity")
            Me.colum~dulla^@204~ ase.Columns("Amount")
            Me~dulla^@204~ erID = MyBase.Columns("SupplierID")
~dulla^@204~ e.columnInvoiceNo = MyBase.Columns("I~dulla^@204~        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Private Sub InitClass()
      ~dulla^@204~ mnPartNo = New System.Data.DataColumn~dulla^@204~ tType(String), Nothing, System.Data.M~dulla^@204~ ement)
            MyBase.Columns.Ad~dulla^@204~ rtNo)
            Me.columnQuantity ~dulla^@204~ Data.DataColumn("Quantity", GetType(I~dulla^@204~ ing, System.Data.MappingType.Element)~dulla^@204~  MyBase.Columns.Add(Me.columnQuantity~dulla^@204~   Me.columnAmount = New System.Data.D~dulla^@204~ ount", GetType(Integer), Nothing, Sys~dulla^@204~ ingType.Element)
            MyBase.~dulla^@204~ e.columnAmount)
            Me.colum~dulla^@204~  New System.Data.DataColumn("Supplier~dulla^@204~ String), Nothing, System.Data.Mapping~dulla^@204~ 
            MyBase.Columns.Add(Me.c~dulla^@204~ ID)
            Me.columnInvoiceNo =~dulla^@204~ ata.DataColumn("InvoiceNo", GetType(S~dulla^@204~ ng, System.Data.MappingType.Element)~dulla^@204~ MyBase.Columns.Add(Me.columnInvoiceNo~dulla^@204~   Me.Constraints.Add(New System.Data.~dulla^@204~ int("Constraint1", New System.Data.Da~dulla^@204~ e.columnPartNo}, true))
            ~dulla^@204~ No.AllowDBNull = false
            M~dulla^@204~ o.Unique = true
            Me.colum~dulla^@204~ ngth = 20
            Me.columnQuant~dulla^@204~ ll = false
            Me.columnAmou~dulla^@204~ l = false
            Me.columnSuppl~dulla^@204~ Null = false
            Me.columnSu~dulla^@204~ ength = 20
            Me.columnInvo~dulla^@204~ Null = false
            Me.columnIn~dulla^@204~ ngth = 20
        End Sub
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Function NewPurchase~dulla^@204~ PurchaseInfoRow
            Return C~dulla^@204~ w,PurchaseInfoRow)
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Protected Ove~dulla^@204~ on NewRowFromBuilder(ByVal builder As~dulla^@204~ DataRowBuilder) As System.Data.DataRo~dulla^@204~   Return New PurchaseInfoRow(builder)~dulla^@204~  Function
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ ed Overrides Function GetRowType() As~dulla^@204~ 
            Return GetType(PurchaseI~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Protected Overrides Sub OnRowChanged(~dulla^@204~ stem.Data.DataRowChangeEventArgs)
  ~dulla^@204~ ase.OnRowChanged(e)
            If (~dulla^@204~ aseInfoRowChangedEvent) Is Nothing) T~dulla^@204~         RaiseEvent PurchaseInfoRowCha~dulla^@204~ PurchaseInfoRowChangeEvent(CType(e.Ro~dulla^@204~ oRow), e.Action))
            End If~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ errides Sub OnRowChanging(ByVal e As ~dulla^@204~ ataRowChangeEventArgs)
            M~dulla^@204~ anging(e)
            If (Not (Me.Pu~dulla^@204~ ChangingEvent) Is Nothing) Then
    ~dulla^@204~ aiseEvent PurchaseInfoRowChanging(Me,~dulla^@204~ InfoRowChangeEvent(CType(e.Row,Purcha~dulla^@204~ .Action))
            End If
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Protect~dulla^@204~ Sub OnRowDeleted(ByVal e As System.Da~dulla^@204~ ngeEventArgs)
            MyBase.OnR~dulla^@204~ 
            If (Not (Me.PurchaseInfo~dulla^@204~ nt) Is Nothing) Then
               ~dulla^@204~ urchaseInfoRowDeleted(Me, New Purchas~dulla^@204~ eEvent(CType(e.Row,PurchaseInfoRow), ~dulla^@204~            End If
        End Sub
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Protected Overrides~dulla^@204~ eting(ByVal e As System.Data.DataRowC~dulla^@204~ s)
            MyBase.OnRowDeleting(~dulla^@204~    If (Not (Me.PurchaseInfoRowDeletin~dulla^@204~ thing) Then
                RaiseEve~dulla^@204~ foRowDeleting(Me, New PurchaseInfoRow~dulla^@204~ Type(e.Row,PurchaseInfoRow), e.Action~dulla^@204~    End If
        End Sub
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Sub RemovePurchaseIn~dulla^@204~ ow As PurchaseInfoRow)
            M~dulla^@204~ (row)
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Shared Function GetTyped~dulla^@204~ yVal xs As System.Xml.Schema.XmlSchem~dulla^@204~ em.Xml.Schema.XmlSchemaComplexType
 ~dulla^@204~ m type As System.Xml.Schema.XmlSchema~dulla^@204~  New System.Xml.Schema.XmlSchemaCompl~dulla^@204~        Dim sequence As System.Xml.Sch~dulla^@204~ Sequence = New System.Xml.Schema.XmlS~dulla^@204~ 
            Dim ds As InventoryCont~dulla^@204~ Set = New InventoryControlSystemDataS~dulla^@204~    xs.Add(ds.GetSchemaSerializable)
~dulla^@204~ im any1 As System.Xml.Schema.XmlSchem~dulla^@204~ stem.Xml.Schema.XmlSchemaAny
       ~dulla^@204~ espace = "http://www.w3.org/2001/XMLS~dulla^@204~        any1.MinOccurs = New Decimal(0~dulla^@204~   any1.MaxOccurs = Decimal.MaxValue
~dulla^@204~ ny1.ProcessContents = System.Xml.Sche~dulla^@204~ ontentProcessing.Lax
            seq~dulla^@204~ dd(any1)
            Dim any2 As Sys~dulla^@204~ a.XmlSchemaAny = New System.Xml.Schem~dulla^@204~ y
            any2.Namespace = "urn:~dulla^@204~ soft-com:xml-diffgram-v1"
          ~dulla^@204~ urs = New Decimal(1)
            any~dulla^@204~ ents = System.Xml.Schema.XmlSchemaCon~dulla^@204~ g.Lax
            sequence.Items.Add~dulla^@204~        Dim attribute1 As System.Xml.S~dulla^@204~ maAttribute = New System.Xml.Schema.X~dulla^@204~ bute
            attribute1.Name = "~dulla^@204~            attribute1.FixedValue = ds~dulla^@204~            type.Attributes.Add(attrib~dulla^@204~       Dim attribute2 As System.Xml.Sc~dulla^@204~ aAttribute = New System.Xml.Schema.Xm~dulla^@204~ ute
            attribute2.Name = "t~dulla^@204~ 
            attribute2.FixedValue =~dulla^@204~ oDataTable"
            type.Attribu~dulla^@204~ bute2)
            type.Particle = s~dulla^@204~         Return type
        End Func~dulla^@204~  Class
    
    <System.CodeDom.Com~dulla^@204~ edCodeAttribute("System.Data.Design.T~dulla^@204~ nerator", "2.0.0.0"),  _
     System~dulla^@204~ (),  _
     System.Xml.Serialization~dulla^@204~ viderAttribute("GetTypedTableSchema")~dulla^@204~ tial Public Class SalesDataTable
   ~dulla^@204~  System.Data.DataTable
        Imple~dulla^@204~ Collections.IEnumerable
        
  ~dulla^@204~  columnInvoiceNo As System.Data.DataC~dulla^@204~   
        Private columnDate As Sys~dulla^@204~ Column
        
        Private col~dulla^@204~ s System.Data.DataColumn
        
 ~dulla^@204~ e columnVATAmount As System.Data.Data~dulla^@204~    
        Private columnGrandTotal~dulla^@204~ ta.DataColumn
        
        Priv~dulla^@204~ eOfPayment As System.Data.DataColumn~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Sub New()~dulla^@204~ MyBase.New
            Me.TableName ~dulla^@204~           Me.BeginInit
            M~dulla^@204~             Me.EndInit
        End S~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Friend Sub New~dulla^@204~ As System.Data.DataTable)
          ~dulla^@204~ 
            Me.TableName = table.Tab~dulla^@204~        If (table.CaseSensitive <> tab~dulla^@204~ seSensitive) Then
                Me~dulla^@204~ e = table.CaseSensitive
            ~dulla^@204~        If (table.Locale.ToString <> t~dulla^@204~ Locale.ToString) Then
              ~dulla^@204~  table.Locale
            End If
  ~dulla^@204~ (table.Namespace <> table.DataSet.Nam~dulla^@204~ 
                Me.Namespace = table~dulla^@204~            End If
            Me.Pre~dulla^@204~ refix
            Me.MinimumCapacity~dulla^@204~ mumCapacity
        End Sub
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Protected Sub New(ByVal i~dulla^@204~ .Runtime.Serialization.SerializationI~dulla^@204~ ntext As System.Runtime.Serialization~dulla^@204~ text)
            MyBase.New(info, c~dulla^@204~         Me.InitVars
        End Sub
        
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Re~dulla^@204~ ty InvoiceNoColumn() As System.Data.D~dulla^@204~           Get
                Return~dulla^@204~ oiceNo
            End Get
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ roperty DateColumn() As System.Data.D~dulla^@204~           Get
                Return~dulla^@204~ e
            End Get
        End P~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Re~dulla^@204~ ty SubTotalColumn() As System.Data.Da~dulla^@204~          Get
                Return ~dulla^@204~ otal
            End Get
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ perty VATAmountColumn() As System.Dat~dulla^@204~ 
            Get
                Ret~dulla^@204~ VATAmount
            End Get
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y Property GrandTotalColumn() As Syst~dulla^@204~ olumn
            Get
             ~dulla^@204~ columnGrandTotal
            End Get~dulla^@204~  Property
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ ReadOnly Property ModeOfPaymentColumn~dulla^@204~ Data.DataColumn
            Get
   ~dulla^@204~ Return Me.columnModeOfPayment
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~        System.ComponentModel.Browsabl~dulla^@204~ 
        Public ReadOnly Property Cou~dulla^@204~ er
            Get
                ~dulla^@204~ s.Count
            End Get
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ eadOnly Property Item(ByVal index As ~dulla^@204~ alesRow
            Get
           ~dulla^@204~ Type(Me.Rows(index),SalesRow)
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ vent SalesRowChanging As SalesRowChan~dulla^@204~ r
        
        Public Event Sal~dulla^@204~ As SalesRowChangeEventHandler
      ~dulla^@204~ ublic Event SalesRowDeleting As Sales~dulla^@204~ tHandler
        
        Public Ev~dulla^@204~ eleted As SalesRowChangeEventHandler~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Overloads ~dulla^@204~ ow(ByVal row As SalesRow)
          ~dulla^@204~ (row)
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Overloads Function AddSa~dulla^@204~ InvoiceNo As String, ByVal _Date As D~dulla^@204~ bTotal As Double, ByVal VATAmount As ~dulla^@204~  GrandTotal As Double, ByVal ModeOfPa~dulla^@204~ ng) As SalesRow
            Dim rowS~dulla^@204~ lesRow = CType(Me.NewRow,SalesRow)
 ~dulla^@204~ wSalesRow.ItemArray = New Object() {I~dulla^@204~ te, SubTotal, VATAmount, GrandTotal, ~dulla^@204~ }
            Me.Rows.Add(rowSalesRo~dulla^@204~    Return rowSalesRow
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Fun~dulla^@204~ nvoiceNo(ByVal InvoiceNo As String) A~dulla^@204~            Return CType(Me.Rows.Find(~dulla^@204~ {InvoiceNo}),SalesRow)
        End F~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Ov~dulla^@204~ ction GetEnumerator() As System.Colle~dulla^@204~ rator Implements System.Collections.I~dulla^@204~ tEnumerator
            Return Me.Ro~dulla^@204~ tor
        End Function
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Overrides Function Cl~dulla^@204~ em.Data.DataTable
            Dim cl~dulla^@204~ aTable = CType(MyBase.Clone,SalesData~dulla^@204~        cln.InitVars
            Retu~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ rotected Overrides Function CreateIns~dulla^@204~ stem.Data.DataTable
            Retu~dulla^@204~ ataTable
        End Function
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Friend Sub InitVars()
~dulla^@204~ e.columnInvoiceNo = MyBase.Columns("I~dulla^@204~            Me.columnDate = MyBase.Col~dulla^@204~ 
            Me.columnSubTotal = MyBa~dulla^@204~ ubTotal")
            Me.columnVATAm~dulla^@204~ .Columns("VATAmount")
            Me~dulla^@204~ otal = MyBase.Columns("GrandTotal")
~dulla^@204~ e.columnModeOfPayment = MyBase.Column~dulla^@204~ ent")
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Private Sub InitClass()
      ~dulla^@204~ mnInvoiceNo = New System.Data.DataCol~dulla^@204~ o", GetType(String), Nothing, System.~dulla^@204~ ype.Element)
            MyBase.Colu~dulla^@204~ lumnInvoiceNo)
            Me.column~dulla^@204~ stem.Data.DataColumn("Date", GetType(~dulla^@204~ g, System.Data.MappingType.Element)
~dulla^@204~ e.columnDate.ExtendedProperties.Add("~dulla^@204~ umnPropNameInRow", "_Date")
        ~dulla^@204~ Date.ExtendedProperties.Add("Generato~dulla^@204~ ame", "Date")
            MyBase.Col~dulla^@204~ olumnDate)
            Me.columnSubT~dulla^@204~ stem.Data.DataColumn("SubTotal", GetT~dulla^@204~ Nothing, System.Data.MappingType.Elem~dulla^@204~      MyBase.Columns.Add(Me.columnSubT~dulla^@204~       Me.columnVATAmount = New System~dulla^@204~ umn("VATAmount", GetType(Double), Not~dulla^@204~ Data.MappingType.Element)
          ~dulla^@204~ mns.Add(Me.columnVATAmount)
        ~dulla^@204~ GrandTotal = New System.Data.DataColu~dulla^@204~ l", GetType(Double), Nothing, System.~dulla^@204~ ype.Element)
            MyBase.Colu~dulla^@204~ lumnGrandTotal)
            Me.colum~dulla^@204~ t = New System.Data.DataColumn("ModeO~dulla^@204~ tType(String), Nothing, System.Data.M~dulla^@204~ ement)
            MyBase.Columns.Ad~dulla^@204~ deOfPayment)
            Me.Constrai~dulla^@204~ ystem.Data.UniqueConstraint("Constrai~dulla^@204~ tem.Data.DataColumn() {Me.columnInvoi~dulla^@204~ 
            Me.columnInvoiceNo.Allo~dulla^@204~ se
            Me.columnInvoiceNo.Un~dulla^@204~             Me.columnInvoiceNo.MaxLen~dulla^@204~          Me.columnDate.AllowDBNull = ~dulla^@204~       Me.columnSubTotal.AllowDBNull =~dulla^@204~        Me.columnVATAmount.AllowDBNull~dulla^@204~          Me.columnGrandTotal.AllowDBN~dulla^@204~             Me.columnModeOfPayment.Al~dulla^@204~ alse
            Me.columnModeOfPaym~dulla^@204~  = 10
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Function NewSalesRow() A~dulla^@204~            Return CType(Me.NewRow,Sal~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ rotected Overrides Function NewRowFro~dulla^@204~ l builder As System.Data.DataRowBuild~dulla^@204~ .Data.DataRow
            Return New~dulla^@204~ lder)
        End Function
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Protected Overrides Functi~dulla^@204~ () As System.Type
            Return~dulla^@204~ sRow)
        End Function
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Protected Overrides Sub On~dulla^@204~ Val e As System.Data.DataRowChangeEve~dulla^@204~         MyBase.OnRowChanged(e)
     ~dulla^@204~ t (Me.SalesRowChangedEvent) Is Nothin~dulla^@204~             RaiseEvent SalesRowChange~dulla^@204~ esRowChangeEvent(CType(e.Row,SalesRow~dulla^@204~ 
            End If
        End Sub~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Protected Overri~dulla^@204~ Changing(ByVal e As System.Data.DataR~dulla^@204~ Args)
            MyBase.OnRowChangi~dulla^@204~       If (Not (Me.SalesRowChangingEve~dulla^@204~ g) Then
                RaiseEvent S~dulla^@204~ ng(Me, New SalesRowChangeEvent(CType(~dulla^@204~ w), e.Action))
            End If
 ~dulla^@204~ b
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ ed Overrides Sub OnRowDeleted(ByVal e~dulla^@204~ ta.DataRowChangeEventArgs)
         ~dulla^@204~ owDeleted(e)
            If (Not (Me~dulla^@204~ tedEvent) Is Nothing) Then
         ~dulla^@204~ vent SalesRowDeleted(Me, New SalesRow~dulla^@204~ Type(e.Row,SalesRow), e.Action))
   ~dulla^@204~ If
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Protected Overrides Sub OnRowDelet~dulla^@204~ s System.Data.DataRowChangeEventArgs)~dulla^@204~  MyBase.OnRowDeleting(e)
           ~dulla^@204~ SalesRowDeletingEvent) Is Nothing) Th~dulla^@204~        RaiseEvent SalesRowDeleting(Me~dulla^@204~ wChangeEvent(CType(e.Row,SalesRow), e~dulla^@204~           End If
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Sub RemoveSal~dulla^@204~ ow As SalesRow)
            Me.Rows.~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Shared Function GetTypedTableSc~dulla^@204~  As System.Xml.Schema.XmlSchemaSet) A~dulla^@204~ Schema.XmlSchemaComplexType
        ~dulla^@204~ As System.Xml.Schema.XmlSchemaComplex~dulla^@204~ stem.Xml.Schema.XmlSchemaComplexType~dulla^@204~ Dim sequence As System.Xml.Schema.Xml~dulla^@204~ e = New System.Xml.Schema.XmlSchemaSe~dulla^@204~        Dim ds As InventoryControlSyst~dulla^@204~ ew InventoryControlSystemDataSet
   ~dulla^@204~ dd(ds.GetSchemaSerializable)
       ~dulla^@204~  As System.Xml.Schema.XmlSchemaAny = ~dulla^@204~ l.Schema.XmlSchemaAny
            an~dulla^@204~ = "http://www.w3.org/2001/XMLSchema"~dulla^@204~ any1.MinOccurs = New Decimal(0)
    ~dulla^@204~ MaxOccurs = Decimal.MaxValue
       ~dulla^@204~ cessContents = System.Xml.Schema.XmlS~dulla^@204~ rocessing.Lax
            sequence.I~dulla^@204~ )
            Dim any2 As System.Xml~dulla^@204~ hemaAny = New System.Xml.Schema.XmlSc~dulla^@204~         any2.Namespace = "urn:schemas~dulla^@204~ m:xml-diffgram-v1"
            any2.~dulla^@204~ ew Decimal(1)
            any2.Proce~dulla^@204~ System.Xml.Schema.XmlSchemaContentPro~dulla^@204~             sequence.Items.Add(any2)~dulla^@204~ Dim attribute1 As System.Xml.Schema.X~dulla^@204~ bute = New System.Xml.Schema.XmlSchem~dulla^@204~            attribute1.Name = "namespa~dulla^@204~     attribute1.FixedValue = ds.Namesp~dulla^@204~     type.Attributes.Add(attribute1)
~dulla^@204~ im attribute2 As System.Xml.Schema.Xm~dulla^@204~ ute = New System.Xml.Schema.XmlSchema~dulla^@204~           attribute2.Name = "tableTyp~dulla^@204~        attribute2.FixedValue = "Sales~dulla^@204~            type.Attributes.Add(attrib~dulla^@204~       type.Particle = sequence
     ~dulla^@204~  type
        End Function
    End ~dulla^@204~     <System.CodeDom.Compiler.Generate~dulla^@204~ e("System.Data.Design.TypedDataSetGen~dulla^@204~ .0.0"),  _
     System.Serializable(~dulla^@204~ ystem.Xml.Serialization.XmlSchemaProv~dulla^@204~ ("GetTypedTableSchema")>  _
    Part~dulla^@204~ ass SalesInfoDataTable
        Inher~dulla^@204~ ta.DataTable
        Implements Syst~dulla^@204~ s.IEnumerable
        
        Priv~dulla^@204~ tNo As System.Data.DataColumn
      ~dulla^@204~ rivate columnInvoiceNo As System.Data~dulla^@204~         
        Private columnCusto~dulla^@204~ em.Data.DataColumn
        
       ~dulla^@204~ mnStockCardNo As System.Data.DataColu~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Sub New~dulla^@204~    MyBase.New
            Me.TableNa~dulla^@204~ fo"
            Me.BeginInit
      ~dulla^@204~ Class
            Me.EndInit
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Friend ~dulla^@204~  table As System.Data.DataTable)
   ~dulla^@204~ se.New
            Me.TableName = ta~dulla^@204~ 
            If (table.CaseSensitive~dulla^@204~ aSet.CaseSensitive) Then
           ~dulla^@204~ ensitive = table.CaseSensitive
     ~dulla^@204~ 
            If (table.Locale.ToStri~dulla^@204~ ataSet.Locale.ToString) Then
       ~dulla^@204~ ocale = table.Locale
            End~dulla^@204~     If (table.Namespace <> table.Data~dulla^@204~ ) Then
                Me.Namespace ~dulla^@204~ pace
            End If
           ~dulla^@204~ table.Prefix
            Me.MinimumC~dulla^@204~ le.MinimumCapacity
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Protected Sub New(~dulla^@204~  System.Runtime.Serialization.Seriali~dulla^@204~ yVal context As System.Runtime.Serial~dulla^@204~ mingContext)
            MyBase.New(~dulla^@204~ )
            Me.InitVars
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Rea~dulla^@204~ y PartNoColumn() As System.Data.DataC~dulla^@204~       Get
                Return Me.~dulla^@204~ 
            End Get
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Read~dulla^@204~  InvoiceNoColumn() As System.Data.Dat~dulla^@204~         Get
                Return M~dulla^@204~ ceNo
            End Get
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ perty CustomerIDColumn() As System.Da~dulla^@204~ 
            Get
                Re~dulla^@204~ nCustomerID
            End Get
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ nly Property StockCardNoColumn() As S~dulla^@204~ taColumn
            Get
          ~dulla^@204~ Me.columnStockCardNo
            End~dulla^@204~  End Property
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ stem.ComponentModel.Browsable(false)>~dulla^@204~ Public ReadOnly Property Count() As I~dulla^@204~        Get
                Return Me~dulla^@204~             End Get
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Defau~dulla^@204~ roperty Item(ByVal index As Integer) ~dulla^@204~ ow
            Get
                ~dulla^@204~ Me.Rows(index),SalesInfoRow)
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ ent SalesInfoRowChanging As SalesInfo~dulla^@204~ tHandler
        
        Public Ev~dulla^@204~ RowChanged As SalesInfoRowChangeEvent~dulla^@204~     
        Public Event SalesInfoR~dulla^@204~  SalesInfoRowChangeEventHandler
    ~dulla^@204~  Public Event SalesInfoRowDeleted As ~dulla^@204~ hangeEventHandler
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Overloads Sub AddSalesInfoRow~dulla^@204~  SalesInfoRow)
            Me.Rows.A~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Overloads Function AddSalesInfoRow(~dulla^@204~ As String, ByVal InvoiceNo As String,~dulla^@204~ erID As String, ByVal StockCardNo As ~dulla^@204~ lesInfoRow
            Dim rowSalesI~dulla^@204~ esInfoRow = CType(Me.NewRow,SalesInfo~dulla^@204~      rowSalesInfoRow.ItemArray = New ~dulla^@204~ tNo, InvoiceNo, CustomerID, StockCard~dulla^@204~     Me.Rows.Add(rowSalesInfoRow)
   ~dulla^@204~ rn rowSalesInfoRow
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Functi~dulla^@204~ NoInvoiceNo(ByVal PartNo As String, B~dulla^@204~ o As String) As SalesInfoRow
       ~dulla^@204~ Type(Me.Rows.Find(New Object() {PartN~dulla^@204~ ),SalesInfoRow)
        End Function~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Overridab~dulla^@204~ etEnumerator() As System.Collections.~dulla^@204~ mplements System.Collections.IEnumera~dulla^@204~ ator
            Return Me.Rows.GetE~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Overrides Function Clone() A~dulla^@204~ .DataTable
            Dim cln As SalesInfoDataTable = CType(MyBase.Clone,Sale~dulla^@204~ e)
            cln.InitVars
       ~dulla^@204~ ln
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Protected Overrides Function ~dulla^@204~ e() As System.Data.DataTable
       ~dulla^@204~ ew SalesInfoDataTable
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Friend Sub~dulla^@204~             Me.columnPartNo = MyBase.~dulla^@204~ No")
            Me.columnInvoiceNo ~dulla^@204~ mns("InvoiceNo")
            Me.colu~dulla^@204~ = MyBase.Columns("CustomerID")
     ~dulla^@204~ umnStockCardNo = MyBase.Columns("Stoc~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ vate Sub InitClass()
            Me.~dulla^@204~ = New System.Data.DataColumn("PartNo"~dulla^@204~ ing), Nothing, System.Data.MappingTyp~dulla^@204~            MyBase.Columns.Add(Me.colu~dulla^@204~           Me.columnInvoiceNo = New Sy~dulla^@204~ aColumn("InvoiceNo", GetType(String),~dulla^@204~ tem.Data.MappingType.Element)
      ~dulla^@204~ Columns.Add(Me.columnInvoiceNo)
    ~dulla^@204~ lumnCustomerID = New System.Data.Data~dulla^@204~ merID", GetType(String), Nothing, Sys~dulla^@204~ ingType.Element)
            MyBase.~dulla^@204~ e.columnCustomerID)
            Me.c~dulla^@204~ dNo = New System.Data.DataColumn("Sto~dulla^@204~ tType(String), Nothing, System.Data.M~dulla^@204~ ement)
            MyBase.Columns.Ad~dulla^@204~ ockCardNo)
            Me.Constraint~dulla^@204~ tem.Data.UniqueConstraint("Constraint~dulla^@204~ m.Data.DataColumn() {Me.columnPartNo,~dulla^@204~ oiceNo}, true))
            Me.colum~dulla^@204~ DBNull = false
            Me.column~dulla^@204~ gth = 20
            Me.columnInvoic~dulla^@204~ ll = false
            Me.columnInvo~dulla^@204~ th = 20
            Me.columnCustome~dulla^@204~ ll = false
            Me.columnCust~dulla^@204~ gth = 20
            Me.columnStockC~dulla^@204~ Null = false
            Me.columnSt~dulla^@204~ Length = 20
        End Sub
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Function NewSalesI~dulla^@204~ alesInfoRow
            Return CType~dulla^@204~ lesInfoRow)
        End Function
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Protected Overrides ~dulla^@204~ owFromBuilder(ByVal builder As System~dulla^@204~ Builder) As System.Data.DataRow
    ~dulla^@204~ n New SalesInfoRow(builder)
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Prot~dulla^@204~ es Function GetRowType() As System.Ty~dulla^@204~    Return GetType(SalesInfoRow)
    ~dulla^@204~ ion
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ rrides Sub OnRowChanged(ByVal e As Sy~dulla^@204~ aRowChangeEventArgs)
            MyB~dulla^@204~ ged(e)
            If (Not (Me.Sales~dulla^@204~ dEvent) Is Nothing) Then
           ~dulla^@204~ nt SalesInfoRowChanged(Me, New SalesI~dulla^@204~ vent(CType(e.Row,SalesInfoRow), e.Act~dulla^@204~       End If
        End Sub
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Protected Overrides Sub ~dulla^@204~ (ByVal e As System.Data.DataRowChange~dulla^@204~            MyBase.OnRowChanging(e)
 ~dulla^@204~  (Not (Me.SalesInfoRowChangingEvent) ~dulla^@204~ hen
                RaiseEvent Sales~dulla^@204~ ng(Me, New SalesInfoRowChangeEvent(CT~dulla^@204~ esInfoRow), e.Action))
            E~dulla^@204~   End Sub
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ ed Overrides Sub OnRowDeleted(ByVal e~dulla^@204~ ta.DataRowChangeEventArgs)
         ~dulla^@204~ owDeleted(e)
            If (Not (Me~dulla^@204~ DeletedEvent) Is Nothing) Then
     ~dulla^@204~ iseEvent SalesInfoRowDeleted(Me, New ~dulla^@204~ hangeEvent(CType(e.Row,SalesInfoRow),~dulla^@204~             End If
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Protected Override~dulla^@204~ leting(ByVal e As System.Data.DataRow~dulla^@204~ gs)
            MyBase.OnRowDeleting~dulla^@204~     If (Not (Me.SalesInfoRowDeletingE~dulla^@204~ ing) Then
                RaiseEvent~dulla^@204~ Deleting(Me, New SalesInfoRowChangeEv~dulla^@204~ ow,SalesInfoRow), e.Action))
       ~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Sub RemoveSalesInfoRow(ByVal ro~dulla^@204~ oRow)
            Me.Rows.Remove(row~dulla^@204~ d Sub
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ ed Function GetTypedTableSchema(ByVal~dulla^@204~ .Xml.Schema.XmlSchemaSet) As System.X~dulla^@204~ SchemaComplexType
            Dim ty~dulla^@204~ Xml.Schema.XmlSchemaComplexType = New~dulla^@204~ chema.XmlSchemaComplexType
         ~dulla^@204~ ce As System.Xml.Schema.XmlSchemaSequ~dulla^@204~ stem.Xml.Schema.XmlSchemaSequence
  ~dulla^@204~  ds As InventoryControlSystemDataSet ~dulla^@204~ ryControlSystemDataSet
            x~dulla^@204~ chemaSerializable)
            Dim a~dulla^@204~ .Xml.Schema.XmlSchemaAny = New System~dulla^@204~ mlSchemaAny
            any1.Namespa~dulla^@204~ www.w3.org/2001/XMLSchema"
         ~dulla^@204~ curs = New Decimal(0)
            an~dulla^@204~ = Decimal.MaxValue
            any1.~dulla^@204~ ts = System.Xml.Schema.XmlSchemaConte~dulla^@204~ Lax
            sequence.Items.Add(a~dulla^@204~      Dim any2 As System.Xml.Schema.Xm~dulla^@204~ New System.Xml.Schema.XmlSchemaAny
 ~dulla^@204~ y2.Namespace = "urn:schemas-microsoft~dulla^@204~ gram-v1"
            any2.MinOccurs ~dulla^@204~ (1)
            any2.ProcessContents~dulla^@204~ .Schema.XmlSchemaContentProcessing.La~dulla^@204~   sequence.Items.Add(any2)
         ~dulla^@204~ ute1 As System.Xml.Schema.XmlSchemaAt~dulla^@204~  System.Xml.Schema.XmlSchemaAttribute~dulla^@204~  attribute1.Name = "namespace"
     ~dulla^@204~ ute1.FixedValue = ds.Namespace
     ~dulla^@204~ ttributes.Add(attribute1)
          ~dulla^@204~ te2 As System.Xml.Schema.XmlSchemaAtt~dulla^@204~ System.Xml.Schema.XmlSchemaAttribute~dulla^@204~ attribute2.Name = "tableTypeName"
  ~dulla^@204~ ribute2.FixedValue = "SalesInfoDataTa~dulla^@204~      type.Attributes.Add(attribute2)~dulla^@204~ type.Particle = sequence
           ~dulla^@204~ 
        End Function
    End Class~dulla^@204~ ystem.CodeDom.Compiler.GeneratedCodeA~dulla^@204~ tem.Data.Design.TypedDataSetGenerator~dulla^@204~ ,  _
     System.Serializable(),  _~dulla^@204~ Xml.Serialization.XmlSchemaProviderAt~dulla^@204~ ypedTableSchema")>  _
    Partial Pu~dulla^@204~ ockCardDataTable
        Inherits Sy~dulla^@204~ aTable
        Implements System.Col~dulla^@204~ merable
        
        Private co~dulla^@204~ No As System.Data.DataColumn
       ~dulla^@204~ ivate columnPartNo As System.Data.Dat~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Su~dulla^@204~         MyBase.New
            Me.Ta~dulla^@204~ ockCard"
            Me.BeginInit
 ~dulla^@204~ .InitClass
            Me.EndInit
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Fr~dulla^@204~ ByVal table As System.Data.DataTable)~dulla^@204~  MyBase.New
            Me.TableName~dulla^@204~ eName
            If (table.CaseSens~dulla^@204~ e.DataSet.CaseSensitive) Then
      ~dulla^@204~ CaseSensitive = table.CaseSensitive
~dulla^@204~ nd If
            If (table.Locale.T~dulla^@204~ ble.DataSet.Locale.ToString) Then
  ~dulla^@204~  Me.Locale = table.Locale
          ~dulla^@204~          If (table.Namespace <> table~dulla^@204~ space) Then
                Me.Names~dulla^@204~ Namespace
            End If
      ~dulla^@204~ ix = table.Prefix
            Me.Min~dulla^@204~ = table.MinimumCapacity
        End ~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serializ~dulla^@204~ zationInfo, ByVal context As System.R~dulla^@204~ ization.StreamingContext)
          ~dulla^@204~ info, context)
            Me.InitVa~dulla^@204~ nd Sub
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ dOnly Property StockCardNoColumn() As~dulla^@204~ DataColumn
            Get
        ~dulla^@204~ n Me.columnStockCardNo
            E~dulla^@204~    End Property
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic ReadOnly Property PartNoColumn(~dulla^@204~ ata.DataColumn
            Get
    ~dulla^@204~ eturn Me.columnPartNo
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute(),  ~dulla^@204~ ystem.ComponentModel.Browsable(false)~dulla^@204~  Public ReadOnly Property Count() As ~dulla^@204~         Get
                Return M~dulla^@204~ 
            End Get
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Defa~dulla^@204~ Property Item(ByVal index As Integer)~dulla^@204~ Row
            Get
               ~dulla^@204~ (Me.Rows(index),StockCardRow)
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ vent StockCardRowChanging As StockCar~dulla^@204~ ntHandler
        
        Public E~dulla^@204~ dRowChanged As StockCardRowChangeEven~dulla^@204~      
        Public Event StockCard~dulla^@204~ s StockCardRowChangeEventHandler
   ~dulla^@204~   Public Event StockCardRowDeleted As~dulla^@204~ ChangeEventHandler
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Overloads Sub AddStockCardRo~dulla^@204~ s StockCardRow)
            Me.Rows.~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic Overloads Function AddStockCardRow~dulla^@204~ ardNo As String, ByVal PartNo As Stri~dulla^@204~ ardRow
            Dim rowStockCardR~dulla^@204~ rdRow = CType(Me.NewRow,StockCardRow)~dulla^@204~  rowStockCardRow.ItemArray = New Obje~dulla^@204~ rdNo, PartNo}
            Me.Rows.Ad~dulla^@204~ dRow)
            Return rowStockCar~dulla^@204~  End Function
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Function FindByPartNo(ByVal PartN~dulla^@204~ As StockCardRow
            Return C~dulla^@204~ Find(New Object() {PartNo}),StockCard~dulla^@204~  End Function
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Overridable Function GetEnumerato~dulla^@204~ .Collections.IEnumerator Implements S~dulla^@204~ ions.IEnumerable.GetEnumerator
     ~dulla^@204~  Me.Rows.GetEnumerator
        End F~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Ov~dulla^@204~ ion Clone() As System.Data.DataTable~dulla^@204~ Dim cln As StockCardDataTable = CType~dulla^@204~ ,StockCardDataTable)
            cln~dulla^@204~           Return cln
        End Fun~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Protected O~dulla^@204~ tion CreateInstance() As System.Data.~dulla^@204~           Return New StockCardDataTab~dulla^@204~ nd Function
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ d Sub InitVars()
            Me.colu~dulla^@204~  = MyBase.Columns("StockCardNo")
   ~dulla^@204~ olumnPartNo = MyBase.Columns("PartNo"~dulla^@204~ d Sub
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~  InitClass()
            Me.columnSt~dulla^@204~ ew System.Data.DataColumn("StockCardN~dulla^@204~ tring), Nothing, System.Data.MappingT~dulla^@204~ 
            MyBase.Columns.Add(Me.co~dulla^@204~ No)
            Me.columnPartNo = Ne~dulla^@204~ .DataColumn("PartNo", GetType(String)~dulla^@204~ stem.Data.MappingType.Element)
     ~dulla^@204~ .Columns.Add(Me.columnPartNo)
      ~dulla^@204~ traints.Add(New System.Data.UniqueCon~dulla^@204~ traint1", New System.Data.DataColumn(~dulla^@204~ artNo}, true))
            Me.column~dulla^@204~ llowDBNull = false
            Me.co~dulla^@204~ No.MaxLength = 20
            Me.col~dulla^@204~ owDBNull = false
            Me.colu~dulla^@204~ ue = true
            Me.columnPartN~dulla^@204~  20
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Function NewStockCardRow()~dulla^@204~ Row
            Return CType(Me.NewR~dulla^@204~ ow)
        End Function
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Protected Overrides Function~dulla^@204~ ilder(ByVal builder As System.Data.Da~dulla^@204~  As System.Data.DataRow
            ~dulla^@204~ ockCardRow(builder)
        End Func~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Protected Ov~dulla^@204~ ion GetRowType() As System.Type
    ~dulla^@204~ n GetType(StockCardRow)
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Protecte~dulla^@204~ ub OnRowChanged(ByVal e As System.Dat~dulla^@204~ geEventArgs)
            MyBase.OnRo~dulla^@204~             If (Not (Me.StockCardRowC~dulla^@204~ Is Nothing) Then
                Rai~dulla^@204~ CardRowChanged(Me, New StockCardRowCh~dulla^@204~ pe(e.Row,StockCardRow), e.Action))
 ~dulla^@204~ d If
        End Sub
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Protected Overrides Sub OnRowCha~dulla^@204~  As System.Data.DataRowChangeEventArg~dulla^@204~    MyBase.OnRowChanging(e)
         ~dulla^@204~ e.StockCardRowChangingEvent) Is Nothi~dulla^@204~              RaiseEvent StockCardRowC~dulla^@204~ ew StockCardRowChangeEvent(CType(e.Ro~dulla^@204~ w), e.Action))
            End If
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pr~dulla^@204~ ides Sub OnRowDeleted(ByVal e As Syst~dulla^@204~ owChangeEventArgs)
            MyBas~dulla^@204~ d(e)
            If (Not (Me.StockCa~dulla^@204~ vent) Is Nothing) Then
             ~dulla^@204~  StockCardRowDeleted(Me, New StockCar~dulla^@204~ nt(CType(e.Row,StockCardRow), e.Actio~dulla^@204~     End If
        End Sub
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Protected Overrides Sub On~dulla^@204~ yVal e As System.Data.DataRowChangeEv~dulla^@204~          MyBase.OnRowDeleting(e)
   ~dulla^@204~ Not (Me.StockCardRowDeletingEvent) Is~dulla^@204~ n
                RaiseEvent StockCa~dulla^@204~ (Me, New StockCardRowChangeEvent(CTyp~dulla^@204~ CardRow), e.Action))
            End~dulla^@204~ End Sub
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ b RemoveStockCardRow(ByVal row As Sto~dulla^@204~            Me.Rows.Remove(row)
     ~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ ion GetTypedTableSchema(ByVal xs As S~dulla^@204~ ema.XmlSchemaSet) As System.Xml.Schem~dulla^@204~ mplexType
            Dim type As Sy~dulla^@204~ ma.XmlSchemaComplexType = New System.~dulla^@204~ lSchemaComplexType
            Dim s~dulla^@204~ stem.Xml.Schema.XmlSchemaSequence = N~dulla^@204~ .Schema.XmlSchemaSequence
          ~dulla^@204~ nventoryControlSystemDataSet = New In~dulla^@204~ lSystemDataSet
            xs.Add(ds~dulla^@204~ ializable)
            Dim any1 As S~dulla^@204~ ema.XmlSchemaAny = New System.Xml.Sch~dulla^@204~ Any
            any1.Namespace = "ht~dulla^@204~ rg/2001/XMLSchema"
            any1.~dulla^@204~ ew Decimal(0)
            any1.MaxOc~dulla^@204~ l.MaxValue
            any1.ProcessC~dulla^@204~ tem.Xml.Schema.XmlSchemaContentProces~dulla^@204~          sequence.Items.Add(any1)
  ~dulla^@204~  any2 As System.Xml.Schema.XmlSchemaA~dulla^@204~ em.Xml.Schema.XmlSchemaAny
         ~dulla^@204~ pace = "urn:schemas-microsoft-com:xml~dulla^@204~ 
            any2.MinOccurs = New De~dulla^@204~          any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.La~dulla^@204~   sequence.Items.Add(any2)
         ~dulla^@204~ ute1 As System.Xml.Schema.XmlSchemaAt~dulla^@204~  System.Xml.Schema.XmlSchemaAttribute~dulla^@204~  attribute1.Name = "namespace"
     ~dulla^@204~ ute1.FixedValue = ds.Namespace
     ~dulla^@204~ ttributes.Add(attribute1)
          ~dulla^@204~ te2 As System.Xml.Schema.XmlSchemaAtt~dulla^@204~ System.Xml.Schema.XmlSchemaAttribute~dulla^@204~ attribute2.Name = "tableTypeName"
  ~dulla^@204~ ribute2.FixedValue = "StockCardDataTa~dulla^@204~      type.Attributes.Add(attribute2)~dulla^@204~ type.Particle = sequence
           ~dulla^@204~ 
        End Function
    End Class~dulla^@204~ ystem.CodeDom.Compiler.GeneratedCodeA~dulla^@204~ tem.Data.Design.TypedDataSetGenerator~dulla^@204~ ,  _
     System.Serializable(),  _~dulla^@204~ Xml.Serialization.XmlSchemaProviderAt~dulla^@204~ ypedTableSchema")>  _
    Partial Pu~dulla^@204~ ockCardDetailDataTable
        Inher~dulla^@204~ ta.DataTable
        Implements Syst~dulla^@204~ s.IEnumerable
        
        Priv~dulla^@204~ oiceNo As System.Data.DataColumn
   ~dulla^@204~   Private columnDateOfSale As System.~dulla^@204~ mn
        
        Private columnS~dulla^@204~  System.Data.DataColumn
        
  ~dulla^@204~  columnDateRecieved As System.Data.Da~dulla^@204~      
        Private columnPackagin~dulla^@204~ ata.DataColumn
        
        Pri~dulla^@204~ yRecieved As System.Data.DataColumn
~dulla^@204~      Private columnQtyIssued As Syste~dulla^@204~ lumn
        
        Private colum~dulla^@204~ s System.Data.DataColumn
        
 ~dulla^@204~ e _columnInv_____D_O As System.Data.D~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~           MyBase.New
            Me.~dulla^@204~ StockCardDetail"
            Me.Begi~dulla^@204~       Me.InitClass
            Me.En~dulla^@204~   End Sub
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Sub New(ByVal table As System.Data.Da~dulla^@204~          MyBase.New
            Me.T~dulla^@204~ ble.TableName
            If (table.~dulla^@204~  <> table.DataSet.CaseSensitive) Then~dulla^@204~      Me.CaseSensitive = table.CaseSen~dulla^@204~        End If
            If (table.~dulla^@204~ ng <> table.DataSet.Locale.ToString) ~dulla^@204~          Me.Locale = table.Locale
  ~dulla^@204~  If
            If (table.Namespace ~dulla^@204~ Set.Namespace) Then
                ~dulla^@204~ = table.Namespace
            End If~dulla^@204~  Me.Prefix = table.Prefix
          ~dulla^@204~ apacity = table.MinimumCapacity
    ~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Prote~dulla^@204~ ByVal info As System.Runtime.Serializ~dulla^@204~ zationInfo, ByVal context As System.R~dulla^@204~ ization.StreamingContext)
          ~dulla^@204~ info, context)
            Me.InitVa~dulla^@204~ nd Sub
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ dOnly Property InvoiceNoColumn() As S~dulla^@204~ taColumn
            Get
          ~dulla^@204~ Me.columnInvoiceNo
            End G~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c ReadOnly Property DateOfSaleColumn(~dulla^@204~ ata.DataColumn
            Get
    ~dulla^@204~ eturn Me.columnDateOfSale
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public ReadOnly Property StockCardN~dulla^@204~ System.Data.DataColumn
            G~dulla^@204~        Return Me.columnStockCardNo
 ~dulla^@204~ d Get
        End Property
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public ReadOnly Property D~dulla^@204~ lumn() As System.Data.DataColumn
   ~dulla^@204~ 
                Return Me.columnDate~dulla^@204~          End Get
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public ReadOnly~dulla^@204~ kagingColumn() As System.Data.DataCol~dulla^@204~     Get
                Return Me.co~dulla^@204~ 
            End Get
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Rea~dulla^@204~ y QtyRecievedColumn() As System.Data.~dulla^@204~            Get
                Retur~dulla^@204~ yRecieved
            End Get
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y Property QtyIssuedColumn() As Syste~dulla^@204~ lumn
            Get
              ~dulla^@204~ olumnQtyIssued
            End Get
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ adOnly Property QtyBalanceColumn() As~dulla^@204~ DataColumn
            Get
        ~dulla^@204~ n Me.columnQtyBalance
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic ReadOnly Property _Inv_____D_OCo~dulla^@204~ tem.Data.DataColumn
            Get~dulla^@204~     Return Me._columnInv_____D_O
   ~dulla^@204~ Get
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
         System.ComponentModel.Brows~dulla^@204~  _
        Public ReadOnly Property ~dulla^@204~ teger
            Get
             ~dulla^@204~ Rows.Count
            End Get
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ t ReadOnly Property Item(ByVal index ~dulla^@204~ s StockCardDetailRow
            Get~dulla^@204~      Return CType(Me.Rows(index),Stoc~dulla^@204~ w)
            End Get
        End ~dulla^@204~      
        Public Event StockCard~dulla^@204~ ging As StockCardDetailRowChangeEvent~dulla^@204~     
        Public Event StockCardD~dulla^@204~ ed As StockCardDetailRowChangeEventHa~dulla^@204~   
        Public Event StockCardDet~dulla^@204~ g As StockCardDetailRowChangeEventHan~dulla^@204~  
        Public Event StockCardDeta~dulla^@204~ As StockCardDetailRowChangeEventHandl~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Overloa~dulla^@204~ ckCardDetailRow(ByVal row As StockCar~dulla^@204~             Me.Rows.Add(row)
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public O~dulla^@204~ tion AddStockCardDetailRow(ByVal Invo~dulla^@204~ ng, ByVal DateOfSale As Date, ByVal S~dulla^@204~  String, ByVal DateRecieved As Date, ~dulla^@204~ ng As String, ByVal QtyRecieved As In~dulla^@204~ QtyIssued As Integer, ByVal QtyBalanc~dulla^@204~  ByVal _Inv_____D_O As String) As Sto~dulla^@204~ ow
            Dim rowStockCardDetai~dulla^@204~ CardDetailRow = CType(Me.NewRow,Stock~dulla^@204~ )
            rowStockCardDetailRow.~dulla^@204~ ew Object() {InvoiceNo, DateOfSale, S~dulla^@204~ ateRecieved, Packaging, QtyRecieved, ~dulla^@204~ yBalance, _Inv_____D_O}
            ~dulla^@204~ owStockCardDetailRow)
            Re~dulla^@204~ CardDetailRow
        End Function
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Function Fi~dulla^@204~ DateOfSale(ByVal InvoiceNo As String,~dulla^@204~ Sale As Date) As StockCardDetailRow
~dulla^@204~ eturn CType(Me.Rows.Find(New Object()~dulla^@204~ DateOfSale}),StockCardDetailRow)
   ~dulla^@204~ tion
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ idable Function GetEnumerator() As Sy~dulla^@204~ ons.IEnumerator Implements System.Col~dulla^@204~ merable.GetEnumerator
            Re~dulla^@204~ GetEnumerator
        End Function
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Overrides F~dulla^@204~ () As System.Data.DataTable
        ~dulla^@204~ s StockCardDetailDataTable = CType(My~dulla^@204~ ockCardDetailDataTable)
            ~dulla^@204~ 
            Return cln
        End Function
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ rrides Function CreateInstance() As S~dulla^@204~ taTable
            Return New Stock~dulla^@204~ aTable
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Friend Sub InitVars()
  ~dulla^@204~ columnInvoiceNo = MyBase.Columns("Inv~dulla^@204~          Me.columnDateOfSale = MyBase~dulla^@204~ eOfSale")
            Me.columnStock~dulla^@204~ se.Columns("StockCardNo")
          ~dulla^@204~ teRecieved = MyBase.Columns("DateReci~dulla^@204~        Me.columnPackaging = MyBase.Co~dulla^@204~ ing")
            Me.columnQtyReciev~dulla^@204~ olumns("QtyRecieved")
            Me~dulla^@204~ ued = MyBase.Columns("QtyIssued")
  ~dulla^@204~ columnQtyBalance = MyBase.Columns("Qt~dulla^@204~            Me._columnInv_____D_O = My~dulla^@204~ "Inv_ &_ D_O")
        End Sub
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Private Sub InitClass(~dulla^@204~   Me.columnInvoiceNo = New System.Dat~dulla^@204~ "InvoiceNo", GetType(String), Nothing~dulla^@204~ .MappingType.Element)
            My~dulla^@204~ Add(Me.columnInvoiceNo)
            ~dulla^@204~ OfSale = New System.Data.DataColumn("~dulla^@204~ GetType(Date), Nothing, System.Data.M~dulla^@204~ ement)
            MyBase.Columns.Ad~dulla^@204~ teOfSale)
            Me.columnStock~dulla^@204~ System.Data.DataColumn("StockCardNo",~dulla^@204~ ng), Nothing, System.Data.MappingType~dulla^@204~           MyBase.Columns.Add(Me.colum~dulla^@204~ 
            Me.columnDateRecieved =~dulla^@204~ ata.DataColumn("DateRecieved", GetTyp~dulla^@204~ ing, System.Data.MappingType.Element)~dulla^@204~  MyBase.Columns.Add(Me.columnDateReci~dulla^@204~       Me.columnPackaging = New System~dulla^@204~ umn("Packaging", GetType(String), Not~dulla^@204~ Data.MappingType.Element)
          ~dulla^@204~ mns.Add(Me.columnPackaging)
        ~dulla^@204~ QtyRecieved = New System.Data.DataCol~dulla^@204~ ved", GetType(Integer), Nothing, Syst~dulla^@204~ ngType.Element)
            MyBase.C~dulla^@204~ .columnQtyRecieved)
            Me.c~dulla^@204~ d = New System.Data.DataColumn("QtyIs~dulla^@204~ e(Integer), Nothing, System.Data.Mapp~dulla^@204~ nt)
            MyBase.Columns.Add(M~dulla^@204~ sued)
            Me.columnQtyBalanc~dulla^@204~ m.Data.DataColumn("QtyBalance", GetTy~dulla^@204~ Nothing, System.Data.MappingType.Elem~dulla^@204~      MyBase.Columns.Add(Me.columnQtyB~dulla^@204~         Me._columnInv_____D_O = New S~dulla^@204~ taColumn("Inv_ &_ D_O", GetType(Strin~dulla^@204~ System.Data.MappingType.Element)
   ~dulla^@204~ columnInv_____D_O.ExtendedProperties.~dulla^@204~ r_ColumnPropNameInRow", "_Inv_____D_O~dulla^@204~    Me._columnInv_____D_O.ExtendedProp~dulla^@204~ enerator_ColumnPropNameInTable", "_In~dulla^@204~ mn")
            Me._columnInv_____D~dulla^@204~ operties.Add("Generator_ColumnVarName~dulla^@204~ olumnInv_____D_O")
            Me._c~dulla^@204~ D_O.ExtendedProperties.Add("Generator~dulla^@204~ me", "Inv_ &_ D_O")
            MyBa~dulla^@204~ d(Me._columnInv_____D_O)
           ~dulla^@204~ ts.Add(New System.Data.UniqueConstrai~dulla^@204~ t1", New System.Data.DataColumn() {Me~dulla^@204~ eNo, Me.columnDateOfSale}, true))
  ~dulla^@204~ columnInvoiceNo.AllowDBNull = false
~dulla^@204~ e.columnInvoiceNo.MaxLength = 20
   ~dulla^@204~ olumnDateOfSale.AllowDBNull = false
~dulla^@204~ e.columnStockCardNo.AllowDBNull = fal~dulla^@204~    Me.columnStockCardNo.MaxLength = 2~dulla^@204~   Me.columnDateRecieved.AllowDBNull =~dulla^@204~        Me.columnPackaging.AllowDBNull~dulla^@204~          Me.columnPackaging.MaxLength~dulla^@204~       Me.columnQtyBalance.AllowDBNull~dulla^@204~          Me._columnInv_____D_O.MaxLen~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic Function NewStockCardDetailRow() A~dulla^@204~ tailRow
            Return CType(Me.~dulla^@204~ ardDetailRow)
        End Function
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Protected Override~dulla^@204~ wRowFromBuilder(ByVal builder As Syst~dulla^@204~ owBuilder) As System.Data.DataRow
  ~dulla^@204~ urn New StockCardDetailRow(builder)
~dulla^@204~ unction
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~  Overrides Function GetRowType() As S~dulla^@204~            Return GetType(StockCardDe~dulla^@204~      End Function
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Protected Overrides Sub OnRowChanged~dulla^@204~ ystem.Data.DataRowChangeEventArgs)
 ~dulla^@204~ Base.OnRowChanged(e)
            If ~dulla^@204~ kCardDetailRowChangedEvent) Is Nothin~dulla^@204~             RaiseEvent StockCardDetai~dulla^@204~ e, New StockCardDetailRowChangeEvent(~dulla^@204~ tockCardDetailRow), e.Action))
     ~dulla^@204~ 
        End Sub
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Protected Overrides Sub OnRowChangin~dulla^@204~ System.Data.DataRowChangeEventArgs)
~dulla^@204~ yBase.OnRowChanging(e)
            I~dulla^@204~ ockCardDetailRowChangingEvent) Is Not~dulla^@204~                RaiseEvent StockCardDe~dulla^@204~ ng(Me, New StockCardDetailRowChangeEv~dulla^@204~ ow,StockCardDetailRow), e.Action))
 ~dulla^@204~ d If
        End Sub
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Protected Overrides Sub OnRowDel~dulla^@204~ As System.Data.DataRowChangeEventArgs~dulla^@204~   MyBase.OnRowDeleted(e)
           ~dulla^@204~ StockCardDetailRowDeletedEvent) Is No~dulla^@204~                 RaiseEvent StockCardD~dulla^@204~ ed(Me, New StockCardDetailRowChangeEv~dulla^@204~ ow,StockCardDetailRow), e.Action))
 ~dulla^@204~ d If
        End Sub
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Protected Overrides Sub OnRowDel~dulla^@204~  As System.Data.DataRowChangeEventArg~dulla^@204~    MyBase.OnRowDeleting(e)
         ~dulla^@204~ e.StockCardDetailRowDeletingEvent) Is~dulla^@204~ n
                RaiseEvent StockCa~dulla^@204~ leting(Me, New StockCardDetailRowChan~dulla^@204~ (e.Row,StockCardDetailRow), e.Action)~dulla^@204~   End If
        End Sub
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Sub RemoveStockCardDe~dulla^@204~  row As StockCardDetailRow)
        ~dulla^@204~ emove(row)
        End Sub
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Shared Function Get~dulla^@204~ ema(ByVal xs As System.Xml.Schema.Xml~dulla^@204~  System.Xml.Schema.XmlSchemaComplexTy~dulla^@204~    Dim type As System.Xml.Schema.XmlS~dulla^@204~ ype = New System.Xml.Schema.XmlSchema~dulla^@204~             Dim sequence As System.Xm~dulla^@204~ chemaSequence = New System.Xml.Schema~dulla^@204~ uence
            Dim ds As Inventor~dulla^@204~ mDataSet = New InventoryControlSystem~dulla^@204~         xs.Add(ds.GetSchemaSerializab~dulla^@204~     Dim any1 As System.Xml.Schema.Xml~dulla^@204~ ew System.Xml.Schema.XmlSchemaAny
  ~dulla^@204~ 1.Namespace = "http://www.w3.org/2001~dulla^@204~             any1.MinOccurs = New Deci~dulla^@204~        any1.MaxOccurs = Decimal.MaxVa~dulla^@204~     any1.ProcessContents = System.Xml~dulla^@204~ hemaContentProcessing.Lax
          ~dulla^@204~ ems.Add(any1)
            Dim any2 A~dulla^@204~ Schema.XmlSchemaAny = New System.Xml.~dulla^@204~ emaAny
            any2.Namespace = ~dulla^@204~ microsoft-com:xml-diffgram-v1"
     ~dulla^@204~ inOccurs = New Decimal(1)
          ~dulla^@204~ sContents = System.Xml.Schema.XmlSche~dulla^@204~ essing.Lax
            sequence.Item~dulla^@204~             Dim attribute1 As System.~dulla^@204~ lSchemaAttribute = New System.Xml.Sch~dulla^@204~ Attribute
            attribute1.Nam~dulla^@204~ e"
            attribute1.FixedValue~dulla^@204~ ce
            type.Attributes.Add(a~dulla^@204~            Dim attribute2 As System.X~dulla^@204~ SchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribu~dulla^@204~ ableTypeName"
            attribute2~dulla^@204~  "StockCardDetailDataTable"
        ~dulla^@204~ ibutes.Add(attribute2)
            t~dulla^@204~ = sequence
            Return type
~dulla^@204~ unction
    End Class
    
    <Sy~dulla^@204~ Compiler.GeneratedCodeAttribute("Syst~dulla^@204~ n.TypedDataSetGenerator", "2.0.0.0"),~dulla^@204~ tem.Serializable(),  _
     System.X~dulla^@204~ ion.XmlSchemaProviderAttribute("GetTy~dulla^@204~ a")>  _
    Partial Public Class Sup~dulla^@204~ e
        Inherits System.Data.DataT~dulla^@204~  Implements System.Collections.IEnume~dulla^@204~   
        Private columnSupplierID ~dulla^@204~ a.DataColumn
        
        Priva~dulla^@204~ lierName As System.Data.DataColumn
 ~dulla^@204~     Private columnAddress As System.D~dulla^@204~ n
        
        Private columnCi~dulla^@204~ Data.DataColumn
        
        Pr~dulla^@204~ ountry As System.Data.DataColumn
   ~dulla^@204~   Private columnPhone As System.Data.~dulla^@204~        
        Private columnFax As~dulla^@204~ DataColumn
        
        Private~dulla^@204~ Address As System.Data.DataColumn
  ~dulla^@204~    Private columnWebsite As System.Da~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ 
            MyBase.New
           ~dulla^@204~  = "Supplier"
            Me.BeginIn~dulla^@204~    Me.InitClass
            Me.EndIn~dulla^@204~ nd Sub
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~  New(ByVal table As System.Data.DataT~dulla^@204~       MyBase.New
            Me.Tabl~dulla^@204~ .TableName
            If (table.Cas~dulla^@204~  table.DataSet.CaseSensitive) Then
 ~dulla^@204~   Me.CaseSensitive = table.CaseSensit~dulla^@204~     End If
            If (table.Loc~dulla^@204~ <> table.DataSet.Locale.ToString) The~dulla^@204~       Me.Locale = table.Locale
     ~dulla^@204~ 
            If (table.Namespace <> ~dulla^@204~ .Namespace) Then
                Me.~dulla^@204~ able.Namespace
            End If
 ~dulla^@204~ .Prefix = table.Prefix
            M~dulla^@204~ city = table.MinimumCapacity
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Protecte~dulla^@204~ al info As System.Runtime.Serializati~dulla^@204~ ionInfo, ByVal context As System.Runt~dulla^@204~ tion.StreamingContext)
            M~dulla^@204~ o, context)
            Me.InitVars~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ly Property SupplierIDColumn() As Sys~dulla^@204~ Column
            Get
            ~dulla^@204~ .columnSupplierID
            End Ge~dulla^@204~ d Property
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  ReadOnly Property SupplierNameColumn~dulla^@204~ Data.DataColumn
            Get
   ~dulla^@204~ Return Me.columnSupplierName
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public ReadOnly Property Address~dulla^@204~ ystem.Data.DataColumn
            Ge~dulla^@204~       Return Me.columnAddress
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public ReadOnly Property CityCo~dulla^@204~ tem.Data.DataColumn
            Get~dulla^@204~     Return Me.columnCity
           ~dulla^@204~      End Property
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public ReadOnly Property CountryColu~dulla^@204~ m.Data.DataColumn
            Get
 ~dulla^@204~   Return Me.columnCountry
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public ReadOnly Property PhoneColum~dulla^@204~ .Data.DataColumn
            Get
  ~dulla^@204~  Return Me.columnPhone
            E~dulla^@204~    End Property
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic ReadOnly Property FaxColumn() A~dulla^@204~ .DataColumn
            Get
       ~dulla^@204~ rn Me.columnFax
            End Get~dulla^@204~ Property
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ eadOnly Property PostalAddressColumn(~dulla^@204~ ata.DataColumn
            Get
    ~dulla^@204~ eturn Me.columnPostalAddress
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public ReadOnly Property Website~dulla^@204~ ystem.Data.DataColumn
            Ge~dulla^@204~       Return Me.columnWebsite
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~        System.ComponentModel.Browsabl~dulla^@204~ 
        Public ReadOnly Property Cou~dulla^@204~ er
            Get
                ~dulla^@204~ s.Count
            End Get
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ eadOnly Property Item(ByVal index As ~dulla^@204~ upplierRow
            Get
        ~dulla^@204~ n CType(Me.Rows(index),SupplierRow)
~dulla^@204~ nd Get
        End Property
       ~dulla^@204~ blic Event SupplierRowChanging As Sup~dulla^@204~ eEventHandler
        
        Publ~dulla^@204~ lierRowChanged As SupplierRowChangeEv~dulla^@204~        
        Public Event Supplie~dulla^@204~ As SupplierRowChangeEventHandler
   ~dulla^@204~   Public Event SupplierRowDeleted As ~dulla^@204~ angeEventHandler
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Overloads Sub AddSupplierRow(B~dulla^@204~ upplierRow)
            Me.Rows.Add(~dulla^@204~  End Sub
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ verloads Function AddSupplierRow(ByVa~dulla^@204~ As String, ByVal SupplierName As Stri~dulla^@204~ ress As String, ByVal City As String,~dulla^@204~ y As String, ByVal Phone As String, B~dulla^@204~ tring, ByVal PostalAddress As String,~dulla^@204~ e As String) As SupplierRow
        ~dulla^@204~ pplierRow As SupplierRow = CType(Me.N~dulla^@204~ rRow)
            rowSupplierRow.Ite~dulla^@204~ Object() {SupplierID, SupplierName, A~dulla^@204~  Country, Phone, Fax, PostalAddress, ~dulla^@204~          Me.Rows.Add(rowSupplierRow)~dulla^@204~ Return rowSupplierRow
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Fun~dulla^@204~ upplierID(ByVal SupplierID As String)~dulla^@204~ ow
            Return CType(Me.Rows.~dulla^@204~ ct() {SupplierID}),SupplierRow)
    ~dulla^@204~ ion
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ dable Function GetEnumerator() As Sys~dulla^@204~ ns.IEnumerator Implements System.Coll~dulla^@204~ erable.GetEnumerator
            Ret~dulla^@204~ etEnumerator
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public Overrides Fu~dulla^@204~ ) As System.Data.DataTable
         ~dulla^@204~  SupplierDataTable = CType(MyBase.Clo~dulla^@204~ taTable)
            cln.InitVars
 ~dulla^@204~ turn cln
        End Function
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Protected Overrides Fun~dulla^@204~ nstance() As System.Data.DataTable
 ~dulla^@204~ turn New SupplierDataTable
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Frien~dulla^@204~ s()
            Me.columnSupplierID ~dulla^@204~ mns("SupplierID")
            Me.col~dulla^@204~ me = MyBase.Columns("SupplierName")
~dulla^@204~ e.columnAddress = MyBase.Columns("Add~dulla^@204~        Me.columnCity = MyBase.Columns~dulla^@204~          Me.columnCountry = MyBase.Co~dulla^@204~ y")
            Me.columnPhone = MyB~dulla^@204~ Phone")
            Me.columnFax = M~dulla^@204~ ("Fax")
            Me.columnPostalAddress = MyBase.Columns("PostalAddress")
~dulla^@204~ e.columnWebsite = MyBase.Columns("Web~dulla^@204~    End Sub
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~ e Sub InitClass()
            Me.col~dulla^@204~  = New System.Data.DataColumn("Suppli~dulla^@204~ e(String), Nothing, System.Data.Mappi~dulla^@204~ t)
            MyBase.Columns.Add(Me~dulla^@204~ erID)
            Me.columnSupplierN~dulla^@204~ tem.Data.DataColumn("SupplierName", G~dulla^@204~ ), Nothing, System.Data.MappingType.E~dulla^@204~         MyBase.Columns.Add(Me.columnS~dulla^@204~ 
            Me.columnAddress = New S~dulla^@204~ taColumn("Address", GetType(String), ~dulla^@204~ em.Data.MappingType.Element)
       ~dulla^@204~ olumns.Add(Me.columnAddress)
       ~dulla^@204~ nCity = New System.Data.DataColumn("C~dulla^@204~ (String), Nothing, System.Data.Mappin~dulla^@204~ )
            MyBase.Columns.Add(Me.~dulla^@204~             Me.columnCountry = New Sy~dulla^@204~ aColumn("Country", GetType(String), N~dulla^@204~ m.Data.MappingType.Element)
        ~dulla^@204~ lumns.Add(Me.columnCountry)
        ~dulla^@204~ Phone = New System.Data.DataColumn("P~dulla^@204~ e(String), Nothing, System.Data.Mappi~dulla^@204~ t)
            MyBase.Columns.Add(Me~dulla^@204~ 
            Me.columnFax = New Syst~dulla^@204~ olumn("Fax", GetType(String), Nothing~dulla^@204~ .MappingType.Element)
            My~dulla^@204~ Add(Me.columnFax)
            Me.col~dulla^@204~ ess = New System.Data.DataColumn("Pos~dulla^@204~ GetType(String), Nothing, System.Data~dulla^@204~ Element)
            MyBase.Columns.~dulla^@204~ PostalAddress)
            Me.column~dulla^@204~  System.Data.DataColumn("Website", Ge~dulla^@204~ , Nothing, System.Data.MappingType.El~dulla^@204~        MyBase.Columns.Add(Me.columnWe~dulla^@204~        Me.Constraints.Add(New System.~dulla^@204~ nstraint("Constraint1", New System.Da~dulla^@204~ () {Me.columnSupplierID}, true))
   ~dulla^@204~ olumnSupplierID.AllowDBNull = false
~dulla^@204~ e.columnSupplierID.Unique = true
   ~dulla^@204~ olumnSupplierID.MaxLength = 50
     ~dulla^@204~ umnSupplierName.AllowDBNull = false
~dulla^@204~ e.columnSupplierName.MaxLength = 20
~dulla^@204~ e.columnAddress.MaxLength = 10
     ~dulla^@204~ umnCity.MaxLength = 20
            M~dulla^@204~ ry.MaxLength = 20
            Me.col~dulla^@204~ ength = 15
            Me.columnFax.~dulla^@204~  false
            Me.columnFax.MaxL~dulla^@204~            Me.columnPostalAddress.All~dulla^@204~ lse
            Me.columnPostalAddre~dulla^@204~ = 10
            Me.columnWebsite.Al~dulla^@204~ alse
            Me.columnWebsite.Ma~dulla^@204~ 
        End Sub
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Function NewSupplierRow() As S~dulla^@204~            Return CType(Me.NewRow,Sup~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Protected Overrides Function NewRow~dulla^@204~ yVal builder As System.Data.DataRowBu~dulla^@204~ tem.Data.DataRow
            Return ~dulla^@204~ ow(builder)
        End Function
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Protected Overrides ~dulla^@204~ owType() As System.Type
            ~dulla^@204~ e(SupplierRow)
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Protected Overrid~dulla^@204~ hanged(ByVal e As System.Data.DataRow~dulla^@204~ gs)
            MyBase.OnRowChanged(~dulla^@204~    If (Not (Me.SupplierRowChangedEven~dulla^@204~ ) Then
                RaiseEvent Su~dulla^@204~ ged(Me, New SupplierRowChangeEvent(CT~dulla^@204~ plierRow), e.Action))
            En~dulla^@204~  End Sub
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ d Overrides Sub OnRowChanging(ByVal e~dulla^@204~ ta.DataRowChangeEventArgs)
         ~dulla^@204~ owChanging(e)
            If (Not (M~dulla^@204~ ChangingEvent) Is Nothing) Then
    ~dulla^@204~ aiseEvent SupplierRowChanging(Me, New~dulla^@204~ hangeEvent(CType(e.Row,SupplierRow), ~dulla^@204~            End If
        End Sub
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Protected Overrides~dulla^@204~ eted(ByVal e As System.Data.DataRowCh~dulla^@204~ )
            MyBase.OnRowDeleted(e)~dulla^@204~  If (Not (Me.SupplierRowDeletedEvent)~dulla^@204~ Then
                RaiseEvent Supp~dulla^@204~ d(Me, New SupplierRowChangeEvent(CTyp~dulla^@204~ ierRow), e.Action))
            End ~dulla^@204~ nd Sub
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ Overrides Sub OnRowDeleting(ByVal e A~dulla^@204~ .DataRowChangeEventArgs)
           ~dulla^@204~ Deleting(e)
            If (Not (Me.~dulla^@204~ letingEvent) Is Nothing) Then
      ~dulla^@204~ seEvent SupplierRowDeleting(Me, New S~dulla^@204~ ngeEvent(CType(e.Row,SupplierRow), e.~dulla^@204~          End If
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public Sub RemoveSupp~dulla^@204~  row As SupplierRow)
            Me.~dulla^@204~ ow)
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Shared Function GetTypedTa~dulla^@204~ al xs As System.Xml.Schema.XmlSchemaS~dulla^@204~ .Xml.Schema.XmlSchemaComplexType
   ~dulla^@204~ type As System.Xml.Schema.XmlSchemaCo~dulla^@204~ ew System.Xml.Schema.XmlSchemaComplex~dulla^@204~      Dim sequence As System.Xml.Schem~dulla^@204~ quence = New System.Xml.Schema.XmlSch~dulla^@204~             Dim ds As InventoryContro~dulla^@204~ t = New InventoryControlSystemDataSet~dulla^@204~  xs.Add(ds.GetSchemaSerializable)
  ~dulla^@204~  any1 As System.Xml.Schema.XmlSchemaA~dulla^@204~ em.Xml.Schema.XmlSchemaAny
         ~dulla^@204~ pace = "http://www.w3.org/2001/XMLSch~dulla^@204~      any1.MinOccurs = New Decimal(0)~dulla^@204~ any1.MaxOccurs = Decimal.MaxValue
  ~dulla^@204~ 1.ProcessContents = System.Xml.Schema~dulla^@204~ tentProcessing.Lax
            seque~dulla^@204~ (any1)
            Dim any2 As Syste~dulla^@204~ XmlSchemaAny = New System.Xml.Schema.~dulla^@204~ 
            any2.Namespace = "urn:sc~dulla^@204~ ft-com:xml-diffgram-v1"
            ~dulla^@204~ s = New Decimal(1)
            any2.~dulla^@204~ ts = System.Xml.Schema.XmlSchemaConte~dulla^@204~ Lax
            sequence.Items.Add(a~dulla^@204~      Dim attribute1 As System.Xml.Sch~dulla^@204~ Attribute = New System.Xml.Schema.Xml~dulla^@204~ te
            attribute1.Name = "na~dulla^@204~          attribute1.FixedValue = ds.N~dulla^@204~          type.Attributes.Add(attribut~dulla^@204~     Dim attribute2 As System.Xml.Sche~dulla^@204~ ttribute = New System.Xml.Schema.XmlS~dulla^@204~ e
            attribute2.Name = "tab~dulla^@204~             attribute2.FixedValue = "~dulla^@204~ able"
            type.Attributes.Ad~dulla^@204~ 
            type.Particle = sequenc~dulla^@204~   Return type
        End Function
~dulla^@204~ 
    
    <System.CodeDom.Compiler.~dulla^@204~ Attribute("System.Data.Design.TypedDa~dulla^@204~ r", "2.0.0.0")>  _
    Partial Publi~dulla^@204~ nyInfoRow
        Inherits System.Da~dulla^@204~        
        Private tableCompany~dulla^@204~ nyInfoDataTable
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ riend Sub New(ByVal rb As System.Data~dulla^@204~ er)
            MyBase.New(rb)
    ~dulla^@204~ bleCompanyInfo = CType(Me.Table,Compa~dulla^@204~ le)
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Property CompanyName() As ~dulla^@204~        Get
                Return CT~dulla^@204~ leCompanyInfo.CompanyNameColumn),Stri~dulla^@204~     End Get
            Set
       ~dulla^@204~ e.tableCompanyInfo.CompanyNameColumn)~dulla^@204~          End Set
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Property~dulla^@204~  String
            Get
                Return CType(Me(Me.tableCompanyInfo.A~dulla^@204~ ,String)
            End Get
      ~dulla^@204~               Me(Me.tableCompanyInfo.~dulla^@204~ ) = value
            End Set
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y City() As String
            Get
~dulla^@204~    Return CType(Me(Me.tableCompanyInf~dulla^@204~ ,String)
            End Get
      ~dulla^@204~               Me(Me.tableCompanyInfo.~dulla^@204~  value
            End Set
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ ountry() As String
            Get
~dulla^@204~    Return CType(Me(Me.tableCompanyInf~dulla^@204~ mn),String)
            End Get
   ~dulla^@204~ 
                Me(Me.tableCompanyIn~dulla^@204~ umn) = value
            End Set
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ erty Tel() As String
            Get~dulla^@204~      Try 
                    Return~dulla^@204~ tableCompanyInfo.TelColumn),String)
~dulla^@204~    Catch e As System.InvalidCastExcep~dulla^@204~              Throw New System.Data.St~dulla^@204~ eption("The value for column 'Tel' in~dulla^@204~ nyInfo' is DBNull.", e)
            ~dulla^@204~             End Get
            Set~dulla^@204~     Me(Me.tableCompanyInfo.TelColumn)~dulla^@204~          End Set
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Property~dulla^@204~ ing
            Get
               ~dulla^@204~               Return CType(Me(Me.tabl~dulla^@204~ FaxColumn),String)
                C~dulla^@204~ tem.InvalidCastException
           ~dulla^@204~ w New System.Data.StrongTypingExcepti~dulla^@204~  for column 'Fax' in table 'CompanyIn~dulla^@204~ .", e)
                End Try
    ~dulla^@204~ et
            Set
                ~dulla^@204~ mpanyInfo.FaxColumn) = value
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Property PostalAddress() ~dulla^@204~           Get
                Try 
~dulla^@204~        Return CType(Me(Me.tableCompan~dulla^@204~ ddressColumn),String)
              ~dulla^@204~ System.InvalidCastException
        ~dulla^@204~ hrow New System.Data.StrongTypingExce~dulla^@204~ lue for column 'PostalAddress' in tab~dulla^@204~ fo' is DBNull.", e)
                ~dulla^@204~         End Get
            Set
   ~dulla^@204~ Me(Me.tableCompanyInfo.PostalAddressC~dulla^@204~ e
            End Set
        End P~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Pr~dulla^@204~ ) As String
            Get
       ~dulla^@204~ 
                    Return CType(Me~dulla^@204~ anyInfo.EmailColumn),String)
       ~dulla^@204~ h e As System.InvalidCastException
 ~dulla^@204~       Throw New System.Data.StrongTyp~dulla^@204~ "The value for column 'Email' in tabl~dulla^@204~ o' is DBNull.", e)
                E~dulla^@204~        End Get
            Set
    ~dulla^@204~ e(Me.tableCompanyInfo.EmailColumn) = ~dulla^@204~       End Set
        End Property
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Property Co~dulla^@204~ () As Date
            Get
        ~dulla^@204~ n CType(Me(Me.tableCompanyInfo.Compan~dulla^@204~ mn),Date)
            End Get
     ~dulla^@204~                Me(Me.tableCompanyInfo~dulla^@204~ gNoColumn) = value
            End S~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Property CompanyTINNo() As String
~dulla^@204~ et
                Return CType(Me(M~dulla^@204~ yInfo.CompanyTINNoColumn),String)
  ~dulla^@204~  Get
            Set
              ~dulla^@204~ CompanyInfo.CompanyTINNoColumn) = val~dulla^@204~    End Set
        End Property
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public Property Compa~dulla^@204~  As Date
            Get
          ~dulla^@204~ CType(Me(Me.tableCompanyInfo.CompanyD~dulla^@204~ n),Date)
            End Get
      ~dulla^@204~               Me(Me.tableCompanyInfo.~dulla^@204~ RegColumn) = value
            End S~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Function IsTelNull() As Boolean
  ~dulla^@204~ urn Me.IsNull(Me.tableCompanyInfo.Tel~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Sub SetTelNull()
            ~dulla^@204~ mpanyInfo.TelColumn) = System.Convert~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Function IsFaxNull() As Boolean
  ~dulla^@204~ urn Me.IsNull(Me.tableCompanyInfo.Fax~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Sub SetFaxNull()
            ~dulla^@204~ mpanyInfo.FaxColumn) = System.Convert~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Function IsPostalAddressNull() As B~dulla^@204~        Return Me.IsNull(Me.tableCompa~dulla^@204~ AddressColumn)
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Sub SetPos~dulla^@204~ l()
            Me(Me.tableCompanyIn~dulla^@204~ essColumn) = System.Convert.DBNull
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  IsEmailNull() As Boolean
          ~dulla^@204~ sNull(Me.tableCompanyInfo.EmailColumn~dulla^@204~ d Function
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Sub SetEmailNull()
            Me(M~dulla^@204~ yInfo.EmailColumn) = System.Convert.D~dulla^@204~   End Sub
    End Class
    
    <~dulla^@204~ m.Compiler.GeneratedCodeAttribute("Sy~dulla^@204~ ign.TypedDataSetGenerator", "2.0.0.0"~dulla^@204~ rtial Public Class CustomerRow
     ~dulla^@204~ ystem.Data.DataRow
        
       ~dulla^@204~ eCustomer As CustomerDataTable
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Friend Sub New(ByVal rb~dulla^@204~ ta.DataRowBuilder)
            MyBas~dulla^@204~           Me.tableCustomer = CType(Me~dulla^@204~ erDataTable)
        End Sub
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Property Customer~dulla^@204~ g
            Get
                R~dulla^@204~ e(Me.tableCustomer.CustomerIDColumn),~dulla^@204~         End Get
            Set
   ~dulla^@204~ Me(Me.tableCustomer.CustomerIDColumn)~dulla^@204~          End Set
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Property~dulla^@204~ () As String
            Get
      ~dulla^@204~  
                    Return CType(M~dulla^@204~ tomer.CustomerNameColumn),String)
  ~dulla^@204~  Catch e As System.InvalidCastExcepti~dulla^@204~            Throw New System.Data.Stro~dulla^@204~ tion("The value for column 'CustomerN~dulla^@204~  'Customer' is DBNull.", e)
        ~dulla^@204~ ry
            End Get
            ~dulla^@204~         Me(Me.tableCustomer.CustomerN~dulla^@204~ value
            End Set
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ dress() As String
            Get
 ~dulla^@204~   Return CType(Me(Me.tableCustomer.Ad~dulla^@204~ String)
            End Get
       ~dulla^@204~              Me(Me.tableCustomer.Addr~dulla^@204~ value
            End Set
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ ty() As String
            Get
    ~dulla^@204~ eturn CType(Me(Me.tableCustomer.CityC~dulla^@204~ )
            End Get
            S~dulla^@204~        Me(Me.tableCustomer.CityColumn) = value
            End Set
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ ntry() As String
            Get
  ~dulla^@204~  Return CType(Me(Me.tableCustomer.Cou~dulla^@204~ tring)
            End Get
        ~dulla^@204~             Me(Me.tableCustomer.Count~dulla^@204~ alue
            End Set
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ () As String
            Get
      ~dulla^@204~ urn CType(Me(Me.tableCustomer.TelColu~dulla^@204~             End Get
            Set~dulla^@204~     Me(Me.tableCustomer.TelColumn) = ~dulla^@204~       End Set
        End Property
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Property Fa~dulla^@204~ 
            Get
                Re~dulla^@204~ (Me.tableCustomer.FaxColumn),String)~dulla^@204~ End Get
            Set
           ~dulla^@204~ bleCustomer.FaxColumn) = value
     ~dulla^@204~ t
        End Property
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Property PostalAddress(~dulla^@204~             Get
                Retu~dulla^@204~ e.tableCustomer.PostalAddressColumn),~dulla^@204~         End Get
            Set
   ~dulla^@204~ Me(Me.tableCustomer.PostalAddressColu~dulla^@204~             End Set
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Prope~dulla^@204~ s String
            Get
          ~dulla^@204~ CType(Me(Me.tableCustomer.EmailColumn~dulla^@204~           End Get
            Set
 ~dulla^@204~   Me(Me.tableCustomer.EmailColumn) = ~dulla^@204~       End Set
        End Property
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Property Cu~dulla^@204~ o() As String
            Get
     ~dulla^@204~ y 
                    Return CType(~dulla^@204~ stomer.CustomerVATRegNoColumn),String~dulla^@204~       Catch e As System.InvalidCastEx~dulla^@204~                 Throw New System.Data~dulla^@204~ Exception("The value for column 'Cust~dulla^@204~  in table 'Customer' is DBNull.", e)~dulla^@204~     End Try
            End Get
   ~dulla^@204~ 
                Me(Me.tableCustomer.~dulla^@204~ gNoColumn) = value
            End S~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Property CustomerTINNo() As String~dulla^@204~ Get
                Try 
          ~dulla^@204~ urn CType(Me(Me.tableCustomer.Custome~dulla^@204~ ,String)
                Catch e As ~dulla^@204~ dCastException
                    T~dulla^@204~ em.Data.StrongTypingException("The va~dulla^@204~ n 'CustomerTINNo' in table 'Customer'~dulla^@204~  e)
                End Try
       ~dulla^@204~ 
            Set
                Me(~dulla^@204~ mer.CustomerTINNoColumn) = value
   ~dulla^@204~ Set
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Property CustomerDate~dulla^@204~ te
            Get
                ~dulla^@204~              Return CType(Me(Me.table~dulla^@204~ omerDateOfRegColumn),Date)
         ~dulla^@204~ e As System.InvalidCastException
   ~dulla^@204~     Throw New System.Data.StrongTypin~dulla^@204~ he value for column 'CustomerDateOfRe~dulla^@204~ Customer' is DBNull.", e)
          ~dulla^@204~ 
            End Get
            Se~dulla^@204~       Me(Me.tableCustomer.CustomerDat~dulla^@204~  = value
            End Set
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  ProductDateOfSupply() As Date
     ~dulla^@204~                Try 
                ~dulla^@204~ ype(Me(Me.tableCustomer.ProductDateOf~dulla^@204~ ,Date)
                Catch e As Sy~dulla^@204~ astException
                    Thr~dulla^@204~ .Data.StrongTypingException("The valu~dulla^@204~ 'ProductDateOfSupply' in table 'Custo~dulla^@204~ l.", e)
                End Try
   ~dulla^@204~ Get
            Set
               ~dulla^@204~ ustomer.ProductDateOfSupplyColumn) = ~dulla^@204~       End Set
        End Property
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Function Is~dulla^@204~ ull() As Boolean
            Return ~dulla^@204~ tableCustomer.CustomerNameColumn)
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ SetCustomerNameNull()
            Me~dulla^@204~ omer.CustomerNameColumn) = System.Con~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Function IsCustomerVATRegNoNull~dulla^@204~ 
            Return Me.IsNull(Me.tab~dulla^@204~ stomerVATRegNoColumn)
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Sub~dulla^@204~ ATRegNoNull()
            Me(Me.tabl~dulla^@204~ tomerVATRegNoColumn) = System.Convert~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Function IsCustomerTINNoNull() As B~dulla^@204~        Return Me.IsNull(Me.tableCusto~dulla^@204~ INNoColumn)
        End Function
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Sub SetCustom~dulla^@204~ 
            Me(Me.tableCustomer.Cus~dulla^@204~ umn) = System.Convert.DBNull
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public F~dulla^@204~ tomerDateOfRegNull() As Boolean
    ~dulla^@204~ n Me.IsNull(Me.tableCustomer.Customer~dulla^@204~ mn)
        End Function
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Sub SetCustomerDateOf~dulla^@204~           Me(Me.tableCustomer.Custome~dulla^@204~ umn) = System.Convert.DBNull
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public F~dulla^@204~ ductDateOfSupplyNull() As Boolean
  ~dulla^@204~ urn Me.IsNull(Me.tableCustomer.Produc~dulla^@204~ Column)
        End Function
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Sub SetProductDat~dulla^@204~ ()
            Me(Me.tableCustomer.P~dulla^@204~ upplyColumn) = System.Convert.DBNull~dulla^@204~ Sub
    End Class
    
    <System~dulla^@204~ iler.GeneratedCodeAttribute("System.D~dulla^@204~ pedDataSetGenerator", "2.0.0.0")>  _~dulla^@204~ Public Class InvoiceRow
        Inhe~dulla^@204~ ata.DataRow
        
        Privat~dulla^@204~ e As InvoiceDataTable
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Friend Sub New(ByVal rb As Syste~dulla^@204~ wBuilder)
            MyBase.New(rb)~dulla^@204~  Me.tableInvoice = CType(Me.Table,Inv~dulla^@204~ )
        End Sub
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Property InvoiceNo() As Stri~dulla^@204~    Get
                Return CType(~dulla^@204~ voice.InvoiceNoColumn),String)
     ~dulla^@204~ t
            Set
                M~dulla^@204~ oice.InvoiceNoColumn) = value
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Property _Date() As Date~dulla^@204~  Get
                Return CType(Me~dulla^@204~ ice.DateColumn),Date)
            En~dulla^@204~       Set
                Me(Me.tabl~dulla^@204~ Column) = value
            End Set~dulla^@204~ Property
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ roperty TotalAmount() As Integer
   ~dulla^@204~ 
                Return CType(Me(Me.t~dulla^@204~ otalAmountColumn),Integer)
         ~dulla^@204~            Set
                Me(Me~dulla^@204~ .TotalAmountColumn) = value
        ~dulla^@204~         End Property
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Property FrieghtCharge() As Integer
            Get
              ~dulla^@204~                Return CType(Me(Me.tab~dulla^@204~ eghtChargeColumn),Integer)
         ~dulla^@204~ e As System.InvalidCastException
   ~dulla^@204~     Throw New System.Data.StrongTypin~dulla^@204~ he value for column 'FrieghtCharge' i~dulla^@204~ ice' is DBNull.", e)
               ~dulla^@204~          End Get
            Set
  ~dulla^@204~  Me(Me.tableInvoice.FrieghtChargeColu~dulla^@204~             End Set
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Prope~dulla^@204~ eousCost() As Integer
            Ge~dulla^@204~       Try 
                    Retur~dulla^@204~ .tableInvoice.MiscellaneousCostColumn~dulla^@204~                Catch e As System.Inva~dulla^@204~ ion
                    Throw New Sy~dulla^@204~ ongTypingException("The value for col~dulla^@204~ neousCost' in table 'Invoice' is DBNu~dulla^@204~              End Try
            End~dulla^@204~      Set
                Me(Me.table~dulla^@204~ llaneousCostColumn) = value
        ~dulla^@204~         End Property
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Property TotalPurchaseAmou~dulla^@204~ er
            Get
                ~dulla^@204~ Me(Me.tableInvoice.TotalPurchaseAmoun~dulla^@204~ ger)
            End Get
          ~dulla^@204~           Me(Me.tableInvoice.TotalPur~dulla^@204~ lumn) = value
            End Set
 ~dulla^@204~ operty
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ ction IsFrieghtChargeNull() As Boolea~dulla^@204~   Return Me.IsNull(Me.tableInvoice.Fr~dulla^@204~ lumn)
        End Function
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Sub SetFrieghtCharg~dulla^@204~         Me(Me.tableInvoice.FrieghtCha~dulla^@204~ System.Convert.DBNull
        End Su~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Function~dulla^@204~ ousCostNull() As Boolean
           ~dulla^@204~ Null(Me.tableInvoice.MiscellaneousCos~dulla^@204~      End Function
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Sub SetMiscellaneousCostNull(~dulla^@204~   Me(Me.tableInvoice.MiscellaneousCos~dulla^@204~ stem.Convert.DBNull
        End Sub~dulla^@204~ s
    
    <System.CodeDom.Compiler~dulla^@204~ eAttribute("System.Data.Design.TypedD~dulla^@204~ or", "2.0.0.0")>  _
    Partial Publ~dulla^@204~ rRow
        Inherits System.Data.Da~dulla^@204~   
        Private tableOrder As Ord~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Frien~dulla^@204~ al rb As System.Data.DataRowBuilder)~dulla^@204~ MyBase.New(rb)
            Me.tableO~dulla^@204~ Me.Table,OrderDataTable)
        End~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Prope~dulla^@204~  As String
            Get
        ~dulla^@204~ n CType(Me(Me.tableOrder.OrderNoColum~dulla^@204~            End Get
            Set
~dulla^@204~    Me(Me.tableOrder.OrderNoColumn) = ~dulla^@204~       End Set
        End Property
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Property Pa~dulla^@204~ ing
            Get
               ~dulla^@204~ (Me(Me.tableOrder.PartNoColumn),Strin~dulla^@204~    End Get
            Set
        ~dulla^@204~ .tableOrder.PartNoColumn) = value
  ~dulla^@204~  Set
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Property Description~dulla^@204~ 
            Get
                Ret~dulla^@204~ Me.tableOrder.DescriptionColumn),Stri~dulla^@204~     End Get
            Set
       ~dulla^@204~ e.tableOrder.DescriptionColumn) = val~dulla^@204~    End Set
        End Property
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public Property Quant~dulla^@204~ ger
            Get
               ~dulla^@204~ (Me(Me.tableOrder.QuantityColumn),Int~dulla^@204~       End Get
            Set
     ~dulla^@204~ (Me.tableOrder.QuantityColumn) = valu~dulla^@204~   End Set
        End Property
    ~dulla^@204~   
    <System.CodeDom.Compiler.Gene~dulla^@204~ ibute("System.Data.Design.TypedDataSe~dulla^@204~ "2.0.0.0")>  _
    Partial Public Cl~dulla^@204~ foRow
        Inherits System.Data.D~dulla^@204~    
        Private tableProductInfo~dulla^@204~ foDataTable
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ d Sub New(ByVal rb As System.Data.Dat~dulla^@204~ 
            MyBase.New(rb)
        ~dulla^@204~ roductInfo = CType(Me.Table,ProductIn~dulla^@204~ 
        End Sub
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Property PartNo() As String
 ~dulla^@204~ t
                Return CType(Me(Me~dulla^@204~ Info.PartNoColumn),String)
         ~dulla^@204~            Set
                Me(Me~dulla^@204~ Info.PartNoColumn) = value
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Property ProductName() As S~dulla^@204~       Get
                Return CTy~dulla^@204~ eProductInfo.ProductNameColumn),Strin~dulla^@204~    End Get
            Set
        ~dulla^@204~ .tableProductInfo.ProductNameColumn) ~dulla^@204~         End Set
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Property ~dulla^@204~ ring
            Get
              ~dulla^@204~ e(Me(Me.tableProductInfo.BrandColumn)~dulla^@204~          End Get
            Set
  ~dulla^@204~  Me(Me.tableProductInfo.BrandColumn) ~dulla^@204~         End Set
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Property ~dulla^@204~ tring
            Get
             ~dulla^@204~ pe(Me(Me.tableProductInfo.OriginColum~dulla^@204~            End Get
            Set
~dulla^@204~    Me(Me.tableProductInfo.OriginColum~dulla^@204~            End Set
        End Prope~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Proper~dulla^@204~ ) As Double
            Get
       ~dulla^@204~ rn CType(Me(Me.tableProductInfo.UnitP~dulla^@204~ ouble)
            End Get
        ~dulla^@204~             Me(Me.tableProductInfo.Un~dulla^@204~ ) = value
            End Set
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y SellingPrice1() As Double
        ~dulla^@204~             Return CType(Me(Me.tableP~dulla^@204~ llingPrice1Column),Double)
         ~dulla^@204~            Set
                Me(Me~dulla^@204~ Info.SellingPrice1Column) = value
  ~dulla^@204~  Set
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Property SellingPric~dulla^@204~ e
            Get
                R~dulla^@204~ e(Me.tableProductInfo.SellingPrice2Co~dulla^@204~ 
            End Get
            Se~dulla^@204~       Me(Me.tableProductInfo.SellingP~dulla^@204~ = value
            End Set
       ~dulla^@204~ 
    End Class
    
    <System.Co~dulla^@204~ r.GeneratedCodeAttribute("System.Data~dulla^@204~ DataSetGenerator", "2.0.0.0")>  _
  ~dulla^@204~ lic Class ProductsRow
        Inheri~dulla^@204~ a.DataRow
        
        Private ~dulla^@204~  As ProductsDataTable
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Friend Sub New(ByVal rb As Syste~dulla^@204~ wBuilder)
            MyBase.New(rb)~dulla^@204~  Me.tableProducts = CType(Me.Table,Pr~dulla^@204~ le)
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Property PartNo() As Strin~dulla^@204~   Get
                Return CType(M~dulla^@204~ ducts.PartNoColumn),String)
        ~dulla^@204~             Set
                Me(M~dulla^@204~ ts.PartNoColumn) = value
            End Set
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Property ProductName(~dulla^@204~             Get
                Retu~dulla^@204~ e.tableProducts.ProductNameColumn),St~dulla^@204~       End Get
            Set
     ~dulla^@204~ (Me.tableProducts.ProductNameColumn) ~dulla^@204~         End Set
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Property ~dulla^@204~ ring
            Get
              ~dulla^@204~ e(Me(Me.tableProducts.BrandColumn),St~dulla^@204~       End Get
            Set
     ~dulla^@204~ (Me.tableProducts.BrandColumn) = valu~dulla^@204~   End Set
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Property Origin~dulla^@204~ 
            Get
                Try~dulla^@204~           Return CType(Me(Me.tablePro~dulla^@204~ olumn),String)
                Catch~dulla^@204~ InvalidCastException
               ~dulla^@204~ w System.Data.StrongTypingException("~dulla^@204~  column 'Origin' in table 'Products' ~dulla^@204~ e)
                End Try
        ~dulla^@204~             Set
                Me(M~dulla^@204~ ts.OriginColumn) = value
           ~dulla^@204~      End Property
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Property ShelfNo() As String~dulla^@204~ Get
                Return CType(Me(~dulla^@204~ cts.ShelfNoColumn),String)
         ~dulla^@204~            Set
                Me(Me~dulla^@204~ s.ShelfNoColumn) = value
           ~dulla^@204~      End Property
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Property ReorderLevel() As In~dulla^@204~       Get
                Return CTy~dulla^@204~ eProducts.ReorderLevelColumn),Integer~dulla^@204~   End Get
            Set
         ~dulla^@204~ tableProducts.ReorderLevelColumn) = v~dulla^@204~      End Set
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public Property Sel~dulla^@204~ As Double
            Get
         ~dulla^@204~  CType(Me(Me.tableProducts.SellingPri~dulla^@204~ uble)
            End Get
         ~dulla^@204~            Me(Me.tableProducts.Sellin~dulla^@204~ ) = value
            End Set
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y SellingPrice2() As Double
        ~dulla^@204~             Try 
                   ~dulla^@204~ (Me(Me.tableProducts.SellingPrice2Col~dulla^@204~ 
                Catch e As System.In~dulla^@204~ ption
                    Throw New ~dulla^@204~ trongTypingException("The value for c~dulla^@204~ gPrice2' in table 'Products' is DBNul~dulla^@204~             End Try
            End ~dulla^@204~     Set
                Me(Me.tableP~dulla^@204~ ngPrice2Column) = value
            ~dulla^@204~     End Property
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Property NetWeight() As Double~dulla^@204~  Get
                Return CType(Me~dulla^@204~ ucts.NetWeightColumn),Double)
      ~dulla^@204~ 
            Set
                Me~dulla^@204~ ucts.NetWeightColumn) = value
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Function IsOriginNull() ~dulla^@204~            Return Me.IsNull(Me.tableP~dulla^@204~ nColumn)
        End Function
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Sub SetOriginNul~dulla^@204~     Me(Me.tableProducts.OriginColumn)~dulla^@204~ vert.DBNull
        End Sub
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Function IsSelling~dulla^@204~ As Boolean
            Return Me.IsN~dulla^@204~ roducts.SellingPrice2Column)
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ llingPrice2Null()
            Me(Me.~dulla^@204~ .SellingPrice2Column) = System.Conver~dulla^@204~      End Sub
    End Class
    
  ~dulla^@204~ eDom.Compiler.GeneratedCodeAttribute(~dulla^@204~ Design.TypedDataSetGenerator", "2.0.0~dulla^@204~  Partial Public Class ProductsAvialab~dulla^@204~   Inherits System.Data.DataRow
     ~dulla^@204~ Private tableProductsAvialable As Pro~dulla^@204~ eDataTable
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Sub New(ByVal rb As System.Data.Data~dulla^@204~             MyBase.New(rb)
         ~dulla^@204~ oductsAvialable = CType(Me.Table,Prod~dulla^@204~ DataTable)
        End Sub
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Property PartNo() A~dulla^@204~          Get
                Return ~dulla^@204~ ableProductsAvialable.PartNoColumn),S~dulla^@204~        End Get
            Set
    ~dulla^@204~ e(Me.tableProductsAvialable.PartNoCol~dulla^@204~ 
            End Set
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Prop~dulla^@204~ p1() As Integer
            Get
   ~dulla^@204~ Return CType(Me(Me.tableProductsAvial~dulla^@204~ p1Column),Integer)
            End G~dulla^@204~    Set
                Me(Me.tablePr~dulla^@204~ le.QtyInShop1Column) = value
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Property QtyInShop2() As ~dulla^@204~         Get
                Return C~dulla^@204~ bleProductsAvialable.QtyInShop2Column~dulla^@204~            End Get
            Set
~dulla^@204~    Me(Me.tableProductsAvialable.QtyIn~dulla^@204~ = value
            End Set
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ QtyInStore() As Integer
            ~dulla^@204~         Return CType(Me(Me.tableProdu~dulla^@204~ QtyInStoreColumn),Integer)
         ~dulla^@204~            Set
                Me(Me~dulla^@204~ sAvialable.QtyInStoreColumn) = value~dulla^@204~ End Set
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Property TotalQty~dulla^@204~ 
            Get
                Re~dulla^@204~ (Me.tableProductsAvialable.TotalQtyCo~dulla^@204~ )
            End Get
            S~dulla^@204~        Me(Me.tableProductsAvialable.T~dulla^@204~ ) = value
            End Set
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y Amount() As Integer
            Ge~dulla^@204~       Return CType(Me(Me.tableProduct~dulla^@204~ ountColumn),Integer)
            End~dulla^@204~      Set
                Me(Me.table~dulla^@204~ able.AmountColumn) = value
         ~dulla^@204~        End Property
    End Class
 ~dulla^@204~ tem.CodeDom.Compiler.GeneratedCodeAtt~dulla^@204~ m.Data.Design.TypedDataSetGenerator",~dulla^@204~  _
    Partial Public Class Purchase~dulla^@204~ Inherits System.Data.DataRow
       ~dulla^@204~ ivate tablePurchase As PurchaseDataTa~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Friend Sub Ne~dulla^@204~  System.Data.DataRowBuilder)
       ~dulla^@204~ ew(rb)
            Me.tablePurchase ~dulla^@204~ ble,PurchaseDataTable)
        End S~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Propert~dulla^@204~ ) As String
            Get
       ~dulla^@204~ rn CType(Me(Me.tablePurchase.Supplier~dulla^@204~ ing)
            End Get
          ~dulla^@204~           Me(Me.tablePurchase.Supplie~dulla^@204~ value
            End Set
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ voiceNo() As String
            Get~dulla^@204~     Return CType(Me(Me.tablePurchase.~dulla^@204~ mn),String)
            End Get
   ~dulla^@204~ 
                Me(Me.tablePurchase.InvoiceNoColumn) = value
            End ~dulla^@204~ End Property
    End Class
    
  ~dulla^@204~ eDom.Compiler.GeneratedCodeAttribute(~dulla^@204~ Design.TypedDataSetGenerator", "2.0.0~dulla^@204~  Partial Public Class PurchaseInfoRow~dulla^@204~ erits System.Data.DataRow
        
~dulla^@204~ te tablePurchaseInfo As PurchaseInfoD~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Friend S~dulla^@204~ rb As System.Data.DataRowBuilder)
  ~dulla^@204~ ase.New(rb)
            Me.tablePurc~dulla^@204~ ype(Me.Table,PurchaseInfoDataTable)
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y PartNo() As String
            Get~dulla^@204~      Return CType(Me(Me.tablePurchase~dulla^@204~ lumn),String)
            End Get
 ~dulla^@204~ t
                Me(Me.tablePurchas~dulla^@204~ olumn) = value
            End Set
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ operty Quantity() As Integer
       ~dulla^@204~              Return CType(Me(Me.table~dulla^@204~ QuantityColumn),Integer)
           ~dulla^@204~          Set
                Me(Me.t~dulla^@204~ nfo.QuantityColumn) = value
        ~dulla^@204~         End Property
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Property Amount() As Integ~dulla^@204~    Get
                Return CType(~dulla^@204~ rchaseInfo.AmountColumn),Integer)
  ~dulla^@204~  Get
            Set
              ~dulla^@204~ PurchaseInfo.AmountColumn) = value
 ~dulla^@204~ d Set
        End Property
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Property SupplierID~dulla^@204~ 
            Get
                Ret~dulla^@204~ Me.tablePurchaseInfo.SupplierIDColumn~dulla^@204~           End Get
            Set
 ~dulla^@204~   Me(Me.tablePurchaseInfo.SupplierIDC~dulla^@204~ e
            End Set
        End P~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Pr~dulla^@204~ eNo() As String
            Get
   ~dulla^@204~ Return CType(Me(Me.tablePurchaseInfo.~dulla^@204~ mn),String)
            End Get
   ~dulla^@204~ 
                Me(Me.tablePurchaseI~dulla^@204~ Column) = value
            End Set~dulla^@204~ Property
    End Class
    
    <S~dulla^@204~ .Compiler.GeneratedCodeAttribute("Sys~dulla^@204~ gn.TypedDataSetGenerator", "2.0.0.0")~dulla^@204~ tial Public Class SalesRow
        I~dulla^@204~ m.Data.DataRow
        
        Pri~dulla^@204~ es As SalesDataTable
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Friend Sub New(ByVal rb As System~dulla^@204~ Builder)
            MyBase.New(rb)~dulla^@204~ Me.tableSales = CType(Me.Table,SalesD~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Property InvoiceNo() As String
 ~dulla^@204~ t
                Return CType(Me(Me~dulla^@204~ nvoiceNoColumn),String)
            ~dulla^@204~         Set
                Me(Me.ta~dulla^@204~ iceNoColumn) = value
            End~dulla^@204~  End Property
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Property _Date() As Date
       ~dulla^@204~              Return CType(Me(Me.table~dulla^@204~ umn),Date)
            End Get
    ~dulla^@204~                 Me(Me.tableSales.Date~dulla^@204~ ue
            End Set
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public P~dulla^@204~ tal() As Double
            Get
   ~dulla^@204~ Return CType(Me(Me.tableSales.SubTota~dulla^@204~ le)
            End Get
           ~dulla^@204~          Me(Me.tableSales.SubTotalCol~dulla^@204~ 
            End Set
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Prop~dulla^@204~ t() As Double
            Get
     ~dulla^@204~ turn CType(Me(Me.tableSales.VATAmount~dulla^@204~ e)
            End Get
            ~dulla^@204~         Me(Me.tableSales.VATAmountCol~dulla^@204~ 
            End Set
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Prop~dulla^@204~ al() As Double
            Get
    ~dulla^@204~ eturn CType(Me(Me.tableSales.GrandTot~dulla^@204~ ble)
            End Get
          ~dulla^@204~           Me(Me.tableSales.GrandTotal~dulla^@204~ ue
            End Set
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public P~dulla^@204~ fPayment() As String
            Get~dulla^@204~      Return CType(Me(Me.tableSales.Mo~dulla^@204~ lumn),String)
            End Get
 ~dulla^@204~ t
                Me(Me.tableSales.M~dulla^@204~ olumn) = value
            End Set
~dulla^@204~ roperty
    End Class
    
    <Sy~dulla^@204~ Compiler.GeneratedCodeAttribute("Syst~dulla^@204~ n.TypedDataSetGenerator", "2.0.0.0")>~dulla^@204~ ial Public Class SalesInfoRow
      ~dulla^@204~ stem.Data.DataRow
        
        ~dulla^@204~ SalesInfo As SalesInfoDataTable
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Friend Sub New(ByVal r~dulla^@204~ ata.DataRowBuilder)
            MyBa~dulla^@204~            Me.tableSalesInfo = CType(~dulla^@204~ sInfoDataTable)
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public Property PartN~dulla^@204~ 
            Get
                Re~dulla^@204~ (Me.tableSalesInfo.PartNoColumn),Stri~dulla^@204~     End Get
            Set
       ~dulla^@204~ e.tableSalesInfo.PartNoColumn) = valu~dulla^@204~   End Set
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Property Invoic~dulla^@204~ ng
            Get
                ~dulla^@204~ Me(Me.tableSalesInfo.InvoiceNoColumn)~dulla^@204~          End Get
            Set
  ~dulla^@204~  Me(Me.tableSalesInfo.InvoiceNoColumn~dulla^@204~           End Set
        End Proper~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Propert~dulla^@204~ ) As String
            Get
       ~dulla^@204~ rn CType(Me(Me.tableSalesInfo.Custome~dulla^@204~ ring)
            End Get
         ~dulla^@204~            Me(Me.tableSalesInfo.Custo~dulla^@204~ = value
            End Set
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ StockCardNo() As String
            ~dulla^@204~         Return CType(Me(Me.tableSales~dulla^@204~ dNoColumn),String)
            End G~dulla^@204~    Set
                Me(Me.tableSa~dulla^@204~ CardNoColumn) = value
            En~dulla^@204~   End Property
    End Class
    
~dulla^@204~ odeDom.Compiler.GeneratedCodeAttribut~dulla^@204~ a.Design.TypedDataSetGenerator", "2.0~dulla^@204~    Partial Public Class StockCardRow~dulla^@204~ rits System.Data.DataRow
        
 ~dulla^@204~ e tableStockCard As StockCardDataTabl~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Friend Sub New(~dulla^@204~ ystem.Data.DataRowBuilder)
         ~dulla^@204~ (rb)
            Me.tableStockCard =~dulla^@204~ le,StockCardDataTable)
        End S~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Propert~dulla^@204~ () As String
            Get
      ~dulla^@204~ urn CType(Me(Me.tableStockCard.StockC~dulla^@204~ String)
            End Get
       ~dulla^@204~              Me(Me.tableStockCard.Sto~dulla^@204~ n) = value
            End Set
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ty PartNo() As String
            Ge~dulla^@204~       Return CType(Me(Me.tableStockCa~dulla^@204~ mn),String)
            End Get
   ~dulla^@204~ 
                Me(Me.tableStockCard~dulla^@204~ ) = value
            End Set
        End Property
    End Class
    
    ~dulla^@204~ om.Compiler.GeneratedCodeAttribute("S~dulla^@204~ sign.TypedDataSetGenerator", "2.0.0.0~dulla^@204~ artial Public Class StockCardDetailRo~dulla^@204~ herits System.Data.DataRow
        ~dulla^@204~ ate tableStockCardDetail As StockCard~dulla^@204~ le
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        F~dulla^@204~ (ByVal rb As System.Data.DataRowBuild~dulla^@204~     MyBase.New(rb)
            Me.ta~dulla^@204~ etail = CType(Me.Table,StockCardDetai~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Property InvoiceNo() As String~dulla^@204~ Get
                Return CType(Me(~dulla^@204~ CardDetail.InvoiceNoColumn),String)
~dulla^@204~ nd Get
            Set
            ~dulla^@204~ leStockCardDetail.InvoiceNoColumn) = ~dulla^@204~       End Set
        End Property
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Property Da~dulla^@204~  Date
            Get
             ~dulla^@204~ pe(Me(Me.tableStockCardDetail.DateOfS~dulla^@204~ te)
            End Get
           ~dulla^@204~          Me(Me.tableStockCardDetail.D~dulla^@204~ mn) = value
            End Set
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ rty StockCardNo() As String
        ~dulla^@204~             Return CType(Me(Me.tableS~dulla^@204~ l.StockCardNoColumn),String)
       ~dulla^@204~ 
            Set
                Me(~dulla^@204~ CardDetail.StockCardNoColumn) = value~dulla^@204~  End Set
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Property DateRec~dulla^@204~ te
            Get
                ~dulla^@204~ Me(Me.tableStockCardDetail.DateReciev~dulla^@204~ e)
            End Get
            ~dulla^@204~         Me(Me.tableStockCardDetail.Da~dulla^@204~ umn) = value
            End Set
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ erty Packaging() As String
         ~dulla^@204~            Return CType(Me(Me.tableSt~dulla^@204~ .PackagingColumn),String)
          ~dulla^@204~           Set
                Me(Me.~dulla^@204~ dDetail.PackagingColumn) = value
   ~dulla^@204~ Set
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Property QtyRecieved(~dulla^@204~ 
            Get
                Try~dulla^@204~           Return CType(Me(Me.tableSto~dulla^@204~ QtyRecievedColumn),Integer)
        ~dulla^@204~  e As System.InvalidCastException
  ~dulla^@204~      Throw New System.Data.StrongTypi~dulla^@204~ The value for column 'QtyRecieved' in~dulla^@204~ CardDetail' is DBNull.", e)
        ~dulla^@204~ ry
            End Get
            ~dulla^@204~         Me(Me.tableStockCardDetail.Qt~dulla^@204~ mn) = value
            End Set
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ rty QtyIssued() As Integer
         ~dulla^@204~            Try 
                    ~dulla^@204~ Me(Me.tableStockCardDetail.QtyIssuedC~dulla^@204~ r)
                Catch e As System~dulla^@204~ xception
                    Throw N~dulla^@204~ a.StrongTypingException("The value fo~dulla^@204~ Issued' in table 'StockCardDetail' is~dulla^@204~ 
                End Try
          ~dulla^@204~           Set
                Me(Me.~dulla^@204~ dDetail.QtyIssuedColumn) = value
   ~dulla^@204~ Set
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Property QtyBalance()~dulla^@204~             Get
                Retu~dulla^@204~ e.tableStockCardDetail.QtyBalanceColu~dulla^@204~ 
            End Get
            Set~dulla^@204~      Me(Me.tableStockCardDetail.QtyBa~dulla^@204~ = value
            End Set
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ _Inv_____D_O() As String
           ~dulla^@204~          Try 
                    Re~dulla^@204~ (Me.tableStockCardDetail._Inv_____D_O~dulla^@204~ g)
                Catch e As System~dulla^@204~ xception
                    Throw N~dulla^@204~ a.StrongTypingException("The value fo~dulla^@204~ _ &_ D_O' in table 'StockCardDetail' ~dulla^@204~ e)
                End Try
        ~dulla^@204~             Set
                Me(M~dulla^@204~ ardDetail._Inv_____D_OColumn) = value~dulla^@204~  End Set
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Function IsQtyRe~dulla^@204~ As Boolean
            Return Me.IsN~dulla^@204~ tockCardDetail.QtyRecievedColumn)
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ SetQtyRecievedNull()
            Me(~dulla^@204~ CardDetail.QtyRecievedColumn) = Syste~dulla^@204~ ull
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Function IsQtyIssuedNull()~dulla^@204~             Return Me.IsNull(Me.table~dulla^@204~ il.QtyIssuedColumn)
        End Func~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Sub S~dulla^@204~ ll()
            Me(Me.tableStockCar~dulla^@204~ suedColumn) = System.Convert.DBNull
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ n Is_Inv_____D_ONull() As Boolean
  ~dulla^@204~ urn Me.IsNull(Me.tableStockCardDetail~dulla^@204~ Column)
        End Function
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Sub Set_Inv_____D~dulla^@204~          Me(Me.tableStockCardDetail._~dulla^@204~ lumn) = System.Convert.DBNull
      ~dulla^@204~   End Class
    
    <System.CodeDo~dulla^@204~ neratedCodeAttribute("System.Data.Des~dulla^@204~ SetGenerator", "2.0.0.0")>  _
    Pa~dulla^@204~ Class SupplierRow
        Inherits S~dulla^@204~ taRow
        
        Private tabl~dulla^@204~ SupplierDataTable
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Friend Sub New(ByVal rb As System.Da~dulla^@204~ lder)
            MyBase.New(rb)
  ~dulla^@204~ tableSupplier = CType(Me.Table,Suppli~dulla^@204~ 
        End Sub
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Property SupplierID() As Strin~dulla^@204~   Get
                Return CType(M~dulla^@204~ plier.SupplierIDColumn),String)
    ~dulla^@204~ et
            Set
                ~dulla^@204~ pplier.SupplierIDColumn) = value
   ~dulla^@204~ Set
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Property SupplierName~dulla^@204~ 
            Get
                Ret~dulla^@204~ Me.tableSupplier.SupplierNameColumn),~dulla^@204~         End Get
            Set
   ~dulla^@204~ Me(Me.tableSupplier.SupplierNameColum~dulla^@204~            End Set
        End Prope~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Proper~dulla^@204~ As String
            Get
         ~dulla^@204~                     Return CType(Me(M~dulla^@204~ er.AddressColumn),String)
          ~dulla^@204~  As System.InvalidCastException
    ~dulla^@204~    Throw New System.Data.StrongTyping~dulla^@204~ e value for column 'Address' in table~dulla^@204~ s DBNull.", e)
                End T~dulla^@204~    End Get
            Set
        ~dulla^@204~ .tableSupplier.AddressColumn) = value~dulla^@204~  End Set
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Property City() ~dulla^@204~           Get
                Try 
~dulla^@204~        Return CType(Me(Me.tableSuppli~dulla^@204~ ),String)
                Catch e As~dulla^@204~ idCastException
                    ~dulla^@204~ tem.Data.StrongTypingException("The value for column 'City' in table 'Supplier'~dulla^@204~  e)
                End Try
       ~dulla^@204~ 
            Set
                Me(~dulla^@204~ ier.CityColumn) = value
            ~dulla^@204~     End Property
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Property Country() As String
~dulla^@204~ et
                Try 
           ~dulla^@204~ rn CType(Me(Me.tableSupplier.CountryC~dulla^@204~ )
                Catch e As System.~dulla^@204~ ception
                    Throw Ne~dulla^@204~ .StrongTypingException("The value for~dulla^@204~ try' in table 'Supplier' is DBNull.",~dulla^@204~         End Try
            End Get~dulla^@204~ Set
                Me(Me.tableSuppl~dulla^@204~ lumn) = value
            End Set
 ~dulla^@204~ operty
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ perty Phone() As String
            ~dulla^@204~         Try 
                    Ret~dulla^@204~ Me.tableSupplier.PhoneColumn),String)~dulla^@204~      Catch e As System.InvalidCastExc~dulla^@204~                Throw New System.Data.~dulla^@204~ xception("The value for column 'Phone~dulla^@204~ upplier' is DBNull.", e)
           ~dulla^@204~ 
            End Get
            Set~dulla^@204~      Me(Me.tableSupplier.PhoneColumn)~dulla^@204~          End Set
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Property~dulla^@204~ ing
            Get
               ~dulla^@204~ (Me(Me.tableSupplier.FaxColumn),Strin~dulla^@204~    End Get
            Set
        ~dulla^@204~ .tableSupplier.FaxColumn) = value
  ~dulla^@204~  Set
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Property PostalAddre~dulla^@204~ g
            Get
                R~dulla^@204~ e(Me.tableSupplier.PostalAddressColum~dulla^@204~            End Get
            Set
~dulla^@204~    Me(Me.tableSupplier.PostalAddressC~dulla^@204~ e
            End Set
        End P~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Pr~dulla^@204~ e() As String
            Get
     ~dulla^@204~ turn CType(Me(Me.tableSupplier.Websit~dulla^@204~ ng)
            End Get
           ~dulla^@204~          Me(Me.tableSupplier.WebsiteC~dulla^@204~ e
            End Set
        End P~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Fu~dulla^@204~ essNull() As Boolean
            Ret~dulla^@204~ (Me.tableSupplier.AddressColumn)
   ~dulla^@204~ tion
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ etAddressNull()
            Me(Me.ta~dulla^@204~ ddressColumn) = System.Convert.DBNull~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ ion IsCityNull() As Boolean
        ~dulla^@204~ .IsNull(Me.tableSupplier.CityColumn)~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ ub SetCityNull()
            Me(Me.t~dulla^@204~ CityColumn) = System.Convert.DBNull
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ n IsCountryNull() As Boolean
       ~dulla^@204~ e.IsNull(Me.tableSupplier.CountryColu~dulla^@204~ End Function
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic Sub SetCountryNull()
            ~dulla^@204~ pplier.CountryColumn) = System.Conver~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic Function IsPhoneNull() As Boolean~dulla^@204~ Return Me.IsNull(Me.tableSupplier.Pho~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Sub SetPhoneNull()
        ~dulla^@204~ leSupplier.PhoneColumn) = System.Conv~dulla^@204~        End Sub
    End Class
    
~dulla^@204~ odeDom.Compiler.GeneratedCodeAttribut~dulla^@204~ a.Design.TypedDataSetGenerator", "2.0~dulla^@204~    Public Class CompanyInfoRowChangeE~dulla^@204~  Inherits System.EventArgs
        ~dulla^@204~ ate eventRow As CompanyInfoRow
     ~dulla^@204~ Private eventAction As System.Data.Da~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ al row As CompanyInfoRow, ByVal actio~dulla^@204~ ata.DataRowAction)
            MyBas~dulla^@204~       Me.eventRow = row
            ~dulla^@204~ n = action
        End Sub
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public ReadOnly Property R~dulla^@204~ nyInfoRow
            Get
         ~dulla^@204~  Me.eventRow
            End Get
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ Only Property Action() As System.Data~dulla^@204~ n
            Get
                R~dulla^@204~ tAction
            End Get
       ~dulla^@204~ 
    End Class
    
    <System.Co~dulla^@204~ r.GeneratedCodeAttribute("System.Data~dulla^@204~ DataSetGenerator", "2.0.0.0")>  _
  ~dulla^@204~ s CustomerRowChangeEvent
        Inh~dulla^@204~ EventArgs
        
        Private ~dulla^@204~ ustomerRow
        
        Private~dulla^@204~ As System.Data.DataRowAction
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Sub New(ByVal row ~dulla^@204~ w, ByVal action As System.Data.DataRo~dulla^@204~          MyBase.New
            Me.e~dulla^@204~ 
            Me.eventAction = action~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ nly Property Row() As CustomerRow
  ~dulla^@204~ 
                Return Me.eventRow~dulla^@204~ End Get
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public ReadOnly Property~dulla^@204~ System.Data.DataRowAction
          ~dulla^@204~           Return Me.eventAction
    ~dulla^@204~ et
        End Property
    End Cla~dulla^@204~  <System.CodeDom.Compiler.GeneratedCo~dulla^@204~ System.Data.Design.TypedDataSetGenera~dulla^@204~ 0")>  _
    Public Class InvoiceRowC~dulla^@204~        Inherits System.EventArgs
   ~dulla^@204~   Private eventRow As InvoiceRow
   ~dulla^@204~   Private eventAction As System.Data.~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ yVal row As InvoiceRow, ByVal action ~dulla^@204~ a.DataRowAction)
            MyBase.~dulla^@204~     Me.eventRow = row
            Me~dulla^@204~ = action
        End Sub
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public ReadOnly Property Row~dulla^@204~ Row
            Get
               ~dulla^@204~ entRow
            End Get
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ roperty Action() As System.Data.DataR~dulla^@204~          Get
                Return ~dulla^@204~ n
            End Get
        End P~dulla^@204~ End Class
    
    <System.CodeDom.~dulla^@204~ ratedCodeAttribute("System.Data.Desig~dulla^@204~ tGenerator", "2.0.0.0")>  _
    Publ~dulla^@204~ rRowChangeEvent
        Inherits Sys~dulla^@204~ 
        
        Private eventRow ~dulla^@204~         
        Private eventAction~dulla^@204~ ta.DataRowAction
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Sub New(ByVal row As OrderRow,~dulla^@204~  As System.Data.DataRowAction)
     ~dulla^@204~ .New
            Me.eventRow = row
~dulla^@204~ e.eventAction = action
        End S~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public ReadOnl~dulla^@204~ w() As OrderRow
            Get
   ~dulla^@204~ Return Me.eventRow
            End G~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() ~dulla^@204~ a.DataRowAction
            Get
   ~dulla^@204~ Return Me.eventAction
            En~dulla^@204~   End Property
    End Class
    
~dulla^@204~ odeDom.Compiler.GeneratedCodeAttribut~dulla^@204~ a.Design.TypedDataSetGenerator", "2.0~dulla^@204~    Public Class ProductInfoRowChangeE~dulla^@204~  Inherits System.EventArgs
        ~dulla^@204~ ate eventRow As ProductInfoRow
     ~dulla^@204~ Private eventAction As System.Data.Da~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ al row As ProductInfoRow, ByVal actio~dulla^@204~ ata.DataRowAction)
            MyBas~dulla^@204~       Me.eventRow = row
            ~dulla^@204~ n = action
        End Sub
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public ReadOnly Property R~dulla^@204~ ctInfoRow
            Get
         ~dulla^@204~  Me.eventRow
            End Get
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ Only Property Action() As System.Data~dulla^@204~ n
            Get
                R~dulla^@204~ tAction
            End Get
       ~dulla^@204~ 
    End Class
    
    <System.Co~dulla^@204~ r.GeneratedCodeAttribute("System.Data~dulla^@204~ DataSetGenerator", "2.0.0.0")>  _
  ~dulla^@204~ s ProductsRowChangeEvent
        Inh~dulla^@204~ EventArgs
        
        Private ~dulla^@204~ roductsRow
        
        Private~dulla^@204~ As System.Data.DataRowAction
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Sub New(ByVal row ~dulla^@204~ w, ByVal action As System.Data.DataRo~dulla^@204~          MyBase.New
            Me.e~dulla^@204~ 
            Me.eventAction = action~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ nly Property Row() As ProductsRow
  ~dulla^@204~ 
                Return Me.eventRow~dulla^@204~ End Get
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public ReadOnly Property~dulla^@204~ System.Data.DataRowAction
          ~dulla^@204~           Return Me.eventAction
    ~dulla^@204~ et
        End Property
    End Cla~dulla^@204~  <System.CodeDom.Compiler.GeneratedCo~dulla^@204~ System.Data.Design.TypedDataSetGenera~dulla^@204~ 0")>  _
    Public Class ProductsAvi~dulla^@204~ geEvent
        Inherits System.Even~dulla^@204~   
        Private eventRow As Produ~dulla^@204~ ow
        
        Private eventAc~dulla^@204~ m.Data.DataRowAction
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Sub New(ByVal row As Produ~dulla^@204~ ow, ByVal action As System.Data.DataR~dulla^@204~           MyBase.New
            Me.~dulla^@204~ w
            Me.eventAction = actio~dulla^@204~ d Sub
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ Only Property Row() As ProductsAviala~dulla^@204~        Get
                Return Me~dulla^@204~           End Get
        End Proper~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public ReadOnl~dulla^@204~ tion() As System.Data.DataRowAction
~dulla^@204~ et
                Return Me.eventAc~dulla^@204~      End Get
        End Property
 ~dulla^@204~ 
    
    <System.CodeDom.Compiler.G~dulla^@204~ ttribute("System.Data.Design.TypedDat~dulla^@204~ ", "2.0.0.0")>  _
    Public Class P~dulla^@204~ ngeEvent
        Inherits System.Eve~dulla^@204~    
        Private eventRow As Purc~dulla^@204~     
        Private eventAction As ~dulla^@204~ ataRowAction
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic Sub New(ByVal row As PurchaseRow, ~dulla^@204~ As System.Data.DataRowAction)
      ~dulla^@204~ New
            Me.eventRow = row
 ~dulla^@204~ .eventAction = action
        End Su~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public ReadOnly~dulla^@204~ () As PurchaseRow
            Get
 ~dulla^@204~   Return Me.eventRow
            End~dulla^@204~  End Property
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic ReadOnly Property Action() As Sys~dulla^@204~ RowAction
            Get
         ~dulla^@204~  Me.eventAction
            End Get~dulla^@204~ Property
    End Class
    
    <S~dulla^@204~ .Compiler.GeneratedCodeAttribute("Sys~dulla^@204~ gn.TypedDataSetGenerator", "2.0.0.0")~dulla^@204~ lic Class PurchaseInfoRowChangeEvent~dulla^@204~ rits System.EventArgs
        
    ~dulla^@204~ ventRow As PurchaseInfoRow
        ~dulla^@204~ ate eventAction As System.Data.DataRo~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Su~dulla^@204~ ow As PurchaseInfoRow, ByVal action A~dulla^@204~ .DataRowAction)
            MyBase.N~dulla^@204~    Me.eventRow = row
            Me.~dulla^@204~  action
        End Sub
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public ReadOnly Property Row(~dulla^@204~ InfoRow
            Get
           ~dulla^@204~ e.eventRow
            End Get
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ly Property Action() As System.Data.D~dulla^@204~ 
            Get
                Ret~dulla^@204~ ction
            End Get
        E~dulla^@204~     End Class
    
    <System.Code~dulla^@204~ GeneratedCodeAttribute("System.Data.D~dulla^@204~ taSetGenerator", "2.0.0.0")>  _
    ~dulla^@204~ SalesRowChangeEvent
        Inherits~dulla^@204~ Args
        
        Private event~dulla^@204~ ow
        
        Private eventAc~dulla^@204~ m.Data.DataRowAction
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Sub New(ByVal row As Sales~dulla^@204~ tion As System.Data.DataRowAction)
 ~dulla^@204~ Base.New
            Me.eventRow = r~dulla^@204~    Me.eventAction = action
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Rea~dulla^@204~ y Row() As SalesRow
            Get~dulla^@204~     Return Me.eventRow
            E~dulla^@204~    End Property
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic ReadOnly Property Action() As S~dulla^@204~ taRowAction
            Get
       ~dulla^@204~ rn Me.eventAction
            End Ge~dulla^@204~ d Property
    End Class
    
    ~dulla^@204~ om.Compiler.GeneratedCodeAttribute("S~dulla^@204~ sign.TypedDataSetGenerator", "2.0.0.0~dulla^@204~ ublic Class SalesInfoRowChangeEvent
~dulla^@204~ its System.EventArgs
        
     ~dulla^@204~ entRow As SalesInfoRow
        
   ~dulla^@204~ eventAction As System.Data.DataRowAct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Sub Ne~dulla^@204~ s SalesInfoRow, ByVal action As Syste~dulla^@204~ wAction)
            MyBase.New
   ~dulla^@204~ ventRow = row
            Me.eventAc~dulla^@204~ 
        End Sub
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public ReadOnly Property Row() As Sa~dulla^@204~            Get
                Retur~dulla^@204~ 
            End Get
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Rea~dulla^@204~ y Action() As System.Data.DataRowActi~dulla^@204~    Get
                Return Me.eve~dulla^@204~          End Get
        End Propert~dulla^@204~ ass
    
    <System.CodeDom.Compil~dulla^@204~ odeAttribute("System.Data.Design.Type~dulla^@204~ ator", "2.0.0.0")>  _
    Public Cla~dulla^@204~ owChangeEvent
        Inherits Syste~dulla^@204~         
        Private eventRow As~dulla^@204~ 
        
        Private eventActi~dulla^@204~ Data.DataRowAction
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Sub New(ByVal row As StockCardRow, ByVal action As System.Data.DataRow~dulla^@204~         MyBase.New
            Me.ev~dulla^@204~ 
            Me.eventAction = action~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ly Property Row() As StockCardRow
  ~dulla^@204~ 
                Return Me.eventRow~dulla^@204~ End Get
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public ReadOnly Property~dulla^@204~ System.Data.DataRowAction
          ~dulla^@204~           Return Me.eventAction
    ~dulla^@204~ et
        End Property
    End Cla~dulla^@204~  <System.CodeDom.Compiler.GeneratedCo~dulla^@204~ System.Data.Design.TypedDataSetGenera~dulla^@204~ 0")>  _
    Public Class StockCardDe~dulla^@204~ Event
        Inherits System.EventA~dulla^@204~ 
        Private eventRow As StockCa~dulla^@204~         
        Private eventAction~dulla^@204~ ta.DataRowAction
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Sub New(ByVal row As StockCard~dulla^@204~ Val action As System.Data.DataRowActi~dulla^@204~     MyBase.New
            Me.eventR~dulla^@204~          Me.eventAction = action
   ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ roperty Row() As StockCardDetailRow
~dulla^@204~ et
                Return Me.eventRo~dulla^@204~   End Get
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public ReadOnly Proper~dulla^@204~ s System.Data.DataRowAction
        ~dulla^@204~             Return Me.eventAction
  ~dulla^@204~  Get
        End Property
    End C~dulla^@204~    <System.CodeDom.Compiler.Generated~dulla^@204~ ("System.Data.Design.TypedDataSetGene~dulla^@204~ 0.0")>  _
    Public Class SupplierR~dulla^@204~ 
        Inherits System.EventArgs
~dulla^@204~      Private eventRow As SupplierRow~dulla^@204~       Private eventAction As System.D~dulla^@204~ tion
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ ew(ByVal row As SupplierRow, ByVal ac~dulla^@204~ m.Data.DataRowAction)
            My~dulla^@204~          Me.eventRow = row
         ~dulla^@204~ tion = action
        End Sub
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public ReadOnly Propert~dulla^@204~ pplierRow
            Get
         ~dulla^@204~  Me.eventRow
            End Get
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ Only Property Action() As System.Data~dulla^@204~ n
            Get
                R~dulla^@204~ tAction
            End Get
       ~dulla^@204~ 
    End Class
End Class

Namespa~dulla^@204~ ontrolSystemDataSetTableAdapters
   ~dulla^@204~ m.CodeDom.Compiler.GeneratedCodeAttri~dulla^@204~ Data.Design.TypedDataSetGenerator", "~dulla^@204~ 
     System.ComponentModel.Designer~dulla^@204~ bute("code"),  _
     System.Compone~dulla^@204~ oxItem(true),  _
     System.Compone~dulla^@204~ bjectAttribute(true),  _
     System~dulla^@204~ el.DesignerAttribute("Microsoft.VSDes~dulla^@204~ rce.Design.TableAdapterDesigner, Micr~dulla^@204~ ner"& _ 
        ", Version=8.0.0.0,~dulla^@204~ ral, PublicKeyToken=b03f5f7f11d50a3a"~dulla^@204~ ystem.ComponentModel.Design.HelpKeywo~dulla^@204~ vs.data.TableAdapter")>  _
    Parti~dulla^@204~ ss CompanyInfoTableAdapter
        I~dulla^@204~ m.ComponentModel.Component
        ~dulla^@204~ ate WithEvents _adapter As System.Dat~dulla^@204~ qlDataAdapter
        
        Priv~dulla^@204~ on As System.Data.SqlClient.SqlConnec~dulla^@204~  
        Private _commandCollection~dulla^@204~ Data.SqlClient.SqlCommand
        
~dulla^@204~ te _clearBeforeFill As Boolean
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Sub New()
     ~dulla^@204~ .New
            Me.ClearBeforeFill ~dulla^@204~    End Sub
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~ e ReadOnly Property Adapter() As Syst~dulla^@204~ ient.SqlDataAdapter
            Get~dulla^@204~     If (Me._adapter Is Nothing) Then~dulla^@204~         Me.InitAdapter
             ~dulla^@204~               Return Me._adapter
   ~dulla^@204~ Get
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Friend Property Connection()~dulla^@204~ ta.SqlClient.SqlConnection
         ~dulla^@204~            If (Me._connection Is Noth~dulla^@204~                   Me.InitConnection
~dulla^@204~    End If
                Return Me.~dulla^@204~             End Get
            Set~dulla^@204~     Me._connection = value
         ~dulla^@204~ t (Me.Adapter.InsertCommand) Is Nothi~dulla^@204~                  Me.Adapter.InsertCom~dulla^@204~ on = value
                End If
 ~dulla^@204~   If (Not (Me.Adapter.DeleteCommand) ~dulla^@204~ hen
                    Me.Adapter.D~dulla^@204~ Connection = value
                E~dulla^@204~           If (Not (Me.Adapter.UpdateC~dulla^@204~ thing) Then
                    Me.A~dulla^@204~ Command.Connection = value
         ~dulla^@204~ 
                Dim i As Integer = ~dulla^@204~       Do While (i < Me.CommandCollect~dulla^@204~                     If (Not (Me.Comma~dulla^@204~ i)) Is Nothing) Then
               ~dulla^@204~ e(Me.CommandCollection(i),System.Data~dulla^@204~ lCommand).Connection = value
       ~dulla^@204~ End If
                    i = (i + ~dulla^@204~        Loop
            End Set
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ adOnly Property CommandCollection() A~dulla^@204~ .SqlClient.SqlCommand()
            ~dulla^@204~         If (Me._commandCollection Is ~dulla^@204~ 
                    Me.InitCommandC~dulla^@204~               End If
               ~dulla^@204~ ommandCollection
            End Get~dulla^@204~  Property
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Property ClearBeforeFill() As Boolean~dulla^@204~  Get
                Return Me._clea~dulla^@204~             End Get
            Set~dulla^@204~     Me._clearBeforeFill = value
    ~dulla^@204~ et
        End Property
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Private Sub InitAdapter()
  ~dulla^@204~ _adapter = New System.Data.SqlClient.~dulla^@204~ r
            Dim tableMapping As Sy~dulla^@204~ mon.DataTableMapping = New System.Dat~dulla^@204~ TableMapping
            tableMappin~dulla^@204~  = "Table"
            tableMapping.~dulla^@204~ = "CompanyInfo"
            tableMap~dulla^@204~ ppings.Add("CompanyName", "CompanyNam~dulla^@204~     tableMapping.ColumnMappings.Add("~dulla^@204~ dress")
            tableMapping.Col~dulla^@204~ dd("City", "City")
            table~dulla^@204~ nMappings.Add("Country", "Country")
~dulla^@204~ ableMapping.ColumnMappings.Add("Tel",~dulla^@204~         tableMapping.ColumnMappings.A~dulla^@204~ x")
            tableMapping.ColumnM~dulla^@204~ PostalAddress", "PostalAddress")
   ~dulla^@204~ eMapping.ColumnMappings.Add("Email", ~dulla^@204~          tableMapping.ColumnMappings.~dulla^@204~ ATRegNo", "CompantVATRegNo")
       ~dulla^@204~ ping.ColumnMappings.Add("CompanyTINNo~dulla^@204~ NNo")
            tableMapping.Colum~dulla^@204~ ("CompanyDateOfReg", "CompanyDateOfRe~dulla^@204~     Me._adapter.TableMappings.Add(tab~dulla^@204~            Me._adapter.InsertCommand ~dulla^@204~ Data.SqlClient.SqlCommand
          ~dulla^@204~ .InsertCommand.Connection = Me.Connec~dulla^@204~      Me._adapter.InsertCommand.Comman~dulla^@204~ RT INTO [dbo].[CompanyInfo] ([Company~dulla^@204~ ss], [City], [Country], [Te"& _ 
   ~dulla^@204~ "l], [Fax], [PostalAddress], [Email],~dulla^@204~ egNo], [CompanyTINNo], [Company"& _ ~dulla^@204~     "DateOfReg]) VALUES (@CompanyName~dulla^@204~ City, @Country, @Tel, @Fax, @Postal"&~dulla^@204~         "Address, @Email, @CompantVATRegNo, @CompanyTINNo, @CompanyDateOfReg)"~dulla^@204~ Me._adapter.InsertCommand.CommandType~dulla^@204~ a.CommandType.Text
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@CompanyName", System.Da~dulla^@204~ [Char], 0, System.Data.ParameterDirec~dulla^@204~ , 0, "CompanyName", System.Data.DataR~dulla^@204~ rent, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.InsertCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Address~dulla^@204~ a.SqlDbType.[Char], 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "Address", System.Da~dulla^@204~ sion.Current, false, Nothing, "", "",~dulla^@204~       Me._adapter.InsertCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ m.Data.SqlDbType.[Char], 0, System.Da~dulla^@204~ irection.Input, 0, 0, "City", System.~dulla^@204~ ersion.Current, false, Nothing, "", "~dulla^@204~         Me._adapter.InsertCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ System.Data.SqlDbType.[Char], 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "Country",~dulla^@204~ DataRowVersion.Current, false, Nothin~dulla^@204~ ))
            Me._adapter.InsertCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ l", System.Data.SqlDbType.[Char], 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Tel",~dulla^@204~ DataRowVersion.Current, false, Nothin~dulla^@204~ ))
            Me._adapter.InsertCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ x", System.Data.SqlDbType.[Char], 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Fax",~dulla^@204~ DataRowVersion.Current, false, Nothin~dulla^@204~ ))
            Me._adapter.InsertCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ stalAddress", System.Data.SqlDbType.[~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ dress", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ sertCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@Email", System.Data~dulla^@204~ har], 0, System.Data.ParameterDirecti~dulla^@204~ 0, "Email", System.Data.DataRowVersio~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.InsertCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@CompantVATRegNo~dulla^@204~ a.SqlDbType.DateTime, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "CompantVATRegNo",~dulla^@204~ DataRowVersion.Current, false, Nothin~dulla^@204~ ))
            Me._adapter.InsertCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ mpanyTINNo", System.Data.SqlDbType.[C~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ NNo", System.Data.DataRowVersion.Curr~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ rtCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@CompanyDateOfReg", Sy~dulla^@204~ DbType.DateTime, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "CompanyDateOfReg", Sys~dulla^@204~ RowVersion.Current, false, Nothing, "~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ rivate Sub InitConnection()
        ~dulla^@204~ ction = New System.Data.SqlClient.Sql~dulla^@204~            Me._connection.ConnectionS~dulla^@204~ l.InventoryControlSystem.My.MySetting~dulla^@204~ entoryControlSystemConnectionString
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ itCommandCollection()
            Me~dulla^@204~ ection = New System.Data.SqlClient.Sq~dulla^@204~ }
            Me._commandCollection(~dulla^@204~ em.Data.SqlClient.SqlCommand
       ~dulla^@204~ andCollection(0).Connection = Me.Conn~dulla^@204~        Me._commandCollection(0).Comma~dulla^@204~ ECT CompanyName, Address, City, Count~dulla^@204~  PostalAddress, Email, Compa"& _ 
  ~dulla^@204~  "ntVATRegNo, CompanyTINNo, CompanyDa~dulla^@204~ dbo.CompanyInfo"
            Me._com~dulla^@204~ n(0).CommandType = System.Data.Comman~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute(),  ~dulla^@204~ ystem.ComponentModel.Design.HelpKeywo~dulla^@204~ vs.data.TableAdapter"),  _
         ~dulla^@204~ entModel.DataObjectMethodAttribute(Sy~dulla^@204~ tModel.DataObjectMethodType.Fill, tru~dulla^@204~    Public Overloads Overridable Funct~dulla^@204~ l dataTable As InventoryControlSystem~dulla^@204~ nyInfoDataTable) As Integer
        ~dulla^@204~ r.SelectCommand = Me.CommandCollectio~dulla^@204~      If (Me.ClearBeforeFill = true) T~dulla^@204~         dataTable.Clear
            ~dulla^@204~        Dim returnValue As Integer = M~dulla^@204~ l(dataTable)
            Return retu~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute(),~dulla^@204~  System.ComponentModel.Design.HelpKey~dulla^@204~ ("vs.data.TableAdapter"),  _
       ~dulla^@204~ onentModel.DataObjectMethodAttribute(~dulla^@204~ entModel.DataObjectMethodType.[Select~dulla^@204~ 
        Public Overloads Overridable~dulla^@204~ Data() As InventoryControlSystemDataS~dulla^@204~ oDataTable
            Me.Adapter.Se~dulla^@204~  Me.CommandCollection(0)
           ~dulla^@204~ e As InventoryControlSystemDataSet.Co~dulla^@204~ Table = New InventoryControlSystemDat~dulla^@204~ nfoDataTable
            Me.Adapter.~dulla^@204~ e)
            Return dataTable
   ~dulla^@204~ tion
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute(),  _
       ~dulla^@204~ onentModel.Design.HelpKeywordAttribut~dulla^@204~ bleAdapter")>  _
        Public Over~dulla^@204~ able Function Update(ByVal dataTable ~dulla^@204~ ontrolSystemDataSet.CompanyInfoDataTa~dulla^@204~ er
            Return Me.Adapter.Upd~dulla^@204~ )
        End Function
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~         System.ComponentModel.Design.~dulla^@204~ tribute("vs.data.TableAdapter")>  _
~dulla^@204~ c Overloads Overridable Function Upda~dulla^@204~ Set As InventoryControlSystemDataSet)~dulla^@204~             Return Me.Adapter.Update(~dulla^@204~ panyInfo")
        End Function
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ (),  _
         System.ComponentMode~dulla^@204~ KeywordAttribute("vs.data.TableAdapte~dulla^@204~     Public Overloads Overridable Func~dulla^@204~ yVal dataRow As System.Data.DataRow) ~dulla^@204~            Return Me.Adapter.Update(N~dulla^@204~ a.DataRow() {dataRow})
        End F~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute(),  _
         System.C~dulla^@204~ .Design.HelpKeywordAttribute("vs.data~dulla^@204~ ")>  _
        Public Overloads Over~dulla^@204~ ion Update(ByVal dataRows() As System~dulla^@204~ ) As Integer
            Return Me.A~dulla^@204~ (dataRows)
        End Function
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ (),  _
         System.ComponentMode~dulla^@204~ KeywordAttribute("vs.data.TableAdapte~dulla^@204~      System.ComponentModel.DataObject~dulla^@204~ te(System.ComponentModel.DataObjectMe~dulla^@204~ rt, true)>  _
        Public Overloa~dulla^@204~ e Function Insert(ByVal CompanyName A~dulla^@204~ al Address As String, ByVal City As S~dulla^@204~ Country As String, ByVal Tel As Strin~dulla^@204~ As String, ByVal PostalAddress As Str~dulla^@204~ ail As String, ByVal CompantVATRegNo ~dulla^@204~ l CompanyTINNo As String, ByVal Compa~dulla^@204~ s Date) As Integer
            If (C~dulla^@204~  Nothing) Then
                Throw~dulla^@204~ rgumentNullException("CompanyName")
~dulla^@204~ lse
                Me.Adapter.Inser~dulla^@204~ meters(0).Value = CType(CompanyName,S~dulla^@204~        End If
            If (Addres~dulla^@204~  Then
                Throw New Syst~dulla^@204~ llException("Address")
            E~dulla^@204~         Me.Adapter.InsertCommand.Para~dulla^@204~ ue = CType(Address,String)
         ~dulla^@204~           If (City Is Nothing) Then
~dulla^@204~    Throw New System.ArgumentNullExcep~dulla^@204~ 
            Else
                Me~dulla^@204~ rtCommand.Parameters(2).Value = CType~dulla^@204~ 
            End If
            If (Country Is Nothing) Then
               ~dulla^@204~ stem.ArgumentNullException("Country")~dulla^@204~  Else
                Me.Adapter.Ins~dulla^@204~ rameters(3).Value = CType(Country,Str~dulla^@204~      End If
            If (Tel Is N~dulla^@204~ 
                Me.Adapter.InsertCom~dulla^@204~ rs(4).Value = System.DBNull.Value
  ~dulla^@204~ e
                Me.Adapter.InsertC~dulla^@204~ ters(4).Value = CType(Tel,String)
  ~dulla^@204~  If
            If (Fax Is Nothing) ~dulla^@204~          Me.Adapter.InsertCommand.Par~dulla^@204~ lue = System.DBNull.Value
          ~dulla^@204~            Me.Adapter.InsertCommand.P~dulla^@204~ Value = CType(Fax,String)
          ~dulla^@204~          If (PostalAddress Is Nothing~dulla^@204~            Me.Adapter.InsertCommand.P~dulla^@204~ Value = System.DBNull.Value
        ~dulla^@204~              Me.Adapter.InsertCommand~dulla^@204~ ).Value = CType(PostalAddress,String)~dulla^@204~  End If
            If (Email Is Not~dulla^@204~                Me.Adapter.InsertComma~dulla^@204~ (7).Value = System.DBNull.Value
    ~dulla^@204~ 
                Me.Adapter.InsertCom~dulla^@204~ rs(7).Value = CType(Email,String)
  ~dulla^@204~  If
            Me.Adapter.InsertCom~dulla^@204~ rs(8).Value = CType(CompantVATRegNo,D~dulla^@204~      If (CompanyTINNo Is Nothing) The~dulla^@204~       Throw New System.ArgumentNullEx~dulla^@204~ anyTINNo")
            Else
       ~dulla^@204~ dapter.InsertCommand.Parameters(9).Va~dulla^@204~ ompanyTINNo,String)
            End ~dulla^@204~    Me.Adapter.InsertCommand.Parameter~dulla^@204~  CType(CompanyDateOfReg,Date)
      ~dulla^@204~ viousConnectionState As System.Data.C~dulla^@204~ e = Me.Adapter.InsertCommand.Connecti~dulla^@204~          If ((Me.Adapter.InsertComman~dulla^@204~ State And System.Data.ConnectionState~dulla^@204~                       <> System.Data.~dulla^@204~ te.Open) Then
                Me.Ada~dulla^@204~ mmand.Connection.Open
            En~dulla^@204~      Try 
                Dim return~dulla^@204~ ger = Me.Adapter.InsertCommand.Execut~dulla^@204~               Return returnValue
   ~dulla^@204~ lly
                If (previousConn~dulla^@204~  System.Data.ConnectionState.Closed) ~dulla^@204~              Me.Adapter.InsertCommand~dulla^@204~ lose
                End If
       ~dulla^@204~ 
        End Function
    End Class~dulla^@204~ ystem.CodeDom.Compiler.GeneratedCodeA~dulla^@204~ tem.Data.Design.TypedDataSetGenerator~dulla^@204~ ,  _
     System.ComponentModel.Desi~dulla^@204~ ttribute("code"),  _
     System.Com~dulla^@204~ oolboxItem(true),  _
     System.Com~dulla^@204~ ataObjectAttribute(true),  _
     Sy~dulla^@204~ tModel.DesignerAttribute("Microsoft.V~dulla^@204~ aSource.Design.TableAdapterDesigner, ~dulla^@204~ esigner"& _ 
        ", Version=8.0.~dulla^@204~ neutral, PublicKeyToken=b03f5f7f11d50~dulla^@204~    System.ComponentModel.Design.HelpK~dulla^@204~ te("vs.data.TableAdapter")>  _
    P~dulla^@204~  Class CustomerTableAdapter
        ~dulla^@204~ em.ComponentModel.Component
        ~dulla^@204~ vate WithEvents _adapter As System.Da~dulla^@204~ SqlDataAdapter
        
        Pri~dulla^@204~ ion As System.Data.SqlClient.SqlConne~dulla^@204~   
        Private _commandCollectio~dulla^@204~ .Data.SqlClient.SqlCommand
        ~dulla^@204~ ate _clearBeforeFill As Boolean
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Sub New()
    ~dulla^@204~ e.New
            Me.ClearBeforeFill~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ te ReadOnly Property Adapter() As Sys~dulla^@204~ lient.SqlDataAdapter
            Get~dulla^@204~      If (Me._adapter Is Nothing) Then~dulla^@204~          Me.InitAdapter
            ~dulla^@204~                Return Me._adapter
  ~dulla^@204~  Get
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Friend Property Connection(~dulla^@204~ ata.SqlClient.SqlConnection
        ~dulla^@204~             If (Me._connection Is Not~dulla^@204~                    Me.InitConnection~dulla^@204~     End If
                Return Me~dulla^@204~ 
            End Get
            Set~dulla^@204~      Me._connection = value
        ~dulla^@204~ ot (Me.Adapter.InsertCommand) Is Noth~dulla^@204~                   Me.Adapter.InsertCo~dulla^@204~ ion = value
                End If
~dulla^@204~    If (Not (Me.Adapter.DeleteCommand)~dulla^@204~ Then
                    Me.Adapter.~dulla^@204~ .Connection = value
                ~dulla^@204~            If (Not (Me.Adapter.Update~dulla^@204~ othing) Then
                    Me.~dulla^@204~ eCommand.Connection = value
        ~dulla^@204~ f
                Dim i As Integer =~dulla^@204~        Do While (i < Me.CommandCollec~dulla^@204~ 
                    If (Not (Me.Comm~dulla^@204~ (i)) Is Nothing) Then
              ~dulla^@204~ pe(Me.CommandCollection(i),System.Dat~dulla^@204~ qlCommand).Connection = value
      ~dulla^@204~  End If
                    i = (i +~dulla^@204~         Loop
            End Set
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ eadOnly Property CommandCollection() ~dulla^@204~ a.SqlClient.SqlCommand()
           ~dulla^@204~          If (Me._commandCollection Is~dulla^@204~ n
                    Me.InitCommand~dulla^@204~                End If
              ~dulla^@204~ commandCollection
            End Ge~dulla^@204~ d Property
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Property ClearBeforeFill() As Boolea~dulla^@204~   Get
                Return Me._cle~dulla^@204~ 
            End Get
            Set~dulla^@204~      Me._clearBeforeFill = value
   ~dulla^@204~ Set
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Private Sub InitAdapter()
 ~dulla^@204~ ._adapter = New System.Data.SqlClient~dulla^@204~ er
            Dim tableMapping As S~dulla^@204~ mmon.DataTableMapping = New System.Da~dulla^@204~ aTableMapping
            tableMappi~dulla^@204~ e = "Table"
            tableMapping~dulla^@204~  = "Customer"
            tableMappi~dulla^@204~ ings.Add("CustomerID", "CustomerID")~dulla^@204~ tableMapping.ColumnMappings.Add("Cust~dulla^@204~ ustomerName")
            tableMappi~dulla^@204~ ings.Add("Address", "Address")
     ~dulla^@204~ apping.ColumnMappings.Add("City", "Ci~dulla^@204~      tableMapping.ColumnMappings.Add(~dulla^@204~ ountry")
            tableMapping.Co~dulla^@204~ Add("Tel", "Tel")
            tableM~dulla^@204~ Mappings.Add("Fax", "Fax")
         ~dulla^@204~ ng.ColumnMappings.Add("PostalAddress"~dulla^@204~ ess")
            tableMapping.Colum~dulla^@204~ ("Email", "Email")
            table~dulla^@204~ nMappings.Add("CustomerVATRegNo", "Cu~dulla^@204~ o")
            tableMapping.ColumnM~dulla^@204~ CustomerTINNo", "CustomerTINNo")
   ~dulla^@204~ eMapping.ColumnMappings.Add("Customer~dulla^@204~ CustomerDateOfReg")
            tabl~dulla^@204~ mnMappings.Add("ProductDateOfSupply",~dulla^@204~ OfSupply")
            Me._adapter.T~dulla^@204~ Add(tableMapping)
            Me._ad~dulla^@204~ ommand = New System.Data.SqlClient.Sq~dulla^@204~          Me._adapter.DeleteCommand.Co~dulla^@204~ .Connection
            Me._adapter.~dulla^@204~ .CommandText = "DELETE FROM [dbo].[Cu~dulla^@204~  (([CustomerID] = @Original_CustomerI~dulla^@204~ _ 
                "IsNull_CustomerN~dulla^@204~ CustomerName] IS NULL) OR ([CustomerN~dulla^@204~ n"& _ 
                "al_CustomerN~dulla^@204~ ddress] = @Original_Address) AND ([Ci~dulla^@204~ al_Ci"& _ 
                "ty) AND ~dulla^@204~ @Original_Country) AND ([Tel] = @Orig~dulla^@204~  ([Fax] ="& _ 
                " @Or~dulla^@204~ ND ([PostalAddress] = @Original_Posta~dulla^@204~  ([Email] = @"& _ 
                "~dulla^@204~ l) AND ((@IsNull_CustomerVATRegNo = 1~dulla^@204~ rVATRegNo] IS NUL"& _ 
             ~dulla^@204~ ustomerVATRegNo] = @Original_CustomerVATRegNo)) AND ((@IsNull_CustomerT"& _ 
 ~dulla^@204~   "INNo = 1 AND [CustomerTINNo] IS NU~dulla^@204~ omerTINNo] = @Original_CustomerTI"& _~dulla^@204~       "NNo)) AND ((@IsNull_CustomerDa~dulla^@204~ ND [CustomerDateOfReg] IS NULL) OR ([~dulla^@204~           "CustomerDateOfReg] = @Orig~dulla^@204~ DateOfReg)) AND ((@IsNull_ProductDate~dulla^@204~               "pply = 1 AND [ProductD~dulla^@204~ IS NULL) OR ([ProductDateOfSupply] = ~dulla^@204~ 
                "l_ProductDateOfSup~dulla^@204~         Me._adapter.DeleteCommand.Com~dulla^@204~ stem.Data.CommandType.Text
         ~dulla^@204~ r.DeleteCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@Original_Custom~dulla^@204~ .Data.SqlDbType.NVarChar, 0, System.D~dulla^@204~ Direction.Input, 0, 0, "CustomerID", ~dulla^@204~ ataRowVersion.Original, false, Nothin~dulla^@204~ ))
            Me._adapter.DeleteCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ Null_CustomerName", System.Data.SqlDb~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ merName", System.Data.DataRowVersion.~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ DeleteCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@Original_Customer~dulla^@204~ .Data.SqlDbType.[Char], 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "CustomerName", ~dulla^@204~ ataRowVersion.Original, false, Nothin~dulla^@204~ ))
            Me._adapter.DeleteCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ iginal_Address", System.Data.SqlDbTyp~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ ss", System.Data.DataRowVersion.Origi~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@Original_City", Syste~dulla^@204~ ype.[Char], 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "City", System.Data.DataRowV~dulla^@204~ al, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.DeleteCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Original_~dulla^@204~ tem.Data.SqlDbType.[Char], 0, System.~dulla^@204~ rDirection.Input, 0, 0, "Country", Sy~dulla^@204~ aRowVersion.Original, false, Nothing,~dulla^@204~ 
            Me._adapter.DeleteComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ inal_Tel", System.Data.SqlDbType.[Cha~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ m.Data.DataRowVersion.Original, false~dulla^@204~ , "", ""))
            Me._adapter.D~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@Original_Fax", System.Data.SqlD~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ ax", System.Data.DataRowVersion.Origi~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@Original_PostalAddres~dulla^@204~ ta.SqlDbType.[Char], 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "PostalAddress", Sy~dulla^@204~ aRowVersion.Original, false, Nothing,~dulla^@204~ 
            Me._adapter.DeleteComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ inal_Email", System.Data.SqlDbType.[C~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ ystem.Data.DataRowVersion.Original, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@IsNull_CustomerVATRegNo", S~dulla^@204~ lDbType.Int, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "CustomerVATRegNo", System.~dulla^@204~ ersion.Original, true, Nothing, "", "~dulla^@204~         Me._adapter.DeleteCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ ustomerVATRegNo", System.Data.SqlDbTy~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ stomerVATRegNo", System.Data.DataRowV~dulla^@204~ al, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.DeleteCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@IsNull_Cu~dulla^@204~  System.Data.SqlDbType.Int, 0, System~dulla^@204~ erDirection.Input, 0, 0, "CustomerTIN~dulla^@204~ ata.DataRowVersion.Original, true, No~dulla^@204~ , ""))
            Me._adapter.Delet~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@Original_CustomerTINNo", System.Dat~dulla^@204~ Char], 0, System.Data.ParameterDirect~dulla^@204~  0, "CustomerTINNo", System.Data.Data~dulla^@204~ iginal, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.DeleteCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@IsNul~dulla^@204~ eOfReg", System.Data.SqlDbType.Int, 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Cus~dulla^@204~ g", System.Data.DataRowVersion.Origin~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@Original_CustomerDateOf~dulla^@204~ Data.SqlDbType.DateTime, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "CustomerDateOf~dulla^@204~ Data.DataRowVersion.Original, false, ~dulla^@204~ "", ""))
            Me._adapter.Del~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@IsNull_ProductDateOfSupply", Syst~dulla^@204~ Type.Int, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "ProductDateOfSupply", System.~dulla^@204~ ersion.Original, true, Nothing, "", "~dulla^@204~         Me._adapter.DeleteCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ roductDateOfSupply", System.Data.SqlD~dulla^@204~ e, 0, System.Data.ParameterDirection.~dulla^@204~ "ProductDateOfSupply", System.Data.Da~dulla^@204~ Original, false, Nothing, "", "", "")~dulla^@204~   Me._adapter.InsertCommand = New Sys~dulla^@204~ lient.SqlCommand
            Me._ada~dulla^@204~ mmand.Connection = Me.Connection
   ~dulla^@204~ adapter.InsertCommand.CommandText = "~dulla^@204~ dbo].[Customer] ([CustomerID], [Custo~dulla^@204~ dress], [City], [C"& _ 
            ~dulla^@204~  [Tel], [Fax], [PostalAddress], [Emai~dulla^@204~ VATRegNo], [CustomerTI"& _ 
        ~dulla^@204~ , [CustomerDateOfReg], [ProductDateOf~dulla^@204~ ES (@CustomerID, @Customer"& _ 
    ~dulla^@204~ Name, @Address, @City, @Country, @Tel~dulla^@204~ alAddress, @Email, @CustomerVA"& _ 
~dulla^@204~    "TRegNo, @CustomerTINNo, @Customer~dulla^@204~ roductDateOfSupply);"&Global.Microsof~dulla^@204~ .ChrW(13)&Global.Microsoft.VisualBasi~dulla^@204~ ELECT Custo"& _ 
                "me~dulla^@204~ Name, Address, City, Country, Tel, Fa~dulla^@204~ ess, Email, Cus"& _ 
               ~dulla^@204~ No, CustomerTINNo, CustomerDateOfReg,~dulla^@204~ fSupply FROM Custom"& _ 
           ~dulla^@204~ E (CustomerID = @CustomerID)"
      ~dulla^@204~ pter.InsertCommand.CommandType = Syst~dulla^@204~ ndType.Text
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@CustomerID", System.Data.SqlDb~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ CustomerID", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.InsertCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@CustomerName",~dulla^@204~ SqlDbType.[Char], 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "CustomerName", System~dulla^@204~ Version.Current, false, Nothing, "", ~dulla^@204~          Me._adapter.InsertCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~  System.Data.SqlDbType.[Char], 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "Address"~dulla^@204~ .DataRowVersion.Current, false, Nothi~dulla^@204~ "))
            Me._adapter.InsertCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ ity", System.Data.SqlDbType.[Char], 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Cit~dulla^@204~ ta.DataRowVersion.Current, false, Not~dulla^@204~  ""))
            Me._adapter.Insert~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @Country", System.Data.SqlDbType.[Cha~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ ystem.Data.DataRowVersion.Current, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Tel", System.Data.SqlDbType.~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ ystem.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me~dulla^@204~ ertCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@Fax", System.Data.Sq~dulla^@204~ ], 0, System.Data.ParameterDirection.~dulla^@204~ "Fax", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ertCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@PostalAddress", Syst~dulla^@204~ Type.[Char], 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "PostalAddress", System.Dat~dulla^@204~ ion.Current, false, Nothing, "", "", ~dulla^@204~      Me._adapter.InsertCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ m.Data.SqlDbType.[Char], 0, System.Da~dulla^@204~ irection.Input, 0, 0, "Email", System~dulla^@204~ Version.Current, false, Nothing, "", ~dulla^@204~          Me._adapter.InsertCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ ATRegNo", System.Data.SqlDbType.NVarC~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ TRegNo", System.Data.DataRowVersion.C~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ nsertCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@CustomerTINNo", Sy~dulla^@204~ DbType.[Char], 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "CustomerTINNo", System.D~dulla^@204~ rsion.Current, false, Nothing, "", ""~dulla^@204~        Me._adapter.InsertCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ eOfReg", System.Data.SqlDbType.DateTi~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ eOfReg", System.Data.DataRowVersion.C~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ nsertCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@ProductDateOfSuppl~dulla^@204~ ta.SqlDbType.DateTime, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "ProductDateOfSup~dulla^@204~ Data.DataRowVersion.Current, false, N~dulla^@204~ ", ""))
            Me._adapter.Upda~dulla^@204~ ew System.Data.SqlClient.SqlCommand
~dulla^@204~ e._adapter.UpdateCommand.Connection =~dulla^@204~ n
            Me._adapter.UpdateComm~dulla^@204~ xt = "UPDATE [dbo].[Customer] SET [Cu~dulla^@204~ CustomerID, [CustomerName] = @Custome~dulla^@204~           "rName, [Address] = @Addres~dulla^@204~ City, [Country] = @Country, [Tel] = @~dulla^@204~               " [Fax] = @Fax, [Postal~dulla^@204~ ostalAddress, [Email] = @Email, [Cust~dulla^@204~ 
                "egNo] = @CustomerV~dulla^@204~ tomerTINNo] = @CustomerTINNo, [Custom~dulla^@204~ & _ 
                " = @CustomerDa~dulla^@204~ ductDateOfSupply] = @ProductDateOfSup~dulla^@204~ Cus"& _ 
                "tomerID] =~dulla^@204~ stomerID) AND ((@IsNull_CustomerName ~dulla^@204~ omerNam"& _ 
                "e] IS ~dulla^@204~ stomerName] = @Original_CustomerName)~dulla^@204~ ss] = @Orig"& _ 
                "in~dulla^@204~ ND ([City] = @Original_City) AND ([Co~dulla^@204~ ginal_Country) "& _ 
               ~dulla^@204~ = @Original_Tel) AND ([Fax] = @Origin~dulla^@204~ [PostalAddress] = @"& _ 
           ~dulla^@204~ l_PostalAddress) AND ([Email] = @Orig~dulla^@204~ ND ((@IsNull_CustomerVA"& _ 
       ~dulla^@204~ gNo = 1 AND [CustomerVATRegNo] IS NUL~dulla^@204~ merVATRegNo] = @Original_Cu"& _ 
   ~dulla^@204~ "stomerVATRegNo)) AND ((@IsNull_Custo~dulla^@204~ AND [CustomerTINNo] IS NULL) OR"& _ ~dulla^@204~     " ([CustomerTINNo] = @Original_Cu~dulla^@204~  AND ((@IsNull_CustomerDateOfReg = "&~dulla^@204~         "1 AND [CustomerDateOfReg] IS~dulla^@204~ ustomerDateOfReg] = @Original_Custome~dulla^@204~             "ateOfReg)) AND ((@IsNull~dulla^@204~ fSupply = 1 AND [ProductDateOfSupply]~dulla^@204~                 "LL) OR ([ProductDate~dulla^@204~ Original_ProductDateOfSupply)));"&Glo~dulla^@204~ .VisualBasic.ChrW(13)&Global.Microsof~dulla^@204~ .ChrW(10)&"SELECT Custom"& _ 
      ~dulla^@204~ ID, CustomerName, Address, City, Coun~dulla^@204~ , PostalAddress, Email, Cust"& _ 
  ~dulla^@204~  "omerVATRegNo, CustomerTINNo, Custom~dulla^@204~ ProductDateOfSupply FROM Custome"& _ ~dulla^@204~      "r WHERE (CustomerID = @Customer~dulla^@204~      Me._adapter.UpdateCommand.Comman~dulla^@204~ m.Data.CommandType.Text
            ~dulla^@204~ pdateCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@CustomerID", Syste~dulla^@204~ ype.NVarChar, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "CustomerID", System.Data.~dulla^@204~ n.Current, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.UpdateCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Cu~dulla^@204~ System.Data.SqlDbType.[Char], 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "CustomerN~dulla^@204~ Data.DataRowVersion.Current, false, N~dulla^@204~ ", ""))
            Me._adapter.Upda~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@Address", System.Data.SqlDbType.[C~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~  System.Data.DataRowVersion.Current, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@City", System.Data.SqlDbTy~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ ", System.Data.DataRowVersion.Current~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@Country", System.Data.Sq~dulla^@204~ ], 0, System.Data.ParameterDirection.~dulla^@204~ "Country", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@Tel", System.Dat~dulla^@204~ Char], 0, System.Data.ParameterDirect~dulla^@204~  0, "Tel", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@Fax", System.Dat~dulla^@204~ Char], 0, System.Data.ParameterDirect~dulla^@204~  0, "Fax", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@PostalAddress", ~dulla^@204~ qlDbType.[Char], 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "PostalAddress", System~dulla^@204~ Version.Current, false, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ ystem.Data.SqlDbType.[Char], 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "Email", Sy~dulla^@204~ aRowVersion.Current, false, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ merVATRegNo", System.Data.SqlDbType.N~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ erVATRegNo", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@CustomerTINNo"~dulla^@204~ .SqlDbType.[Char], 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "CustomerTINNo", Syst~dulla^@204~ owVersion.Current, false, Nothing, ""~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ rDateOfReg", System.Data.SqlDbType.Da~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ rDateOfReg", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@ProductDateOfS~dulla^@204~ m.Data.SqlDbType.DateTime, 0, System.~dulla^@204~ rDirection.Input, 0, 0, "ProductDateO~dulla^@204~ tem.Data.DataRowVersion.Current, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Original_CustomerID", System.D~dulla^@204~ .NVarChar, 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "CustomerID", System.Data.Dat~dulla^@204~ riginal, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@IsNu~dulla^@204~ me", System.Data.SqlDbType.Int, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "Custome~dulla^@204~ m.Data.DataRowVersion.Original, true,~dulla^@204~  "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@Original_CustomerName", ~dulla^@204~ qlDbType.[Char], 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "CustomerName", System.~dulla^@204~ ersion.Original, false, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ Address", System.Data.SqlDbType.[Char~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ stem.Data.DataRowVersion.Original, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Original_City", System.Data.~dulla^@204~ ar], 0, System.Data.ParameterDirectio~dulla^@204~ , "City", System.Data.DataRowVersion.~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@Original_Country~dulla^@204~ a.SqlDbType.[Char], 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "Country", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ l", System.Data.SqlDbType.[Char], 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Tel",~dulla^@204~ DataRowVersion.Original, false, Nothi~dulla^@204~ "))
            Me._adapter.UpdateCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ riginal_Fax", System.Data.SqlDbType.[~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ stem.Data.DataRowVersion.Original, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Original_PostalAddress", Sys~dulla^@204~ bType.[Char], 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "PostalAddress", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ ail", System.Data.SqlDbType.[Char], 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Ema~dulla^@204~ ata.DataRowVersion.Original, false, N~dulla^@204~ ", ""))
            Me._adapter.Upda~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@IsNull_CustomerVATRegNo", System.D~dulla^@204~ .Int, 0, System.Data.ParameterDirecti~dulla^@204~ 0, "CustomerVATRegNo", System.Data.Da~dulla^@204~ Original, true, Nothing, "", "", ""))~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Orig~dulla^@204~ VATRegNo", System.Data.SqlDbType.NVar~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ ATRegNo", System.Data.DataRowVersion.~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@IsNull_CustomerT~dulla^@204~ .Data.SqlDbType.Int, 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "CustomerTINNo", Sy~dulla^@204~ aRowVersion.Original, true, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ nal_CustomerTINNo", System.Data.SqlDb~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ stomerTINNo", System.Data.DataRowVers~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.UpdateCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@IsNull_Custo~dulla^@204~ , System.Data.SqlDbType.Int, 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "CustomerDa~dulla^@204~ tem.Data.DataRowVersion.Original, tru~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Original_CustomerDateOfReg", S~dulla^@204~ lDbType.DateTime, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "CustomerDateOfReg", S~dulla^@204~ taRowVersion.Original, false, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ull_ProductDateOfSupply", System.Data~dulla^@204~ t, 0, System.Data.ParameterDirection.~dulla^@204~ "ProductDateOfSupply", System.Data.Da~dulla^@204~ Original, true, Nothing, "", "", ""))~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Orig~dulla^@204~ ateOfSupply", System.Data.SqlDbType.D~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ tDateOfSupply", System.Data.DataRowVe~dulla^@204~ l, false, Nothing, "", "", ""))
    ~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Priva~dulla^@204~ nnection()
            Me._connectio~dulla^@204~ m.Data.SqlClient.SqlConnection
     ~dulla^@204~ nnection.ConnectionString = Global.In~dulla^@204~ lSystem.My.MySettings.Default.Invento~dulla^@204~ emConnectionString
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Private Sub InitCo~dulla^@204~ on()
            Me._commandCollecti~dulla^@204~ em.Data.SqlClient.SqlCommand(0) {}
 ~dulla^@204~ ._commandCollection(0) = New System.D~dulla^@204~ .SqlCommand
            Me._commandC~dulla^@204~ Connection = Me.Connection
         ~dulla^@204~ dCollection(0).CommandText = "SELECT ~dulla^@204~ ustomerName, Address, City, Country, ~dulla^@204~ talAddress,"& _ 
                " E~dulla^@204~ rVATRegNo, CustomerTINNo, CustomerDat~dulla^@204~ ctDateOfSupply "& _ 
               ~dulla^@204~ stomer"
            Me._commandColle~dulla^@204~ andType = System.Data.CommandType.Tex~dulla^@204~ d Sub
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute(),  _
      ~dulla^@204~ ponentModel.Design.HelpKeywordAttribu~dulla^@204~ ableAdapter"),  _
         System.Co~dulla^@204~ DataObjectMethodAttribute(System.Comp~dulla^@204~ taObjectMethodType.Fill, true)>  _
 ~dulla^@204~  Overloads Overridable Function Fill(~dulla^@204~ le As InventoryControlSystemDataSet.C~dulla^@204~ ble) As Integer
            Me.Adapt~dulla^@204~ and = Me.CommandCollection(0)
      ~dulla^@204~ ClearBeforeFill = true) Then
       ~dulla^@204~ Table.Clear
            End If
    ~dulla^@204~ eturnValue As Integer = Me.Adapter.Fi~dulla^@204~ 
            Return returnValue
   ~dulla^@204~ tion
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute(),  _
       ~dulla^@204~ onentModel.Design.HelpKeywordAttribut~dulla^@204~ bleAdapter"),  _
         System.Com~dulla^@204~ ataObjectMethodAttribute(System.Compo~dulla^@204~ aObjectMethodType.[Select], true)>  _~dulla^@204~ lic Overloads Overridable Function Ge~dulla^@204~ ventoryControlSystemDataSet.CustomerD~dulla^@204~          Me.Adapter.SelectCommand = M~dulla^@204~ ection(0)
            Dim dataTable ~dulla^@204~ ontrolSystemDataSet.CustomerDataTable~dulla^@204~ oryControlSystemDataSet.CustomerDataT~dulla^@204~      Me.Adapter.Fill(dataTable)
    ~dulla^@204~ n dataTable
        End Function
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e(),  _
         System.ComponentMod~dulla^@204~ pKeywordAttribute("vs.data.TableAdapt~dulla^@204~      Public Overloads Overridable Fun~dulla^@204~ ByVal dataTable As InventoryControlSy~dulla^@204~ ustomerDataTable) As Integer
       ~dulla^@204~ e.Adapter.Update(dataTable)
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute(),  _
         Sys~dulla^@204~ Model.Design.HelpKeywordAttribute("vs~dulla^@204~ apter")>  _
        Public Overloads~dulla^@204~ Function Update(ByVal dataSet As Inve~dulla^@204~ ystemDataSet) As Integer
           ~dulla^@204~ apter.Update(dataSet, "Customer")
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute(),  _
      ~dulla^@204~ ponentModel.Design.HelpKeywordAttribu~dulla^@204~ ableAdapter")>  _
        Public Ove~dulla^@204~ dable Function Update(ByVal dataRow A~dulla^@204~ .DataRow) As Integer
            Ret~dulla^@204~ r.Update(New System.Data.DataRow() {d~dulla^@204~      End Function
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~   System.ComponentModel.Design.HelpKe~dulla^@204~ e("vs.data.TableAdapter")>  _
      ~dulla^@204~ loads Overridable Function Update(ByV~dulla^@204~  As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataR~dulla^@204~  End Function
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ stem.ComponentModel.Design.HelpKeywor~dulla^@204~ s.data.TableAdapter"),  _
         S~dulla^@204~ ntModel.DataObjectMethodAttribute(Sys~dulla^@204~ Model.DataObjectMethodType.Delete, tr~dulla^@204~     Public Overloads Overridable Func~dulla^@204~ yVal Original_CustomerID As String, B~dulla^@204~ _CustomerName As String, ByVal Origin~dulla^@204~  String, ByVal Original_City As Strin~dulla^@204~ inal_Country As String, ByVal Origina~dulla^@204~ ng, ByVal Original_Fax As String, ByV~dulla^@204~ ostalAddress As String, ByVal Origina~dulla^@204~ ring, ByVal Original_CustomerVATRegNo~dulla^@204~ yVal Original_CustomerTINNo As String~dulla^@204~ nal_CustomerDateOfReg As System.Nulla~dulla^@204~  ByVal Original_ProductDateOfSupply A~dulla^@204~ able(Of Date)) As Integer
          ~dulla^@204~ l_CustomerID Is Nothing) Then
      ~dulla^@204~ ow New System.ArgumentNullException("~dulla^@204~ omerID")
            Else
         ~dulla^@204~ pter.DeleteCommand.Parameters(0).Valu~dulla^@204~ ginal_CustomerID,String)
           ~dulla^@204~         If (Original_CustomerName Is ~dulla^@204~ 
                Me.Adapter.DeleteCo~dulla^@204~ ers(1).Value = CType(1,Object)
     ~dulla^@204~ .Adapter.DeleteCommand.Parameters(2).~dulla^@204~ m.DBNull.Value
            Else
   ~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(1~dulla^@204~ pe(0,Object)
                Me.Adap~dulla^@204~ mand.Parameters(2).Value = CType(Orig~dulla^@204~ Name,String)
            End If
   ~dulla^@204~ Original_Address Is Nothing) Then
  ~dulla^@204~  Throw New System.ArgumentNullExcepti~dulla^@204~ Address")
            Else
        ~dulla^@204~ apter.DeleteCommand.Parameters(3).Val~dulla^@204~ iginal_Address,String)
            E~dulla^@204~       If (Original_City Is Nothing) T~dulla^@204~         Throw New System.ArgumentNull~dulla^@204~ iginal_City")
            Else
    ~dulla^@204~ e.Adapter.DeleteCommand.Parameters(4)~dulla^@204~ e(Original_City,String)
            ~dulla^@204~        If (Original_Country Is Nothin~dulla^@204~             Throw New System.Argument~dulla^@204~ ("Original_Country")
            Els~dulla^@204~       Me.Adapter.DeleteCommand.Parame~dulla^@204~  = CType(Original_Country,String)
  ~dulla^@204~  If
            If (Original_Tel Is ~dulla^@204~ 
                Throw New System.Ar~dulla^@204~ eption("Original_Tel")
            E~dulla^@204~         Me.Adapter.DeleteCommand.Para~dulla^@204~ ue = CType(Original_Tel,String)
    ~dulla^@204~ f
            If (Original_Fax Is No~dulla^@204~                 Throw New System.Argu~dulla^@204~ tion("Original_Fax")
            Els~dulla^@204~       Me.Adapter.DeleteCommand.Parame~dulla^@204~  = CType(Original_Fax,String)
      ~dulla^@204~ 
            If (Original_PostalAddre~dulla^@204~ ) Then
                Throw New Sys~dulla^@204~ ullException("Original_PostalAddress"~dulla^@204~   Else
                Me.Adapter.De~dulla^@204~ arameters(8).Value = CType(Original_P~dulla^@204~ String)
            End If
        ~dulla^@204~ nal_Email Is Nothing) Then
         ~dulla^@204~ New System.ArgumentNullException("Ori~dulla^@204~ 
            Else
                M~dulla^@204~ eteCommand.Parameters(9).Value = CTyp~dulla^@204~ ail,String)
            End If
    ~dulla^@204~ riginal_CustomerVATRegNo Is Nothing) ~dulla^@204~          Me.Adapter.DeleteCommand.Par~dulla^@204~ alue = CType(1,Object)
             ~dulla^@204~ .DeleteCommand.Parameters(11).Value =~dulla^@204~ l.Value
            Else
          ~dulla^@204~ ter.DeleteCommand.Parameters(10).Valu~dulla^@204~ bject)
                Me.Adapter.De~dulla^@204~ arameters(11).Value = CType(Original_~dulla^@204~ gNo,String)
            End If
    ~dulla^@204~ riginal_CustomerTINNo Is Nothing) The~dulla^@204~       Me.Adapter.DeleteCommand.Parame~dulla^@204~ e = CType(1,Object)
                ~dulla^@204~ leteCommand.Parameters(13).Value = Sy~dulla^@204~ alue
            Else
             ~dulla^@204~ .DeleteCommand.Parameters(12).Value =~dulla^@204~ ct)
                Me.Adapter.Delet~dulla^@204~ meters(13).Value = CType(Original_Cus~dulla^@204~ ring)
            End If
          ~dulla^@204~ l_CustomerDateOfReg.HasValue = true) ~dulla^@204~          Me.Adapter.DeleteCommand.Par~dulla^@204~ alue = CType(0,Object)
             ~dulla^@204~ .DeleteCommand.Parameters(15).Value =~dulla^@204~ al_CustomerDateOfReg.Value,Date)
   ~dulla^@204~ 
                Me.Adapter.DeleteCo~dulla^@204~ ers(14).Value = CType(1,Object)
    ~dulla^@204~ e.Adapter.DeleteCommand.Parameters(15~dulla^@204~ tem.DBNull.Value
            End If~dulla^@204~ If (Original_ProductDateOfSupply.HasV~dulla^@204~ Then
                Me.Adapter.Dele~dulla^@204~ ameters(16).Value = CType(0,Object)
~dulla^@204~    Me.Adapter.DeleteCommand.Parameter~dulla^@204~  CType(Original_ProductDateOfSupply.V~dulla^@204~            Else
                Me.A~dulla^@204~ Command.Parameters(16).Value = CType(~dulla^@204~               Me.Adapter.DeleteComman~dulla^@204~ 17).Value = System.DBNull.Value
    ~dulla^@204~ f
            Dim previousConnection~dulla^@204~ em.Data.ConnectionState = Me.Adapter.~dulla^@204~ .Connection.State
            If ((M~dulla^@204~ eteCommand.Connection.State And Syste~dulla^@204~ tionState.Open)  _
                 ~dulla^@204~ tem.Data.ConnectionState.Open) Then
~dulla^@204~    Me.Adapter.DeleteCommand.Connectio~dulla^@204~        End If
            Try 
    ~dulla^@204~ im returnValue As Integer = Me.Adapte~dulla^@204~ nd.ExecuteNonQuery
                R~dulla^@204~ alue
            Finally
          ~dulla^@204~ viousConnectionState = System.Data.Co~dulla^@204~ .Closed) Then
                    Me~dulla^@204~ teCommand.Connection.Close
         ~dulla^@204~ 
            End Try
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute(),  _
         System.Co~dulla^@204~ Design.HelpKeywordAttribute("vs.data.~dulla^@204~ ),  _
         System.ComponentModel~dulla^@204~ thodAttribute(System.ComponentModel.D~dulla^@204~ odType.Insert, true)>  _
        Pub~dulla^@204~  Overridable Function Insert(ByVal Cu~dulla^@204~ tring, ByVal CustomerName As String, ~dulla^@204~  As String, ByVal City As String, ByV~dulla^@204~  String, ByVal Tel As String, ByVal F~dulla^@204~  ByVal PostalAddress As String, ByVal~dulla^@204~ ing, ByVal CustomerVATRegNo As String~dulla^@204~ merTINNo As String, ByVal CustomerDat~dulla^@204~ tem.Nullable(Of Date), ByVal ProductD~dulla^@204~ s System.Nullable(Of Date)) As Intege~dulla^@204~   If (CustomerID Is Nothing) Then
  ~dulla^@204~  Throw New System.ArgumentNullExcepti~dulla^@204~ D")
            Else
              ~dulla^@204~ InsertCommand.Parameters(0).Value = C~dulla^@204~ ID,String)
            End If
     ~dulla^@204~ stomerName Is Nothing) Then
        ~dulla^@204~ apter.InsertCommand.Parameters(1).Val~dulla^@204~ BNull.Value
            Else
      ~dulla^@204~ Adapter.InsertCommand.Parameters(1).V~dulla^@204~ CustomerName,String)
            End~dulla^@204~     If (Address Is Nothing) Then
   ~dulla^@204~ Throw New System.ArgumentNullExceptio~dulla^@204~ 
            Else
                Me~dulla^@204~ rtCommand.Parameters(2).Value = CType~dulla^@204~ ng)
            End If
            ~dulla^@204~ othing) Then
                Throw N~dulla^@204~ umentNullException("City")
         ~dulla^@204~             Me.Adapter.InsertCommand.~dulla^@204~ .Value = CType(City,String)
        ~dulla^@204~            If (Country Is Nothing) Th~dulla^@204~        Throw New System.ArgumentNullE~dulla^@204~ ntry")
            Else
           ~dulla^@204~ er.InsertCommand.Parameters(4).Value ~dulla^@204~ ry,String)
            End If
     ~dulla^@204~ l Is Nothing) Then
                T~dulla^@204~ em.ArgumentNullException("Tel")
    ~dulla^@204~ 
                Me.Adapter.InsertCom~dulla^@204~ rs(5).Value = CType(Tel,String)
    ~dulla^@204~ f
            If (Fax Is Nothing) Then
                Throw New System.Argum~dulla^@204~ ion("Fax")
            Else
       ~dulla^@204~ dapter.InsertCommand.Parameters(6).Va~dulla^@204~ ax,String)
            End If
     ~dulla^@204~ stalAddress Is Nothing) Then
       ~dulla^@204~ w New System.ArgumentNullException("P~dulla^@204~ )
            Else
                ~dulla^@204~ sertCommand.Parameters(7).Value = CTy~dulla^@204~ ess,String)
            End If
    ~dulla^@204~ mail Is Nothing) Then
              ~dulla^@204~ ystem.ArgumentNullException("Email")~dulla^@204~ Else
                Me.Adapter.Inse~dulla^@204~ ameters(8).Value = CType(Email,String~dulla^@204~   End If
            If (CustomerVAT~dulla^@204~ ing) Then
                Me.Adapter~dulla^@204~ d.Parameters(9).Value = System.DBNull~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(9).Value = CType(Custo~dulla^@204~ tring)
            End If
         ~dulla^@204~ erTINNo Is Nothing) Then
           ~dulla^@204~ er.InsertCommand.Parameters(10).Value~dulla^@204~ ull.Value
            Else
        ~dulla^@204~ apter.InsertCommand.Parameters(10).Va~dulla^@204~ ustomerTINNo,String)
            End~dulla^@204~     If (CustomerDateOfReg.HasValue = ~dulla^@204~                Me.Adapter.InsertComma~dulla^@204~ (11).Value = CType(CustomerDateOfReg.~dulla^@204~             Else
                Me.~dulla^@204~ tCommand.Parameters(11).Value = Syste~dulla^@204~ e
            End If
            If~dulla^@204~ OfSupply.HasValue = true) Then
     ~dulla^@204~ .Adapter.InsertCommand.Parameters(12)~dulla^@204~ e(ProductDateOfSupply.Value,Date)
  ~dulla^@204~ e
                Me.Adapter.InsertC~dulla^@204~ ters(12).Value = System.DBNull.Value~dulla^@204~ End If
            Dim previousConne~dulla^@204~  System.Data.ConnectionState = Me.Ada~dulla^@204~ mmand.Connection.State
            I~dulla^@204~ r.InsertCommand.Connection.State And ~dulla^@204~ onnectionState.Open)  _
            ~dulla^@204~ > System.Data.ConnectionState.Open) T~dulla^@204~         Me.Adapter.InsertCommand.Conn~dulla^@204~             End If
            Try ~dulla^@204~     Dim returnValue As Integer = Me.A~dulla^@204~ Command.ExecuteNonQuery
            ~dulla^@204~ turnValue
            Finally
     ~dulla^@204~  (previousConnectionState = System.Da~dulla^@204~ State.Closed) Then
                 ~dulla^@204~ .InsertCommand.Connection.Close
    ~dulla^@204~ nd If
            End Try
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute(),  _
         Syst~dulla^@204~ odel.Design.HelpKeywordAttribute("vs.~dulla^@204~ pter"),  _
         System.Component~dulla^@204~ ectMethodAttribute(System.ComponentMo~dulla^@204~ tMethodType.Update, true)>  _
      ~dulla^@204~ loads Overridable Function Update( _~dulla^@204~         ByVal CustomerID As String,  ~dulla^@204~           ByVal CustomerName As Strin~dulla^@204~               ByVal Address As String~dulla^@204~              ByVal City As String,  _~dulla^@204~          ByVal Country As String,  _~dulla^@204~         ByVal Tel As String,  _
    ~dulla^@204~    ByVal Fax As String,  _
         ~dulla^@204~ Val PostalAddress As String,  _
    ~dulla^@204~    ByVal Email As String,  _
       ~dulla^@204~ ByVal CustomerVATRegNo As String,  _~dulla^@204~         ByVal CustomerTINNo As String~dulla^@204~              ByVal CustomerDateOfReg ~dulla^@204~ lable(Of Date),  _
                 ~dulla^@204~ uctDateOfSupply As System.Nullable(Of~dulla^@204~                    ByVal Original_Cus~dulla^@204~ ring,  _
                    ByVal O~dulla^@204~ merName As String,  _
              ~dulla^@204~ riginal_Address As String,  _
      ~dulla^@204~  ByVal Original_City As String,  _
 ~dulla^@204~       ByVal Original_Country As Strin~dulla^@204~               ByVal Original_Tel As S~dulla^@204~                   ByVal Original_Fax ~dulla^@204~ 
                    ByVal Original_~dulla^@204~  As String,  _
                    B~dulla^@204~ _Email As String,  _
               ~dulla^@204~ iginal_CustomerVATRegNo As String,  _~dulla^@204~          ByVal Original_CustomerTINNo~dulla^@204~ _
                    ByVal Original~dulla^@204~ OfReg As System.Nullable(Of Date),  _~dulla^@204~          ByVal Original_ProductDateOf~dulla^@204~ tem.Nullable(Of Date)) As Integer
  ~dulla^@204~ (CustomerID Is Nothing) Then
       ~dulla^@204~ w New System.ArgumentNullException("C~dulla^@204~             Else
                Me.~dulla^@204~ eCommand.Parameters(0).Value = CType(~dulla^@204~ ring)
            End If
          ~dulla^@204~ rName Is Nothing) Then
             ~dulla^@204~ .UpdateCommand.Parameters(1).Value = ~dulla^@204~ .Value
            Else
           ~dulla^@204~ er.UpdateCommand.Parameters(1).Value ~dulla^@204~ merName,String)
            End If
~dulla^@204~ f (Address Is Nothing) Then
        ~dulla^@204~  New System.ArgumentNullException("Ad~dulla^@204~         Else
                Me.Adap~dulla^@204~ mand.Parameters(2).Value = CType(Addr~dulla^@204~             End If
            If (C~dulla^@204~ g) Then
                Throw New Sy~dulla^@204~ NullException("City")
            El~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ e = CType(City,String)
            E~dulla^@204~       If (Country Is Nothing) Then
 ~dulla^@204~   Throw New System.ArgumentNullExcept~dulla^@204~ )
            Else
                ~dulla^@204~ dateCommand.Parameters(4).Value = CTy~dulla^@204~ ring)
            End If
          ~dulla^@204~ Nothing) Then
                Throw ~dulla^@204~ gumentNullException("Tel")
         ~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ .Value = CType(Tel,String)
         ~dulla^@204~           If (Fax Is Nothing) Then
 ~dulla^@204~   Throw New System.ArgumentNullExcept~dulla^@204~            Else
                Me.A~dulla^@204~ Command.Parameters(6).Value = CType(F~dulla^@204~            End If
            If (Po~dulla^@204~ s Nothing) Then
                Thro~dulla^@204~ ArgumentNullException("PostalAddress"~dulla^@204~   Else
                Me.Adapter.Up~dulla^@204~ arameters(7).Value = CType(PostalAddr~dulla^@204~             End If
            If (E~dulla^@204~ ng) Then
                Throw New S~dulla^@204~ tNullException("Email")
            ~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ lue = CType(Email,String)
          ~dulla^@204~          If (CustomerVATRegNo Is Noth~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 9).Value = System.DBNull.Value
     ~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(9).Value = CType(CustomerVATRegNo,S~dulla^@204~        End If
            If (Custom~dulla^@204~ thing) Then
                Me.Adapt~dulla^@204~ and.Parameters(10).Value = System.DBN~dulla^@204~           Else
                Me.Ad~dulla^@204~ ommand.Parameters(10).Value = CType(C~dulla^@204~ String)
            End If
        ~dulla^@204~ merDateOfReg.HasValue = true) Then
 ~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ CType(CustomerDateOfReg.Value,Date)
~dulla^@204~ lse
                Me.Adapter.Updat~dulla^@204~ meters(11).Value = System.DBNull.Valu~dulla^@204~   End If
            If (ProductDate~dulla^@204~ alue = true) Then
                Me~dulla^@204~ teCommand.Parameters(12).Value = CTyp~dulla^@204~ OfSupply.Value,Date)
            Els~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~ e = System.DBNull.Value
            ~dulla^@204~        If (Original_CustomerID Is Not~dulla^@204~                Throw New System.Argum~dulla^@204~ ion("Original_CustomerID")
         ~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ ).Value = CType(Original_CustomerID,S~dulla^@204~        End If
            If (Origin~dulla^@204~ me Is Nothing) Then
                ~dulla^@204~ dateCommand.Parameters(14).Value = CT~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(15).Value = System.DBNull.Value
~dulla^@204~ lse
                Me.Adapter.Updat~dulla^@204~ meters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Pa~dulla^@204~ Value = CType(Original_CustomerName,S~dulla^@204~        End If
            If (Origin~dulla^@204~  Nothing) Then
                Throw~dulla^@204~ rgumentNullException("Original_Addres~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(16).Value = CType(Origina~dulla^@204~ ing)
            End If
           ~dulla^@204~ _City Is Nothing) Then
             ~dulla^@204~ System.ArgumentNullException("Origina~dulla^@204~          Else
                Me.Ada~dulla^@204~ mmand.Parameters(17).Value = CType(Or~dulla^@204~ tring)
            End If
         ~dulla^@204~ al_Country Is Nothing) Then
        ~dulla^@204~  New System.ArgumentNullException("Or~dulla^@204~ y")
            Else
              ~dulla^@204~ UpdateCommand.Parameters(18).Value = ~dulla^@204~ l_Country,String)
            End If~dulla^@204~  If (Original_Tel Is Nothing) Then
 ~dulla^@204~   Throw New System.ArgumentNullExcept~dulla^@204~ _Tel")
            Else
           ~dulla^@204~ er.UpdateCommand.Parameters(19).Value~dulla^@204~ inal_Tel,String)
            End If~dulla^@204~ If (Original_Fax Is Nothing) Then
  ~dulla^@204~  Throw New System.ArgumentNullExcepti~dulla^@204~ Fax")
            Else
            ~dulla^@204~ r.UpdateCommand.Parameters(20).Value ~dulla^@204~ nal_Fax,String)
            End If
~dulla^@204~ f (Original_PostalAddress Is Nothing)~dulla^@204~           Throw New System.ArgumentNu~dulla^@204~ Original_PostalAddress")
           ~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ Value = CType(Original_PostalAddress,~dulla^@204~         End If
            If (Origi~dulla^@204~ Nothing) Then
                Throw ~dulla^@204~ gumentNullException("Original_Email")~dulla^@204~  Else
                Me.Adapter.Upd~dulla^@204~ rameters(22).Value = CType(Original_E~dulla^@204~ 
            End If
            If (~dulla^@204~ omerVATRegNo Is Nothing) Then
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(23).~dulla^@204~ (1,Object)
                Me.Adapte~dulla^@204~ nd.Parameters(24).Value = System.DBNu~dulla^@204~          Else
                Me.Ada~dulla^@204~ mmand.Parameters(23).Value = CType(0,~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ ).Value = CType(Original_CustomerVATR~dulla^@204~ 
            End If
            If (~dulla^@204~ omerTINNo Is Nothing) Then
         ~dulla^@204~ pter.UpdateCommand.Parameters(25).Val~dulla^@204~ Object)
                Me.Adapter.U~dulla^@204~ Parameters(26).Value = System.DBNull.~dulla^@204~       Else
                Me.Adapte~dulla^@204~ nd.Parameters(25).Value = CType(0,Obj~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ alue = CType(Original_CustomerTINNo,S~dulla^@204~        End If
            If (Origin~dulla^@204~ teOfReg.HasValue = true) Then
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(27).~dulla^@204~ (0,Object)
                Me.Adapte~dulla^@204~ nd.Parameters(28).Value = CType(Origi~dulla^@204~ ateOfReg.Value,Date)
            Els~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~ e = CType(1,Object)
                ~dulla^@204~ dateCommand.Parameters(28).Value = Sy~dulla^@204~ alue
            End If
           ~dulla^@204~ _ProductDateOfSupply.HasValue = true)~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ Value = CType(0,Object)
            ~dulla^@204~ r.UpdateCommand.Parameters(30).Value ~dulla^@204~ nal_ProductDateOfSupply.Value,Date)
~dulla^@204~ lse
                Me.Adapter.Updat~dulla^@204~ meters(29).Value = CType(1,Object)
 ~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ System.DBNull.Value
            End ~dulla^@204~    Dim previousConnectionState As Sys~dulla^@204~ ectionState = Me.Adapter.UpdateComman~dulla^@204~ State
            If ((Me.Adapter.Up~dulla^@204~ onnection.State And System.Data.Conne~dulla^@204~ en)  _
                        <> Sy~dulla^@204~ nectionState.Open) Then
            ~dulla^@204~ r.UpdateCommand.Connection.Open
    ~dulla^@204~ f
            Try 
                ~dulla^@204~ ue As Integer = Me.Adapter.UpdateComm~dulla^@204~ nQuery
                Return return~dulla^@204~       Finally
                If (pr~dulla^@204~ ionState = System.Data.ConnectionStat~dulla^@204~ n
                    Me.Adapter.Upd~dulla^@204~ nnection.Close
                End I~dulla^@204~   End Try
        End Function
    ~dulla^@204~   
    <System.CodeDom.Compiler.Gene~dulla^@204~ ibute("System.Data.Design.TypedDataSe~dulla^@204~ "2.0.0.0"),  _
     System.Component~dulla^@204~ rCategoryAttribute("code"),  _
     ~dulla^@204~ entModel.ToolboxItem(true),  _
     ~dulla^@204~ entModel.DataObjectAttribute(true),  ~dulla^@204~ m.ComponentModel.DesignerAttribute("M~dulla^@204~ signer.DataSource.Design.TableAdapter~dulla^@204~ rosoft.VSDesigner"& _ 
        ", Ve~dulla^@204~ , Culture=neutral, PublicKeyToken=b03~dulla^@204~ "),  _
     System.ComponentModel.De~dulla^@204~ ordAttribute("vs.data.TableAdapter")>~dulla^@204~ ial Public Class InvoiceTableAdapter~dulla^@204~ rits System.ComponentModel.Component~dulla^@204~       Private WithEvents _adapter As ~dulla^@204~ qlClient.SqlDataAdapter
        
  ~dulla^@204~  _connection As System.Data.SqlClient~dulla^@204~ n
        
        Private _command~dulla^@204~ As System.Data.SqlClient.SqlCommand
~dulla^@204~      Private _clearBeforeFill As Bool~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Sub Ne~dulla^@204~     MyBase.New
            Me.ClearB~dulla^@204~ rue
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Private ReadOnly Property Adapter~dulla^@204~ Data.SqlClient.SqlDataAdapter
      ~dulla^@204~               If (Me._adapter Is Noth~dulla^@204~                   Me.InitAdapter
   ~dulla^@204~ End If
                Return Me._ad~dulla^@204~       End Get
        End Property
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Friend Property Co~dulla^@204~  System.Data.SqlClient.SqlConnection~dulla^@204~ Get
                If (Me._connecti~dulla^@204~ ) Then
                    Me.InitCo~dulla^@204~              End If
                ~dulla^@204~ nnection
            End Get
      ~dulla^@204~               Me._connection = value~dulla^@204~     If (Not (Me.Adapter.InsertCommand~dulla^@204~  Then
                    Me.Adapter~dulla^@204~ d.Connection = value
               ~dulla^@204~             If (Not (Me.Adapter.Delet~dulla^@204~ Nothing) Then
                    Me~dulla^@204~ teCommand.Connection = value
       ~dulla^@204~ If
                If (Not (Me.Adapt~dulla^@204~ and) Is Nothing) Then
              ~dulla^@204~ ter.UpdateCommand.Connection = value~dulla^@204~     End If
                Dim i As ~dulla^@204~                 Do While (i < Me.Comm~dulla^@204~ .Length)
                    If (Not~dulla^@204~ ollection(i)) Is Nothing) Then
     ~dulla^@204~       CType(Me.CommandCollection(i),S~dulla^@204~ lClient.SqlCommand).Connection = valu~dulla^@204~           End If
                   ~dulla^@204~ 
                Loop
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ otected ReadOnly Property CommandColl~dulla^@204~ ystem.Data.SqlClient.SqlCommand()
  ~dulla^@204~ 
                If (Me._commandColl~dulla^@204~ hing) Then
                    Me.In~dulla^@204~ ection
                End If
     ~dulla^@204~ turn Me._commandCollection
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Property ClearBeforeFill() ~dulla^@204~            Get
                Retur~dulla^@204~ foreFill
            End Get
      ~dulla^@204~               Me._clearBeforeFill = v~dulla^@204~      End Set
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Private Sub InitAda~dulla^@204~        Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim ~dulla^@204~ As System.Data.Common.DataTableMappin~dulla^@204~ m.Data.Common.DataTableMapping
     ~dulla^@204~ apping.SourceTable = "Table"
       ~dulla^@204~ ping.DataSetTable = "Invoice"
      ~dulla^@204~ pping.ColumnMappings.Add("InvoiceNo",~dulla^@204~ 
            tableMapping.ColumnMapp~dulla^@204~ e", "Date")
            tableMapping~dulla^@204~ gs.Add("TotalAmount", "TotalAmount")~dulla^@204~ tableMapping.ColumnMappings.Add("Frie~dulla^@204~ FrieghtCharge")
            tableMap~dulla^@204~ ppings.Add("MiscellaneousCost", "Misc~dulla^@204~ ")
            tableMapping.ColumnMa~dulla^@204~ otalPurchaseAmount", "TotalPurchaseAm~dulla^@204~        Me._adapter.TableMappings.Add(~dulla^@204~ 
            Me._adapter.DeleteComma~dulla^@204~ em.Data.SqlClient.SqlCommand
       ~dulla^@204~ ter.DeleteCommand.Connection = Me.Con~dulla^@204~         Me._adapter.DeleteCommand.Com~dulla^@204~ ELETE FROM [dbo].[Invoice] WHERE (([I~dulla^@204~ Original_InvoiceNo) AND ([Date"& _ 
~dulla^@204~    "] = @Original_Date) AND ([TotalAm~dulla^@204~ inal_TotalAmount) AND ((@IsNull_Fr"& ~dulla^@204~        "ieghtCharge = 1 AND [FrieghtC~dulla^@204~ L) OR ([FrieghtCharge] = @Original_Fr~dulla^@204~            "eghtCharge)) AND ((@IsNul~dulla^@204~ usCost = 1 AND [MiscellaneousCost] IS~dulla^@204~                ") OR ([MiscellaneousC~dulla^@204~ nal_MiscellaneousCost)) AND ([TotalPu~dulla^@204~  
                "unt] = @Original_~dulla^@204~ Amount))"
            Me._adapter.De~dulla^@204~ ommandType = System.Data.CommandType.~dulla^@204~      Me._adapter.DeleteCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ iceNo", System.Data.SqlDbType.NVarCha~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ System.Data.DataRowVersion.Original, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Original_Date", System.Dat~dulla^@204~ ateTime, 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "Date", System.Data.DataRowVers~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.DeleteCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@Original_Tot~dulla^@204~ stem.Data.SqlDbType.Int, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "TotalAmount", ~dulla^@204~ ataRowVersion.Original, false, Nothin~dulla^@204~ ))
            Me._adapter.DeleteCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ Null_FrieghtCharge", System.Data.SqlD~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ ghtCharge", System.Data.DataRowVersio~dulla^@204~ rue, Nothing, "", "", ""))
         ~dulla^@204~ r.DeleteCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@Original_Friegh~dulla^@204~ tem.Data.SqlDbType.Int, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "FrieghtCharge",~dulla^@204~ DataRowVersion.Original, false, Nothi~dulla^@204~ "))
            Me._adapter.DeleteCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ sNull_MiscellaneousCost", System.Data~dulla^@204~ t, 0, System.Data.ParameterDirection.~dulla^@204~ "MiscellaneousCost", System.Data.Data~dulla^@204~ iginal, true, Nothing, "", "", ""))
~dulla^@204~ e._adapter.DeleteCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@Origin~dulla^@204~ ousCost", System.Data.SqlDbType.Int, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "Mi~dulla^@204~ st", System.Data.DataRowVersion.Origi~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@Original_TotalPurchas~dulla^@204~ tem.Data.SqlDbType.Int, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "TotalPurchaseAm~dulla^@204~ .Data.DataRowVersion.Original, false,~dulla^@204~  "", ""))
            Me._adapter.In~dulla^@204~  New System.Data.SqlClient.SqlCommand~dulla^@204~  Me._adapter.InsertCommand.Connection~dulla^@204~ ion
            Me._adapter.InsertCo~dulla^@204~ Text = "INSERT INTO [dbo].[Invoice] (~dulla^@204~ [Date], [TotalAmount], [FrieghtCharge~dulla^@204~             " [MiscellaneousCost], [T~dulla^@204~ mount]) VALUES (@InvoiceNo, @Date, @T~dulla^@204~                 "ount, @FrieghtCharge~dulla^@204~ ousCost, @TotalPurchaseAmount);"&Glob~dulla^@204~ VisualBasic.ChrW(13)&Global.Microsoft~dulla^@204~ ChrW(10)&"SELECT Invoice"& _ 
      ~dulla^@204~ , Date, TotalAmount, FrieghtCharge, M~dulla^@204~ ost, TotalPurchaseAmount FRO"& _ 
  ~dulla^@204~  "M Invoice WHERE (InvoiceNo = @Invoi~dulla^@204~        Me._adapter.InsertCommand.Comm~dulla^@204~ tem.Data.CommandType.Text
          ~dulla^@204~ .InsertCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@InvoiceNo", Syst~dulla^@204~ Type.NVarChar, 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "InvoiceNo", System.Data.~dulla^@204~ n.Current, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.InsertCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Da~dulla^@204~ ata.SqlDbType.DateTime, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "Date", System.D~dulla^@204~ rsion.Current, false, Nothing, "", ""~dulla^@204~        Me._adapter.InsertCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ ", System.Data.SqlDbType.Int, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "TotalAmou~dulla^@204~ ata.DataRowVersion.Current, false, No~dulla^@204~ , ""))
            Me._adapter.Inser~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@FrieghtCharge", System.Data.SqlDbTy~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ Charge", System.Data.DataRowVersion.C~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ nsertCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@MiscellaneousCost"~dulla^@204~ .SqlDbType.Int, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "MiscellaneousCost", Sys~dulla^@204~ RowVersion.Current, false, Nothing, "~dulla^@204~             Me._adapter.InsertCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ urchaseAmount", System.Data.SqlDbType~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ haseAmount", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand = New System.Data.Sq~dulla^@204~ mmand
            Me._adapter.Update~dulla^@204~ ction = Me.Connection
            Me~dulla^@204~ ateCommand.CommandText = "UPDATE [dbo~dulla^@204~ ET [InvoiceNo] = @InvoiceNo, [Date] =~dulla^@204~ lAmount"& _ 
                "] = @T~dulla^@204~ FrieghtCharge] = @FrieghtCharge, [Mis~dulla^@204~ t] = @Misce"& _ 
                "ll~dulla^@204~ TotalPurchaseAmount] = @TotalPurchase~dulla^@204~ (([InvoiceNo] ="& _ 
               ~dulla^@204~ InvoiceNo) AND ([Date] = @Original_Da~dulla^@204~ alAmount] = @Origin"& _ 
           ~dulla^@204~ lAmount) AND ((@IsNull_FrieghtCharge ~dulla^@204~ ghtCharge] IS NULL) OR "& _ 
       ~dulla^@204~ rieghtCharge] = @Original_FrieghtChar~dulla^@204~ sNull_MiscellaneousCost = 1"& _ 
   ~dulla^@204~ " AND [MiscellaneousCost] IS NULL) OR~dulla^@204~ ousCost] = @Original_Miscellane"& _ ~dulla^@204~     "ousCost)) AND ([TotalPurchaseAmo~dulla^@204~ nal_TotalPurchaseAmount));"&Global.Mi~dulla^@204~ lBasic.ChrW(13)&Global.Microsoft.Visu~dulla^@204~ 10)&"SELECT "& _ 
                "I~dulla^@204~ e, TotalAmount, FrieghtCharge, Miscel~dulla^@204~ TotalPurchaseAmo"& _ 
              ~dulla^@204~ nvoice WHERE (InvoiceNo = @InvoiceNo)~dulla^@204~   Me._adapter.UpdateCommand.CommandTy~dulla^@204~ ata.CommandType.Text
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@InvoiceNo", System.Da~dulla^@204~ NVarChar, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "InvoiceNo", System.Data.DataR~dulla^@204~ rent, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.UpdateCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Date", ~dulla^@204~ qlDbType.DateTime, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "Date", System.Data.D~dulla^@204~ .Current, false, Nothing, "", "", "")~dulla^@204~   Me._adapter.UpdateCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@TotalAmount", System.Data.SqlDbType.Int, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "TotalA~dulla^@204~ m.Data.DataRowVersion.Current, false,~dulla^@204~  "", ""))
            Me._adapter.Up~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@FrieghtCharge", System.Data.SqlD~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ ghtCharge", System.Data.DataRowVersio~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.UpdateCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@MiscellaneousCo~dulla^@204~ ata.SqlDbType.Int, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "MiscellaneousCost", ~dulla^@204~ ataRowVersion.Current, false, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ alPurchaseAmount", System.Data.SqlDbT~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ urchaseAmount", System.Data.DataRowVe~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.UpdateCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@Original_In~dulla^@204~ tem.Data.SqlDbType.NVarChar, 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "InvoiceNo"~dulla^@204~ .DataRowVersion.Original, false, Noth~dulla^@204~ ""))
            Me._adapter.UpdateC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ Original_Date", System.Data.SqlDbType~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@Original_TotalAmount", ~dulla^@204~ qlDbType.Int, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "TotalAmount", System.Data~dulla^@204~ on.Original, false, Nothing, "", "", ~dulla^@204~      Me._adapter.UpdateCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ tCharge", System.Data.SqlDbType.Int, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "Fr~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Original_FrieghtCharge", S~dulla^@204~ lDbType.Int, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "FrieghtCharge", System.Dat~dulla^@204~ ion.Original, false, Nothing, "", "",~dulla^@204~       Me._adapter.UpdateCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ llaneousCost", System.Data.SqlDbType.~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ ousCost", System.Data.DataRowVersion.~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ UpdateCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@Original_Miscella~dulla^@204~ ystem.Data.SqlDbType.Int, 0, System.D~dulla^@204~ Direction.Input, 0, 0, "Miscellaneous~dulla^@204~ .Data.DataRowVersion.Original, false,~dulla^@204~  "", ""))
            Me._adapter.Up~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@Original_TotalPurchaseAmount", S~dulla^@204~ lDbType.Int, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "TotalPurchaseAmount", Syst~dulla^@204~ owVersion.Original, false, Nothing, "~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ rivate Sub InitConnection()
        ~dulla^@204~ ction = New System.Data.SqlClient.Sql~dulla^@204~            Me._connection.ConnectionS~dulla^@204~ l.InventoryControlSystem.My.MySetting~dulla^@204~ entoryControlSystemConnectionString
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ itCommandCollection()
            Me~dulla^@204~ ection = New System.Data.SqlClient.Sq~dulla^@204~ }
            Me._commandCollection(~dulla^@204~ em.Data.SqlClient.SqlCommand
       ~dulla^@204~ andCollection(0).Connection = Me.Conn~dulla^@204~        Me._commandCollection(0).Comma~dulla^@204~ ECT InvoiceNo, Date, TotalAmount, Fri~dulla^@204~ iscellaneousCost, TotalPurch"& _ 
  ~dulla^@204~  "aseAmount FROM dbo.Invoice"
      ~dulla^@204~ mandCollection(0).CommandType = Syste~dulla^@204~ dType.Text
        End Sub
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
         System.ComponentModel.Des~dulla^@204~ rdAttribute("vs.data.TableAdapter"), ~dulla^@204~ System.ComponentModel.DataObjectMetho~dulla^@204~ stem.ComponentModel.DataObjectMethodT~dulla^@204~ e)>  _
        Public Overloads Over~dulla^@204~ ion Fill(ByVal dataTable As Inventory~dulla^@204~ DataSet.InvoiceDataTable) As Integer~dulla^@204~ Me.Adapter.SelectCommand = Me.Command~dulla^@204~ 
            If (Me.ClearBeforeFill ~dulla^@204~ 
                dataTable.Clear
   ~dulla^@204~ If
            Dim returnValue As In~dulla^@204~ apter.Fill(dataTable)
            Re~dulla^@204~ lue
        End Function
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
         System.ComponentModel.Desig~dulla^@204~ Attribute("vs.data.TableAdapter"),  _~dulla^@204~ stem.ComponentModel.DataObjectMethodA~dulla^@204~ em.ComponentModel.DataObjectMethodTyp~dulla^@204~ rue)>  _
        Public Overloads Ov~dulla^@204~ ction GetData() As InventoryControlSy~dulla^@204~ nvoiceDataTable
            Me.Adapt~dulla^@204~ and = Me.CommandCollection(0)
      ~dulla^@204~ aTable As InventoryControlSystemDataS~dulla^@204~ aTable = New InventoryControlSystemDa~dulla^@204~ DataTable
            Me.Adapter.Fil~dulla^@204~ 
            Return dataTable
      ~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute(),  _
         S~dulla^@204~ ntModel.Design.HelpKeywordAttribute("~dulla^@204~ Adapter")>  _
        Public Overloa~dulla^@204~ e Function Update(ByVal dataTable As ~dulla^@204~ rolSystemDataSet.InvoiceDataTable) As~dulla^@204~          Return Me.Adapter.Update(dat~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute(),~dulla^@204~  System.ComponentModel.Design.HelpKey~dulla^@204~ ("vs.data.TableAdapter")>  _
       ~dulla^@204~ oads Overridable Function Update(ByVa~dulla^@204~ InventoryControlSystemDataSet) As Int~dulla^@204~      Return Me.Adapter.Update(dataSet~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~       System.ComponentModel.Design.He~dulla^@204~ ibute("vs.data.TableAdapter")>  _
  ~dulla^@204~ Overloads Overridable Function Update~dulla^@204~ w As System.Data.DataRow) As Integer~dulla^@204~ Return Me.Adapter.Update(New System.D~dulla^@204~  {dataRow})
        End Function
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e(),  _
         System.ComponentMod~dulla^@204~ pKeywordAttribute("vs.data.TableAdapt~dulla^@204~      Public Overloads Overridable Fun~dulla^@204~ ByVal dataRows() As System.Data.DataR~dulla^@204~ r
            Return Me.Adapter.Upda~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~       System.ComponentModel.Design.He~dulla^@204~ ibute("vs.data.TableAdapter"),  _
  ~dulla^@204~ .ComponentModel.DataObjectMethodAttri~dulla^@204~ omponentModel.DataObjectMethodType.De~dulla^@204~  _
        Public Overloads Overrida~dulla^@204~ Delete(ByVal Original_InvoiceNo As St~dulla^@204~ riginal_Date As Date, ByVal Original_~dulla^@204~ s Integer, ByVal Original_FrieghtChar~dulla^@204~ Nullable(Of Integer), ByVal Original_~dulla^@204~ Cost As System.Nullable(Of Integer), ~dulla^@204~ l_TotalPurchaseAmount As Integer) As ~dulla^@204~         If (Original_InvoiceNo Is Not~dulla^@204~                Throw New System.Argum~dulla^@204~ ion("Original_InvoiceNo")
          ~dulla^@204~            Me.Adapter.DeleteCommand.P~dulla^@204~ Value = CType(Original_InvoiceNo,Stri~dulla^@204~     End If
            Me.Adapter.De~dulla^@204~ arameters(1).Value = CType(Original_D~dulla^@204~           Me.Adapter.DeleteCommand.Pa~dulla^@204~ alue = CType(Original_TotalAmount,Int~dulla^@204~       If (Original_FrieghtCharge.HasV~dulla^@204~ Then
                Me.Adapter.Dele~dulla^@204~ ameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Pa~dulla^@204~ alue = CType(Original_FrieghtCharge.V~dulla^@204~ 
            Else
                M~dulla^@204~ eteCommand.Parameters(3).Value = CTyp~dulla^@204~                 Me.Adapter.DeleteComm~dulla^@204~ s(4).Value = System.DBNull.Value
   ~dulla^@204~ If
            If (Original_Miscella~dulla^@204~ Value = true) Then
                M~dulla^@204~ eteCommand.Parameters(5).Value = CTyp~dulla^@204~                 Me.Adapter.DeleteComm~dulla^@204~ s(6).Value = CType(Original_Miscellan~dulla^@204~ e,Integer)
            Else
       ~dulla^@204~ dapter.DeleteCommand.Parameters(5).Va~dulla^@204~ ,Object)
                Me.Adapter.~dulla^@204~ .Parameters(6).Value = System.DBNull.~dulla^@204~       End If
            Me.Adapter.~dulla^@204~ .Parameters(7).Value = CType(Original~dulla^@204~ eAmount,Integer)
            Dim pre~dulla^@204~ onState As System.Data.ConnectionStat~dulla^@204~ r.DeleteCommand.Connection.State
   ~dulla^@204~ (Me.Adapter.DeleteCommand.Connection.~dulla^@204~ tem.Data.ConnectionState.Open)  _
  ~dulla^@204~          <> System.Data.ConnectionSta~dulla^@204~ 
                Me.Adapter.DeleteCo~dulla^@204~ ion.Open
            End If
       ~dulla^@204~               Dim returnValue As Inte~dulla^@204~ ter.DeleteCommand.ExecuteNonQuery
  ~dulla^@204~  Return returnValue
            Fina~dulla^@204~         If (previousConnectionState =~dulla^@204~ ConnectionState.Closed) Then
       ~dulla^@204~ Me.Adapter.DeleteCommand.Connection.C~dulla^@204~          End If
            End Try~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute(),  _
   ~dulla^@204~ ComponentModel.Design.HelpKeywordAttr~dulla^@204~ a.TableAdapter"),  _
         System~dulla^@204~ el.DataObjectMethodAttribute(System.C~dulla^@204~ .DataObjectMethodType.Insert, true)> ~dulla^@204~ ublic Overloads Overridable Function ~dulla^@204~ InvoiceNo As String, ByVal _Date As D~dulla^@204~ talAmount As Integer, ByVal FrieghtCh~dulla^@204~ m.Nullable(Of Integer), ByVal Miscell~dulla^@204~  System.Nullable(Of Integer), ByVal T~dulla^@204~ mount As Integer) As Integer
       ~dulla^@204~ iceNo Is Nothing) Then
             ~dulla^@204~ System.ArgumentNullException("Invoice~dulla^@204~      Else
                Me.Adapter~dulla^@204~ d.Parameters(0).Value = CType(Invoice~dulla^@204~            End If
            Me.Ada~dulla^@204~ mmand.Parameters(1).Value = CType(_Da~dulla^@204~          Me.Adapter.InsertCommand.Par~dulla^@204~ lue = CType(TotalAmount,Integer)
   ~dulla^@204~ FrieghtCharge.HasValue = true) Then
~dulla^@204~    Me.Adapter.InsertCommand.Parameter~dulla^@204~ CType(FrieghtCharge.Value,Integer)
 ~dulla^@204~ se
                Me.Adapter.Insert~dulla^@204~ eters(3).Value = System.DBNull.Value~dulla^@204~ End If
            If (Miscellaneous~dulla^@204~  = true) Then
                Me.Ada~dulla^@204~ mmand.Parameters(4).Value = CType(Mis~dulla^@204~ t.Value,Integer)
            Else
 ~dulla^@204~   Me.Adapter.InsertCommand.Parameters~dulla^@204~ ystem.DBNull.Value
            End I~dulla^@204~   Me.Adapter.InsertCommand.Parameters~dulla^@204~ Type(TotalPurchaseAmount,Integer)
  ~dulla^@204~  previousConnectionState As System.Da~dulla^@204~ State = Me.Adapter.InsertCommand.Conn~dulla^@204~ 
            If ((Me.Adapter.InsertCo~dulla^@204~ ion.State And System.Data.ConnectionS~dulla^@204~ 
                        <> System.D~dulla^@204~ nState.Open) Then
                Me~dulla^@204~ rtCommand.Connection.Open
          ~dulla^@204~          Try 
                Dim re~dulla^@204~ Integer = Me.Adapter.InsertCommand.Ex~dulla^@204~ 
                Return returnValue~dulla^@204~ Finally
                If (previous~dulla^@204~ te = System.Data.ConnectionState.Clos~dulla^@204~                  Me.Adapter.InsertCom~dulla^@204~ on.Close
                End If
   ~dulla^@204~ Try
        End Function
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
         System.ComponentModel.Desig~dulla^@204~ Attribute("vs.data.TableAdapter"),  _~dulla^@204~ stem.ComponentModel.DataObjectMethodA~dulla^@204~ em.ComponentModel.DataObjectMethodTyp~dulla^@204~ e)>  _
        Public Overloads Over~dulla^@204~ ion Update(ByVal InvoiceNo As String,~dulla^@204~ As Date, ByVal TotalAmount As Integer~dulla^@204~ htCharge As System.Nullable(Of Intege~dulla^@204~ cellaneousCost As System.Nullable(Of ~dulla^@204~ al TotalPurchaseAmount As Integer, By~dulla^@204~ InvoiceNo As String, ByVal Original_D~dulla^@204~ ByVal Original_TotalAmount As Integer~dulla^@204~ nal_FrieghtCharge As System.Nullable(~dulla^@204~ ByVal Original_MiscellaneousCost As S~dulla^@204~ e(Of Integer), ByVal Original_TotalPu~dulla^@204~ As Integer) As Integer
            I~dulla^@204~ Is Nothing) Then
                Thr~dulla^@204~ .ArgumentNullException("InvoiceNo")
~dulla^@204~ lse
                Me.Adapter.Updat~dulla^@204~ meters(0).Value = CType(InvoiceNo,Str~dulla^@204~      End If
            Me.Adapter.U~dulla^@204~ Parameters(1).Value = CType(_Date,Dat~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~ CType(TotalAmount,Integer)
         ~dulla^@204~ tCharge.HasValue = true) Then
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(3).V~dulla^@204~ FrieghtCharge.Value,Integer)
       ~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 3).Value = System.DBNull.Value
     ~dulla^@204~ 
            If (MiscellaneousCost.H~dulla^@204~ e) Then
                Me.Adapter.U~dulla^@204~ Parameters(4).Value = CType(Miscellan~dulla^@204~ e,Integer)
            Else
       ~dulla^@204~ dapter.UpdateCommand.Parameters(4).Va~dulla^@204~ DBNull.Value
            End If
   ~dulla^@204~ dapter.UpdateCommand.Parameters(5).Va~dulla^@204~ otalPurchaseAmount,Integer)
        ~dulla^@204~ nal_InvoiceNo Is Nothing) Then
     ~dulla^@204~ row New System.ArgumentNullException(~dulla^@204~ oiceNo")
            Else
         ~dulla^@204~ pter.UpdateCommand.Parameters(6).Valu~dulla^@204~ ginal_InvoiceNo,String)
            ~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ e = CType(Original_Date,Date)
      ~dulla^@204~ ter.UpdateCommand.Parameters(8).Value~dulla^@204~ inal_TotalAmount,Integer)
          ~dulla^@204~ l_FrieghtCharge.HasValue = true) Then~dulla^@204~      Me.Adapter.UpdateCommand.Paramet~dulla^@204~ = CType(0,Object)
                Me~dulla^@204~ teCommand.Parameters(10).Value = CTyp~dulla^@204~ ieghtCharge.Value,Integer)
         ~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ .Value = CType(1,Object)
           ~dulla^@204~ er.UpdateCommand.Parameters(10).Value~dulla^@204~ ull.Value
            End If
      ~dulla^@204~ ginal_MiscellaneousCost.HasValue = tr~dulla^@204~              Me.Adapter.UpdateCommand~dulla^@204~ 1).Value = CType(0,Object)
         ~dulla^@204~ pter.UpdateCommand.Parameters(12).Val~dulla^@204~ iginal_MiscellaneousCost.Value,Intege~dulla^@204~    Else
                Me.Adapter.U~dulla^@204~ Parameters(11).Value = CType(1,Object~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~ e = System.DBNull.Value
            ~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ ue = CType(Original_TotalPurchaseAmou~dulla^@204~             Dim previousConnectionSta~dulla^@204~ Data.ConnectionState = Me.Adapter.Upd~dulla^@204~ nnection.State
            If ((Me.A~dulla^@204~ Command.Connection.State And System.D~dulla^@204~ nState.Open)  _
                    ~dulla^@204~ .Data.ConnectionState.Open) Then
   ~dulla^@204~ Me.Adapter.UpdateCommand.Connection.O~dulla^@204~     End If
            Try 
       ~dulla^@204~ returnValue As Integer = Me.Adapter.U~dulla^@204~ ExecuteNonQuery
                Retu~dulla^@204~ e
            Finally
             ~dulla^@204~ usConnectionState = System.Data.Conne~dulla^@204~ osed) Then
                    Me.Ad~dulla^@204~ ommand.Connection.Close
            ~dulla^@204~            End Try
        End Funct~dulla^@204~ Class
    
    <System.CodeDom.Comp~dulla^@204~ dCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
    ~dulla^@204~ nentModel.DesignerCategoryAttribute("~dulla^@204~     System.ComponentModel.ToolboxItem~dulla^@204~     System.ComponentModel.DataObjectA~dulla^@204~ ),  _
     System.ComponentModel.Des~dulla^@204~ e("Microsoft.VSDesigner.DataSource.De~dulla^@204~ pterDesigner, Microsoft.VSDesigner"& ~dulla^@204~ , Version=8.0.0.0, Culture=neutral, P~dulla^@204~ =b03f5f7f11d50a3a"),  _
     System.~dulla^@204~ l.Design.HelpKeywordAttribute("vs.dat~dulla^@204~ r")>  _
    Partial Public Class Ord~dulla^@204~ r
        Inherits System.ComponentM~dulla^@204~ t
        
        Private WithEven~dulla^@204~ s System.Data.SqlClient.SqlDataAdapte~dulla^@204~         Private _connection As System~dulla^@204~ nt.SqlConnection
        
        P~dulla^@204~ ndCollection() As System.Data.SqlClie~dulla^@204~ 
        
        Private _clearBef~dulla^@204~ olean
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ New()
            MyBase.New
      ~dulla^@204~ rBeforeFill = true
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Private ReadOnly P~dulla^@204~ er() As System.Data.SqlClient.SqlData~dulla^@204~         Get
                If (Me._~dulla^@204~ thing) Then
                    Me.I~dulla^@204~                End If
              ~dulla^@204~ adapter
            End Get
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Fri~dulla^@204~ Connection() As System.Data.SqlClient~dulla^@204~ n
            Get
                I~dulla^@204~ tion Is Nothing) Then
              ~dulla^@204~ Connection
                End If
 ~dulla^@204~   Return Me._connection
            ~dulla^@204~         Set
                Me._conn~dulla^@204~ e
                If (Not (Me.Adapte~dulla^@204~ nd) Is Nothing) Then
               ~dulla^@204~ er.InsertCommand.Connection = value
~dulla^@204~    End If
                If (Not (M~dulla^@204~ eteCommand) Is Nothing) Then
       ~dulla^@204~ Me.Adapter.DeleteCommand.Connection =~dulla^@204~            End If
                If~dulla^@204~ pter.UpdateCommand) Is Nothing) Then~dulla^@204~         Me.Adapter.UpdateCommand.Conn~dulla^@204~ e
                End If
          ~dulla^@204~ s Integer = 0
                Do Whi~dulla^@204~ mmandCollection.Length)
            ~dulla^@204~ ot (Me.CommandCollection(i)) Is Nothi~dulla^@204~                      CType(Me.Command~dulla^@204~ ,System.Data.SqlClient.SqlCommand).Co~dulla^@204~ lue
                    End If
    ~dulla^@204~    i = (i + 1)
                Loop~dulla^@204~ End Set
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Protected ReadOnly Prope~dulla^@204~ llection() As System.Data.SqlClient.S~dulla^@204~             Get
                If (~dulla^@204~ llection Is Nothing) Then
          ~dulla^@204~ InitCommandCollection
              ~dulla^@204~              Return Me._commandCollec~dulla^@204~      End Get
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public Property Cle~dulla^@204~ ) As Boolean
            Get
      ~dulla^@204~ urn Me._clearBeforeFill
            ~dulla^@204~         Set
                Me._clea~dulla^@204~  value
            End Set
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Priv~dulla^@204~ dapter()
            Me._adapter = N~dulla^@204~ a.SqlClient.SqlDataAdapter
         ~dulla^@204~ apping As System.Data.Common.DataTabl~dulla^@204~ w System.Data.Common.DataTableMapping~dulla^@204~  tableMapping.SourceTable = "Table"
~dulla^@204~ ableMapping.DataSetTable = "Order"
 ~dulla^@204~ bleMapping.ColumnMappings.Add("OrderN~dulla^@204~ )
            tableMapping.ColumnMap~dulla^@204~ rtNo", "PartNo")
            tableMa~dulla^@204~ appings.Add("Description", "Descripti~dulla^@204~      tableMapping.ColumnMappings.Add(~dulla^@204~ Quantity")
            Me._adapter.T~dulla^@204~ Add(tableMapping)
            Me._ad~dulla^@204~ ommand = New System.Data.SqlClient.Sq~dulla^@204~          Me._adapter.DeleteCommand.Co~dulla^@204~ .Connection
            Me._adapter.~dulla^@204~ .CommandText = "DELETE FROM [dbo].[Or~dulla^@204~ [OrderNo] = @Original_OrderNo) AND ([~dulla^@204~ _ 
                "@Original_PartNo~dulla^@204~ iption] = @Original_Description) AND ~dulla^@204~  "& _ 
                "@Original_Qu~dulla^@204~           Me._adapter.DeleteCommand.C~dulla^@204~ System.Data.CommandType.Text
       ~dulla^@204~ ter.DeleteCommand.Parameters.Add(New ~dulla^@204~ qlClient.SqlParameter("@Original_Orde~dulla^@204~ Data.SqlDbType.NVarChar, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "OrderNo", Syst~dulla^@204~ owVersion.Original, false, Nothing, "~dulla^@204~             Me._adapter.DeleteCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ al_PartNo", System.Data.SqlDbType.NVa~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@Original_Description", Sy~dulla^@204~ DbType.[Char], 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "Description", System.Dat~dulla^@204~ ion.Original, false, Nothing, "", "",~dulla^@204~       Me._adapter.DeleteCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ ntity", System.Data.SqlDbType.Int, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Quan~dulla^@204~ .Data.DataRowVersion.Original, false,~dulla^@204~  "", ""))
            Me._adapter.In~dulla^@204~  New System.Data.SqlClient.SqlCommand~dulla^@204~  Me._adapter.InsertCommand.Connection~dulla^@204~ ion
            Me._adapter.InsertCo~dulla^@204~ Text = "INSERT INTO [dbo].[Order] ([O~dulla^@204~ tNo], [Description], [Quantity]) VALU~dulla^@204~             " (@OrderNo, @PartNo, @De~dulla^@204~ uantity);"&Global.Microsoft.VisualBas~dulla^@204~ lobal.Microsoft.VisualBasic.ChrW(10)&~dulla^@204~ No, PartNo, Descript"& _ 
          ~dulla^@204~ uantity FROM [Order] WHERE (OrderNo =~dulla^@204~             Me._adapter.InsertCommand~dulla^@204~ = System.Data.CommandType.Text
     ~dulla^@204~ apter.InsertCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@OrderNo", S~dulla^@204~ lDbType.NVarChar, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "OrderNo", System.Data~dulla^@204~ on.Current, false, Nothing, "", "", "~dulla^@204~     Me._adapter.InsertCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@P~dulla^@204~ m.Data.SqlDbType.NVarChar, 0, System.~dulla^@204~ rDirection.Input, 0, 0, "PartNo", Sys~dulla^@204~ RowVersion.Current, false, Nothing, "~dulla^@204~             Me._adapter.InsertCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ ption", System.Data.SqlDbType.[Char],~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "D~dulla^@204~ System.Data.DataRowVersion.Current, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@Quantity", System.Data.SqlD~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ tity", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand = New System.Data.SqlClien~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ = Me.Connection
            Me._adap~dulla^@204~ mand.CommandText = "UPDATE [dbo].[Ord~dulla^@204~ rNo] = @OrderNo, [PartNo] = @PartNo, ~dulla^@204~  "& _ 
                "= @Descripti~dulla^@204~ ] = @Quantity WHERE (([OrderNo] = @Or~dulla^@204~ o) AN"& _ 
                "D ([Part~dulla^@204~ al_PartNo) AND ([Description] = @Orig~dulla^@204~ ion) AND "& _ 
                "([Qu~dulla^@204~ iginal_Quantity));"&Global.Microsoft.~dulla^@204~ hrW(13)&Global.Microsoft.VisualBasic.~dulla^@204~ ECT OrderNo, PartNo, Description, Qua~dulla^@204~              "ty FROM [Order] WHERE (~dulla^@204~ derNo)"
            Me._adapter.UpdateCommand.CommandType = System.Data.Comman~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ ", System.Data.SqlDbType.NVarChar, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Orde~dulla^@204~ Data.DataRowVersion.Current, false, N~dulla^@204~ ", ""))
            Me._adapter.Upda~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@PartNo", System.Data.SqlDbType.NVa~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~  System.Data.DataRowVersion.Current, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Description", System.Data.~dulla^@204~ ar], 0, System.Data.ParameterDirectio~dulla^@204~ , "Description", System.Data.DataRowV~dulla^@204~ t, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@Quantity",~dulla^@204~ SqlDbType.Int, 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "Quantity", System.Data.D~dulla^@204~ .Current, false, Nothing, "", "", "")~dulla^@204~   Me._adapter.UpdateCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@Ori~dulla^@204~ ", System.Data.SqlDbType.NVarChar, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Orde~dulla^@204~ Data.DataRowVersion.Original, false, ~dulla^@204~ "", ""))
            Me._adapter.Upd~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@Original_PartNo", System.Data.Sql~dulla^@204~ ar, 0, System.Data.ParameterDirection~dulla^@204~  "PartNo", System.Data.DataRowVersion~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.UpdateCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@Original_Descri~dulla^@204~ m.Data.SqlDbType.[Char], 0, System.Da~dulla^@204~ irection.Input, 0, 0, "Description", ~dulla^@204~ ataRowVersion.Original, false, Nothin~dulla^@204~ ))
            Me._adapter.UpdateCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ iginal_Quantity", System.Data.SqlDbTy~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ y", System.Data.DataRowVersion.Origin~dulla^@204~ thing, "", "", ""))
        End Sub~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Private Sub InitC~dulla^@204~             Me._connection = New Syst~dulla^@204~ ient.SqlConnection
            Me._c~dulla^@204~ nectionString = Global.InventoryContr~dulla^@204~ ySettings.Default.InventoryControlSys~dulla^@204~ String
        End Sub
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Private Sub InitCommandCollect~dulla^@204~       Me._commandCollection = New Sys~dulla^@204~ lient.SqlCommand(0) {}
            M~dulla^@204~ lection(0) = New System.Data.SqlClien~dulla^@204~ 
            Me._commandCollection(0)~dulla^@204~  Me.Connection
            Me._comma~dulla^@204~ 0).CommandText = "SELECT OrderNo, Par~dulla^@204~ ion, Quantity FROM dbo.[Order]"
    ~dulla^@204~ ommandCollection(0).CommandType = Sys~dulla^@204~ andType.Text
        End Sub
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
         System.ComponentModel.D~dulla^@204~ wordAttribute("vs.data.TableAdapter")~dulla^@204~   System.ComponentModel.DataObjectMet~dulla^@204~ System.ComponentModel.DataObjectMetho~dulla^@204~ rue)>  _
        Public Overloads Ov~dulla^@204~ ction Fill(ByVal dataTable As Invento~dulla^@204~ emDataSet.OrderDataTable) As Integer~dulla^@204~ Me.Adapter.SelectCommand = Me.Command~dulla^@204~ 
            If (Me.ClearBeforeFill ~dulla^@204~ 
                dataTable.Clear
   ~dulla^@204~ If
            Dim returnValue As In~dulla^@204~ apter.Fill(dataTable)
            Re~dulla^@204~ lue
        End Function
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
         System.ComponentModel.Desig~dulla^@204~ Attribute("vs.data.TableAdapter"),  _~dulla^@204~ stem.ComponentModel.DataObjectMethodA~dulla^@204~ em.ComponentModel.DataObjectMethodTyp~dulla^@204~ rue)>  _
        Public Overloads Ov~dulla^@204~ ction GetData() As InventoryControlSy~dulla^@204~ rderDataTable
            Me.Adapter~dulla^@204~ d = Me.CommandCollection(0)
        ~dulla^@204~ able As InventoryControlSystemDataSet~dulla^@204~ le = New InventoryControlSystemDataSe~dulla^@204~ ble
            Me.Adapter.Fill(data~dulla^@204~        Return dataTable
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute(),  _
         System.~dulla^@204~ l.Design.HelpKeywordAttribute("vs.dat~dulla^@204~ r")>  _
        Public Overloads Ove~dulla^@204~ tion Update(ByVal dataTable As Invent~dulla^@204~ temDataSet.OrderDataTable) As Integer~dulla^@204~  Return Me.Adapter.Update(dataTable)~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute(),  _
   ~dulla^@204~ ComponentModel.Design.HelpKeywordAttr~dulla^@204~ a.TableAdapter")>  _
        Public ~dulla^@204~ rridable Function Update(ByVal dataSe~dulla^@204~ yControlSystemDataSet) As Integer
  ~dulla^@204~ urn Me.Adapter.Update(dataSet, "Order~dulla^@204~ nd Function
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute(),  _
~dulla^@204~ em.ComponentModel.Design.HelpKeywordA~dulla^@204~ data.TableAdapter")>  _
        Publ~dulla^@204~ Overridable Function Update(ByVal dat~dulla^@204~ m.Data.DataRow) As Integer
         ~dulla^@204~ Adapter.Update(New System.Data.DataRo~dulla^@204~ )
        End Function
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~         System.ComponentModel.Design.~dulla^@204~ tribute("vs.data.TableAdapter")>  _
~dulla^@204~ c Overloads Overridable Function Upda~dulla^@204~ Rows() As System.Data.DataRow) As Int~dulla^@204~      Return Me.Adapter.Update(dataRow~dulla^@204~ nd Function
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute(),  _
~dulla^@204~ em.ComponentModel.Design.HelpKeywordA~dulla^@204~ data.TableAdapter"),  _
         Sys~dulla^@204~ Model.DataObjectMethodAttribute(Syste~dulla^@204~ del.DataObjectMethodType.Delete, true~dulla^@204~   Public Overloads Overridable Functi~dulla^@204~ al Original_OrderNo As String, ByVal ~dulla^@204~ No As String, ByVal Original_Descript~dulla^@204~ , ByVal Original_Quantity As Integer)~dulla^@204~             If (Original_OrderNo Is N~dulla^@204~ 
                Throw New System.Arg~dulla^@204~ ption("Original_OrderNo")
          ~dulla^@204~            Me.Adapter.DeleteCommand.P~dulla^@204~ Value = CType(Original_OrderNo,String~dulla^@204~   End If
            If (Original_Pa~dulla^@204~ ng) Then
                Throw New S~dulla^@204~ tNullException("Original_PartNo")
  ~dulla^@204~ e
                Me.Adapter.DeleteC~dulla^@204~ ters(1).Value = CType(Original_PartNo~dulla^@204~          End If
            If (Orig~dulla^@204~ ion Is Nothing) Then
               ~dulla^@204~ stem.ArgumentNullException("Original_~dulla^@204~ 
            Else
                M~dulla^@204~ eteCommand.Parameters(2).Value = CTyp~dulla^@204~ scription,String)
            End If~dulla^@204~  Me.Adapter.DeleteCommand.Parameters(~dulla^@204~ ype(Original_Quantity,Integer)
     ~dulla^@204~ eviousConnectionState As System.Data.~dulla^@204~ te = Me.Adapter.DeleteCommand.Connect~dulla^@204~           If ((Me.Adapter.DeleteComma~dulla^@204~ .State And System.Data.ConnectionStat~dulla^@204~                        <> System.Data~dulla^@204~ ate.Open) Then
                Me.Ad~dulla^@204~ ommand.Connection.Open
            E~dulla^@204~       Try 
                Dim retur~dulla^@204~ eger = Me.Adapter.DeleteCommand.Execu~dulla^@204~                Return returnValue
  ~dulla^@204~ ally
                If (previousCon~dulla^@204~ = System.Data.ConnectionState.Closed)~dulla^@204~               Me.Adapter.DeleteComman~dulla^@204~ Close
                End If
      ~dulla^@204~ 
        End Function
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~        System.ComponentModel.Design.H~dulla^@204~ ribute("vs.data.TableAdapter"),  _
 ~dulla^@204~ m.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMeth~dulla^@204~ , true)>  _
        Public Overloads~dulla^@204~ Function Insert(ByVal OrderNo As Stri~dulla^@204~ tNo As String, ByVal Description As S~dulla^@204~ Quantity As Integer) As Integer
    ~dulla^@204~ rderNo Is Nothing) Then
            ~dulla^@204~  System.ArgumentNullException("OrderN~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(0).Value = CType(OrderNo,~dulla^@204~         End If
            If (PartN~dulla^@204~  Then
                Throw New Syst~dulla^@204~ llException("PartNo")
            El~dulla^@204~        Me.Adapter.InsertCommand.Param~dulla^@204~ e = CType(PartNo,String)
           ~dulla^@204~         If (Description Is Nothing) T~dulla^@204~         Throw New System.ArgumentNull~dulla^@204~ scription")
            Else
      ~dulla^@204~ Adapter.InsertCommand.Parameters(2).V~dulla^@204~ Description,String)
            End ~dulla^@204~    Me.Adapter.InsertCommand.Parameter~dulla^@204~ CType(Quantity,Integer)
            ~dulla^@204~ onnectionState As System.Data.Connect~dulla^@204~ .Adapter.InsertCommand.Connection.Sta~dulla^@204~    If ((Me.Adapter.InsertCommand.Conn~dulla^@204~ And System.Data.ConnectionState.Open)~dulla^@204~                 <> System.Data.Connec~dulla^@204~ n) Then
                Me.Adapter.I~dulla^@204~ Connection.Open
            End If
~dulla^@204~ ry 
                Dim returnValue ~dulla^@204~ Me.Adapter.InsertCommand.ExecuteNonQu~dulla^@204~         Return returnValue
         ~dulla^@204~                If (previousConnection~dulla^@204~ m.Data.ConnectionState.Closed) Then
~dulla^@204~        Me.Adapter.InsertCommand.Conne~dulla^@204~                 End If
            E~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute(), ~dulla^@204~ System.ComponentModel.Design.HelpKeyw~dulla^@204~ "vs.data.TableAdapter"),  _
        ~dulla^@204~ nentModel.DataObjectMethodAttribute(S~dulla^@204~ ntModel.DataObjectMethodType.Update, ~dulla^@204~       Public Overloads Overridable Fu~dulla^@204~ (ByVal OrderNo As String, ByVal PartN~dulla^@204~ ByVal Description As String, ByVal Qu~dulla^@204~ eger, ByVal Original_OrderNo As Strin~dulla^@204~ inal_PartNo As String, ByVal Original~dulla^@204~ As String, ByVal Original_Quantity As~dulla^@204~ Integer
            If (OrderNo Is N~dulla^@204~ 
                Throw New System.Arg~dulla^@204~ ption("OrderNo")
            Else
 ~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ Type(OrderNo,String)
            End~dulla^@204~     If (PartNo Is Nothing) Then
    ~dulla^@204~ hrow New System.ArgumentNullException~dulla^@204~            Else
                Me.A~dulla^@204~ Command.Parameters(1).Value = CType(P~dulla^@204~ 
            End If
            If ~dulla^@204~ Is Nothing) Then
                Thr~dulla^@204~ .ArgumentNullException("Description")~dulla^@204~  Else
                Me.Adapter.Upd~dulla^@204~ rameters(2).Value = CType(Description~dulla^@204~          End If
            Me.Adapt~dulla^@204~ and.Parameters(3).Value = CType(Quant~dulla^@204~ 
            If (Original_OrderNo Is ~dulla^@204~ 
                Throw New System.Ar~dulla^@204~ eption("Original_OrderNo")
         ~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ .Value = CType(Original_OrderNo,Strin~dulla^@204~    End If
            If (Original_P~dulla^@204~ ing) Then
                Throw New ~dulla^@204~ ntNullException("Original_PartNo")
 ~dulla^@204~ se
                Me.Adapter.Update~dulla^@204~ eters(5).Value = CType(Original_PartN~dulla^@204~           End If
            If (Ori~dulla^@204~ tion Is Nothing) Then
              ~dulla^@204~ ystem.ArgumentNullException("Original~dulla^@204~ )
            Else
                ~dulla^@204~ dateCommand.Parameters(6).Value = CTy~dulla^@204~ escription,String)
            End I~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ Type(Original_Quantity,Integer)
    ~dulla^@204~ reviousConnectionState As System.Data~dulla^@204~ ate = Me.Adapter.UpdateCommand.Connec~dulla^@204~            If ((Me.Adapter.UpdateComm~dulla^@204~ n.State And System.Data.ConnectionSta~dulla^@204~                         <> System.Dat~dulla^@204~ tate.Open) Then
                Me.A~dulla^@204~ Command.Connection.Open
            ~dulla^@204~        Try 
                Dim retu~dulla^@204~ teger = Me.Adapter.UpdateCommand.Exec~dulla^@204~                 Return returnValue
 ~dulla^@204~ nally
                If (previousCo~dulla^@204~  = System.Data.ConnectionState.Closed~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ .Close
                End If
     ~dulla^@204~ y
        End Function
    End Clas~dulla^@204~ <System.CodeDom.Compiler.GeneratedCod~dulla^@204~ ystem.Data.Design.TypedDataSetGenerat~dulla^@204~ "),  _
     System.ComponentModel.De~dulla^@204~ yAttribute("code"),  _
     System.C~dulla^@204~ .ToolboxItem(true),  _
     System.C~dulla^@204~ .DataObjectAttribute(true),  _
     ~dulla^@204~ entModel.DesignerAttribute("Microsoft~dulla^@204~ ataSource.Design.TableAdapterDesigner~dulla^@204~ SDesigner"& _ 
        ", Version=8.~dulla^@204~ e=neutral, PublicKeyToken=b03f5f7f11d~dulla^@204~      System.ComponentModel.Design.Hel~dulla^@204~ bute("vs.data.TableAdapter")>  _
   ~dulla^@204~ ic Class ProductInfoTableAdapter
   ~dulla^@204~  System.ComponentModel.Component
   ~dulla^@204~   Private WithEvents _adapter As Syst~dulla^@204~ ient.SqlDataAdapter
        
      ~dulla^@204~ nnection As System.Data.SqlClient.Sql~dulla^@204~        
        Private _commandColl~dulla^@204~ ystem.Data.SqlClient.SqlCommand
    ~dulla^@204~  Private _clearBeforeFill As Boolean~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Sub New()~dulla^@204~ MyBase.New
            Me.ClearBefor~dulla^@204~ 
        End Sub
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Private ReadOnly Property Adapter() A~dulla^@204~ .SqlClient.SqlDataAdapter
          ~dulla^@204~           If (Me._adapter Is Nothing)~dulla^@204~               Me.InitAdapter
       ~dulla^@204~ If
                Return Me._adapte~dulla^@204~   End Get
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Friend Property Connec~dulla^@204~ tem.Data.SqlClient.SqlConnection
   ~dulla^@204~ 
                If (Me._connection I~dulla^@204~ en
                    Me.InitConnec~dulla^@204~          End If
                Retu~dulla^@204~ tion
            End Get
          ~dulla^@204~           Me._connection = value
   ~dulla^@204~ If (Not (Me.Adapter.InsertCommand) Is~dulla^@204~ n
                    Me.Adapter.Ins~dulla^@204~ nnection = value
                End~dulla^@204~         If (Not (Me.Adapter.DeleteCom~dulla^@204~ ing) Then
                    Me.Ada~dulla^@204~ mmand.Connection = value
           ~dulla^@204~                 If (Not (Me.Adapter.U~dulla^@204~  Is Nothing) Then
                  ~dulla^@204~ UpdateCommand.Connection = value
   ~dulla^@204~ End If
                Dim i As Inte~dulla^@204~             Do While (i < Me.CommandC~dulla^@204~ gth)
                    If (Not (Me~dulla^@204~ ction(i)) Is Nothing) Then
         ~dulla^@204~   CType(Me.CommandCollection(i),Syste~dulla^@204~ ent.SqlCommand).Connection = value
 ~dulla^@204~       End If
                    i =~dulla^@204~              Loop
            End Se~dulla^@204~ d Property
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~ ted ReadOnly Property CommandCollecti~dulla^@204~ m.Data.SqlClient.SqlCommand()
      ~dulla^@204~               If (Me._commandCollecti~dulla^@204~ ) Then
                    Me.InitCo~dulla^@204~ on
                End If
         ~dulla^@204~  Me._commandCollection
            E~dulla^@204~    End Property
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Property ClearBeforeFill() As B~dulla^@204~        Get
                Return Me._clearBeforeFill
            End Get
  ~dulla^@204~ 
                Me._clearBeforeFill~dulla^@204~          End Set
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Private Sub Ini~dulla^@204~            Me._adapter = New System.D~dulla^@204~ .SqlDataAdapter
            Dim tabl~dulla^@204~ ystem.Data.Common.DataTableMapping = ~dulla^@204~ ta.Common.DataTableMapping
         ~dulla^@204~ ng.SourceTable = "Table"
           ~dulla^@204~ .DataSetTable = "ProductInfo"
      ~dulla^@204~ pping.ColumnMappings.Add("PartNo", "P~dulla^@204~         tableMapping.ColumnMappings.A~dulla^@204~ me", "ProductName")
            tabl~dulla^@204~ mnMappings.Add("Brand", "Brand")
   ~dulla^@204~ eMapping.ColumnMappings.Add("Origin",~dulla^@204~            tableMapping.ColumnMapping~dulla^@204~ ice", "UnitPrice")
            table~dulla^@204~ nMappings.Add("SellingPrice1", "Selli~dulla^@204~            tableMapping.ColumnMapping~dulla^@204~ gPrice2", "SellingPrice2")
         ~dulla^@204~ r.TableMappings.Add(tableMapping)
  ~dulla^@204~ _adapter.DeleteCommand = New System.D~dulla^@204~ .SqlCommand
            Me._adapter.~dulla^@204~ .Connection = Me.Connection
        ~dulla^@204~ er.DeleteCommand.CommandText = "DELET~dulla^@204~ [ProductInfo] WHERE (([PartNo] = @Ori~dulla^@204~  AND ([Produc"& _ 
                "~dulla^@204~ ginal_ProductName) AND ([Brand] = @Or~dulla^@204~  AND ([Origin] = "& _ 
             ~dulla^@204~ _Origin) AND ([UnitPrice] = @Original~dulla^@204~ ND ([SellingPrice1] ="& _ 
         ~dulla^@204~ ginal_SellingPrice1) AND ([SellingPri~dulla^@204~ nal_SellingPrice2))"
            Me.~dulla^@204~ teCommand.CommandType = System.Data.C~dulla^@204~ xt
            Me._adapter.DeleteCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ iginal_PartNo", System.Data.SqlDbType~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ No", System.Data.DataRowVersion.Origi~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@Original_ProductName"~dulla^@204~ .SqlDbType.[Char], 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "ProductName", System~dulla^@204~ Version.Original, false, Nothing, "",~dulla^@204~           Me._adapter.DeleteCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~ _Brand", System.Data.SqlDbType.[Char]~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ m.Data.DataRowVersion.Original, false~dulla^@204~ , "", ""))
            Me._adapter.D~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@Original_Origin", System.Data.S~dulla^@204~ r], 0, System.Data.ParameterDirection~dulla^@204~  "Origin", System.Data.DataRowVersion~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.DeleteCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@Original_UnitPr~dulla^@204~ Data.SqlDbType.Float, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "UnitPrice", Syste~dulla^@204~ wVersion.Original, false, Nothing, ""~dulla^@204~            Me._adapter.DeleteCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ l_SellingPrice1", System.Data.SqlDbTy~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ ngPrice1", System.Data.DataRowVersion~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.DeleteCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@Original_Sellin~dulla^@204~ tem.Data.SqlDbType.Float, 0, System.D~dulla^@204~ Direction.Input, 0, 0, "SellingPrice2~dulla^@204~ a.DataRowVersion.Original, false, Not~dulla^@204~  ""))
            Me._adapter.Insert~dulla^@204~  System.Data.SqlClient.SqlCommand
  ~dulla^@204~ _adapter.InsertCommand.Connection = M~dulla^@204~ 
            Me._adapter.InsertComman~dulla^@204~  = "INSERT INTO [dbo].[ProductInfo] (~dulla^@204~ oductName], [Brand], [Origin], [Uni"&~dulla^@204~         "tPrice], [SellingPrice1], [S~dulla^@204~ ) VALUES (@PartNo, @ProductName, @Bra~dulla^@204~             ", @Origin, @UnitPrice, @~dulla^@204~ , @SellingPrice2);"&Global.Microsoft.~dulla^@204~ hrW(13)&Global.Microsoft.VisualBasic.~dulla^@204~ ECT PartNo, ProductN"& _ 
          ~dulla^@204~ rand, Origin, UnitPrice, SellingPrice~dulla^@204~ ce2 FROM ProductInfo WHE"& _ 
      ~dulla^@204~  (PartNo = @PartNo)"
            Me.~dulla^@204~ rtCommand.CommandType = System.Data.C~dulla^@204~ xt
            Me._adapter.InsertCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ rtNo", System.Data.SqlDbType.NVarChar~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ em.Data.DataRowVersion.Current, false~dulla^@204~ , "", ""))
            Me._adapter.I~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@ProductName", System.Data.SqlDb~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ oductName", System.Data.DataRowVersio~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.InsertCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@Brand", System.~dulla^@204~ e.[Char], 0, System.Data.ParameterDir~dulla^@204~  0, 0, "Brand", System.Data.DataRowVe~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.InsertCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@Origin", Sy~dulla^@204~ DbType.[Char], 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "Origin", System.Data.Dat~dulla^@204~ urrent, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.InsertCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@UnitP~dulla^@204~ .Data.SqlDbType.Float, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "UnitPrice", Syst~dulla^@204~ owVersion.Current, false, Nothing, ""~dulla^@204~            Me._adapter.InsertCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ Price1", System.Data.SqlDbType.Float,~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "S~dulla^@204~ , System.Data.DataRowVersion.Current,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@SellingPrice2", System.Da~dulla^@204~ Float, 0, System.Data.ParameterDirect~dulla^@204~  0, "SellingPrice2", System.Data.Data~dulla^@204~ rrent, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.UpdateCommand = New System~dulla^@204~ nt.SqlCommand
            Me._adapte~dulla^@204~ nd.Connection = Me.Connection
      ~dulla^@204~ pter.UpdateCommand.CommandText = "UPD~dulla^@204~ oductInfo] SET [PartNo] = @PartNo, [P~dulla^@204~  @ProductName, "& _ 
               ~dulla^@204~ Brand, [Origin] = @Origin, [UnitPrice~dulla^@204~ e, [SellingPrice1] "& _ 
           ~dulla^@204~ ingPrice1, [SellingPrice2] = @Selling~dulla^@204~ (([PartNo] = @Original_"& _ 
       ~dulla^@204~ tNo) AND ([ProductName] = @Original_P~dulla^@204~ ND ([Brand] = @Original_Bra"& _ 
   ~dulla^@204~ "nd) AND ([Origin] = @Original_Origin~dulla^@204~ rice] = @Original_UnitPrice) AN"& _ ~dulla^@204~     "D ([SellingPrice1] = @Original_S~dulla^@204~  AND ([SellingPrice2] = @Original_S"&~dulla^@204~         "ellingPrice2));"&Global.Micr~dulla^@204~ asic.ChrW(13)&Global.Microsoft.Visual~dulla^@204~ )&"SELECT PartNo, ProductName, Brand,~dulla^@204~ Price, SellingPr"& _ 
              ~dulla^@204~ ingPrice2 FROM ProductInfo WHERE (Par~dulla^@204~ )"
            Me._adapter.UpdateCom~dulla^@204~ ype = System.Data.CommandType.Text
 ~dulla^@204~ ._adapter.UpdateCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@PartNo"~dulla^@204~ .SqlDbType.NVarChar, 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "PartNo", System.Da~dulla^@204~ sion.Current, false, Nothing, "", "",~dulla^@204~       Me._adapter.UpdateCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ , System.Data.SqlDbType.[Char], 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "Product~dulla^@204~ .Data.DataRowVersion.Current, false, ~dulla^@204~ "", ""))
            Me._adapter.Upd~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@Brand", System.Data.SqlDbType.[Ch~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ stem.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@Origin", System.Data.~dulla^@204~ ar], 0, System.Data.ParameterDirectio~dulla^@204~ , "Origin", System.Data.DataRowVersio~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.UpdateCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@UnitPrice", Sys~dulla^@204~ bType.Float, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "UnitPrice", System.Data.Da~dulla^@204~ Current, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Sell~dulla^@204~ ystem.Data.SqlDbType.Float, 0, System~dulla^@204~ erDirection.Input, 0, 0, "SellingPric~dulla^@204~ ata.DataRowVersion.Current, false, No~dulla^@204~ , ""))
            Me._adapter.Updat~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@SellingPrice2", System.Data.SqlDbTy~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ ngPrice2", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@Original_PartNo"~dulla^@204~ .SqlDbType.NVarChar, 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "PartNo", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ oductName", System.Data.SqlDbType.[Ch~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ e", System.Data.DataRowVersion.Origin~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@Original_Brand", Syste~dulla^@204~ ype.[Char], 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "Brand", System.Data.DataRow~dulla^@204~ nal, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.UpdateCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@Original~dulla^@204~ tem.Data.SqlDbType.[Char], 0, System.~dulla^@204~ rDirection.Input, 0, 0, "Origin", Sys~dulla^@204~ RowVersion.Original, false, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ nal_UnitPrice", System.Data.SqlDbType~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ ce", System.Data.DataRowVersion.Origi~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@Original_SellingPrice~dulla^@204~ ta.SqlDbType.Float, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "SellingPrice1", Sys~dulla^@204~ RowVersion.Original, false, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ nal_SellingPrice2", System.Data.SqlDb~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ lingPrice2", System.Data.DataRowVersi~dulla^@204~ false, Nothing, "", "", ""))
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Private ~dulla^@204~ ction()
            Me._connection =~dulla^@204~ ata.SqlClient.SqlConnection
        ~dulla^@204~ ction.ConnectionString = Global.Inven~dulla^@204~ stem.My.MySettings.Default.InventoryC~dulla^@204~ onnectionString
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Private Sub InitComma~dulla^@204~ )
            Me._commandCollection ~dulla^@204~ Data.SqlClient.SqlCommand(0) {}
    ~dulla^@204~ ommandCollection(0) = New System.Data~dulla^@204~ lCommand
            Me._commandColl~dulla^@204~ nection = Me.Connection
            ~dulla^@204~ llection(0).CommandText = "SELECT Par~dulla^@204~ ame, Brand, Origin, UnitPrice, Sellin~dulla^@204~ ingPrice"& _ 
                "2 FRO~dulla^@204~ Info"
            Me._commandCollect~dulla^@204~ dType = System.Data.CommandType.Text~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute(),  _
        ~dulla^@204~ nentModel.Design.HelpKeywordAttribute~dulla^@204~ leAdapter"),  _
         System.Comp~dulla^@204~ taObjectMethodAttribute(System.Compon~dulla^@204~ ObjectMethodType.Fill, true)>  _
   ~dulla^@204~ verloads Overridable Function Fill(By~dulla^@204~  As InventoryControlSystemDataSet.Pro~dulla^@204~ able) As Integer
            Me.Adap~dulla^@204~ mand = Me.CommandCollection(0)
     ~dulla^@204~ .ClearBeforeFill = true) Then
      ~dulla^@204~ aTable.Clear
            End If
   ~dulla^@204~ returnValue As Integer = Me.Adapter.F~dulla^@204~ )
            Return returnValue
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute(),  _
      ~dulla^@204~ ponentModel.Design.HelpKeywordAttribu~dulla^@204~ ableAdapter"),  _
         System.Co~dulla^@204~ DataObjectMethodAttribute(System.Comp~dulla^@204~ taObjectMethodType.[Select], true)>  ~dulla^@204~ blic Overloads Overridable Function G~dulla^@204~ nventoryControlSystemDataSet.ProductI~dulla^@204~ 
            Me.Adapter.SelectCommand~dulla^@204~ Collection(0)
            Dim dataTa~dulla^@204~ oryControlSystemDataSet.ProductInfoDa~dulla^@204~  InventoryControlSystemDataSet.Produc~dulla^@204~ e
            Me.Adapter.Fill(dataTa~dulla^@204~      Return dataTable
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute(),  _
         System.Co~dulla^@204~ Design.HelpKeywordAttribute("vs.data.~dulla^@204~ )>  _
        Public Overloads Overr~dulla^@204~ on Update(ByVal dataTable As Inventor~dulla^@204~ mDataSet.ProductInfoDataTable) As Int~dulla^@204~      Return Me.Adapter.Update(dataTab~dulla^@204~ End Function
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ tem.ComponentModel.Design.HelpKeyword~dulla^@204~ .data.TableAdapter")>  _
        Pub~dulla^@204~  Overridable Function Update(ByVal da~dulla^@204~ ntoryControlSystemDataSet) As Integer~dulla^@204~  Return Me.Adapter.Update(dataSet, "P~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~       System.ComponentModel.Design.He~dulla^@204~ ibute("vs.data.TableAdapter")>  _
  ~dulla^@204~ Overloads Overridable Function Update~dulla^@204~ w As System.Data.DataRow) As Integer~dulla^@204~ Return Me.Adapter.Update(New System.D~dulla^@204~  {dataRow})
        End Function
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e(),  _
         System.ComponentMod~dulla^@204~ pKeywordAttribute("vs.data.TableAdapt~dulla^@204~      Public Overloads Overridable Fun~dulla^@204~ ByVal dataRows() As System.Data.DataR~dulla^@204~ r
            Return Me.Adapter.Upda~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~       System.ComponentModel.Design.He~dulla^@204~ ibute("vs.data.TableAdapter"),  _
  ~dulla^@204~ .ComponentModel.DataObjectMethodAttri~dulla^@204~ omponentModel.DataObjectMethodType.De~dulla^@204~  _
        Public Overloads Overrida~dulla^@204~ Delete(ByVal Original_PartNo As Strin~dulla^@204~ inal_ProductName As String, ByVal Ori~dulla^@204~ s String, ByVal Original_Origin As St~dulla^@204~ riginal_UnitPrice As Double, ByVal Or~dulla^@204~ gPrice1 As Double, ByVal Original_Sel~dulla^@204~  Double) As Integer
            If (~dulla^@204~ No Is Nothing) Then
                ~dulla^@204~ tem.ArgumentNullException("Original_P~dulla^@204~         Else
                Me.Adap~dulla^@204~ mand.Parameters(0).Value = CType(Orig~dulla^@204~ tring)
            End If
         ~dulla^@204~ al_ProductName Is Nothing) Then
    ~dulla^@204~ hrow New System.ArgumentNullException~dulla^@204~ oductName")
            Else
      ~dulla^@204~ Adapter.DeleteCommand.Parameters(1).V~dulla^@204~ Original_ProductName,String)
       ~dulla^@204~             If (Original_Brand Is Not~dulla^@204~                Throw New System.Argum~dulla^@204~ ion("Original_Brand")
            El~dulla^@204~        Me.Adapter.DeleteCommand.Param~dulla^@204~ e = CType(Original_Brand,String)
   ~dulla^@204~ If
            If (Original_Origin Is Nothing) Then
                Throw New~dulla^@204~ entNullException("Original_Origin")
~dulla^@204~ lse
                Me.Adapter.Delet~dulla^@204~ meters(3).Value = CType(Original_Orig~dulla^@204~            End If
            Me.Ada~dulla^@204~ mmand.Parameters(4).Value = CType(Ori~dulla^@204~ ce,Double)
            Me.Adapter.De~dulla^@204~ arameters(5).Value = CType(Original_S~dulla^@204~ Double)
            Me.Adapter.Delet~dulla^@204~ meters(6).Value = CType(Original_Sell~dulla^@204~ ble)
            Dim previousConnect~dulla^@204~ ystem.Data.ConnectionState = Me.Adapt~dulla^@204~ and.Connection.State
            If ~dulla^@204~ DeleteCommand.Connection.State And Sy~dulla^@204~ nectionState.Open)  _
              ~dulla^@204~ System.Data.ConnectionState.Open) The~dulla^@204~       Me.Adapter.DeleteCommand.Connec~dulla^@204~           End If
            Try 
 ~dulla^@204~   Dim returnValue As Integer = Me.Ada~dulla^@204~ mmand.ExecuteNonQuery
              ~dulla^@204~ rnValue
            Finally
       ~dulla^@204~ previousConnectionState = System.Data~dulla^@204~ ate.Closed) Then
                   ~dulla^@204~ eleteCommand.Connection.Close
      ~dulla^@204~  If
            End Try
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute(),  _
         System~dulla^@204~ el.Design.HelpKeywordAttribute("vs.da~dulla^@204~ er"),  _
         System.ComponentMo~dulla^@204~ tMethodAttribute(System.ComponentMode~dulla^@204~ ethodType.Insert, true)>  _
        ~dulla^@204~ ads Overridable Function Insert(ByVal~dulla^@204~ ring, ByVal ProductName As String, By~dulla^@204~ String, ByVal Origin As String, ByVal~dulla^@204~  Double, ByVal SellingPrice1 As Doubl~dulla^@204~ ingPrice2 As Double) As Integer
    ~dulla^@204~ artNo Is Nothing) Then
             ~dulla^@204~ System.ArgumentNullException("PartNo"~dulla^@204~   Else
                Me.Adapter.In~dulla^@204~ arameters(0).Value = CType(PartNo,Str~dulla^@204~      End If
            If (ProductN~dulla^@204~ g) Then
                Throw New Sy~dulla^@204~ NullException("ProductName")
       ~dulla^@204~               Me.Adapter.InsertComman~dulla^@204~ 1).Value = CType(ProductName,String)~dulla^@204~ End If
            If (Brand Is Noth~dulla^@204~               Throw New System.Argume~dulla^@204~ on("Brand")
            Else
      ~dulla^@204~ Adapter.InsertCommand.Parameters(2).V~dulla^@204~ Brand,String)
            End If
  ~dulla^@204~ (Origin Is Nothing) Then
           ~dulla^@204~ w System.ArgumentNullException("Origi~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(3).Value = CType(Origin,S~dulla^@204~        End If
            Me.Adapter~dulla^@204~ d.Parameters(4).Value = CType(UnitPri~dulla^@204~            Me.Adapter.InsertCommand.P~dulla^@204~ Value = CType(SellingPrice1,Double)
~dulla^@204~ e.Adapter.InsertCommand.Parameters(6)~dulla^@204~ e(SellingPrice2,Double)
            ~dulla^@204~ onnectionState As System.Data.Connect~dulla^@204~ .Adapter.InsertCommand.Connection.Sta~dulla^@204~    If ((Me.Adapter.InsertCommand.Conn~dulla^@204~ And System.Data.ConnectionState.Open)~dulla^@204~                 <> System.Data.Connec~dulla^@204~ n) Then
                Me.Adapter.I~dulla^@204~ Connection.Open
            End If
~dulla^@204~ ry 
                Dim returnValue ~dulla^@204~ Me.Adapter.InsertCommand.ExecuteNonQu~dulla^@204~         Return returnValue
         ~dulla^@204~                If (previousConnection~dulla^@204~ m.Data.ConnectionState.Closed) Then
~dulla^@204~        Me.Adapter.InsertCommand.Conne~dulla^@204~                 End If
            E~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute(), ~dulla^@204~ System.ComponentModel.Design.HelpKeyw~dulla^@204~ "vs.data.TableAdapter"),  _
        ~dulla^@204~ nentModel.DataObjectMethodAttribute(S~dulla^@204~ ntModel.DataObjectMethodType.Update, ~dulla^@204~       Public Overloads Overridable Fu~dulla^@204~ (ByVal PartNo As String, ByVal Produc~dulla^@204~ ng, ByVal Brand As String, ByVal Orig~dulla^@204~  ByVal UnitPrice As Double, ByVal Sel~dulla^@204~  Double, ByVal SellingPrice2 As Doubl~dulla^@204~ inal_PartNo As String, ByVal Original~dulla^@204~ As String, ByVal Original_Brand As St~dulla^@204~ riginal_Origin As String, ByVal Origi~dulla^@204~  As Double, ByVal Original_SellingPri~dulla^@204~ , ByVal Original_SellingPrice2 As Dou~dulla^@204~ er
            If (PartNo Is Nothing~dulla^@204~            Throw New System.ArgumentN~dulla^@204~ "PartNo")
            Else
        ~dulla^@204~ apter.UpdateCommand.Parameters(0).Val~dulla^@204~ rtNo,String)
            End If
   ~dulla^@204~ ProductName Is Nothing) Then
       ~dulla^@204~ w New System.ArgumentNullException("P~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(1).Value = CType~dulla^@204~ String)
            End If
        ~dulla^@204~  Is Nothing) Then
                Th~dulla^@204~ m.ArgumentNullException("Brand")
   ~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(2).Value = CType(Brand,String)
 ~dulla^@204~ d If
            If (Origin Is Nothi~dulla^@204~              Throw New System.Argumen~dulla^@204~ n("Origin")
            Else
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(3).V~dulla^@204~ Origin,String)
            End If
 ~dulla^@204~ .Adapter.UpdateCommand.Parameters(4).~dulla^@204~ (UnitPrice,Double)
            Me.Ad~dulla^@204~ ommand.Parameters(5).Value = CType(Se~dulla^@204~ ouble)
            Me.Adapter.Update~dulla^@204~ eters(6).Value = CType(SellingPrice2,~dulla^@204~         If (Original_PartNo Is Nothin~dulla^@204~             Throw New System.Argument~dulla^@204~ ("Original_PartNo")
            Else~dulla^@204~      Me.Adapter.UpdateCommand.Paramet~dulla^@204~ = CType(Original_PartNo,String)
    ~dulla^@204~ f
            If (Original_ProductNa~dulla^@204~ ) Then
                Throw New Sys~dulla^@204~ ullException("Original_ProductName")~dulla^@204~ Else
                Me.Adapter.Upda~dulla^@204~ ameters(8).Value = CType(Original_Pro~dulla^@204~ ng)
            End If
            ~dulla^@204~ Brand Is Nothing) Then
             ~dulla^@204~ System.ArgumentNullException("Origina~dulla^@204~           Else
                Me.Ad~dulla^@204~ ommand.Parameters(9).Value = CType(Or~dulla^@204~ String)
            End If
        ~dulla^@204~ nal_Origin Is Nothing) Then
        ~dulla^@204~  New System.ArgumentNullException("Or~dulla^@204~ ")
            Else
               ~dulla^@204~ pdateCommand.Parameters(10).Value = C~dulla^@204~ _Origin,String)
            End If
~dulla^@204~ e.Adapter.UpdateCommand.Parameters(11~dulla^@204~ pe(Original_UnitPrice,Double)
      ~dulla^@204~ ter.UpdateCommand.Parameters(12).Valu~dulla^@204~ ginal_SellingPrice1,Double)
        ~dulla^@204~ r.UpdateCommand.Parameters(13).Value ~dulla^@204~ nal_SellingPrice2,Double)
          ~dulla^@204~ sConnectionState As System.Data.Conne~dulla^@204~ Me.Adapter.UpdateCommand.Connection.S~dulla^@204~      If ((Me.Adapter.UpdateCommand.Co~dulla^@204~ e And System.Data.ConnectionState.Ope~dulla^@204~                   <> System.Data.Conn~dulla^@204~ pen) Then
                Me.Adapter~dulla^@204~ d.Connection.Open
            End If~dulla^@204~  Try 
                Dim returnValu~dulla^@204~ = Me.Adapter.UpdateCommand.ExecuteNon~dulla^@204~           Return returnValue
       ~dulla^@204~ 
                If (previousConnecti~dulla^@204~ tem.Data.ConnectionState.Closed) Then~dulla^@204~          Me.Adapter.UpdateCommand.Con~dulla^@204~ 
                End If
           ~dulla^@204~      End Function
    End Class
   ~dulla^@204~ m.CodeDom.Compiler.GeneratedCodeAttri~dulla^@204~ Data.Design.TypedDataSetGenerator", "~dulla^@204~ 
     System.ComponentModel.Designer~dulla^@204~ bute("code"),  _
     System.Compone~dulla^@204~ oxItem(true),  _
     System.Compone~dulla^@204~ bjectAttribute(true),  _
     System~dulla^@204~ el.DesignerAttribute("Microsoft.VSDes~dulla^@204~ rce.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=~dulla^@204~ ure=neutral, PublicKeyToken=b03f5f7f1~dulla^@204~ 
     System.ComponentModel.Design.H~dulla^@204~ ribute("vs.data.TableAdapter")>  _
 ~dulla^@204~ blic Class ProductsTableAdapter
    ~dulla^@204~ System.ComponentModel.Component
    ~dulla^@204~  Private WithEvents _adapter As Syste~dulla^@204~ ent.SqlDataAdapter
        
       ~dulla^@204~ nection As System.Data.SqlClient.SqlC~dulla^@204~       
        Private _commandColle~dulla^@204~ stem.Data.SqlClient.SqlCommand
     ~dulla^@204~ Private _clearBeforeFill As Boolean
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Sub New()
~dulla^@204~ yBase.New
            Me.ClearBefore~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ rivate ReadOnly Property Adapter() As~dulla^@204~ SqlClient.SqlDataAdapter
           ~dulla^@204~          If (Me._adapter Is Nothing) ~dulla^@204~              Me.InitAdapter
        ~dulla^@204~ f
                Return Me._adapter~dulla^@204~  End Get
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Friend Property Connect~dulla^@204~ em.Data.SqlClient.SqlConnection
    ~dulla^@204~                 If (Me._connection Is~dulla^@204~ n
                    Me.InitConnect~dulla^@204~         End If
                Retur~dulla^@204~ ion
            End Get
           ~dulla^@204~          Me._connection = value
    ~dulla^@204~ f (Not (Me.Adapter.InsertCommand) Is ~dulla^@204~ 
                    Me.Adapter.Inse~dulla^@204~ nection = value
                End ~dulla^@204~        If (Not (Me.Adapter.DeleteComm~dulla^@204~ ng) Then
                    Me.Adap~dulla^@204~ mand.Connection = value
            ~dulla^@204~                If (Not (Me.Adapter.Up~dulla^@204~ Is Nothing) Then
                   ~dulla^@204~ pdateCommand.Connection = value
    ~dulla^@204~ nd If
                Dim i As Integ~dulla^@204~            Do While (i < Me.CommandCo~dulla^@204~ th)
                    If (Not (Me.~dulla^@204~ tion(i)) Is Nothing) Then
          ~dulla^@204~  CType(Me.CommandCollection(i),System~dulla^@204~ nt.SqlCommand).Connection = value
  ~dulla^@204~      End If
                    i = ~dulla^@204~             Loop
            End Set~dulla^@204~  Property
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ ed ReadOnly Property CommandCollectio~dulla^@204~ .Data.SqlClient.SqlCommand()
       ~dulla^@204~              If (Me._commandCollectio~dulla^@204~  Then
                    Me.InitCom~dulla^@204~ n
                End If
          ~dulla^@204~ Me._commandCollection
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Property ClearBeforeFill() As Bo~dulla^@204~       Get
                Return Me.~dulla^@204~ ill
            End Get
           ~dulla^@204~          Me._clearBeforeFill = value~dulla^@204~ End Set
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Private Sub InitAdapter(~dulla^@204~   Me._adapter = New System.Data.SqlCl~dulla^@204~ dapter
            Dim tableMapping ~dulla^@204~ a.Common.DataTableMapping = New Syste~dulla^@204~ .DataTableMapping
            tableM~dulla^@204~ Table = "Table"
            tableMap~dulla^@204~ able = "Products"
            tableM~dulla^@204~ Mappings.Add("PartNo", "PartNo")
   ~dulla^@204~ eMapping.ColumnMappings.Add("ProductN~dulla^@204~ tName")
            tableMapping.Col~dulla^@204~ dd("Brand", "Brand")
            tab~dulla^@204~ umnMappings.Add("Origin", "Origin")
~dulla^@204~ ableMapping.ColumnMappings.Add("Shelf~dulla^@204~ ")
            tableMapping.ColumnMa~dulla^@204~ eorderLevel", "ReorderLevel")
      ~dulla^@204~ pping.ColumnMappings.Add("SellingPric~dulla^@204~ Price1")
            tableMapping.Co~dulla^@204~ Add("SellingPrice2", "SellingPrice2")~dulla^@204~  tableMapping.ColumnMappings.Add("Net~dulla^@204~ Weight")
            Me._adapter.Tab~dulla^@204~ d(tableMapping)
            Me._adap~dulla^@204~ mand = New System.Data.SqlClient.SqlC~dulla^@204~        Me._adapter.DeleteCommand.Conn~dulla^@204~ onnection
            Me._adapter.De~dulla^@204~ ommandText = "DELETE FROM [dbo].[Prod~dulla^@204~ ([PartNo] = @Original_PartNo) AND ([P~dulla^@204~ 
                "me] = @Original_Pr~dulla^@204~ D ([Brand] = @Original_Brand) AND ((@~dulla^@204~ & _ 
                "n = 1 AND [Ori~dulla^@204~  OR ([Origin] = @Original_Origin)) AN~dulla^@204~ = @"& _ 
                "Original_S~dulla^@204~ [ReorderLevel] = @Original_ReorderLev~dulla^@204~ lingPri"& _ 
                "ce1] =~dulla^@204~ llingPrice1) AND ((@IsNull_SellingPri~dulla^@204~ SellingPric"& _ 
                "e2~dulla^@204~  ([SellingPrice2] = @Original_Selling~dulla^@204~ ([NetWeight] = "& _ 
               ~dulla^@204~ etWeight))"
            Me._adapter.~dulla^@204~ .CommandType = System.Data.CommandTyp~dulla^@204~        Me._adapter.DeleteCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ rtNo", System.Data.SqlDbType.NVarChar~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ em.Data.DataRowVersion.Original, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Original_ProductName", System.~dulla^@204~ e.[Char], 0, System.Data.ParameterDir~dulla^@204~  0, 0, "ProductName", System.Data.Dat~dulla^@204~ riginal, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.DeleteCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Orig~dulla^@204~ System.Data.SqlDbType.[Char], 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "Brand", S~dulla^@204~ taRowVersion.Original, false, Nothing~dulla^@204~ )
            Me._adapter.DeleteComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ull_Origin", System.Data.SqlDbType.In~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ tem.Data.DataRowVersion.Original, tru~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Original_Origin", System.Data.~dulla^@204~ ar], 0, System.Data.ParameterDirectio~dulla^@204~ , "Origin", System.Data.DataRowVersio~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.DeleteCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Original_Shelf~dulla^@204~ ata.SqlDbType.NVarChar, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "ShelfNo", Syste~dulla^@204~ wVersion.Original, false, Nothing, ""~dulla^@204~            Me._adapter.DeleteCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ l_ReorderLevel", System.Data.SqlDbTyp~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ evel", System.Data.DataRowVersion.Ori~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ leteCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@Original_SellingPri~dulla^@204~ Data.SqlDbType.Float, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "SellingPrice1", S~dulla^@204~ taRowVersion.Original, false, Nothing~dulla^@204~ )
            Me._adapter.DeleteComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ull_SellingPrice2", System.Data.SqlDb~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ ngPrice2", System.Data.DataRowVersion~dulla^@204~ ue, Nothing, "", "", ""))
          ~dulla^@204~ .DeleteCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@Original_Selling~dulla^@204~ em.Data.SqlDbType.Float, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "SellingPrice2"~dulla^@204~ .DataRowVersion.Original, false, Noth~dulla^@204~ ""))
            Me._adapter.DeleteC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ Original_NetWeight", System.Data.SqlD~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ tWeight", System.Data.DataRowVersion.~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.~dulla^@204~ .Connection = Me.Connection
        ~dulla^@204~ er.InsertCommand.CommandText = "INSER~dulla^@204~ [Products] ([PartNo], [ProductName], ~dulla^@204~ gin], [ShelfN"& _ 
                "~dulla^@204~ evel], [SellingPrice1], [SellingPrice~dulla^@204~ t]) VALUES (@Part"& _ 
             ~dulla^@204~ uctName, @Brand, @Origin, @ShelfNo, @~dulla^@204~  @SellingPrice1, @Sel"& _ 
         ~dulla^@204~ rice2, @NetWeight);"&Global.Microsoft~dulla^@204~ ChrW(13)&Global.Microsoft.VisualBasic~dulla^@204~ LECT PartNo, ProductName, Brand, Orig~dulla^@204~ Re"& _ 
                "orderLevel,~dulla^@204~ 1, SellingPrice2, NetWeight FROM Prod~dulla^@204~ artNo "& _ 
                "= @Part~dulla^@204~      Me._adapter.InsertCommand.Comman~dulla^@204~ m.Data.CommandType.Text
            ~dulla^@204~ nsertCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@PartNo", System.Da~dulla^@204~ NVarChar, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "PartNo", System.Data.DataRowV~dulla^@204~ t, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.InsertCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@ProductNam~dulla^@204~ ta.SqlDbType.[Char], 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "ProductName", Syst~dulla^@204~ owVersion.Current, false, Nothing, ""~dulla^@204~            Me._adapter.InsertCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~  System.Data.SqlDbType.[Char], 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "Brand", ~dulla^@204~ ataRowVersion.Current, false, Nothing~dulla^@204~ )
            Me._adapter.InsertComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ gin", System.Data.SqlDbType.[Char], 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Ori~dulla^@204~ Data.DataRowVersion.Current, false, N~dulla^@204~ ", ""))
            Me._adapter.Inse~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@ShelfNo", System.Data.SqlDbType.NV~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ ", System.Data.DataRowVersion.Current~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@ReorderLevel", System.Da~dulla^@204~ Int, 0, System.Data.ParameterDirectio~dulla^@204~ , "ReorderLevel", System.Data.DataRow~dulla^@204~ nt, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.InsertCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@SellingPr~dulla^@204~ .Data.SqlDbType.Float, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "SellingPrice1", ~dulla^@204~ ataRowVersion.Current, false, Nothing~dulla^@204~ )
            Me._adapter.InsertComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ lingPrice2", System.Data.SqlDbType.Fl~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ ce2", System.Data.DataRowVersion.Curr~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ rtCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@NetWeight", System.Da~dulla^@204~ Float, 0, System.Data.ParameterDirect~dulla^@204~  0, "NetWeight", System.Data.DataRowV~dulla^@204~ t, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand = New System.Dat~dulla^@204~ qlCommand
            Me._adapter.Up~dulla^@204~ onnection = Me.Connection
          ~dulla^@204~ .UpdateCommand.CommandText = "UPDATE ~dulla^@204~ ts] SET [PartNo] = @PartNo, [ProductN~dulla^@204~ ctName, [Br"& _ 
                "an~dulla^@204~ [Origin] = @Origin, [ShelfNo] = @Shel~dulla^@204~ Level] = @Reord"& _ 
               ~dulla^@204~ ellingPrice1] = @SellingPrice1, [Sell~dulla^@204~ @SellingPrice2, [Ne"& _ 
           ~dulla^@204~ ] = @NetWeight WHERE (([PartNo] = @Or~dulla^@204~ ) AND ([ProductName] = "& _ 
       ~dulla^@204~ iginal_ProductName) AND ([Brand] = @O~dulla^@204~ ) AND ((@IsNull_Origin = 1 "& _ 
   ~dulla^@204~ "AND [Origin] IS NULL) OR ([Origin] =~dulla^@204~ igin)) AND ([ShelfNo] = @Origin"& _ ~dulla^@204~     "al_ShelfNo) AND ([ReorderLevel] ~dulla^@204~ eorderLevel) AND ([SellingPrice1] ="&~dulla^@204~         " @Original_SellingPrice1) AN~dulla^@204~ ellingPrice2 = 1 AND [SellingPrice2] ~dulla^@204~             " NULL) OR ([SellingPrice~dulla^@204~ l_SellingPrice2)) AND ([NetWeight] = ~dulla^@204~                 "nal_NetWeight));"&Gl~dulla^@204~ t.VisualBasic.ChrW(13)&Global.Microso~dulla^@204~ c.ChrW(10)&"SELECT PartNo, ProductNam~dulla^@204~ gin, ShelfNo, ReorderLev"& _ 
      ~dulla^@204~ , SellingPrice1, SellingPrice2, NetWe~dulla^@204~ ducts WHERE (PartNo = @PartN"& _ 
  ~dulla^@204~  "o)"
            Me._adapter.Update~dulla^@204~ ndType = System.Data.CommandType.Text~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Part~dulla^@204~ ata.SqlDbType.NVarChar, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "PartNo", System~dulla^@204~ Version.Current, false, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ me", System.Data.SqlDbType.[Char], 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Prod~dulla^@204~ tem.Data.DataRowVersion.Current, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Brand", System.Data.SqlDbType.~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~  System.Data.DataRowVersion.Current, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Origin", System.Data.SqlDb~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ igin", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@ShelfNo", System.Dat~dulla^@204~ VarChar, 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "ShelfNo", System.Data.DataRowV~dulla^@204~ t, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@ReorderLev~dulla^@204~ ata.SqlDbType.Int, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "ReorderLevel", Syste~dulla^@204~ wVersion.Current, false, Nothing, "",~dulla^@204~           Me._adapter.UpdateCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~ rice1", System.Data.SqlDbType.Float, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "Se~dulla^@204~  System.Data.DataRowVersion.Current, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@SellingPrice2", System.Dat~dulla^@204~ loat, 0, System.Data.ParameterDirecti~dulla^@204~ 0, "SellingPrice2", System.Data.DataR~dulla^@204~ rent, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.UpdateCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@NetWeig~dulla^@204~ ata.SqlDbType.Float, 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "NetWeight", System~dulla^@204~ Version.Current, false, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ PartNo", System.Data.SqlDbType.NVarCh~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ stem.Data.DataRowVersion.Original, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Original_ProductName", Syste~dulla^@204~ ype.[Char], 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "ProductName", System.Data.D~dulla^@204~ .Original, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.UpdateCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Or~dulla^@204~ , System.Data.SqlDbType.[Char], 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "Brand",~dulla^@204~ DataRowVersion.Original, false, Nothi~dulla^@204~ "))
            Me._adapter.UpdateCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ sNull_Origin", System.Data.SqlDbType.~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ ystem.Data.DataRowVersion.Original, t~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Origin", Sy~dulla^@204~ DbType.[Char], 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "Origin", System.Data.Dat~dulla^@204~ riginal, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Orig~dulla^@204~ , System.Data.SqlDbType.NVarChar, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Shelf~dulla^@204~ ata.DataRowVersion.Original, false, N~dulla^@204~ ", ""))
            Me._adapter.Upda~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@Original_ReorderLevel", System.Dat~dulla^@204~ nt, 0, System.Data.ParameterDirection~dulla^@204~  "ReorderLevel", System.Data.DataRowV~dulla^@204~ al, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.UpdateCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Original_~dulla^@204~ ", System.Data.SqlDbType.Float, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "Selling~dulla^@204~ em.Data.DataRowVersion.Original, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@IsNull_SellingPrice2", System.~dulla^@204~ e.Int, 0, System.Data.ParameterDirect~dulla^@204~  0, "SellingPrice2", System.Data.Data~dulla^@204~ iginal, true, Nothing, "", "", ""))
~dulla^@204~ e._adapter.UpdateCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@Origin~dulla^@204~ ce2", System.Data.SqlDbType.Float, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Sell~dulla^@204~ ystem.Data.DataRowVersion.Original, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@Original_NetWeight", System~dulla^@204~ pe.Float, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "NetWeight", System.Data.DataR~dulla^@204~ ginal, false, Nothing, "", "", ""))
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ itConnection()
            Me._conne~dulla^@204~ ystem.Data.SqlClient.SqlConnection
 ~dulla^@204~ ._connection.ConnectionString = Globa~dulla^@204~ ntrolSystem.My.MySettings.Default.Inv~dulla^@204~ SystemConnectionString
        End S~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Private Sub In~dulla^@204~ ection()
            Me._commandColl~dulla^@204~ System.Data.SqlClient.SqlCommand(0) {~dulla^@204~   Me._commandCollection(0) = New Syst~dulla^@204~ ient.SqlCommand
            Me._comm~dulla^@204~ (0).Connection = Me.Connection
     ~dulla^@204~ mmandCollection(0).CommandText = "SEL~dulla^@204~ roductName, Brand, Origin, ShelfNo, R~dulla^@204~ SellingPrice1, "& _ 
               ~dulla^@204~ e2, NetWeight FROM dbo.Products"
   ~dulla^@204~ commandCollection(0).CommandType = Sy~dulla^@204~ mandType.Text
        End Sub
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ ,  _
         System.ComponentModel.~dulla^@204~ ywordAttribute("vs.data.TableAdapter"~dulla^@204~    System.ComponentModel.DataObjectMe~dulla^@204~ (System.ComponentModel.DataObjectMeth~dulla^@204~ true)>  _
        Public Overloads O~dulla^@204~ nction Fill(ByVal dataTable As Invent~dulla^@204~ temDataSet.ProductsDataTable) As Inte~dulla^@204~     Me.Adapter.SelectCommand = Me.Com~dulla^@204~ n(0)
            If (Me.ClearBeforeF~dulla^@204~ hen
                dataTable.Clear~dulla^@204~ End If
            Dim returnValue A~dulla^@204~ e.Adapter.Fill(dataTable)
          ~dulla^@204~ rnValue
        End Function
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
         System.ComponentModel.D~dulla^@204~ wordAttribute("vs.data.TableAdapter")~dulla^@204~   System.ComponentModel.DataObjectMet~dulla^@204~ System.ComponentModel.DataObjectMetho~dulla^@204~ ], true)>  _
        Public Overload~dulla^@204~  Function GetData() As InventoryContr~dulla^@204~ et.ProductsDataTable
            Me.~dulla^@204~ tCommand = Me.CommandCollection(0)
 ~dulla^@204~ m dataTable As InventoryControlSystem~dulla^@204~ ctsDataTable = New InventoryControlSy~dulla^@204~ roductsDataTable
            Me.Adap~dulla^@204~ Table)
            Return dataTable~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute(),  _
   ~dulla^@204~ ComponentModel.Design.HelpKeywordAttr~dulla^@204~ a.TableAdapter")>  _
        Public ~dulla^@204~ rridable Function Update(ByVal dataTa~dulla^@204~ oryControlSystemDataSet.ProductsDataT~dulla^@204~ ger
            Return Me.Adapter.Up~dulla^@204~ e)
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~          System.ComponentModel.Design~dulla^@204~ ttribute("vs.data.TableAdapter")>  _~dulla^@204~ ic Overloads Overridable Function Upd~dulla^@204~ aSet As InventoryControlSystemDataSet~dulla^@204~ 
            Return Me.Adapter.Update~dulla^@204~ oducts")
        End Function
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ ,  _
         System.ComponentModel.~dulla^@204~ ywordAttribute("vs.data.TableAdapter"~dulla^@204~   Public Overloads Overridable Functi~dulla^@204~ al dataRow As System.Data.DataRow) As~dulla^@204~          Return Me.Adapter.Update(New~dulla^@204~ DataRow() {dataRow})
        End Fun~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute(),  _
         System.Com~dulla^@204~ esign.HelpKeywordAttribute("vs.data.T~dulla^@204~ >  _
        Public Overloads Overri~dulla^@204~ n Update(ByVal dataRows() As System.D~dulla^@204~ As Integer
            Return Me.Ada~dulla^@204~ ataRows)
        End Function
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ ,  _
         System.ComponentModel.~dulla^@204~ ywordAttribute("vs.data.TableAdapter"~dulla^@204~    System.ComponentModel.DataObjectMe~dulla^@204~ (System.ComponentModel.DataObjectMeth~dulla^@204~ , true)>  _
        Public Overloads~dulla^@204~ Function Delete(ByVal Original_PartNo~dulla^@204~ yVal Original_ProductName As String, ~dulla^@204~ l_Brand As String, ByVal Original_Ori~dulla^@204~ , ByVal Original_ShelfNo As String, B~dulla^@204~ _ReorderLevel As Integer, ByVal Origi~dulla^@204~ ice1 As Double, ByVal Original_Sellin~dulla^@204~ stem.Nullable(Of Double), ByVal Origi~dulla^@204~  As Double) As Integer
            I~dulla^@204~ artNo Is Nothing) Then
             ~dulla^@204~ System.ArgumentNullException("Origina~dulla^@204~            Else
                Me.A~dulla^@204~ Command.Parameters(0).Value = CType(O~dulla^@204~ o,String)
            End If
      ~dulla^@204~ ginal_ProductName Is Nothing) Then
 ~dulla^@204~   Throw New System.ArgumentNullExcept~dulla^@204~ _ProductName")
            Else
   ~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(1~dulla^@204~ pe(Original_ProductName,String)
    ~dulla^@204~ f
            If (Original_Brand Is ~dulla^@204~ 
                Throw New System.Ar~dulla^@204~ eption("Original_Brand")
           ~dulla^@204~           Me.Adapter.DeleteCommand.Pa~dulla^@204~ alue = CType(Original_Brand,String)
~dulla^@204~ nd If
            If (Original_Origi~dulla^@204~  Then
                Me.Adapter.Del~dulla^@204~ rameters(3).Value = CType(1,Object)
~dulla^@204~    Me.Adapter.DeleteCommand.Parameter~dulla^@204~ System.DBNull.Value
            Else~dulla^@204~      Me.Adapter.DeleteCommand.Paramet~dulla^@204~ = CType(0,Object)
                Me~dulla^@204~ teCommand.Parameters(4).Value = CType~dulla^@204~ gin,String)
            End If
    ~dulla^@204~ riginal_ShelfNo Is Nothing) Then
   ~dulla^@204~ Throw New System.ArgumentNullExceptio~dulla^@204~ helfNo")
            Else
         ~dulla^@204~ pter.DeleteCommand.Parameters(5).Valu~dulla^@204~ ginal_ShelfNo,String)
            En~dulla^@204~      Me.Adapter.DeleteCommand.Paramet~dulla^@204~ = CType(Original_ReorderLevel,Integer~dulla^@204~   Me.Adapter.DeleteCommand.Parameters~dulla^@204~ Type(Original_SellingPrice1,Double)
~dulla^@204~ f (Original_SellingPrice2.HasValue = ~dulla^@204~                Me.Adapter.DeleteComma~dulla^@204~ (8).Value = CType(0,Object)
        ~dulla^@204~ apter.DeleteCommand.Parameters(9).Value = CType(Original_SellingPrice2.Value,Do~dulla^@204~       Else
                Me.Adapte~dulla^@204~ nd.Parameters(8).Value = CType(1,Obje~dulla^@204~         Me.Adapter.DeleteCommand.Para~dulla^@204~ ue = System.DBNull.Value
           ~dulla^@204~         Me.Adapter.DeleteCommand.Para~dulla^@204~ lue = CType(Original_NetWeight,Double~dulla^@204~   Dim previousConnectionState As Syst~dulla^@204~ ctionState = Me.Adapter.DeleteCommand~dulla^@204~ tate
            If ((Me.Adapter.Del~dulla^@204~ nnection.State And System.Data.Connec~dulla^@204~ n)  _
                        <> Sys~dulla^@204~ ectionState.Open) Then
             ~dulla^@204~ .DeleteCommand.Connection.Open
     ~dulla^@204~ 
            Try 
                D~dulla^@204~ e As Integer = Me.Adapter.DeleteComma~dulla^@204~ Query
                Return returnV~dulla^@204~      Finally
                If (pre~dulla^@204~ onState = System.Data.ConnectionState~dulla^@204~ 
                    Me.Adapter.Dele~dulla^@204~ nection.Close
                End If~dulla^@204~  End Try
        End Function
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ ,  _
         System.ComponentModel.~dulla^@204~ ywordAttribute("vs.data.TableAdapter"~dulla^@204~    System.ComponentModel.DataObjectMe~dulla^@204~ (System.ComponentModel.DataObjectMeth~dulla^@204~ , true)>  _
        Public Overloads~dulla^@204~ Function Insert(ByVal PartNo As Strin~dulla^@204~ uctName As String, ByVal Brand As Str~dulla^@204~ igin As String, ByVal ShelfNo As Stri~dulla^@204~ rderLevel As Integer, ByVal SellingPr~dulla^@204~ e, ByVal SellingPrice2 As System.Null~dulla^@204~ e), ByVal NetWeight As Double) As Int~dulla^@204~      If (PartNo Is Nothing) Then
   ~dulla^@204~ Throw New System.ArgumentNullExceptio~dulla^@204~             Else
                Me.~dulla^@204~ tCommand.Parameters(0).Value = CType(~dulla^@204~ )
            End If
            If~dulla^@204~  Is Nothing) Then
                Th~dulla^@204~ m.ArgumentNullException("ProductName"~dulla^@204~   Else
                Me.Adapter.In~dulla^@204~ arameters(1).Value = CType(ProductNam~dulla^@204~           End If
            If (Bra~dulla^@204~ ) Then
                Throw New Sys~dulla^@204~ ullException("Brand")
            El~dulla^@204~        Me.Adapter.InsertCommand.Param~dulla^@204~ e = CType(Brand,String)
            ~dulla^@204~        If (Origin Is Nothing) Then
 ~dulla^@204~   Me.Adapter.InsertCommand.Parameters~dulla^@204~ ystem.DBNull.Value
            Else~dulla^@204~     Me.Adapter.InsertCommand.Paramete~dulla^@204~  CType(Origin,String)
            En~dulla^@204~      If (ShelfNo Is Nothing) Then
  ~dulla^@204~  Throw New System.ArgumentNullExcepti~dulla^@204~ 
            Else
                M~dulla^@204~ ertCommand.Parameters(4).Value = CTyp~dulla^@204~ ing)
            End If
           ~dulla^@204~ nsertCommand.Parameters(5).Value = CT~dulla^@204~ vel,Integer)
            Me.Adapter.~dulla^@204~ .Parameters(6).Value = CType(SellingP~dulla^@204~ 
            If (SellingPrice2.HasVa~dulla^@204~ hen
                Me.Adapter.Inser~dulla^@204~ meters(7).Value = CType(SellingPrice2~dulla^@204~ )
            Else
                ~dulla^@204~ sertCommand.Parameters(7).Value = Sys~dulla^@204~ lue
            End If
            ~dulla^@204~ sertCommand.Parameters(8).Value = CTy~dulla^@204~ Double)
            Dim previousConn~dulla^@204~ s System.Data.ConnectionState = Me.Ad~dulla^@204~ ommand.Connection.State
            ~dulla^@204~ er.InsertCommand.Connection.State And~dulla^@204~ ConnectionState.Open)  _
           ~dulla^@204~ <> System.Data.ConnectionState.Open) ~dulla^@204~          Me.Adapter.InsertCommand.Con~dulla^@204~ 
            End If
            Try ~dulla^@204~      Dim returnValue As Integer = Me.~dulla^@204~ tCommand.ExecuteNonQuery
           ~dulla^@204~ eturnValue
            Finally
    ~dulla^@204~ f (previousConnectionState = System.D~dulla^@204~ nState.Closed) Then
                ~dulla^@204~ r.InsertCommand.Connection.Close
   ~dulla^@204~ End If
            End Try
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute(),  _
         Sys~dulla^@204~ Model.Design.HelpKeywordAttribute("vs~dulla^@204~ apter"),  _
         System.Componen~dulla^@204~ jectMethodAttribute(System.ComponentM~dulla^@204~ ctMethodType.Update, true)>  _
     ~dulla^@204~ rloads Overridable Function Update( _~dulla^@204~          ByVal PartNo As String,  _
~dulla^@204~        ByVal ProductName As String,  ~dulla^@204~           ByVal Brand As String,  _
~dulla^@204~        ByVal Origin As String,  _
  ~dulla^@204~      ByVal ShelfNo As String,  _
   ~dulla^@204~     ByVal ReorderLevel As Integer,  _~dulla^@204~          ByVal SellingPrice1 As Doubl~dulla^@204~               ByVal SellingPrice2 As ~dulla^@204~ le(Of Double),  _
                  ~dulla^@204~ ight As Double,  _
                 ~dulla^@204~ inal_PartNo As String,  _
          ~dulla^@204~ al Original_ProductName As String,  _~dulla^@204~          ByVal Original_Brand As Stri~dulla^@204~                ByVal Original_Origin ~dulla^@204~ 
                    ByVal Original_~dulla^@204~ ring,  _
                    ByVal O~dulla^@204~ erLevel As Integer,  _
             ~dulla^@204~ Original_SellingPrice1 As Double,  _~dulla^@204~         ByVal Original_SellingPrice2 ~dulla^@204~ lable(Of Double),  _
               ~dulla^@204~ iginal_NetWeight As Double) As Intege~dulla^@204~   If (PartNo Is Nothing) Then
      ~dulla^@204~ ow New System.ArgumentNullException("~dulla^@204~          Else
                Me.Ada~dulla^@204~ mmand.Parameters(0).Value = CType(Par~dulla^@204~             End If
            If (P~dulla^@204~  Nothing) Then
                Throw~dulla^@204~ rgumentNullException("ProductName")
~dulla^@204~ lse
                Me.Adapter.Updat~dulla^@204~ meters(1).Value = CType(ProductName,S~dulla^@204~        End If
            If (Brand ~dulla^@204~ hen
                Throw New System~dulla^@204~ Exception("Brand")
            Else~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~  CType(Brand,String)
            End~dulla^@204~     If (Origin Is Nothing) Then
    ~dulla^@204~ e.Adapter.UpdateCommand.Parameters(3)~dulla^@204~ em.DBNull.Value
            Else
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ ype(Origin,String)
            End I~dulla^@204~   If (ShelfNo Is Nothing) Then
     ~dulla^@204~ row New System.ArgumentNullException(~dulla^@204~            Else
                Me.A~dulla^@204~ Command.Parameters(4).Value = CType(S~dulla^@204~ )
            End If
            Me~dulla^@204~ teCommand.Parameters(5).Value = CType~dulla^@204~ ,Integer)
            Me.Adapter.Upd~dulla^@204~ rameters(6).Value = CType(SellingPric~dulla^@204~            If (SellingPrice2.HasValue~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(7).Value = CType(SellingPrice2.Va~dulla^@204~             Else
                Me.~dulla^@204~ eCommand.Parameters(7).Value = System~dulla^@204~ 
            End If
            Me.~dulla^@204~ eCommand.Parameters(8).Value = CType(~dulla^@204~ ble)
            If (Original_PartNo~dulla^@204~ Then
                Throw New Syste~dulla^@204~ lException("Original_PartNo")
      ~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ (9).Value = CType(Original_PartNo,Str~dulla^@204~      End If
            If (Original~dulla^@204~ Is Nothing) Then
                Thr~dulla^@204~ .ArgumentNullException("Original_Prod~dulla^@204~           Else
                Me.Ad~dulla^@204~ ommand.Parameters(10).Value = CType(O~dulla^@204~ ctName,String)
            End If
 ~dulla^@204~  (Original_Brand Is Nothing) Then
  ~dulla^@204~  Throw New System.ArgumentNullExcepti~dulla^@204~ Brand")
            Else
          ~dulla^@204~ ter.UpdateCommand.Parameters(11).Valu~dulla^@204~ ginal_Brand,String)
            End ~dulla^@204~    If (Original_Origin Is Nothing) Th~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ ue = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).V~dulla^@204~ .DBNull.Value
            Else
    ~dulla^@204~ e.Adapter.UpdateCommand.Parameters(12~dulla^@204~ pe(0,Object)
                Me.Adap~dulla^@204~ mand.Parameters(13).Value = CType(Ori~dulla^@204~ String)
            End If
        ~dulla^@204~ nal_ShelfNo Is Nothing) Then
       ~dulla^@204~ w New System.ArgumentNullException("O~dulla^@204~ No")
            Else
             ~dulla^@204~ .UpdateCommand.Parameters(14).Value =~dulla^@204~ al_ShelfNo,String)
            End I~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ CType(Original_ReorderLevel,Integer)~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(1~dulla^@204~ ype(Original_SellingPrice1,Double)
 ~dulla^@204~  (Original_SellingPrice2.HasValue = t~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 17).Value = CType(0,Object)
        ~dulla^@204~ apter.UpdateCommand.Parameters(18).Va~dulla^@204~ riginal_SellingPrice2.Value,Double)
~dulla^@204~ lse
                Me.Adapter.Updat~dulla^@204~ meters(17).Value = CType(1,Object)
 ~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ System.DBNull.Value
            End ~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~  CType(Original_NetWeight,Double)
  ~dulla^@204~  previousConnectionState As System.Da~dulla^@204~ State = Me.Adapter.UpdateCommand.Conn~dulla^@204~ 
            If ((Me.Adapter.UpdateCo~dulla^@204~ ion.State And System.Data.ConnectionS~dulla^@204~ 
                        <> System.D~dulla^@204~ nState.Open) Then
                Me~dulla^@204~ teCommand.Connection.Open
          ~dulla^@204~          Try 
                Dim re~dulla^@204~ Integer = Me.Adapter.UpdateCommand.Ex~dulla^@204~ 
                Return returnValue~dulla^@204~ Finally
                If (previous~dulla^@204~ te = System.Data.ConnectionState.Clos~dulla^@204~                  Me.Adapter.UpdateCom~dulla^@204~ on.Close
                End If
   ~dulla^@204~ Try
        End Function
    End Cl~dulla^@204~   <System.CodeDom.Compiler.GeneratedC~dulla^@204~ "System.Data.Design.TypedDataSetGener~dulla^@204~ .0"),  _
     System.ComponentModel.~dulla^@204~ oryAttribute("code"),  _
     System~dulla^@204~ el.ToolboxItem(true),  _
     System~dulla^@204~ el.DataObjectAttribute(true),  _
   ~dulla^@204~ onentModel.DesignerAttribute("Microso~dulla^@204~ .DataSource.Design.TableAdapterDesign~dulla^@204~ .VSDesigner"& _ 
        ", Version=~dulla^@204~ ure=neutral, PublicKeyToken=b03f5f7f1~dulla^@204~ 
     System.ComponentModel.Design.H~dulla^@204~ ribute("vs.data.TableAdapter")>  _
 ~dulla^@204~ blic Class ProductsAvialableTableAdap~dulla^@204~ Inherits System.ComponentModel.Compon~dulla^@204~ 
        Private WithEvents _adapter~dulla^@204~ ta.SqlClient.SqlDataAdapter
        ~dulla^@204~ vate _connection As System.Data.SqlCl~dulla^@204~ ction
        
        Private _com~dulla^@204~ n() As System.Data.SqlClient.SqlComma~dulla^@204~ 
        Private _clearBeforeFill As ~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Su~dulla^@204~         MyBase.New
            Me.Cl~dulla^@204~  = true
        End Sub
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Private ReadOnly Property Ada~dulla^@204~ tem.Data.SqlClient.SqlDataAdapter
  ~dulla^@204~ 
                If (Me._adapter Is ~dulla^@204~ 
                    Me.InitAdapter~dulla^@204~     End If
                Return Me~dulla^@204~           End Get
        End Proper~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Friend Propert~dulla^@204~ ) As System.Data.SqlClient.SqlConnect~dulla^@204~     Get
                If (Me._conn~dulla^@204~ hing) Then
                    Me.In~dulla^@204~ 
                End If
            ~dulla^@204~ ._connection
            End Get
  ~dulla^@204~ 
                Me._connection = va~dulla^@204~         If (Not (Me.Adapter.InsertCom~dulla^@204~ ing) Then
                    Me.Ada~dulla^@204~ mmand.Connection = value
           ~dulla^@204~                 If (Not (Me.Adapter.D~dulla^@204~  Is Nothing) Then
                  ~dulla^@204~ DeleteCommand.Connection = value
   ~dulla^@204~ End If
                If (Not (Me.A~dulla^@204~ Command) Is Nothing) Then
          ~dulla^@204~ Adapter.UpdateCommand.Connection = va~dulla^@204~         End If
                Dim i~dulla^@204~  0
                Do While (i < Me.~dulla^@204~ tion.Length)
                    If ~dulla^@204~ andCollection(i)) Is Nothing) Then
 ~dulla^@204~           CType(Me.CommandCollection(~dulla^@204~ a.SqlClient.SqlCommand).Connection = ~dulla^@204~               End If
               ~dulla^@204~  1)
                Loop
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Protected ReadOnly Property Command~dulla^@204~ As System.Data.SqlClient.SqlCommand()~dulla^@204~  Get
                If (Me._command~dulla^@204~  Nothing) Then
                    M~dulla^@204~ Collection
                End If
 ~dulla^@204~   Return Me._commandCollection
     ~dulla^@204~ t
        End Property
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Property ClearBeforeFil~dulla^@204~ n
            Get
                R~dulla^@204~ arBeforeFill
            End Get
  ~dulla^@204~ 
                Me._clearBeforeFill~dulla^@204~          End Set
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Private Sub Ini~dulla^@204~            Me._adapter = New System.D~dulla^@204~ .SqlDataAdapter
            Dim tabl~dulla^@204~ ystem.Data.Common.DataTableMapping = ~dulla^@204~ ta.Common.DataTableMapping
         ~dulla^@204~ ng.SourceTable = "Table"
           ~dulla^@204~ .DataSetTable = "ProductsAvialable"
~dulla^@204~ ableMapping.ColumnMappings.Add("PartN~dulla^@204~ 
            tableMapping.ColumnMapp~dulla^@204~ InShop1", "QtyInShop1")
            ~dulla^@204~ ColumnMappings.Add("QtyInShop2", "Qty~dulla^@204~           tableMapping.ColumnMappings~dulla^@204~ ore", "QtyInStore")
            tabl~dulla^@204~ mnMappings.Add("TotalQty", "TotalQty"~dulla^@204~   tableMapping.ColumnMappings.Add("Am~dulla^@204~ t")
            Me._adapter.TableMap~dulla^@204~ leMapping)
            Me._adapter.D~dulla^@204~ = New System.Data.SqlClient.SqlComman~dulla^@204~   Me._adapter.DeleteCommand.Connectio~dulla^@204~ tion
            Me._adapter.DeleteC~dulla^@204~ dText = "DELETE FROM [dbo].[ProductsA~dulla^@204~ RE (([PartNo] = @Original_PartNo) AND~dulla^@204~              "QtyInShop1] = @Original~dulla^@204~ AND ([QtyInShop2] = @Original_QtyInSh~dulla^@204~ 
                "D ([QtyInStore] = @~dulla^@204~ nStore) AND ([TotalQty] = @Original_T~dulla^@204~  _ 
                "D ([Amount] = @~dulla^@204~ nt))"
            Me._adapter.Delete~dulla^@204~ ndType = System.Data.CommandType.Text~dulla^@204~  Me._adapter.DeleteCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Orig~dulla^@204~  System.Data.SqlDbType.NVarChar, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "PartNo~dulla^@204~ a.DataRowVersion.Original, false, Not~dulla^@204~  ""))
            Me._adapter.Delete~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @Original_QtyInShop1", System.Data.Sq~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ yInShop1", System.Data.DataRowVersion~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.DeleteCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@Original_QtyInS~dulla^@204~ .Data.SqlDbType.Int, 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "QtyInShop2", Syste~dulla^@204~ wVersion.Original, false, Nothing, ""~dulla^@204~            Me._adapter.DeleteCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ l_QtyInStore", System.Data.SqlDbType.~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ hing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@Original_TotalQ~dulla^@204~ ata.SqlDbType.Int, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "TotalQty", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.DeleteCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ ount", System.Data.SqlDbType.Int, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Amoun~dulla^@204~ ta.DataRowVersion.Original, false, No~dulla^@204~ , ""))
            Me._adapter.Inser~dulla^@204~ w System.Data.SqlClient.SqlCommand
 ~dulla^@204~ ._adapter.InsertCommand.Connection = ~dulla^@204~ 
            Me._adapter.InsertComma~dulla^@204~ t = "INSERT INTO [dbo].[ProductsAvial~dulla^@204~ o], [QtyInShop1], [QtyInShop2], [Qty"~dulla^@204~          "InStore], [TotalQty], [Amou~dulla^@204~ @PartNo, @QtyInShop1, @QtyInShop2, @Q~dulla^@204~              "nStore, @TotalQty, @Amo~dulla^@204~ .Microsoft.VisualBasic.ChrW(13)&Globa~dulla^@204~ isualBasic.ChrW(10)&"SELECT PartNo, Q~dulla^@204~ yInShop2, QtyInStore,"& _ 
         ~dulla^@204~ lQty, Amount FROM ProductsAvialable W~dulla^@204~ = @PartNo)"
            Me._adapter.~dulla^@204~ .CommandType = System.Data.CommandTyp~dulla^@204~        Me._adapter.InsertCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ stem.Data.SqlDbType.NVarChar, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "PartNo", ~dulla^@204~ ataRowVersion.Current, false, Nothing~dulla^@204~ )
            Me._adapter.InsertComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ InShop1", System.Data.SqlDbType.Int, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "Qt~dulla^@204~ stem.Data.DataRowVersion.Current, fal~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@QtyInShop2", System.Data.SqlD~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ nShop2", System.Data.DataRowVersion.C~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ nsertCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@QtyInStore", Syste~dulla^@204~ ype.Int, 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "QtyInStore", System.Data.DataR~dulla^@204~ rent, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.InsertCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@TotalQt~dulla^@204~ ta.SqlDbType.Int, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "TotalQty", System.Dat~dulla^@204~ ion.Current, false, Nothing, "", "", ~dulla^@204~      Me._adapter.InsertCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ em.Data.SqlDbType.Int, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "Amount", System.~dulla^@204~ ersion.Current, false, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand = N~dulla^@204~ a.SqlClient.SqlCommand
            M~dulla^@204~ dateCommand.Connection = Me.Connectio~dulla^@204~   Me._adapter.UpdateCommand.CommandTe~dulla^@204~ [dbo].[ProductsAvialable] SET [PartNo~dulla^@204~ [QtyInShop1] = @QtyInSho"& _ 
      ~dulla^@204~ , [QtyInShop2] = @QtyInShop2, [QtyInS~dulla^@204~ nStore, [TotalQty] = @TotalQ"& _ 
  ~dulla^@204~  "ty, [Amount] = @Amount WHERE (([Par~dulla^@204~ nal_PartNo) AND ([QtyInShop1] = "& _ ~dulla^@204~      "@Original_QtyInShop1) AND ([Qty~dulla^@204~ riginal_QtyInShop2) AND ([QtyInStore"~dulla^@204~          "] = @Original_QtyInStore) A~dulla^@204~ ] = @Original_TotalQty) AND ([Amount]~dulla^@204~              "@Original_Amount));"&Gl~dulla^@204~ t.VisualBasic.ChrW(13)&Global.Microso~dulla^@204~ c.ChrW(10)&"SELECT PartNo, QtyInShop1~dulla^@204~  QtyInStore, TotalQty"& _ 
         ~dulla^@204~ unt FROM ProductsAvialable WHERE (Par~dulla^@204~ )"
            Me._adapter.UpdateCom~dulla^@204~ ype = System.Data.CommandType.Text
 ~dulla^@204~ ._adapter.UpdateCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@PartNo"~dulla^@204~ .SqlDbType.NVarChar, 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "PartNo", System.Da~dulla^@204~ sion.Current, false, Nothing, "", "",~dulla^@204~       Me._adapter.UpdateCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~  System.Data.SqlDbType.Int, 0, System~dulla^@204~ erDirection.Input, 0, 0, "QtyInShop1"~dulla^@204~ .DataRowVersion.Current, false, Nothi~dulla^@204~ "))
            Me._adapter.UpdateCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ tyInShop2", System.Data.SqlDbType.Int~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ System.Data.DataRowVersion.Current, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@QtyInStore", System.Data.Sq~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ yInStore", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@TotalQty", Syste~dulla^@204~ ype.Int, 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "TotalQty", System.Data.DataRow~dulla^@204~ nt, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.UpdateCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Amount", ~dulla^@204~ qlDbType.Int, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "Amount", System.Data.Data~dulla^@204~ rrent, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.UpdateCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@Origin~dulla^@204~ ystem.Data.SqlDbType.NVarChar, 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "PartNo",~dulla^@204~ DataRowVersion.Original, false, Nothi~dulla^@204~ "))
            Me._adapter.UpdateCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ riginal_QtyInShop1", System.Data.SqlD~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ nShop1", System.Data.DataRowVersion.O~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ UpdateCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@Original_QtyInSho~dulla^@204~ ata.SqlDbType.Int, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "QtyInShop2", System.~dulla^@204~ ersion.Original, false, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ QtyInStore", System.Data.SqlDbType.In~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@Original_TotalQty", Syste~dulla^@204~ ype.Int, 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "TotalQty", System.Data.DataRow~dulla^@204~ nal, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.UpdateCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@Original~dulla^@204~ tem.Data.SqlDbType.Int, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "Amount", System~dulla^@204~ Version.Original, false, Nothing, "",~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ vate Sub InitConnection()
          ~dulla^@204~ ion = New System.Data.SqlClient.SqlCo~dulla^@204~          Me._connection.ConnectionStr~dulla^@204~ InventoryControlSystem.My.MySettings.~dulla^@204~ toryControlSystemConnectionString
  ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pri~dulla^@204~ CommandCollection()
            Me._~dulla^@204~ tion = New System.Data.SqlClient.SqlC~dulla^@204~ 
            Me._commandCollection(0)~dulla^@204~ .Data.SqlClient.SqlCommand
         ~dulla^@204~ dCollection(0).Connection = Me.Connec~dulla^@204~      Me._commandCollection(0).Command~dulla^@204~ T PartNo, QtyInShop1, QtyInShop2, Qty~dulla^@204~ lQty, Amount FROM dbo.Prod"& _ 
    ~dulla^@204~ uctsAvialable"
            Me._comma~dulla^@204~ 0).CommandType = System.Data.CommandT~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ tem.ComponentModel.Design.HelpKeyword~dulla^@204~ .data.TableAdapter"),  _
         Sy~dulla^@204~ tModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fil~dulla^@204~ 
        Public Overloads Overridable~dulla^@204~ l(ByVal dataTable As InventoryControl~dulla^@204~ .ProductsAvialableDataTable) As Integ~dulla^@204~    Me.Adapter.SelectCommand = Me.Comm~dulla^@204~ (0)
            If (Me.ClearBeforeFi~dulla^@204~ en
                dataTable.Clear
~dulla^@204~ nd If
            Dim returnValue As~dulla^@204~ .Adapter.Fill(dataTable)
           ~dulla^@204~ nValue
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
         System.ComponentModel.De~dulla^@204~ ordAttribute("vs.data.TableAdapter"),~dulla^@204~  System.ComponentModel.DataObjectMeth~dulla^@204~ ystem.ComponentModel.DataObjectMethod~dulla^@204~ , true)>  _
        Public Overloads~dulla^@204~ Function GetData() As InventoryContro~dulla^@204~ t.ProductsAvialableDataTable
       ~dulla^@204~ er.SelectCommand = Me.CommandCollecti~dulla^@204~       Dim dataTable As InventoryContr~dulla^@204~ et.ProductsAvialableDataTable = New I~dulla^@204~ olSystemDataSet.ProductsAvialableData~dulla^@204~       Me.Adapter.Fill(dataTable)
   ~dulla^@204~ rn dataTable
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te(),  _
         System.ComponentMo~dulla^@204~ lpKeywordAttribute("vs.data.TableAdap~dulla^@204~       Public Overloads Overridable Fu~dulla^@204~ (ByVal dataTable As InventoryControlS~dulla^@204~ ProductsAvialableDataTable) As Intege~dulla^@204~   Return Me.Adapter.Update(dataTable)~dulla^@204~  Function
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute(),  _
  ~dulla^@204~ .ComponentModel.Design.HelpKeywordAtt~dulla^@204~ ta.TableAdapter")>  _
        Public~dulla^@204~ erridable Function Update(ByVal dataS~dulla^@204~ ryControlSystemDataSet) As Integer
 ~dulla^@204~ turn Me.Adapter.Update(dataSet, "Prod~dulla^@204~ ")
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~          System.ComponentModel.Design~dulla^@204~ ttribute("vs.data.TableAdapter")>  _~dulla^@204~ ic Overloads Overridable Function Upd~dulla^@204~ aRow As System.Data.DataRow) As Integ~dulla^@204~    Return Me.Adapter.Update(New Syste~dulla^@204~ w() {dataRow})
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute(),  _
         System.Component~dulla^@204~ HelpKeywordAttribute("vs.data.TableAd~dulla^@204~         Public Overloads Overridable ~dulla^@204~ te(ByVal dataRows() As System.Data.Da~dulla^@204~ eger
            Return Me.Adapter.U~dulla^@204~ s)
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~          System.ComponentModel.Design~dulla^@204~ ttribute("vs.data.TableAdapter"),  _~dulla^@204~ tem.ComponentModel.DataObjectMethodAt~dulla^@204~ m.ComponentModel.DataObjectMethodType~dulla^@204~ )>  _
        Public Overloads Overr~dulla^@204~ on Delete(ByVal Original_PartNo As St~dulla^@204~ riginal_QtyInShop1 As Integer, ByVal ~dulla^@204~ nShop2 As Integer, ByVal Original_Qty~dulla^@204~ teger, ByVal Original_TotalQty As Int~dulla^@204~ riginal_Amount As Integer) As Integer~dulla^@204~  If (Original_PartNo Is Nothing) Then~dulla^@204~      Throw New System.ArgumentNullExc~dulla^@204~ nal_PartNo")
            Else
     ~dulla^@204~ .Adapter.DeleteCommand.Parameters(0).~dulla^@204~ (Original_PartNo,String)
           ~dulla^@204~         Me.Adapter.DeleteCommand.Para~dulla^@204~ ue = CType(Original_QtyInShop1,Intege~dulla^@204~    Me.Adapter.DeleteCommand.Parameter~dulla^@204~ CType(Original_QtyInShop2,Integer)
 ~dulla^@204~ .Adapter.DeleteCommand.Parameters(3).~dulla^@204~ (Original_QtyInStore,Integer)
      ~dulla^@204~ ter.DeleteCommand.Parameters(4).Value~dulla^@204~ inal_TotalQty,Integer)
            M~dulla^@204~ eteCommand.Parameters(5).Value = CTyp~dulla^@204~ ount,Integer)
            Dim previo~dulla^@204~ tate As System.Data.ConnectionState =~dulla^@204~ eleteCommand.Connection.State
      ~dulla^@204~ .Adapter.DeleteCommand.Connection.Sta~dulla^@204~ .Data.ConnectionState.Open)  _
     ~dulla^@204~       <> System.Data.ConnectionState.~dulla^@204~                Me.Adapter.DeleteComma~dulla^@204~ .Open
            End If
          ~dulla^@204~            Dim returnValue As Integer~dulla^@204~ .DeleteCommand.ExecuteNonQuery
     ~dulla^@204~ turn returnValue
            Finally~dulla^@204~      If (previousConnectionState = Sy~dulla^@204~ nectionState.Closed) Then
          ~dulla^@204~ Adapter.DeleteCommand.Connection.Clos~dulla^@204~       End If
            End Try
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute(),  _
      ~dulla^@204~ ponentModel.Design.HelpKeywordAttribu~dulla^@204~ ableAdapter"),  _
         System.Co~dulla^@204~ DataObjectMethodAttribute(System.Comp~dulla^@204~ taObjectMethodType.Insert, true)>  _~dulla^@204~ ic Overloads Overridable Function Ins~dulla^@204~ tNo As String, ByVal QtyInShop1 As In~dulla^@204~ QtyInShop2 As Integer, ByVal QtyInSto~dulla^@204~ , ByVal TotalQty As Integer, ByVal Am~dulla^@204~ er) As Integer
            If (PartN~dulla^@204~  Then
                Throw New Syst~dulla^@204~ llException("PartNo")
            El~dulla^@204~        Me.Adapter.InsertCommand.Param~dulla^@204~ e = CType(PartNo,String)
           ~dulla^@204~         Me.Adapter.InsertCommand.Para~dulla^@204~ ue = CType(QtyInShop1,Integer)
     ~dulla^@204~ pter.InsertCommand.Parameters(2).Valu~dulla^@204~ InShop2,Integer)
            Me.Adap~dulla^@204~ mand.Parameters(3).Value = CType(QtyI~dulla^@204~ r)
            Me.Adapter.InsertComm~dulla^@204~ s(4).Value = CType(TotalQty,Integer)~dulla^@204~ Me.Adapter.InsertCommand.Parameters(5~dulla^@204~ pe(Amount,Integer)
            Dim p~dulla^@204~ tionState As System.Data.ConnectionSt~dulla^@204~ ter.InsertCommand.Connection.State
 ~dulla^@204~  ((Me.Adapter.InsertCommand.Connectio~dulla^@204~ ystem.Data.ConnectionState.Open)  _
~dulla^@204~            <> System.Data.ConnectionS~dulla^@204~ en
                Me.Adapter.Insert~dulla^@204~ ction.Open
            End If
     ~dulla^@204~                 Dim returnValue As In~dulla^@204~ apter.InsertCommand.ExecuteNonQuery
~dulla^@204~    Return returnValue
            Fi~dulla^@204~           If (previousConnectionState~dulla^@204~ a.ConnectionState.Closed) Then
     ~dulla^@204~   Me.Adapter.InsertCommand.Connection~dulla^@204~            End If
            End Tr~dulla^@204~ d Function
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute(),  _
 ~dulla^@204~ m.ComponentModel.Design.HelpKeywordAt~dulla^@204~ ata.TableAdapter"),  _
         Syst~dulla^@204~ odel.DataObjectMethodAttribute(System~dulla^@204~ el.DataObjectMethodType.Update, true)~dulla^@204~  Public Overloads Overridable Functio~dulla^@204~ l PartNo As String, ByVal QtyInShop1 ~dulla^@204~ yVal QtyInShop2 As Integer, ByVal Qty~dulla^@204~ teger, ByVal TotalQty As Integer, ByV~dulla^@204~ Integer, ByVal Original_PartNo As Str~dulla^@204~ iginal_QtyInShop1 As Integer, ByVal O~dulla^@204~ Shop2 As Integer, ByVal Original_QtyI~dulla^@204~ eger, ByVal Original_TotalQty As Inte~dulla^@204~ iginal_Amount As Integer) As Integer~dulla^@204~ If (PartNo Is Nothing) Then
        ~dulla^@204~  New System.ArgumentNullException("Pa~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(0).Value = CType(PartN~dulla^@204~           End If
            Me.Adap~dulla^@204~ mand.Parameters(1).Value = CType(QtyI~dulla^@204~ r)
            Me.Adapter.UpdateComm~dulla^@204~ s(2).Value = CType(QtyInShop2,Integer~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ Type(QtyInStore,Integer)
           ~dulla^@204~ pdateCommand.Parameters(4).Value = CT~dulla^@204~ Integer)
            Me.Adapter.Upda~dulla^@204~ ameters(5).Value = CType(Amount,Integ~dulla^@204~     If (Original_PartNo Is Nothing) T~dulla^@204~         Throw New System.ArgumentNull~dulla^@204~ iginal_PartNo")
            Else
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ ype(Original_PartNo,String)
            End If
            Me.Adapter.UpdateC~dulla^@204~ ters(7).Value = CType(Original_QtyInS~dulla^@204~ 
            Me.Adapter.UpdateComman~dulla^@204~ 8).Value = CType(Original_QtyInShop2,~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ lue = CType(Original_QtyInStore,Integ~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~ = CType(Original_TotalQty,Integer)
 ~dulla^@204~ .Adapter.UpdateCommand.Parameters(11)~dulla^@204~ e(Original_Amount,Integer)
         ~dulla^@204~ usConnectionState As System.Data.Conn~dulla^@204~  Me.Adapter.UpdateCommand.Connection.~dulla^@204~       If ((Me.Adapter.UpdateCommand.C~dulla^@204~ te And System.Data.ConnectionState.Op~dulla^@204~                    <> System.Data.Con~dulla^@204~ Open) Then
                Me.Adapte~dulla^@204~ nd.Connection.Open
            End I~dulla^@204~   Try 
                Dim returnVal~dulla^@204~  = Me.Adapter.UpdateCommand.ExecuteNo~dulla^@204~            Return returnValue
      ~dulla^@204~ 
                If (previousConnect~dulla^@204~ stem.Data.ConnectionState.Closed) The~dulla^@204~           Me.Adapter.UpdateCommand.Co~dulla^@204~ e
                End If
          ~dulla^@204~       End Function
    End Class
  ~dulla^@204~ em.CodeDom.Compiler.GeneratedCodeAttr~dulla^@204~ .Data.Design.TypedDataSetGenerator", ~dulla^@204~ _
     System.ComponentModel.Designe~dulla^@204~ ibute("code"),  _
     System.Compon~dulla^@204~ boxItem(true),  _
     System.Compon~dulla^@204~ ObjectAttribute(true),  _
     Syste~dulla^@204~ del.DesignerAttribute("Microsoft.VSDe~dulla^@204~ urce.Design.TableAdapterDesigner, Mic~dulla^@204~ gner"& _ 
        ", Version=8.0.0.0~dulla^@204~ tral, PublicKeyToken=b03f5f7f11d50a3a~dulla^@204~ System.ComponentModel.Design.HelpKeyw~dulla^@204~ "vs.data.TableAdapter")>  _
    Part~dulla^@204~ ass PurchaseTableAdapter
        Inh~dulla^@204~ ComponentModel.Component
        
 ~dulla^@204~ e WithEvents _adapter As System.Data.~dulla^@204~ DataAdapter
        
        Privat~dulla^@204~  As System.Data.SqlClient.SqlConnecti~dulla^@204~ 
        Private _commandCollection()~dulla^@204~ ta.SqlClient.SqlCommand
        
  ~dulla^@204~  _clearBeforeFill As Boolean
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Sub New()
       ~dulla^@204~ ew
            Me.ClearBeforeFill = ~dulla^@204~  End Sub
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ ReadOnly Property Adapter() As System~dulla^@204~ nt.SqlDataAdapter
            Get
 ~dulla^@204~   If (Me._adapter Is Nothing) Then
 ~dulla^@204~       Me.InitAdapter
               ~dulla^@204~             Return Me._adapter
     ~dulla^@204~ t
        End Property
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Friend Property Connection() A~dulla^@204~ .SqlClient.SqlConnection
           ~dulla^@204~          If (Me._connection Is Nothin~dulla^@204~                 Me.InitConnection
  ~dulla^@204~  End If
                Return Me._c~dulla^@204~           End Get
            Set
 ~dulla^@204~   Me._connection = value
           ~dulla^@204~ (Me.Adapter.InsertCommand) Is Nothing~dulla^@204~                Me.Adapter.InsertComma~dulla^@204~  = value
                End If
   ~dulla^@204~ If (Not (Me.Adapter.DeleteCommand) Is~dulla^@204~ n
                    Me.Adapter.Del~dulla^@204~ nnection = value
                End~dulla^@204~         If (Not (Me.Adapter.UpdateCom~dulla^@204~ ing) Then
                    Me.Ada~dulla^@204~ mmand.Connection = value
           ~dulla^@204~                 Dim i As Integer = 0~dulla^@204~     Do While (i < Me.CommandCollectio~dulla^@204~                   If (Not (Me.Command~dulla^@204~ ) Is Nothing) Then
                 ~dulla^@204~ Me.CommandCollection(i),System.Data.S~dulla^@204~ ommand).Connection = value
         ~dulla^@204~ d If
                    i = (i + 1)~dulla^@204~      Loop
            End Set
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ Only Property CommandCollection() As ~dulla^@204~ qlClient.SqlCommand()
            Ge~dulla^@204~       If (Me._commandCollection Is No~dulla^@204~                     Me.InitCommandCol~dulla^@204~             End If
                R~dulla^@204~ mandCollection
            End Get
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ operty ClearBeforeFill() As Boolean
~dulla^@204~ et
                Return Me._clearB~dulla^@204~           End Get
            Set
 ~dulla^@204~   Me._clearBeforeFill = value
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Private Sub InitAdapter()
    ~dulla^@204~ dapter = New System.Data.SqlClient.Sq~dulla^@204~ 
            Dim tableMapping As Syst~dulla^@204~ n.DataTableMapping = New System.Data.~dulla^@204~ bleMapping
            tableMapping.~dulla^@204~  "Table"
            tableMapping.Da~dulla^@204~ "Purchase"
            tableMapping.~dulla^@204~ s.Add("SupplierID", "SupplierID")
  ~dulla^@204~ leMapping.ColumnMappings.Add("Invoice~dulla^@204~ No")
            Me._adapter.TableMa~dulla^@204~ bleMapping)
            Me._adapter.~dulla^@204~  = New System.Data.SqlClient.SqlComma~dulla^@204~    Me._adapter.DeleteCommand.Connecti~dulla^@204~ ction
            Me._adapter.Delete~dulla^@204~ ndText = "DELETE FROM [dbo].[Purchase~dulla^@204~ pplierID] = @Original_SupplierID) AND~dulla^@204~               "nvoiceNo] = @Original_~dulla^@204~ 
            Me._adapter.DeleteComman~dulla^@204~  = System.Data.CommandType.Text
    ~dulla^@204~ dapter.DeleteCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@Original_S~dulla^@204~ ystem.Data.SqlDbType.NVarChar, 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "Supplier~dulla^@204~ ata.DataRowVersion.Original, false, N~dulla^@204~ ", ""))
            Me._adapter.Dele~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@Original_InvoiceNo", System.Data.S~dulla^@204~ Char, 0, System.Data.ParameterDirecti~dulla^@204~ 0, "InvoiceNo", System.Data.DataRowVe~dulla^@204~ l, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.InsertCommand = New System.Dat~dulla^@204~ qlCommand
            Me._adapter.In~dulla^@204~ onnection = Me.Connection
          ~dulla^@204~ .InsertCommand.CommandText = "INSERT ~dulla^@204~ urchase] ([SupplierID], [InvoiceNo]) ~dulla^@204~ lierID, @In"& _ 
                "vo~dulla^@204~ al.Microsoft.VisualBasic.ChrW(13)&Glo~dulla^@204~ .VisualBasic.ChrW(10)&"SELECT Supplie~dulla^@204~ o FROM Purchase WHERE (InvoiceNo = @I~dulla^@204~                "eNo) AND (SupplierID ~dulla^@204~ )"
            Me._adapter.InsertCom~dulla^@204~ ype = System.Data.CommandType.Text
 ~dulla^@204~ ._adapter.InsertCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Supplie~dulla^@204~ Data.SqlDbType.NVarChar, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "SupplierID", S~dulla^@204~ taRowVersion.Current, false, Nothing,~dulla^@204~ 
            Me._adapter.InsertComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ iceNo", System.Data.SqlDbType.NVarCha~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ System.Data.DataRowVersion.Current, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and = New System.Data.SqlClient.SqlCo~dulla^@204~       Me._adapter.UpdateCommand.Conne~dulla^@204~ nnection
            Me._adapter.Upd~dulla^@204~ mmandText = "UPDATE [dbo].[Purchase] ~dulla^@204~ ID] = @SupplierID, [InvoiceNo] = @Inv~dulla^@204~ 
                "WHERE (([SupplierID~dulla^@204~ _SupplierID) AND ([InvoiceNo] = @Orig~dulla^@204~  _ 
                "eNo));"&Global.~dulla^@204~ ualBasic.ChrW(13)&Global.Microsoft.Vi~dulla^@204~ W(10)&"SELECT SupplierID, InvoiceNo F~dulla^@204~ WHERE (InvoiceNo = @InvoiceNo"& _ 
 ~dulla^@204~   ") AND (SupplierID = @SupplierID)"~dulla^@204~ Me._adapter.UpdateCommand.CommandType~dulla^@204~ a.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@SupplierID", Sy~dulla^@204~ DbType.NVarChar, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "SupplierID", System.Da~dulla^@204~ sion.Current, false, Nothing, "", "",~dulla^@204~       Me._adapter.UpdateCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ System.Data.SqlDbType.NVarChar, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "Invoice~dulla^@204~ ata.DataRowVersion.Current, false, No~dulla^@204~ , ""))
            Me._adapter.Updat~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@Original_SupplierID", System.Data.S~dulla^@204~ Char, 0, System.Data.ParameterDirecti~dulla^@204~ 0, "SupplierID", System.Data.DataRowV~dulla^@204~ al, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.UpdateCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Original_~dulla^@204~ ystem.Data.SqlDbType.NVarChar, 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "InvoiceN~dulla^@204~ ta.DataRowVersion.Original, false, No~dulla^@204~ , ""))
        End Sub
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Private Sub InitConnection()
~dulla^@204~ e._connection = New System.Data.SqlCl~dulla^@204~ ction
            Me._connection.Con~dulla^@204~  = Global.InventoryControlSystem.My.M~dulla^@204~ ault.InventoryControlSystemConnection~dulla^@204~    End Sub
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~ e Sub InitCommandCollection()
      ~dulla^@204~ mandCollection = New System.Data.SqlC~dulla^@204~ and(0) {}
            Me._commandCol~dulla^@204~ New System.Data.SqlClient.SqlCommand~dulla^@204~ Me._commandCollection(0).Connection =~dulla^@204~ n
            Me._commandCollection(~dulla^@204~ t = "SELECT SupplierID, InvoiceNo FRO~dulla^@204~ e"
            Me._commandCollection~dulla^@204~ pe = System.Data.CommandType.Text
  ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute(),  _
         Sy~dulla^@204~ tModel.Design.HelpKeywordAttribute("v~dulla^@204~ dapter"),  _
         System.Compone~dulla^@204~ bjectMethodAttribute(System.Component~dulla^@204~ ectMethodType.Fill, true)>  _
      ~dulla^@204~ loads Overridable Function Fill(ByVal~dulla^@204~  InventoryControlSystemDataSet.Purcha~dulla^@204~ As Integer
            Me.Adapter.Se~dulla^@204~  Me.CommandCollection(0)
           ~dulla^@204~ BeforeFill = true) Then
            ~dulla^@204~ .Clear
            End If
         ~dulla^@204~ Value As Integer = Me.Adapter.Fill(da~dulla^@204~          Return returnValue
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute(),  _
         Sys~dulla^@204~ Model.Design.HelpKeywordAttribute("vs~dulla^@204~ apter"),  _
         System.Componen~dulla^@204~ jectMethodAttribute(System.ComponentM~dulla^@204~ ctMethodType.[Select], true)>  _
   ~dulla^@204~ verloads Overridable Function GetData~dulla^@204~ ryControlSystemDataSet.PurchaseDataTa~dulla^@204~     Me.Adapter.SelectCommand = Me.Com~dulla^@204~ n(0)
            Dim dataTable As In~dulla^@204~ lSystemDataSet.PurchaseDataTable = Ne~dulla^@204~ ntrolSystemDataSet.PurchaseDataTable~dulla^@204~ Me.Adapter.Fill(dataTable)
         ~dulla^@204~ aTable
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
         System.ComponentModel.De~dulla^@204~ ordAttribute("vs.data.TableAdapter")>~dulla^@204~ Public Overloads Overridable Function~dulla^@204~  dataTable As InventoryControlSystemD~dulla^@204~ seDataTable) As Integer
            ~dulla^@204~ pter.Update(dataTable)
        End F~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute(),  _
         System.C~dulla^@204~ .Design.HelpKeywordAttribute("vs.data~dulla^@204~ ")>  _
        Public Overloads Over~dulla^@204~ ion Update(ByVal dataSet As Inventory~dulla^@204~ DataSet) As Integer
            Retu~dulla^@204~ .Update(dataSet, "Purchase")
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute(),  _
         Sy~dulla^@204~ tModel.Design.HelpKeywordAttribute("v~dulla^@204~ dapter")>  _
        Public Overload~dulla^@204~  Function Update(ByVal dataRow As Sys~dulla^@204~ Row) As Integer
            Return M~dulla^@204~ ate(New System.Data.DataRow() {dataRo~dulla^@204~ End Function
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ tem.ComponentModel.Design.HelpKeyword~dulla^@204~ .data.TableAdapter")>  _
        Pub~dulla^@204~  Overridable Function Update(ByVal da~dulla^@204~ ystem.Data.DataRow) As Integer
     ~dulla^@204~  Me.Adapter.Update(dataRows)
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute(),  _
         Sy~dulla^@204~ tModel.Design.HelpKeywordAttribute("v~dulla^@204~ dapter"),  _
         System.Compone~dulla^@204~ bjectMethodAttribute(System.Component~dulla^@204~ ectMethodType.Delete, true)>  _
    ~dulla^@204~ erloads Overridable Function Delete(B~dulla^@204~ _SupplierID As String, ByVal Original~dulla^@204~  String) As Integer
            If (~dulla^@204~ lierID Is Nothing) Then
            ~dulla^@204~  System.ArgumentNullException("Origin~dulla^@204~ ")
            Else
               ~dulla^@204~ eleteCommand.Parameters(0).Value = CT~dulla^@204~ SupplierID,String)
            End I~dulla^@204~   If (Original_InvoiceNo Is Nothing) ~dulla^@204~          Throw New System.ArgumentNul~dulla^@204~ riginal_InvoiceNo")
            Else~dulla^@204~      Me.Adapter.DeleteCommand.Paramet~dulla^@204~ = CType(Original_InvoiceNo,String)
 ~dulla^@204~ d If
            Dim previousConnect~dulla^@204~ ystem.Data.ConnectionState = Me.Adapt~dulla^@204~ and.Connection.State
            If ~dulla^@204~ DeleteCommand.Connection.State And Sy~dulla^@204~ nectionState.Open)  _
              ~dulla^@204~ System.Data.ConnectionState.Open) The~dulla^@204~       Me.Adapter.DeleteCommand.Connec~dulla^@204~           End If
            Try 
 ~dulla^@204~   Dim returnValue As Integer = Me.Ada~dulla^@204~ mmand.ExecuteNonQuery
              ~dulla^@204~ rnValue
            Finally
       ~dulla^@204~ previousConnectionState = System.Data~dulla^@204~ ate.Closed) Then
                   ~dulla^@204~ eleteCommand.Connection.Close
      ~dulla^@204~  If
            End Try
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute(),  _
         System~dulla^@204~ el.Design.HelpKeywordAttribute("vs.da~dulla^@204~ er"),  _
         System.ComponentMo~dulla^@204~ tMethodAttribute(System.ComponentMode~dulla^@204~ ethodType.Insert, true)>  _
        ~dulla^@204~ ads Overridable Function Insert(ByVal~dulla^@204~ s String, ByVal InvoiceNo As String) ~dulla^@204~            If (SupplierID Is Nothing)~dulla^@204~           Throw New System.ArgumentNu~dulla^@204~ SupplierID")
            Else
     ~dulla^@204~ .Adapter.InsertCommand.Parameters(0).~dulla^@204~ (SupplierID,String)
            End ~dulla^@204~    If (InvoiceNo Is Nothing) Then
  ~dulla^@204~  Throw New System.ArgumentNullExcepti~dulla^@204~ ")
            Else
               ~dulla^@204~ nsertCommand.Parameters(1).Value = CT~dulla^@204~ ,String)
            End If
       ~dulla^@204~ iousConnectionState As System.Data.Co~dulla^@204~  = Me.Adapter.InsertCommand.Connectio~dulla^@204~         If ((Me.Adapter.InsertCommand~dulla^@204~ tate And System.Data.ConnectionState.~dulla^@204~                      <> System.Data.C~dulla^@204~ e.Open) Then
                Me.Adap~dulla^@204~ mand.Connection.Open
            End~dulla^@204~     Try 
                Dim returnV~dulla^@204~ er = Me.Adapter.InsertCommand.Execute~dulla^@204~              Return returnValue
    ~dulla^@204~ ly
                If (previousConne~dulla^@204~ System.Data.ConnectionState.Closed) T~dulla^@204~             Me.Adapter.InsertCommand.~dulla^@204~ ose
                End If
        ~dulla^@204~         End Function
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~      System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),~dulla^@204~  System.ComponentModel.DataObjectMeth~dulla^@204~ ystem.ComponentModel.DataObjectMethod~dulla^@204~ true)>  _
        Public Overloads O~dulla^@204~ nction Update(ByVal SupplierID As Str~dulla^@204~ voiceNo As String, ByVal Original_Sup~dulla^@204~ ring, ByVal Original_InvoiceNo As Str~dulla^@204~ er
            If (SupplierID Is Not~dulla^@204~                Throw New System.Argum~dulla^@204~ ion("SupplierID")
            Else
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~ CType(SupplierID,String)
           ~dulla^@204~         If (InvoiceNo Is Nothing) The~dulla^@204~       Throw New System.ArgumentNullEx~dulla^@204~ iceNo")
            Else
          ~dulla^@204~ ter.UpdateCommand.Parameters(1).Value~dulla^@204~ iceNo,String)
            End If
  ~dulla^@204~ (Original_SupplierID Is Nothing) Then~dulla^@204~      Throw New System.ArgumentNullExc~dulla^@204~ nal_SupplierID")
            Else
 ~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ Type(Original_SupplierID,String)
   ~dulla^@204~ If
            If (Original_InvoiceN~dulla^@204~  Then
                Throw New Syst~dulla^@204~ llException("Original_InvoiceNo")
  ~dulla^@204~ e
                Me.Adapter.UpdateC~dulla^@204~ ters(3).Value = CType(Original_Invoic~dulla^@204~             End If
            Dim p~dulla^@204~ tionState As System.Data.ConnectionSt~dulla^@204~ ter.UpdateCommand.Connection.State
 ~dulla^@204~  ((Me.Adapter.UpdateCommand.Connectio~dulla^@204~ ystem.Data.ConnectionState.Open)  _
~dulla^@204~            <> System.Data.ConnectionS~dulla^@204~ en
                Me.Adapter.Update~dulla^@204~ ction.Open
            End If
     ~dulla^@204~                 Dim returnValue As In~dulla^@204~ apter.UpdateCommand.ExecuteNonQuery
~dulla^@204~    Return returnValue
            Fi~dulla^@204~           If (previousConnectionState~dulla^@204~ a.ConnectionState.Closed) Then
     ~dulla^@204~   Me.Adapter.UpdateCommand.Connection~dulla^@204~            End If
            End Tr~dulla^@204~ d Function
    End Class
    
    ~dulla^@204~ om.Compiler.GeneratedCodeAttribute("S~dulla^@204~ sign.TypedDataSetGenerator", "2.0.0.0~dulla^@204~ System.ComponentModel.DesignerCategor~dulla^@204~ ode"),  _
     System.ComponentModel~dulla^@204~ true),  _
     System.ComponentModel~dulla^@204~ tribute(true),  _
     System.Compon~dulla^@204~ gnerAttribute("Microsoft.VSDesigner.D~dulla^@204~ ign.TableAdapterDesigner, Microsoft.V~dulla^@204~  
        ", Version=8.0.0.0, Cultur~dulla^@204~ blicKeyToken=b03f5f7f11d50a3a"),  _
~dulla^@204~ omponentModel.Design.HelpKeywordAttri~dulla^@204~ .TableAdapter")>  _
    Partial Publ~dulla^@204~ haseInfoTableAdapter
        Inherit~dulla^@204~ onentModel.Component
        
     ~dulla^@204~ thEvents _adapter As System.Data.SqlC~dulla^@204~ Adapter
        
        Private _c~dulla^@204~ System.Data.SqlClient.SqlConnection
~dulla^@204~      Private _commandCollection() As ~dulla^@204~ qlClient.SqlCommand
        
      ~dulla^@204~ earBeforeFill As Boolean
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public Sub New()
           ~dulla^@204~             Me.ClearBeforeFill = true~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ Only Property Adapter() As System.Dat~dulla^@204~ qlDataAdapter
            Get
     ~dulla^@204~  (Me._adapter Is Nothing) Then
     ~dulla^@204~   Me.InitAdapter
                End~dulla^@204~         Return Me._adapter
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Friend Property Connection() As Sy~dulla^@204~ Client.SqlConnection
            Get~dulla^@204~      If (Me._connection Is Nothing) T~dulla^@204~             Me.InitConnection
      ~dulla^@204~  If
                Return Me._conne~dulla^@204~       End Get
            Set
     ~dulla^@204~ ._connection = value
               ~dulla^@204~ Adapter.InsertCommand) Is Nothing) Th~dulla^@204~            Me.Adapter.InsertCommand.C~dulla^@204~ alue
                End If
       ~dulla^@204~ Not (Me.Adapter.DeleteCommand) Is Not~dulla^@204~                    Me.Adapter.DeleteC~dulla^@204~ tion = value
                End If~dulla^@204~     If (Not (Me.Adapter.UpdateCommand~dulla^@204~  Then
                    Me.Adapter~dulla^@204~ d.Connection = value
               ~dulla^@204~             Dim i As Integer = 0
   ~dulla^@204~ Do While (i < Me.CommandCollection.Le~dulla^@204~               If (Not (Me.CommandColl~dulla^@204~  Nothing) Then
                     ~dulla^@204~ ommandCollection(i),System.Data.SqlCl~dulla^@204~ nd).Connection = value
             ~dulla^@204~ 
                    i = (i + 1)
  ~dulla^@204~  Loop
            End Set
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Prote~dulla^@204~  Property CommandCollection() As Syst~dulla^@204~ ient.SqlCommand()
            Get
 ~dulla^@204~   If (Me._commandCollection Is Nothin~dulla^@204~                 Me.InitCommandCollect~dulla^@204~         End If
                Retur~dulla^@204~ Collection
            End Get
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ty ClearBeforeFill() As Boolean
    ~dulla^@204~                 Return Me._clearBefor~dulla^@204~       End Get
            Set
     ~dulla^@204~ ._clearBeforeFill = value
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Private Sub InitAdapter()
        ~dulla^@204~ er = New System.Data.SqlClient.SqlDat~dulla^@204~          Dim tableMapping As System.D~dulla^@204~ taTableMapping = New System.Data.Comm~dulla^@204~ apping
            tableMapping.Sour~dulla^@204~ ble"
            tableMapping.DataSe~dulla^@204~ chaseInfo"
            tableMapping.~dulla^@204~ s.Add("PartNo", "PartNo")
          ~dulla^@204~ g.ColumnMappings.Add("Quantity", "Qua~dulla^@204~         tableMapping.ColumnMappings.A~dulla^@204~ "Amount")
            tableMapping.C~dulla^@204~ .Add("SupplierID", "SupplierID")
   ~dulla^@204~ eMapping.ColumnMappings.Add("InvoiceN~dulla^@204~ o")
            Me._adapter.TableMap~dulla^@204~ leMapping)
            Me._adapter.D~dulla^@204~ = New System.Data.SqlClient.SqlComman~dulla^@204~   Me._adapter.DeleteCommand.Connectio~dulla^@204~ tion
            Me._adapter.DeleteC~dulla^@204~ dText = "DELETE FROM [dbo].[PurchaseI~dulla^@204~ [PartNo] = @Original_PartNo) AND ([Qu~dulla^@204~              "ity] = @Original_Quanti~dulla^@204~ unt] = @Original_Amount) AND ([Suppli~dulla^@204~ 
                " @Original_Supplier~dulla^@204~ oiceNo] = @Original_InvoiceNo))"
   ~dulla^@204~ adapter.DeleteCommand.CommandType = S~dulla^@204~ mmandType.Text
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@Original_PartNo", System.Da~dulla^@204~ NVarChar, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "PartNo", System.Data.DataRowV~dulla^@204~ al, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.DeleteCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Original_~dulla^@204~ stem.Data.SqlDbType.Int, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "Quantity", Sys~dulla^@204~ RowVersion.Original, false, Nothing, ~dulla^@204~ 
            Me._adapter.DeleteComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ nal_Amount", System.Data.SqlDbType.In~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ tem.Data.DataRowVersion.Original, fal~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@Original_SupplierID", System.~dulla^@204~ e.NVarChar, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "SupplierID", System.Data.Da~dulla^@204~ Original, false, Nothing, "", "", "")~dulla^@204~   Me._adapter.DeleteCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@Original_InvoiceNo", System.Data.SqlDbType.NV~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ No", System.Data.DataRowVersion.Origi~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ rtCommand = New System.Data.SqlClient~dulla^@204~             Me._adapter.InsertCommand~dulla^@204~  Me.Connection
            Me._adapt~dulla^@204~ and.CommandText = "INSERT INTO [dbo].~dulla^@204~ ] ([PartNo], [Quantity], [Amount], [S~dulla^@204~ "& _ 
                "InvoiceNo]) V~dulla^@204~ o, @Quantity, @Amount, @SupplierID, @~dulla^@204~ Global.Microsoft.VisualBasic.ChrW(13)~dulla^@204~ soft.VisualBasic.ChrW(10)&"SELE"& _ ~dulla^@204~     "CT PartNo, Quantity, Amount, Sup~dulla^@204~ iceNo FROM PurchaseInfo WHERE (Part"&~dulla^@204~         "No = @PartNo)"
            ~dulla^@204~ nsertCommand.CommandType = System.Dat~dulla^@204~ .Text
            Me._adapter.Insert~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @PartNo", System.Data.SqlDbType.NVarC~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ ystem.Data.DataRowVersion.Current, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Quantity", System.Data.SqlDb~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ ity", System.Data.DataRowVersion.Curr~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ rtCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@Amount", System.Data.~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ Amount", System.Data.DataRowVersion.C~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ nsertCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@SupplierID", Syste~dulla^@204~ ype.NVarChar, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "SupplierID", System.Data.~dulla^@204~ n.Current, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.InsertCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@In~dulla^@204~ tem.Data.SqlDbType.NVarChar, 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "InvoiceNo"~dulla^@204~ .DataRowVersion.Current, false, Nothi~dulla^@204~ "))
            Me._adapter.UpdateCo~dulla^@204~ ystem.Data.SqlClient.SqlCommand
    ~dulla^@204~ dapter.UpdateCommand.Connection = Me.~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~  "UPDATE [dbo].[PurchaseInfo] SET [Pa~dulla^@204~ No, [Quantity] = @Quantity, [Amou"& _~dulla^@204~       "nt] = @Amount, [SupplierID] = ~dulla^@204~ [InvoiceNo] = @InvoiceNo WHERE (([Par~dulla^@204~           "tNo] = @Original_PartNo) A~dulla^@204~ ] = @Original_Quantity) AND ([Amount]~dulla^@204~               "Original_Amount) AND (~dulla^@204~ = @Original_SupplierID) AND ([Invoice~dulla^@204~ 
                "riginal_InvoiceNo)~dulla^@204~ crosoft.VisualBasic.ChrW(13)&Global.M~dulla^@204~ alBasic.ChrW(10)&"SELECT PartNo, Quan~dulla^@204~  SupplierID, InvoiceNo FRO"& _ 
    ~dulla^@204~ M PurchaseInfo WHERE (PartNo = @PartN~dulla^@204~     Me._adapter.UpdateCommand.Command~dulla^@204~ .Data.CommandType.Text
            M~dulla^@204~ dateCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@PartNo", System.Dat~dulla^@204~ VarChar, 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "PartNo", System.Data.DataRowVe~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.UpdateCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@Quantity", ~dulla^@204~ qlDbType.Int, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "Quantity", System.Data.Da~dulla^@204~ Current, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Amou~dulla^@204~ ata.SqlDbType.Int, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "Amount", System.Data~dulla^@204~ on.Current, false, Nothing, "", "", "~dulla^@204~     Me._adapter.UpdateCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@S~dulla^@204~ ystem.Data.SqlDbType.NVarChar, 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "Supplier~dulla^@204~ ata.DataRowVersion.Current, false, No~dulla^@204~ , ""))
            Me._adapter.Updat~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@InvoiceNo", System.Data.SqlDbType.N~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ eNo", System.Data.DataRowVersion.Curr~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@Original_PartNo", Sys~dulla^@204~ bType.NVarChar, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "PartNo", System.Data.Da~dulla^@204~ Original, false, Nothing, "", "", "")~dulla^@204~   Me._adapter.UpdateCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@Ori~dulla^@204~ y", System.Data.SqlDbType.Int, 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "Quantity~dulla^@204~ a.DataRowVersion.Original, false, Not~dulla^@204~  ""))
            Me._adapter.Update~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @Original_Amount", System.Data.SqlDbT~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@Original_SupplierID", S~dulla^@204~ lDbType.NVarChar, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "SupplierID", System.D~dulla^@204~ rsion.Original, false, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ nvoiceNo", System.Data.SqlDbType.NVar~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ hing, "", "", ""))
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Private Sub InitCo~dulla^@204~            Me._connection = New Syste~dulla^@204~ ent.SqlConnection
            Me._co~dulla^@204~ ectionString = Global.InventoryContro~dulla^@204~ Settings.Default.InventoryControlSyst~dulla^@204~ tring
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Private Sub InitCommandCollecti~dulla^@204~      Me._commandCollection = New Syst~dulla^@204~ ient.SqlCommand(0) {}
            Me~dulla^@204~ ection(0) = New System.Data.SqlClient~dulla^@204~             Me._commandCollection(0).~dulla^@204~ Me.Connection
            Me._comman~dulla^@204~ ).CommandText = "SELECT PartNo, Quant~dulla^@204~ SupplierID, InvoiceNo FROM dbo.Purcha~dulla^@204~         Me._commandCollection(0).Comm~dulla^@204~ tem.Data.CommandType.Text
        En~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute(),  _
         System.Com~dulla^@204~ esign.HelpKeywordAttribute("vs.data.T~dulla^@204~ ,  _
         System.ComponentModel.~dulla^@204~ hodAttribute(System.ComponentModel.Da~dulla^@204~ dType.Fill, true)>  _
        Public~dulla^@204~ erridable Function Fill(ByVal dataTab~dulla^@204~ ryControlSystemDataSet.PurchaseInfoDa~dulla^@204~ nteger
            Me.Adapter.Select~dulla^@204~ CommandCollection(0)
            If ~dulla^@204~ reFill = true) Then
                ~dulla^@204~ ar
            End If
            D~dulla^@204~ e As Integer = Me.Adapter.Fill(dataTa~dulla^@204~      Return returnValue
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute(),  _
         System.~dulla^@204~ l.Design.HelpKeywordAttribute("vs.dat~dulla^@204~ r"),  _
         System.ComponentMod~dulla^@204~ MethodAttribute(System.ComponentModel~dulla^@204~ thodType.[Select], true)>  _
       ~dulla^@204~ oads Overridable Function GetData() A~dulla^@204~ ntrolSystemDataSet.PurchaseInfoDataTa~dulla^@204~     Me.Adapter.SelectCommand = Me.Com~dulla^@204~ n(0)
            Dim dataTable As In~dulla^@204~ lSystemDataSet.PurchaseInfoDataTable ~dulla^@204~ ryControlSystemDataSet.PurchaseInfoDa~dulla^@204~         Me.Adapter.Fill(dataTable)
 ~dulla^@204~ turn dataTable
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute(),  _
         System.Component~dulla^@204~ HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Over~dulla^@204~ ion Update(ByVal dataTable As Invento~dulla^@204~ emDataSet.PurchaseInfoDataTable) As I~dulla^@204~        Return Me.Adapter.Update(dataT~dulla^@204~   End Function
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute(),  ~dulla^@204~ ystem.ComponentModel.Design.HelpKeywo~dulla^@204~ vs.data.TableAdapter")>  _
        P~dulla^@204~ ds Overridable Function Update(ByVal ~dulla^@204~ ventoryControlSystemDataSet) As Integ~dulla^@204~    Return Me.Adapter.Update(dataSet, ~dulla^@204~ ")
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~          System.ComponentModel.Design~dulla^@204~ ttribute("vs.data.TableAdapter")>  _~dulla^@204~ ic Overloads Overridable Function Upd~dulla^@204~ aRow As System.Data.DataRow) As Integ~dulla^@204~    Return Me.Adapter.Update(New Syste~dulla^@204~ w() {dataRow})
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute(),  _
         System.Component~dulla^@204~ HelpKeywordAttribute("vs.data.TableAd~dulla^@204~         Public Overloads Overridable ~dulla^@204~ te(ByVal dataRows() As System.Data.Da~dulla^@204~ eger
            Return Me.Adapter.U~dulla^@204~ s)
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~          System.ComponentModel.Design~dulla^@204~ ttribute("vs.data.TableAdapter"),  _~dulla^@204~ tem.ComponentModel.DataObjectMethodAt~dulla^@204~ m.ComponentModel.DataObjectMethodType~dulla^@204~ )>  _
        Public Overloads Overr~dulla^@204~ on Delete(ByVal Original_PartNo As St~dulla^@204~ riginal_Quantity As Integer, ByVal Or~dulla^@204~  As Integer, ByVal Original_SupplierI~dulla^@204~ ByVal Original_InvoiceNo As String) A~dulla^@204~           If (Original_PartNo Is Noth~dulla^@204~               Throw New System.Argume~dulla^@204~ on("Original_PartNo")
            El~dulla^@204~        Me.Adapter.DeleteCommand.Param~dulla^@204~ e = CType(Original_PartNo,String)
  ~dulla^@204~  If
            Me.Adapter.DeleteCom~dulla^@204~ rs(1).Value = CType(Original_Quantity~dulla^@204~           Me.Adapter.DeleteCommand.Pa~dulla^@204~ alue = CType(Original_Amount,Integer)~dulla^@204~  If (Original_SupplierID Is Nothing) ~dulla^@204~          Throw New System.ArgumentNul~dulla^@204~ riginal_SupplierID")
            Els~dulla^@204~       Me.Adapter.DeleteCommand.Parame~dulla^@204~  = CType(Original_SupplierID,String)~dulla^@204~ End If
            If (Original_Invo~dulla^@204~ ing) Then
                Throw New ~dulla^@204~ ntNullException("Original_InvoiceNo")~dulla^@204~  Else
                Me.Adapter.Del~dulla^@204~ rameters(4).Value = CType(Original_In~dulla^@204~ g)
            End If
            D~dulla^@204~ nnectionState As System.Data.Connecti~dulla^@204~ Adapter.DeleteCommand.Connection.Stat~dulla^@204~   If ((Me.Adapter.DeleteCommand.Conne~dulla^@204~ nd System.Data.ConnectionState.Open) ~dulla^@204~                <> System.Data.Connect~dulla^@204~ ) Then
                Me.Adapter.De~dulla^@204~ onnection.Open
            End If
 ~dulla^@204~ y 
                Dim returnValue A~dulla^@204~ e.Adapter.DeleteCommand.ExecuteNonQue~dulla^@204~        Return returnValue
          ~dulla^@204~               If (previousConnectionS~dulla^@204~ .Data.ConnectionState.Closed) Then
 ~dulla^@204~       Me.Adapter.DeleteCommand.Connec~dulla^@204~                End If
            En~dulla^@204~   End Function
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute(),  ~dulla^@204~ ystem.ComponentModel.Design.HelpKeywo~dulla^@204~ vs.data.TableAdapter"),  _
         ~dulla^@204~ entModel.DataObjectMethodAttribute(Sy~dulla^@204~ tModel.DataObjectMethodType.Insert, t~dulla^@204~      Public Overloads Overridable Fun~dulla^@204~ ByVal PartNo As String, ByVal Quantit~dulla^@204~  ByVal Amount As Integer, ByVal Suppl~dulla^@204~ ng, ByVal InvoiceNo As String) As Int~dulla^@204~      If (PartNo Is Nothing) Then
   ~dulla^@204~ Throw New System.ArgumentNullExceptio~dulla^@204~             Else
                Me.~dulla^@204~ tCommand.Parameters(0).Value = CType(~dulla^@204~ )
            End If
            Me~dulla^@204~ rtCommand.Parameters(1).Value = CType~dulla^@204~ eger)
            Me.Adapter.InsertC~dulla^@204~ ters(2).Value = CType(Amount,Integer)~dulla^@204~  If (SupplierID Is Nothing) Then
   ~dulla^@204~ Throw New System.ArgumentNullExceptio~dulla^@204~ ")
            Else
               ~dulla^@204~ nsertCommand.Parameters(3).Value = CT~dulla^@204~ D,String)
            End If
      ~dulla^@204~ oiceNo Is Nothing) Then
            ~dulla^@204~  System.ArgumentNullException("Invoic~dulla^@204~       Else
                Me.Adapte~dulla^@204~ nd.Parameters(4).Value = CType(Invoic~dulla^@204~             End If
            Dim p~dulla^@204~ tionState As System.Data.ConnectionSt~dulla^@204~ ter.InsertCommand.Connection.State
 ~dulla^@204~  ((Me.Adapter.InsertCommand.Connectio~dulla^@204~ ystem.Data.ConnectionState.Open)  _
~dulla^@204~            <> System.Data.ConnectionS~dulla^@204~ en
                Me.Adapter.Insert~dulla^@204~ ction.Open
            End If
     ~dulla^@204~                 Dim returnValue As In~dulla^@204~ apter.InsertCommand.ExecuteNonQuery
~dulla^@204~    Return returnValue
            Fi~dulla^@204~           If (previousConnectionState~dulla^@204~ a.ConnectionState.Closed) Then
     ~dulla^@204~   Me.Adapter.InsertCommand.Connection~dulla^@204~            End If
            End Tr~dulla^@204~ d Function
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute(),  _
 ~dulla^@204~ m.ComponentModel.Design.HelpKeywordAt~dulla^@204~ ata.TableAdapter"),  _
         Syst~dulla^@204~ odel.DataObjectMethodAttribute(System~dulla^@204~ el.DataObjectMethodType.Update, true)~dulla^@204~  Public Overloads Overridable Functio~dulla^@204~ l PartNo As String, ByVal Quantity As~dulla^@204~ al Amount As Integer, ByVal SupplierI~dulla^@204~ ByVal InvoiceNo As String, ByVal Orig~dulla^@204~ s String, ByVal Original_Quantity As ~dulla^@204~ l Original_Amount As Integer, ByVal O~dulla^@204~ ierID As String, ByVal Original_Invoi~dulla^@204~ g) As Integer
            If (PartNo~dulla^@204~ Then
                Throw New Syste~dulla^@204~ lException("PartNo")
            Els~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~  = CType(PartNo,String)
            ~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ e = CType(Quantity,Integer)
        ~dulla^@204~ r.UpdateCommand.Parameters(2).Value =~dulla^@204~ ,Integer)
            If (SupplierID~dulla^@204~ Then
                Throw New Syste~dulla^@204~ lException("SupplierID")
           ~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ alue = CType(SupplierID,String)
    ~dulla^@204~ f
            If (InvoiceNo Is Nothi~dulla^@204~              Throw New System.Argumen~dulla^@204~ n("InvoiceNo")
            Else
   ~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(4~dulla^@204~ pe(InvoiceNo,String)
            End~dulla^@204~     If (Original_PartNo Is Nothing) T~dulla^@204~         Throw New System.ArgumentNull~dulla^@204~ iginal_PartNo")
            Else
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ ype(Original_PartNo,String)
        ~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ Value = CType(Original_Quantity,Integ~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~  CType(Original_Amount,Integer)
    ~dulla^@204~ riginal_SupplierID Is Nothing) Then
~dulla^@204~    Throw New System.ArgumentNullExcep~dulla^@204~ l_SupplierID")
            Else
   ~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(8~dulla^@204~ pe(Original_SupplierID,String)
     ~dulla^@204~ 
            If (Original_InvoiceNo ~dulla^@204~ hen
                Throw New System~dulla^@204~ Exception("Original_InvoiceNo")
    ~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(9).Value = CType(Original_InvoiceN~dulla^@204~           End If
            Dim pre~dulla^@204~ onState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.St~dulla^@204~     If ((Me.Adapter.UpdateCommand.Con~dulla^@204~  And System.Data.ConnectionState.Open~dulla^@204~                  <> System.Data.Conne~dulla^@204~ en) Then
                Me.Adapter.~dulla^@204~ .Connection.Open
            End If~dulla^@204~ Try 
                Dim returnValue~dulla^@204~  Me.Adapter.UpdateCommand.ExecuteNonQ~dulla^@204~          Return returnValue
        ~dulla^@204~                 If (previousConnectio~dulla^@204~ em.Data.ConnectionState.Closed) Then~dulla^@204~         Me.Adapter.UpdateCommand.Conn~dulla^@204~ 
                End If
            ~dulla^@204~     End Function
    End Class
    ~dulla^@204~ .CodeDom.Compiler.GeneratedCodeAttrib~dulla^@204~ ata.Design.TypedDataSetGenerator", "2~dulla^@204~ 
     System.ComponentModel.DesignerC~dulla^@204~ ute("code"),  _
     System.Componen~dulla^@204~ xItem(true),  _
     System.Componen~dulla^@204~ jectAttribute(true),  _
     System.~dulla^@204~ l.DesignerAttribute("Microsoft.VSDesi~dulla^@204~ ce.Design.TableAdapterDesigner, Micro~dulla^@204~ er"& _ 
        ", Version=8.0.0.0, ~dulla^@204~ al, PublicKeyToken=b03f5f7f11d50a3a")~dulla^@204~ stem.ComponentModel.Design.HelpKeywor~dulla^@204~ s.data.TableAdapter")>  _
    Partia~dulla^@204~ s SalesTableAdapter
        Inherits~dulla^@204~ nentModel.Component
        
      ~dulla^@204~ hEvents _adapter As System.Data.SqlCl~dulla^@204~ dapter
        
        Private _co~dulla^@204~ ystem.Data.SqlClient.SqlConnection
 ~dulla^@204~     Private _commandCollection() As S~dulla^@204~ lClient.SqlCommand
        
       ~dulla^@204~ arBeforeFill As Boolean
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Sub New()
            ~dulla^@204~            Me.ClearBeforeFill = true~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ nly Property Adapter() As System.Data~dulla^@204~ lDataAdapter
            Get
      ~dulla^@204~ (Me._adapter Is Nothing) Then
      ~dulla^@204~  Me.InitAdapter
                End ~dulla^@204~        Return Me._adapter
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Friend Property Connection() As Sys~dulla^@204~ lient.SqlConnection
            Get~dulla^@204~     If (Me._connection Is Nothing) Th~dulla^@204~            Me.InitConnection
       ~dulla^@204~ If
                Return Me._connec~dulla^@204~      End Get
            Set
      ~dulla^@204~ _connection = value
                ~dulla^@204~ dapter.InsertCommand) Is Nothing) The~dulla^@204~           Me.Adapter.InsertCommand.Co~dulla^@204~ lue
                End If
        ~dulla^@204~ ot (Me.Adapter.DeleteCommand) Is Noth~dulla^@204~                   Me.Adapter.DeleteCo~dulla^@204~ ion = value
                End If
~dulla^@204~    If (Not (Me.Adapter.UpdateCommand)~dulla^@204~ Then
                    Me.Adapter.~dulla^@204~ .Connection = value
                ~dulla^@204~            Dim i As Integer = 0
    ~dulla^@204~ o While (i < Me.CommandCollection.Len~dulla^@204~              If (Not (Me.CommandColle~dulla^@204~ Nothing) Then
                      ~dulla^@204~ mmandCollection(i),System.Data.SqlCli~dulla^@204~ d).Connection = value
              ~dulla^@204~ 
                    i = (i + 1)
   ~dulla^@204~ Loop
            End Set
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Protec~dulla^@204~ Property CommandCollection() As Syste~dulla^@204~ ent.SqlCommand()
            Get
  ~dulla^@204~  If (Me._commandCollection Is Nothing~dulla^@204~                Me.InitCommandCollecti~dulla^@204~        End If
                Return~dulla^@204~ ollection
            End Get
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y ClearBeforeFill() As Boolean
     ~dulla^@204~                Return Me._clearBefore~dulla^@204~      End Get
            Set
      ~dulla^@204~ _clearBeforeFill = value
           ~dulla^@204~      End Property
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Private Sub InitAdapter()
         ~dulla^@204~ r = New System.Data.SqlClient.SqlData~dulla^@204~         Dim tableMapping As System.Da~dulla^@204~ aTableMapping = New System.Data.Commo~dulla^@204~ pping
            tableMapping.Sourc~dulla^@204~ le"
            tableMapping.DataSet~dulla^@204~ s"
            tableMapping.ColumnMa~dulla^@204~ nvoiceNo", "InvoiceNo")
            ~dulla^@204~ ColumnMappings.Add("Date", "Date")
 ~dulla^@204~ bleMapping.ColumnMappings.Add("SubTot~dulla^@204~ l")
            tableMapping.ColumnM~dulla^@204~ VATAmount", "VATAmount")
           ~dulla^@204~ .ColumnMappings.Add("GrandTotal", "Gr~dulla^@204~            tableMapping.ColumnMapping~dulla^@204~ Payment", "ModeOfPayment")
         ~dulla^@204~ r.TableMappings.Add(tableMapping)
  ~dulla^@204~ _adapter.DeleteCommand = New System.D~dulla^@204~ .SqlCommand
            Me._adapter.~dulla^@204~ .Connection = Me.Connection
        ~dulla^@204~ er.DeleteCommand.CommandText = "DELET~dulla^@204~ [Sales] WHERE (([InvoiceNo] = @Origin~dulla^@204~  AND ([Date] "& _ 
                "~dulla^@204~ ate) AND ([SubTotal] = @Original_SubT~dulla^@204~ ATAmount] = @Orig"& _ 
             ~dulla^@204~ mount) AND ([GrandTotal] = @Original_~dulla^@204~ ND ([ModeOfPayment] ="& _ 
         ~dulla^@204~ ginal_ModeOfPayment))"
            M~dulla^@204~ leteCommand.CommandType = System.Data~dulla^@204~ Text
            Me._adapter.DeleteC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ Original_InvoiceNo", System.Data.SqlD~dulla^@204~ r, 0, System.Data.ParameterDirection.~dulla^@204~ "InvoiceNo", System.Data.DataRowVersi~dulla^@204~ false, Nothing, "", "", ""))
       ~dulla^@204~ ter.DeleteCommand.Parameters.Add(New ~dulla^@204~ qlClient.SqlParameter("@Original_Date~dulla^@204~ a.SqlDbType.DateTime, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "Date", System.Dat~dulla^@204~ ion.Original, false, Nothing, "", "",~dulla^@204~       Me._adapter.DeleteCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ Total", System.Data.SqlDbType.Float, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "Su~dulla^@204~ em.Data.DataRowVersion.Original, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Original_VATAmount", System.Da~dulla^@204~ Float, 0, System.Data.ParameterDirect~dulla^@204~  0, "VATAmount", System.Data.DataRowV~dulla^@204~ al, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.DeleteCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Original_~dulla^@204~ System.Data.SqlDbType.Float, 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "GrandTotal~dulla^@204~ a.DataRowVersion.Original, false, Not~dulla^@204~  ""))
            Me._adapter.Delete~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @Original_ModeOfPayment", System.Data~dulla^@204~ har], 0, System.Data.ParameterDirecti~dulla^@204~ 0, "ModeOfPayment", System.Data.DataR~dulla^@204~ ginal, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.InsertCommand = New System~dulla^@204~ nt.SqlCommand
            Me._adapte~dulla^@204~ nd.Connection = Me.Connection
      ~dulla^@204~ pter.InsertCommand.CommandText = "INS~dulla^@204~ ].[Sales] ([InvoiceNo], [Date], [SubT~dulla^@204~ ount], [GrandTo"& _ 
               ~dulla^@204~ OfPayment]) VALUES (@InvoiceNo, @Date~dulla^@204~ @VATAmount, @GrandT"& _ 
           ~dulla^@204~ ModeOfPayment);"&Global.Microsoft.Vis~dulla^@204~ (13)&Global.Microsoft.VisualBasic.Chr~dulla^@204~  InvoiceNo, Date, SubTotal, VATAmount~dulla^@204~ "& _ 
                " ModeOfPaymen~dulla^@204~ WHERE (InvoiceNo = @InvoiceNo)"
    ~dulla^@204~ dapter.InsertCommand.CommandType = Sy~dulla^@204~ mandType.Text
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@InvoiceNo", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "InvoiceNo", System.Data.Data~dulla^@204~ rrent, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.InsertCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@Date",~dulla^@204~ SqlDbType.DateTime, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "Date", System.Data.~dulla^@204~ n.Current, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.InsertCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Su~dulla^@204~ em.Data.SqlDbType.Float, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "SubTotal", Sys~dulla^@204~ RowVersion.Current, false, Nothing, "~dulla^@204~             Me._adapter.InsertCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ unt", System.Data.SqlDbType.Float, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "VATA~dulla^@204~ m.Data.DataRowVersion.Current, false,~dulla^@204~  "", ""))
            Me._adapter.In~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@GrandTotal", System.Data.SqlDbTy~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ Total", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ sertCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@ModeOfPayment", Sys~dulla^@204~ bType.[Char], 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "ModeOfPayment", System.Da~dulla^@204~ sion.Current, false, Nothing, "", "",~dulla^@204~       Me._adapter.UpdateCommand = New~dulla^@204~ SqlClient.SqlCommand
            Me.~dulla^@204~ teCommand.Connection = Me.Connection~dulla^@204~ Me._adapter.UpdateCommand.CommandText~dulla^@204~ bo].[Sales] SET [InvoiceNo] = @Invoic~dulla^@204~  @Date, [SubTotal] = @"& _ 
        ~dulla^@204~ otal, [VATAmount] = @VATAmount, [Gran~dulla^@204~ andTotal, [ModeOfPayment] "& _ 
    ~dulla^@204~ = @ModeOfPayment WHERE (([InvoiceNo] ~dulla^@204~ nvoiceNo) AND ([Date] = @Origi"& _ 
~dulla^@204~    "nal_Date) AND ([SubTotal] = @Orig~dulla^@204~ ) AND ([VATAmount] = @Original_VAT"& ~dulla^@204~        "Amount) AND ([GrandTotal] = @~dulla^@204~ dTotal) AND ([ModeOfPayment] = @Origi~dulla^@204~            "al_ModeOfPayment));"&Glob~dulla^@204~ VisualBasic.ChrW(13)&Global.Microsoft~dulla^@204~ ChrW(10)&"SELECT InvoiceNo, Date, Sub~dulla^@204~ unt, GrandTotal, Mo"& _ 
           ~dulla^@204~ ment FROM Sales WHERE (InvoiceNo = @I~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~  System.Data.CommandType.Text
      ~dulla^@204~ pter.UpdateCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@InvoiceNo", ~dulla^@204~ qlDbType.NVarChar, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "InvoiceNo", System.D~dulla^@204~ rsion.Current, false, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ em.Data.SqlDbType.DateTime, 0, System~dulla^@204~ erDirection.Input, 0, 0, "Date", Syst~dulla^@204~ owVersion.Current, false, Nothing, ""~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ l", System.Data.SqlDbType.Float, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "SubTot~dulla^@204~ ata.DataRowVersion.Current, false, No~dulla^@204~ , ""))
            Me._adapter.Updat~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@VATAmount", System.Data.SqlDbType.F~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ ", System.Data.DataRowVersion.Current~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@GrandTotal", System.Data~dulla^@204~ oat, 0, System.Data.ParameterDirectio~dulla^@204~ , "GrandTotal", System.Data.DataRowVe~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.UpdateCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@ModeOfPayme~dulla^@204~ ata.SqlDbType.[Char], 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "ModeOfPayment", S~dulla^@204~ taRowVersion.Current, false, Nothing,~dulla^@204~ 
            Me._adapter.UpdateComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ inal_InvoiceNo", System.Data.SqlDbTyp~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ oiceNo", System.Data.DataRowVersion.O~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ UpdateCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@Original_Date", S~dulla^@204~ lDbType.DateTime, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "Date", System.Data.Da~dulla^@204~ Original, false, Nothing, "", "", "")~dulla^@204~   Me._adapter.UpdateCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@Ori~dulla^@204~ l", System.Data.SqlDbType.Float, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "SubTot~dulla^@204~ ata.DataRowVersion.Original, false, N~dulla^@204~ ", ""))
            Me._adapter.Upda~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@Original_VATAmount", System.Data.S~dulla^@204~ t, 0, System.Data.ParameterDirection.~dulla^@204~ "VATAmount", System.Data.DataRowVersi~dulla^@204~ false, Nothing, "", "", ""))
       ~dulla^@204~ ter.UpdateCommand.Parameters.Add(New ~dulla^@204~ qlClient.SqlParameter("@Original_Gran~dulla^@204~ em.Data.SqlDbType.Float, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "GrandTotal", S~dulla^@204~ taRowVersion.Original, false, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ginal_ModeOfPayment", System.Data.Sql~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ ModeOfPayment", System.Data.DataRowVe~dulla^@204~ l, false, Nothing, "", "", ""))
    ~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Priva~dulla^@204~ nnection()
            Me._connectio~dulla^@204~ m.Data.SqlClient.SqlConnection
     ~dulla^@204~ nnection.ConnectionString = Global.In~dulla^@204~ lSystem.My.MySettings.Default.Invento~dulla^@204~ emConnectionString
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Private Sub InitCo~dulla^@204~ on()
            Me._commandCollecti~dulla^@204~ em.Data.SqlClient.SqlCommand(0) {}
 ~dulla^@204~ ._commandCollection(0) = New System.D~dulla^@204~ .SqlCommand
            Me._commandC~dulla^@204~ Connection = Me.Connection
         ~dulla^@204~ dCollection(0).CommandText = "SELECT ~dulla^@204~ te, SubTotal, VATAmount, GrandTotal, ~dulla^@204~  FROM dbo.S"& _ 
                "al~dulla^@204~     Me._commandCollection(0).CommandT~dulla^@204~ Data.CommandType.Text
        End Su~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute(),  _
         System.Compone~dulla^@204~ n.HelpKeywordAttribute("vs.data.Table~dulla^@204~ 
         System.ComponentModel.Data~dulla^@204~ ttribute(System.ComponentModel.DataOb~dulla^@204~ e.Fill, true)>  _
        Public Ove~dulla^@204~ dable Function Fill(ByVal dataTable A~dulla^@204~ ntrolSystemDataSet.SalesDataTable) As~dulla^@204~          Me.Adapter.SelectCommand = M~dulla^@204~ ection(0)
            If (Me.ClearBe~dulla^@204~ ue) Then
                dataTable.C~dulla^@204~      End If
            Dim returnVa~dulla^@204~ r = Me.Adapter.Fill(dataTable)
     ~dulla^@204~  returnValue
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te(),  _
         System.ComponentMo~dulla^@204~ lpKeywordAttribute("vs.data.TableAdap~dulla^@204~        System.ComponentModel.DataObje~dulla^@204~ bute(System.ComponentModel.DataObject~dulla^@204~ elect], true)>  _
        Public Ove~dulla^@204~ dable Function GetData() As Inventory~dulla^@204~ DataSet.SalesDataTable
            M~dulla^@204~ ectCommand = Me.CommandCollection(0)~dulla^@204~ Dim dataTable As InventoryControlSyst~dulla^@204~ esDataTable = New InventoryControlSys~dulla^@204~ lesDataTable
            Me.Adapter.~dulla^@204~ e)
            Return dataTable
   ~dulla^@204~ tion
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute(),  _
       ~dulla^@204~ onentModel.Design.HelpKeywordAttribut~dulla^@204~ bleAdapter")>  _
        Public Overloads Overridable Function Update(ByVal da~dulla^@204~ ventoryControlSystemDataSet.SalesData~dulla^@204~ eger
            Return Me.Adapter.U~dulla^@204~ le)
        End Function
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
         System.ComponentModel.Desig~dulla^@204~ Attribute("vs.data.TableAdapter")>  _~dulla^@204~ lic Overloads Overridable Function Up~dulla^@204~ taSet As InventoryControlSystemDataSe~dulla^@204~ 
            Return Me.Adapter.Updat~dulla^@204~ ales")
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
         System.ComponentModel.De~dulla^@204~ ordAttribute("vs.data.TableAdapter")>~dulla^@204~ Public Overloads Overridable Function~dulla^@204~  dataRow As System.Data.DataRow) As I~dulla^@204~        Return Me.Adapter.Update(New S~dulla^@204~ taRow() {dataRow})
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute(),  _
         System.Compo~dulla^@204~ ign.HelpKeywordAttribute("vs.data.Tab~dulla^@204~  _
        Public Overloads Overrida~dulla^@204~ Update(ByVal dataRows() As System.Dat~dulla^@204~  Integer
            Return Me.Adapt~dulla^@204~ aRows)
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
         System.ComponentModel.De~dulla^@204~ ordAttribute("vs.data.TableAdapter"),~dulla^@204~  System.ComponentModel.DataObjectMeth~dulla^@204~ ystem.ComponentModel.DataObjectMethod~dulla^@204~ true)>  _
        Public Overloads O~dulla^@204~ nction Delete(ByVal Original_InvoiceN~dulla^@204~ ByVal Original_Date As Date, ByVal Or~dulla^@204~ al As Double, ByVal Original_VATAmoun~dulla^@204~ ByVal Original_GrandTotal As Double, ~dulla^@204~ l_ModeOfPayment As String) As Integer~dulla^@204~  If (Original_InvoiceNo Is Nothing) T~dulla^@204~         Throw New System.ArgumentNull~dulla^@204~ iginal_InvoiceNo")
            Else~dulla^@204~     Me.Adapter.DeleteCommand.Paramete~dulla^@204~  CType(Original_InvoiceNo,String)
  ~dulla^@204~  If
            Me.Adapter.DeleteCom~dulla^@204~ rs(1).Value = CType(Original_Date,Dat~dulla^@204~    Me.Adapter.DeleteCommand.Parameter~dulla^@204~ CType(Original_SubTotal,Double)
    ~dulla^@204~ apter.DeleteCommand.Parameters(3).Val~dulla^@204~ iginal_VATAmount,Double)
           ~dulla^@204~ eleteCommand.Parameters(4).Value = CT~dulla^@204~ GrandTotal,Double)
            If (O~dulla^@204~ fPayment Is Nothing) Then
          ~dulla^@204~ ew System.ArgumentNullException("Orig~dulla^@204~ yment")
            Else
          ~dulla^@204~ ter.DeleteCommand.Parameters(5).Value~dulla^@204~ inal_ModeOfPayment,String)
         ~dulla^@204~           Dim previousConnectionState~dulla^@204~ ta.ConnectionState = Me.Adapter.Delet~dulla^@204~ ection.State
            If ((Me.Ada~dulla^@204~ mmand.Connection.State And System.Dat~dulla^@204~ tate.Open)  _
                      ~dulla^@204~ ata.ConnectionState.Open) Then
     ~dulla^@204~ .Adapter.DeleteCommand.Connection.Ope~dulla^@204~   End If
            Try 
         ~dulla^@204~ turnValue As Integer = Me.Adapter.Del~dulla^@204~ ecuteNonQuery
                Return~dulla^@204~ 
            Finally
               ~dulla^@204~ ConnectionState = System.Data.Connect~dulla^@204~ ed) Then
                    Me.Adap~dulla^@204~ mand.Connection.Close
              ~dulla^@204~          End Try
        End Functio~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute(),  _
         System.Compone~dulla^@204~ n.HelpKeywordAttribute("vs.data.Table~dulla^@204~ 
         System.ComponentModel.Data~dulla^@204~ ttribute(System.ComponentModel.DataOb~dulla^@204~ e.Insert, true)>  _
        Public O~dulla^@204~ ridable Function Insert(ByVal Invoice~dulla^@204~  ByVal _Date As Date, ByVal SubTotal ~dulla^@204~ Val VATAmount As Double, ByVal GrandT~dulla^@204~ e, ByVal ModeOfPayment As String) As ~dulla^@204~         If (InvoiceNo Is Nothing) The~dulla^@204~       Throw New System.ArgumentNullEx~dulla^@204~ iceNo")
            Else
          ~dulla^@204~ ter.InsertCommand.Parameters(0).Value~dulla^@204~ iceNo,String)
            End If
  ~dulla^@204~ Adapter.InsertCommand.Parameters(1).V~dulla^@204~ _Date,Date)
            Me.Adapter.I~dulla^@204~ Parameters(2).Value = CType(SubTotal,~dulla^@204~         Me.Adapter.InsertCommand.Para~dulla^@204~ ue = CType(VATAmount,Double)
       ~dulla^@204~ er.InsertCommand.Parameters(4).Value ~dulla^@204~ Total,Double)
            If (ModeOf~dulla^@204~ thing) Then
                Throw Ne~dulla^@204~ mentNullException("ModeOfPayment")
 ~dulla^@204~ se
                Me.Adapter.Insert~dulla^@204~ eters(5).Value = CType(ModeOfPayment,~dulla^@204~         End If
            Dim previ~dulla^@204~ State As System.Data.ConnectionState ~dulla^@204~ InsertCommand.Connection.State
     ~dulla^@204~ e.Adapter.InsertCommand.Connection.St~dulla^@204~ m.Data.ConnectionState.Open)  _
    ~dulla^@204~        <> System.Data.ConnectionState~dulla^@204~                 Me.Adapter.InsertComm~dulla^@204~ n.Open
            End If
         ~dulla^@204~             Dim returnValue As Intege~dulla^@204~ r.InsertCommand.ExecuteNonQuery
    ~dulla^@204~ eturn returnValue
            Finall~dulla^@204~       If (previousConnectionState = S~dulla^@204~ nnectionState.Closed) Then
         ~dulla^@204~ .Adapter.InsertCommand.Connection.Clo~dulla^@204~        End If
            End Try
 ~dulla^@204~ nction
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute(),  _
     ~dulla^@204~ mponentModel.Design.HelpKeywordAttrib~dulla^@204~ TableAdapter"),  _
         System.C~dulla^@204~ .DataObjectMethodAttribute(System.Com~dulla^@204~ ataObjectMethodType.Update, true)>  _~dulla^@204~ lic Overloads Overridable Function Up~dulla^@204~ voiceNo As String, ByVal _Date As Dat~dulla^@204~ otal As Double, ByVal VATAmount As Do~dulla^@204~ randTotal As Double, ByVal ModeOfPaym~dulla^@204~ , ByVal Original_InvoiceNo As String,~dulla^@204~ al_Date As Date, ByVal Original_SubTo~dulla^@204~ , ByVal Original_VATAmount As Double,~dulla^@204~ al_GrandTotal As Double, ByVal Origin~dulla^@204~ ent As String) As Integer
          ~dulla^@204~ No Is Nothing) Then
                ~dulla^@204~ tem.ArgumentNullException("InvoiceNo"~dulla^@204~   Else
                Me.Adapter.Up~dulla^@204~ arameters(0).Value = CType(InvoiceNo,~dulla^@204~         End If
            Me.Adapte~dulla^@204~ nd.Parameters(1).Value = CType(_Date,~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~  = CType(SubTotal,Double)
          ~dulla^@204~ UpdateCommand.Parameters(3).Value = C~dulla^@204~ t,Double)
            Me.Adapter.Upd~dulla^@204~ rameters(4).Value = CType(GrandTotal,~dulla^@204~         If (ModeOfPayment Is Nothing)~dulla^@204~           Throw New System.ArgumentNu~dulla^@204~ ModeOfPayment")
            Else
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ ype(ModeOfPayment,String)
          ~dulla^@204~          If (Original_InvoiceNo Is No~dulla^@204~                 Throw New System.Argu~dulla^@204~ tion("Original_InvoiceNo")
         ~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ .Value = CType(Original_InvoiceNo,Str~dulla^@204~      End If
            Me.Adapter.U~dulla^@204~ Parameters(7).Value = CType(Original_~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ Value = CType(Original_SubTotal,Doubl~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~ CType(Original_VATAmount,Double)
   ~dulla^@204~ dapter.UpdateCommand.Parameters(10).V~dulla^@204~ Original_GrandTotal,Double)
        ~dulla^@204~ nal_ModeOfPayment Is Nothing) Then
 ~dulla^@204~   Throw New System.ArgumentNullExcept~dulla^@204~ _ModeOfPayment")
            Else
 ~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ CType(Original_ModeOfPayment,String)~dulla^@204~ End If
            Dim previousConne~dulla^@204~  System.Data.ConnectionState = Me.Ada~dulla^@204~ mmand.Connection.State
            I~dulla^@204~ r.UpdateCommand.Connection.State And ~dulla^@204~ onnectionState.Open)  _
                        <> System.Data.ConnectionState~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ n.Open
            End If
         ~dulla^@204~             Dim returnValue As Intege~dulla^@204~ r.UpdateCommand.ExecuteNonQuery
    ~dulla^@204~ eturn returnValue
            Finall~dulla^@204~       If (previousConnectionState = S~dulla^@204~ nnectionState.Closed) Then
         ~dulla^@204~ .Adapter.UpdateCommand.Connection.Clo~dulla^@204~        End If
            End Try
 ~dulla^@204~ nction
    End Class
    
    <Sys~dulla^@204~ ompiler.GeneratedCodeAttribute("Syste~dulla^@204~ .TypedDataSetGenerator", "2.0.0.0"), ~dulla^@204~ em.ComponentModel.DesignerCategoryAtt~dulla^@204~ ),  _
     System.ComponentModel.Too~dulla^@204~ ),  _
     System.ComponentModel.Dat~dulla^@204~ ute(true),  _
     System.ComponentM~dulla^@204~ Attribute("Microsoft.VSDesigner.DataS~dulla^@204~ TableAdapterDesigner, Microsoft.VSDes~dulla^@204~        ", Version=8.0.0.0, Culture=ne~dulla^@204~ KeyToken=b03f5f7f11d50a3a"),  _
    ~dulla^@204~ nentModel.Design.HelpKeywordAttribute~dulla^@204~ leAdapter")>  _
    Partial Public C~dulla^@204~ oTableAdapter
        Inherits Syste~dulla^@204~ del.Component
        
        Priv~dulla^@204~ s _adapter As System.Data.SqlClient.S~dulla^@204~ 
        
        Private _connecti~dulla^@204~ Data.SqlClient.SqlConnection
       ~dulla^@204~ ivate _commandCollection() As System.~dulla^@204~ t.SqlCommand
        
        Priva~dulla^@204~ reFill As Boolean
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Sub New()
            MyBase~dulla^@204~      Me.ClearBeforeFill = true
     ~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Privat~dulla^@204~ operty Adapter() As System.Data.SqlCl~dulla^@204~ dapter
            Get
            ~dulla^@204~ dapter Is Nothing) Then
            ~dulla^@204~ itAdapter
                End If
  ~dulla^@204~  Return Me._adapter
            End ~dulla^@204~ End Property
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ nd Property Connection() As System.Da~dulla^@204~ SqlConnection
            Get
     ~dulla^@204~  (Me._connection Is Nothing) Then
  ~dulla^@204~      Me.InitConnection
             ~dulla^@204~               Return Me._connection
~dulla^@204~ nd Get
            Set
            ~dulla^@204~ ction = value
                If (No~dulla^@204~ .InsertCommand) Is Nothing) Then
   ~dulla^@204~     Me.Adapter.InsertCommand.Connecti~dulla^@204~                End If
              ~dulla^@204~ .Adapter.DeleteCommand) Is Nothing) T~dulla^@204~             Me.Adapter.DeleteCommand.~dulla^@204~ value
                End If
      ~dulla^@204~ (Not (Me.Adapter.UpdateCommand) Is No~dulla^@204~                     Me.Adapter.Update~dulla^@204~ ction = value
                End If~dulla^@204~      Dim i As Integer = 0
          ~dulla^@204~ e (i < Me.CommandCollection.Length)
~dulla^@204~        If (Not (Me.CommandCollection(~dulla^@204~ g) Then
                        CTyp~dulla^@204~ ollection(i),System.Data.SqlClient.Sq~dulla^@204~ nection = value
                    ~dulla^@204~                i = (i + 1)
         ~dulla^@204~             End Set
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Protected Re~dulla^@204~ ty CommandCollection() As System.Data~dulla^@204~ lCommand()
            Get
        ~dulla^@204~ e._commandCollection Is Nothing) Then~dulla^@204~          Me.InitCommandCollection
  ~dulla^@204~  End If
                Return Me._c~dulla^@204~ ion
            End Get
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ rBeforeFill() As Boolean
           ~dulla^@204~          Return Me._clearBeforeFill
~dulla^@204~ nd Get
            Set
            ~dulla^@204~ BeforeFill = value
            End S~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ te Sub InitAdapter()
            Me.~dulla^@204~ w System.Data.SqlClient.SqlDataAdapte~dulla^@204~   Dim tableMapping As System.Data.Com~dulla^@204~ Mapping = New System.Data.Common.Data~dulla^@204~ 
            tableMapping.SourceTable~dulla^@204~            tableMapping.DataSetTable ~dulla^@204~ 
            tableMapping.ColumnMapp~dulla^@204~ tNo", "PartNo")
            tableMap~dulla^@204~ ppings.Add("InvoiceNo", "InvoiceNo")~dulla^@204~ tableMapping.ColumnMappings.Add("Cust~dulla^@204~ tomerID")
            tableMapping.C~dulla^@204~ .Add("StockCardNo", "StockCardNo")
 ~dulla^@204~ ._adapter.TableMappings.Add(tableMapp~dulla^@204~      Me._adapter.DeleteCommand = New ~dulla^@204~ qlClient.SqlCommand
            Me._~dulla^@204~ eCommand.Connection = Me.Connection
~dulla^@204~ e._adapter.DeleteCommand.CommandText ~dulla^@204~ M [dbo].[SalesInfo] WHERE (([PartNo] ~dulla^@204~ artNo) AND ([InvoiceN"& _ 
         ~dulla^@204~ @Original_InvoiceNo) AND ([CustomerID~dulla^@204~ _CustomerID) AND ([StockC"& _ 
     ~dulla^@204~ rdNo] = @Original_StockCardNo))"
   ~dulla^@204~ adapter.DeleteCommand.CommandType = S~dulla^@204~ mmandType.Text
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@Original_PartNo", System.Da~dulla^@204~ NVarChar, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "PartNo", System.Data.DataRowV~dulla^@204~ al, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.DeleteCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Original_~dulla^@204~ ystem.Data.SqlDbType.NVarChar, 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "InvoiceN~dulla^@204~ ta.DataRowVersion.Original, false, No~dulla^@204~ , ""))
            Me._adapter.Delet~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@Original_CustomerID", System.Data.S~dulla^@204~ Char, 0, System.Data.ParameterDirecti~dulla^@204~ 0, "CustomerID", System.Data.DataRowV~dulla^@204~ al, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.DeleteCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Original_~dulla^@204~  System.Data.SqlDbType.NVarChar, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "StockC~dulla^@204~ m.Data.DataRowVersion.Original, false~dulla^@204~ , "", ""))
            Me._adapter.I~dulla^@204~ = New System.Data.SqlClient.SqlComman~dulla^@204~   Me._adapter.InsertCommand.Connectio~dulla^@204~ tion
            Me._adapter.InsertC~dulla^@204~ dText = "INSERT INTO [dbo].[SalesInfo~dulla^@204~ [InvoiceNo], [CustomerID], [StockCard~dulla^@204~              ") VALUES (@PartNo, @Inv~dulla^@204~ omerID, @StockCardNo);"&Global.Micros~dulla^@204~ ic.ChrW(13)&Global.Microsoft.VisualBa~dulla^@204~ "SELECT PartNo, Invoi"& _ 
         ~dulla^@204~  CustomerID, StockCardNo FROM SalesIn~dulla^@204~ oiceNo = @InvoiceNo) AND "& _ 
     ~dulla^@204~ PartNo = @PartNo)"
            Me._a~dulla^@204~ Command.CommandType = System.Data.Com~dulla^@204~ 
            Me._adapter.InsertComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ No", System.Data.SqlDbType.NVarChar, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "Pa~dulla^@204~ .Data.DataRowVersion.Current, false, ~dulla^@204~ "", ""))
            Me._adapter.Ins~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@InvoiceNo", System.Data.SqlDbType~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ iceNo", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ sertCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@CustomerID", System~dulla^@204~ pe.NVarChar, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "CustomerID", System.Data.D~dulla^@204~ .Current, false, Nothing, "", "", "")~dulla^@204~   Me._adapter.InsertCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@Sto~dulla^@204~ stem.Data.SqlDbType.NVarChar, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "StockCard~dulla^@204~ ata.DataRowVersion.Current, false, No~dulla^@204~ , ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCo~dulla^@204~       Me._adapter.UpdateCommand.Conne~dulla^@204~ nnection
            Me._adapter.Upd~dulla^@204~ mmandText = "UPDATE [dbo].[SalesInfo]~dulla^@204~  = @PartNo, [InvoiceNo] = @InvoiceNo,~dulla^@204~ 
                "merID] = @CustomerI~dulla^@204~ No] = @StockCardNo WHERE (([PartNo] =~dulla^@204~  _ 
                "PartNo) AND ([I~dulla^@204~ Original_InvoiceNo) AND ([CustomerID]~dulla^@204~ Cu"& _ 
                "stomerID) A~dulla^@204~ dNo] = @Original_StockCardNo));"&Glob~dulla^@204~ VisualBasic.ChrW(13)&Global.Microsoft~dulla^@204~ ChrW(10)&"SELECT PartNo, InvoiceN"& _~dulla^@204~       "o, CustomerID, StockCardNo FRO~dulla^@204~ HERE (InvoiceNo = @InvoiceNo) AND (Pa~dulla^@204~           "rtNo = @PartNo)"
        ~dulla^@204~ er.UpdateCommand.CommandType = System~dulla^@204~ Type.Text
            Me._adapter.Up~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@PartNo", System.Data.SqlDbType.N~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ ", System.Data.DataRowVersion.Current~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@InvoiceNo", System.Data.~dulla^@204~ rChar, 0, System.Data.ParameterDirect~dulla^@204~  0, "InvoiceNo", System.Data.DataRowV~dulla^@204~ t, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@CustomerID~dulla^@204~ a.SqlDbType.NVarChar, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "CustomerID", Syst~dulla^@204~ owVersion.Current, false, Nothing, ""~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ rdNo", System.Data.SqlDbType.NVarChar~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~  System.Data.DataRowVersion.Current, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Original_PartNo", System.D~dulla^@204~ .NVarChar, 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "PartNo", System.Data.DataRow~dulla^@204~ nal, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.UpdateCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@Original~dulla^@204~ System.Data.SqlDbType.NVarChar, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "Invoice~dulla^@204~ ata.DataRowVersion.Original, false, N~dulla^@204~ ", ""))
            Me._adapter.Upda~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@Original_CustomerID", System.Data.~dulla^@204~ rChar, 0, System.Data.ParameterDirect~dulla^@204~  0, "CustomerID", System.Data.DataRow~dulla^@204~ nal, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.UpdateCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@Original~dulla^@204~ , System.Data.SqlDbType.NVarChar, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Stock~dulla^@204~ em.Data.DataRowVersion.Original, fals~dulla^@204~ ", "", ""))
        End Sub
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Private Sub InitConnectio~dulla^@204~     Me._connection = New System.Data.~dulla^@204~ Connection
            Me._connectio~dulla^@204~ tring = Global.InventoryControlSystem~dulla^@204~ s.Default.InventoryControlSystemConne~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ rivate Sub InitCommandCollection()
 ~dulla^@204~ ._commandCollection = New System.Data~dulla^@204~ lCommand(0) {}
            Me._comma~dulla^@204~ 0) = New System.Data.SqlClient.SqlCom~dulla^@204~      Me._commandCollection(0).Connect~dulla^@204~ ection
            Me._commandCollec~dulla^@204~ ndText = "SELECT PartNo, InvoiceNo, C~dulla^@204~ ockCardNo FROM dbo.SalesInfo"
      ~dulla^@204~ mandCollection(0).CommandType = Syste~dulla^@204~ dType.Text
        End Sub
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
         System.ComponentModel.Des~dulla^@204~ rdAttribute("vs.data.TableAdapter"), ~dulla^@204~ System.ComponentModel.DataObjectMetho~dulla^@204~ stem.ComponentModel.DataObjectMethodT~dulla^@204~ e)>  _
        Public Overloads Over~dulla^@204~ ion Fill(ByVal dataTable As Inventory~dulla^@204~ DataSet.SalesInfoDataTable) As Intege~dulla^@204~   Me.Adapter.SelectCommand = Me.Comma~dulla^@204~ 0)
            If (Me.ClearBeforeFil~dulla^@204~ n
                dataTable.Clear
 ~dulla^@204~ d If
            Dim returnValue As ~dulla^@204~ Adapter.Fill(dataTable)
            ~dulla^@204~ Value
        End Function
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
         System.ComponentModel.Des~dulla^@204~ rdAttribute("vs.data.TableAdapter"), ~dulla^@204~ System.ComponentModel.DataObjectMetho~dulla^@204~ stem.ComponentModel.DataObjectMethodT~dulla^@204~  true)>  _
        Public Overloads ~dulla^@204~ unction GetData() As InventoryControl~dulla^@204~ .SalesInfoDataTable
            Me.A~dulla^@204~ Command = Me.CommandCollection(0)
  ~dulla^@204~  dataTable As InventoryControlSystemD~dulla^@204~ nfoDataTable = New InventoryControlSy~dulla^@204~ alesInfoDataTable
            Me.Ada~dulla^@204~ aTable)
            Return dataTable~dulla^@204~  Function
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute(),  _
  ~dulla^@204~ .ComponentModel.Design.HelpKeywordAtt~dulla^@204~ ta.TableAdapter")>  _
        Public~dulla^@204~ erridable Function Update(ByVal dataT~dulla^@204~ toryControlSystemDataSet.SalesInfoDat~dulla^@204~ teger
            Return Me.Adapter.~dulla^@204~ ble)
        End Function
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
         System.ComponentModel.Desi~dulla^@204~ dAttribute("vs.data.TableAdapter")>  ~dulla^@204~ blic Overloads Overridable Function U~dulla^@204~ ataSet As InventoryControlSystemDataS~dulla^@204~ r
            Return Me.Adapter.Upda~dulla^@204~ SalesInfo")
        End Function
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e(),  _
         System.ComponentMod~dulla^@204~ pKeywordAttribute("vs.data.TableAdapt~dulla^@204~      Public Overloads Overridable Fun~dulla^@204~ ByVal dataRow As System.Data.DataRow)~dulla^@204~             Return Me.Adapter.Update(~dulla^@204~ ta.DataRow() {dataRow})
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute(),  _
         System.~dulla^@204~ l.Design.HelpKeywordAttribute("vs.dat~dulla^@204~ r")>  _
        Public Overloads Ove~dulla^@204~ tion Update(ByVal dataRows() As Syste~dulla^@204~ w) As Integer
            Return Me.~dulla^@204~ e(dataRows)
        End Function
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e(),  _
         System.ComponentMod~dulla^@204~ pKeywordAttribute("vs.data.TableAdapt~dulla^@204~       System.ComponentModel.DataObjec~dulla^@204~ ute(System.ComponentModel.DataObjectM~dulla^@204~ ete, true)>  _
        Public Overlo~dulla^@204~ le Function Delete(ByVal Original_Par~dulla^@204~ , ByVal Original_InvoiceNo As String,~dulla^@204~ al_CustomerID As String, ByVal Origin~dulla^@204~ o As String) As Integer
            ~dulla^@204~ PartNo Is Nothing) Then
            ~dulla^@204~  System.ArgumentNullException("Origin~dulla^@204~             Else
                Me.~dulla^@204~ eCommand.Parameters(0).Value = CType(~dulla^@204~ No,String)
            End If
     ~dulla^@204~ iginal_InvoiceNo Is Nothing) Then
  ~dulla^@204~  Throw New System.ArgumentNullExcepti~dulla^@204~ InvoiceNo")
            Else
      ~dulla^@204~ Adapter.DeleteCommand.Parameters(1).V~dulla^@204~ Original_InvoiceNo,String)
         ~dulla^@204~           If (Original_CustomerID Is ~dulla^@204~ 
                Throw New System.Ar~dulla^@204~ eption("Original_CustomerID")
      ~dulla^@204~                Me.Adapter.DeleteComma~dulla^@204~ (2).Value = CType(Original_CustomerID~dulla^@204~          End If
            If (Orig~dulla^@204~ dNo Is Nothing) Then
               ~dulla^@204~ stem.ArgumentNullException("Original_~dulla^@204~ 
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Valu~dulla^@204~ ginal_StockCardNo,String)
          ~dulla^@204~          Dim previousConnectionState ~dulla^@204~ a.ConnectionState = Me.Adapter.Delete~dulla^@204~ ction.State
            If ((Me.Adap~dulla^@204~ mand.Connection.State And System.Data~dulla^@204~ ate.Open)  _
                       ~dulla^@204~ ta.ConnectionState.Open) Then
      ~dulla^@204~ Adapter.DeleteCommand.Connection.Open~dulla^@204~  End If
            Try 
          ~dulla^@204~ urnValue As Integer = Me.Adapter.Dele~dulla^@204~ cuteNonQuery
                Return ~dulla^@204~             Finally
                ~dulla^@204~ onnectionState = System.Data.Connecti~dulla^@204~ d) Then
                    Me.Adapt~dulla^@204~ and.Connection.Close
               ~dulla^@204~         End Try
        End Function~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute(),  _
         System.Componen~dulla^@204~ .HelpKeywordAttribute("vs.data.TableA~dulla^@204~ 
         System.ComponentModel.DataO~dulla^@204~ tribute(System.ComponentModel.DataObj~dulla^@204~ .Insert, true)>  _
        Public Ov~dulla^@204~ idable Function Insert(ByVal PartNo A~dulla^@204~ al InvoiceNo As String, ByVal Custome~dulla^@204~ , ByVal StockCardNo As String) As Int~dulla^@204~      If (PartNo Is Nothing) Then
   ~dulla^@204~ Throw New System.ArgumentNullExceptio~dulla^@204~             Else
                Me.~dulla^@204~ tCommand.Parameters(0).Value = CType(~dulla^@204~ )
            End If
            If~dulla^@204~ s Nothing) Then
                Thro~dulla^@204~ ArgumentNullException("InvoiceNo")
 ~dulla^@204~ se
                Me.Adapter.Insert~dulla^@204~ eters(1).Value = CType(InvoiceNo,Stri~dulla^@204~     End If
            If (CustomerI~dulla^@204~  Then
                Throw New Syst~dulla^@204~ llException("CustomerID")
          ~dulla^@204~            Me.Adapter.InsertCommand.P~dulla^@204~ Value = CType(CustomerID,String)
   ~dulla^@204~ If
            If (StockCardNo Is No~dulla^@204~                 Throw New System.Argu~dulla^@204~ tion("StockCardNo")
            Else~dulla^@204~      Me.Adapter.InsertCommand.Paramet~dulla^@204~ = CType(StockCardNo,String)
        ~dulla^@204~            Dim previousConnectionStat~dulla^@204~ ata.ConnectionState = Me.Adapter.Inse~dulla^@204~ nection.State
            If ((Me.Ad~dulla^@204~ ommand.Connection.State And System.Da~dulla^@204~ State.Open)  _
                     ~dulla^@204~ Data.ConnectionState.Open) Then
    ~dulla^@204~ e.Adapter.InsertCommand.Connection.Op~dulla^@204~    End If
            Try 
        ~dulla^@204~ eturnValue As Integer = Me.Adapter.In~dulla^@204~ xecuteNonQuery
                Retur~dulla^@204~ 
            Finally
              ~dulla^@204~ sConnectionState = System.Data.Connec~dulla^@204~ sed) Then
                    Me.Ada~dulla^@204~ mmand.Connection.Close
             ~dulla^@204~           End Try
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute(),  _
         System.Compon~dulla^@204~ gn.HelpKeywordAttribute("vs.data.Tabl~dulla^@204~ _
         System.ComponentModel.Dat~dulla^@204~ Attribute(System.ComponentModel.DataO~dulla^@204~ pe.Update, true)>  _
        Public ~dulla^@204~ rridable Function Update(ByVal PartNo~dulla^@204~ yVal InvoiceNo As String, ByVal Custo~dulla^@204~ ng, ByVal StockCardNo As String, ByVa~dulla^@204~ rtNo As String, ByVal Original_Invoic~dulla^@204~ , ByVal Original_CustomerID As String~dulla^@204~ nal_StockCardNo As String) As Integer~dulla^@204~  If (PartNo Is Nothing) Then
       ~dulla^@204~ w New System.ArgumentNullException("P~dulla^@204~         Else
                Me.Adap~dulla^@204~ mand.Parameters(0).Value = CType(Part~dulla^@204~            End If
            If (In~dulla^@204~ thing) Then
                Throw Ne~dulla^@204~ mentNullException("InvoiceNo")
     ~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(1).Value = CType(InvoiceNo,String)~dulla^@204~ End If
            If (CustomerID Is~dulla^@204~ n
                Throw New System.A~dulla^@204~ ception("CustomerID")
            El~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ e = CType(CustomerID,String)
       ~dulla^@204~             If (StockCardNo Is Nothin~dulla^@204~             Throw New System.Argument~dulla^@204~ ("StockCardNo")
            Else
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ ype(StockCardNo,String)
            ~dulla^@204~        If (Original_PartNo Is Nothing~dulla^@204~            Throw New System.ArgumentN~dulla^@204~ "Original_PartNo")
            Else~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~  CType(Original_PartNo,String)
     ~dulla^@204~ 
            If (Original_InvoiceNo ~dulla^@204~ hen
                Throw New System~dulla^@204~ Exception("Original_InvoiceNo")
    ~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(5).Value = CType(Original_InvoiceN~dulla^@204~           End If
            If (Ori~dulla^@204~ rID Is Nothing) Then
               ~dulla^@204~ stem.ArgumentNullException("Original_~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(6).Value = CType~dulla^@204~ tomerID,String)
            End If
~dulla^@204~ f (Original_StockCardNo Is Nothing) T~dulla^@204~         Throw New System.ArgumentNull~dulla^@204~ iginal_StockCardNo")
            Els~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~  = CType(Original_StockCardNo,String)~dulla^@204~  End If
            Dim previousConn~dulla^@204~ s System.Data.ConnectionState = Me.Ad~dulla^@204~ ommand.Connection.State
            ~dulla^@204~ er.UpdateCommand.Connection.State And~dulla^@204~ ConnectionState.Open)  _
           ~dulla^@204~ <> System.Data.ConnectionState.Open) ~dulla^@204~          Me.Adapter.UpdateCommand.Con~dulla^@204~ 
            End If
            Try ~dulla^@204~      Dim returnValue As Integer = Me.~dulla^@204~ eCommand.ExecuteNonQuery
           ~dulla^@204~ eturnValue
            Finally
    ~dulla^@204~ f (previousConnectionState = System.D~dulla^@204~ nState.Closed) Then
                ~dulla^@204~ r.UpdateCommand.Connection.Close
   ~dulla^@204~ End If
            End Try
        ~dulla^@204~ 
    End Class
    
    <System.Cod~dulla^@204~ .GeneratedCodeAttribute("System.Data.~dulla^@204~ ataSetGenerator", "2.0.0.0"),  _
   ~dulla^@204~ onentModel.DesignerCategoryAttribute(~dulla^@204~      System.ComponentModel.ToolboxIte~dulla^@204~      System.ComponentModel.DataObject~dulla^@204~ e),  _
     System.ComponentModel.De~dulla^@204~ te("Microsoft.VSDesigner.DataSource.D~dulla^@204~ apterDesigner, Microsoft.VSDesigner"&~dulla^@204~ ", Version=8.0.0.0, Culture=neutral, ~dulla^@204~ n=b03f5f7f11d50a3a"),  _
     System~dulla^@204~ el.Design.HelpKeywordAttribute("vs.da~dulla^@204~ er")>  _
    Partial Public Class St~dulla^@204~ dapter
        Inherits System.Compo~dulla^@204~ ponent
        
        Private Wit~dulla^@204~ ter As System.Data.SqlClient.SqlDataA~dulla^@204~    
        Private _connection As S~dulla^@204~ lClient.SqlConnection
        
    ~dulla^@204~ commandCollection() As System.Data.Sq~dulla^@204~ mmand
        
        Private _cle~dulla^@204~ As Boolean
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Sub New()
            MyBase.New
 ~dulla^@204~ .ClearBeforeFill = true
        End ~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Private ReadO~dulla^@204~ Adapter() As System.Data.SqlClient.Sq~dulla^@204~ 
            Get
                If ~dulla^@204~ Is Nothing) Then
                   ~dulla^@204~ er
                End If
         ~dulla^@204~  Me._adapter
            End Get
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ erty Connection() As System.Data.SqlC~dulla^@204~ ection
            Get
            ~dulla^@204~ onnection Is Nothing) Then
         ~dulla^@204~ .InitConnection
                End If
                Return Me._connection~dulla^@204~ End Get
            Set
           ~dulla^@204~ ection = value
                If (N~dulla^@204~ r.InsertCommand) Is Nothing) Then
  ~dulla^@204~      Me.Adapter.InsertCommand.Connect~dulla^@204~                 End If
             ~dulla^@204~ e.Adapter.DeleteCommand) Is Nothing) ~dulla^@204~              Me.Adapter.DeleteCommand~dulla^@204~  value
                End If
     ~dulla^@204~  (Not (Me.Adapter.UpdateCommand) Is N~dulla^@204~ 
                    Me.Adapter.Updat~dulla^@204~ ection = value
                End I~dulla^@204~       Dim i As Integer = 0
         ~dulla^@204~ le (i < Me.CommandCollection.Length)~dulla^@204~         If (Not (Me.CommandCollection~dulla^@204~ ng) Then
                        CTy~dulla^@204~ Collection(i),System.Data.SqlClient.S~dulla^@204~ nnection = value
                   ~dulla^@204~                 i = (i + 1)
        ~dulla^@204~ 
            End Set
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Protected R~dulla^@204~ rty CommandCollection() As System.Dat~dulla^@204~ qlCommand()
            Get
       ~dulla^@204~ Me._commandCollection Is Nothing) The~dulla^@204~           Me.InitCommandCollection
 ~dulla^@204~   End If
                Return Me._~dulla^@204~ tion
            End Get
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ arBeforeFill() As Boolean
          ~dulla^@204~           Return Me._clearBeforeFill~dulla^@204~ End Get
            Set
           ~dulla^@204~ rBeforeFill = value
            End ~dulla^@204~ End Property
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ate Sub InitAdapter()
            Me~dulla^@204~ ew System.Data.SqlClient.SqlDataAdapt~dulla^@204~    Dim tableMapping As System.Data.Co~dulla^@204~ eMapping = New System.Data.Common.Dat~dulla^@204~ 
            tableMapping.SourceTabl~dulla^@204~             tableMapping.DataSetTable~dulla^@204~ "
            tableMapping.ColumnMap~dulla^@204~ ockCardNo", "StockCardNo")
         ~dulla^@204~ ng.ColumnMappings.Add("PartNo", "Part~dulla^@204~      Me._adapter.TableMappings.Add(ta~dulla^@204~             Me._adapter.DeleteCommand~dulla^@204~ .Data.SqlClient.SqlCommand
         ~dulla^@204~ r.DeleteCommand.Connection = Me.Conne~dulla^@204~       Me._adapter.DeleteCommand.Comma~dulla^@204~ ETE FROM [dbo].[StockCard] WHERE (([S~dulla^@204~  @Original_StockCardNo) AND "& _ 
  ~dulla^@204~  "([PartNo] = @Original_PartNo))"
  ~dulla^@204~ _adapter.DeleteCommand.CommandType = ~dulla^@204~ ommandType.Text
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Original_StockCardNo", Sys~dulla^@204~ bType.NVarChar, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "StockCardNo", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.DeleteCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ rtNo", System.Data.SqlDbType.NVarChar~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ em.Data.DataRowVersion.Original, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~  = New System.Data.SqlClient.SqlComma~dulla^@204~    Me._adapter.InsertCommand.Connecti~dulla^@204~ ction
            Me._adapter.Insert~dulla^@204~ ndText = "INSERT INTO [dbo].[StockCar~dulla^@204~ dNo], [PartNo]) VALUES (@StockCardNo,~dulla^@204~               "rtNo);"&Global.Microso~dulla^@204~ c.ChrW(13)&Global.Microsoft.VisualBas~dulla^@204~ SELECT StockCardNo, PartNo FROM Stock~dulla^@204~ artNo = @PartNo)"
            Me._ad~dulla^@204~ ommand.CommandType = System.Data.Comm~dulla^@204~ 
            Me._adapter.InsertComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ CardNo", System.Data.SqlDbType.NVarCh~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ ", System.Data.DataRowVersion.Current~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@PartNo", System.Data.Sql~dulla^@204~ ar, 0, System.Data.ParameterDirection~dulla^@204~  "PartNo", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand = New System.Data.SqlC~dulla^@204~ and
            Me._adapter.UpdateCo~dulla^@204~ ion = Me.Connection
            Me._~dulla^@204~ eCommand.CommandText = "UPDATE [dbo].~dulla^@204~ ET [StockCardNo] = @StockCardNo, [Par~dulla^@204~ o WHE"& _ 
                "RE (([St~dulla^@204~ @Original_StockCardNo) AND ([PartNo] ~dulla^@204~ artNo));"&Global.Microsoft.VisualBasi~dulla^@204~ obal.Microsoft.VisualBasic.ChrW(10)&"~dulla^@204~ ardNo, PartNo FROM StockCard WHERE (P~dulla^@204~ No)"
            Me._adapter.UpdateC~dulla^@204~ dType = System.Data.CommandType.Text~dulla^@204~ Me._adapter.UpdateCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@Stock~dulla^@204~ em.Data.SqlDbType.NVarChar, 0, System~dulla^@204~ erDirection.Input, 0, 0, "StockCardNo~dulla^@204~ a.DataRowVersion.Current, false, Noth~dulla^@204~ ""))
            Me._adapter.UpdateC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ PartNo", System.Data.SqlDbType.NVarCh~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ stem.Data.DataRowVersion.Current, fal~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@Original_StockCardNo", System~dulla^@204~ pe.NVarChar, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "StockCardNo", System.Data.~dulla^@204~ n.Original, false, Nothing, "", "", "~dulla^@204~     Me._adapter.UpdateCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@O~dulla^@204~ o", System.Data.SqlDbType.NVarChar, 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Par~dulla^@204~ Data.DataRowVersion.Original, false, ~dulla^@204~ "", ""))
        End Sub
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Private Sub InitConnection()~dulla^@204~  Me._connection = New System.Data.Sql~dulla^@204~ nection
            Me._connection.C~dulla^@204~ ng = Global.InventoryControlSystem.My~dulla^@204~ efault.InventoryControlSystemConnecti~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ate Sub InitCommandCollection()
    ~dulla^@204~ ommandCollection = New System.Data.Sq~dulla^@204~ mmand(0) {}
            Me._commandC~dulla^@204~ = New System.Data.SqlClient.SqlComman~dulla^@204~   Me._commandCollection(0).Connection~dulla^@204~ ion
            Me._commandCollectio~dulla^@204~ ext = "SELECT StockCardNo, PartNo FRO~dulla^@204~ rd"
            Me._commandCollectio~dulla^@204~ ype = System.Data.CommandType.Text
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute(),  _
         S~dulla^@204~ ntModel.Design.HelpKeywordAttribute("~dulla^@204~ Adapter"),  _
         System.Compon~dulla^@204~ ObjectMethodAttribute(System.Componen~dulla^@204~ jectMethodType.Fill, true)>  _
     ~dulla^@204~ rloads Overridable Function Fill(ByVa~dulla^@204~ s InventoryControlSystemDataSet.Stock~dulla^@204~ ) As Integer
            Me.Adapter.~dulla^@204~  = Me.CommandCollection(0)
         ~dulla^@204~ arBeforeFill = true) Then
          ~dulla^@204~ le.Clear
            End If
       ~dulla^@204~ rnValue As Integer = Me.Adapter.Fill(~dulla^@204~            Return returnValue
      ~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute(),  _
         S~dulla^@204~ ntModel.Design.HelpKeywordAttribute("~dulla^@204~ Adapter"),  _
         System.Compon~dulla^@204~ ObjectMethodAttribute(System.Componen~dulla^@204~ jectMethodType.[Select], true)>  _
 ~dulla^@204~  Overloads Overridable Function GetDa~dulla^@204~ toryControlSystemDataSet.StockCardDat~dulla^@204~        Me.Adapter.SelectCommand = Me.~dulla^@204~ tion(0)
            Dim dataTable As~dulla^@204~ trolSystemDataSet.StockCardDataTable ~dulla^@204~ ryControlSystemDataSet.StockCardDataTable
            Me.Adapter.Fill(dataTabl~dulla^@204~    Return dataTable
        End Func~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute(),  _
         System.Comp~dulla^@204~ sign.HelpKeywordAttribute("vs.data.Ta~dulla^@204~   _
        Public Overloads Overrid~dulla^@204~  Update(ByVal dataTable As InventoryC~dulla^@204~ ataSet.StockCardDataTable) As Integer~dulla^@204~  Return Me.Adapter.Update(dataTable)~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute(),  _
   ~dulla^@204~ ComponentModel.Design.HelpKeywordAttr~dulla^@204~ a.TableAdapter")>  _
        Public ~dulla^@204~ rridable Function Update(ByVal dataSe~dulla^@204~ yControlSystemDataSet) As Integer
  ~dulla^@204~ urn Me.Adapter.Update(dataSet, "Stock~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute(), ~dulla^@204~ System.ComponentModel.Design.HelpKeyw~dulla^@204~ "vs.data.TableAdapter")>  _
        ~dulla^@204~ ads Overridable Function Update(ByVal~dulla^@204~ ystem.Data.DataRow) As Integer
     ~dulla^@204~  Me.Adapter.Update(New System.Data.Da~dulla^@204~ Row})
        End Function
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
         System.ComponentModel.Des~dulla^@204~ rdAttribute("vs.data.TableAdapter")> ~dulla^@204~ ublic Overloads Overridable Function ~dulla^@204~ dataRows() As System.Data.DataRow) As~dulla^@204~          Return Me.Adapter.Update(dat~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute(), ~dulla^@204~ System.ComponentModel.Design.HelpKeyw~dulla^@204~ "vs.data.TableAdapter"),  _
        ~dulla^@204~ nentModel.DataObjectMethodAttribute(S~dulla^@204~ ntModel.DataObjectMethodType.Delete, ~dulla^@204~       Public Overloads Overridable Fu~dulla^@204~ (ByVal Original_StockCardNo As String~dulla^@204~ nal_PartNo As String) As Integer
   ~dulla^@204~ Original_StockCardNo Is Nothing) Then~dulla^@204~      Throw New System.ArgumentNullExc~dulla^@204~ nal_StockCardNo")
            Else
~dulla^@204~    Me.Adapter.DeleteCommand.Parameter~dulla^@204~ CType(Original_StockCardNo,String)
 ~dulla^@204~ d If
            If (Original_PartNo~dulla^@204~ Then
                Throw New Syste~dulla^@204~ lException("Original_PartNo")
      ~dulla^@204~                Me.Adapter.DeleteComma~dulla^@204~ (1).Value = CType(Original_PartNo,Str~dulla^@204~      End If
            Dim previous~dulla^@204~ te As System.Data.ConnectionState = M~dulla^@204~ eteCommand.Connection.State
        ~dulla^@204~ dapter.DeleteCommand.Connection.State~dulla^@204~ ata.ConnectionState.Open)  _
       ~dulla^@204~     <> System.Data.ConnectionState.Op~dulla^@204~              Me.Adapter.DeleteCommand~dulla^@204~ pen
            End If
            ~dulla^@204~          Dim returnValue As Integer =~dulla^@204~ eleteCommand.ExecuteNonQuery
       ~dulla^@204~ rn returnValue
            Finally
~dulla^@204~    If (previousConnectionState = Syst~dulla^@204~ ctionState.Closed) Then
            ~dulla^@204~ apter.DeleteCommand.Connection.Close~dulla^@204~     End If
            End Try
    ~dulla^@204~ ion
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute(),  _
        ~dulla^@204~ nentModel.Design.HelpKeywordAttribute~dulla^@204~ leAdapter"),  _
         System.Comp~dulla^@204~ taObjectMethodAttribute(System.Compon~dulla^@204~ ObjectMethodType.Insert, true)>  _
 ~dulla^@204~  Overloads Overridable Function Inser~dulla^@204~ CardNo As String, ByVal PartNo As Str~dulla^@204~ er
            If (StockCardNo Is No~dulla^@204~                 Throw New System.Argu~dulla^@204~ tion("StockCardNo")
            Else~dulla^@204~      Me.Adapter.InsertCommand.Paramet~dulla^@204~ = CType(StockCardNo,String)
        ~dulla^@204~            If (PartNo Is Nothing) The~dulla^@204~       Throw New System.ArgumentNullEx~dulla^@204~ No")
            Else
             ~dulla^@204~ .InsertCommand.Parameters(1).Value = ~dulla^@204~ String)
            End If
        ~dulla^@204~ ousConnectionState As System.Data.Con~dulla^@204~ = Me.Adapter.InsertCommand.Connection~dulla^@204~        If ((Me.Adapter.InsertCommand.~dulla^@204~ ate And System.Data.ConnectionState.O~dulla^@204~                     <> System.Data.Co~dulla^@204~ .Open) Then
                Me.Adapt~dulla^@204~ and.Connection.Open
            End ~dulla^@204~    Try 
                Dim returnVa~dulla^@204~ r = Me.Adapter.InsertCommand.ExecuteN~dulla^@204~             Return returnValue
     ~dulla^@204~ y
                If (previousConnec~dulla^@204~ ystem.Data.ConnectionState.Closed) Th~dulla^@204~            Me.Adapter.InsertCommand.C~dulla^@204~ se
                End If
         ~dulla^@204~        End Function
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~     System.ComponentModel.Design.Help~dulla^@204~ ute("vs.data.TableAdapter"),  _
    ~dulla^@204~ omponentModel.DataObjectMethodAttribu~dulla^@204~ ponentModel.DataObjectMethodType.Upda~dulla^@204~ 
        Public Overloads Overridabl~dulla^@204~ date(ByVal StockCardNo As String, ByV~dulla^@204~ String, ByVal Original_StockCardNo As~dulla^@204~ l Original_PartNo As String) As Integ~dulla^@204~    If (StockCardNo Is Nothing) Then
~dulla^@204~    Throw New System.ArgumentNullExcep~dulla^@204~ rdNo")
            Else
           ~dulla^@204~ er.UpdateCommand.Parameters(0).Value ~dulla^@204~ CardNo,String)
            End If
 ~dulla^@204~  (PartNo Is Nothing) Then
          ~dulla^@204~ ew System.ArgumentNullException("Part~dulla^@204~      Else
                Me.Adapter~dulla^@204~ d.Parameters(1).Value = CType(PartNo,~dulla^@204~         End If
            If (Origi~dulla^@204~ No Is Nothing) Then
                ~dulla^@204~ tem.ArgumentNullException("Original_S~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(2).Value = CType~dulla^@204~ ckCardNo,String)
            End If~dulla^@204~ If (Original_PartNo Is Nothing) Then~dulla^@204~     Throw New System.ArgumentNullExce~dulla^@204~ al_PartNo")
            Else
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(3).V~dulla^@204~ Original_PartNo,String)
            ~dulla^@204~        Dim previousConnectionState As~dulla^@204~ ConnectionState = Me.Adapter.UpdateCo~dulla^@204~ ion.State
            If ((Me.Adapte~dulla^@204~ nd.Connection.State And System.Data.C~dulla^@204~ e.Open)  _
                        <~dulla^@204~ .ConnectionState.Open) Then
        ~dulla^@204~ apter.UpdateCommand.Connection.Open
~dulla^@204~ nd If
            Try 
            ~dulla^@204~ nValue As Integer = Me.Adapter.Update~dulla^@204~ teNonQuery
                Return re~dulla^@204~           Finally
                If~dulla^@204~ nectionState = System.Data.Connection~dulla^@204~  Then
                    Me.Adapter~dulla^@204~ d.Connection.Close
                E~dulla^@204~       End Try
        End Function
~dulla^@204~ 
    
    <System.CodeDom.Compiler.~dulla^@204~ Attribute("System.Data.Design.TypedDa~dulla^@204~ r", "2.0.0.0"),  _
     System.Compo~dulla^@204~ ignerCategoryAttribute("code"),  _
 ~dulla^@204~ mponentModel.ToolboxItem(true),  _
 ~dulla^@204~ mponentModel.DataObjectAttribute(true~dulla^@204~ ystem.ComponentModel.DesignerAttribut~dulla^@204~ VSDesigner.DataSource.Design.TableAda~dulla^@204~  Microsoft.VSDesigner"& _ 
        "~dulla^@204~ .0.0, Culture=neutral, PublicKeyToken~dulla^@204~ 0a3a"),  _
     System.ComponentMode~dulla^@204~ KeywordAttribute("vs.data.TableAdapte~dulla^@204~ Partial Public Class StockCardDetailT~dulla^@204~         Inherits System.ComponentMode~dulla^@204~         
        Private WithEvents ~dulla^@204~ ystem.Data.SqlClient.SqlDataAdapter
~dulla^@204~      Private _connection As System.Da~dulla^@204~ SqlConnection
        
        Priv~dulla^@204~ ollection() As System.Data.SqlClient.~dulla^@204~        
        Private _clearBefore~dulla^@204~ an
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ ()
            MyBase.New
            Me.ClearBeforeFill = true
        End ~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Private ReadO~dulla^@204~ Adapter() As System.Data.SqlClient.Sq~dulla^@204~ 
            Get
                If ~dulla^@204~ Is Nothing) Then
                   ~dulla^@204~ er
                End If
         ~dulla^@204~  Me._adapter
            End Get
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ erty Connection() As System.Data.SqlC~dulla^@204~ ection
            Get
            ~dulla^@204~ onnection Is Nothing) Then
         ~dulla^@204~ .InitConnection
                End ~dulla^@204~        Return Me._connection
       ~dulla^@204~ 
            Set
                Me.~dulla^@204~  value
                If (Not (Me.A~dulla^@204~ Command) Is Nothing) Then
          ~dulla^@204~ Adapter.InsertCommand.Connection = va~dulla^@204~         End If
                If (N~dulla^@204~ r.DeleteCommand) Is Nothing) Then
  ~dulla^@204~      Me.Adapter.DeleteCommand.Connect~dulla^@204~                 End If
             ~dulla^@204~ e.Adapter.UpdateCommand) Is Nothing) ~dulla^@204~              Me.Adapter.UpdateCommand~dulla^@204~  value
                End If
     ~dulla^@204~ m i As Integer = 0
                D~dulla^@204~ Me.CommandCollection.Length)
       ~dulla^@204~ If (Not (Me.CommandCollection(i)) Is ~dulla^@204~ 
                        CType(Me.Co~dulla^@204~ on(i),System.Data.SqlClient.SqlComman~dulla^@204~  = value
                    End If~dulla^@204~         i = (i + 1)
                ~dulla^@204~      End Set
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Protected ReadOnly ~dulla^@204~ andCollection() As System.Data.SqlCli~dulla^@204~ d()
            Get
               ~dulla^@204~ andCollection Is Nothing) Then
     ~dulla^@204~   Me.InitCommandCollection
         ~dulla^@204~ 
                Return Me._commandC~dulla^@204~           End Get
        End Proper~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Propert~dulla^@204~ Fill() As Boolean
            Get
 ~dulla^@204~   Return Me._clearBeforeFill
       ~dulla^@204~ 
            Set
                Me.~dulla^@204~ ill = value
            End Set
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ InitAdapter()
            Me._adapte~dulla^@204~ m.Data.SqlClient.SqlDataAdapter
    ~dulla^@204~ ableMapping As System.Data.Common.Dat~dulla^@204~  = New System.Data.Common.DataTableMa~dulla^@204~       tableMapping.SourceTable = "Tab~dulla^@204~     tableMapping.DataSetTable = "Stoc~dulla^@204~ 
            tableMapping.ColumnMappi~dulla^@204~ iceNo", "InvoiceNo")
            tab~dulla^@204~ umnMappings.Add("DateOfSale", "DateOf~dulla^@204~        tableMapping.ColumnMappings.Ad~dulla^@204~ o", "StockCardNo")
            table~dulla^@204~ nMappings.Add("DateRecieved", "DateRe~dulla^@204~          tableMapping.ColumnMappings.~dulla^@204~ g", "Packaging")
            tableMa~dulla^@204~ appings.Add("QtyRecieved", "QtyReciev~dulla^@204~      tableMapping.ColumnMappings.Add(~dulla^@204~ "QtyIssued")
            tableMappin~dulla^@204~ ngs.Add("QtyBalance", "QtyBalance")
~dulla^@204~ ableMapping.ColumnMappings.Add("Inv_ ~dulla^@204~ _ &_ D_O")
            Me._adapter.T~dulla^@204~ Add(tableMapping)
            Me._ad~dulla^@204~ ommand = New System.Data.SqlClient.Sq~dulla^@204~          Me._adapter.DeleteCommand.Co~dulla^@204~ .Connection
            Me._adapter.~dulla^@204~ .CommandText = "DELETE FROM [dbo].[St~dulla^@204~ ] WHERE (([InvoiceNo] = @Original_Inv~dulla^@204~ _ 
                "D ([DateOfSale] ~dulla^@204~ ateOfSale) AND ([StockCardNo] = @Orig~dulla^@204~ d"& _ 
                "No) AND ([Da~dulla^@204~  @Original_DateRecieved) AND ([Packag~dulla^@204~ nal_P"& _ 
                "ackaging~dulla^@204~ ll_QtyRecieved = 1 AND [QtyRecieved] ~dulla^@204~ [QtyRecie"& _ 
                "ved]~dulla^@204~ QtyRecieved)) AND ((@IsNull_QtyIssued~dulla^@204~ Issued] IS NU"& _ 
                "~dulla^@204~ ssued] = @Original_QtyIssued)) AND ([~dulla^@204~  @Original_QtyBal"& _ 
             ~dulla^@204~  ((@p3 = 1 AND [Inv_ &_ D.O] IS NULL)~dulla^@204~  D.O] = @p2)))"
            Me._adap~dulla^@204~ mand.CommandType = System.Data.Comman~dulla^@204~            Me._adapter.DeleteCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ l_InvoiceNo", System.Data.SqlDbType.N~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ eNo", System.Data.DataRowVersion.Orig~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ eteCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@Original_DateOfSale"~dulla^@204~ .SqlDbType.DateTime, 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "DateOfSale", Syste~dulla^@204~ wVersion.Original, false, Nothing, ""~dulla^@204~            Me._adapter.DeleteCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ l_StockCardNo", System.Data.SqlDbType~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ kCardNo", System.Data.DataRowVersion.~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .DeleteCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@Original_DateRec~dulla^@204~ m.Data.SqlDbType.DateTime, 0, System.~dulla^@204~ rDirection.Input, 0, 0, "DateRecieved~dulla^@204~ a.DataRowVersion.Original, false, Not~dulla^@204~  ""))
            Me._adapter.Delete~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @Original_Packaging", System.Data.Sql~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ Packaging", System.Data.DataRowVersio~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.DeleteCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@IsNull_QtyReci~dulla^@204~ .Data.SqlDbType.Int, 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "QtyRecieved", Syst~dulla^@204~ owVersion.Original, true, Nothing, ""~dulla^@204~            Me._adapter.DeleteCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ l_QtyRecieved", System.Data.SqlDbType~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ ed", System.Data.DataRowVersion.Origi~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@IsNull_QtyIssued", Sy~dulla^@204~ DbType.Int, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "QtyIssued", System.Data.Dat~dulla^@204~ riginal, true, Nothing, "", "", ""))~dulla^@204~ Me._adapter.DeleteCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@Origi~dulla^@204~ ", System.Data.SqlDbType.Int, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "QtyIssued~dulla^@204~ a.DataRowVersion.Original, false, Not~dulla^@204~  ""))
            Me._adapter.Delete~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @Original_QtyBalance", System.Data.Sq~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ yBalance", System.Data.DataRowVersion~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.DeleteCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@p3", System.Dat~dulla^@204~ nt, 0, System.Data.ParameterDirection~dulla^@204~  "Inv_ &_ D.O", System.Data.DataRowVe~dulla^@204~ l, true, Nothing, "", "", ""))
     ~dulla^@204~ apter.DeleteCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@p2", System~dulla^@204~ pe.[Char], 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "Inv_ &_ D.O", System.Data.Da~dulla^@204~ Original, false, Nothing, "", "", "")~dulla^@204~   Me._adapter.InsertCommand = New Sys~dulla^@204~ lient.SqlCommand
            Me._ada~dulla^@204~ mmand.Connection = Me.Connection
   ~dulla^@204~ adapter.InsertCommand.CommandText = "~dulla^@204~ dbo].[StockCardDetail] ([InvoiceNo], ~dulla^@204~  [StockCardNo], [D"& _ 
            ~dulla^@204~ ved], [Packaging], [QtyRecieved], [Qt~dulla^@204~ yBalance], [Inv_ &_ D."& _ 
        ~dulla^@204~ VALUES (@InvoiceNo, @DateOfSale, @StockCardNo, @DateRecieved, @Packaging, @Q"& ~dulla^@204~        "tyRecieved, @QtyIssued, @QtyB~dulla^@204~ "&Global.Microsoft.VisualBasic.ChrW(1~dulla^@204~ rosoft.VisualBasic.ChrW(10)&"SELECT I~dulla^@204~ eOfSale, StockC"& _ 
               ~dulla^@204~ Recieved, Packaging, QtyRecieved, Qty~dulla^@204~ lance, [Inv_ &_ D.O"& _ 
           ~dulla^@204~ StockCardDetail WHERE (DateOfSale = @~dulla^@204~ ND (InvoiceNo = @Invoic"& _ 
       ~dulla^@204~ )"
            Me._adapter.InsertCom~dulla^@204~ ype = System.Data.CommandType.Text
 ~dulla^@204~ ._adapter.InsertCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Invoice~dulla^@204~ ata.SqlDbType.NVarChar, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "InvoiceNo", Sys~dulla^@204~ RowVersion.Current, false, Nothing, "~dulla^@204~             Me._adapter.InsertCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ Sale", System.Data.SqlDbType.DateTime~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ System.Data.DataRowVersion.Current, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@StockCardNo", System.Data.S~dulla^@204~ Char, 0, System.Data.ParameterDirecti~dulla^@204~ 0, "StockCardNo", System.Data.DataRow~dulla^@204~ nt, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.InsertCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@DateRecie~dulla^@204~ Data.SqlDbType.DateTime, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "DateRecieved",~dulla^@204~ DataRowVersion.Current, false, Nothin~dulla^@204~ ))
            Me._adapter.InsertCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ ckaging", System.Data.SqlDbType.[Char~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ System.Data.DataRowVersion.Current, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@QtyRecieved", System.Data.S~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ tyRecieved", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.InsertCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@QtyIssued", Sy~dulla^@204~ DbType.Int, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "QtyIssued", System.Data.Dat~dulla^@204~ urrent, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.InsertCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@QtyBa~dulla^@204~ m.Data.SqlDbType.Int, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "QtyBalance", Syst~dulla^@204~ owVersion.Current, false, Nothing, ""~dulla^@204~            Me._adapter.InsertCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ stem.Data.SqlDbType.[Char], 0, System~dulla^@204~ erDirection.Input, 0, 0, "Inv_ &_ D.O~dulla^@204~ a.DataRowVersion.Current, false, Noth~dulla^@204~ ""))
            Me._adapter.UpdateC~dulla^@204~ System.Data.SqlClient.SqlCommand
   ~dulla^@204~ adapter.UpdateCommand.Connection = Me~dulla^@204~             Me._adapter.UpdateCommand~dulla^@204~ = "UPDATE [dbo].[StockCardDetail] SET~dulla^@204~ = @InvoiceNo, [DateOfSale] = @Date"& ~dulla^@204~        "OfSale, [StockCardNo] = @Stoc~dulla^@204~ eRecieved] = @DateRecieved, [Packagin~dulla^@204~            "] = @Packaging, [QtyRecie~dulla^@204~ cieved, [QtyIssued] = @QtyIssued, [Qt~dulla^@204~                "nce] = @QtyBalance, [~dulla^@204~ = @p1 WHERE (([InvoiceNo] = @Original~dulla^@204~  
                "o) AND ([DateOfSa~dulla^@204~ al_DateOfSale) AND ([StockCardNo] = @~dulla^@204~ "& _ 
                "kCardNo) AND ~dulla^@204~ d] = @Original_DateRecieved) AND ([Pa~dulla^@204~ rigi"& _ 
                "nal_Packa~dulla^@204~ IsNull_QtyRecieved = 1 AND [QtyReciev~dulla^@204~ OR ([Qty"& _ 
                "Recie~dulla^@204~ nal_QtyRecieved)) AND ((@IsNull_QtyIs~dulla^@204~ [QtyIssued] "& _ 
                "I~dulla^@204~ QtyIssued] = @Original_QtyIssued)) AN~dulla^@204~ e] = @Original_Q"& _ 
              ~dulla^@204~  AND ((@p3 = 1 AND [Inv_ &_ D.O] IS N~dulla^@204~ _ &_ D.O] = @p2)));"&Global.Microsoft~dulla^@204~ ChrW(13)&Global.Microsoft.VisualBasic~dulla^@204~ LECT InvoiceNo, DateOfSale, StockCard~dulla^@204~ ved, Packaging, QtyRecieved"& _ 
   ~dulla^@204~ ", QtyIssued, QtyBalance, [Inv_ &_ D.~dulla^@204~ CardDetail WHERE (DateOfSale = "& _ ~dulla^@204~     "@DateOfSale) AND (InvoiceNo = @I~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~  System.Data.CommandType.Text
      ~dulla^@204~ pter.UpdateCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@InvoiceNo", ~dulla^@204~ qlDbType.NVarChar, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "InvoiceNo", System.D~dulla^@204~ rsion.Current, false, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ , System.Data.SqlDbType.DateTime, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "DateO~dulla^@204~ m.Data.DataRowVersion.Current, false,~dulla^@204~  "", ""))
            Me._adapter.Up~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@StockCardNo", System.Data.SqlDbT~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ tockCardNo", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@DateRecieved",~dulla^@204~ SqlDbType.DateTime, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "DateRecieved", Syst~dulla^@204~ owVersion.Current, false, Nothing, ""~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ ng", System.Data.SqlDbType.[Char], 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Pack~dulla^@204~ m.Data.DataRowVersion.Current, false,~dulla^@204~  "", ""))
            Me._adapter.Up~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@QtyRecieved", System.Data.SqlDbT~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ ieved", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ dateCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@QtyIssued", System.~dulla^@204~ e.Int, 0, System.Data.ParameterDirect~dulla^@204~  0, "QtyIssued", System.Data.DataRowV~dulla^@204~ t, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@QtyBalance~dulla^@204~ a.SqlDbType.Int, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "QtyBalance", System.Da~dulla^@204~ sion.Current, false, Nothing, "", "",~dulla^@204~       Me._adapter.UpdateCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ Data.SqlDbType.[Char], 0, System.Data~dulla^@204~ ection.Input, 0, 0, "Inv_ &_ D.O", Sy~dulla^@204~ aRowVersion.Current, false, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ nal_InvoiceNo", System.Data.SqlDbType~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ iceNo", System.Data.DataRowVersion.Or~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ pdateCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@Original_DateOfSal~dulla^@204~ ta.SqlDbType.DateTime, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "DateOfSale", Sys~dulla^@204~ RowVersion.Original, false, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ nal_StockCardNo", System.Data.SqlDbTy~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ ockCardNo", System.Data.DataRowVersio~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Original_DateR~dulla^@204~ tem.Data.SqlDbType.DateTime, 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "DateReciev~dulla^@204~ ata.DataRowVersion.Original, false, N~dulla^@204~ ", ""))
            Me._adapter.Upda~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@Original_Packaging", System.Data.S~dulla^@204~ r], 0, System.Data.ParameterDirection.Input, 0, 0, "Packaging", System.Data.Dat~dulla^@204~ riginal, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@IsNu~dulla^@204~ d", System.Data.SqlDbType.Int, 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "QtyRecie~dulla^@204~ Data.DataRowVersion.Original, true, N~dulla^@204~ ", ""))
            Me._adapter.Upda~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@Original_QtyRecieved", System.Data~dulla^@204~ t, 0, System.Data.ParameterDirection.~dulla^@204~ "QtyRecieved", System.Data.DataRowVer~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.UpdateCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@IsNull_QtyI~dulla^@204~ m.Data.SqlDbType.Int, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "QtyIssued", Syste~dulla^@204~ wVersion.Original, true, Nothing, "",~dulla^@204~           Me._adapter.UpdateCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~ _QtyIssued", System.Data.SqlDbType.In~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ System.Data.DataRowVersion.Original, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Original_QtyBalance", Syst~dulla^@204~ Type.Int, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "QtyBalance", System.Data.Data~dulla^@204~ iginal, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.UpdateCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@p3", ~dulla^@204~ qlDbType.Int, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "Inv_ &_ D.O", System.Data~dulla^@204~ on.Original, true, Nothing, "", "", "~dulla^@204~     Me._adapter.UpdateCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@p~dulla^@204~ ta.SqlDbType.[Char], 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "Inv_ &_ D.O", Syst~dulla^@204~ owVersion.Original, false, Nothing, "~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ rivate Sub InitConnection()
        ~dulla^@204~ ction = New System.Data.SqlClient.Sql~dulla^@204~            Me._connection.ConnectionS~dulla^@204~ l.InventoryControlSystem.My.MySetting~dulla^@204~ entoryControlSystemConnectionString
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ itCommandCollection()
            Me~dulla^@204~ ection = New System.Data.SqlClient.Sq~dulla^@204~ }
            Me._commandCollection(~dulla^@204~ em.Data.SqlClient.SqlCommand
       ~dulla^@204~ andCollection(0).Connection = Me.Conn~dulla^@204~        Me._commandCollection(0).Comma~dulla^@204~ ECT InvoiceNo, DateOfSale, StockCardN~dulla^@204~ ed, Packaging, QtyRecieved, "& _ 
  ~dulla^@204~  "QtyIssued, QtyBalance, [Inv_ &_ D.O~dulla^@204~ ockCardDetail"
            Me._comma~dulla^@204~ 0).CommandType = System.Data.CommandT~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ tem.ComponentModel.Design.HelpKeyword~dulla^@204~ .data.TableAdapter"),  _
         Sy~dulla^@204~ tModel.DataObjectMethodAttribute(Syst~dulla^@204~ odel.DataObjectMethodType.Fill, true)~dulla^@204~  Public Overloads Overridable Functio~dulla^@204~ dataTable As InventoryControlSystemDa~dulla^@204~ rdDetailDataTable) As Integer
      ~dulla^@204~ ter.SelectCommand = Me.CommandCollect~dulla^@204~        If (Me.ClearBeforeFill = true)~dulla^@204~           dataTable.Clear
          ~dulla^@204~          Dim returnValue As Integer =~dulla^@204~ ill(dataTable)
            Return re~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~    System.ComponentModel.Design.HelpK~dulla^@204~ te("vs.data.TableAdapter"),  _
     ~dulla^@204~ mponentModel.DataObjectMethodAttribut~dulla^@204~ onentModel.DataObjectMethodType.[Sele~dulla^@204~ _
        Public Overloads Overridab~dulla^@204~ etData() As InventoryControlSystemDat~dulla^@204~ dDetailDataTable
            Me.Adap~dulla^@204~ mand = Me.CommandCollection(0)
     ~dulla^@204~ taTable As InventoryControlSystemData~dulla^@204~ DetailDataTable = New InventoryContro~dulla^@204~ t.StockCardDetailDataTable
         ~dulla^@204~ .Fill(dataTable)
            Return ~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~    System.ComponentModel.Design.HelpK~dulla^@204~ te("vs.data.TableAdapter")>  _
     ~dulla^@204~ rloads Overridable Function Update(By~dulla^@204~  As InventoryControlSystemDataSet.Sto~dulla^@204~ ataTable) As Integer
            Ret~dulla^@204~ r.Update(dataTable)
        End Func~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute(),  _
         System.Comp~dulla^@204~ sign.HelpKeywordAttribute("vs.data.Ta~dulla^@204~   _
        Public Overloads Overrid~dulla^@204~  Update(ByVal dataSet As InventoryCon~dulla^@204~ aSet) As Integer
            Return ~dulla^@204~ date(dataSet, "StockCardDetail")
   ~dulla^@204~ tion
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute(),  _
       ~dulla^@204~ onentModel.Design.HelpKeywordAttribut~dulla^@204~ bleAdapter")>  _
        Public Over~dulla^@204~ able Function Update(ByVal dataRow As~dulla^@204~ DataRow) As Integer
            Retu~dulla^@204~ .Update(New System.Data.DataRow() {da~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute(),~dulla^@204~  System.ComponentModel.Design.HelpKey~dulla^@204~ ("vs.data.TableAdapter")>  _
       ~dulla^@204~ oads Overridable Function Update(ByVa~dulla^@204~ As System.Data.DataRow) As Integer
 ~dulla^@204~ turn Me.Adapter.Update(dataRows)
   ~dulla^@204~ tion
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute(),  _
       ~dulla^@204~ onentModel.Design.HelpKeywordAttribut~dulla^@204~ bleAdapter"),  _
         System.Com~dulla^@204~ ataObjectMethodAttribute(System.Compo~dulla^@204~ aObjectMethodType.Delete, true)>  _
~dulla^@204~ c Overloads Overridable Function Dele~dulla^@204~ inal_InvoiceNo As String, ByVal Origi~dulla^@204~ e As Date, ByVal Original_StockCardNo~dulla^@204~ yVal Original_DateRecieved As Date, B~dulla^@204~ _Packaging As String, ByVal Original_~dulla^@204~ s System.Nullable(Of Integer), ByVal ~dulla^@204~ ssued As System.Nullable(Of Integer),~dulla^@204~ al_QtyBalance As Integer, ByVal p2 As~dulla^@204~ nteger
            If (Original_Invo~dulla^@204~ ing) Then
                Throw New ~dulla^@204~ ntNullException("Original_InvoiceNo")~dulla^@204~  Else
                Me.Adapter.Del~dulla^@204~ rameters(0).Value = CType(Original_In~dulla^@204~ g)
            End If
            M~dulla^@204~ eteCommand.Parameters(1).Value = CTyp~dulla^@204~ teOfSale,Date)
            If (Origi~dulla^@204~ No Is Nothing) Then
                ~dulla^@204~ tem.ArgumentNullException("Original_S~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(2).Value = CType~dulla^@204~ ckCardNo,String)
            End If~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(3~dulla^@204~ pe(Original_DateRecieved,Date)
     ~dulla^@204~ iginal_Packaging Is Nothing) Then
  ~dulla^@204~  Throw New System.ArgumentNullExcepti~dulla^@204~ Packaging")
            Else
      ~dulla^@204~ Adapter.DeleteCommand.Parameters(4).V~dulla^@204~ Original_Packaging,String)
         ~dulla^@204~           If (Original_QtyRecieved.Ha~dulla^@204~ ) Then
                Me.Adapter.De~dulla^@204~ arameters(5).Value = CType(0,Object)~dulla^@204~     Me.Adapter.DeleteCommand.Paramete~dulla^@204~  CType(Original_QtyRecieved.Value,Int~dulla^@204~       Else
                Me.Adapte~dulla^@204~ nd.Parameters(5).Value = CType(1,Obje~dulla^@204~         Me.Adapter.DeleteCommand.Para~dulla^@204~ ue = System.DBNull.Value
           ~dulla^@204~         If (Original_QtyIssued.HasVal~dulla^@204~ en
                Me.Adapter.Delete~dulla^@204~ eters(7).Value = CType(0,Object)
   ~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(8~dulla^@204~ pe(Original_QtyIssued.Value,Integer)
            Else
                Me.Adap~dulla^@204~ mand.Parameters(7).Value = CType(1,Ob~dulla^@204~           Me.Adapter.DeleteCommand.Pa~dulla^@204~ alue = System.DBNull.Value
         ~dulla^@204~           Me.Adapter.DeleteCommand.Pa~dulla^@204~ alue = CType(Original_QtyBalance,Inte~dulla^@204~      If (p2 Is Nothing) Then
       ~dulla^@204~ dapter.DeleteCommand.Parameters(10).V~dulla^@204~ 1,Object)
                Me.Adapter~dulla^@204~ d.Parameters(11).Value = System.DBNul~dulla^@204~         Else
                Me.Adap~dulla^@204~ mand.Parameters(10).Value = CType(0,O~dulla^@204~            Me.Adapter.DeleteCommand.P~dulla^@204~ .Value = CType(p2,String)
          ~dulla^@204~          Dim previousConnectionState ~dulla^@204~ a.ConnectionState = Me.Adapter.Delete~dulla^@204~ ction.State
            If ((Me.Adap~dulla^@204~ mand.Connection.State And System.Data~dulla^@204~ ate.Open)  _
                       ~dulla^@204~ ta.ConnectionState.Open) Then
      ~dulla^@204~ Adapter.DeleteCommand.Connection.Open~dulla^@204~  End If
            Try 
          ~dulla^@204~ urnValue As Integer = Me.Adapter.Dele~dulla^@204~ cuteNonQuery
                Return ~dulla^@204~             Finally
                ~dulla^@204~ onnectionState = System.Data.Connecti~dulla^@204~ d) Then
                    Me.Adapt~dulla^@204~ and.Connection.Close
               ~dulla^@204~         End Try
        End Function~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute(),  _
         System.Componen~dulla^@204~ .HelpKeywordAttribute("vs.data.TableA~dulla^@204~ 
         System.ComponentModel.DataO~dulla^@204~ tribute(System.ComponentModel.DataObj~dulla^@204~ .Insert, true)>  _
        Public Ov~dulla^@204~ idable Function Insert(ByVal InvoiceN~dulla^@204~ ByVal DateOfSale As Date, ByVal Stock~dulla^@204~ ing, ByVal DateRecieved As Date, ByVa~dulla^@204~ s String, ByVal QtyRecieved As System~dulla^@204~ Integer), ByVal QtyIssued As System.N~dulla^@204~ teger), ByVal QtyBalance As Integer, ~dulla^@204~ tring) As Integer
            If (In~dulla^@204~ thing) Then
                Throw Ne~dulla^@204~ mentNullException("InvoiceNo")
     ~dulla^@204~                 Me.Adapter.InsertComm~dulla^@204~ s(0).Value = CType(InvoiceNo,String)~dulla^@204~ End If
            Me.Adapter.Insert~dulla^@204~ eters(1).Value = CType(DateOfSale,Dat~dulla^@204~    If (StockCardNo Is Nothing) Then
~dulla^@204~    Throw New System.ArgumentNullExcep~dulla^@204~ rdNo")
            Else
           ~dulla^@204~ er.InsertCommand.Parameters(2).Value ~dulla^@204~ CardNo,String)
            End If
 ~dulla^@204~ .Adapter.InsertCommand.Parameters(3).~dulla^@204~ (DateRecieved,Date)
            If (~dulla^@204~ Nothing) Then
                Throw ~dulla^@204~ gumentNullException("Packaging")
   ~dulla^@204~ 
                Me.Adapter.InsertCo~dulla^@204~ ers(4).Value = CType(Packaging,String~dulla^@204~   End If
            If (QtyRecieved~dulla^@204~ rue) Then
                Me.Adapter~dulla^@204~ d.Parameters(5).Value = CType(QtyReci~dulla^@204~ teger)
            Else
           ~dulla^@204~ er.InsertCommand.Parameters(5).Value ~dulla^@204~ ll.Value
            End If
       ~dulla^@204~ ssued.HasValue = true) Then
        ~dulla^@204~ apter.InsertCommand.Parameters(6).Val~dulla^@204~ yIssued.Value,Integer)
            E~dulla^@204~         Me.Adapter.InsertCommand.Para~dulla^@204~ ue = System.DBNull.Value
           ~dulla^@204~         Me.Adapter.InsertCommand.Para~dulla^@204~ ue = CType(QtyBalance,Integer)
     ~dulla^@204~  Is Nothing) Then
                Me~dulla^@204~ rtCommand.Parameters(8).Value = Syste~dulla^@204~ e
            Else
                ~dulla^@204~ sertCommand.Parameters(8).Value = CTy~dulla^@204~ 
            End If
            Dim~dulla^@204~ ectionState As System.Data.Connection~dulla^@204~ apter.InsertCommand.Connection.State~dulla^@204~ If ((Me.Adapter.InsertCommand.Connect~dulla^@204~  System.Data.ConnectionState.Open)  _~dulla^@204~              <> System.Data.Connectio~dulla^@204~ Then
                Me.Adapter.Inse~dulla^@204~ nection.Open
            End If
   ~dulla^@204~ 
                Dim returnValue As ~dulla^@204~ Adapter.InsertCommand.ExecuteNonQuery~dulla^@204~      Return returnValue
            ~dulla^@204~             If (previousConnectionSta~dulla^@204~ ata.ConnectionState.Closed) Then
   ~dulla^@204~     Me.Adapter.InsertCommand.Connecti~dulla^@204~              End If
            End ~dulla^@204~ End Function
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ tem.ComponentModel.Design.HelpKeyword~dulla^@204~ .data.TableAdapter"),  _
         Sy~dulla^@204~ tModel.DataObjectMethodAttribute(Syst~dulla^@204~ odel.DataObjectMethodType.Update, tru~dulla^@204~    Public Overloads Overridable Funct~dulla^@204~ 
                    ByVal InvoiceNo~dulla^@204~ _
                    ByVal DateOfSa~dulla^@204~ _
                    ByVal StockCar~dulla^@204~ ,  _
                    ByVal DateR~dulla^@204~ te,  _
                    ByVal Pac~dulla^@204~ ing,  _
                    ByVal Qt~dulla^@204~ System.Nullable(Of Integer),  _
    ~dulla^@204~    ByVal QtyIssued As System.Nullable~dulla^@204~   _
                    ByVal QtyBal~dulla^@204~ er,  _
                    ByVal p1 ~dulla^@204~ 
                    ByVal Original_~dulla^@204~ String,  _
                    ByVal~dulla^@204~ eOfSale As Date,  _
                ~dulla^@204~ ginal_StockCardNo As String,  _
    ~dulla^@204~    ByVal Original_DateRecieved As Dat~dulla^@204~               ByVal Original_Packagin~dulla^@204~  _
                    ByVal Origina~dulla^@204~  As System.Nullable(Of Integer),  _
~dulla^@204~        ByVal Original_QtyIssued As Sy~dulla^@204~ (Of Integer),  _
                   ~dulla^@204~ al_QtyBalance As Integer,  _
       ~dulla^@204~ ByVal p2 As String) As Integer
     ~dulla^@204~ voiceNo Is Nothing) Then
           ~dulla^@204~ w System.ArgumentNullException("Invoi~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(0).Value = CType(Invoi~dulla^@204~ 
            End If
            Me.A~dulla^@204~ Command.Parameters(1).Value = CType(D~dulla^@204~ e)
            If (StockCardNo Is No~dulla^@204~                 Throw New System.Argu~dulla^@204~ tion("StockCardNo")
            Else~dulla^@204~      Me.Adapter.UpdateCommand.Paramet~dulla^@204~ = CType(StockCardNo,String)
        ~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ Value = CType(DateRecieved,Date)
   ~dulla^@204~ Packaging Is Nothing) Then
         ~dulla^@204~ New System.ArgumentNullException("Pac~dulla^@204~          Else
                Me.Ada~dulla^@204~ mmand.Parameters(4).Value = CType(Pac~dulla^@204~ )
            End If
            If~dulla^@204~ .HasValue = true) Then
             ~dulla^@204~ .UpdateCommand.Parameters(5).Value = ~dulla^@204~ eved.Value,Integer)
            Else~dulla^@204~      Me.Adapter.UpdateCommand.Paramet~dulla^@204~ = System.DBNull.Value
            En~dulla^@204~      If (QtyIssued.HasValue = true) T~dulla^@204~         Me.Adapter.UpdateCommand.Para~dulla^@204~ ue = CType(QtyIssued.Value,Integer)
~dulla^@204~ lse
                Me.Adapter.Updat~dulla^@204~ meters(6).Value = System.DBNull.Value~dulla^@204~  End If
            Me.Adapter.Updat~dulla^@204~ meters(7).Value = CType(QtyBalance,In~dulla^@204~        If (p1 Is Nothing) Then
     ~dulla^@204~ .Adapter.UpdateCommand.Parameters(8).~dulla^@204~ m.DBNull.Value
            Else
   ~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(8~dulla^@204~ pe(p1,String)
            End If
  ~dulla^@204~ (Original_InvoiceNo Is Nothing) Then~dulla^@204~     Throw New System.ArgumentNullExce~dulla^@204~ al_InvoiceNo")
            Else
   ~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(9~dulla^@204~ pe(Original_InvoiceNo,String)
      ~dulla^@204~ 
            Me.Adapter.UpdateCommand~dulla^@204~ 0).Value = CType(Original_DateOfSale,~dulla^@204~       If (Original_StockCardNo Is Not~dulla^@204~                Throw New System.ArgumentNullException("Original_StockCardNo")
~dulla^@204~ lse
                Me.Adapter.Updat~dulla^@204~ meters(11).Value = CType(Original_Sto~dulla^@204~ ng)
            End If
            ~dulla^@204~ dateCommand.Parameters(12).Value = CT~dulla^@204~ DateRecieved,Date)
            If (O~dulla^@204~ ging Is Nothing) Then
              ~dulla^@204~ ystem.ArgumentNullException("Original~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(13).Value = CTyp~dulla^@204~ ckaging,String)
            End If
~dulla^@204~ f (Original_QtyRecieved.HasValue = tr~dulla^@204~              Me.Adapter.UpdateCommand~dulla^@204~ 4).Value = CType(0,Object)
         ~dulla^@204~ pter.UpdateCommand.Parameters(15).Val~dulla^@204~ iginal_QtyRecieved.Value,Integer)
  ~dulla^@204~ e
                Me.Adapter.UpdateC~dulla^@204~ ters(14).Value = CType(1,Object)
   ~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(1~dulla^@204~ stem.DBNull.Value
            End If~dulla^@204~  If (Original_QtyIssued.HasValue = tr~dulla^@204~              Me.Adapter.UpdateCommand~dulla^@204~ 6).Value = CType(0,Object)
         ~dulla^@204~ pter.UpdateCommand.Parameters(17).Val~dulla^@204~ iginal_QtyIssued.Value,Integer)
    ~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(16).Value = CType(1,Object)
     ~dulla^@204~ .Adapter.UpdateCommand.Parameters(17)~dulla^@204~ em.DBNull.Value
            End If
~dulla^@204~ e.Adapter.UpdateCommand.Parameters(18~dulla^@204~ pe(Original_QtyBalance,Integer)
    ~dulla^@204~ 2 Is Nothing) Then
                M~dulla^@204~ ateCommand.Parameters(19).Value = CTy~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(20).Value = System.DBNull.Value
 ~dulla^@204~ se
                Me.Adapter.Update~dulla^@204~ eters(19).Value = CType(0,Object)
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ Type(p2,String)
            End If
~dulla^@204~ im previousConnectionState As System.~dulla^@204~ onState = Me.Adapter.UpdateCommand.Co~dulla^@204~ e
            If ((Me.Adapter.Update~dulla^@204~ ction.State And System.Data.Connectio~dulla^@204~  _
                        <> System~dulla^@204~ ionState.Open) Then
                ~dulla^@204~ dateCommand.Connection.Open
        ~dulla^@204~            Try 
                Dim ~dulla^@204~ s Integer = Me.Adapter.UpdateCommand.~dulla^@204~ ry
                Return returnValu~dulla^@204~   Finally
                If (previo~dulla^@204~ tate = System.Data.ConnectionState.Cl~dulla^@204~                    Me.Adapter.UpdateC~dulla^@204~ tion.Close
                End If
 ~dulla^@204~ d Try
        End Function
    End ~dulla^@204~     <System.CodeDom.Compiler.Generate~dulla^@204~ e("System.Data.Design.TypedDataSetGen~dulla^@204~ .0.0"),  _
     System.ComponentMode~dulla^@204~ egoryAttribute("code"),  _
     Syst~dulla^@204~ odel.ToolboxItem(true),  _
     Syst~dulla^@204~ odel.DataObjectAttribute(true),  _
 ~dulla^@204~ mponentModel.DesignerAttribute("Micro~dulla^@204~ er.DataSource.Design.TableAdapterDesi~dulla^@204~ ft.VSDesigner"& _ 
        ", Versio~dulla^@204~ lture=neutral, PublicKeyToken=b03f5f7~dulla^@204~  _
     System.ComponentModel.Design~dulla^@204~ ttribute("vs.data.TableAdapter")>  _~dulla^@204~ Public Class SupplierTableAdapter
  ~dulla^@204~ s System.ComponentModel.Component
  ~dulla^@204~    Private WithEvents _adapter As Sys~dulla^@204~ lient.SqlDataAdapter
        
     ~dulla^@204~ onnection As System.Data.SqlClient.Sq~dulla^@204~         
        Private _commandCol~dulla^@204~ System.Data.SqlClient.SqlCommand
   ~dulla^@204~   Private _clearBeforeFill As Boolean~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Sub New()~dulla^@204~  MyBase.New
            Me.ClearBefo~dulla^@204~ 
        End Sub
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Private ReadOnly Property Adapter() ~dulla^@204~ a.SqlClient.SqlDataAdapter
         ~dulla^@204~            If (Me._adapter Is Nothing~dulla^@204~                Me.InitAdapter
      ~dulla^@204~  If
                Return Me._adapt~dulla^@204~    End Get
        End Property
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Friend Property Conne~dulla^@204~ stem.Data.SqlClient.SqlConnection
  ~dulla^@204~ 
                If (Me._connection ~dulla^@204~ hen
                    Me.InitConne~dulla^@204~           End If
                Ret~dulla^@204~ ction
            End Get
         ~dulla^@204~            Me._connection = value
  ~dulla^@204~  If (Not (Me.Adapter.InsertCommand) I~dulla^@204~ en
                    Me.Adapter.In~dulla^@204~ onnection = value
                En~dulla^@204~          If (Not (Me.Adapter.DeleteCo~dulla^@204~ hing) Then
                    Me.Ad~dulla^@204~ ommand.Connection = value
          ~dulla^@204~ 
                If (Not (Me.Adapter.~dulla^@204~ ) Is Nothing) Then
                 ~dulla^@204~ .UpdateCommand.Connection = value
  ~dulla^@204~  End If
                Dim i As Int~dulla^@204~              Do While (i < Me.Command~dulla^@204~ ngth)
                    If (Not (M~dulla^@204~ ection(i)) Is Nothing) Then
        ~dulla^@204~    CType(Me.CommandCollection(i),Syst~dulla^@204~ ient.SqlCommand).Connection = value
~dulla^@204~        End If
                    i ~dulla^@204~               Loop
            End S~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ cted ReadOnly Property CommandCollect~dulla^@204~ em.Data.SqlClient.SqlCommand()
     ~dulla^@204~                If (Me._commandCollect~dulla^@204~ g) Then
                    Me.InitC~dulla^@204~ ion
                End If
        ~dulla^@204~ n Me._commandCollection
            ~dulla^@204~     End Property
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Property ClearBeforeFill() As ~dulla^@204~         Get
                Return M~dulla^@204~ eFill
            End Get
         ~dulla^@204~            Me._clearBeforeFill = valu~dulla^@204~   End Set
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Private Sub InitAdapte~dulla^@204~     Me._adapter = New System.Data.Sql~dulla^@204~ aAdapter
            Dim tableMappin~dulla^@204~ ata.Common.DataTableMapping = New Sys~dulla^@204~ on.DataTableMapping
            tabl~dulla^@204~ ceTable = "Table"
            tableM~dulla^@204~ tTable = "Supplier"
            tabl~dulla^@204~ mnMappings.Add("SupplierID", "Supplie~dulla^@204~       tableMapping.ColumnMappings.Add~dulla^@204~ e", "SupplierName")
            tabl~dulla^@204~ mnMappings.Add("Address", "Address")~dulla^@204~ tableMapping.ColumnMappings.Add("City~dulla^@204~            tableMapping.ColumnMapping~dulla^@204~ y", "Country")
            tableMapp~dulla^@204~ pings.Add("Phone", "Phone")
        ~dulla^@204~ ing.ColumnMappings.Add("Fax", "Fax")~dulla^@204~ tableMapping.ColumnMappings.Add("Post~dulla^@204~ PostalAddress")
            tableMap~dulla^@204~ ppings.Add("Website", "Website")
   ~dulla^@204~ adapter.TableMappings.Add(tableMappin~dulla^@204~    Me._adapter.DeleteCommand = New Sy~dulla^@204~ Client.SqlCommand
            Me._ad~dulla^@204~ ommand.Connection = Me.Connection
  ~dulla^@204~ _adapter.DeleteCommand.CommandText = ~dulla^@204~ [dbo].[Supplier] WHERE (([SupplierID]~dulla^@204~ SupplierID) AND ([S"& _ 
           ~dulla^@204~ Name] = @Original_SupplierName) AND (~dulla^@204~ ess = 1 AND [Address] I"& _ 
       ~dulla^@204~ ULL) OR ([Address] = @Original_Addres~dulla^@204~ Null_City = 1 AND [City] IS"& _ 
   ~dulla^@204~ " NULL) OR ([City] = @Original_City))~dulla^@204~ l_Country = 1 AND [Country] IS "& _ ~dulla^@204~     "NULL) OR ([Country] = @Original_~dulla^@204~  ((@IsNull_Phone = 1 AND [Phone] IS"&~dulla^@204~         " NULL) OR ([Phone] = @Origin~dulla^@204~ D ([Fax] = @Original_Fax) AND ([Posta~dulla^@204~             "ddress] = @Original_Post~dulla^@204~ D ([Website] = @Original_Website))"
            Me._adapter.DeleteCommand.Comm~dulla^@204~ tem.Data.CommandType.Text
          ~dulla^@204~ .DeleteCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@Original_Supplie~dulla^@204~ Data.SqlDbType.NVarChar, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "SupplierID", S~dulla^@204~ taRowVersion.Original, false, Nothing~dulla^@204~ )
            Me._adapter.DeleteComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ginal_SupplierName", System.Data.SqlD~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ upplierName", System.Data.DataRowVers~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.DeleteCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@IsNull_Addre~dulla^@204~ ata.SqlDbType.Int, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "Address", System.Dat~dulla^@204~ ion.Original, true, Nothing, "", "", ~dulla^@204~      Me._adapter.DeleteCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ ess", System.Data.SqlDbType.[Char], 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Add~dulla^@204~ .Data.DataRowVersion.Original, false,~dulla^@204~  "", ""))
            Me._adapter.De~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@IsNull_City", System.Data.SqlDbT~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Original_City", System.Dat~dulla^@204~ Char], 0, System.Data.ParameterDirect~dulla^@204~  0, "City", System.Data.DataRowVersio~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.DeleteCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@IsNull_Country~dulla^@204~ a.SqlDbType.Int, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "Country", System.Data.~dulla^@204~ n.Original, true, Nothing, "", "", ""~dulla^@204~    Me._adapter.DeleteCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Or~dulla^@204~ y", System.Data.SqlDbType.[Char], 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Count~dulla^@204~ ata.DataRowVersion.Original, false, N~dulla^@204~ ", ""))
            Me._adapter.Dele~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@IsNull_Phone", System.Data.SqlDbTy~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Original_Phone", System.Da~dulla^@204~ [Char], 0, System.Data.ParameterDirec~dulla^@204~ , 0, "Phone", System.Data.DataRowVers~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.DeleteCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@Original_Fax~dulla^@204~ a.SqlDbType.[Char], 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "Fax", System.Data.D~dulla^@204~ .Original, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.DeleteCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Or~dulla^@204~ Address", System.Data.SqlDbType.[Char~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ s", System.Data.DataRowVersion.Origin~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@Original_Website", Sys~dulla^@204~ bType.[Char], 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "Website", System.Data.Dat~dulla^@204~ riginal, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.InsertCommand = New Syst~dulla^@204~ ient.SqlCommand
            Me._adap~dulla^@204~ mand.Connection = Me.Connection
    ~dulla^@204~ dapter.InsertCommand.CommandText = "I~dulla^@204~ bo].[Supplier] ([SupplierID], [Suppli~dulla^@204~ ress], [City], [C"& _ 
             ~dulla^@204~ [Phone], [Fax], [PostalAddress], [Web~dulla^@204~  (@SupplierID, @Suppl"& _ 
         ~dulla^@204~ me, @Address, @City, @Country, @Phone~dulla^@204~ alAddress, @Website);"&Global.Microso~dulla^@204~ c.ChrW(13)&Global.Microsoft.VisualBas~dulla^@204~ SE"& _ 
                "LECT Suppli~dulla^@204~ rName, Address, City, Country, Phone,~dulla^@204~ ddress"& _ 
                ", Websi~dulla^@204~ ier WHERE (SupplierID = @SupplierID)"~dulla^@204~  Me._adapter.InsertCommand.CommandTyp~dulla^@204~ ta.CommandType.Text
            Me._~dulla^@204~ tCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@SupplierID", System.Da~dulla^@204~ NVarChar, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "SupplierID", System.Data.Data~dulla^@204~ rrent, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.InsertCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@Suppli~dulla^@204~ em.Data.SqlDbType.[Char], 0, System.D~dulla^@204~ Direction.Input, 0, 0, "SupplierName"~dulla^@204~ .DataRowVersion.Current, false, Nothi~dulla^@204~ "))
            Me._adapter.InsertCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ ddress", System.Data.SqlDbType.[Char]~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ tem.Data.DataRowVersion.Current, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@City", System.Data.SqlDbType.[~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ ystem.Data.DataRowVersion.Current, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Country", System.Data.SqlDbT~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ ntry", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ertCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@Phone", System.Data.~dulla^@204~ ar], 0, System.Data.ParameterDirectio~dulla^@204~ , "Phone", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .InsertCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@Fax", System.Dat~dulla^@204~ Char], 0, System.Data.ParameterDirect~dulla^@204~  0, "Fax", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .InsertCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@PostalAddress", ~dulla^@204~ qlDbType.[Char], 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "PostalAddress", System~dulla^@204~ Version.Current, false, Nothing, "", ~dulla^@204~          Me._adapter.InsertCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~  System.Data.SqlDbType.[Char], 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "Website"~dulla^@204~ .DataRowVersion.Current, false, Nothi~dulla^@204~ "))
            Me._adapter.UpdateCo~dulla^@204~ ystem.Data.SqlClient.SqlCommand
    ~dulla^@204~ dapter.UpdateCommand.Connection = Me.~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~  "UPDATE [dbo].[Supplier] SET [Suppli~dulla^@204~ lierID, [SupplierName] = @Supplie"& _~dulla^@204~       "rName, [Address] = @Address, [~dulla^@204~ , [Country] = @Country, [Phone] = @Ph~dulla^@204~           "one, [Fax] = @Fax, [Postal~dulla^@204~ ostalAddress, [Website] = @Website WH~dulla^@204~               "(([SupplierID] = @Orig~dulla^@204~ ID) AND ([SupplierName] = @Original_S~dulla^@204~ 
                "ame) AND ((@IsNull~dulla^@204~ AND [Address] IS NULL) OR ([Address] ~dulla^@204~ & _ 
                "Address)) AND ~dulla^@204~ y = 1 AND [City] IS NULL) OR ([City] ~dulla^@204~ ity"& _ 
                ")) AND ((@~dulla^@204~ y = 1 AND [Country] IS NULL) OR ([Cou~dulla^@204~ inal_Co"& _ 
                "untry)~dulla^@204~ ll_Phone = 1 AND [Phone] IS NULL) OR ~dulla^@204~ riginal_Pho"& _ 
                "ne~dulla^@204~  = @Original_Fax) AND ([PostalAddress~dulla^@204~ _PostalAddress)"& _ 
               ~dulla^@204~ ite] = @Original_Website));"&Global.M~dulla^@204~ alBasic.ChrW(13)&Global.Microsoft.Vis~dulla^@204~ (10)&"SELECT SupplierID, SupplierName~dulla^@204~  
                ", City, Country, ~dulla^@204~ ostalAddress, Website FROM Supplier W~dulla^@204~ "& _ 
                "rID = @Suppli~dulla^@204~        Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
  ~dulla^@204~ _adapter.UpdateCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@Supplier~dulla^@204~ ata.SqlDbType.NVarChar, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "SupplierID", Sy~dulla^@204~ aRowVersion.Current, false, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ ierName", System.Data.SqlDbType.[Char~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ ", System.Data.DataRowVersion.Current~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@Address", System.Data.Sq~dulla^@204~ ], 0, System.Data.ParameterDirection.~dulla^@204~ "Address", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@City", System.Da~dulla^@204~ [Char], 0, System.Data.ParameterDirec~dulla^@204~ , 0, "City", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Country", Syst~dulla^@204~ Type.[Char], 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "Country", System.Data.Data~dulla^@204~ rrent, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.UpdateCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@Phone"~dulla^@204~ .SqlDbType.[Char], 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "Phone", System.Data.~dulla^@204~ n.Current, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.UpdateCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Fa~dulla^@204~ ta.SqlDbType.[Char], 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "Fax", System.Data.~dulla^@204~ n.Current, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.UpdateCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Po~dulla^@204~  System.Data.SqlDbType.[Char], 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "PostalAd~dulla^@204~ m.Data.DataRowVersion.Current, false,~dulla^@204~  "", ""))
            Me._adapter.Up~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@Website", System.Data.SqlDbType.~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ ", System.Data.DataRowVersion.Current~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@Original_SupplierID", Sy~dulla^@204~ DbType.NVarChar, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "SupplierID", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ pplierName", System.Data.SqlDbType.[C~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ ame", System.Data.DataRowVersion.Orig~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@IsNull_Address", Sys~dulla^@204~ bType.Int, 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "Address", System.Data.DataRo~dulla^@204~ inal, true, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.UpdateCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@Original~dulla^@204~ stem.Data.SqlDbType.[Char], 0, System~dulla^@204~ erDirection.Input, 0, 0, "Address", S~dulla^@204~ taRowVersion.Original, false, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ull_City", System.Data.SqlDbType.Int,~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "C~dulla^@204~ Data.DataRowVersion.Original, true, N~dulla^@204~ ", ""))
            Me._adapter.Upda~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@Original_City", System.Data.SqlDbT~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ y", System.Data.DataRowVersion.Origin~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@IsNull_Country", Syste~dulla^@204~ ype.Int, 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "Country", System.Data.DataRowV~dulla^@204~ al, true, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@Original_C~dulla^@204~ em.Data.SqlDbType.[Char], 0, System.D~dulla^@204~ Direction.Input, 0, 0, "Country", Sys~dulla^@204~ RowVersion.Original, false, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ l_Phone", System.Data.SqlDbType.Int, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "Ph~dulla^@204~ Data.DataRowVersion.Original, true, N~dulla^@204~ ", ""))
            Me._adapter.Upda~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@Original_Phone", System.Data.SqlDb~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ one", System.Data.DataRowVersion.Orig~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@Original_Fax", Syste~dulla^@204~ ype.[Char], 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "Fax", System.Data.DataRowVe~dulla^@204~ l, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@Original_P~dulla^@204~ , System.Data.SqlDbType.[Char], 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "PostalA~dulla^@204~ em.Data.DataRowVersion.Original, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Original_Website", System.Data~dulla^@204~ har], 0, System.Data.ParameterDirecti~dulla^@204~ 0, "Website", System.Data.DataRowVers~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Private~dulla^@204~ ection()
            Me._connection ~dulla^@204~ Data.SqlClient.SqlConnection
       ~dulla^@204~ ection.ConnectionString = Global.Inve~dulla^@204~ ystem.My.MySettings.Default.Inventory~dulla^@204~ ConnectionString
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Private Sub InitComm~dulla^@204~ ()
            Me._commandCollection~dulla^@204~ .Data.SqlClient.SqlCommand(0) {}
   ~dulla^@204~ commandCollection(0) = New System.Dat~dulla^@204~ qlCommand
            Me._commandCol~dulla^@204~ nnection = Me.Connection
           ~dulla^@204~ ollection(0).CommandText = "SELECT Su~dulla^@204~ plierName, Address, City, Country, Ph~dulla^@204~ talAddres"& _ 
                "s, W~dulla^@204~ bo.Supplier"
            Me._command~dulla^@204~ .CommandType = System.Data.CommandTyp~dulla^@204~    End Sub
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute(),  _
 ~dulla^@204~ m.ComponentModel.Design.HelpKeywordAt~dulla^@204~ ata.TableAdapter"),  _
         Syst~dulla^@204~ odel.DataObjectMethodAttribute(System~dulla^@204~ el.DataObjectMethodType.Fill, true)> ~dulla^@204~ ublic Overloads Overridable Function ~dulla^@204~ taTable As InventoryControlSystemData~dulla^@204~ ataTable) As Integer
            Me.~dulla^@204~ tCommand = Me.CommandCollection(0)
 ~dulla^@204~  (Me.ClearBeforeFill = true) Then
  ~dulla^@204~  dataTable.Clear
            End If~dulla^@204~ Dim returnValue As Integer = Me.Adapt~dulla^@204~ able)
            Return returnValue~dulla^@204~  Function
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute(),  _
  ~dulla^@204~ .ComponentModel.Design.HelpKeywordAtt~dulla^@204~ ta.TableAdapter"),  _
         Syste~dulla^@204~ del.DataObjectMethodAttribute(System.~dulla^@204~ l.DataObjectMethodType.[Select], true~dulla^@204~   Public Overloads Overridable Functi~dulla^@204~ As InventoryControlSystemDataSet.Supp~dulla^@204~ 
            Me.Adapter.SelectComman~dulla^@204~ dCollection(0)
            Dim dataT~dulla^@204~ toryControlSystemDataSet.SupplierData~dulla^@204~ nventoryControlSystemDataSet.Supplier~dulla^@204~           Me.Adapter.Fill(dataTable)~dulla^@204~ Return dataTable
        End Function
        
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute(),  _
         System~dulla^@204~ el.Design.HelpKeywordAttribute("vs.da~dulla^@204~ er")>  _
        Public Overloads Ov~dulla^@204~ ction Update(ByVal dataTable As Inven~dulla^@204~ stemDataSet.SupplierDataTable) As Int~dulla^@204~      Return Me.Adapter.Update(dataTab~dulla^@204~ End Function
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ tem.ComponentModel.Design.HelpKeyword~dulla^@204~ .data.TableAdapter")>  _
        Pub~dulla^@204~  Overridable Function Update(ByVal da~dulla^@204~ ntoryControlSystemDataSet) As Integer~dulla^@204~  Return Me.Adapter.Update(dataSet, "S~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~    System.ComponentModel.Design.HelpK~dulla^@204~ te("vs.data.TableAdapter")>  _
     ~dulla^@204~ rloads Overridable Function Update(By~dulla^@204~ s System.Data.DataRow) As Integer
  ~dulla^@204~ urn Me.Adapter.Update(New System.Data~dulla^@204~ ataRow})
        End Function
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ ,  _
         System.ComponentModel.~dulla^@204~ ywordAttribute("vs.data.TableAdapter"~dulla^@204~   Public Overloads Overridable Functi~dulla^@204~ al dataRows() As System.Data.DataRow)~dulla^@204~             Return Me.Adapter.Update(~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~    System.ComponentModel.Design.HelpK~dulla^@204~ te("vs.data.TableAdapter"),  _
     ~dulla^@204~ mponentModel.DataObjectMethodAttribut~dulla^@204~ onentModel.DataObjectMethodType.Delet~dulla^@204~ 
        Public Overloads Overridable~dulla^@204~ ete(ByVal Original_SupplierID As Stri~dulla^@204~ ginal_SupplierName As String, ByVal O~dulla^@204~ ss As String, ByVal Original_City As ~dulla^@204~  Original_Country As String, ByVal Or~dulla^@204~ As String, ByVal Original_Fax As Stri~dulla^@204~ ginal_PostalAddress As String, ByVal ~dulla^@204~ ite As String) As Integer
          ~dulla^@204~ l_SupplierID Is Nothing) Then
      ~dulla^@204~ ow New System.ArgumentNullException("~dulla^@204~ lierID")
            Else
         ~dulla^@204~ pter.DeleteCommand.Parameters(0).Valu~dulla^@204~ ginal_SupplierID,String)
           ~dulla^@204~         If (Original_SupplierName Is ~dulla^@204~ 
                Throw New System.Ar~dulla^@204~ eption("Original_SupplierName")
    ~dulla^@204~ 
                Me.Adapter.DeleteCom~dulla^@204~ rs(1).Value = CType(Original_Supplier~dulla^@204~ 
            End If
            If (~dulla^@204~ ess Is Nothing) Then
               ~dulla^@204~ eleteCommand.Parameters(2).Value = CT~dulla^@204~ 
                Me.Adapter.DeleteCo~dulla^@204~ ers(3).Value = System.DBNull.Value
 ~dulla^@204~ se
                Me.Adapter.Delete~dulla^@204~ eters(2).Value = CType(0,Object)
   ~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(3~dulla^@204~ pe(Original_Address,String)
        ~dulla^@204~            If (Original_City Is Nothi~dulla^@204~              Me.Adapter.DeleteCommand~dulla^@204~ ).Value = CType(1,Object)
          ~dulla^@204~ ter.DeleteCommand.Parameters(5).Value~dulla^@204~ ull.Value
            Else
        ~dulla^@204~ apter.DeleteCommand.Parameters(4).Val~dulla^@204~ Object)
                Me.Adapter.D~dulla^@204~ Parameters(5).Value = CType(Original_~dulla^@204~ 
            End If
            If (~dulla^@204~ try Is Nothing) Then
               ~dulla^@204~ eleteCommand.Parameters(6).Value = CT~dulla^@204~ 
                Me.Adapter.DeleteCo~dulla^@204~ ers(7).Value = System.DBNull.Value
 ~dulla^@204~ se
                Me.Adapter.Delete~dulla^@204~ eters(6).Value = CType(0,Object)
   ~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(7~dulla^@204~ pe(Original_Country,String)
        ~dulla^@204~            If (Original_Phone Is Noth~dulla^@204~               Me.Adapter.DeleteComman~dulla^@204~ 8).Value = CType(1,Object)
         ~dulla^@204~ pter.DeleteCommand.Parameters(9).Valu~dulla^@204~ Null.Value
            Else
       ~dulla^@204~ dapter.DeleteCommand.Parameters(8).Va~dulla^@204~ ,Object)
                Me.Adapter.~dulla^@204~ .Parameters(9).Value = CType(Original~dulla^@204~ )
            End If
            If~dulla^@204~ x Is Nothing) Then
                T~dulla^@204~ em.ArgumentNullException("Original_Fa~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(10).Value = CType(Origina~dulla^@204~ 
            End If
            If ~dulla^@204~ talAddress Is Nothing) Then
        ~dulla^@204~  New System.ArgumentNullException("Or~dulla^@204~ Address")
            Else
        ~dulla^@204~ apter.DeleteCommand.Parameters(11).Va~dulla^@204~ riginal_PostalAddress,String)
      ~dulla^@204~ 
            If (Original_Website Is ~dulla^@204~ 
                Throw New System.Ar~dulla^@204~ eption("Original_Website")
         ~dulla^@204~             Me.Adapter.DeleteCommand.~dulla^@204~ ).Value = CType(Original_Website,Stri~dulla^@204~     End If
            Dim previousC~dulla^@204~ e As System.Data.ConnectionState = Me~dulla^@204~ teCommand.Connection.State
         ~dulla^@204~ apter.DeleteCommand.Connection.State ~dulla^@204~ ta.ConnectionState.Open)  _
        ~dulla^@204~    <> System.Data.ConnectionState.Ope~dulla^@204~             Me.Adapter.DeleteCommand.~dulla^@204~ en
            End If
            T~dulla^@204~         Dim returnValue As Integer = ~dulla^@204~ leteCommand.ExecuteNonQuery
        ~dulla^@204~ n returnValue
            Finally
 ~dulla^@204~   If (previousConnectionState = Syste~dulla^@204~ tionState.Closed) Then
             ~dulla^@204~ pter.DeleteCommand.Connection.Close
~dulla^@204~    End If
            End Try
     ~dulla^@204~ on
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute(),  _
         ~dulla^@204~ entModel.Design.HelpKeywordAttribute(~dulla^@204~ eAdapter"),  _
         System.Compo~dulla^@204~ aObjectMethodAttribute(System.Compone~dulla^@204~ bjectMethodType.Insert, true)>  _
  ~dulla^@204~ Overloads Overridable Function Insert~dulla^@204~ erID As String, ByVal SupplierName As~dulla^@204~ l Address As String, ByVal City As St~dulla^@204~ ountry As String, ByVal Phone As Stri~dulla^@204~  As String, ByVal PostalAddress As St~dulla^@204~ ebsite As String) As Integer
       ~dulla^@204~ lierID Is Nothing) Then
            ~dulla^@204~  System.ArgumentNullException("Suppli~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(0).Value = CType(Suppl~dulla^@204~ 
            End If
            If ~dulla^@204~  Is Nothing) Then
                Th~dulla^@204~ m.ArgumentNullException("SupplierName~dulla^@204~    Else
                Me.Adapter.I~dulla^@204~ Parameters(1).Value = CType(SupplierN~dulla^@204~             End If
            If (A~dulla^@204~ hing) Then
                Me.Adapte~dulla^@204~ nd.Parameters(2).Value = System.DBNul~dulla^@204~         Else
                Me.Adap~dulla^@204~ mand.Parameters(2).Value = CType(Addr~dulla^@204~             End If
            If (C~dulla^@204~ g) Then
                Me.Adapter.I~dulla^@204~ Parameters(3).Value = System.DBNull.V~dulla^@204~      Else
                Me.Adapter~dulla^@204~ d.Parameters(3).Value = CType(City,St~dulla^@204~       End If
            If (Country~dulla^@204~ Then
                Me.Adapter.Inse~dulla^@204~ ameters(4).Value = System.DBNull.Valu~dulla^@204~   Else
                Me.Adapter.In~dulla^@204~ arameters(4).Value = CType(Country,St~dulla^@204~       End If
            If (Phone I~dulla^@204~ en
                Me.Adapter.Insert~dulla^@204~ eters(5).Value = System.DBNull.Value~dulla^@204~ Else
                Me.Adapter.Inse~dulla^@204~ ameters(5).Value = CType(Phone,String~dulla^@204~   End If
            If (Fax Is Noth~dulla^@204~               Throw New System.Argume~dulla^@204~ on("Fax")
            Else
        ~dulla^@204~ apter.InsertCommand.Parameters(6).Val~dulla^@204~ x,String)
            End If
      ~dulla^@204~ talAddress Is Nothing) Then
                Throw New System.ArgumentNullExcep~dulla^@204~ ddress")
            Else
         ~dulla^@204~ pter.InsertCommand.Parameters(7).Valu~dulla^@204~ talAddress,String)
            End I~dulla^@204~   If (Website Is Nothing) Then
     ~dulla^@204~ row New System.ArgumentNullException(~dulla^@204~            Else
                Me.A~dulla^@204~ Command.Parameters(8).Value = CType(W~dulla^@204~ )
            End If
            Di~dulla^@204~ nectionState As System.Data.Connectio~dulla^@204~ dapter.InsertCommand.Connection.State~dulla^@204~  If ((Me.Adapter.InsertCommand.Connec~dulla^@204~ d System.Data.ConnectionState.Open)  ~dulla^@204~               <> System.Data.Connecti~dulla^@204~  Then
                Me.Adapter.Ins~dulla^@204~ nnection.Open
            End If
  ~dulla^@204~  
                Dim returnValue As~dulla^@204~ .Adapter.InsertCommand.ExecuteNonQuer~dulla^@204~       Return returnValue
           ~dulla^@204~              If (previousConnectionSt~dulla^@204~ Data.ConnectionState.Closed) Then
  ~dulla^@204~      Me.Adapter.InsertCommand.Connect~dulla^@204~               End If
            End~dulla^@204~  End Function
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ stem.ComponentModel.Design.HelpKeywor~dulla^@204~ s.data.TableAdapter"),  _
         S~dulla^@204~ ntModel.DataObjectMethodAttribute(Sys~dulla^@204~ Model.DataObjectMethodType.Update, tr~dulla^@204~     Public Overloads Overridable Func~dulla^@204~ _
                    ByVal Supplier~dulla^@204~   _
                    ByVal Suppli~dulla^@204~ ing,  _
                    ByVal Ad~dulla^@204~ ng,  _
                    ByVal Cit~dulla^@204~  _
                    ByVal Country~dulla^@204~ _
                    ByVal Phone As~dulla^@204~                     ByVal Fax As Stri~dulla^@204~                ByVal PostalAddress As~dulla^@204~                     ByVal Website As ~dulla^@204~                    ByVal Original_Sup~dulla^@204~ ring,  _
                    ByVal O~dulla^@204~ ierName As String,  _
              ~dulla^@204~ riginal_Address As String,  _
      ~dulla^@204~  ByVal Original_City As String,  _
 ~dulla^@204~       ByVal Original_Country As Strin~dulla^@204~               ByVal Original_Phone As~dulla^@204~                     ByVal Original_Fa~dulla^@204~  _
                    ByVal Origina~dulla^@204~ ss As String,  _
                   ~dulla^@204~ al_Website As String) As Integer
   ~dulla^@204~ SupplierID Is Nothing) Then
        ~dulla^@204~  New System.ArgumentNullException("Su~dulla^@204~            Else
                Me.A~dulla^@204~ Command.Parameters(0).Value = CType(S~dulla^@204~ ing)
            End If
           ~dulla^@204~ Name Is Nothing) Then
              ~dulla^@204~ ystem.ArgumentNullException("Supplier~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(1).Value = CType(Suppl~dulla^@204~ g)
            End If
            I~dulla^@204~  Nothing) Then
                Me.Ad~dulla^@204~ ommand.Parameters(2).Value = System.D~dulla^@204~             Else
                Me.~dulla^@204~ eCommand.Parameters(2).Value = CType(~dulla^@204~ g)
            End If
            I~dulla^@204~ thing) Then
                Me.Adapt~dulla^@204~ and.Parameters(3).Value = System.DBNu~dulla^@204~          Else
                Me.Ada~dulla^@204~ mmand.Parameters(3).Value = CType(Cit~dulla^@204~           End If
            If (Cou~dulla^@204~ ng) Then
                Me.Adapter.~dulla^@204~ .Parameters(4).Value = System.DBNull.~dulla^@204~       Else
                Me.Adapte~dulla^@204~ nd.Parameters(4).Value = CType(Countr~dulla^@204~           End If
            If (Pho~dulla^@204~ ) Then
                Me.Adapter.Up~dulla^@204~ arameters(5).Value = System.DBNull.Va~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(5).Value = CType(Phone,St~dulla^@204~       End If
            If (Fax Is ~dulla^@204~ 
                Throw New System.Ar~dulla^@204~ eption("Fax")
            Else
    ~dulla^@204~ e.Adapter.UpdateCommand.Parameters(6)~dulla^@204~ e(Fax,String)
            End If
  ~dulla^@204~ (PostalAddress Is Nothing) Then
    ~dulla^@204~ hrow New System.ArgumentNullException~dulla^@204~ ss")
            Else
             ~dulla^@204~ .UpdateCommand.Parameters(7).Value = ~dulla^@204~ ddress,String)
            End If
 ~dulla^@204~  (Website Is Nothing) Then
         ~dulla^@204~ New System.ArgumentNullException("Web~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(8).Value = CType(Websi~dulla^@204~            End If
            If (Or~dulla^@204~ erID Is Nothing) Then
              ~dulla^@204~ ystem.ArgumentNullException("Original~dulla^@204~ 
            Else
                M~dulla^@204~ ateCommand.Parameters(9).Value = CTyp~dulla^@204~ pplierID,String)
            End If~dulla^@204~ If (Original_SupplierName Is Nothing)~dulla^@204~           Throw New System.ArgumentNu~dulla^@204~ Original_SupplierName")
            ~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ alue = CType(Original_SupplierName,St~dulla^@204~       End If
            If (Origina~dulla^@204~ Nothing) Then
                Me.Ada~dulla^@204~ mmand.Parameters(11).Value = CType(1,~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ ).Value = System.DBNull.Value
      ~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ (11).Value = CType(0,Object)
       ~dulla^@204~ dapter.UpdateCommand.Parameters(12).V~dulla^@204~ Original_Address,String)
           ~dulla^@204~         If (Original_City Is Nothing)~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ Value = CType(1,Object)
            ~dulla^@204~ r.UpdateCommand.Parameters(14).Value ~dulla^@204~ ll.Value
            Else
         ~dulla^@204~ pter.UpdateCommand.Parameters(13).Val~dulla^@204~ Object)
                Me.Adapter.U~dulla^@204~ Parameters(14).Value = CType(Original~dulla^@204~ 
            End If
            If ~dulla^@204~ ntry Is Nothing) Then
              ~dulla^@204~ UpdateCommand.Parameters(15).Value = ~dulla^@204~ t)
                Me.Adapter.Update~dulla^@204~ eters(16).Value = System.DBNull.Value~dulla^@204~  Else
                Me.Adapter.Upd~dulla^@204~ rameters(15).Value = CType(0,Object)~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~ = CType(Original_Country,String)
   ~dulla^@204~ If
            If (Original_Phone Is~dulla^@204~ n
                Me.Adapter.UpdateC~dulla^@204~ ters(17).Value = CType(1,Object)
   ~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(1~dulla^@204~ stem.DBNull.Value
            Else
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~  CType(0,Object)
                Me.~dulla^@204~ eCommand.Parameters(18).Value = CType~dulla^@204~ ne,String)
            End If
     ~dulla^@204~ iginal_Fax Is Nothing) Then
        ~dulla^@204~  New System.ArgumentNullException("Or~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(19).Value = CTyp~dulla^@204~ x,String)
            End If
      ~dulla^@204~ ginal_PostalAddress Is Nothing) Then~dulla^@204~     Throw New System.ArgumentNullExce~dulla^@204~ al_PostalAddress")
            Else~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~ = CType(Original_PostalAddress,String~dulla^@204~   End If
            If (Original_We~dulla^@204~ ing) Then
                Throw New ~dulla^@204~ ntNullException("Original_Website")
~dulla^@204~ lse
                Me.Adapter.Updat~dulla^@204~ meters(21).Value = CType(Original_Web~dulla^@204~ 
            End If
            Dim ~dulla^@204~ ctionState As System.Data.ConnectionS~dulla^@204~ pter.UpdateCommand.Connection.State
~dulla^@204~ f ((Me.Adapter.UpdateCommand.Connecti~dulla^@204~ System.Data.ConnectionState.Open)  _~dulla^@204~             <> System.Data.Connection~dulla^@204~ hen
                Me.Adapter.Updat~dulla^@204~ ection.Open
            End If
    ~dulla^@204~ 
                Dim returnValue As I~dulla^@204~ dapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
     ~dulla^@204~ y
                If (previousConnec~dulla^@204~ ystem.Data.ConnectionState.Closed) Th~dulla^@204~            Me.Adapter.UpdateCommand.C~dulla^@204~ se
                End If
         ~dulla^@204~        End Function
    End Class
End Namespace
