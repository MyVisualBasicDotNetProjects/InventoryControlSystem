'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.312
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("PurchaseInfoDataSet2"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class PurchaseInfoDataSet2
    Inherits System.Data.DataSet
    
    Private tableBlankTable As BlankTableDataTable
    
    Private tableCashSales As CashSalesDataTable
    
    Private tableCreditSales As CreditSalesDataTable
    
    Private tableCustomers As CustomersDataTable
    
    Private tableOrder As OrderDataTable
    
    Private tableProducts As ProductsDataTable
    
    Private tablePurchase As PurchaseDataTable
    
    Private tablePurchaseInfo As PurchaseInfoDataTable
    
    Private tableSalesInfo As SalesInfoDataTable
    
    Private tableStockCard As StockCardDataTable
    
    Private tableStockCardDetail As StockCardDetailDataTable
    
    Private tableSupplier As SupplierDataTable
    
    Private relationFK_CashSales_Customers As System.Data.DataRelation
    
    Private relationFK_CreditSales_Customers As System.Data.DataRelation
    
    Private relationFK_Order_Products As System.Data.DataRelation
    
    Private relationFK_Products_PurchaseInfo As System.Data.DataRelation
    
    Private relationFK_Purchase_Supplier As System.Data.DataRelation
    
    Private relationFK_PurchaseInfo_Purchase As System.Data.DataRelation
    
    Private relationFK_PurchaseInfo_Supplier As System.Data.DataRelation
    
    Private relationFK_SalesInfo_CashSales As System.Data.DataRelation
    
    Private relationFK_SalesInfo_CreditSales As System.Data.DataRelation
    
    Private relationFK_SalesInfo_Products As System.Data.DataRelation
    
    Private relationFK_SalesInfo_StockCardDetail As System.Data.DataRelation
    
    Private relationFK_SalesInfo_StockCardDetail1 As System.Data.DataRelation
    
    Private relationFK_StockCard_SalesInfo As System.Data.DataRelation
    
    Private relationFK_StockCardDetail_StockCard As System.Data.DataRelation
    
    Private relationPurchaseInfo_Products As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BlankTable")) Is Nothing) Then
                MyBase.Tables.Add(New BlankTableDataTable(ds.Tables("BlankTable")))
            End If
            If (Not (ds.Tables("CashSales")) Is Nothing) Then
                MyBase.Tables.Add(New CashSalesDataTable(ds.Tables("CashSales")))
            End If
            If (Not (ds.Tables("CreditSales")) Is Nothing) Then
                MyBase.Tables.Add(New CreditSalesDataTable(ds.Tables("CreditSales")))
            End If
            If (Not (ds.Tables("Customers")) Is Nothing) Then
                MyBase.Tables.Add(New CustomersDataTable(ds.Tables("Customers")))
            End If
            If (Not (ds.Tables("Order")) Is Nothing) Then
                MyBase.Tables.Add(New OrderDataTable(ds.Tables("Order")))
            End If
            If (Not (ds.Tables("Products")) Is Nothing) Then
                MyBase.Tables.Add(New ProductsDataTable(ds.Tables("Products")))
            End If
            If (Not (ds.Tables("Purchase")) Is Nothing) Then
                MyBase.Tables.Add(New PurchaseDataTable(ds.Tables("Purchase")))
            End If
            If (Not (ds.Tables("PurchaseInfo")) Is Nothing) Then
                MyBase.Tables.Add(New PurchaseInfoDataTable(ds.Tables("PurchaseInfo")))
            End If
            If (Not (ds.Tables("SalesInfo")) Is Nothing) Then
                MyBase.Tables.Add(New SalesInfoDataTable(ds.Tables("SalesInfo")))
            End If
            If (Not (ds.Tables("StockCard")) Is Nothing) Then
                MyBase.Tables.Add(New StockCardDataTable(ds.Tables("StockCard")))
            End If
            If (Not (ds.Tables("StockCardDetail")) Is Nothing) Then
                MyBase.Tables.Add(New StockCardDetailDataTable(ds.Tables("StockCardDetail")))
            End If
            If (Not (ds.Tables("Supplier")) Is Nothing) Then
                MyBase.Tables.Add(New SupplierDataTable(ds.Tables("Supplier")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BlankTable() As BlankTableDataTable
        Get
            Return Me.tableBlankTable
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CashSales() As CashSalesDataTable
        Get
            Return Me.tableCashSales
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(), ~dulla^@204~ ~dulla^@204~ odel.Browsable(false),  _
     Syste~dulla^@204~ del.DesignerSerializationVisibility(S~dulla^@204~ ntModel.DesignerSerializationVisibili~dulla^@204~  _
    Public ReadOnly Property Cred~dulla^@204~ CreditSalesDataTable
        Get
  ~dulla^@204~ urn Me.tableCreditSales
        End ~dulla^@204~ Property
    
    <System.Diagnosti~dulla^@204~ nUserCodeAttribute(),  _
     System~dulla^@204~ el.Browsable(false),  _
     System.~dulla^@204~ l.DesignerSerializationVisibility(Sys~dulla^@204~ Model.DesignerSerializationVisibility~dulla^@204~ 
    Public ReadOnly Property Custom~dulla^@204~ omersDataTable
        Get
        ~dulla^@204~ .tableCustomers
        End Get
   ~dulla^@204~ 
    
    <System.Diagnostics.Debug~dulla^@204~ eAttribute(),  _
     System.Compone~dulla^@204~ able(false),  _
     System.Componen~dulla^@204~ erSerializationVisibility(System.Comp~dulla^@204~ signerSerializationVisibility.Content~dulla^@204~ blic ReadOnly Property Order() As Ord~dulla^@204~         Get
            Return Me.ta~dulla^@204~      End Get
    End Property
    ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~    System.ComponentModel.Browsable(fa~dulla^@204~   System.ComponentModel.DesignerSeria~dulla^@204~ ility(System.ComponentModel.DesignerS~dulla^@204~ isibility.Content)>  _
    Public Re~dulla^@204~ ty Products() As ProductsDataTable
 ~dulla^@204~            Return Me.tableProducts
 ~dulla^@204~ t
    End Property
    
    <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute(),  _
~dulla^@204~ omponentModel.Browsable(false),  _
 ~dulla^@204~ mponentModel.DesignerSerializationVis~dulla^@204~ m.ComponentModel.DesignerSerializatio~dulla^@204~ ontent)>  _
    Public ReadOnly Prop~dulla^@204~ () As PurchaseDataTable
        Get~dulla^@204~ Return Me.tablePurchase
        End ~dulla^@204~ Property
    
    <System.Diagnosti~dulla^@204~ nUserCodeAttribute(),  _
     System~dulla^@204~ el.Browsable(false),  _
     System.~dulla^@204~ l.DesignerSerializationVisibility(Sys~dulla^@204~ Model.DesignerSerializationVisibility~dulla^@204~ 
    Public ReadOnly Property Purcha~dulla^@204~ urchaseInfoDataTable
        Get
  ~dulla^@204~ urn Me.tablePurchaseInfo
        End~dulla^@204~  Property
    
    <System.Diagnost~dulla^@204~ onUserCodeAttribute(),  _
     Syste~dulla^@204~ del.Browsable(false),  _
     System~dulla^@204~ el.DesignerSerializationVisibility(Sy~dulla^@204~ tModel.DesignerSerializationVisibilit~dulla^@204~ _
    Public ReadOnly Property Sales~dulla^@204~ esInfoDataTable
        Get
       ~dulla^@204~ e.tableSalesInfo
        End Get
  ~dulla^@204~ y
    
    <System.Diagnostics.Debu~dulla^@204~ deAttribute(),  _
     System.Compon~dulla^@204~ sable(false),  _
     System.Compone~dulla^@204~ nerSerializationVisibility(System.Com~dulla^@204~ esignerSerializationVisibility.Conten~dulla^@204~ ublic ReadOnly Property StockCard() A~dulla^@204~ taTable
        Get
            Ret~dulla^@204~ tockCard
        End Get
    End Pr~dulla^@204~ 
    <System.Diagnostics.DebuggerNonU~dulla^@204~ ute(),  _
     System.ComponentModel~dulla^@204~ lse),  _
     System.ComponentModel.~dulla^@204~ lizationVisibility(System.ComponentMo~dulla^@204~ erializationVisibility.Content)>  _
~dulla^@204~ adOnly Property StockCardDetail() As ~dulla^@204~ ilDataTable
        Get
           ~dulla^@204~ bleStockCardDetail
        End Get
~dulla^@204~ rty
    
    <System.Diagnostics.De~dulla^@204~ CodeAttribute(),  _
     System.Comp~dulla^@204~ owsable(false),  _
     System.Compo~dulla^@204~ ignerSerializationVisibility(System.C~dulla^@204~ .DesignerSerializationVisibility.Cont~dulla^@204~  Public ReadOnly Property Supplier() ~dulla^@204~ taTable
        Get
            Ret~dulla^@204~ upplier
        End Get
    End Pro~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te(),  _
     System.ComponentModel.~dulla^@204~ ibute(true),  _
     System.Componen~dulla^@204~ erSerializationVisibilityAttribute(Sy~dulla^@204~ tModel.DesignerSerializationVisibilit~dulla^@204~ _
    Public Overrides Property Sche~dulla^@204~ onMode() As System.Data.SchemaSeriali~dulla^@204~        Get
            Return Me._sc~dulla^@204~ tionMode
        End Get
        Se~dulla^@204~   Me._schemaSerializationMode = value~dulla^@204~  Set
    End Property
    
    <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute(),  ~dulla^@204~ m.ComponentModel.DesignerSerializatio~dulla^@204~ tribute(System.ComponentModel.Designe~dulla^@204~ nVisibility.Hidden)>  _
    Public S~dulla^@204~ ly Property Tables() As System.Data.D~dulla^@204~ ction
        Get
            Retur~dulla^@204~ es
        End Get
    End Property~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
     System.ComponentModel.Desig~dulla^@204~ ionVisibilityAttribute(System.Compone~dulla^@204~ nerSerializationVisibility.Hidden)>  ~dulla^@204~  Shadows ReadOnly Property Relations(~dulla^@204~ ata.DataRelationCollection
        G~dulla^@204~    Return MyBase.Relations
        E~dulla^@204~ nd Property
    
    <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
    Prot~dulla^@204~ es Sub InitializeDerivedDataSet()
  ~dulla^@204~ nInit
        Me.InitClass
        ~dulla^@204~    End Sub
    
    <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
    Publi~dulla^@204~ unction Clone() As System.Data.DataSe~dulla^@204~ m cln As PurchaseInfoDataSet2 = CType~dulla^@204~ ,PurchaseInfoDataSet2)
        cln.I~dulla^@204~     cln.SchemaSerializationMode = Me.~dulla^@204~ zationMode
        Return cln
    E~dulla^@204~     
    <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
    Protected Overrid~dulla^@204~ houldSerializeTables() As Boolean
  ~dulla^@204~ false
    End Function
    
    <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ cted Overrides Function ShouldSeriali~dulla^@204~  As Boolean
        Return false
  ~dulla^@204~ n
    
    <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
    Protected Over~dulla^@204~ dXmlSerializable(ByVal reader As Syst~dulla^@204~ der)
        If (Me.DetermineSchemaS~dulla^@204~ ode(reader) = System.Data.SchemaSeria~dulla^@204~ IncludeSchema) Then
            Me.R~dulla^@204~      Dim ds As System.Data.DataSet = ~dulla^@204~ ta.DataSet
            ds.ReadXml(re~dulla^@204~       If (Not (ds.Tables("BlankTable"~dulla^@204~ ) Then
                MyBase.Tables~dulla^@204~ kTableDataTable(ds.Tables("BlankTable~dulla^@204~      End If
            If (Not (ds.~dulla^@204~ ales")) Is Nothing) Then
           ~dulla^@204~ ables.Add(New CashSalesDataTable(ds.T~dulla^@204~ les")))
            End If
        ~dulla^@204~ ds.Tables("CreditSales")) Is Nothing)~dulla^@204~           MyBase.Tables.Add(New Credi~dulla^@204~ le(ds.Tables("CreditSales")))
      ~dulla^@204~ 
            If (Not (ds.Tables("Cust~dulla^@204~ othing) Then
                MyBase.~dulla^@204~ w CustomersDataTable(ds.Tables("Custo~dulla^@204~          End If
            If (Not ~dulla^@204~ rder")) Is Nothing) Then
           ~dulla^@204~ ables.Add(New OrderDataTable(ds.Table~dulla^@204~ 
            End If
            If (~dulla^@204~ s("Products")) Is Nothing) Then
    ~dulla^@204~ yBase.Tables.Add(New ProductsDataTabl~dulla^@204~ Products")))
            End If
   ~dulla^@204~ Not (ds.Tables("Purchase")) Is Nothin~dulla^@204~             MyBase.Tables.Add(New Pur~dulla^@204~ e(ds.Tables("Purchase")))
          ~dulla^@204~          If (Not (ds.Tables("Purchase~dulla^@204~ thing) Then
                MyBase.T~dulla^@204~  PurchaseInfoDataTable(ds.Tables("Pur~dulla^@204~ 
            End If
            If ~dulla^@204~ es("SalesInfo")) Is Nothing) Then
  ~dulla^@204~  MyBase.Tables.Add(New SalesInfoDataT~dulla^@204~ s("SalesInfo")))
            End If~dulla^@204~ If (Not (ds.Tables("StockCard")) Is N~dulla^@204~ 
                MyBase.Tables.Add(Ne~dulla^@204~ taTable(ds.Tables("StockCard")))
   ~dulla^@204~ If
            If (Not (ds.Tables("S~dulla^@204~ l")) Is Nothing) Then
                MyBase.Tables.Add(New StockCardDetailDat~dulla^@204~ les("StockCardDetail")))
           ~dulla^@204~         If (Not (ds.Tables("Supplier"~dulla^@204~ ) Then
                MyBase.Tables~dulla^@204~ lierDataTable(ds.Tables("Supplier")))~dulla^@204~  End If
            Me.DataSetName =~dulla^@204~ me
            Me.Prefix = ds.Prefix~dulla^@204~  Me.Namespace = ds.Namespace
       ~dulla^@204~ e = ds.Locale
            Me.CaseSen~dulla^@204~ aseSensitive
            Me.EnforceC~dulla^@204~ ds.EnforceConstraints
            Me~dulla^@204~ lse, System.Data.MissingSchemaAction.~dulla^@204~      Me.InitVars
        Else
     ~dulla^@204~ dXml(reader)
            Me.InitVars~dulla^@204~  If
    End Sub
    
    <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ errides Function GetSchemaSerializabl~dulla^@204~ .Xml.Schema.XmlSchema
        Dim st~dulla^@204~ m.IO.MemoryStream = New System.IO.Mem~dulla^@204~       Me.WriteXmlSchema(New System.Xm~dulla^@204~ er(stream, Nothing))
        stream.~dulla^@204~ 
        Return System.Xml.Schema.Xml~dulla^@204~ ew System.Xml.XmlTextReader(stream), ~dulla^@204~  End Function
    
    <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
    Fr~dulla^@204~ s Sub InitVars()
        Me.InitVars~dulla^@204~ nd Sub
    
    <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
    Friend Ov~dulla^@204~ nitVars(ByVal initTable As Boolean)
~dulla^@204~ bleBlankTable = CType(MyBase.Tables("~dulla^@204~ BlankTableDataTable)
        If (ini~dulla^@204~ ) Then
            If (Not (Me.table~dulla^@204~ s Nothing) Then
                Me.t~dulla^@204~ e.InitVars
            End If
     ~dulla^@204~       Me.tableCashSales = CType(MyBas~dulla^@204~ hSales"),CashSalesDataTable)
       ~dulla^@204~ e = true) Then
            If (Not (~dulla^@204~ ales) Is Nothing) Then
             ~dulla^@204~ shSales.InitVars
            End If~dulla^@204~ If
        Me.tableCreditSales = CTy~dulla^@204~ les("CreditSales"),CreditSalesDataTab~dulla^@204~ If (initTable = true) Then
         ~dulla^@204~ e.tableCreditSales) Is Nothing) Then~dulla^@204~     Me.tableCreditSales.InitVars
   ~dulla^@204~ If
        End If
        Me.tableC~dulla^@204~ ype(MyBase.Tables("Customers"),Custom~dulla^@204~ 
        If (initTable = true) Then~dulla^@204~ If (Not (Me.tableCustomers) Is Nothin~dulla^@204~             Me.tableCustomers.InitVar~dulla^@204~   End If
        End If
        Me.~dulla^@204~ CType(MyBase.Tables("Order"),OrderDat~dulla^@204~     If (initTable = true) Then
     ~dulla^@204~ t (Me.tableOrder) Is Nothing) Then
 ~dulla^@204~   Me.tableOrder.InitVars
           ~dulla^@204~     End If
        Me.tableProducts ~dulla^@204~ e.Tables("Products"),ProductsDataTabl~dulla^@204~ f (initTable = true) Then
          ~dulla^@204~ .tableProducts) Is Nothing) Then
   ~dulla^@204~ Me.tableProducts.InitVars
          ~dulla^@204~      End If
        Me.tablePurchase~dulla^@204~ se.Tables("Purchase"),PurchaseDataTab~dulla^@204~ If (initTable = true) Then
         ~dulla^@204~ e.tablePurchase) Is Nothing) Then
  ~dulla^@204~  Me.tablePurchase.InitVars
         ~dulla^@204~       End If
        Me.tablePurchas~dulla^@204~ (MyBase.Tables("PurchaseInfo"),Purcha~dulla^@204~ le)
        If (initTable = true) Th~dulla^@204~    If (Not (Me.tablePurchaseInfo) Is ~dulla^@204~ 
                Me.tablePurchaseInf~dulla^@204~            End If
        End If
  ~dulla^@204~ eSalesInfo = CType(MyBase.Tables("Sal~dulla^@204~ sInfoDataTable)
        If (initTabl~dulla^@204~ n
            If (Not (Me.tableSales~dulla^@204~ ing) Then
                Me.tableSa~dulla^@204~ ars
            End If
        End ~dulla^@204~ e.tableStockCard = CType(MyBase.Table~dulla^@204~ ),StockCardDataTable)
        If (in~dulla^@204~ e) Then
            If (Not (Me.tabl~dulla^@204~ s Nothing) Then
                Me.t~dulla^@204~ .InitVars
            End If
      ~dulla^@204~      Me.tableStockCardDetail = CType(~dulla^@204~ ("StockCardDetail"),StockCardDetailDa~dulla^@204~      If (initTable = true) Then
    ~dulla^@204~ ot (Me.tableStockCardDetail) Is Nothi~dulla^@204~              Me.tableStockCardDetail.~dulla^@204~          End If
        End If
    ~dulla^@204~ upplier = CType(MyBase.Tables("Suppli~dulla^@204~ DataTable)
        If (initTable = t~dulla^@204~           If (Not (Me.tableSupplier) ~dulla^@204~ hen
                Me.tableSupplier~dulla^@204~           End If
        End If
   ~dulla^@204~ ionFK_CashSales_Customers = Me.Relati~dulla^@204~ ales_Customers")
        Me.relation~dulla^@204~ s_Customers = Me.Relations("FK_Credit~dulla^@204~ rs")
        Me.relationFK_Order_Pro~dulla^@204~ lations("FK_Order_Products")
       ~dulla^@204~ K_Products_PurchaseInfo = Me.Relation~dulla^@204~ s_PurchaseInfo")
        Me.relation~dulla^@204~ upplier = Me.Relations("FK_Purchase_S~dulla^@204~       Me.relationFK_PurchaseInfo_Purc~dulla^@204~ ations("FK_PurchaseInfo_Purchase")
 ~dulla^@204~ ationFK_PurchaseInfo_Supplier = Me.Re~dulla^@204~ urchaseInfo_Supplier")
        Me.re~dulla^@204~ sInfo_CashSales = Me.Relations("FK_Sa~dulla^@204~ ales")
        Me.relationFK_SalesIn~dulla^@204~ s = Me.Relations("FK_SalesInfo_Credit~dulla^@204~     Me.relationFK_SalesInfo_Products ~dulla^@204~ s("FK_SalesInfo_Products")
        M~dulla^@204~ SalesInfo_StockCardDetail = Me.Relati~dulla^@204~ Info_StockCardDetail")
        Me.re~dulla^@204~ sInfo_StockCardDetail1 = Me.Relations~dulla^@204~ o_StockCardDetail1")
        Me.rela~dulla^@204~ ard_SalesInfo = Me.Relations("FK_Stoc~dulla^@204~ fo")
        Me.relationFK_StockCard~dulla^@204~ ard = Me.Relations("FK_StockCardDetai~dulla^@204~ 
        Me.relationPurchaseInfo_Pro~dulla^@204~ lations("PurchaseInfo_Products")
   ~dulla^@204~  
    <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
    Private Sub InitClas~dulla^@204~ Me.DataSetName = "PurchaseInfoDataSet~dulla^@204~ e.Prefix = ""
        Me.Namespace =~dulla^@204~ uri.org/PurchaseInfoDataSet2.xsd"
  ~dulla^@204~ rceConstraints = true
        Me.Sch~dulla^@204~ ionMode = System.Data.SchemaSerializa~dulla^@204~ udeSchema
        Me.tableBlankTable~dulla^@204~ ableDataTable
        MyBase.Tables.~dulla^@204~ lankTable)
        Me.tableCashSales~dulla^@204~ lesDataTable
        MyBase.Tables.A~dulla^@204~ shSales)
        Me.tableCreditSales~dulla^@204~ SalesDataTable
        MyBase.Tables~dulla^@204~ CreditSales)
        Me.tableCustome~dulla^@204~ omersDataTable
        MyBase.Tables~dulla^@204~ Customers)
        Me.tableOrder = N~dulla^@204~ able
        MyBase.Tables.Add(Me.ta~dulla^@204~       Me.tableProducts = New Products~dulla^@204~       MyBase.Tables.Add(Me.tableProdu~dulla^@204~  Me.tablePurchase = New PurchaseDataT~dulla^@204~  MyBase.Tables.Add(Me.tablePurchase)~dulla^@204~ ablePurchaseInfo = New PurchaseInfoDa~dulla^@204~     MyBase.Tables.Add(Me.tablePurchas~dulla^@204~    Me.tableSalesInfo = New SalesInfoD~dulla^@204~      MyBase.Tables.Add(Me.tableSalesI~dulla^@204~  Me.tableStockCard = New StockCardDat~dulla^@204~    MyBase.Tables.Add(Me.tableStockCar~dulla^@204~ e.tableStockCardDetail = New StockCar~dulla^@204~ ble
        MyBase.Tables.Add(Me.tab~dulla^@204~ tail)
        Me.tableSupplier = New~dulla^@204~ Table
        MyBase.Tables.Add(Me.t~dulla^@204~ 
        Me.relationFK_CashSales_Cus~dulla^@204~ System.Data.DataRelation("FK_CashSale~dulla^@204~  New System.Data.DataColumn() {Me.tab~dulla^@204~ ustomerNameColumn}, New System.Data.D~dulla^@204~ Me.tableCashSales.CustomerNameColumn}~dulla^@204~      Me.Relations.Add(Me.relationFK_C~dulla^@204~ omers)
        Me.relationFK_CreditS~dulla^@204~ s = New System.Data.DataRelation("FK_~dulla^@204~ ustomers", New System.Data.DataColumn~dulla^@204~ ustomers.CustomerNameColumn}, New Sys~dulla^@204~ Column() {Me.tableCreditSales.Custome~dulla^@204~  false)
        Me.Relations.Add(Me.~dulla^@204~ editSales_Customers)
        Me.rela~dulla^@204~ Products = New System.Data.DataRelati~dulla^@204~ Products", New System.Data.DataColumn~dulla^@204~ roducts.PartNoColumn}, New System.Data.DataColumn() {Me.tableOrder.OrderNoColum~dulla^@204~        Me.Relations.Add(Me.relationFK~dulla^@204~ ts)
        Me.relationFK_Products_P~dulla^@204~  New System.Data.DataRelation("FK_Pro~dulla^@204~ eInfo", New System.Data.DataColumn() ~dulla^@204~ haseInfo.PartNoColumn}, New System.Da~dulla^@204~ () {Me.tableProducts.PartNoColumn}, f~dulla^@204~   Me.Relations.Add(Me.relationFK_Prod~dulla^@204~ Info)
        Me.relationFK_Purchase~dulla^@204~ ew System.Data.DataRelation("FK_Purch~dulla^@204~ , New System.Data.DataColumn() {Me.ta~dulla^@204~ upplierIDColumn}, New System.Data.Dat~dulla^@204~ .tablePurchase.SupplierIDColumn}, fal~dulla^@204~ Me.Relations.Add(Me.relationFK_Purcha~dulla^@204~ 
        Me.relationFK_PurchaseInfo_P~dulla^@204~  System.Data.DataRelation("FK_Purchas~dulla^@204~ e", New System.Data.DataColumn() {Me.~dulla^@204~ .PurchaseInvoiceNoColumn}, New System~dulla^@204~ umn() {Me.tablePurchaseInfo.InvoiceNo~dulla^@204~ e)
        Me.Relations.Add(Me.relat~dulla^@204~ eInfo_Purchase)
        Me.relationF~dulla^@204~ o_Supplier = New System.Data.DataRela~dulla^@204~ haseInfo_Supplier", New System.Data.D~dulla^@204~ Me.tableSupplier.SupplierIDColumn}, N~dulla^@204~ a.DataColumn() {Me.tablePurchaseInfo.~dulla^@204~ umn}, false)
        Me.Relations.Ad~dulla^@204~ FK_PurchaseInfo_Supplier)
        Me~dulla^@204~ alesInfo_CashSales = New System.Data.~dulla^@204~ "FK_SalesInfo_CashSales", New System.~dulla^@204~ mn() {Me.tableCashSales.CashSalesInvo~dulla^@204~  New System.Data.DataColumn() {Me.tab~dulla^@204~ ashSalesInvoiceNoColumn}, false)
   ~dulla^@204~ ions.Add(Me.relationFK_SalesInfo_Cash~dulla^@204~    Me.relationFK_SalesInfo_CreditSale~dulla^@204~ m.Data.DataRelation("FK_SalesInfo_Cre~dulla^@204~ w System.Data.DataColumn() {Me.tableC~dulla^@204~ editSalesInvoiceNoColumn}, New System~dulla^@204~ umn() {Me.tableSalesInfo.CreditSalesI~dulla^@204~ n}, false)
        Me.Relations.Add(~dulla^@204~ _SalesInfo_CreditSales)
        Me.r~dulla^@204~ esInfo_Products = New System.Data.Dat~dulla^@204~ _SalesInfo_Products", New System.Data~dulla^@204~  {Me.tableProducts.PartNoColumn}, New~dulla^@204~ DataColumn() {Me.tableSalesInfo.PartN~dulla^@204~ se)
        Me.Relations.Add(Me.rela~dulla^@204~ nfo_Products)
        Me.relationFK_~dulla^@204~ ckCardDetail = New System.Data.DataRe~dulla^@204~ lesInfo_StockCardDetail", New System.~dulla^@204~ mn() {Me.tableStockCardDetail.SalesIn~dulla^@204~ , Me.tableStockCardDetail.DateOfSaleC~dulla^@204~ ystem.Data.DataColumn() {Me.tableSale~dulla^@204~ esInvoiceNoColumn, Me.tableSalesInfo.~dulla^@204~ umn}, false)
        Me.Relations.Ad~dulla^@204~ FK_SalesInfo_StockCardDetail)
      ~dulla^@204~ FK_SalesInfo_StockCardDetail1 = New S~dulla^@204~ taRelation("FK_SalesInfo_StockCardDet~dulla^@204~ stem.Data.DataColumn() {Me.tableStock~dulla^@204~ lesInvoiceNoColumn, Me.tableStockCard~dulla^@204~ SaleColumn}, New System.Data.DataColu~dulla^@204~ eSalesInfo.CreditSalesInvoiceNoColumn~dulla^@204~ esInfo.DateOfSaleColumn}, false)
   ~dulla^@204~ ions.Add(Me.relationFK_SalesInfo_Stoc~dulla^@204~ 
        Me.relationFK_StockCard_Sal~dulla^@204~ System.Data.DataRelation("FK_StockCar~dulla^@204~  New System.Data.DataColumn() {Me.tab~dulla^@204~ artNoColumn}, New System.Data.DataCol~dulla^@204~ leStockCard.PartNoColumn}, false)
  ~dulla^@204~ tions.Add(Me.relationFK_StockCard_Sal~dulla^@204~     Me.relationFK_StockCardDetail_Sto~dulla^@204~ System.Data.DataRelation("FK_StockCar~dulla^@204~ Card", New System.Data.DataColumn() {~dulla^@204~ Card.StockCardNoColumn}, New System.D~dulla^@204~ n() {Me.tableStockCardDetail.StockCar~dulla^@204~ alse)
        Me.Relations.Add(Me.re~dulla^@204~ kCardDetail_StockCard)
        Me.re~dulla^@204~ eInfo_Products = New System.Data.Data~dulla^@204~ chaseInfo_Products", New System.Data.~dulla^@204~ {Me.tablePurchaseInfo.DescriptionColu~dulla^@204~ em.Data.DataColumn() {Me.tableProduct~dulla^@204~ Column}, false)
        Me.Relations~dulla^@204~ ionPurchaseInfo_Products)
    End Su~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
    Private Function ShouldSeri~dulla^@204~ le() As Boolean
        Return false~dulla^@204~ ction
    
    <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
    Private Fu~dulla^@204~ SerializeCashSales() As Boolean
    ~dulla^@204~ lse
    End Function
    
    <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~  Function ShouldSerializeCreditSales(~dulla^@204~ 
        Return false
    End Functi~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
    Private Function ShouldSer~dulla^@204~ rs() As Boolean
        Return false~dulla^@204~ ction
    
    <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
    Private Fu~dulla^@204~ SerializeOrder() As Boolean
        ~dulla^@204~ 
    End Function
    
    <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ ction ShouldSerializeProducts() As Bo~dulla^@204~   Return false
    End Function
   ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~     Private Function ShouldSerializeP~dulla^@204~ Boolean
        Return false
    En~dulla^@204~    
    <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
    Private Function S~dulla^@204~ ePurchaseInfo() As Boolean
        R~dulla^@204~     End Function
    
    <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ tion ShouldSerializeSalesInfo() As Bo~dulla^@204~   Return false
    End Function
   ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~     Private Function ShouldSerializeS~dulla^@204~  Boolean
        Return false
    E~dulla^@204~     
    <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
    Private Function ~dulla^@204~ zeStockCardDetail() As Boolean
     ~dulla^@204~ se
    End Function
    
    <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ Function ShouldSerializeSupplier() As~dulla^@204~      Return false
    End Function
~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
    Private Sub SchemaChanged(ByVa~dulla^@204~ bject, ByVal e As System.ComponentMod~dulla^@204~ ChangeEventArgs)
        If (e.Actio~dulla^@204~ mponentModel.CollectionChangeAction.R~dulla^@204~             Me.InitVars
        End ~dulla^@204~ ub
    
    <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
    Public Shared~dulla^@204~ TypedDataSetSchema(ByVal xs As System~dulla^@204~ mlSchemaSet) As System.Xml.Schema.Xml~dulla^@204~ Type
        Dim ds As PurchaseInfoD~dulla^@204~  PurchaseInfoDataSet2
        Dim ty~dulla^@204~ Xml.Schema.XmlSchemaComplexType = New~dulla^@204~ chema.XmlSchemaComplexType
        D~dulla^@204~ s System.Xml.Schema.XmlSchemaSequence~dulla^@204~ .Xml.Schema.XmlSchemaSequence
      ~dulla^@204~ etSchemaSerializable)
        Dim an~dulla^@204~ ml.Schema.XmlSchemaAny = New System.X~dulla^@204~ SchemaAny
        any.Namespace = ds~dulla^@204~        sequence.Items.Add(any)
     ~dulla^@204~ cle = sequence
        Return type
~dulla^@204~ ion
    
    Public Delegate Sub Bl~dulla^@204~ angeEventHandler(ByVal sender As Obje~dulla^@204~ s BlankTableRowChangeEvent)
    
  ~dulla^@204~ gate Sub CashSalesRowChangeEventHandl~dulla^@204~ er As Object, ByVal e As CashSalesRow~dulla^@204~ 
    
    Public Delegate Sub Credit~dulla^@204~ eEventHandler(ByVal sender As Object,~dulla^@204~ reditSalesRowChangeEvent)
    
    ~dulla^@204~ te Sub CustomersRowChangeEventHandler~dulla^@204~  As Object, ByVal e As CustomersRowCh~dulla^@204~    
    Public Delegate Sub OrderRow~dulla^@204~ ndler(ByVal sender As Object, ByVal e~dulla^@204~ hangeEvent)
    
    Public Delegat~dulla^@204~ sRowChangeEventHandler(ByVal sender A~dulla^@204~ al e As ProductsRowChangeEvent)
    ~dulla^@204~ Delegate Sub PurchaseRowChangeEventHa~dulla^@204~ ender As Object, ByVal e As PurchaseR~dulla^@204~ )
    
    Public Delegate Sub Purc~dulla^@204~ angeEventHandler(ByVal sender As Obje~dulla^@204~ s PurchaseInfoRowChangeEvent)
    
~dulla^@204~ legate Sub SalesInfoRowChangeEventHan~dulla^@204~ nder As Object, ByVal e As SalesInfoRowChangeEvent)
    
    Public Delegate ~dulla^@204~ RowChangeEventHandler(ByVal sender As~dulla^@204~ l e As StockCardRowChangeEvent)
    ~dulla^@204~ Delegate Sub StockCardDetailRowChange~dulla^@204~ ByVal sender As Object, ByVal e As St~dulla^@204~ RowChangeEvent)
    
    Public Del~dulla^@204~ plierRowChangeEventHandler(ByVal send~dulla^@204~  ByVal e As SupplierRowChangeEvent)
~dulla^@204~ stem.CodeDom.Compiler.GeneratedCodeAt~dulla^@204~ em.Data.Design.TypedDataSetGenerator"~dulla^@204~   _
     System.Serializable(),  _
~dulla^@204~ ml.Serialization.XmlSchemaProviderAtt~dulla^@204~ pedTableSchema")>  _
    Partial Pub~dulla^@204~ nkTableDataTable
        Inherits Sy~dulla^@204~ aTable
        Implements System.Col~dulla^@204~ merable
        
        Private co~dulla^@204~  System.Data.DataColumn
        
  ~dulla^@204~  columnDescription As System.Data.Dat~dulla^@204~     
        Private columnReorderLe~dulla^@204~ .Data.DataColumn
        
        P~dulla^@204~ ShelfNo As System.Data.DataColumn
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Sub New()
  ~dulla^@204~ ase.New
            Me.TableName = "~dulla^@204~             Me.BeginInit
           ~dulla^@204~ 
            Me.EndInit
        End~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Friend Sub N~dulla^@204~ e As System.Data.DataTable)
        ~dulla^@204~ w
            Me.TableName = table.T~dulla^@204~          If (table.CaseSensitive <> t~dulla^@204~ CaseSensitive) Then
                ~dulla^@204~ ive = table.CaseSensitive
          ~dulla^@204~          If (table.Locale.ToString <>~dulla^@204~ t.Locale.ToString) Then
            ~dulla^@204~  = table.Locale
            End If
~dulla^@204~ f (table.Namespace <> table.DataSet.N~dulla^@204~ n
                Me.Namespace = tab~dulla^@204~ 
            End If
            Me.P~dulla^@204~ .Prefix
            Me.MinimumCapaci~dulla^@204~ nimumCapacity
        End Sub
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Protected Sub New(ByVal~dulla^@204~ em.Runtime.Serialization.Serializatio~dulla^@204~ context As System.Runtime.Serializati~dulla^@204~ ontext)
            MyBase.New(info,~dulla^@204~           Me.InitVars
        End Su~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public ReadOnly~dulla^@204~ tNoColumn() As System.Data.DataColumn~dulla^@204~  Get
                Return Me.colum~dulla^@204~         End Get
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public ReadOnly ~dulla^@204~ riptionColumn() As System.Data.DataCo~dulla^@204~      Get
                Return Me.c~dulla^@204~ ion
            End Get
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ erty ReorderLevelColumn() As System.D~dulla^@204~ n
            Get
                R~dulla^@204~ mnReorderLevel
            End Get
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ adOnly Property ShelfNoColumn() As Sy~dulla^@204~ aColumn
            Get
           ~dulla^@204~ e.columnShelfNo
            End Get~dulla^@204~ Property
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute(),  _
   ~dulla^@204~ ComponentModel.Browsable(false)>  _
~dulla^@204~ c ReadOnly Property Count() As Intege~dulla^@204~   Get
                Return Me.Rows~dulla^@204~        End Get
        End Property~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Default Re~dulla^@204~ ty Item(ByVal index As Integer) As Bl~dulla^@204~             Get
                Retu~dulla^@204~ ows(index),BlankTableRow)
          ~dulla^@204~       End Property
        
       ~dulla^@204~  BlankTableRowChanging As BlankTableR~dulla^@204~ Handler
        
        Public Eve~dulla^@204~ RowChanged As BlankTableRowChangeEven~dulla^@204~      
        Public Event BlankTabl~dulla^@204~ As BlankTableRowChangeEventHandler
 ~dulla^@204~     Public Event BlankTableRowDeleted~dulla^@204~ eRowChangeEventHandler
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Overloads Sub AddBlankTa~dulla^@204~ row As BlankTableRow)
            Me~dulla^@204~ )
        End Sub
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Overloads Function AddBlankT~dulla^@204~  PartNo As String, ByVal Description ~dulla^@204~ Val ReorderLevel As Integer, ByVal Sh~dulla^@204~ ng) As BlankTableRow
            Dim~dulla^@204~ eRow As BlankTableRow = CType(Me.NewR~dulla^@204~ Row)
            rowBlankTableRow.It~dulla^@204~  Object() {PartNo, Description, Reord~dulla^@204~ fNo}
            Me.Rows.Add(rowBlan~dulla^@204~            Return rowBlankTableRow
 ~dulla^@204~ nction
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ rridable Function GetEnumerator() As ~dulla^@204~ tions.IEnumerator Implements System.C~dulla^@204~ numerable.GetEnumerator
            ~dulla^@204~ s.GetEnumerator
        End Function~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Overrides~dulla^@204~ ne() As System.Data.DataTable
      ~dulla^@204~  As BlankTableDataTable = CType(MyBas~dulla^@204~ TableDataTable)
            cln.Init~dulla^@204~      Return cln
        End Function~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Protected Overri~dulla^@204~ CreateInstance() As System.Data.DataT~dulla^@204~      Return New BlankTableDataTable
~dulla^@204~ unction
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ b InitVars()
            Me.columnPa~dulla^@204~ .Columns("PartNo")
            Me.co~dulla^@204~ on = MyBase.Columns("Description")
 ~dulla^@204~ .columnReorderLevel = MyBase.Columns(~dulla^@204~ ")
            Me.columnShelfNo = My~dulla^@204~ "ShelfNo")
        End Sub
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Private Sub InitClass()
 ~dulla^@204~ .columnPartNo = New System.Data.DataC~dulla^@204~ ", GetType(String), Nothing, System.D~dulla^@204~ pe.Element)
            MyBase.Colum~dulla^@204~ umnPartNo)
            Me.columnDesc~dulla^@204~  System.Data.DataColumn("Description"~dulla^@204~ ing), Nothing, System.Data.MappingTyp~dulla^@204~            MyBase.Columns.Add(Me.colu~dulla^@204~ )
            Me.columnReorderLevel ~dulla^@204~ Data.DataColumn("ReorderLevel", GetTy~dulla^@204~ Nothing, System.Data.MappingType.Elem~dulla^@204~      MyBase.Columns.Add(Me.columnReor~dulla^@204~           Me.columnShelfNo = New Syst~dulla^@204~ olumn("ShelfNo", GetType(String), Not~dulla^@204~ Data.MappingType.Element)
          ~dulla^@204~ mns.Add(Me.columnShelfNo)
          ~dulla^@204~ rtNo.MaxLength = 20
            Me.c~dulla^@204~ ion.MaxLength = 20
            Me.co~dulla^@204~ axLength = 20
        End Sub
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Function NewBlan~dulla^@204~ s BlankTableRow
            Return C~dulla^@204~ w,BlankTableRow)
        End Functio~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Protected Overr~dulla^@204~  NewRowFromBuilder(ByVal builder As S~dulla^@204~ taRowBuilder) As System.Data.DataRow~dulla^@204~ Return New BlankTableRow(builder)
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ verrides Function GetRowType() As Sys~dulla^@204~          Return GetType(BlankTableRow~dulla^@204~ d Function
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~ ted Overrides Sub OnRowChanged(ByVal ~dulla^@204~ ata.DataRowChangeEventArgs)
        ~dulla^@204~ RowChanged(e)
            If (Not (M~dulla^@204~ owChangedEvent) Is Nothing) Then
   ~dulla^@204~ RaiseEvent BlankTableRowChanged(Me, New BlankTableRowChangeEvent(CType(e.Row,Bl~dulla^@204~  e.Action))
            End If
    ~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Prote~dulla^@204~ s Sub OnRowChanging(ByVal e As System~dulla^@204~ ChangeEventArgs)
            MyBase.~dulla^@204~ (e)
            If (Not (Me.BlankTab~dulla^@204~ Event) Is Nothing) Then
            ~dulla^@204~ t BlankTableRowChanging(Me, New Blank~dulla^@204~ eEvent(CType(e.Row,BlankTableRow), e.~dulla^@204~          End If
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Protected Overrides S~dulla^@204~ ed(ByVal e As System.Data.DataRowChan~dulla^@204~ 
            MyBase.OnRowDeleted(e)
~dulla^@204~ f (Not (Me.BlankTableRowDeletedEvent)~dulla^@204~ Then
                RaiseEvent Blan~dulla^@204~ ted(Me, New BlankTableRowChangeEvent(~dulla^@204~ lankTableRow), e.Action))
          ~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ected Overrides Sub OnRowDeleting(ByV~dulla^@204~ m.Data.DataRowChangeEventArgs)
     ~dulla^@204~ .OnRowDeleting(e)
            If (No~dulla^@204~ bleRowDeletingEvent) Is Nothing) Then~dulla^@204~      RaiseEvent BlankTableRowDeleting~dulla^@204~ kTableRowChangeEvent(CType(e.Row,Blan~dulla^@204~ .Action))
            End If
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ nkTableRow(ByVal row As BlankTableRow~dulla^@204~   Me.Rows.Remove(row)
        End Su~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Shared F~dulla^@204~ pedTableSchema(ByVal xs As System.Xml~dulla^@204~ hemaSet) As System.Xml.Schema.XmlSche~dulla^@204~ 
            Dim type As System.Xml.~dulla^@204~ emaComplexType = New System.Xml.Schem~dulla^@204~ mplexType
            Dim sequence A~dulla^@204~ Schema.XmlSchemaSequence = New System~dulla^@204~ mlSchemaSequence
            Dim ds ~dulla^@204~ foDataSet2 = New PurchaseInfoDataSet2~dulla^@204~  xs.Add(ds.GetSchemaSerializable)
  ~dulla^@204~  any1 As System.Xml.Schema.XmlSchemaA~dulla^@204~ em.Xml.Schema.XmlSchemaAny
         ~dulla^@204~ pace = "http://www.w3.org/2001/XMLSch~dulla^@204~      any1.MinOccurs = New Decimal(0)~dulla^@204~ any1.MaxOccurs = Decimal.MaxValue
  ~dulla^@204~ 1.ProcessContents = System.Xml.Schema~dulla^@204~ tentProcessing.Lax
            seque~dulla^@204~ (any1)
            Dim any2 As Syste~dulla^@204~ XmlSchemaAny = New System.Xml.Schema.~dulla^@204~ 
            any2.Namespace = "urn:sc~dulla^@204~ ft-com:xml-diffgram-v1"
            ~dulla^@204~ s = New Decimal(1)
            any2.~dulla^@204~ ts = System.Xml.Schema.XmlSchemaConte~dulla^@204~ Lax
            sequence.Items.Add(a~dulla^@204~      Dim attribute1 As System.Xml.Sch~dulla^@204~ Attribute = New System.Xml.Schema.Xml~dulla^@204~ te
            attribute1.Name = "na~dulla^@204~          attribute1.FixedValue = ds.N~dulla^@204~          type.Attributes.Add(attribut~dulla^@204~     Dim attribute2 As System.Xml.Sche~dulla^@204~ ttribute = New System.Xml.Schema.XmlS~dulla^@204~ e
            attribute2.Name = "tab~dulla^@204~             attribute2.FixedValue = "~dulla^@204~ aTable"
            type.Attributes.~dulla^@204~ 2)
            type.Particle = seque~dulla^@204~     Return type
        End Function~dulla^@204~ ss
    
    <System.CodeDom.Compile~dulla^@204~ deAttribute("System.Data.Design.Typed~dulla^@204~ tor", "2.0.0.0"),  _
     System.Ser~dulla^@204~  _
     System.Xml.Serialization.Xml~dulla^@204~ rAttribute("GetTypedTableSchema")>  _~dulla^@204~  Public Class CashSalesDataTable
   ~dulla^@204~  System.Data.DataTable
        Imple~dulla^@204~ Collections.IEnumerable
        
  ~dulla^@204~  columnCashSalesInvoiceNo As System.D~dulla^@204~ n
        
        Private columnDa~dulla^@204~ Data.DataColumn
        
        Pr~dulla^@204~ otalAmount As System.Data.DataColumn~dulla^@204~       Private columnVAT As System.Dat~dulla^@204~ 
        
        Private columnGran~dulla^@204~ tem.Data.DataColumn
        
      ~dulla^@204~ umnTotalInWords As System.Data.DataCo~dulla^@204~  
        Private columnCustomerName~dulla^@204~ ta.DataColumn
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Sub New()
            MyBase.New~dulla^@204~  Me.TableName = "CashSales"
        ~dulla^@204~ nit
            Me.InitClass
      ~dulla^@204~ nit
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Friend Sub New(ByVal table As Sys~dulla^@204~ Table)
            MyBase.New
     ~dulla^@204~ leName = table.TableName
           ~dulla^@204~ seSensitive <> table.DataSet.CaseSens~dulla^@204~                 Me.CaseSensitive = ta~dulla^@204~ tive
            End If
           ~dulla^@204~ cale.ToString <> table.DataSet.Locale~dulla^@204~ en
                Me.Locale = table~dulla^@204~         End If
            If (table~dulla^@204~  table.DataSet.Namespace) Then
     ~dulla^@204~ .Namespace = table.Namespace
       ~dulla^@204~             Me.Prefix = table.Prefix~dulla^@204~ Me.MinimumCapacity = table.MinimumCap~dulla^@204~   End Sub
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ ed Sub New(ByVal info As System.Runti~dulla^@204~ ion.SerializationInfo, ByVal context ~dulla^@204~ time.Serialization.StreamingContext)~dulla^@204~ MyBase.New(info, context)
          ~dulla^@204~ 
        End Sub
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public ReadOnly Property CashSalesIn~dulla^@204~ () As System.Data.DataColumn
       ~dulla^@204~              Return Me.columnCashSale~dulla^@204~            End Get
        End Prope~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public ReadOn~dulla^@204~ ateColumn() As System.Data.DataColumn~dulla^@204~  Get
                Return Me.colum~dulla^@204~       End Get
        End Property
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public ReadOnly Pr~dulla^@204~ mountColumn() As System.Data.DataColu~dulla^@204~    Get
                Return Me.col~dulla^@204~ t
            End Get
        End P~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Re~dulla^@204~ ty VATColumn() As System.Data.DataCol~dulla^@204~     Get
                Return Me.co~dulla^@204~         End Get
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public ReadOnly ~dulla^@204~ dTotalColumn() As System.Data.DataCol~dulla^@204~     Get
                Return Me.co~dulla^@204~ l
            End Get
        End P~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Re~dulla^@204~ ty TotalInWordsColumn() As System.Dat~dulla^@204~ 
            Get
                Ret~dulla^@204~ TotalInWords
            End Get
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ Only Property CustomerNameColumn() As~dulla^@204~ DataColumn
            Get
        ~dulla^@204~ n Me.columnCustomerName
            ~dulla^@204~     End Property
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute(),~dulla^@204~  System.ComponentModel.Browsable(fals~dulla^@204~    Public ReadOnly Property Count() A~dulla^@204~           Get
                Return~dulla^@204~ t
            End Get
        End P~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public De~dulla^@204~ y Property Item(ByVal index As Intege~dulla^@204~ esRow
            Get
             ~dulla^@204~ pe(Me.Rows(index),CashSalesRow)
    ~dulla^@204~ et
        End Property
        
 ~dulla^@204~  Event CashSalesRowChanging As CashSa~dulla^@204~ ventHandler
        
        Public~dulla^@204~ lesRowChanged As CashSalesRowChangeEv~dulla^@204~        
        Public Event CashSalesRowDeleting As CashSalesRowChangeEventHa~dulla^@204~   
        Public Event CashSalesRow~dulla^@204~ shSalesRowChangeEventHandler
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Overloads Sub AddC~dulla^@204~ yVal row As CashSalesRow)
          ~dulla^@204~ (row)
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Overloads Function AddCa~dulla^@204~ Val CashSalesInvoiceNo As String, ByV~dulla^@204~ ate, ByVal TotalAmount As Decimal, By~dulla^@204~ uble, ByVal GrandTotal As Decimal, By~dulla^@204~ rds As String, ByVal parentCustomersR~dulla^@204~ les_Customers As CustomersRow) As Cas~dulla^@204~           Dim rowCashSalesRow As Cash~dulla^@204~ ype(Me.NewRow,CashSalesRow)
        ~dulla^@204~ lesRow.ItemArray = New Object() {Cash~dulla^@204~ o, _Date, TotalAmount, VAT, GrandTota~dulla^@204~ ds, parentCustomersRowByFK_CashSales_~dulla^@204~ 
            Me.Rows.Add(rowCashSale~dulla^@204~       Return rowCashSalesRow
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ FindByCashSalesInvoiceNo(ByVal CashSa~dulla^@204~ As String) As CashSalesRow
         ~dulla^@204~ pe(Me.Rows.Find(New Object() {CashSal~dulla^@204~ ,CashSalesRow)
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Overridabl~dulla^@204~ tEnumerator() As System.Collections.I~dulla^@204~ plements System.Collections.IEnumerab~dulla^@204~ tor
            Return Me.Rows.GetEn~dulla^@204~      End Function
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Overrides Function Clone() As~dulla^@204~ DataTable
            Dim cln As Cas~dulla^@204~ le = CType(MyBase.Clone,CashSalesData~dulla^@204~        cln.InitVars
            Retu~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ rotected Overrides Function CreateIns~dulla^@204~ stem.Data.DataTable
            Retu~dulla^@204~ lesDataTable
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Friend Sub InitVars~dulla^@204~    Me.columnCashSalesInvoiceNo = MyBa~dulla^@204~ ashSalesInvoiceNo")
            Me.c~dulla^@204~ yBase.Columns("Date")
            Me~dulla^@204~ mount = MyBase.Columns("TotalAmount")~dulla^@204~  Me.columnVAT = MyBase.Columns("VAT")~dulla^@204~  Me.columnGrandTotal = MyBase.Columns~dulla^@204~ )
            Me.columnTotalInWords ~dulla^@204~ mns("TotalInWords")
            Me.c~dulla^@204~ Name = MyBase.Columns("CustomerName")~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ InitClass()
            Me.columnCas~dulla^@204~ No = New System.Data.DataColumn("Cash~dulla^@204~ o", GetType(String), Nothing, System.~dulla^@204~ ype.Element)
            MyBase.Colu~dulla^@204~ lumnCashSalesInvoiceNo)
            ~dulla^@204~  = New System.Data.DataColumn("Date",~dulla^@204~ ), Nothing, System.Data.MappingType.E~dulla^@204~         Me.columnDate.ExtendedPropert~dulla^@204~ rator_ColumnPropNameInRow", "_Date")~dulla^@204~ Me.columnDate.ExtendedProperties.Add(~dulla^@204~ erColumnName", "Date")
            M~dulla^@204~ .Add(Me.columnDate)
            Me.c~dulla^@204~ unt = New System.Data.DataColumn("Tot~dulla^@204~ tType(Decimal), Nothing, System.Data.~dulla^@204~ lement)
            MyBase.Columns.A~dulla^@204~ otalAmount)
            Me.columnVAT~dulla^@204~ .Data.DataColumn("VAT", GetType(Doubl~dulla^@204~ System.Data.MappingType.Element)
   ~dulla^@204~ se.Columns.Add(Me.columnVAT)
       ~dulla^@204~ nGrandTotal = New System.Data.DataCol~dulla^@204~ al", GetType(Decimal), Nothing, Syste~dulla^@204~ gType.Element)
            MyBase.Co~dulla^@204~ columnGrandTotal)
            Me.col~dulla^@204~ ds = New System.Data.DataColumn("Tota~dulla^@204~ tType(String), Nothing, System.Data.M~dulla^@204~ ement)
            MyBase.Columns.Ad~dulla^@204~ talInWords)
            Me.columnCus~dulla^@204~ ew System.Data.DataColumn("CustomerNa~dulla^@204~ String), Nothing, System.Data.Mapping~dulla^@204~ 
            MyBase.Columns.Add(Me.c~dulla^@204~ Name)
            Me.Constraints.Add~dulla^@204~ ata.UniqueConstraint("Constraint1", N~dulla^@204~ a.DataColumn() {Me.columnCashSalesInv~dulla^@204~ ))
            Me.columnCashSalesInv~dulla^@204~ BNull = false
            Me.columnC~dulla^@204~ ceNo.Unique = true
            Me.co~dulla^@204~ InvoiceNo.MaxLength = 20
           ~dulla^@204~ e.AllowDBNull = false
            Me~dulla^@204~ mount.AllowDBNull = false
          ~dulla^@204~ T.AllowDBNull = false
            Me~dulla^@204~ otal.AllowDBNull = false
           ~dulla^@204~ alInWords.AllowDBNull = false
      ~dulla^@204~ mnTotalInWords.MaxLength = 40
      ~dulla^@204~ mnCustomerName.AllowDBNull = false
 ~dulla^@204~ .columnCustomerName.MaxLength = 20
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  NewCashSalesRow() As CashSalesRow
 ~dulla^@204~ turn CType(Me.NewRow,CashSalesRow)
 ~dulla^@204~ nction
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ Overrides Function NewRowFromBuilder(~dulla^@204~  As System.Data.DataRowBuilder) As Sy~dulla^@204~ aRow
            Return New CashSale~dulla^@204~ 
        End Function
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Protected Overrides Function Ge~dulla^@204~  System.Type
            Return GetT~dulla^@204~ Row)
        End Function
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Protected Overrides Sub OnR~dulla^@204~ al e As System.Data.DataRowChangeEven~dulla^@204~        MyBase.OnRowChanged(e)
      ~dulla^@204~  (Me.CashSalesRowChangedEvent) Is Not~dulla^@204~                RaiseEvent CashSalesRo~dulla^@204~ New CashSalesRowChangeEvent(CType(e.R~dulla^@204~ ow), e.Action))
            End If
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ rides Sub OnRowChanging(ByVal e As Sy~dulla^@204~ aRowChangeEventArgs)
            MyB~dulla^@204~ ging(e)
            If (Not (Me.Cash~dulla^@204~ ingEvent) Is Nothing) Then
         ~dulla^@204~ vent CashSalesRowChanging(Me, New Cas~dulla^@204~ geEvent(CType(e.Row,CashSalesRow), e.~dulla^@204~          End If
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Protected Overrides S~dulla^@204~ ed(ByVal e As System.Data.DataRowChan~dulla^@204~ 
            MyBase.OnRowDeleted(e)
~dulla^@204~ f (Not (Me.CashSalesRowDeletedEvent) ~dulla^@204~ hen
                RaiseEvent CashS~dulla^@204~ d(Me, New CashSalesRowChangeEvent(CTy~dulla^@204~ SalesRow), e.Action))
            En~dulla^@204~  End Sub
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ d Overrides Sub OnRowDeleting(ByVal e~dulla^@204~ ta.DataRowChangeEventArgs)
         ~dulla^@204~ owDeleting(e)
            If (Not (M~dulla^@204~ wDeletingEvent) Is Nothing) Then
   ~dulla^@204~ RaiseEvent CashSalesRowDeleting(Me, N~dulla^@204~ owChangeEvent(CType(e.Row,CashSalesRo~dulla^@204~ )
            End If
        End Su~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Sub Remo~dulla^@204~ w(ByVal row As CashSalesRow)
       ~dulla^@204~ Remove(row)
        End Sub
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Shared Function Ge~dulla^@204~ hema(ByVal xs As System.Xml.Schema.Xm~dulla^@204~ s System.Xml.Schema.XmlSchemaComplexT~dulla^@204~     Dim type As System.Xml.Schema.Xml~dulla^@204~ Type = New System.Xml.Schema.XmlSchem~dulla^@204~ 
            Dim sequence As System.X~dulla^@204~ SchemaSequence = New System.Xml.Schem~dulla^@204~ quence
            Dim ds As Purchas~dulla^@204~  = New PurchaseInfoDataSet2
        ~dulla^@204~ .GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny~dulla^@204~ .Xml.Schema.XmlSchemaAny
           ~dulla^@204~ ce = "http://www.w3.org/2001/XMLSchem~dulla^@204~    any1.MinOccurs = New Decimal(0)
 ~dulla^@204~ y1.MaxOccurs = Decimal.MaxValue
    ~dulla^@204~ ProcessContents = System.Xml.Schema.X~dulla^@204~ ntProcessing.Lax
            sequenc~dulla^@204~ ny1)
            Dim any2 As System.~dulla^@204~ lSchemaAny = New System.Xml.Schema.Xm~dulla^@204~            any2.Namespace = "urn:sche~dulla^@204~ -com:xml-diffgram-v1"
            an~dulla^@204~ = New Decimal(1)
            any2.Pr~dulla^@204~  = System.Xml.Schema.XmlSchemaContent~dulla^@204~ x
            sequence.Items.Add(any~dulla^@204~    Dim attribute1 As System.Xml.Schem~dulla^@204~ tribute = New System.Xml.Schema.XmlSc~dulla^@204~ 
            attribute1.Name = "name~dulla^@204~        attribute1.FixedValue = ds.Nam~dulla^@204~        type.Attributes.Add(attribute1~dulla^@204~   Dim attribute2 As System.Xml.Schema~dulla^@204~ ribute = New System.Xml.Schema.XmlSch~dulla^@204~ 
            attribute2.Name = "table~dulla^@204~           attribute2.FixedValue = "Ca~dulla^@204~ ble"
            type.Attributes.Add~dulla^@204~ 
            type.Particle = sequence~dulla^@204~  Return type
        End Function
 ~dulla^@204~ 
    
    <System.CodeDom.Compiler.G~dulla^@204~ ttribute("System.Data.Design.TypedDat~dulla^@204~ ", "2.0.0.0"),  _
     System.Serial~dulla^@204~ 
     System.Xml.Serialization.XmlSch~dulla^@204~ tribute("GetTypedTableSchema")>  _
 ~dulla^@204~ blic Class CreditSalesDataTable
    ~dulla^@204~ System.Data.DataTable
        Implem~dulla^@204~ ollections.IEnumerable
        
   ~dulla^@204~ columnCreditSalesInvoiceNo As System.~dulla^@204~ mn
        
        Private columnD~dulla^@204~ .Data.DataColumn
        
        P~dulla^@204~ TotalAmount As System.Data.DataColumn~dulla^@204~        Private columnVAT As System.Da~dulla^@204~ 
        
        Private columnGra~dulla^@204~ stem.Data.DataColumn
        
     ~dulla^@204~ lumnTotalInWords As System.Data.DataC~dulla^@204~   
        Private columnDueDate As ~dulla^@204~ ataColumn
        
        Private ~dulla^@204~ rName As System.Data.DataColumn
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Sub New()
    ~dulla^@204~ e.New
            Me.TableName = "Cr~dulla^@204~            Me.BeginInit
            ~dulla^@204~ 
            Me.EndInit
        End ~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Friend Sub Ne~dulla^@204~  As System.Data.DataTable)
         ~dulla^@204~ 
            Me.TableName = table.Ta~dulla^@204~         If (table.CaseSensitive <> ta~dulla^@204~ aseSensitive) Then
                M~dulla^@204~ ve = table.CaseSensitive
           ~dulla^@204~         If (table.Locale.ToString <> ~dulla^@204~ .Locale.ToString) Then
             ~dulla^@204~ = table.Locale
            End If
 ~dulla^@204~  (table.Namespace <> table.DataSet.Na~dulla^@204~ 
                Me.Namespace = tabl~dulla^@204~             End If
            Me.Pr~dulla^@204~ Prefix
            Me.MinimumCapacit~dulla^@204~ imumCapacity
        End Sub
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Protected Sub New(ByVal ~dulla^@204~ m.Runtime.Serialization.Serialization~dulla^@204~ ontext As System.Runtime.Serializatio~dulla^@204~ ntext)
            MyBase.New(info, ~dulla^@204~          Me.InitVars
        End Sub~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public ReadOnly ~dulla^@204~ itSalesInvoiceNoColumn() As System.Da~dulla^@204~ 
            Get
                Re~dulla^@204~ nCreditSalesInvoiceNo
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic ReadOnly Property DateColumn() A~dulla^@204~ .DataColumn
            Get
       ~dulla^@204~ rn Me.columnDate
            End Get~dulla^@204~  Property
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ ReadOnly Property TotalAmountColumn()~dulla^@204~ ta.DataColumn
            Get
     ~dulla^@204~ turn Me.columnTotalAmount
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public ReadOnly Property VATColumn(~dulla^@204~ ata.DataColumn
            Get
    ~dulla^@204~ eturn Me.columnVAT
            End G~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c ReadOnly Property GrandTotalColumn(~dulla^@204~ ata.DataColumn
            Get
    ~dulla^@204~ eturn Me.columnGrandTotal
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public ReadOnly Property TotalInWor~dulla^@204~  System.Data.DataColumn
            ~dulla^@204~         Return Me.columnTotalInWords~dulla^@204~ End Get
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public ReadOnly Property~dulla^@204~ n() As System.Data.DataColumn
      ~dulla^@204~               Return Me.columnDueDate~dulla^@204~  End Get
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public ReadOnly Propert~dulla^@204~ eColumn() As System.Data.DataColumn
~dulla^@204~ et
                Return Me.columnC~dulla^@204~             End Get
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute(),  _
         System.Comp~dulla^@204~ owsable(false)>  _
        Public Re~dulla^@204~ ty Count() As Integer
            Ge~dulla^@204~       Return Me.Rows.Count
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Default ReadOnly Property I~dulla^@204~ ex As Integer) As CreditSalesRow
   ~dulla^@204~ 
                Return CType(Me.Rows~dulla^@204~ tSalesRow)
            End Get
    ~dulla^@204~ rty
        
        Public Event C~dulla^@204~ Changing As CreditSalesRowChangeEvent~dulla^@204~     
        Public Event CreditSale~dulla^@204~ s CreditSalesRowChangeEventHandler
 ~dulla^@204~     Public Event CreditSalesRowDeleti~dulla^@204~ alesRowChangeEventHandler
        
~dulla^@204~ c Event CreditSalesRowDeleted As Cred~dulla^@204~ ngeEventHandler
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Overloads Sub AddCreditSalesRow~dulla^@204~  CreditSalesRow)
            Me.Rows~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Overloads Function AddCreditSales~dulla^@204~ ditSalesInvoiceNo As String, ByVal _D~dulla^@204~ ByVal TotalAmount As Decimal, ByVal V~dulla^@204~  ByVal GrandTotal As Decimal, ByVal T~dulla^@204~ s String, ByVal DueDate As Date, ByVa~dulla^@204~ mersRowByFK_CreditSales_Customers As ~dulla^@204~  As CreditSalesRow
            Dim r~dulla^@204~ Row As CreditSalesRow = CType(Me.NewR~dulla^@204~ sRow)
            rowCreditSalesRow.~dulla^@204~ ew Object() {CreditSalesInvoiceNo, _D~dulla^@204~ unt, VAT, GrandTotal, TotalInWords, D~dulla^@204~ tCustomersRowByFK_CreditSales_Custome~dulla^@204~        Me.Rows.Add(rowCreditSalesRow)~dulla^@204~  Return rowCreditSalesRow
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ dByCreditSalesInvoiceNo(ByVal CreditS~dulla^@204~  As String) As CreditSalesRow
      ~dulla^@204~ CType(Me.Rows.Find(New Object() {Cred~dulla^@204~ eNo}),CreditSalesRow)
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Ove~dulla^@204~ tion GetEnumerator() As System.Collec~dulla^@204~ ator Implements System.Collections.IE~dulla^@204~ Enumerator
            Return Me.Row~dulla^@204~ or
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public Overrides Function Clone() As System.Data.DataTable
           ~dulla^@204~ reditSalesDataTable = CType(MyBase.Cl~dulla^@204~ esDataTable)
            cln.InitVar~dulla^@204~   Return cln
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Protected Overrides~dulla^@204~ ateInstance() As System.Data.DataTabl~dulla^@204~   Return New CreditSalesDataTable
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ InitVars()
            Me.columnCred~dulla^@204~ eNo = MyBase.Columns("CreditSalesInvo~dulla^@204~         Me.columnDate = MyBase.Column~dulla^@204~           Me.columnTotalAmount = MyBa~dulla^@204~ otalAmount")
            Me.columnVA~dulla^@204~ lumns("VAT")
            Me.columnGr~dulla^@204~ Base.Columns("GrandTotal")
         ~dulla^@204~ otalInWords = MyBase.Columns("TotalIn~dulla^@204~         Me.columnDueDate = MyBase.Col~dulla^@204~ ")
            Me.columnCustomerName~dulla^@204~ umns("CustomerName")
        End Sub~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Private Sub Init~dulla^@204~         Me.columnCreditSalesInvoiceNo~dulla^@204~ .Data.DataColumn("CreditSalesInvoiceN~dulla^@204~ tring), Nothing, System.Data.MappingT~dulla^@204~ 
            MyBase.Columns.Add(Me.co~dulla^@204~ esInvoiceNo)
            Me.columnDa~dulla^@204~ em.Data.DataColumn("Date", GetType(Da~dulla^@204~  System.Data.MappingType.Element)
  ~dulla^@204~ columnDate.ExtendedProperties.Add("Ge~dulla^@204~ nPropNameInRow", "_Date")
          ~dulla^@204~ te.ExtendedProperties.Add("Generator_~dulla^@204~ e", "Date")
            MyBase.Colum~dulla^@204~ umnDate)
            Me.columnTotalA~dulla^@204~ ystem.Data.DataColumn("TotalAmount", ~dulla^@204~ al), Nothing, System.Data.MappingType~dulla^@204~           MyBase.Columns.Add(Me.colum~dulla^@204~ 
            Me.columnVAT = New Syst~dulla^@204~ olumn("VAT", GetType(Double), Nothing~dulla^@204~ .MappingType.Element)
            My~dulla^@204~ Add(Me.columnVAT)
            Me.col~dulla^@204~  = New System.Data.DataColumn("GrandT~dulla^@204~ e(Decimal), Nothing, System.Data.Mapp~dulla^@204~ nt)
            MyBase.Columns.Add(M~dulla^@204~ Total)
            Me.columnTotalInW~dulla^@204~ stem.Data.DataColumn("TotalInWords", ~dulla^@204~ g), Nothing, System.Data.MappingType.~dulla^@204~          MyBase.Columns.Add(Me.column~dulla^@204~ 
            Me.columnDueDate = New ~dulla^@204~ ataColumn("DueDate", GetType(Date), N~dulla^@204~ m.Data.MappingType.Element)
        ~dulla^@204~ lumns.Add(Me.columnDueDate)
        ~dulla^@204~ CustomerName = New System.Data.DataCo~dulla^@204~ rName", GetType(String), Nothing, Sys~dulla^@204~ ingType.Element)
            MyBase.~dulla^@204~ e.columnCustomerName)
            Me~dulla^@204~ Add(New System.Data.UniqueConstraint(~dulla^@204~ , New System.Data.DataColumn() {Me.co~dulla^@204~ esInvoiceNo}, true))
            Me.~dulla^@204~ alesInvoiceNo.AllowDBNull = false
  ~dulla^@204~ columnCreditSalesInvoiceNo.Unique = t~dulla^@204~     Me.columnCreditSalesInvoiceNo.Max~dulla^@204~             Me.columnDate.AllowDBNull~dulla^@204~          Me.columnTotalAmount.AllowDB~dulla^@204~ 
            Me.columnVAT.AllowDBNull~dulla^@204~          Me.columnGrandTotal.AllowDBN~dulla^@204~             Me.columnTotalInWords.Max~dulla^@204~             Me.columnDueDate.AllowDBN~dulla^@204~             Me.columnCustomerName.All~dulla^@204~ lse
            Me.columnCustomerNam~dulla^@204~  20
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Function NewCreditSalesRow~dulla^@204~ alesRow
            Return CType(Me.~dulla^@204~ SalesRow)
        End Function
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Protected Overrides Fu~dulla^@204~ FromBuilder(ByVal builder As System.D~dulla^@204~ ilder) As System.Data.DataRow
      ~dulla^@204~ New CreditSalesRow(builder)
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Prot~dulla^@204~ es Function GetRowType() As System.Ty~dulla^@204~    Return GetType(CreditSalesRow)
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ verrides Sub OnRowChanged(ByVal e As ~dulla^@204~ ataRowChangeEventArgs)
            M~dulla^@204~ anged(e)
            If (Not (Me.Cre~dulla^@204~ angedEvent) Is Nothing) Then
       ~dulla^@204~ eEvent CreditSalesRowChanged(Me, New ~dulla^@204~ wChangeEvent(CType(e.Row,CreditSalesR~dulla^@204~ ))
            End If
        End S~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Protected Over~dulla^@204~ owChanging(ByVal e As System.Data.Dat~dulla^@204~ ntArgs)
            MyBase.OnRowChan~dulla^@204~         If (Not (Me.CreditSalesRowCha~dulla^@204~ s Nothing) Then
                Rais~dulla^@204~ SalesRowChanging(Me, New CreditSalesR~dulla^@204~ (CType(e.Row,CreditSalesRow), e.Actio~dulla^@204~     End If
        End Sub
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Protected Overrides Sub On~dulla^@204~ Val e As System.Data.DataRowChangeEve~dulla^@204~         MyBase.OnRowDeleted(e)
     ~dulla^@204~ t (Me.CreditSalesRowDeletedEvent) Is ~dulla^@204~ 
                RaiseEvent CreditSa~dulla^@204~ (Me, New CreditSalesRowChangeEvent(CT~dulla^@204~ ditSalesRow), e.Action))
           ~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ cted Overrides Sub OnRowDeleting(ByVa~dulla^@204~ .Data.DataRowChangeEventArgs)
      ~dulla^@204~ OnRowDeleting(e)
            If (Not~dulla^@204~ lesRowDeletingEvent) Is Nothing) Then~dulla^@204~      RaiseEvent CreditSalesRowDeletin~dulla^@204~ ditSalesRowChangeEvent(CType(e.Row,Cr~dulla^@204~ , e.Action))
            End If
   ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ CreditSalesRow(ByVal row As CreditSal~dulla^@204~        Me.Rows.Remove(row)
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Sha~dulla^@204~ GetTypedTableSchema(ByVal xs As Syste~dulla^@204~ XmlSchemaSet) As System.Xml.Schema.Xm~dulla^@204~ xType
            Dim type As System~dulla^@204~ mlSchemaComplexType = New System.Xml.~dulla^@204~ emaComplexType
            Dim seque~dulla^@204~ .Xml.Schema.XmlSchemaSequence = New S~dulla^@204~ ema.XmlSchemaSequence
            Di~dulla^@204~ aseInfoDataSet2 = New PurchaseInfoDat~dulla^@204~       xs.Add(ds.GetSchemaSerializable~dulla^@204~   Dim any1 As System.Xml.Schema.XmlSc~dulla^@204~  System.Xml.Schema.XmlSchemaAny
    ~dulla^@204~ Namespace = "http://www.w3.org/2001/X~dulla^@204~           any1.MinOccurs = New Decima~dulla^@204~      any1.MaxOccurs = Decimal.MaxValu~dulla^@204~   any1.ProcessContents = System.Xml.S~dulla^@204~ maContentProcessing.Lax
            ~dulla^@204~ s.Add(any1)
            Dim any2 As ~dulla^@204~ hema.XmlSchemaAny = New System.Xml.Sc~dulla^@204~ aAny
            any2.Namespace = "u~dulla^@204~ crosoft-com:xml-diffgram-v1"
       ~dulla^@204~ Occurs = New Decimal(1)
            ~dulla^@204~ ontents = System.Xml.Schema.XmlSchema~dulla^@204~ sing.Lax
            sequence.Items.~dulla^@204~           Dim attribute1 As System.Xm~dulla^@204~ chemaAttribute = New System.Xml.Schem~dulla^@204~ tribute
            attribute1.Name ~dulla^@204~ 
            attribute1.FixedValue =~dulla^@204~ 
            type.Attributes.Add(att~dulla^@204~          Dim attribute2 As System.Xml~dulla^@204~ hemaAttribute = New System.Xml.Schema~dulla^@204~ ribute
            attribute2.Name =~dulla^@204~ me"
            attribute2.FixedValu~dulla^@204~ lesDataTable"
            type.Attri~dulla^@204~ ribute2)
            type.Particle =~dulla^@204~           Return type
        End Fu~dulla^@204~ nd Class
    
    <System.CodeDom.C~dulla^@204~ atedCodeAttribute("System.Data.Design~dulla^@204~ Generator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Ser~dulla^@204~ lSchemaProviderAttribute("GetTypedTab~dulla^@204~ _
    Partial Public Class Customers~dulla^@204~       Inherits System.Data.DataTable~dulla^@204~ ements System.Collections.IEnumerable~dulla^@204~        Private columnCustomerName As ~dulla^@204~ ataColumn
        
        Private ~dulla^@204~  As System.Data.DataColumn
        ~dulla^@204~ ate columnKebele As System.Data.DataC~dulla^@204~   
        Private columnHouseNo As ~dulla^@204~ ataColumn
        
        Private ~dulla^@204~ System.Data.DataColumn
        
   ~dulla^@204~ columnFax As System.Data.DataColumn
~dulla^@204~      Private columnPostalAddress As S~dulla^@204~ taColumn
        
        Private c~dulla^@204~  System.Data.DataColumn
        
  ~dulla^@204~  columnCustomerVATRegNo As System.Dat~dulla^@204~ 
        
        Private columnCust~dulla^@204~ System.Data.DataColumn
        
   ~dulla^@204~ columnCustomerDateOfReg As System.Dat~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ 
            MyBase.New
            ~dulla^@204~ = "Customers"
            Me.BeginIn~dulla^@204~    Me.InitClass
            Me.EndIn~dulla^@204~ nd Sub
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~  New(ByVal table As System.Data.DataT~dulla^@204~       MyBase.New
            Me.Tabl~dulla^@204~ .TableName
            If (table.Cas~dulla^@204~  table.DataSet.CaseSensitive) Then
 ~dulla^@204~   Me.CaseSensitive = table.CaseSensit~dulla^@204~     End If
            If (table.Loc~dulla^@204~ <> table.DataSet.Locale.ToString) The~dulla^@204~       Me.Locale = table.Locale
     ~dulla^@204~ 
            If (table.Namespace <> ~dulla^@204~ .Namespace) Then
                Me.~dulla^@204~ able.Namespace
            End If
 ~dulla^@204~ .Prefix = table.Prefix
            M~dulla^@204~ city = table.MinimumCapacity
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Protecte~dulla^@204~ al info As System.Runtime.Serializati~dulla^@204~ ionInfo, ByVal context As System.Runt~dulla^@204~ tion.StreamingContext)
            M~dulla^@204~ o, context)
            Me.InitVars~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ly Property CustomerNameColumn() As S~dulla^@204~ taColumn
            Get
          ~dulla^@204~ Me.columnCustomerName
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic ReadOnly Property SubCityColumn(~dulla^@204~ ata.DataColumn
            Get
    ~dulla^@204~ eturn Me.columnSubCity
            E~dulla^@204~    End Property
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic ReadOnly Property KebeleColumn(~dulla^@204~ ata.DataColumn
            Get
    ~dulla^@204~ eturn Me.columnKebele
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic ReadOnly Property HouseNoColumn(~dulla^@204~ ata.DataColumn
            Get
    ~dulla^@204~ eturn Me.columnHouseNo
            E~dulla^@204~    End Property
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic ReadOnly Property TelColumn() A~dulla^@204~ .DataColumn
            Get
       ~dulla^@204~ rn Me.columnTel
            End Get~dulla^@204~ Property
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ eadOnly Property FaxColumn() As Syste~dulla^@204~ lumn
            Get
              ~dulla^@204~ olumnFax
            End Get
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  Property PostalAddressColumn() As Sy~dulla^@204~ aColumn
            Get
           ~dulla^@204~ e.columnPostalAddress
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic ReadOnly Property EmailColumn() ~dulla^@204~ a.DataColumn
            Get
      ~dulla^@204~ urn Me.columnEmail
            End G~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c ReadOnly Property CustomerVATRegNoC~dulla^@204~ stem.Data.DataColumn
            Get~dulla^@204~      Return Me.columnCustomerVATRegNo~dulla^@204~  End Get
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public ReadOnly Propert~dulla^@204~ NoColumn() As System.Data.DataColumn~dulla^@204~ Get
                Return Me.column~dulla^@204~ 
            End Get
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Rea~dulla^@204~ y CustomerDateOfRegColumn() As System~dulla^@204~ umn
            Get
               ~dulla^@204~ lumnCustomerDateOfReg
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute(),  ~dulla^@204~ ystem.ComponentModel.Browsable(false)~dulla^@204~  Public ReadOnly Property Count() As ~dulla^@204~         Get
                Return M~dulla^@204~ 
            End Get
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Defa~dulla^@204~ Property Item(ByVal index As Integer)~dulla^@204~ Row
            Get
               ~dulla^@204~ (Me.Rows(index),CustomersRow)
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ vent CustomersRowChanging As Customer~dulla^@204~ ntHandler
        
        Public E~dulla^@204~ sRowChanged As CustomersRowChangeEven~dulla^@204~      
        Public Event Customers~dulla^@204~ s CustomersRowChangeEventHandler
   ~dulla^@204~   Public Event CustomersRowDeleted As~dulla^@204~ ChangeEventHandler
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Overloads Sub AddCustomersRo~dulla^@204~ s CustomersRow)
            Me.Rows.~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic Overloads Function AddCustomersRow~dulla^@204~ erName As String, ByVal SubCity As St~dulla^@204~ ebele As String, ByVal HouseNo As Str~dulla^@204~ l As String, ByVal Fax As String, ByV~dulla^@204~ ess As String, ByVal Email As String,~dulla^@204~ erVATRegNo As String, ByVal CustomerT~dulla^@204~ g, ByVal CustomerDateOfReg As Date) A~dulla^@204~ w
            Dim rowCustomersRow As~dulla^@204~  = CType(Me.NewRow,CustomersRow)
   ~dulla^@204~ ustomersRow.ItemArray = New Object() ~dulla^@204~ , SubCity, Kebele, HouseNo, Tel, Fax,~dulla^@204~ s, Email, CustomerVATRegNo, CustomerT~dulla^@204~ rDateOfReg}
            Me.Rows.Add(~dulla^@204~ ow)
            Return rowCustomersR~dulla^@204~ nd Function
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Function FindByCustomerName(ByVal C~dulla^@204~ s String) As CustomersRow
          ~dulla^@204~ e(Me.Rows.Find(New Object() {Customer~dulla^@204~ ersRow)
        End Function
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Overridable Funct~dulla^@204~ ator() As System.Collections.IEnumera~dulla^@204~ s System.Collections.IEnumerable.GetE~dulla^@204~           Return Me.Rows.GetEnumerato~dulla^@204~ d Function
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Overrides Function Clone() As System~dulla^@204~ le
            Dim cln As CustomersD~dulla^@204~ ype(MyBase.Clone,CustomersDataTable)~dulla^@204~ cln.InitVars
            Return cln~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ d Overrides Function CreateInstance()~dulla^@204~ ta.DataTable
            Return New ~dulla^@204~ Table
        End Function
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Friend Sub InitVars()
            Me.columnCustomerName = MyBase.Co~dulla^@204~ erName")
            Me.columnSubCit~dulla^@204~ lumns("SubCity")
            Me.colu~dulla^@204~ Base.Columns("Kebele")
            M~dulla^@204~ No = MyBase.Columns("HouseNo")
     ~dulla^@204~ umnTel = MyBase.Columns("Tel")
     ~dulla^@204~ umnFax = MyBase.Columns("Fax")
     ~dulla^@204~ umnPostalAddress = MyBase.Columns("Po~dulla^@204~ 
            Me.columnEmail = MyBase~dulla^@204~ il")
            Me.columnCustomerVA~dulla^@204~ se.Columns("CustomerVATRegNo")
     ~dulla^@204~ umnCustomerTINNo = MyBase.Columns("Cu~dulla^@204~ 
            Me.columnCustomerDateOf~dulla^@204~ Columns("CustomerDateOfReg")
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Private ~dulla^@204~ ()
            Me.columnCustomerName~dulla^@204~ .Data.DataColumn("CustomerName", GetT~dulla^@204~ Nothing, System.Data.MappingType.Elem~dulla^@204~      MyBase.Columns.Add(Me.columnCust~dulla^@204~           Me.columnSubCity = New Syst~dulla^@204~ olumn("SubCity", GetType(String), Not~dulla^@204~ Data.MappingType.Element)
          ~dulla^@204~ mns.Add(Me.columnSubCity)
          ~dulla^@204~ bele = New System.Data.DataColumn("Ke~dulla^@204~ e(String), Nothing, System.Data.Mappi~dulla^@204~ t)
            MyBase.Columns.Add(Me~dulla^@204~ )
            Me.columnHouseNo = New~dulla^@204~ DataColumn("HouseNo", GetType(String)~dulla^@204~ stem.Data.MappingType.Element)
     ~dulla^@204~ .Columns.Add(Me.columnHouseNo)
     ~dulla^@204~ umnTel = New System.Data.DataColumn("~dulla^@204~ (String), Nothing, System.Data.Mappin~dulla^@204~ )
            MyBase.Columns.Add(Me.~dulla^@204~            Me.columnFax = New System.~dulla^@204~ mn("Fax", GetType(String), Nothing, S~dulla^@204~ ppingType.Element)
            MyBas~dulla^@204~ (Me.columnFax)
            Me.column~dulla^@204~  = New System.Data.DataColumn("Postal~dulla^@204~ Type(String), Nothing, System.Data.Ma~dulla^@204~ ment)
            MyBase.Columns.Add~dulla^@204~ talAddress)
            Me.columnEma~dulla^@204~ em.Data.DataColumn("Email", GetType(S~dulla^@204~ ng, System.Data.MappingType.Element)~dulla^@204~ MyBase.Columns.Add(Me.columnEmail)
 ~dulla^@204~ .columnCustomerVATRegNo = New System.~dulla^@204~ mn("CustomerVATRegNo", GetType(String~dulla^@204~ ystem.Data.MappingType.Element)
    ~dulla^@204~ e.Columns.Add(Me.columnCustomerVATReg~dulla^@204~     Me.columnCustomerTINNo = New Syst~dulla^@204~ olumn("CustomerTINNo", GetType(String~dulla^@204~ ystem.Data.MappingType.Element)
    ~dulla^@204~ e.Columns.Add(Me.columnCustomerTINNo)~dulla^@204~  Me.columnCustomerDateOfReg = New Sys~dulla^@204~ Column("CustomerDateOfReg", GetType(D~dulla^@204~ , System.Data.MappingType.Element)
 ~dulla^@204~ Base.Columns.Add(Me.columnCustomerDat~dulla^@204~         Me.Constraints.Add(New System~dulla^@204~ onstraint("Constraint1", New System.D~dulla^@204~ n() {Me.columnCustomerName}, true))
~dulla^@204~ e.columnCustomerName.AllowDBNull = fa~dulla^@204~     Me.columnCustomerName.Unique = tr~dulla^@204~    Me.columnCustomerName.MaxLength = ~dulla^@204~    Me.columnSubCity.MaxLength = 20
 ~dulla^@204~ .columnKebele.MaxLength = 10
       ~dulla^@204~ nHouseNo.MaxLength = 10
            ~dulla^@204~ MaxLength = 20
            Me.column~dulla^@204~  = 20
            Me.columnPostalAdd~dulla^@204~ h = 20
            Me.columnEmail.Ma~dulla^@204~ 
            Me.columnCustomerVATRegN~dulla^@204~  20
            Me.columnCustomerTIN~dulla^@204~ = 20
        End Sub
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Function NewCustomersRow(~dulla^@204~ sRow
            Return CType(Me.New~dulla^@204~ Row)
        End Function
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Protected Overrides Functio~dulla^@204~ uilder(ByVal builder As System.Data.D~dulla^@204~ ) As System.Data.DataRow
           ~dulla^@204~ ustomersRow(builder)
        End Fun~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Protected O~dulla^@204~ tion GetRowType() As System.Type
   ~dulla^@204~ rn GetType(CustomersRow)
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Protect~dulla^@204~ Sub OnRowChanged(ByVal e As System.Da~dulla^@204~ ngeEventArgs)
            MyBase.OnR~dulla^@204~ 
            If (Not (Me.CustomersRow~dulla^@204~  Is Nothing) Then
                Ra~dulla^@204~ omersRowChanged(Me, New CustomersRowC~dulla^@204~ ype(e.Row,CustomersRow), e.Action))
~dulla^@204~ nd If
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Protected Overrides Sub OnRowCh~dulla^@204~ e As System.Data.DataRowChangeEventAr~dulla^@204~     MyBase.OnRowChanging(e)
        ~dulla^@204~ Me.CustomersRowChangingEvent) Is Noth~dulla^@204~               RaiseEvent CustomersRow~dulla^@204~ New CustomersRowChangeEvent(CType(e.R~dulla^@204~ ow), e.Action))
            End If
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ rides Sub OnRowDeleted(ByVal e As Sys~dulla^@204~ RowChangeEventArgs)
            MyBa~dulla^@204~ ed(e)
            If (Not (Me.Custom~dulla^@204~ Event) Is Nothing) Then
            ~dulla^@204~ t CustomersRowDeleted(Me, New Custome~dulla^@204~ ent(CType(e.Row,CustomersRow), e.Acti~dulla^@204~      End If
        End Sub
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Protected Overrides Sub O~dulla^@204~ ByVal e As System.Data.DataRowChangeE~dulla^@204~           MyBase.OnRowDeleting(e)
  ~dulla^@204~ (Not (Me.CustomersRowDeletingEvent) I~dulla^@204~ en
                RaiseEvent Custom~dulla^@204~ g(Me, New CustomersRowChangeEvent(CTy~dulla^@204~ omersRow), e.Action))
            En~dulla^@204~  End Sub
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ ub RemoveCustomersRow(ByVal row As Cu~dulla^@204~             Me.Rows.Remove(row)
    ~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ tion GetTypedTableSchema(ByVal xs As ~dulla^@204~ hema.XmlSchemaSet) As System.Xml.Sche~dulla^@204~ omplexType
            Dim type As S~dulla^@204~ ema.XmlSchemaComplexType = New System~dulla^@204~ mlSchemaComplexType
            Dim ~dulla^@204~ ystem.Xml.Schema.XmlSchemaSequence = ~dulla^@204~ l.Schema.XmlSchemaSequence
         ~dulla^@204~ PurchaseInfoDataSet2 = New PurchaseIn~dulla^@204~            xs.Add(ds.GetSchemaSeriali~dulla^@204~        Dim any1 As System.Xml.Schema.~dulla^@204~ = New System.Xml.Schema.XmlSchemaAny~dulla^@204~ any1.Namespace = "http://www.w3.org/2~dulla^@204~ "
            any1.MinOccurs = New D~dulla^@204~           any1.MaxOccurs = Decimal.Ma~dulla^@204~        any1.ProcessContents = System.~dulla^@204~ lSchemaContentProcessing.Lax
       ~dulla^@204~ .Items.Add(any1)
            Dim any~dulla^@204~ ml.Schema.XmlSchemaAny = New System.X~dulla^@204~ SchemaAny
            any2.Namespace~dulla^@204~ as-microsoft-com:xml-diffgram-v1"
  ~dulla^@204~ 2.MinOccurs = New Decimal(1)
       ~dulla^@204~ cessContents = System.Xml.Schema.XmlS~dulla^@204~ rocessing.Lax
            sequence.I~dulla^@204~ )
            Dim attribute1 As Syst~dulla^@204~ .XmlSchemaAttribute = New System.Xml.~dulla^@204~ emaAttribute
            attribute1.~dulla^@204~ pace"
            attribute1.FixedVa~dulla^@204~ space
            type.Attributes.Ad~dulla^@204~ 
            Dim attribute2 As Syste~dulla^@204~ XmlSchemaAttribute = New System.Xml.S~dulla^@204~ maAttribute
            attribute2.N~dulla^@204~ ypeName"
            attribute2.Fixe~dulla^@204~ tomersDataTable"
            type.At~dulla^@204~ attribute2)
            type.Particl~dulla^@204~ 
            Return type
        End~dulla^@204~   End Class
    
    <System.CodeDo~dulla^@204~ neratedCodeAttribute("System.Data.Des~dulla^@204~ SetGenerator", "2.0.0.0"),  _
     S~dulla^@204~ zable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTyped~dulla^@204~ >  _
    Partial Public Class OrderD~dulla^@204~      Inherits System.Data.DataTable
~dulla^@204~ ments System.Collections.IEnumerable~dulla^@204~       Private columnOrderNo As System~dulla^@204~ umn
        
        Private column~dulla^@204~ tem.Data.DataColumn
        
      ~dulla^@204~ umnDescription As System.Data.DataCol~dulla^@204~ 
        Private columnRequiredQuant~dulla^@204~ .Data.DataColumn
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Sub New()
            MyBase.~dulla^@204~     Me.TableName = "Order"
         ~dulla^@204~ it
            Me.InitClass
       ~dulla^@204~ it
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Friend Sub New(ByVal table As Syst~dulla^@204~ able)
            MyBase.New
      ~dulla^@204~ eName = table.TableName
            ~dulla^@204~ eSensitive <> table.DataSet.CaseSensi~dulla^@204~                Me.CaseSensitive = tab~dulla^@204~ ive
            End If
            ~dulla^@204~ ale.ToString <> table.DataSet.Locale.~dulla^@204~ n
                Me.Locale = table.~dulla^@204~        End If
            If (table.~dulla^@204~ table.DataSet.Namespace) Then
      ~dulla^@204~ Namespace = table.Namespace
        ~dulla^@204~            Me.Prefix = table.Prefix
~dulla^@204~ e.MinimumCapacity = table.MinimumCapa~dulla^@204~  End Sub
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ d Sub New(ByVal info As System.Runtim~dulla^@204~ on.SerializationInfo, ByVal context A~dulla^@204~ ime.Serialization.StreamingContext)
~dulla^@204~ yBase.New(info, context)
           ~dulla^@204~ 
        End Sub
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public ReadOnly Property OrderNoColum~dulla^@204~ .Data.DataColumn
            Get
  ~dulla^@204~  Return Me.columnOrderNo
           ~dulla^@204~      End Property
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public ReadOnly Property PartNoColum~dulla^@204~ .Data.DataColumn
            Get
  ~dulla^@204~  Return Me.columnPartNo
            ~dulla^@204~     End Property
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public ReadOnly Property DescriptionC~dulla^@204~ stem.Data.DataColumn
            Get~dulla^@204~      Return Me.columnDescription
   ~dulla^@204~ Get
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public ReadOnly Property Req~dulla^@204~ Column() As System.Data.DataColumn
 ~dulla^@204~ t
                Return Me.columnRe~dulla^@204~ y
            End Get
        End P~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute(),  _
         System.C~dulla^@204~ .Browsable(false)>  _
        Public~dulla^@204~ perty Count() As Integer
           ~dulla^@204~          Return Me.Rows.Count
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Default ReadOnly Propert~dulla^@204~ index As Integer) As OrderRow
      ~dulla^@204~               Return CType(Me.Rows(in~dulla^@204~ )
            End Get
        End P~dulla^@204~     
        Public Event OrderRowCh~dulla^@204~ erRowChangeEventHandler
        
  ~dulla^@204~ Event OrderRowChanged As OrderRowChan~dulla^@204~ r
        
        Public Event Ord~dulla^@204~  As OrderRowChangeEventHandler
     ~dulla^@204~ Public Event OrderRowDeleted As Order~dulla^@204~ tHandler
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ verloads Sub AddOrderRow(ByVal row As~dulla^@204~            Me.Rows.Add(row)
        ~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Ov~dulla^@204~ ion AddOrderRow(ByVal parentProductsR~dulla^@204~ Products As ProductsRow, ByVal PartNo~dulla^@204~ yVal Description As String, ByVal Req~dulla^@204~  As Integer) As OrderRow
           ~dulla^@204~ Row As OrderRow = CType(Me.NewRow,Ord~dulla^@204~        rowOrderRow.ItemArray = New Ob~dulla^@204~ tProductsRowByFK_Order_Products(0), P~dulla^@204~ ption, RequiredQuantity}
           ~dulla^@204~ rowOrderRow)
            Return rowO~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Function FindByOrderNo(ByVal O~dulla^@204~ ing) As OrderRow
            Return ~dulla^@204~ .Find(New Object() {OrderNo}),OrderRo~dulla^@204~ nd Function
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Overridable Function GetEnumerator(~dulla^@204~ ollections.IEnumerator Implements Sys~dulla^@204~ ns.IEnumerable.GetEnumerator
       ~dulla^@204~ e.Rows.GetEnumerator
        End Fun~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Over~dulla^@204~ n Clone() As System.Data.DataTable
 ~dulla^@204~ m cln As OrderDataTable = CType(MyBas~dulla^@204~ DataTable)
            cln.InitVars~dulla^@204~ Return cln
        End Function
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Protected Overrides F~dulla^@204~ eInstance() As System.Data.DataTable~dulla^@204~ Return New OrderDataTable
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Friend~dulla^@204~ ()
            Me.columnOrderNo = My~dulla^@204~ "OrderNo")
            Me.columnPart~dulla^@204~ olumns("PartNo")
            Me.colu~dulla^@204~  = MyBase.Columns("Description")
   ~dulla^@204~ olumnRequiredQuantity = MyBase.Column~dulla^@204~ antity")
        End Sub
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Private Sub InitClass()
   ~dulla^@204~ olumnOrderNo = New System.Data.DataCo~dulla^@204~ ", GetType(String), Nothing, System.D~dulla^@204~ pe.Element)
            MyBase.Colum~dulla^@204~ umnOrderNo)
            Me.columnPar~dulla^@204~ tem.Data.DataColumn("PartNo", GetType~dulla^@204~ hing, System.Data.MappingType.Element~dulla^@204~   MyBase.Columns.Add(Me.columnPartNo)~dulla^@204~  Me.columnDescription = New System.Da~dulla^@204~ ("Description", GetType(String), Noth~dulla^@204~ ata.MappingType.Element)
           ~dulla^@204~ ns.Add(Me.columnDescription)
       ~dulla^@204~ nRequiredQuantity = New System.Data.D~dulla^@204~ quiredQuantity", GetType(Integer), No~dulla^@204~ .Data.MappingType.Element)
         ~dulla^@204~ umns.Add(Me.columnRequiredQuantity)
~dulla^@204~ e.Constraints.Add(New System.Data.Uni~dulla^@204~ ("Constraint1", New System.Data.DataC~dulla^@204~ olumnOrderNo}, true))
            Me~dulla^@204~ o.AllowDBNull = false
            Me~dulla^@204~ o.Unique = true
            Me.colum~dulla^@204~ ength = 20
            Me.columnPart~dulla^@204~ l = false
            Me.columnPartN~dulla^@204~  20
            Me.columnDescription~dulla^@204~ 20
            Me.columnRequiredQuan~dulla^@204~ ull = false
        End Sub
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Function NewOrderR~dulla^@204~ Row
            Return CType(Me.NewR~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Protected Overrides Function New~dulla^@204~ r(ByVal builder As System.Data.DataRo~dulla^@204~ System.Data.DataRow
            Retu~dulla^@204~ ow(builder)
        End Function
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Protected Overrides ~dulla^@204~ owType() As System.Type
            ~dulla^@204~ e(OrderRow)
        End Function
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Protected Overrides ~dulla^@204~ ged(ByVal e As System.Data.DataRowCha~dulla^@204~ 
            MyBase.OnRowChanged(e)~dulla^@204~ If (Not (Me.OrderRowChangedEvent) Is ~dulla^@204~ 
                RaiseEvent OrderRow~dulla^@204~ ew OrderRowChangeEvent(CType(e.Row,OrderRow), e.Action))
            End If
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pr~dulla^@204~ ides Sub OnRowChanging(ByVal e As Sys~dulla^@204~ RowChangeEventArgs)
            MyBa~dulla^@204~ ing(e)
            If (Not (Me.Order~dulla^@204~ ent) Is Nothing) Then
              ~dulla^@204~ OrderRowChanging(Me, New OrderRowChan~dulla^@204~ (e.Row,OrderRow), e.Action))
       ~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ rotected Overrides Sub OnRowDeleted(B~dulla^@204~ tem.Data.DataRowChangeEventArgs)
   ~dulla^@204~ se.OnRowDeleted(e)
            If (N~dulla^@204~ owDeletedEvent) Is Nothing) Then
   ~dulla^@204~ RaiseEvent OrderRowDeleted(Me, New Or~dulla^@204~ vent(CType(e.Row,OrderRow), e.Action)~dulla^@204~   End If
        End Sub
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Protected Overrides Sub OnRo~dulla^@204~ al e As System.Data.DataRowChangeEven~dulla^@204~        MyBase.OnRowDeleting(e)
     ~dulla^@204~ t (Me.OrderRowDeletingEvent) Is Nothi~dulla^@204~              RaiseEvent OrderRowDelet~dulla^@204~ rderRowChangeEvent(CType(e.Row,OrderR~dulla^@204~ ))
            End If
        End S~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Sub Rem~dulla^@204~ yVal row As OrderRow)
            Me~dulla^@204~ row)
        End Sub
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Shared Function GetTypedT~dulla^@204~ Val xs As System.Xml.Schema.XmlSchema~dulla^@204~ m.Xml.Schema.XmlSchemaComplexType
  ~dulla^@204~  type As System.Xml.Schema.XmlSchemaC~dulla^@204~ New System.Xml.Schema.XmlSchemaComple~dulla^@204~       Dim sequence As System.Xml.Sche~dulla^@204~ equence = New System.Xml.Schema.XmlSc~dulla^@204~ 
            Dim ds As PurchaseInfoDa~dulla^@204~ PurchaseInfoDataSet2
            xs.~dulla^@204~ emaSerializable)
            Dim any~dulla^@204~ ml.Schema.XmlSchemaAny = New System.X~dulla^@204~ SchemaAny
            any1.Namespace~dulla^@204~ w.w3.org/2001/XMLSchema"
           ~dulla^@204~ rs = New Decimal(0)
            any1~dulla^@204~ Decimal.MaxValue
            any1.Pr~dulla^@204~  = System.Xml.Schema.XmlSchemaContent~dulla^@204~ x
            sequence.Items.Add(any~dulla^@204~    Dim any2 As System.Xml.Schema.XmlS~dulla^@204~ w System.Xml.Schema.XmlSchemaAny
   ~dulla^@204~ .Namespace = "urn:schemas-microsoft-c~dulla^@204~ am-v1"
            any2.MinOccurs = ~dulla^@204~ )
            any2.ProcessContents =~dulla^@204~ chema.XmlSchemaContentProcessing.Lax~dulla^@204~ sequence.Items.Add(any2)
           ~dulla^@204~ e1 As System.Xml.Schema.XmlSchemaAttr~dulla^@204~ ystem.Xml.Schema.XmlSchemaAttribute
~dulla^@204~ ttribute1.Name = "namespace"
       ~dulla^@204~ e1.FixedValue = ds.Namespace
       ~dulla^@204~ ributes.Add(attribute1)
            ~dulla^@204~ 2 As System.Xml.Schema.XmlSchemaAttri~dulla^@204~ stem.Xml.Schema.XmlSchemaAttribute
 ~dulla^@204~ tribute2.Name = "tableTypeName"
    ~dulla^@204~ bute2.FixedValue = "OrderDataTable"
~dulla^@204~ ype.Attributes.Add(attribute2)
     ~dulla^@204~ article = sequence
            Retur~dulla^@204~    End Function
    End Class
    ~dulla^@204~ CodeDom.Compiler.GeneratedCodeAttribu~dulla^@204~ ta.Design.TypedDataSetGenerator", "2.~dulla^@204~      System.Serializable(),  _
     ~dulla^@204~ rialization.XmlSchemaProviderAttribut~dulla^@204~ bleSchema")>  _
    Partial Public C~dulla^@204~ DataTable
        Inherits System.Da~dulla^@204~ 
        Implements System.Collection~dulla^@204~ 
        
        Private columnPar~dulla^@204~ .Data.DataColumn
        
        P~dulla^@204~ Description As System.Data.DataColumn~dulla^@204~        Private columnUnitCost As Syst~dulla^@204~ olumn
        
        Private colu~dulla^@204~ e1 As System.Data.DataColumn
       ~dulla^@204~ ivate columnSellingPrice2 As System.D~dulla^@204~ n
        
        Private columnQt~dulla^@204~ ystem.Data.DataColumn
        
    ~dulla^@204~ olumnQtyAtShop2 As System.Data.DataCo~dulla^@204~  
        Private columnQtyAtStore A~dulla^@204~ .DataColumn
        
        Privat~dulla^@204~ Quantity As System.Data.DataColumn
 ~dulla^@204~     Private columnReorderLevel As Sys~dulla^@204~ Column
        
        Private col~dulla^@204~  System.Data.DataColumn
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Sub New()
            ~dulla^@204~            Me.TableName = "Products"~dulla^@204~ Me.BeginInit
            Me.InitClas~dulla^@204~   Me.EndInit
        End Sub
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Friend Sub New(ByVal tab~dulla^@204~ Data.DataTable)
            MyBase.N~dulla^@204~    Me.TableName = table.TableName
  ~dulla^@204~ (table.CaseSensitive <> table.DataSet~dulla^@204~ e) Then
                Me.CaseSensi~dulla^@204~ CaseSensitive
            End If
  ~dulla^@204~ (table.Locale.ToString <> table.DataS~dulla^@204~ tring) Then
                Me.Local~dulla^@204~ ale
            End If
            ~dulla^@204~ espace <> table.DataSet.Namespace) Th~dulla^@204~        Me.Namespace = table.Namespace~dulla^@204~  End If
            Me.Prefix = tabl~dulla^@204~          Me.MinimumCapacity = table.M~dulla^@204~ y
        End Sub
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Protected Sub New(ByVal info As Sys~dulla^@204~ erialization.SerializationInfo, ByVal~dulla^@204~ ystem.Runtime.Serialization.Streaming~dulla^@204~          MyBase.New(info, context)
 ~dulla^@204~ .InitVars
        End Sub
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public ReadOnly Property Pa~dulla^@204~ As System.Data.DataColumn
          ~dulla^@204~           Return Me.columnPartNo
   ~dulla^@204~ Get
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public ReadOnly Property Des~dulla^@204~ n() As System.Data.DataColumn
      ~dulla^@204~               Return Me.columnDescrip~dulla^@204~      End Get
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public ReadOnly Pro~dulla^@204~ tColumn() As System.Data.DataColumn
~dulla^@204~ et
                Return Me.columnU~dulla^@204~         End Get
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public ReadOnly ~dulla^@204~ ingPrice1Column() As System.Data.Data~dulla^@204~        Get
                Return Me~dulla^@204~ gPrice1
            End Get
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ Property SellingPrice2Column() As Sys~dulla^@204~ Column
            Get
            ~dulla^@204~ .columnSellingPrice2
            End~dulla^@204~  End Property
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic ReadOnly Property QtyAtShop1Colum~dulla^@204~ .Data.DataColumn
            Get
  ~dulla^@204~  Return Me.columnQtyAtShop1
        ~dulla^@204~         End Property
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public ReadOnly Property QtyAtSho~dulla^@204~  System.Data.DataColumn
            ~dulla^@204~         Return Me.columnQtyAtShop2
 ~dulla^@204~ d Get
        End Property
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public ReadOnly Property Q~dulla^@204~ mn() As System.Data.DataColumn
     ~dulla^@204~                Return Me.columnQtyAtS~dulla^@204~      End Get
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public ReadOnly Pro~dulla^@204~ antityColumn() As System.Data.DataCol~dulla^@204~     Get
                Return Me.co~dulla^@204~ tity
            End Get
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public ReadOnly Property ReorderLevelColumn() As~dulla^@204~ DataColumn
            Get
        ~dulla^@204~ n Me.columnReorderLevel
            ~dulla^@204~     End Property
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public ReadOnly Property ShelfNoColum~dulla^@204~ .Data.DataColumn
            Get
  ~dulla^@204~  Return Me.columnShelfNo
           ~dulla^@204~      End Property
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~   System.ComponentModel.Browsable(fal~dulla^@204~     Public ReadOnly Property Count() ~dulla^@204~            Get
                Retur~dulla^@204~ nt
            End Get
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public D~dulla^@204~ ly Property Item(ByVal index As Integ~dulla^@204~ tsRow
            Get
             ~dulla^@204~ pe(Me.Rows(index),ProductsRow)
     ~dulla^@204~ t
        End Property
        
  ~dulla^@204~ Event ProductsRowChanging As Products~dulla^@204~ tHandler
        
        Public Ev~dulla^@204~ owChanged As ProductsRowChangeEventHa~dulla^@204~   
        Public Event ProductsRowD~dulla^@204~ oductsRowChangeEventHandler
        ~dulla^@204~ lic Event ProductsRowDeleted As Produ~dulla^@204~ ventHandler
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Overloads Sub AddProductsRow(ByVal ~dulla^@204~ tsRow)
            Me.Rows.Add(row)~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ads Function AddProductsRow(ByVal par~dulla^@204~ foRowByFK_Products_PurchaseInfo As Pu~dulla^@204~ , ByVal parentPurchaseInfoRowByPurcha~dulla^@204~ ts As PurchaseInfoRow, ByVal UnitCost~dulla^@204~ ByVal SellingPrice1 As Double, ByVal ~dulla^@204~  As Double, ByVal QtyAtShop1 As Integ~dulla^@204~ AtShop2 As Integer, ByVal QtyAtStore ~dulla^@204~ yVal TotalQuantity As Integer, ByVal ~dulla^@204~ As Integer, ByVal ShelfNo As String) ~dulla^@204~ w
            Dim rowProductsRow As ~dulla^@204~  CType(Me.NewRow,ProductsRow)
      ~dulla^@204~ uctsRow.ItemArray = New Object() {par~dulla^@204~ foRowByFK_Products_PurchaseInfo(0), p~dulla^@204~ InfoRowByPurchaseInfo_Products(1), Un~dulla^@204~ ngPrice1, SellingPrice2, QtyAtShop1, ~dulla^@204~ tyAtStore, TotalQuantity, ReorderLeve~dulla^@204~             Me.Rows.Add(rowProductsRo~dulla^@204~    Return rowProductsRow
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ ByPartNo(ByVal PartNo As String) As P~dulla^@204~            Return CType(Me.Rows.Find(~dulla^@204~ {PartNo}),ProductsRow)
        End F~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Ov~dulla^@204~ ction GetEnumerator() As System.Colle~dulla^@204~ rator Implements System.Collections.I~dulla^@204~ tEnumerator
            Return Me.Ro~dulla^@204~ tor
        End Function
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Overrides Function Cl~dulla^@204~ em.Data.DataTable
            Dim cl~dulla^@204~ DataTable = CType(MyBase.Clone,Produc~dulla^@204~ 
            cln.InitVars
          ~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Protected Overrides Function Cre~dulla^@204~  As System.Data.DataTable
          ~dulla^@204~ ProductsDataTable
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Friend Sub Ini~dulla^@204~         Me.columnPartNo = MyBase.Colu~dulla^@204~ 
            Me.columnDescription = ~dulla^@204~ s("Description")
            Me.colu~dulla^@204~ MyBase.Columns("UnitCost")
         ~dulla^@204~ ellingPrice1 = MyBase.Columns("Sellin~dulla^@204~           Me.columnSellingPrice2 = My~dulla^@204~ "SellingPrice2")
            Me.colu~dulla^@204~ = MyBase.Columns("QtyAtShop1")
     ~dulla^@204~ umnQtyAtShop2 = MyBase.Columns("QtyAt~dulla^@204~         Me.columnQtyAtStore = MyBase.~dulla^@204~ tStore")
            Me.columnTotalQ~dulla^@204~ ase.Columns("TotalQuantity")
       ~dulla^@204~ nReorderLevel = MyBase.Columns("Reord~dulla^@204~           Me.columnShelfNo = MyBase.C~dulla^@204~ No")
        End Sub
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Private Sub InitClass()
       ~dulla^@204~ nPartNo = New System.Data.DataColumn(~dulla^@204~ Type(String), Nothing, System.Data.Ma~dulla^@204~ ment)
            MyBase.Columns.Add~dulla^@204~ tNo)
            Me.columnDescriptio~dulla^@204~ m.Data.DataColumn("Description", GetT~dulla^@204~ Nothing, System.Data.MappingType.Elem~dulla^@204~      MyBase.Columns.Add(Me.columnDesc~dulla^@204~          Me.columnUnitCost = New Syst~dulla^@204~ olumn("UnitCost", GetType(Decimal), N~dulla^@204~ m.Data.MappingType.Element)
        ~dulla^@204~ lumns.Add(Me.columnUnitCost)
       ~dulla^@204~ nSellingPrice1 = New System.Data.Data~dulla^@204~ ngPrice1", GetType(Double), Nothing, ~dulla^@204~ appingType.Element)
            MyBa~dulla^@204~ d(Me.columnSellingPrice1)
          ~dulla^@204~ llingPrice2 = New System.Data.DataCol~dulla^@204~ rice2", GetType(Double), Nothing, Sys~dulla^@204~ ingType.Element)
            MyBase.~dulla^@204~ e.columnSellingPrice2)
            M~dulla^@204~ Shop1 = New System.Data.DataColumn("Q~dulla^@204~ etType(Integer), Nothing, System.Data~dulla^@204~ Element)
            MyBase.Columns.~dulla^@204~ QtyAtShop1)
            Me.columnQty~dulla^@204~  System.Data.DataColumn("QtyAtShop2",~dulla^@204~ ger), Nothing, System.Data.MappingTyp~dulla^@204~            MyBase.Columns.Add(Me.colu~dulla^@204~ 
            Me.columnQtyAtStore = N~dulla^@204~ a.DataColumn("QtyAtStore", GetType(In~dulla^@204~ ng, System.Data.MappingType.Element)~dulla^@204~ MyBase.Columns.Add(Me.columnQtyAtStor~dulla^@204~    Me.columnTotalQuantity = New Syste~dulla^@204~ lumn("TotalQuantity", GetType(Integer~dulla^@204~ ystem.Data.MappingType.Element)
    ~dulla^@204~ e.Columns.Add(Me.columnTotalQuantity)~dulla^@204~  Me.columnReorderLevel = New System.D~dulla^@204~ n("ReorderLevel", GetType(Integer), N~dulla^@204~ m.Data.MappingType.Element)
        ~dulla^@204~ lumns.Add(Me.columnReorderLevel)
   ~dulla^@204~ olumnShelfNo = New System.Data.DataCo~dulla^@204~ ", GetType(String), Nothing, System.D~dulla^@204~ pe.Element)
            MyBase.Colum~dulla^@204~ umnShelfNo)
            Me.Constrain~dulla^@204~ stem.Data.UniqueConstraint("Constrain~dulla^@204~ em.Data.DataColumn() {Me.columnPartNo~dulla^@204~           Me.columnPartNo.AllowDBNull~dulla^@204~          Me.columnPartNo.Unique = tru~dulla^@204~   Me.columnPartNo.MaxLength = 20
   ~dulla^@204~ olumnDescription.AllowDBNull = false~dulla^@204~ Me.columnDescription.MaxLength = 20
~dulla^@204~ e.columnReorderLevel.AllowDBNull = fa~dulla^@204~     Me.columnShelfNo.AllowDBNull = fa~dulla^@204~     Me.columnShelfNo.MaxLength = 20
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ n NewProductsRow() As ProductsRow
  ~dulla^@204~ urn CType(Me.NewRow,ProductsRow)
   ~dulla^@204~ tion
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ errides Function NewRowFromBuilder(By~dulla^@204~ s System.Data.DataRowBuilder) As Syst~dulla^@204~ ow
            Return New ProductsRo~dulla^@204~        End Function
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Protected Overrides Function GetRo~dulla^@204~ stem.Type
            Return GetType~dulla^@204~ 
        End Function
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Protected Overrides Sub OnRowCh~dulla^@204~  As System.Data.DataRowChangeEventArg~dulla^@204~    MyBase.OnRowChanged(e)
          ~dulla^@204~ .ProductsRowChangedEvent) Is Nothing)~dulla^@204~           RaiseEvent ProductsRowChang~dulla^@204~ oductsRowChangeEvent(CType(e.Row,Prod~dulla^@204~ ction))
            End If
        End Sub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ rides Sub OnRowChanging(ByVal e As Sy~dulla^@204~ aRowChangeEventArgs)
            MyB~dulla^@204~ ging(e)
            If (Not (Me.Prod~dulla^@204~ ngEvent) Is Nothing) Then
          ~dulla^@204~ ent ProductsRowChanging(Me, New Produ~dulla^@204~ vent(CType(e.Row,ProductsRow), e.Acti~dulla^@204~      End If
        End Sub
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Protected Overrides Sub O~dulla^@204~ yVal e As System.Data.DataRowChangeEv~dulla^@204~          MyBase.OnRowDeleted(e)
    ~dulla^@204~ ot (Me.ProductsRowDeletedEvent) Is No~dulla^@204~                 RaiseEvent ProductsRo~dulla^@204~ New ProductsRowChangeEvent(CType(e.Ro~dulla^@204~ ), e.Action))
            End If
  ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pro~dulla^@204~ des Sub OnRowDeleting(ByVal e As Syst~dulla^@204~ owChangeEventArgs)
            MyBas~dulla^@204~ ng(e)
            If (Not (Me.Produc~dulla^@204~ Event) Is Nothing) Then
            ~dulla^@204~ t ProductsRowDeleting(Me, New Product~dulla^@204~ nt(CType(e.Row,ProductsRow), e.Action~dulla^@204~    End If
        End Sub
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Sub RemoveProductsRo~dulla^@204~ s ProductsRow)
            Me.Rows.R~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Shared Function GetTypedTableSch~dulla^@204~ As System.Xml.Schema.XmlSchemaSet) As~dulla^@204~ chema.XmlSchemaComplexType
         ~dulla^@204~ s System.Xml.Schema.XmlSchemaComplexT~dulla^@204~ tem.Xml.Schema.XmlSchemaComplexType
~dulla^@204~ im sequence As System.Xml.Schema.XmlS~dulla^@204~  = New System.Xml.Schema.XmlSchemaSeq~dulla^@204~       Dim ds As PurchaseInfoDataSet2 ~dulla^@204~ eInfoDataSet2
            xs.Add(ds.~dulla^@204~ alizable)
            Dim any1 As Sy~dulla^@204~ ma.XmlSchemaAny = New System.Xml.Sche~dulla^@204~ ny
            any1.Namespace = "htt~dulla^@204~ g/2001/XMLSchema"
            any1.M~dulla^@204~ w Decimal(0)
            any1.MaxOcc~dulla^@204~ .MaxValue
            any1.ProcessCo~dulla^@204~ em.Xml.Schema.XmlSchemaContentProcess~dulla^@204~         sequence.Items.Add(any1)
   ~dulla^@204~ any2 As System.Xml.Schema.XmlSchemaAn~dulla^@204~ m.Xml.Schema.XmlSchemaAny
          ~dulla^@204~ ace = "urn:schemas-microsoft-com:xml-~dulla^@204~ 
            any2.MinOccurs = New Dec~dulla^@204~         any2.ProcessContents = System~dulla^@204~ mlSchemaContentProcessing.Lax
      ~dulla^@204~ e.Items.Add(any2)
            Dim at~dulla^@204~ ystem.Xml.Schema.XmlSchemaAttribute =~dulla^@204~ ml.Schema.XmlSchemaAttribute
       ~dulla^@204~ e1.Name = "namespace"
            at~dulla^@204~ dValue = ds.Namespace
            ty~dulla^@204~ .Add(attribute1)
            Dim att~dulla^@204~ stem.Xml.Schema.XmlSchemaAttribute = ~dulla^@204~ l.Schema.XmlSchemaAttribute
        ~dulla^@204~ 2.Name = "tableTypeName"
           ~dulla^@204~ ixedValue = "ProductsDataTable"
    ~dulla^@204~ Attributes.Add(attribute2)
         ~dulla^@204~ cle = sequence
            Return ty~dulla^@204~ nd Function
    End Class
    
   ~dulla^@204~ Dom.Compiler.GeneratedCodeAttribute("~dulla^@204~ esign.TypedDataSetGenerator", "2.0.0.~dulla^@204~  System.Serializable(),  _
     Syst~dulla^@204~ ization.XmlSchemaProviderAttribute("G~dulla^@204~ chema")>  _
    Partial Public Class~dulla^@204~ Table
        Inherits System.Data.D~dulla^@204~      Implements System.Collections.IE~dulla^@204~       
        Private columnPurchas~dulla^@204~  System.Data.DataColumn
        
  ~dulla^@204~  columnDateOfPurchase As System.Data.~dulla^@204~        
        Private columnTotalA~dulla^@204~ em.Data.DataColumn
        
       ~dulla^@204~ mnFrieghtCharge As System.Data.DataCo~dulla^@204~  
        Private columnMiscellaneou~dulla^@204~ em.Data.DataColumn
        
       ~dulla^@204~ mnGrandTotal As System.Data.DataColum~dulla^@204~         Private columnSupplierID As S~dulla^@204~ taColumn
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ ub New()
            MyBase.New
   ~dulla^@204~ ableName = "Purchase"
            Me~dulla^@204~            Me.InitClass
            ~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ iend Sub New(ByVal table As System.Da~dulla^@204~ 
            MyBase.New
           ~dulla^@204~  = table.TableName
            If (t~dulla^@204~ itive <> table.DataSet.CaseSensitive)~dulla^@204~           Me.CaseSensitive = table.Ca~dulla^@204~             End If
            If (t~dulla^@204~ oString <> table.DataSet.Locale.ToStr~dulla^@204~               Me.Locale = table.Local~dulla^@204~   End If
            If (table.Names~dulla^@204~ .DataSet.Namespace) Then
           ~dulla^@204~ pace = table.Namespace
            E~dulla^@204~       Me.Prefix = table.Prefix
     ~dulla^@204~ imumCapacity = table.MinimumCapacity~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~  New(ByVal info As System.Runtime.Ser~dulla^@204~ rializationInfo, ByVal context As Sys~dulla^@204~ erialization.StreamingContext)
     ~dulla^@204~ .New(info, context)
            Me.I~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c ReadOnly Property PurchaseInvoiceNo~dulla^@204~ ystem.Data.DataColumn
            Ge~dulla^@204~       Return Me.columnPurchaseInvoice~dulla^@204~    End Get
        End Property
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public ReadOnly Prope~dulla^@204~ chaseColumn() As System.Data.DataColu~dulla^@204~    Get
                Return Me.col~dulla^@204~ hase
            End Get
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ perty TotalAmountColumn() As System.D~dulla^@204~ n
            Get
                R~dulla^@204~ mnTotalAmount
            End Get
 ~dulla^@204~ operty
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ dOnly Property FrieghtChargeColumn() ~dulla^@204~ a.DataColumn
            Get
      ~dulla^@204~ urn Me.columnFrieghtCharge
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public ReadOnly Property Miscellan~dulla^@204~ n() As System.Data.DataColumn
      ~dulla^@204~               Return Me.columnMiscell~dulla^@204~            End Get
        End Prope~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public ReadOn~dulla^@204~ randTotalColumn() As System.Data.Data~dulla^@204~        Get
                Return Me~dulla^@204~ otal
            End Get
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ perty SupplierIDColumn() As System.Da~dulla^@204~ 
            Get
                Re~dulla^@204~ nSupplierID
            End Get
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute(),  _
       ~dulla^@204~ onentModel.Browsable(false)>  _
    ~dulla^@204~ adOnly Property Count() As Integer
 ~dulla^@204~ t
                Return Me.Rows.Cou~dulla^@204~    End Get
        End Property
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public Default ReadOn~dulla^@204~ tem(ByVal index As Integer) As Purcha~dulla^@204~       Get
                Return CTy~dulla^@204~ dex),PurchaseRow)
            End Ge~dulla^@204~ d Property
        
        Public ~dulla^@204~ eRowChanging As PurchaseRowChangeEven~dulla^@204~      
        Public Event PurchaseR~dulla^@204~ PurchaseRowChangeEventHandler
      ~dulla^@204~ ublic Event PurchaseRowDeleting As Pu~dulla^@204~ geEventHandler
        
        Public Event PurchaseRowDeleted As PurchaseRo~dulla^@204~ andler
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ rloads Sub AddPurchaseRow(ByVal row A~dulla^@204~ )
            Me.Rows.Add(row)
    ~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ unction AddPurchaseRow(ByVal Purchase~dulla^@204~ String, ByVal DateOfPurchase As Date,~dulla^@204~ mount As Decimal, ByVal FrieghtCharge~dulla^@204~ ByVal MiscellaneousCost As Decimal, B~dulla^@204~ al As Decimal, ByVal parentSupplierRo~dulla^@204~ e_Supplier As SupplierRow) As Purchas~dulla^@204~      Dim rowPurchaseRow As PurchaseRo~dulla^@204~ NewRow,PurchaseRow)
            rowP~dulla^@204~ emArray = New Object() {PurchaseInvoi~dulla^@204~ urchase, TotalAmount, FrieghtCharge, ~dulla^@204~ Cost, GrandTotal, parentSupplierRowBy~dulla^@204~ upplier(0)}
            Me.Rows.Add(~dulla^@204~ w)
            Return rowPurchaseRow~dulla^@204~  Function
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Function FindByPurchaseInvoiceNo(ByVa~dulla^@204~ oiceNo As String) As PurchaseRow
   ~dulla^@204~ rn CType(Me.Rows.Find(New Object() {P~dulla^@204~ eNo}),PurchaseRow)
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Overri~dulla^@204~ n GetEnumerator() As System.Collectio~dulla^@204~ r Implements System.Collections.IEnum~dulla^@204~ merator
            Return Me.Rows.G~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Overrides Function Clone(~dulla^@204~ ata.DataTable
            Dim cln As~dulla^@204~ Table = CType(MyBase.Clone,PurchaseDa~dulla^@204~          cln.InitVars
            Re~dulla^@204~      End Function
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Protected Overrides Function CreateI~dulla^@204~ System.Data.DataTable
            Re~dulla^@204~ haseDataTable
        End Function
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Friend Sub InitVar~dulla^@204~     Me.columnPurchaseInvoiceNo = MyBa~dulla^@204~ urchaseInvoiceNo")
            Me.co~dulla^@204~ chase = MyBase.Columns("DateOfPurchas~dulla^@204~     Me.columnTotalAmount = MyBase.Col~dulla^@204~ ount")
            Me.columnFrieghtC~dulla^@204~ e.Columns("FrieghtCharge")
         ~dulla^@204~ iscellaneousCost = MyBase.Columns("Mi~dulla^@204~ st")
            Me.columnGrandTotal~dulla^@204~ umns("GrandTotal")
            Me.co~dulla^@204~ D = MyBase.Columns("SupplierID")
   ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Priv~dulla^@204~ lass()
            Me.columnPurchase~dulla^@204~ ew System.Data.DataColumn("PurchaseIn~dulla^@204~ Type(String), Nothing, System.Data.Ma~dulla^@204~ ment)
            MyBase.Columns.Add~dulla^@204~ chaseInvoiceNo)
            Me.colum~dulla^@204~ se = New System.Data.DataColumn("Date~dulla^@204~ GetType(Date), Nothing, System.Data.M~dulla^@204~ ement)
            MyBase.Columns.Ad~dulla^@204~ teOfPurchase)
            Me.columnT~dulla^@204~ New System.Data.DataColumn("TotalAmou~dulla^@204~ Decimal), Nothing, System.Data.Mappin~dulla^@204~ )
            MyBase.Columns.Add(Me.~dulla^@204~ ount)
            Me.columnFrieghtCh~dulla^@204~ stem.Data.DataColumn("FrieghtCharge",~dulla^@204~ mal), Nothing, System.Data.MappingTyp~dulla^@204~            MyBase.Columns.Add(Me.colu~dulla^@204~ ge)
            Me.columnMiscellaneo~dulla^@204~ System.Data.DataColumn("Miscellaneous~dulla^@204~ e(Decimal), Nothing, System.Data.Mapp~dulla^@204~ nt)
            MyBase.Columns.Add(M~dulla^@204~ llaneousCost)
            Me.columnG~dulla^@204~ ew System.Data.DataColumn("GrandTotal~dulla^@204~ cimal), Nothing, System.Data.MappingT~dulla^@204~ 
            MyBase.Columns.Add(Me.co~dulla^@204~ l)
            Me.columnSupplierID =~dulla^@204~ ata.DataColumn("SupplierID", GetType(~dulla^@204~ ing, System.Data.MappingType.Element)~dulla^@204~  MyBase.Columns.Add(Me.columnSupplier~dulla^@204~     Me.Constraints.Add(New System.Dat~dulla^@204~ raint("Constraint1", New System.Data.~dulla^@204~ {Me.columnPurchaseInvoiceNo}, true))~dulla^@204~ Me.columnPurchaseInvoiceNo.AllowDBNul~dulla^@204~           Me.columnPurchaseInvoiceNo.~dulla^@204~ 
            Me.columnPurchaseInvoic~dulla^@204~  = 20
            Me.columnDateOfPur~dulla^@204~ Null = false
            Me.columnTo~dulla^@204~ owDBNull = false
            Me.colu~dulla^@204~ ge.AllowDBNull = false
            M~dulla^@204~ llaneousCost.AllowDBNull = false
   ~dulla^@204~ olumnGrandTotal.AllowDBNull = false
~dulla^@204~ e.columnSupplierID.AllowDBNull = fals~dulla^@204~   Me.columnSupplierID.MaxLength = 20~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ on NewPurchaseRow() As PurchaseRow
 ~dulla^@204~ turn CType(Me.NewRow,PurchaseRow)
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ verrides Function NewRowFromBuilder(B~dulla^@204~ As System.Data.DataRowBuilder) As Sys~dulla^@204~ Row
            Return New PurchaseR~dulla^@204~         End Function
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Protected Overrides Function GetR~dulla^@204~ ystem.Type
            Return GetTyp~dulla^@204~ )
        End Function
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Protected Overrides Sub OnRowC~dulla^@204~ e As System.Data.DataRowChangeEventAr~dulla^@204~     MyBase.OnRowChanged(e)
         ~dulla^@204~ e.PurchaseRowChangedEvent) Is Nothing~dulla^@204~            RaiseEvent PurchaseRowChan~dulla^@204~ urchaseRowChangeEvent(CType(e.Row,Pur~dulla^@204~ Action))
            End If
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Protecte~dulla^@204~ ub OnRowChanging(ByVal e As System.Da~dulla^@204~ ngeEventArgs)
            MyBase.OnR~dulla^@204~ 
            If (Not (Me.PurchaseRow~dulla^@204~ ) Is Nothing) Then
                R~dulla^@204~ chaseRowChanging(Me, New PurchaseRowC~dulla^@204~ ype(e.Row,PurchaseRow), e.Action))
 ~dulla^@204~ d If
        End Sub
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Protected Overrides Sub OnRowDel~dulla^@204~ As System.Data.DataRowChangeEventArgs~dulla^@204~   MyBase.OnRowDeleted(e)
           ~dulla^@204~ PurchaseRowDeletedEvent) Is Nothing) ~dulla^@204~          RaiseEvent PurchaseRowDelete~dulla^@204~ chaseRowChangeEvent(CType(e.Row,Purch~dulla^@204~ tion))
            End If
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Protected ~dulla^@204~  OnRowDeleting(ByVal e As System.Data~dulla^@204~ eEventArgs)
            MyBase.OnRow~dulla^@204~             If (Not (Me.PurchaseRowDe~dulla^@204~ Is Nothing) Then
                Rai~dulla^@204~ aseRowDeleting(Me, New PurchaseRowCha~dulla^@204~ e(e.Row,PurchaseRow), e.Action))
   ~dulla^@204~ If
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Sub RemovePurchaseRow(ByVal~dulla^@204~ aseRow)
            Me.Rows.Remove(r~dulla^@204~ End Sub
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ ared Function GetTypedTableSchema(ByV~dulla^@204~ em.Xml.Schema.XmlSchemaSet) As System~dulla^@204~ mlSchemaComplexType
            Dim ~dulla^@204~ m.Xml.Schema.XmlSchemaComplexType = N~dulla^@204~ .Schema.XmlSchemaComplexType
       ~dulla^@204~ ence As System.Xml.Schema.XmlSchemaSe~dulla^@204~ System.Xml.Schema.XmlSchemaSequence
~dulla^@204~ im ds As PurchaseInfoDataSet2 = New P~dulla^@204~ taSet2
            xs.Add(ds.GetSche~dulla^@204~ e)
            Dim any1 As System.Xm~dulla^@204~ chemaAny = New System.Xml.Schema.XmlS~dulla^@204~          any1.Namespace = "http://www~dulla^@204~ XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOc~dulla^@204~ l.MaxValue
            any1.ProcessC~dulla^@204~ tem.Xml.Schema.XmlSchemaContentProces~dulla^@204~          sequence.Items.Add(any1)
  ~dulla^@204~  any2 As System.Xml.Schema.XmlSchemaA~dulla^@204~ em.Xml.Schema.XmlSchemaAny
         ~dulla^@204~ pace = "urn:schemas-microsoft-com:xml~dulla^@204~ 
            any2.MinOccurs = New De~dulla^@204~          any2.ProcessContents = Syste~dulla^@204~ XmlSchemaContentProcessing.Lax
     ~dulla^@204~ ce.Items.Add(any2)
            Dim a~dulla^@204~ System.Xml.Schema.XmlSchemaAttribute ~dulla^@204~ Xml.Schema.XmlSchemaAttribute
      ~dulla^@204~ te1.Name = "namespace"
            a~dulla^@204~ edValue = ds.Namespace
            t~dulla^@204~ s.Add(attribute1)
            Dim at~dulla^@204~ ystem.Xml.Schema.XmlSchemaAttribute =~dulla^@204~ ml.Schema.XmlSchemaAttribute
       ~dulla^@204~ e2.Name = "tableTypeName"
          ~dulla^@204~ FixedValue = "PurchaseDataTable"
   ~dulla^@204~ .Attributes.Add(attribute2)
        ~dulla^@204~ icle = sequence
            Return t~dulla^@204~ End Function
    End Class
    
  ~dulla^@204~ eDom.Compiler.GeneratedCodeAttribute(~dulla^@204~ Design.TypedDataSetGenerator", "2.0.0~dulla^@204~   System.Serializable(),  _
     Sys~dulla^@204~ lization.XmlSchemaProviderAttribute("~dulla^@204~ Schema")>  _
    Partial Public Clas~dulla^@204~ oDataTable
        Inherits System.D~dulla^@204~ 
        Implements System.Collectio~dulla^@204~ e
        
        Private columnPa~dulla^@204~ m.Data.DataColumn
        
        ~dulla^@204~ nDescription As System.Data.DataColum~dulla^@204~         Private columnBrand As System~dulla^@204~ umn
        
        Private column~dulla^@204~ tem.Data.DataColumn
        
      ~dulla^@204~ umnNetWeight As System.Data.DataColum~dulla^@204~         Private columnQuantity As Sys~dulla^@204~ Column
        
        Private col~dulla^@204~ ystem.Data.DataColumn
        
    ~dulla^@204~ olumnAmount As System.Data.DataColumn~dulla^@204~        Private columnSupplierID As Sy~dulla^@204~ aColumn
        
        Private co~dulla^@204~  As System.Data.DataColumn
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Sub New()
         ~dulla^@204~ 
            Me.TableName = "Purchas~dulla^@204~        Me.BeginInit
            Me.I~dulla^@204~          Me.EndInit
        End Sub~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Friend Sub New(By~dulla^@204~ System.Data.DataTable)
            M~dulla^@204~           Me.TableName = table.TableN~dulla^@204~     If (table.CaseSensitive <> table.~dulla^@204~ ensitive) Then
                Me.Ca~dulla^@204~  table.CaseSensitive
            End~dulla^@204~     If (table.Locale.ToString <> tabl~dulla^@204~ ale.ToString) Then
                M~dulla^@204~ ble.Locale
            End If
     ~dulla^@204~ ble.Namespace <> table.DataSet.Namesp~dulla^@204~               Me.Namespace = table.Na~dulla^@204~         End If
            Me.Prefix~dulla^@204~ ix
            Me.MinimumCapacity = ~dulla^@204~ Capacity
        End Sub
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Protected Sub New(ByVal info~dulla^@204~ ntime.Serialization.SerializationInfo~dulla^@204~ xt As System.Runtime.Serialization.St~dulla^@204~ t)
            MyBase.New(info, cont~dulla^@204~      Me.InitVars
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public ReadOnly Prop~dulla^@204~ lumn() As System.Data.DataColumn
   ~dulla^@204~ 
                Return Me.columnPart~dulla^@204~    End Get
        End Property
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public ReadOnly Prope~dulla^@204~ onColumn() As System.Data.DataColumn~dulla^@204~ Get
                Return Me.column~dulla^@204~             End Get
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public ReadO~dulla^@204~ BrandColumn() As System.Data.DataColu~dulla^@204~    Get
                Return Me.col~dulla^@204~          End Get
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public ReadOnly~dulla^@204~ ginColumn() As System.Data.DataColumn~dulla^@204~  Get
                Return Me.colum~dulla^@204~         End Get
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public ReadOnly ~dulla^@204~ eightColumn() As System.Data.DataColu~dulla^@204~    Get
                Return Me.col~dulla^@204~ 
            End Get
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Read~dulla^@204~  QuantityColumn() As System.Data.Data~dulla^@204~        Get
                Return Me~dulla^@204~ ty
            End Get
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public R~dulla^@204~ rty PriceColumn() As System.Data.Data~dulla^@204~        Get
                Return Me~dulla^@204~ 
            End Get
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Read~dulla^@204~  AmountColumn() As System.Data.DataCo~dulla^@204~      Get
                Return Me.c~dulla^@204~             End Get
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public ReadO~dulla^@204~ SupplierIDColumn() As System.Data.Dat~dulla^@204~         Get
                Return M~dulla^@204~ ierID
            End Get
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ operty InvoiceNoColumn() As System.Da~dulla^@204~ 
            Get
                Re~dulla^@204~ nInvoiceNo
            End Get
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute(),  _
        ~dulla^@204~ nentModel.Browsable(false)>  _
     ~dulla^@204~ dOnly Property Count() As Integer
  ~dulla^@204~ 
                Return Me.Rows.Coun~dulla^@204~   End Get
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Default ReadOnl~dulla^@204~ em(ByVal index As Integer) As Purchas~dulla^@204~          Get
                Return ~dulla^@204~ (index),PurchaseInfoRow)
           ~dulla^@204~      End Property
        
        ~dulla^@204~ PurchaseInfoRowChanging As PurchaseIn~dulla^@204~ entHandler
        
        Public ~dulla^@204~ eInfoRowChanged As PurchaseInfoRowCha~dulla^@204~ er
        
        Public Event Pu~dulla^@204~ Deleting As PurchaseInfoRowChangeEven~dulla^@204~      
        Public Event PurchaseI~dulla^@204~  As PurchaseInfoRowChangeEventHandler~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Overloads~dulla^@204~ aseInfoRow(ByVal row As PurchaseInfoR~dulla^@204~     Me.Rows.Add(row)
        End Sub~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Overloads~dulla^@204~ PurchaseInfoRow(ByVal PartNo As Strin~dulla^@204~ ription As String, ByVal Brand As Str~dulla^@204~ igin As String, ByVal NetWeight As St~dulla^@204~ uantity As Integer, ByVal Price As De~dulla^@204~ Amount As Decimal, ByVal parentSuppli~dulla^@204~ chaseInfo_Supplier As SupplierRow, By~dulla^@204~ chaseRowByFK_PurchaseInfo_Purchase As~dulla^@204~  As PurchaseInfoRow
            Dim ~dulla^@204~ foRow As PurchaseInfoRow = CType(Me.N~dulla^@204~ eInfoRow)
            rowPurchaseInf~dulla^@204~ y = New Object() {PartNo, Description~dulla^@204~ in, NetWeight, Quantity, Price, Amoun~dulla^@204~ lierRowByFK_PurchaseInfo_Supplier(0),~dulla^@204~ seRowByFK_PurchaseInfo_Purchase(0)}
~dulla^@204~ e.Rows.Add(rowPurchaseInfoRow)
     ~dulla^@204~  rowPurchaseInfoRow
        End Func~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Funct~dulla^@204~ oiceNo(ByVal InvoiceNo As String) As PurchaseInfoRow
            Return CType(~dulla^@204~ New Object() {InvoiceNo}),PurchaseInf~dulla^@204~   End Function
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Overridable Function GetEnumerat~dulla^@204~ m.Collections.IEnumerator Implements ~dulla^@204~ tions.IEnumerable.GetEnumerator
    ~dulla^@204~ n Me.Rows.GetEnumerator
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public O~dulla^@204~ tion Clone() As System.Data.DataTable~dulla^@204~  Dim cln As PurchaseInfoDataTable = C~dulla^@204~ lone,PurchaseInfoDataTable)
        ~dulla^@204~ ars
            Return cln
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Prot~dulla^@204~ es Function CreateInstance() As Syste~dulla^@204~ ble
            Return New PurchaseI~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Friend Sub InitVars()
         ~dulla^@204~ artNo = MyBase.Columns("PartNo")
   ~dulla^@204~ olumnDescription = MyBase.Columns("De~dulla^@204~             Me.columnBrand = MyBase.C~dulla^@204~ ")
            Me.columnOrigin = MyB~dulla^@204~ Origin")
            Me.columnNetWei~dulla^@204~ Columns("NetWeight")
            Me.~dulla^@204~ y = MyBase.Columns("Quantity")
     ~dulla^@204~ umnPrice = MyBase.Columns("Price")
 ~dulla^@204~ .columnAmount = MyBase.Columns("Amoun~dulla^@204~     Me.columnSupplierID = MyBase.Colu~dulla^@204~ ID")
            Me.columnInvoiceNo ~dulla^@204~ mns("InvoiceNo")
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Private Sub InitClas~dulla^@204~     Me.columnPartNo = New System.Data~dulla^@204~ PartNo", GetType(String), Nothing, Sy~dulla^@204~ pingType.Element)
            MyBase~dulla^@204~ Me.columnPartNo)
            Me.colu~dulla^@204~  = New System.Data.DataColumn("Descri~dulla^@204~ pe(String), Nothing, System.Data.Mapp~dulla^@204~ nt)
            MyBase.Columns.Add(M~dulla^@204~ iption)
            Me.columnBrand =~dulla^@204~ ata.DataColumn("Brand", GetType(Strin~dulla^@204~ System.Data.MappingType.Element)
   ~dulla^@204~ se.Columns.Add(Me.columnBrand)
     ~dulla^@204~ umnOrigin = New System.Data.DataColum~dulla^@204~ etType(String), Nothing, System.Data.~dulla^@204~ lement)
            MyBase.Columns.A~dulla^@204~ rigin)
            Me.columnNetWeigh~dulla^@204~ m.Data.DataColumn("NetWeight", GetTyp~dulla^@204~ thing, System.Data.MappingType.Elemen~dulla^@204~    MyBase.Columns.Add(Me.columnNetWei~dulla^@204~      Me.columnQuantity = New System.D~dulla^@204~ n("Quantity", GetType(Integer), Nothi~dulla^@204~ ta.MappingType.Element)
            ~dulla^@204~ s.Add(Me.columnQuantity)
           ~dulla^@204~ ce = New System.Data.DataColumn("Pric~dulla^@204~ ecimal), Nothing, System.Data.Mapping~dulla^@204~ 
            MyBase.Columns.Add(Me.c~dulla^@204~             Me.columnAmount = New Sys~dulla^@204~ Column("Amount", GetType(Decimal), No~dulla^@204~ .Data.MappingType.Element)
         ~dulla^@204~ umns.Add(Me.columnAmount)
          ~dulla^@204~ pplierID = New System.Data.DataColumn~dulla^@204~ , GetType(String), Nothing, System.Da~dulla^@204~ e.Element)
            MyBase.Column~dulla^@204~ mnSupplierID)
            Me.columnI~dulla^@204~ w System.Data.DataColumn("InvoiceNo",~dulla^@204~ ng), Nothing, System.Data.MappingType~dulla^@204~           MyBase.Columns.Add(Me.colum~dulla^@204~             Me.Constraints.Add(New Sy~dulla^@204~ queConstraint("Constraint1", New Syst~dulla^@204~ olumn() {Me.columnInvoiceNo}, true))~dulla^@204~ Me.columnPartNo.AllowDBNull = false
~dulla^@204~ e.columnPartNo.MaxLength = 20
      ~dulla^@204~ mnDescription.AllowDBNull = false
  ~dulla^@204~ columnDescription.MaxLength = 20
   ~dulla^@204~ olumnBrand.MaxLength = 10
          ~dulla^@204~ igin.MaxLength = 10
            Me.c~dulla^@204~ t.MaxLength = 10
            Me.colu~dulla^@204~ lowDBNull = false
            Me.col~dulla^@204~ owDBNull = false
            Me.colu~dulla^@204~ AllowDBNull = false
            Me.c~dulla^@204~ ID.MaxLength = 20
            Me.col~dulla^@204~ AllowDBNull = false
            Me.c~dulla^@204~ o.Unique = true
            Me.colum~dulla^@204~ xLength = 20
        End Sub
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Function NewPurch~dulla^@204~ As PurchaseInfoRow
            Retur~dulla^@204~ wRow,PurchaseInfoRow)
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Protected ~dulla^@204~ ction NewRowFromBuilder(ByVal builder~dulla^@204~ ta.DataRowBuilder) As System.Data.Dat~dulla^@204~      Return New PurchaseInfoRow(build~dulla^@204~ End Function
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ected Overrides Function GetRowType()~dulla^@204~ pe
            Return GetType(Purcha~dulla^@204~        End Function
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Protected Overrides Sub OnRowChang~dulla^@204~  System.Data.DataRowChangeEventArgs)~dulla^@204~ MyBase.OnRowChanged(e)
            I~dulla^@204~ rchaseInfoRowChangedEvent) Is Nothing~dulla^@204~            RaiseEvent PurchaseInfoRow~dulla^@204~ ew PurchaseInfoRowChangeEvent(CType(e~dulla^@204~ InfoRow), e.Action))
            End~dulla^@204~ End Sub
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~  Overrides Sub OnRowChanging(ByVal e ~dulla^@204~ a.DataRowChangeEventArgs)
          ~dulla^@204~ wChanging(e)
            If (Not (Me~dulla^@204~ RowChangingEvent) Is Nothing) Then
 ~dulla^@204~   RaiseEvent PurchaseInfoRowChanging(~dulla^@204~ aseInfoRowChangeEvent(CType(e.Row,Pur~dulla^@204~ , e.Action))
            End If
   ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Prot~dulla^@204~ es Sub OnRowDeleted(ByVal e As System~dulla^@204~ ChangeEventArgs)
            MyBase.~dulla^@204~ e)
            If (Not (Me.PurchaseI~dulla^@204~ Event) Is Nothing) Then
            ~dulla^@204~ t PurchaseInfoRowDeleted(Me, New Purc~dulla^@204~ angeEvent(CType(e.Row,PurchaseInfoRow~dulla^@204~ 
            End If
        End Sub~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Protected Overri~dulla^@204~ Deleting(ByVal e As System.Data.DataR~dulla^@204~ Args)
            MyBase.OnRowDeleti~dulla^@204~       If (Not (Me.PurchaseInfoRowDele~dulla^@204~  Nothing) Then
                Raise~dulla^@204~ eInfoRowDeleting(Me, New PurchaseInfo~dulla^@204~ t(CType(e.Row,PurchaseInfoRow), e.Act~dulla^@204~       End If
        End Sub
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Sub RemovePurchas~dulla^@204~ l row As PurchaseInfoRow)
          ~dulla^@204~ ove(row)
        End Sub
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Shared Function GetTy~dulla^@204~ a(ByVal xs As System.Xml.Schema.XmlSc~dulla^@204~ ystem.Xml.Schema.XmlSchemaComplexType~dulla^@204~  Dim type As System.Xml.Schema.XmlSch~dulla^@204~ e = New System.Xml.Schema.XmlSchemaCo~dulla^@204~           Dim sequence As System.Xml.~dulla^@204~ emaSequence = New System.Xml.Schema.X~dulla^@204~ nce
            Dim ds As PurchaseIn~dulla^@204~ New PurchaseInfoDataSet2
           ~dulla^@204~ tSchemaSerializable)
            Dim~dulla^@204~ em.Xml.Schema.XmlSchemaAny = New Syst~dulla^@204~ .XmlSchemaAny
            any1.Names~dulla^@204~ //www.w3.org/2001/XMLSchema"
       ~dulla^@204~ Occurs = New Decimal(0)
            ~dulla^@204~ s = Decimal.MaxValue
            any~dulla^@204~ ents = System.Xml.Schema.XmlSchemaCon~dulla^@204~ g.Lax
            sequence.Items.Add~dulla^@204~        Dim any2 As System.Xml.Schema.~dulla^@204~ = New System.Xml.Schema.XmlSchemaAny~dulla^@204~ any2.Namespace = "urn:schemas-microso~dulla^@204~ ffgram-v1"
            any2.MinOccur~dulla^@204~ al(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentPro~dulla^@204~             sequence.Items.Add(any2)~dulla^@204~ Dim attribute1 As System.Xml.Schema.X~dulla^@204~ bute = New System.Xml.Schema.XmlSchem~dulla^@204~            attribute1.Name = "namespa~dulla^@204~     attribute1.FixedValue = ds.Namesp~dulla^@204~     type.Attributes.Add(attribute1)
~dulla^@204~ im attribute2 As System.Xml.Schema.Xm~dulla^@204~ ute = New System.Xml.Schema.XmlSchema~dulla^@204~           attribute2.Name = "tableTyp~dulla^@204~        attribute2.FixedValue = "Purch~dulla^@204~ ble"
            type.Attributes.Add~dulla^@204~ 
            type.Particle = sequence~dulla^@204~  Return type
        End Function
 ~dulla^@204~ 
    
    <System.CodeDom.Compiler.G~dulla^@204~ ttribute("System.Data.Design.TypedDat~dulla^@204~ ", "2.0.0.0"),  _
     System.Serial~dulla^@204~ 
     System.Xml.Serialization.XmlSch~dulla^@204~ tribute("GetTypedTableSchema")>  _
 ~dulla^@204~ blic Class SalesInfoDataTable
      ~dulla^@204~ stem.Data.DataTable
        Implemen~dulla^@204~ lections.IEnumerable
        
     ~dulla^@204~ lumnPartNo As System.Data.DataColumn~dulla^@204~       Private columnDescription As Sy~dulla^@204~ aColumn
        
        Private co~dulla^@204~ As System.Data.DataColumn
        
~dulla^@204~ te columnUnitPrice As System.Data.Dat~dulla^@204~     
        Private columnAmount As~dulla^@204~ DataColumn
        
        Private~dulla^@204~ Sale As System.Data.DataColumn
     ~dulla^@204~ Private columnCashSalesInvoiceNo As S~dulla^@204~ taColumn
        
        Private c~dulla^@204~ lesInvoiceNo As System.Data.DataColum~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Sub New(~dulla^@204~   MyBase.New
            Me.TableNam~dulla^@204~ o"
            Me.BeginInit
       ~dulla^@204~ lass
            Me.EndInit
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Friend S~dulla^@204~ table As System.Data.DataTable)
    ~dulla^@204~ e.New
            Me.TableName = tab~dulla^@204~ 
            If (table.CaseSensitive ~dulla^@204~ Set.CaseSensitive) Then
            ~dulla^@204~ nsitive = table.CaseSensitive
      ~dulla^@204~ 
            If (table.Locale.ToStrin~dulla^@204~ taSet.Locale.ToString) Then
        ~dulla^@204~ cale = table.Locale
            End ~dulla^@204~    If (table.Namespace <> table.DataS~dulla^@204~  Then
                Me.Namespace =~dulla^@204~ ace
            End If
            ~dulla^@204~ able.Prefix
            Me.MinimumCa~dulla^@204~ e.MinimumCapacity
        End Sub
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Protected Sub New(B~dulla^@204~ System.Runtime.Serialization.Serializ~dulla^@204~ Val context As System.Runtime.Seriali~dulla^@204~ ingContext)
            MyBase.New(i~dulla^@204~ 
            Me.InitVars
        En~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Read~dulla^@204~  PartNoColumn() As System.Data.DataCo~dulla^@204~      Get
                Return Me.c~dulla^@204~             End Get
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public ReadO~dulla^@204~ DescriptionColumn() As System.Data.Da~dulla^@204~          Get
                Return ~dulla^@204~ ription
            End Get
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ Property QuantityColumn() As System.D~dulla^@204~ n
            Get
                R~dulla^@204~ mnQuantity
            End Get
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ly Property UnitPriceColumn() As Syst~dulla^@204~ olumn
            Get
             ~dulla^@204~ columnUnitPrice
            End Get~dulla^@204~ Property
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ eadOnly Property AmountColumn() As Sy~dulla^@204~ aColumn
            Get
           ~dulla^@204~ e.columnAmount
            End Get
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ adOnly Property DateOfSaleColumn() As~dulla^@204~ DataColumn
            Get
        ~dulla^@204~ n Me.columnDateOfSale
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic ReadOnly Property CashSalesInvoi~dulla^@204~ As System.Data.DataColumn
          ~dulla^@204~           Return Me.columnCashSalesIn~dulla^@204~         End Get
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public ReadOnly ~dulla^@204~ itSalesInvoiceNoColumn() As System.Da~dulla^@204~ 
            Get
                Re~dulla^@204~ nCreditSalesInvoiceNo
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute(),  ~dulla^@204~ ystem.ComponentModel.Browsable(false)~dulla^@204~  Public ReadOnly Property Count() As ~dulla^@204~         Get
                Return M~dulla^@204~ 
            End Get
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Defa~dulla^@204~ Property Item(ByVal index As Integer)~dulla^@204~ Row
            Get
               ~dulla^@204~ (Me.Rows(index),SalesInfoRow)
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ vent SalesInfoRowChanging As SalesInf~dulla^@204~ ntHandler
        
        Public E~dulla^@204~ oRowChanged As SalesInfoRowChangeEven~dulla^@204~      
        Public Event SalesInfo~dulla^@204~ s SalesInfoRowChangeEventHandler
   ~dulla^@204~   Public Event SalesInfoRowDeleted As~dulla^@204~ ChangeEventHandler
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Overloads Sub AddSalesInfoRo~dulla^@204~ s SalesInfoRow)
            Me.Rows.~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic Overloads Function AddSalesInfoRow~dulla^@204~ ProductsRowByFK_SalesInfo_Products As~dulla^@204~  ByVal Description As String, ByVal Q~dulla^@204~ teger, ByVal UnitPrice As Decimal, By~dulla^@204~  Decimal, ByVal DateOfSale As Date, B~dulla^@204~ shSalesRowByFK_SalesInfo_CashSales As~dulla^@204~ , ByVal parentCreditSalesRowByFK_Sale~dulla^@204~ ales As CreditSalesRow) As SalesInfoR~dulla^@204~    Dim rowSalesInfoRow As SalesInfoRo~dulla^@204~ NewRow,SalesInfoRow)
            row~dulla^@204~ ItemArray = New Object() {parentProdu~dulla^@204~ lesInfo_Products(0), Description, Qua~dulla^@204~ ice, Amount, DateOfSale, parentCashSa~dulla^@204~ lesInfo_CashSales(0), parentCreditSal~dulla^@204~ esInfo_CreditSales(0)}
            M~dulla^@204~ wSalesInfoRow)
            Return ro~dulla^@204~ 
        End Function
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Function FindByPartNo(By~dulla^@204~  String) As SalesInfoRow
           ~dulla^@204~ (Me.Rows.Find(New Object() {PartNo}),~dulla^@204~ 
        End Function
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Overridable Function Get~dulla^@204~ As System.Collections.IEnumerator Imp~dulla^@204~ m.Collections.IEnumerable.GetEnumerat~dulla^@204~    Return Me.Rows.GetEnumerator
    ~dulla^@204~ ion
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ des Function Clone() As System.Data.D~dulla^@204~          Dim cln As SalesInfoDataTabl~dulla^@204~ ase.Clone,SalesInfoDataTable)
      ~dulla^@204~ tVars
            Return cln
      ~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pr~dulla^@204~ ides Function CreateInstance() As Sys~dulla^@204~ Table
            Return New SalesIn~dulla^@204~         End Function
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Friend Sub InitVars()
            Me.columnPartNo = MyBase.Columns("PartNo~dulla^@204~    Me.columnDescription = MyBase.Colu~dulla^@204~ ion")
            Me.columnQuantity ~dulla^@204~ mns("Quantity")
            Me.colum~dulla^@204~ MyBase.Columns("UnitPrice")
        ~dulla^@204~ Amount = MyBase.Columns("Amount")
  ~dulla^@204~ columnDateOfSale = MyBase.Columns("Da~dulla^@204~            Me.columnCashSalesInvoiceN~dulla^@204~ lumns("CashSalesInvoiceNo")
        ~dulla^@204~ CreditSalesInvoiceNo = MyBase.Columns~dulla^@204~ InvoiceNo")
        End Sub
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Private Sub InitClass()
~dulla^@204~ e.columnPartNo = New System.Data.Data~dulla^@204~ o", GetType(String), Nothing, System.~dulla^@204~ ype.Element)
            MyBase.Colu~dulla^@204~ lumnPartNo)
            Me.columnDes~dulla^@204~ w System.Data.DataColumn("Description~dulla^@204~ ring), Nothing, System.Data.MappingTy~dulla^@204~             MyBase.Columns.Add(Me.col~dulla^@204~ n)
            Me.columnQuantity = N~dulla^@204~ a.DataColumn("Quantity", GetType(Inte~dulla^@204~ , System.Data.MappingType.Element)
 ~dulla^@204~ Base.Columns.Add(Me.columnQuantity)
~dulla^@204~ e.columnUnitPrice = New System.Data.D~dulla^@204~ itPrice", GetType(Decimal), Nothing, ~dulla^@204~ appingType.Element)
            MyBa~dulla^@204~ d(Me.columnUnitPrice)
            Me~dulla^@204~  = New System.Data.DataColumn("Amount~dulla^@204~ cimal), Nothing, System.Data.MappingT~dulla^@204~ 
            MyBase.Columns.Add(Me.co~dulla^@204~             Me.columnDateOfSale = New~dulla^@204~ DataColumn("DateOfSale", GetType(Date~dulla^@204~ ystem.Data.MappingType.Element)
    ~dulla^@204~ e.Columns.Add(Me.columnDateOfSale)
 ~dulla^@204~ .columnCashSalesInvoiceNo = New Syste~dulla^@204~ lumn("CashSalesInvoiceNo", GetType(St~dulla^@204~ g, System.Data.MappingType.Element)
~dulla^@204~ yBase.Columns.Add(Me.columnCashSalesI~dulla^@204~           Me.columnCreditSalesInvoice~dulla^@204~ em.Data.DataColumn("CreditSalesInvoic~dulla^@204~ (String), Nothing, System.Data.Mappin~dulla^@204~ )
            MyBase.Columns.Add(Me.~dulla^@204~ alesInvoiceNo)
            Me.Constr~dulla^@204~  System.Data.UniqueConstraint("Constr~dulla^@204~ ystem.Data.DataColumn() {Me.columnPar~dulla^@204~ 
            Me.columnPartNo.AllowDBN~dulla^@204~             Me.columnPartNo.Unique = ~dulla^@204~      Me.columnPartNo.MaxLength = 20
~dulla^@204~ e.columnDescription.AllowDBNull = fal~dulla^@204~    Me.columnDescription.MaxLength = 2~dulla^@204~   Me.columnQuantity.AllowDBNull = fal~dulla^@204~    Me.columnUnitPrice.AllowDBNull = f~dulla^@204~      Me.columnAmount.AllowDBNull = fa~dulla^@204~     Me.columnDateOfSale.AllowDBNull =~dulla^@204~        Me.columnCashSalesInvoiceNo.Al~dulla^@204~ alse
            Me.columnCashSalesI~dulla^@204~ ength = 20
            Me.columnCred~dulla^@204~ eNo.AllowDBNull = false
            ~dulla^@204~ itSalesInvoiceNo.MaxLength = 20
    ~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ wSalesInfoRow() As SalesInfoRow
    ~dulla^@204~ n CType(Me.NewRow,SalesInfoRow)
    ~dulla^@204~ ion
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ rrides Function NewRowFromBuilder(ByV~dulla^@204~  System.Data.DataRowBuilder) As Syste~dulla^@204~ w
            Return New SalesInfoRo~dulla^@204~        End Function
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Protected Overrides Function GetRo~dulla^@204~ stem.Type
            Return GetType~dulla^@204~ )
        End Function
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Protected Overrides Sub OnRowC~dulla^@204~ e As System.Data.DataRowChangeEventAr~dulla^@204~     MyBase.OnRowChanged(e)
         ~dulla^@204~ e.SalesInfoRowChangedEvent) Is Nothin~dulla^@204~             RaiseEvent SalesInfoRowCh~dulla^@204~  SalesInfoRowChangeEvent(CType(e.Row,~dulla^@204~ , e.Action))
            End If
   ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Prot~dulla^@204~ es Sub OnRowChanging(ByVal e As Syste~dulla^@204~ wChangeEventArgs)
            MyBase~dulla^@204~ g(e)
            If (Not (Me.SalesIn~dulla^@204~ Event) Is Nothing) Then
            ~dulla^@204~ t SalesInfoRowChanging(Me, New SalesI~dulla^@204~ vent(CType(e.Row,SalesInfoRow), e.Act~dulla^@204~       End If
        End Sub
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Protected Overrides Sub ~dulla^@204~ ByVal e As System.Data.DataRowChangeE~dulla^@204~           MyBase.OnRowDeleted(e)
   ~dulla^@204~ Not (Me.SalesInfoRowDeletedEvent) Is ~dulla^@204~ 
                RaiseEvent SalesInf~dulla^@204~ e, New SalesInfoRowChangeEvent(CType(~dulla^@204~ foRow), e.Action))
            End I~dulla^@204~ d Sub
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ verrides Sub OnRowDeleting(ByVal e As~dulla^@204~ DataRowChangeEventArgs)
            ~dulla^@204~ eleting(e)
            If (Not (Me.S~dulla^@204~ letingEvent) Is Nothing) Then
      ~dulla^@204~ seEvent SalesInfoRowDeleting(Me, New ~dulla^@204~ hangeEvent(CType(e.Row,SalesInfoRow),~dulla^@204~             End If
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Sub RemoveS~dulla^@204~ yVal row As SalesInfoRow)
          ~dulla^@204~ ove(row)
        End Sub
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Shared Function GetTy~dulla^@204~ a(ByVal xs As System.Xml.Schema.XmlSc~dulla^@204~ ystem.Xml.Schema.XmlSchemaComplexType~dulla^@204~  Dim type As System.Xml.Schema.XmlSch~dulla^@204~ e = New System.Xml.Schema.XmlSchemaCo~dulla^@204~           Dim sequence As System.Xml.~dulla^@204~ emaSequence = New System.Xml.Schema.X~dulla^@204~ nce
            Dim ds As PurchaseIn~dulla^@204~ New PurchaseInfoDataSet2
           ~dulla^@204~ tSchemaSerializable)
            Dim~dulla^@204~ em.Xml.Schema.XmlSchemaAny = New Syst~dulla^@204~ .XmlSchemaAny
            any1.Names~dulla^@204~ //www.w3.org/2001/XMLSchema"
       ~dulla^@204~ Occurs = New Decimal(0)
            ~dulla^@204~ s = Decimal.MaxValue
            any~dulla^@204~ ents = System.Xml.Schema.XmlSchemaCon~dulla^@204~ g.Lax
            sequence.Items.Add~dulla^@204~        Dim any2 As System.Xml.Schema.~dulla^@204~ = New System.Xml.Schema.XmlSchemaAny~dulla^@204~ any2.Namespace = "urn:schemas-microso~dulla^@204~ ffgram-v1"
            any2.MinOccur~dulla^@204~ al(1)
            any2.ProcessConten~dulla^@204~ ml.Schema.XmlSchemaContentProcessing.~dulla^@204~     sequence.Items.Add(any2)
       ~dulla^@204~ ibute1 As System.Xml.Schema.XmlSchema~dulla^@204~ ew System.Xml.Schema.XmlSchemaAttribu~dulla^@204~    attribute1.Name = "namespace"
   ~dulla^@204~ ibute1.FixedValue = ds.Namespace
   ~dulla^@204~ .Attributes.Add(attribute1)
        ~dulla^@204~ bute2 As System.Xml.Schema.XmlSchemaA~dulla^@204~ w System.Xml.Schema.XmlSchemaAttribut~dulla^@204~   attribute2.Name = "tableTypeName"
~dulla^@204~ ttribute2.FixedValue = "SalesInfoData~dulla^@204~        type.Attributes.Add(attribute2~dulla^@204~   type.Particle = sequence
         ~dulla^@204~ e
        End Function
    End Clas~dulla^@204~ <System.CodeDom.Compiler.GeneratedCod~dulla^@204~ ystem.Data.Design.TypedDataSetGenerat~dulla^@204~ "),  _
     System.Serializable(),  ~dulla^@204~ m.Xml.Serialization.XmlSchemaProvider~dulla^@204~ tTypedTableSchema")>  _
    Partial ~dulla^@204~ StockCardDataTable
        Inherits ~dulla^@204~ ataTable
        Implements System.C~dulla^@204~ numerable
        
        Private ~dulla^@204~ rdNo As System.Data.DataColumn
     ~dulla^@204~ Private columnPartNo As System.Data.D~dulla^@204~       
        Private columnDescrip~dulla^@204~ m.Data.DataColumn
        
        ~dulla^@204~ nCostPrice As System.Data.DataColumn~dulla^@204~       Private columnSellingPrice As S~dulla^@204~ taColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Sub New()
            MyBase.~dulla^@204~     Me.TableName = "StockCard"
     ~dulla^@204~ inInit
            Me.InitClass
   ~dulla^@204~ ndInit
        End Sub
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Friend Sub New(ByVal table As ~dulla^@204~ ataTable)
            MyBase.New
  ~dulla^@204~ TableName = table.TableName
        ~dulla^@204~ .CaseSensitive <> table.DataSet.CaseS~dulla^@204~ n
                Me.CaseSensitive =~dulla^@204~ nsitive
            End If
        ~dulla^@204~ .Locale.ToString <> table.DataSet.Loc~dulla^@204~  Then
                Me.Locale = ta~dulla^@204~            End If
            If (ta~dulla^@204~  <> table.DataSet.Namespace) Then
  ~dulla^@204~  Me.Namespace = table.Namespace
    ~dulla^@204~ f
            Me.Prefix = table.Pref~dulla^@204~    Me.MinimumCapacity = table.Minimum~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ected Sub New(ByVal info As System.Ru~dulla^@204~ zation.SerializationInfo, ByVal conte~dulla^@204~ Runtime.Serialization.StreamingContex~dulla^@204~    MyBase.New(info, context)
       ~dulla^@204~ ars
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public ReadOnly Property StockCar~dulla^@204~ s System.Data.DataColumn
           ~dulla^@204~          Return Me.columnStockCardNo~dulla^@204~ End Get
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public ReadOnly Property~dulla^@204~ () As System.Data.DataColumn
       ~dulla^@204~              Return Me.columnPartNo
~dulla^@204~ nd Get
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public ReadOnly Property ~dulla^@204~ lumn() As System.Data.DataColumn
   ~dulla^@204~ 
                Return Me.columnDesc~dulla^@204~         End Get
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public ReadOnly ~dulla^@204~ PriceColumn() As System.Data.DataColu~dulla^@204~    Get
                Return Me.col~dulla^@204~ 
            End Get
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Read~dulla^@204~  SellingPriceColumn() As System.Data.~dulla^@204~            Get
                Retur~dulla^@204~ llingPrice
            End Get
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute(),  _
        ~dulla^@204~ nentModel.Browsable(false)>  _
     ~dulla^@204~ dOnly Property Count() As Integer
  ~dulla^@204~ 
                Return Me.Rows.Coun~dulla^@204~   End Get
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Default ReadOnl~dulla^@204~ em(ByVal index As Integer) As StockCa~dulla^@204~       Get
                Return CTy~dulla^@204~ dex),StockCardRow)
            End G~dulla^@204~ nd Property
        
        Public~dulla^@204~ ardRowChanging As StockCardRowChangeE~dulla^@204~         
        Public Event StockC~dulla^@204~  As StockCardRowChangeEventHandler
 ~dulla^@204~     Public Event StockCardRowDeleting~dulla^@204~ RowChangeEventHandler
        
    ~dulla^@204~ ent StockCardRowDeleted As StockCardR~dulla^@204~ Handler
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ erloads Sub AddStockCardRow(ByVal row~dulla^@204~ Row)
            Me.Rows.Add(row)
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~ s Function AddStockCardRow(ByVal Stoc~dulla^@204~ ring, ByVal parentSalesInfoRowByFK_St~dulla^@204~ Info As SalesInfoRow, ByVal Descripti~dulla^@204~  ByVal CostPrice As Decimal, ByVal Se~dulla^@204~  Decimal) As StockCardRow
          ~dulla^@204~ kCardRow As StockCardRow = CType(Me.N~dulla^@204~ rdRow)
            rowStockCardRow.I~dulla^@204~ w Object() {StockCardNo, parentSalesI~dulla^@204~ ockCard_SalesInfo(0), Description, Co~dulla^@204~ ingPrice}
            Me.Rows.Add(ro~dulla^@204~ )
            Return rowStockCardRow~dulla^@204~  Function
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Function FindByStockCardNo(ByVal Stoc~dulla^@204~ ring) As StockCardRow
            Re~dulla^@204~ .Rows.Find(New Object() {StockCardNo}~dulla^@204~ w)
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public Overridable Function G~dulla^@204~ ) As System.Collections.IEnumerator I~dulla^@204~ tem.Collections.IEnumerable.GetEnumer~dulla^@204~      Return Me.Rows.GetEnumerator
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ rides Function Clone() As System.Data~dulla^@204~            Dim cln As StockCardDataTa~dulla^@204~ yBase.Clone,StockCardDataTable)
    ~dulla^@204~ nitVars
            Return cln
    ~dulla^@204~ ion
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ rrides Function CreateInstance() As S~dulla^@204~ taTable
            Return New Stock~dulla^@204~ 
        End Function
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Friend Sub InitVars()
        ~dulla^@204~ StockCardNo = MyBase.Columns("StockCa~dulla^@204~        Me.columnPartNo = MyBase.Colum~dulla^@204~ 
            Me.columnDescription = M~dulla^@204~ ("Description")
            Me.colum~dulla^@204~ MyBase.Columns("CostPrice")
        ~dulla^@204~ SellingPrice = MyBase.Columns("Sellin~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ate Sub InitClass()
            Me.c~dulla^@204~ dNo = New System.Data.DataColumn("Sto~dulla^@204~ tType(String), Nothing, System.Data.M~dulla^@204~ ement)
            MyBase.Columns.Ad~dulla^@204~ ockCardNo)
            Me.columnPart~dulla^@204~ em.Data.DataColumn("PartNo", GetType(~dulla^@204~ ing, System.Data.MappingType.Element)~dulla^@204~  MyBase.Columns.Add(Me.columnPartNo)~dulla^@204~ Me.columnDescription = New System.Dat~dulla^@204~ "Description", GetType(String), Nothi~dulla^@204~ ta.MappingType.Element)
            ~dulla^@204~ s.Add(Me.columnDescription)
        ~dulla^@204~ CostPrice = New System.Data.DataColum~dulla^@204~ , GetType(Decimal), Nothing, System.D~dulla^@204~ pe.Element)
            MyBase.Colum~dulla^@204~ umnCostPrice)
            Me.columnS~dulla^@204~  New System.Data.DataColumn("SellingP~dulla^@204~ e(Decimal), Nothing, System.Data.Mapp~dulla^@204~ nt)
            MyBase.Columns.Add(M~dulla^@204~ ngPrice)
            Me.Constraints.~dulla^@204~ m.Data.UniqueConstraint("Constraint1"~dulla^@204~ Data.DataColumn() {Me.columnStockCard~dulla^@204~             Me.columnStockCardNo.Allo~dulla^@204~ se
            Me.columnStockCardNo.~dulla^@204~ 
            Me.columnStockCardNo.Ma~dulla^@204~ 
            Me.columnPartNo.AllowDBN~dulla^@204~             Me.columnPartNo.MaxLength~dulla^@204~       Me.columnDescription.AllowDBNul~dulla^@204~           Me.columnDescription.MaxLen~dulla^@204~          Me.columnCostPrice.AllowDBNu~dulla^@204~            Me.columnSellingPrice.Allo~dulla^@204~ se
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Function NewStockCardRow() ~dulla^@204~ ow
            Return CType(Me.NewRo~dulla^@204~ w)
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Protected Overrides Function ~dulla^@204~ lder(ByVal builder As System.Data.Dat~dulla^@204~ As System.Data.DataRow
            R~dulla^@204~ ckCardRow(builder)
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Protected Ove~dulla^@204~ on GetRowType() As System.Type
     ~dulla^@204~  GetType(StockCardRow)
        End F~dulla^@204~     
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        P~dulla^@204~ rides Sub OnRowChanged(ByVal e As Sys~dulla^@204~ RowChangeEventArgs)
            MyBa~dulla^@204~ ed(e)
            If (Not (Me.StockC~dulla^@204~ Event) Is Nothing) Then
            ~dulla^@204~ t StockCardRowChanged(Me, New StockCa~dulla^@204~ ent(CType(e.Row,StockCardRow), e.Acti~dulla^@204~      End If
        End Sub
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Protected Overrides Sub O~dulla^@204~ ByVal e As System.Data.DataRowChangeE~dulla^@204~           MyBase.OnRowChanging(e)
  ~dulla^@204~ (Not (Me.StockCardRowChangingEvent) I~dulla^@204~ en
                RaiseEvent StockC~dulla^@204~ g(Me, New StockCardRowChangeEvent(CTy~dulla^@204~ kCardRow), e.Action))
            En~dulla^@204~  End Sub
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ d Overrides Sub OnRowDeleted(ByVal e ~dulla^@204~ a.DataRowChangeEventArgs)
          ~dulla^@204~ wDeleted(e)
            If (Not (Me.~dulla^@204~ eletedEvent) Is Nothing) Then
      ~dulla^@204~ seEvent StockCardRowDeleted(Me, New S~dulla^@204~ angeEvent(CType(e.Row,StockCardRow), ~dulla^@204~            End If
        End Sub
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Protected Overrides~dulla^@204~ eting(ByVal e As System.Data.DataRowC~dulla^@204~ s)
            MyBase.OnRowDeleting(~dulla^@204~    If (Not (Me.StockCardRowDeletingEv~dulla^@204~ ng) Then
                RaiseEvent ~dulla^@204~ eleting(Me, New StockCardRowChangeEve~dulla^@204~ w,StockCardRow), e.Action))
        ~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Sub RemoveStockCardRow(ByVal row~dulla^@204~ Row)
            Me.Rows.Remove(row)~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ d Function GetTypedTableSchema(ByVal ~dulla^@204~ Xml.Schema.XmlSchemaSet) As System.Xm~dulla^@204~ chemaComplexType
            Dim typ~dulla^@204~ ml.Schema.XmlSchemaComplexType = New ~dulla^@204~ hema.XmlSchemaComplexType
          ~dulla^@204~ e As System.Xml.Schema.XmlSchemaSeque~dulla^@204~ tem.Xml.Schema.XmlSchemaSequence
   ~dulla^@204~ ds As PurchaseInfoDataSet2 = New Purc~dulla^@204~ et2
            xs.Add(ds.GetSchemaS~dulla^@204~ 
            Dim any1 As System.Xml.S~dulla^@204~ maAny = New System.Xml.Schema.XmlSche~dulla^@204~       any1.Namespace = "http://www.w3~dulla^@204~ Schema"
            any1.MinOccurs =~dulla^@204~ 0)
            any1.MaxOccurs = Deci~dulla^@204~ 
            any1.ProcessContents = S~dulla^@204~ ema.XmlSchemaContentProcessing.Lax
 ~dulla^@204~ quence.Items.Add(any1)
            D~dulla^@204~ stem.Xml.Schema.XmlSchemaAny = New Sy~dulla^@204~ ma.XmlSchemaAny
            any2.Nam~dulla^@204~ :schemas-microsoft-com:xml-diffgram-v~dulla^@204~    any2.MinOccurs = New Decimal(1)
 ~dulla^@204~ y2.ProcessContents = System.Xml.Schem~dulla^@204~ ntentProcessing.Lax
            sequ~dulla^@204~ d(any2)
            Dim attribute1 A~dulla^@204~ Schema.XmlSchemaAttribute = New Syste~dulla^@204~ XmlSchemaAttribute
            attri~dulla^@204~ "namespace"
            attribute1.F~dulla^@204~ s.Namespace
            type.Attribu~dulla^@204~ bute1)
            Dim attribute2 As~dulla^@204~ chema.XmlSchemaAttribute = New System~dulla^@204~ mlSchemaAttribute
            attrib~dulla^@204~ tableTypeName"
            attribute~dulla^@204~ = "StockCardDataTable"
            t~dulla^@204~ s.Add(attribute2)
            type.P~dulla^@204~ uence
            Return type
     ~dulla^@204~ on
    End Class
    
    <System.~dulla^@204~ ler.GeneratedCodeAttribute("System.Da~dulla^@204~ edDataSetGenerator", "2.0.0.0"),  _
~dulla^@204~ erializable(),  _
     System.Xml.Se~dulla^@204~ mlSchemaProviderAttribute("GetTypedTa~dulla^@204~  _
    Partial Public Class StockCar~dulla^@204~ ble
        Inherits System.Data.Dat~dulla^@204~    Implements System.Collections.IEnu~dulla^@204~     
        Private columnSalesInvo~dulla^@204~ em.Data.DataColumn
        
       ~dulla^@204~ mnDateOfSale As System.Data.DataColum~dulla^@204~         Private columnDateRecieved As~dulla^@204~ DataColumn
        
        Private~dulla^@204~ ieved As System.Data.DataColumn
    ~dulla^@204~  Private columnQtyIssued As System.Da~dulla^@204~ 
        
        Private columnQty~dulla^@204~ stem.Data.DataColumn
        
     ~dulla^@204~ lumnStockCardNo As System.Data.DataCo~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Sub N~dulla^@204~      MyBase.New
            Me.Table~dulla^@204~ CardDetail"
            Me.BeginInit~dulla^@204~  Me.InitClass
            Me.EndInit~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ ew(ByVal table As System.Data.DataTab~dulla^@204~     MyBase.New
            Me.TableN~dulla^@204~ ableName
            If (table.CaseS~dulla^@204~ able.DataSet.CaseSensitive) Then
   ~dulla^@204~ Me.CaseSensitive = table.CaseSensitiv~dulla^@204~   End If
            If (table.Local~dulla^@204~  table.DataSet.Locale.ToString) Then~dulla^@204~     Me.Locale = table.Locale
       ~dulla^@204~             If (table.Namespace <> ta~dulla^@204~ amespace) Then
                Me.Na~dulla^@204~ le.Namespace
            End If
   ~dulla^@204~ refix = table.Prefix
            Me.~dulla^@204~ ty = table.MinimumCapacity
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Protected ~dulla^@204~  info As System.Runtime.Serialization~dulla^@204~ nInfo, ByVal context As System.Runtim~dulla^@204~ on.StreamingContext)
            MyB~dulla^@204~  context)
            Me.InitVars
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  Property SalesInvoiceNoColumn() As S~dulla^@204~ taColumn
            Get
          ~dulla^@204~ Me.columnSalesInvoiceNo
            ~dulla^@204~     End Property
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public ReadOnly Property DateOfSaleCo~dulla^@204~ tem.Data.DataColumn
            Get~dulla^@204~     Return Me.columnDateOfSale
     ~dulla^@204~ t
        End Property
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public ReadOnly Property DateR~dulla^@204~ () As System.Data.DataColumn
       ~dulla^@204~              Return Me.columnDateReci~dulla^@204~      End Get
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public ReadOnly Pro~dulla^@204~ evedColumn() As System.Data.DataColum~dulla^@204~   Get
                Return Me.colu~dulla^@204~ 
            End Get
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Rea~dulla^@204~ y QtyIssuedColumn() As System.Data.Da~dulla^@204~          Get
                Return ~dulla^@204~ ssued
            End Get
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ operty QtyBalanceColumn() As System.D~dulla^@204~ n
            Get
                R~dulla^@204~ mnQtyBalance
            End Get
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ Only Property StockCardNoColumn() As ~dulla^@204~ ataColumn
            Get
         ~dulla^@204~  Me.columnStockCardNo
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute(),  ~dulla^@204~ ystem.ComponentModel.Browsable(false)~dulla^@204~  Public ReadOnly Property Count() As ~dulla^@204~         Get
                Return M~dulla^@204~ 
            End Get
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Defa~dulla^@204~ Property Item(ByVal index As Integer)~dulla^@204~ DetailRow
            Get
                Return CType(Me.Rows(index),StockCa~dulla^@204~ 
            End Get
        End Pro~dulla^@204~   
        Public Event StockCardDet~dulla^@204~ g As StockCardDetailRowChangeEventHan~dulla^@204~  
        Public Event StockCardDeta~dulla^@204~ As StockCardDetailRowChangeEventHandl~dulla^@204~ 
        Public Event StockCardDetail~dulla^@204~ s StockCardDetailRowChangeEventHandle~dulla^@204~         Public Event StockCardDetailR~dulla^@204~ StockCardDetailRowChangeEventHandler~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Overloads ~dulla^@204~ ardDetailRow(ByVal row As StockCardDe~dulla^@204~          Me.Rows.Add(row)
        En~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Over~dulla^@204~ n AddStockCardDetailRow(ByVal SalesIn~dulla^@204~ ring, ByVal DateOfSale As Date, ByVal~dulla^@204~  As Date, ByVal QtyRecieved As Intege~dulla^@204~ ssued As Integer, ByVal QtyBalance As~dulla^@204~ al parentStockCardRowByFK_StockCardDe~dulla^@204~ d As StockCardRow) As StockCardDetail~dulla^@204~     Dim rowStockCardDetailRow As Stoc~dulla^@204~ w = CType(Me.NewRow,StockCardDetailRo~dulla^@204~    rowStockCardDetailRow.ItemArray = ~dulla^@204~ {SalesInvoiceNo, DateOfSale, DateReci~dulla^@204~ eved, QtyIssued, QtyBalance, parentSt~dulla^@204~ K_StockCardDetail_StockCard(0)}
    ~dulla^@204~ ws.Add(rowStockCardDetailRow)
      ~dulla^@204~ rowStockCardDetailRow
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Fun~dulla^@204~ alesInvoiceNoDateOfSale(ByVal SalesIn~dulla^@204~ ring, ByVal DateOfSale As Date) As St~dulla^@204~ Row
            Return CType(Me.Rows~dulla^@204~ ect() {SalesInvoiceNo, DateOfSale}),S~dulla^@204~ lRow)
        End Function
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Overridable Functio~dulla^@204~ or() As System.Collections.IEnumerato~dulla^@204~ System.Collections.IEnumerable.GetEnu~dulla^@204~         Return Me.Rows.GetEnumerator~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ verrides Function Clone() As System.D~dulla^@204~ 
            Dim cln As StockCardDet~dulla^@204~ = CType(MyBase.Clone,StockCardDetailD~dulla^@204~           cln.InitVars
            R~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Protected Overrides Function Create~dulla^@204~  System.Data.DataTable
            R~dulla^@204~ ckCardDetailDataTable
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Friend Sub~dulla^@204~             Me.columnSalesInvoiceNo =~dulla^@204~ ns("SalesInvoiceNo")
            Me.~dulla^@204~ ale = MyBase.Columns("DateOfSale")
 ~dulla^@204~ .columnDateRecieved = MyBase.Columns(~dulla^@204~ ")
            Me.columnQtyRecieved ~dulla^@204~ mns("QtyRecieved")
            Me.co~dulla^@204~  = MyBase.Columns("QtyIssued")
     ~dulla^@204~ umnQtyBalance = MyBase.Columns("QtyBa~dulla^@204~         Me.columnStockCardNo = MyBase~dulla^@204~ ckCardNo")
        End Sub
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Private Sub InitClass()
 ~dulla^@204~ .columnSalesInvoiceNo = New System.Da~dulla^@204~ ("SalesInvoiceNo", GetType(String), N~dulla^@204~ m.Data.MappingType.Element)
        ~dulla^@204~ lumns.Add(Me.columnSalesInvoiceNo)
 ~dulla^@204~ .columnDateOfSale = New System.Data.D~dulla^@204~ teOfSale", GetType(Date), Nothing, Sy~dulla^@204~ pingType.Element)
            MyBase~dulla^@204~ Me.columnDateOfSale)
            Me.~dulla^@204~ ieved = New System.Data.DataColumn("D~dulla^@204~  GetType(Date), Nothing, System.Data.~dulla^@204~ lement)
            MyBase.Columns.A~dulla^@204~ ateRecieved)
            Me.columnQt~dulla^@204~ ew System.Data.DataColumn("QtyRecieve~dulla^@204~ nteger), Nothing, System.Data.Mapping~dulla^@204~ 
            MyBase.Columns.Add(Me.c~dulla^@204~ ved)
            Me.columnQtyIssued ~dulla^@204~ Data.DataColumn("QtyIssued", GetType(~dulla^@204~ hing, System.Data.MappingType.Element~dulla^@204~   MyBase.Columns.Add(Me.columnQtyIssu~dulla^@204~     Me.columnQtyBalance = New System.~dulla^@204~ mn("QtyBalance", GetType(Integer), No~dulla^@204~ .Data.MappingType.Element)
         ~dulla^@204~ umns.Add(Me.columnQtyBalance)
      ~dulla^@204~ mnStockCardNo = New System.Data.DataC~dulla^@204~ ardNo", GetType(String), Nothing, Sys~dulla^@204~ ingType.Element)
            MyBase.~dulla^@204~ e.columnStockCardNo)
            Me.~dulla^@204~ dd(New System.Data.UniqueConstraint("~dulla^@204~  New System.Data.DataColumn() {Me.col~dulla^@204~ ceNo, Me.columnDateOfSale}, true))
 ~dulla^@204~ .columnSalesInvoiceNo.AllowDBNull = f~dulla^@204~      Me.columnSalesInvoiceNo.MaxLengt~dulla^@204~        Me.columnDateOfSale.AllowDBNul~dulla^@204~           Me.columnStockCardNo.AllowD~dulla^@204~ 
            Me.columnStockCardNo.Ma~dulla^@204~ 
        End Sub
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Function NewStockCardDetailRow~dulla^@204~ rdDetailRow
            Return CType~dulla^@204~ ockCardDetailRow)
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Protected Over~dulla^@204~ n NewRowFromBuilder(ByVal builder As ~dulla^@204~ ataRowBuilder) As System.Data.DataRow~dulla^@204~  Return New StockCardDetailRow(builde~dulla^@204~ nd Function
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ cted Overrides Function GetRowType() ~dulla^@204~ e
            Return GetType(StockCa~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Protected Overrides Sub OnRowCha~dulla^@204~ As System.Data.DataRowChangeEventArgs~dulla^@204~   MyBase.OnRowChanged(e)
           ~dulla^@204~ StockCardDetailRowChangedEvent) Is No~dulla^@204~                 RaiseEvent StockCardD~dulla^@204~ ed(Me, New StockCardDetailRowChangeEv~dulla^@204~ ow,StockCardDetailRow), e.Action))
 ~dulla^@204~ d If
        End Sub
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Protected Overrides Sub OnRowCha~dulla^@204~  As System.Data.DataRowChangeEventArg~dulla^@204~    MyBase.OnRowChanging(e)
         ~dulla^@204~ e.StockCardDetailRowChangingEvent) Is~dulla^@204~ n
                RaiseEvent StockCa~dulla^@204~ anging(Me, New StockCardDetailRowChan~dulla^@204~ (e.Row,StockCardDetailRow), e.Action)~dulla^@204~   End If
        End Sub
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Protected Overrides Sub OnRo~dulla^@204~ l e As System.Data.DataRowChangeEvent~dulla^@204~       MyBase.OnRowDeleted(e)
       ~dulla^@204~ (Me.StockCardDetailRowDeletedEvent) I~dulla^@204~ en
                RaiseEvent StockC~dulla^@204~ eleted(Me, New StockCardDetailRowChan~dulla^@204~ (e.Row,StockCardDetailRow), e.Action)~dulla^@204~   End If
        End Sub
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Protected Overrides Sub OnRo~dulla^@204~ al e As System.Data.DataRowChangeEven~dulla^@204~        MyBase.OnRowDeleting(e)
     ~dulla^@204~ t (Me.StockCardDetailRowDeletingEvent~dulla^@204~  Then
                RaiseEvent Sto~dulla^@204~ owDeleting(Me, New StockCardDetailRow~dulla^@204~ Type(e.Row,StockCardDetailRow), e.Act~dulla^@204~       End If
        End Sub
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Sub RemoveStockCa~dulla^@204~ yVal row As StockCardDetailRow)
    ~dulla^@204~ ws.Remove(row)
        End Sub
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Shared Function~dulla^@204~ eSchema(ByVal xs As System.Xml.Schema~dulla^@204~ ) As System.Xml.Schema.XmlSchemaCompl~dulla^@204~        Dim type As System.Xml.Schema.~dulla^@204~ lexType = New System.Xml.Schema.XmlSc~dulla^@204~ pe
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New Syste~dulla^@204~ XmlSchemaSequence
            Dim ds~dulla^@204~ nfoDataSet2 = New PurchaseInfoDataSet~dulla^@204~   xs.Add(ds.GetSchemaSerializable)
 ~dulla^@204~ m any1 As System.Xml.Schema.XmlSchema~dulla^@204~ tem.Xml.Schema.XmlSchemaAny
        ~dulla^@204~ space = "http://www.w3.org/2001/XMLSc~dulla^@204~       any1.MinOccurs = New Decimal(0)~dulla^@204~  any1.MaxOccurs = Decimal.MaxValue
 ~dulla^@204~ y1.ProcessContents = System.Xml.Schem~dulla^@204~ ntentProcessing.Lax
            sequ~dulla^@204~ d(any1)
            Dim any2 As Syst~dulla^@204~ .XmlSchemaAny = New System.Xml.Schema~dulla^@204~ 
            any2.Namespace = "urn:s~dulla^@204~ oft-com:xml-diffgram-v1"
           ~dulla^@204~ rs = New Decimal(1)
            any2~dulla^@204~ nts = System.Xml.Schema.XmlSchemaCont~dulla^@204~ .Lax
            sequence.Items.Add(~dulla^@204~       Dim attribute1 As System.Xml.Sc~dulla^@204~ aAttribute = New System.Xml.Schema.Xm~dulla^@204~ ute
            attribute1.Name = "n~dulla^@204~           attribute1.FixedValue = ds.~dulla^@204~           type.Attributes.Add(attribu~dulla^@204~      Dim attribute2 As System.Xml.Sch~dulla^@204~ Attribute = New System.Xml.Schema.Xml~dulla^@204~ te
            attribute2.Name = "ta~dulla^@204~ 
            attribute2.FixedValue = ~dulla^@204~ ailDataTable"
            type.Attri~dulla^@204~ ribute2)
            type.Particle =~dulla^@204~           Return type
        End Fu~dulla^@204~ nd Class
    
    <System.CodeDom.C~dulla^@204~ atedCodeAttribute("System.Data.Design~dulla^@204~ Generator", "2.0.0.0"),  _
     Syst~dulla^@204~ le(),  _
     System.Xml.Serializati~dulla^@204~ roviderAttribute("GetTypedTableSchema~dulla^@204~ artial Public Class SupplierDataTable~dulla^@204~ erits System.Data.DataTable
        ~dulla^@204~ stem.Collections.IEnumerable
       ~dulla^@204~ ivate columnSupplierID As System.Data~dulla^@204~         
        Private columnSuppl~dulla^@204~ stem.Data.DataColumn
        
     ~dulla^@204~ lumnAddress As System.Data.DataColumn~dulla^@204~        Private columnCity As System.D~dulla^@204~ n
        
        Private columnCo~dulla^@204~ em.Data.DataColumn
        
       ~dulla^@204~ mnPhone As System.Data.DataColumn
  ~dulla^@204~    Private columnFax As System.Data.D~dulla^@204~       
        Private columnPostalA~dulla^@204~ tem.Data.DataColumn
        
      ~dulla^@204~ umnWebsite As System.Data.DataColumn~dulla^@204~       Private columnEmail As System.D~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~ )
            MyBase.New
          ~dulla^@204~ e = "Supplier"
            Me.BeginI~dulla^@204~     Me.InitClass
            Me.EndI~dulla^@204~ End Sub
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ b New(ByVal table As System.Data.Data~dulla^@204~        MyBase.New
            Me.Tab~dulla^@204~ e.TableName
            If (table.Ca~dulla^@204~ > table.DataSet.CaseSensitive) Then
~dulla^@204~    Me.CaseSensitive = table.CaseSensi~dulla^@204~      End If
            If (table.Lo~dulla^@204~  <> table.DataSet.Locale.ToString) Th~dulla^@204~        Me.Locale = table.Locale
    ~dulla^@204~ f
            If (table.Namespace <>~dulla^@204~ t.Namespace) Then
                Me~dulla^@204~ table.Namespace
            End If
~dulla^@204~ e.Prefix = table.Prefix
            ~dulla^@204~ acity = table.MinimumCapacity
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Protect~dulla^@204~ Val info As System.Runtime.Serializat~dulla^@204~ tionInfo, ByVal context As System.Run~dulla^@204~ ation.StreamingContext)
            ~dulla^@204~ fo, context)
            Me.InitVars~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ nly Property SupplierIDColumn() As Sy~dulla^@204~ aColumn
            Get
           ~dulla^@204~ e.columnSupplierID
            End G~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c ReadOnly Property SupplierNameColum~dulla^@204~ .Data.DataColumn
            Get
  ~dulla^@204~  Return Me.columnSupplierName
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public ReadOnly Property Addres~dulla^@204~ System.Data.DataColumn
            G~dulla^@204~        Return Me.columnAddress
     ~dulla^@204~ t
        End Property
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public ReadOnly Property CityC~dulla^@204~ stem.Data.DataColumn
            Get~dulla^@204~      Return Me.columnCity
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public ReadOnly Property CountryCol~dulla^@204~ em.Data.DataColumn
            Get
~dulla^@204~    Return Me.columnCountry
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public ReadOnly Property PhoneColu~dulla^@204~ m.Data.DataColumn
            Get
 ~dulla^@204~   Return Me.columnPhone
            ~dulla^@204~     End Property
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public ReadOnly Property FaxColumn() ~dulla^@204~ a.DataColumn
            Get
      ~dulla^@204~ urn Me.columnFax
            End Get~dulla^@204~  Property
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ ReadOnly Property PostalAddressColumn~dulla^@204~ Data.DataColumn
            Get
   ~dulla^@204~ Return Me.columnPostalAddress
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public ReadOnly Property Websit~dulla^@204~ System.Data.DataColumn
            G~dulla^@204~        Return Me.columnWebsite
     ~dulla^@204~ t
        End Property
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public ReadOnly Property Email~dulla^@204~ ystem.Data.DataColumn
            Ge~dulla^@204~       Return Me.columnEmail
        ~dulla^@204~         End Property
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~      System.ComponentModel.Browsable(~dulla^@204~        Public ReadOnly Property Count~dulla^@204~ 
            Get
                Re~dulla^@204~ Count
            End Get
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ dOnly Property Item(ByVal index As In~dulla^@204~ plierRow
            Get
          ~dulla^@204~ CType(Me.Rows(index),SupplierRow)
  ~dulla^@204~  Get
        End Property
        ~dulla^@204~ ic Event SupplierRowChanging As Suppl~dulla^@204~ ventHandler
        
        Public~dulla^@204~ erRowChanged As SupplierRowChangeEven~dulla^@204~      
        Public Event SupplierR~dulla^@204~  SupplierRowChangeEventHandler
     ~dulla^@204~ Public Event SupplierRowDeleted As Su~dulla^@204~ geEventHandler
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Overloads Sub AddSupplierRow(ByV~dulla^@204~ plierRow)
            Me.Rows.Add(ro~dulla^@204~ nd Sub
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ rloads Function AddSupplierRow(ByVal ~dulla^@204~  String, ByVal SupplierName As String~dulla^@204~ ss As String, ByVal City As String, B~dulla^@204~ As String, ByVal Phone As String, ByV~dulla^@204~ ing, ByVal PostalAddress As String, B~dulla^@204~ As String, ByVal Email As String) As ~dulla^@204~             Dim rowSupplierRow As Sup~dulla^@204~ ype(Me.NewRow,SupplierRow)
         ~dulla^@204~ rRow.ItemArray = New Object() {Suppli~dulla^@204~ rName, Address, City, Country, Phone,~dulla^@204~ ddress, Website, Email}
            ~dulla^@204~ owSupplierRow)
            Return ro~dulla^@204~ 
        End Function
        
        <System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Function FindBySu~dulla^@204~ l SupplierID As String) As SupplierRo~dulla^@204~   Return CType(Me.Rows.Find(New Objec~dulla^@204~ ID}),SupplierRow)
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Overrid~dulla^@204~  GetEnumerator() As System.Collection~dulla^@204~  Implements System.Collections.IEnume~dulla^@204~ erator
            Return Me.Rows.Ge~dulla^@204~         End Function
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Overrides Function Clone()~dulla^@204~ ta.DataTable
            Dim cln As ~dulla^@204~ able = CType(MyBase.Clone,SupplierDat~dulla^@204~         cln.InitVars
            Ret~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Protected Overrides Function CreateIn~dulla^@204~ ystem.Data.DataTable
            Ret~dulla^@204~ ierDataTable
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Friend Sub InitVars~dulla^@204~    Me.columnSupplierID = MyBase.Colum~dulla^@204~ D")
            Me.columnSupplierNam~dulla^@204~ lumns("SupplierName")
            Me~dulla^@204~ s = MyBase.Columns("Address")
      ~dulla^@204~ mnCity = MyBase.Columns("City")
    ~dulla^@204~ lumnCountry = MyBase.Columns("Country~dulla^@204~    Me.columnPhone = MyBase.Columns("P~dulla^@204~        Me.columnFax = MyBase.Columns(~dulla^@204~        Me.columnPostalAddress = MyBas~dulla^@204~ stalAddress")
            Me.columnW~dulla^@204~ se.Columns("Website")
            Me~dulla^@204~ = MyBase.Columns("Email")
        En~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Private Sub~dulla^@204~ 
            Me.columnSupplierID = Ne~dulla^@204~ .DataColumn("SupplierID", GetType(Str~dulla^@204~ , System.Data.MappingType.Element)
 ~dulla^@204~ Base.Columns.Add(Me.columnSupplierID)~dulla^@204~  Me.columnSupplierName = New System.D~dulla^@204~ n("SupplierName", GetType(String), No~dulla^@204~ .Data.MappingType.Element)
         ~dulla^@204~ umns.Add(Me.columnSupplierName)
    ~dulla^@204~ lumnAddress = New System.Data.DataCol~dulla^@204~ , GetType(String), Nothing, System.Da~dulla^@204~ e.Element)
            MyBase.Column~dulla^@204~ mnAddress)
            Me.columnCity~dulla^@204~ .Data.DataColumn("City", GetType(Stri~dulla^@204~  System.Data.MappingType.Element)
  ~dulla^@204~ ase.Columns.Add(Me.columnCity)
     ~dulla^@204~ umnCountry = New System.Data.DataColu~dulla^@204~  GetType(String), Nothing, System.Dat~dulla^@204~ .Element)
            MyBase.Columns~dulla^@204~ nCountry)
            Me.columnPhone~dulla^@204~ .Data.DataColumn("Phone", GetType(Str~dulla^@204~ , System.Data.MappingType.Element)
 ~dulla^@204~ Base.Columns.Add(Me.columnPhone)
   ~dulla^@204~ olumnFax = New System.Data.DataColumn~dulla^@204~ pe(String), Nothing, System.Data.Mapp~dulla^@204~ nt)
            MyBase.Columns.Add(M~dulla^@204~ 
            Me.columnPostalAddress =~dulla^@204~ ata.DataColumn("PostalAddress", GetTy~dulla^@204~ othing, System.Data.MappingType.Eleme~dulla^@204~     MyBase.Columns.Add(Me.columnPosta~dulla^@204~           Me.columnWebsite = New Syst~dulla^@204~ olumn("Website", GetType(String), Not~dulla^@204~ Data.MappingType.Element)
          ~dulla^@204~ mns.Add(Me.columnWebsite)
          ~dulla^@204~ ail = New System.Data.DataColumn("Ema~dulla^@204~ String), Nothing, System.Data.Mapping~dulla^@204~ 
            MyBase.Columns.Add(Me.c~dulla^@204~             Me.Constraints.Add(New Sy~dulla^@204~ queConstraint("Constraint1", New Syst~dulla^@204~ olumn() {Me.columnSupplierID}, true))~dulla^@204~  Me.columnSupplierID.AllowDBNull = fa~dulla^@204~     Me.columnSupplierID.Unique = true~dulla^@204~  Me.columnSupplierID.MaxLength = 20
~dulla^@204~ e.columnSupplierName.AllowDBNull = fa~dulla^@204~     Me.columnSupplierName.MaxLength =~dulla^@204~     Me.columnAddress.MaxLength = 20
~dulla^@204~ e.columnCity.MaxLength = 20
        ~dulla^@204~ Country.MaxLength = 20
            M~dulla^@204~ .MaxLength = 20
            Me.colum~dulla^@204~ h = 20
            Me.columnPostalAd~dulla^@204~ th = 20
            Me.columnWebsite~dulla^@204~ 20
            Me.columnEmail.MaxLen~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic Function NewSupplierRow() As Suppl~dulla^@204~        Return CType(Me.NewRow,Supplie~dulla^@204~   End Function
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ otected Overrides Function NewRowFrom~dulla^@204~  builder As System.Data.DataRowBuilde~dulla^@204~ Data.DataRow
            Return New ~dulla^@204~ uilder)
        End Function
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Protected Overrides Func~dulla^@204~ pe() As System.Type
            Retu~dulla^@204~ pplierRow)
        End Function
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Protected Overrides S~dulla^@204~ ed(ByVal e As System.Data.DataRowChan~dulla^@204~ 
            MyBase.OnRowChanged(e)
~dulla^@204~ f (Not (Me.SupplierRowChangedEvent) I~dulla^@204~ en
                RaiseEvent Suppli~dulla^@204~ Me, New SupplierRowChangeEvent(CType(~dulla^@204~ rRow), e.Action))
            End If~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ errides Sub OnRowChanging(ByVal e As ~dulla^@204~ ataRowChangeEventArgs)
            M~dulla^@204~ anging(e)
            If (Not (Me.Su~dulla^@204~ gingEvent) Is Nothing) Then
        ~dulla^@204~ Event SupplierRowChanging(Me, New Sup~dulla^@204~ eEvent(CType(e.Row,SupplierRow), e.Ac~dulla^@204~        End If
        End Sub
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Protected Overrides Sub~dulla^@204~ (ByVal e As System.Data.DataRowChange~dulla^@204~            MyBase.OnRowDeleted(e)
  ~dulla^@204~ (Not (Me.SupplierRowDeletedEvent) Is ~dulla^@204~ 
                RaiseEvent Supplier~dulla^@204~ , New SupplierRowChangeEvent(CType(e.~dulla^@204~ ow), e.Action))
            End If
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ rides Sub OnRowDeleting(ByVal e As Sy~dulla^@204~ aRowChangeEventArgs)
            MyB~dulla^@204~ ting(e)
            If (Not (Me.Supp~dulla^@204~ ngEvent) Is Nothing) Then
          ~dulla^@204~ ent SupplierRowDeleting(Me, New Suppl~dulla^@204~ vent(CType(e.Row,SupplierRow), e.Acti~dulla^@204~      End If
        End Sub
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Sub RemoveSupplier~dulla^@204~  As SupplierRow)
            Me.Rows~dulla^@204~ 
        End Sub
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Shared Function GetTypedTableS~dulla^@204~ s As System.Xml.Schema.XmlSchemaSet) ~dulla^@204~ .Schema.XmlSchemaComplexType
       ~dulla^@204~  As System.Xml.Schema.XmlSchemaComple~dulla^@204~ ystem.Xml.Schema.XmlSchemaComplexType~dulla^@204~  Dim sequence As System.Xml.Schema.Xm~dulla^@204~ ce = New System.Xml.Schema.XmlSchemaS~dulla^@204~         Dim ds As PurchaseInfoDataSet~dulla^@204~ aseInfoDataSet2
            xs.Add(d~dulla^@204~ rializable)
            Dim any1 As ~dulla^@204~ hema.XmlSchemaAny = New System.Xml.Sc~dulla^@204~ aAny
            any1.Namespace = "h~dulla^@204~ org/2001/XMLSchema"
            any1~dulla^@204~ New Decimal(0)
            any1.MaxO~dulla^@204~ al.MaxValue
            any1.Process~dulla^@204~ stem.Xml.Schema.XmlSchemaContentProce~dulla^@204~           sequence.Items.Add(any1)
 ~dulla^@204~ m any2 As System.Xml.Schema.XmlSchema~dulla^@204~ tem.Xml.Schema.XmlSchemaAny
        ~dulla^@204~ space = "urn:schemas-microsoft-com:xm~dulla^@204~ "
            any2.MinOccurs = New D~dulla^@204~           any2.ProcessContents = Syst~dulla^@204~ .XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
        ~dulla^@204~ bute1 As System.Xml.Schema.XmlSchemaA~dulla^@204~ w System.Xml.Schema.XmlSchemaAttribut~dulla^@204~   attribute1.Name = "namespace"
    ~dulla^@204~ bute1.FixedValue = ds.Namespace
    ~dulla^@204~ Attributes.Add(attribute1)
         ~dulla^@204~ ute2 As System.Xml.Schema.XmlSchemaAt~dulla^@204~  System.Xml.Schema.XmlSchemaAttribute~dulla^@204~  attribute2.Name = "tableTypeName"
 ~dulla^@204~ tribute2.FixedValue = "SupplierDataTa~dulla^@204~      type.Attributes.Add(attribute2)~dulla^@204~ type.Particle = sequence
           ~dulla^@204~ 
        End Function
    End Class~dulla^@204~ ystem.CodeDom.Compiler.GeneratedCodeA~dulla^@204~ tem.Data.Design.TypedDataSetGenerator~dulla^@204~ >  _
    Partial Public Class BlankT~dulla^@204~     Inherits System.Data.DataRow
   ~dulla^@204~   Private tableBlankTable As BlankTab~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Frien~dulla^@204~ al rb As System.Data.DataRowBuilder)~dulla^@204~ MyBase.New(rb)
            Me.tableB~dulla^@204~ Type(Me.Table,BlankTableDataTable)
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  PartNo() As String
            Get~dulla^@204~     Try 
                    Return ~dulla^@204~ ableBlankTable.PartNoColumn),String)~dulla^@204~     Catch e As System.InvalidCastExce~dulla^@204~               Throw New System.Data.S~dulla^@204~ ception("The value for column 'PartNo~dulla^@204~ lankTable' is DBNull.", e)
         ~dulla^@204~ y
            End Get
            S~dulla^@204~        Me(Me.tableBlankTable.PartNoCo~dulla^@204~ 
            End Set
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Pro~dulla^@204~ tion() As String
            Get
  ~dulla^@204~  Try 
                    Return CTy~dulla^@204~ eBlankTable.DescriptionColumn),String~dulla^@204~       Catch e As System.InvalidCastEx~dulla^@204~                 Throw New System.Data~dulla^@204~ Exception("The value for column 'Desc~dulla^@204~ able 'BlankTable' is DBNull.", e)
  ~dulla^@204~  End Try
            End Get
      ~dulla^@204~               Me(Me.tableBlankTable.D~dulla^@204~ umn) = value
            End Set
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ erty ReorderLevel() As Integer
     ~dulla^@204~                Try 
                ~dulla^@204~ ype(Me(Me.tableBlankTable.ReorderLeve~dulla^@204~ ger)
                Catch e As Syst~dulla^@204~ tException
                    Throw~dulla^@204~ ata.StrongTypingException("The value ~dulla^@204~ eorderLevel' in table 'BlankTable' is~dulla^@204~ 
                End Try
          ~dulla^@204~           Set
                Me(Me.~dulla^@204~ le.ReorderLevelColumn) = value
     ~dulla^@204~ t
        End Property
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Property ShelfNo() As S~dulla^@204~       Get
                Try 
    ~dulla^@204~    Return CType(Me(Me.tableBlankTable~dulla^@204~ n),String)
                Catch e A~dulla^@204~ lidCastException
                   ~dulla^@204~ stem.Data.StrongTypingException("The ~dulla^@204~ umn 'ShelfNo' in table 'BlankTable' i~dulla^@204~ )
                End Try
         ~dulla^@204~            Set
                Me(Me~dulla^@204~ ble.ShelfNoColumn) = value
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Function IsPartNoNull() As ~dulla^@204~         Return Me.IsNull(Me.tableBlan~dulla^@204~ Column)
        End Function
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Sub SetPartNoNull~dulla^@204~    Me(Me.tableBlankTable.PartNoColumn~dulla^@204~ nvert.DBNull
        End Sub
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Function IsDescri~dulla^@204~ s Boolean
            Return Me.IsNu~dulla^@204~ ankTable.DescriptionColumn)
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ criptionNull()
            Me(Me.tab~dulla^@204~ DescriptionColumn) = System.Convert.D~dulla^@204~   End Sub
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Function IsReorderLevelNull() As Bool~dulla^@204~     Return Me.IsNull(Me.tableBlankTab~dulla^@204~ elColumn)
        End Function
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Sub SetReorderL~dulla^@204~            Me(Me.tableBlankTable.Reor~dulla^@204~ n) = System.Convert.DBNull
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Fun~dulla^@204~ NoNull() As Boolean
            Retu~dulla^@204~ Me.tableBlankTable.ShelfNoColumn)
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ SetShelfNoNull()
            Me(Me.t~dulla^@204~ e.ShelfNoColumn) = System.Convert.DBN~dulla^@204~ End Sub
    End Class
    
    <Sy~dulla^@204~ Compiler.GeneratedCodeAttribute("Syst~dulla^@204~ n.TypedDataSetGenerator", "2.0.0.0")>~dulla^@204~ ial Public Class CashSalesRow
      ~dulla^@204~ stem.Data.DataRow
        
        ~dulla^@204~ CashSales As CashSalesDataTable
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Friend Sub New(ByVal r~dulla^@204~ ata.DataRowBuilder)
            MyBa~dulla^@204~            Me.tableCashSales = CType(~dulla^@204~ SalesDataTable)
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public Property CashS~dulla^@204~ () As String
            Get
      ~dulla^@204~ urn CType(Me(Me.tableCashSales.CashSa~dulla^@204~ olumn),String)
            End Get
~dulla^@204~ et
                Me(Me.tableCashSa~dulla^@204~ InvoiceNoColumn) = value
           ~dulla^@204~      End Property
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Property _Date() As Date
   ~dulla^@204~ 
                Return CType(Me(Me.t~dulla^@204~ .DateColumn),Date)
            End G~dulla^@204~    Set
                Me(Me.tableCa~dulla^@204~ olumn) = value
            End Set
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ operty TotalAmount() As Decimal
    ~dulla^@204~                 Return CType(Me(Me.ta~dulla^@204~ TotalAmountColumn),Decimal)
        ~dulla^@204~             Set
                Me(M~dulla^@204~ les.TotalAmountColumn) = value
     ~dulla^@204~ t
        End Property
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Property VAT() As Doubl~dulla^@204~   Get
                Return CType(M~dulla^@204~ hSales.VATColumn),Double)
          ~dulla^@204~           Set
                Me(Me.~dulla^@204~ s.VATColumn) = value
            End~dulla^@204~  End Property
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Property GrandTotal() As Decimal~dulla^@204~ Get
                Return CType(Me(~dulla^@204~ ales.GrandTotalColumn),Decimal)
    ~dulla^@204~ et
            Set
                ~dulla^@204~ shSales.GrandTotalColumn) = value
  ~dulla^@204~  Set
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Property TotalInWord~dulla^@204~ 
            Get
                Re~dulla^@204~ (Me.tableCashSales.TotalInWordsColumn~dulla^@204~           End Get
            Set
 ~dulla^@204~   Me(Me.tableCashSales.TotalInWordsCo~dulla^@204~ 
            End Set
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Pro~dulla^@204~ rName() As String
            Get
 ~dulla^@204~   Return CType(Me(Me.tableCashSales.C~dulla^@204~ lumn),String)
            End Get
            Set
                Me(Me.tabl~dulla^@204~ stomerNameColumn) = value
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Property CustomersRow() As C~dulla^@204~             Get
                Retu~dulla^@204~ etParentRow(Me.Table.ParentRelations(~dulla^@204~ _Customers")),CustomersRow)
        ~dulla^@204~             Set
                Me.S~dulla^@204~ alue, Me.Table.ParentRelations("FK_Ca~dulla^@204~ mers"))
            End Set
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ GetSalesInfoRows() As SalesInfoRow()~dulla^@204~ Return CType(MyBase.GetChildRows(Me.T~dulla^@204~ ations("FK_SalesInfo_CashSales")),Sal~dulla^@204~ 
        End Function
    End Class~dulla^@204~ ystem.CodeDom.Compiler.GeneratedCodeA~dulla^@204~ tem.Data.Design.TypedDataSetGenerator~dulla^@204~ >  _
    Partial Public Class Credit~dulla^@204~      Inherits System.Data.DataRow
  ~dulla^@204~    Private tableCreditSales As Credit~dulla^@204~ e
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Fr~dulla^@204~ ByVal rb As System.Data.DataRowBuilde~dulla^@204~    MyBase.New(rb)
            Me.tab~dulla^@204~  = CType(Me.Table,CreditSalesDataTabl~dulla^@204~ nd Sub
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ perty CreditSalesInvoiceNo() As Strin~dulla^@204~   Get
                Return CType(M~dulla^@204~ ditSales.CreditSalesInvoiceNoColumn),~dulla^@204~         End Get
            Set
   ~dulla^@204~ Me(Me.tableCreditSales.CreditSalesInv~dulla^@204~  = value
            End Set
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  _Date() As Date
            Get
  ~dulla^@204~  Return CType(Me(Me.tableCreditSales.~dulla^@204~ ate)
            End Get
          ~dulla^@204~           Me(Me.tableCreditSales.Date~dulla^@204~ ue
            End Set
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public P~dulla^@204~ Amount() As Decimal
            Get~dulla^@204~     Return CType(Me(Me.tableCreditSal~dulla^@204~ tColumn),Decimal)
            End Ge~dulla^@204~   Set
                Me(Me.tableCre~dulla^@204~ lAmountColumn) = value
            E~dulla^@204~    End Property
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Property VAT() As Double
     ~dulla^@204~                Return CType(Me(Me.tab~dulla^@204~ .VATColumn),Double)
            End ~dulla^@204~     Set
                Me(Me.tableC~dulla^@204~ TColumn) = value
            End Set~dulla^@204~  Property
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Property GrandTotal() As Decimal
   ~dulla^@204~ 
                Return CType(Me(Me.t~dulla^@204~ es.GrandTotalColumn),Decimal)
      ~dulla^@204~ 
            Set
                Me~dulla^@204~ itSales.GrandTotalColumn) = value
  ~dulla^@204~  Set
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Property TotalInWord~dulla^@204~ 
            Get
                Tr~dulla^@204~            Return CType(Me(Me.tableCr~dulla^@204~ alInWordsColumn),String)
           ~dulla^@204~ As System.InvalidCastException
     ~dulla^@204~   Throw New System.Data.StrongTypingE~dulla^@204~  value for column 'TotalInWords' in t~dulla^@204~ ales' is DBNull.", e)
              ~dulla^@204~           End Get
            Set
 ~dulla^@204~   Me(Me.tableCreditSales.TotalInWords~dulla^@204~ ue
            End Set
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public P~dulla^@204~ te() As Date
            Get
      ~dulla^@204~ urn CType(Me(Me.tableCreditSales.DueD~dulla^@204~ te)
            End Get
           ~dulla^@204~          Me(Me.tableCreditSales.DueDa~dulla^@204~ alue
            End Set
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ tomerName() As String
            Ge~dulla^@204~       Return CType(Me(Me.tableCreditS~dulla^@204~ NameColumn),String)
            End ~dulla^@204~     Set
                Me(Me.tableC~dulla^@204~ stomerNameColumn) = value
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Property CustomersRow() As C~dulla^@204~             Get
                Retu~dulla^@204~ etParentRow(Me.Table.ParentRelations(~dulla^@204~ es_Customers")),CustomersRow)
      ~dulla^@204~ 
            Set
                Me~dulla^@204~ (value, Me.Table.ParentRelations("FK_~dulla^@204~ ustomers"))
            End Set
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ ion IsTotalInWordsNull() As Boolean
~dulla^@204~ eturn Me.IsNull(Me.tableCreditSales.T~dulla^@204~ lumn)
        End Function
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Sub SetTotalInWords~dulla^@204~        Me(Me.tableCreditSales.TotalIn~dulla^@204~ = System.Convert.DBNull
        End ~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Functi~dulla^@204~ foRows() As SalesInfoRow()
         ~dulla^@204~ pe(MyBase.GetChildRows(Me.Table.Child~dulla^@204~ _SalesInfo_CreditSales")),SalesInfoRo~dulla^@204~  End Function
    End Class
    
 ~dulla^@204~ deDom.Compiler.GeneratedCodeAttribute~dulla^@204~ .Design.TypedDataSetGenerator", "2.0.~dulla^@204~   Partial Public Class CustomersRow
~dulla^@204~ its System.Data.DataRow
        
  ~dulla^@204~  tableCustomers As CustomersDataTable~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Friend Sub New(B~dulla^@204~ stem.Data.DataRowBuilder)
          ~dulla^@204~ rb)
            Me.tableCustomers = ~dulla^@204~ e,CustomersDataTable)
        End Su~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Property~dulla^@204~ () As String
            Get
      ~dulla^@204~ urn CType(Me(Me.tableCustomers.Custom~dulla^@204~ ,String)
            End Get
      ~dulla^@204~               Me(Me.tableCustomers.Cu~dulla^@204~ umn) = value
            End Set
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ erty SubCity() As String
           ~dulla^@204~          Try 
                    Re~dulla^@204~ (Me.tableCustomers.SubCityColumn),Str~dulla^@204~          Catch e As System.InvalidCas~dulla^@204~                    Throw New System.D~dulla^@204~ ingException("The value for column 'S~dulla^@204~ ble 'Customers' is DBNull.", e)
    ~dulla^@204~ nd Try
            End Get
        ~dulla^@204~             Me(Me.tableCustomers.SubC~dulla^@204~ value
            End Set
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ bele() As String
            Get
  ~dulla^@204~  Try 
                    Return CTy~dulla^@204~ eCustomers.KebeleColumn),String)
   ~dulla^@204~ Catch e As System.InvalidCastExceptio~dulla^@204~           Throw New System.Data.Stron~dulla^@204~ ion("The value for column 'Kebele' in~dulla^@204~ mers' is DBNull.", e)
              ~dulla^@204~           End Get
            Set
 ~dulla^@204~   Me(Me.tableCustomers.KebeleColumn) ~dulla^@204~         End Set
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Property ~dulla^@204~ String
            Get
            ~dulla^@204~                  Return CType(Me(Me.t~dulla^@204~ .HouseNoColumn),String)
            ~dulla^@204~ s System.InvalidCastException
      ~dulla^@204~  Throw New System.Data.StrongTypingEx~dulla^@204~ value for column 'HouseNo' in table '~dulla^@204~  DBNull.", e)
                End Try
            End Get
            Set
 ~dulla^@204~   Me(Me.tableCustomers.HouseNoColumn)~dulla^@204~          End Set
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Property~dulla^@204~ ing
            Get
               ~dulla^@204~               Return CType(Me(Me.tabl~dulla^@204~ lColumn),String)
                Cat~dulla^@204~ m.InvalidCastException
             ~dulla^@204~ New System.Data.StrongTypingException~dulla^@204~ or column 'Tel' in table 'Customers' ~dulla^@204~ e)
                End Try
        ~dulla^@204~             Set
                Me(M~dulla^@204~ ers.TelColumn) = value
            E~dulla^@204~    End Property
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Property Fax() As String
     ~dulla^@204~                Try 
                ~dulla^@204~ ype(Me(Me.tableCustomers.FaxColumn),S~dulla^@204~            Catch e As System.InvalidC~dulla^@204~ 
                    Throw New System~dulla^@204~ ypingException("The value for column ~dulla^@204~ e 'Customers' is DBNull.", e)
      ~dulla^@204~  Try
            End Get
          ~dulla^@204~           Me(Me.tableCustomers.FaxCol~dulla^@204~ 
            End Set
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Prop~dulla^@204~ dress() As String
            Get
 ~dulla^@204~   Try 
                    Return CT~dulla^@204~ leCustomers.PostalAddressColumn),Stri~dulla^@204~         Catch e As System.InvalidCast~dulla^@204~                   Throw New System.Da~dulla^@204~ ngException("The value for column 'Po~dulla^@204~ in table 'Customers' is DBNull.", e)~dulla^@204~     End Try
            End Get
   ~dulla^@204~ 
                Me(Me.tableCustomers~dulla^@204~ sColumn) = value
            End Set~dulla^@204~  Property
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Property Email() As String
         ~dulla^@204~            Try 
                    ~dulla^@204~ Me(Me.tableCustomers.EmailColumn),Str~dulla^@204~          Catch e As System.InvalidCas~dulla^@204~                    Throw New System.D~dulla^@204~ ingException("The value for column 'E~dulla^@204~ e 'Customers' is DBNull.", e)
      ~dulla^@204~  Try
            End Get
          ~dulla^@204~           Me(Me.tableCustomers.EmailC~dulla^@204~ e
            End Set
        End P~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Pr~dulla^@204~ erVATRegNo() As String
            G~dulla^@204~        Try 
                    Retu~dulla^@204~ e.tableCustomers.CustomerVATRegNoColu~dulla^@204~                 Catch e As System.Inv~dulla^@204~ tion
                    Throw New S~dulla^@204~ rongTypingException("The value for co~dulla^@204~ rVATRegNo' in table 'Customers' is DB~dulla^@204~                End Try
            E~dulla^@204~        Set
                Me(Me.tab~dulla^@204~ ustomerVATRegNoColumn) = value
     ~dulla^@204~ t
        End Property
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Property CustomerTINNo(~dulla^@204~             Get
                Try ~dulla^@204~          Return CType(Me(Me.tableCust~dulla^@204~ rTINNoColumn),String)
              ~dulla^@204~ System.InvalidCastException
        ~dulla^@204~ hrow New System.Data.StrongTypingExce~dulla^@204~ lue for column 'CustomerTINNo' in tab~dulla^@204~ ' is DBNull.", e)
                En~dulla^@204~       End Get
            Set
     ~dulla^@204~ (Me.tableCustomers.CustomerTINNoColum~dulla^@204~            End Set
        End Prope~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Proper~dulla^@204~ teOfReg() As Date
            Get
 ~dulla^@204~   Try 
                    Return CT~dulla^@204~ leCustomers.CustomerDateOfRegColumn),~dulla^@204~           Catch e As System.InvalidCa~dulla^@204~                     Throw New System.~dulla^@204~ pingException("The value for column '~dulla^@204~ fReg' in table 'Customers' is DBNull.~dulla^@204~           End Try
            End Ge~dulla^@204~   Set
                Me(Me.tableCus~dulla^@204~ erDateOfRegColumn) = value
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Function IsSubCityNull() As~dulla^@204~          Return Me.IsNull(Me.tableCus~dulla^@204~ yColumn)
        End Function
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Sub SetSubCityNu~dulla^@204~      Me(Me.tableCustomers.SubCityColu~dulla^@204~ Convert.DBNull
        End Sub
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Function IsKebe~dulla^@204~ oolean
            Return Me.IsNull(~dulla^@204~ mers.KebeleColumn)
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Sub Se~dulla^@204~ 
            Me(Me.tableCustomers.Ke~dulla^@204~  System.Convert.DBNull
        End S~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Functio~dulla^@204~ ll() As Boolean
            Return M~dulla^@204~ ableCustomers.HouseNoColumn)
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ useNoNull()
            Me(Me.tableC~dulla^@204~ eNoColumn) = System.Convert.DBNull
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  IsTelNull() As Boolean
            ~dulla^@204~ ull(Me.tableCustomers.TelColumn)
   ~dulla^@204~ tion
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ etTelNull()
            Me(Me.tableC~dulla^@204~ olumn) = System.Convert.DBNull
     ~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ axNull() As Boolean
            Retu~dulla^@204~ Me.tableCustomers.FaxColumn)
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ xNull()
            Me(Me.tableCusto~dulla^@204~ n) = System.Convert.DBNull
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Fun~dulla^@204~ lAddressNull() As Boolean
          ~dulla^@204~ sNull(Me.tableCustomers.PostalAddress~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Sub SetPostalAddressNull()
  ~dulla^@204~ Me.tableCustomers.PostalAddressColumn~dulla^@204~ nvert.DBNull
        End Sub
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Function IsEmailN~dulla^@204~ ean
            Return Me.IsNull(Me.~dulla^@204~ s.EmailColumn)
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Sub SetEma~dulla^@204~          Me(Me.tableCustomers.EmailCo~dulla^@204~ m.Convert.DBNull
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Function IsCu~dulla^@204~ oNull() As Boolean
            Retur~dulla^@204~ e.tableCustomers.CustomerVATRegNoColu~dulla^@204~ End Function
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic Sub SetCustomerVATRegNoNull()
   ~dulla^@204~ e.tableCustomers.CustomerVATRegNoColu~dulla^@204~ Convert.DBNull
        End Sub
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Function IsCust~dulla^@204~ () As Boolean
            Return Me.~dulla^@204~ leCustomers.CustomerTINNoColumn)
   ~dulla^@204~ tion
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ etCustomerTINNoNull()
            Me~dulla^@204~ omers.CustomerTINNoColumn) = System.C~dulla^@204~ 
        End Sub
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomerDa~dulla^@204~  As Boolean
            Return Me.Is~dulla^@204~ Customers.CustomerDateOfRegColumn)
 ~dulla^@204~ nction
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~  SetCustomerDateOfRegNull()
        ~dulla^@204~ leCustomers.CustomerDateOfRegColumn) ~dulla^@204~ ert.DBNull
        End Sub
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Function GetCashSal~dulla^@204~ ashSalesRow()
            Return CTy~dulla^@204~ ChildRows(Me.Table.ChildRelations("FK~dulla^@204~ stomers")),CashSalesRow())
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ tCreditSalesRows() As CreditSalesRow(~dulla^@204~   Return CType(MyBase.GetChildRows(Me~dulla^@204~ elations("FK_CreditSales_Customers"))~dulla^@204~ ow())
        End Function
    End ~dulla^@204~     <System.CodeDom.Compiler.Generate~dulla^@204~ e("System.Data.Design.TypedDataSetGen~dulla^@204~ .0.0")>  _
    Partial Public Class ~dulla^@204~      Inherits System.Data.DataRow
  ~dulla^@204~    Private tableOrder As OrderDataTab~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Friend Sub New~dulla^@204~ System.Data.DataRowBuilder)
        ~dulla^@204~ w(rb)
            Me.tableOrder = CT~dulla^@204~ OrderDataTable)
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public Property Order~dulla^@204~ g
            Get
                R~dulla^@204~ e(Me.tableOrder.OrderNoColumn),String~dulla^@204~   End Get
            Set
         ~dulla^@204~ tableOrder.OrderNoColumn) = value
  ~dulla^@204~  Set
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Property PartNo() As~dulla^@204~         Get
                Return C~dulla^@204~ bleOrder.PartNoColumn),String)
     ~dulla^@204~ t
            Set
                M~dulla^@204~ er.PartNoColumn) = value
           ~dulla^@204~      End Property
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public Property Description() As Str~dulla^@204~     Get
                Try 
      ~dulla^@204~  Return CType(Me(Me.tableOrder.Descri~dulla^@204~ String)
                Catch e As S~dulla^@204~ CastException
                    Th~dulla^@204~ m.Data.StrongTypingException("The val~dulla^@204~  'Description' in table 'Order' is DB~dulla^@204~                End Try
            E~dulla^@204~        Set
                Me(Me.tab~dulla^@204~ iptionColumn) = value
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Property RequiredQuantity() As I~dulla^@204~        Get
                Return CT~dulla^@204~ leOrder.RequiredQuantityColumn),Integ~dulla^@204~     End Get
            Set
       ~dulla^@204~ e.tableOrder.RequiredQuantityColumn) ~dulla^@204~         End Set
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Property ~dulla^@204~  As ProductsRow
            Get
   ~dulla^@204~ Return CType(Me.GetParentRow(Me.Table~dulla^@204~ ons("FK_Order_Products")),ProductsRow~dulla^@204~   End Get
            Set
         ~dulla^@204~ ParentRow(value, Me.Table.ParentRelat~dulla^@204~ r_Products"))
            End Set
 ~dulla^@204~ operty
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ ction IsDescriptionNull() As Boolean~dulla^@204~ Return Me.IsNull(Me.tableOrder.Descri~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Sub SetDescriptionNull()~dulla^@204~ Me(Me.tableOrder.DescriptionColumn) =~dulla^@204~ rt.DBNull
        End Sub
    End C~dulla^@204~    <System.CodeDom.Compiler.Generated~dulla^@204~ ("System.Data.Design.TypedDataSetGene~dulla^@204~ 0.0")>  _
    Partial Public Class P~dulla^@204~        Inherits System.Data.DataRow
~dulla^@204~      Private tableProducts As Product~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Friend~dulla^@204~ l rb As System.Data.DataRowBuilder)
~dulla^@204~ yBase.New(rb)
            Me.tablePr~dulla^@204~ e(Me.Table,ProductsDataTable)
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ No() As String
            Get
    ~dulla^@204~ eturn CType(Me(Me.tableProducts.PartN~dulla^@204~ ng)
            End Get
           ~dulla^@204~          Me(Me.tableProducts.PartNoCo~dulla^@204~ 
            End Set
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Pro~dulla^@204~ tion() As String
            Get
  ~dulla^@204~  Return CType(Me(Me.tableProducts.Des~dulla^@204~ n),String)
            End Get
    ~dulla^@204~                 Me(Me.tableProducts.D~dulla^@204~ umn) = value
            End Set
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ erty UnitCost() As Decimal
         ~dulla^@204~            Try 
                    ~dulla^@204~ Me(Me.tableProducts.UnitCostColumn),D~dulla^@204~             Catch e As System.Invalid~dulla^@204~ 
                    Throw New Syste~dulla^@204~ TypingException("The value for column~dulla^@204~ n table 'Products' is DBNull.", e)
 ~dulla^@204~   End Try
            End Get
     ~dulla^@204~                Me(Me.tableProducts.Un~dulla^@204~  = value
            End Set
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  SellingPrice1() As Double
         ~dulla^@204~            Try 
                    ~dulla^@204~ Me(Me.tableProducts.SellingPrice1Colu~dulla^@204~                 Catch e As System.Inv~dulla^@204~ tion
                    Throw New S~dulla^@204~ rongTypingException("The value for co~dulla^@204~ Price1' in table 'Products' is DBNull~dulla^@204~            End Try
            End G~dulla^@204~    Set
                Me(Me.tablePr~dulla^@204~ gPrice1Column) = value
            E~dulla^@204~    End Property
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Property SellingPrice2() As Dou~dulla^@204~     Get
                Try 
      ~dulla^@204~  Return CType(Me(Me.tableProducts.Sel~dulla^@204~ umn),Double)
                Catch e~dulla^@204~ validCastException
                 ~dulla^@204~ System.Data.StrongTypingException("Th~dulla^@204~ olumn 'SellingPrice2' in table 'Produ~dulla^@204~ l.", e)
                End Try
   ~dulla^@204~ Get
            Set
               ~dulla^@204~ roducts.SellingPrice2Column) = value~dulla^@204~ End Set
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Property QtyAtSho~dulla^@204~ er
            Get
                ~dulla^@204~              Return CType(Me(Me.table~dulla^@204~ tShop1Column),Integer)
             ~dulla^@204~  System.InvalidCastException
       ~dulla^@204~ Throw New System.Data.StrongTypingExc~dulla^@204~ alue for column 'QtyAtShop1' in table~dulla^@204~ s DBNull.", e)
                End T~dulla^@204~    End Get
            Set
        ~dulla^@204~ .tableProducts.QtyAtShop1Column) = va~dulla^@204~     End Set
        End Property
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Property QtyA~dulla^@204~ nteger
            Get
            ~dulla^@204~                  Return CType(Me(Me.t~dulla^@204~ QtyAtShop2Column),Integer)
         ~dulla^@204~ e As System.InvalidCastException
   ~dulla^@204~     Throw New System.Data.StrongTypin~dulla^@204~ he value for column 'QtyAtShop2' in t~dulla^@204~ s' is DBNull.", e)
                E~dulla^@204~        End Get
            Set
    ~dulla^@204~ e(Me.tableProducts.QtyAtShop2Column) ~dulla^@204~         End Set
        End Property
        
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public P~dulla^@204~ Store() As Integer
            Get
~dulla^@204~    Try 
                    Return C~dulla^@204~ bleProducts.QtyAtStoreColumn),Integer~dulla^@204~       Catch e As System.InvalidCastEx~dulla^@204~                 Throw New System.Data~dulla^@204~ Exception("The value for column 'QtyA~dulla^@204~ ble 'Products' is DBNull.", e)
     ~dulla^@204~ d Try
            End Get
         ~dulla^@204~            Me(Me.tableProducts.QtyAtS~dulla^@204~  value
            End Set
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ otalQuantity() As Integer
          ~dulla^@204~           Try 
                    R~dulla^@204~ e(Me.tableProducts.TotalQuantityColum~dulla^@204~                 Catch e As System.Inv~dulla^@204~ tion
                    Throw New S~dulla^@204~ rongTypingException("The value for co~dulla^@204~ antity' in table 'Products' is DBNull~dulla^@204~            End Try
            End G~dulla^@204~    Set
                Me(Me.tablePr~dulla^@204~ uantityColumn) = value
            E~dulla^@204~    End Property
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Property ReorderLevel() As Inte~dulla^@204~     Get
                Return CType~dulla^@204~ roducts.ReorderLevelColumn),Integer)~dulla^@204~ End Get
            Set
           ~dulla^@204~ bleProducts.ReorderLevelColumn) = val~dulla^@204~    End Set
        End Property
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public Property Shelf~dulla^@204~ g
            Get
                R~dulla^@204~ e(Me.tableProducts.ShelfNoColumn),Str~dulla^@204~      End Get
            Set
      ~dulla^@204~ Me.tableProducts.ShelfNoColumn) = val~dulla^@204~    End Set
        End Property
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public Property Purch~dulla^@204~ As PurchaseInfoRow
            Get
~dulla^@204~    Return CType(Me.GetParentRow(Me.Ta~dulla^@204~ ations("FK_Products_PurchaseInfo")),P~dulla^@204~ w)
            End Get
            ~dulla^@204~         Me.SetParentRow(value, Me.Tab~dulla^@204~ tions("FK_Products_PurchaseInfo"))
 ~dulla^@204~ d Set
        End Property
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Property PurchaseIn~dulla^@204~ seInfo_Products() As PurchaseInfoRow~dulla^@204~ Get
                Return CType(Me.~dulla^@204~ Me.Table.ParentRelations("PurchaseInf~dulla^@204~ ,PurchaseInfoRow)
            End Ge~dulla^@204~   Set
                Me.SetParentRo~dulla^@204~ able.ParentRelations("PurchaseInfo_Pr~dulla^@204~           End Set
        End Proper~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Functio~dulla^@204~ ull() As Boolean
            Return ~dulla^@204~ tableProducts.UnitCostColumn)
      ~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~ nitCostNull()
            Me(Me.tabl~dulla^@204~ tCostColumn) = System.Convert.DBNull~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ on IsSellingPrice1Null() As Boolean
~dulla^@204~ eturn Me.IsNull(Me.tableProducts.Sell~dulla^@204~ mn)
        End Function
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Sub SetSellingPrice1N~dulla^@204~       Me(Me.tableProducts.SellingPric~dulla^@204~ ystem.Convert.DBNull
        End Sub~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Function ~dulla^@204~ e2Null() As Boolean
            Retu~dulla^@204~ Me.tableProducts.SellingPrice2Column)~dulla^@204~  Function
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Sub SetSellingPrice2Null()
         ~dulla^@204~ eProducts.SellingPrice2Column) = Syst~dulla^@204~ Null
        End Sub
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Function IsQtyAtShop1Null~dulla^@204~ 
            Return Me.IsNull(Me.tab~dulla^@204~ yAtShop1Column)
        End Function~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Sub SetQt~dulla^@204~ )
            Me(Me.tableProducts.Qt~dulla^@204~ n) = System.Convert.DBNull
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Fun~dulla^@204~ Shop2Null() As Boolean
            R~dulla^@204~ ll(Me.tableProducts.QtyAtShop2Column)~dulla^@204~  Function
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Sub SetQtyAtShop2Null()
            ~dulla^@204~ oducts.QtyAtShop2Column) = System.Con~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Function IsQtyAtStoreNull() As ~dulla^@204~         Return Me.IsNull(Me.tableProd~dulla^@204~ reColumn)
        End Function
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Sub SetQtyAtSto~dulla^@204~          Me(Me.tableProducts.QtyAtSto~dulla^@204~ ystem.Convert.DBNull
        End Sub~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Function ~dulla^@204~ tyNull() As Boolean
            Retu~dulla^@204~ Me.tableProducts.TotalQuantityColumn)~dulla^@204~  Function
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Sub SetTotalQuantityNull()
         ~dulla^@204~ eProducts.TotalQuantityColumn) = Syst~dulla^@204~ Null
        End Sub
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Function GetOrderRows() A~dulla^@204~ 
            Return CType(MyBase.GetC~dulla^@204~ able.ChildRelations("FK_Order_Product~dulla^@204~ ())
        End Function
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Function GetSalesInfo~dulla^@204~ esInfoRow()
            Return CType~dulla^@204~ ildRows(Me.Table.ChildRelations("FK_S~dulla^@204~ ucts")),SalesInfoRow())
        End ~dulla^@204~  End Class
    
    <System.CodeDom~dulla^@204~ eratedCodeAttribute("System.Data.Desi~dulla^@204~ etGenerator", "2.0.0.0")>  _
    Par~dulla^@204~ lass PurchaseRow
        Inherits Sy~dulla^@204~ aRow
        
        Private table~dulla^@204~ urchaseDataTable
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Friend Sub New(ByVal rb As System.Dat~dulla^@204~ der)
            MyBase.New(rb)
   ~dulla^@204~ ablePurchase = CType(Me.Table,Purchas~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Property PurchaseInvoiceNo() As~dulla^@204~         Get
                Return C~dulla^@204~ blePurchase.PurchaseInvoiceNoColumn),~dulla^@204~         End Get
            Set
   ~dulla^@204~ Me(Me.tablePurchase.PurchaseInvoiceNo~dulla^@204~ ue
            End Set
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public P~dulla^@204~ fPurchase() As Date
            Get~dulla^@204~     Return CType(Me(Me.tablePurchase.~dulla^@204~ eColumn),Date)
            End Get
~dulla^@204~ et
                Me(Me.tablePurcha~dulla^@204~ haseColumn) = value
            End ~dulla^@204~ End Property
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic Property TotalAmount() As Decimal~dulla^@204~ Get
                Return CType(Me(~dulla^@204~ ase.TotalAmountColumn),Decimal)
    ~dulla^@204~ et
            Set
                ~dulla^@204~ rchase.TotalAmountColumn) = value
  ~dulla^@204~  Set
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Property FrieghtChar~dulla^@204~ al
            Get
                ~dulla^@204~ Me(Me.tablePurchase.FrieghtChargeColumn),Decimal)
            End Get
       ~dulla^@204~              Me(Me.tablePurchase.Frie~dulla^@204~ mn) = value
            End Set
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ rty MiscellaneousCost() As Decimal
 ~dulla^@204~ t
                Return CType(Me(Me~dulla^@204~ e.MiscellaneousCostColumn),Decimal)
~dulla^@204~ nd Get
            Set
            ~dulla^@204~ lePurchase.MiscellaneousCostColumn) =~dulla^@204~        End Set
        End Property~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Property G~dulla^@204~ s Decimal
            Get
         ~dulla^@204~  CType(Me(Me.tablePurchase.GrandTotal~dulla^@204~ al)
            End Get
           ~dulla^@204~          Me(Me.tablePurchase.GrandTot~dulla^@204~ alue
            End Set
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ plierID() As String
            Get~dulla^@204~     Return CType(Me(Me.tablePurchase.~dulla^@204~ umn),String)
            End Get
  ~dulla^@204~ 
                Me(Me.tablePurchase~dulla^@204~ lumn) = value
            End Set
 ~dulla^@204~ operty
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ perty SupplierRow() As SupplierRow
 ~dulla^@204~ t
                Return CType(Me.Ge~dulla^@204~ .Table.ParentRelations("FK_Purchase_S~dulla^@204~ pplierRow)
            End Get
    ~dulla^@204~                 Me.SetParentRow(value~dulla^@204~ rentRelations("FK_Purchase_Supplier")~dulla^@204~   End Set
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Function GetPur~dulla^@204~ () As PurchaseInfoRow()
            ~dulla^@204~ MyBase.GetChildRows(Me.Table.ChildRel~dulla^@204~ rchaseInfo_Purchase")),PurchaseInfoRo~dulla^@204~  End Function
    End Class
    
 ~dulla^@204~ deDom.Compiler.GeneratedCodeAttribute~dulla^@204~ .Design.TypedDataSetGenerator", "2.0.~dulla^@204~   Partial Public Class PurchaseInfoRo~dulla^@204~ herits System.Data.DataRow
        ~dulla^@204~ ate tablePurchaseInfo As PurchaseInfo~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Friend ~dulla^@204~  rb As System.Data.DataRowBuilder)
 ~dulla^@204~ Base.New(rb)
            Me.tablePur~dulla^@204~ Type(Me.Table,PurchaseInfoDataTable)~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ty PartNo() As String
            Ge~dulla^@204~       Return CType(Me(Me.tablePurchas~dulla^@204~ olumn),String)
            End Get
~dulla^@204~ et
                Me(Me.tablePurcha~dulla^@204~ Column) = value
            End Set~dulla^@204~ Property
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ roperty Description() As String
    ~dulla^@204~                 Return CType(Me(Me.ta~dulla^@204~ fo.DescriptionColumn),String)
      ~dulla^@204~ 
            Set
                Me~dulla^@204~ haseInfo.DescriptionColumn) = value
~dulla^@204~ nd Set
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Property Brand() A~dulla^@204~          Get
                Try 
 ~dulla^@204~       Return CType(Me(Me.tablePurchas~dulla^@204~ lumn),String)
                Catch ~dulla^@204~ nvalidCastException
                ~dulla^@204~  System.Data.StrongTypingException("T~dulla^@204~ column 'Brand' in table 'PurchaseInfo~dulla^@204~ , e)
                End Try
      ~dulla^@204~ 
            Set
                Me~dulla^@204~ haseInfo.BrandColumn) = value
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Property Origin() As Str~dulla^@204~     Get
                Try 
      ~dulla^@204~  Return CType(Me(Me.tablePurchaseInfo~dulla^@204~ ),String)
                Catch e As~dulla^@204~ idCastException
                    ~dulla^@204~ tem.Data.StrongTypingException("The v~dulla^@204~ mn 'Origin' in table 'PurchaseInfo' i~dulla^@204~ )
                End Try
         ~dulla^@204~            Set
                Me(Me~dulla^@204~ eInfo.OriginColumn) = value
        ~dulla^@204~         End Property
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Property NetWeight() As St~dulla^@204~      Get
                Try 
     ~dulla^@204~   Return CType(Me(Me.tablePurchaseInf~dulla^@204~ lumn),String)
                Catch ~dulla^@204~ nvalidCastException
                ~dulla^@204~  System.Data.StrongTypingException("T~dulla^@204~ column 'NetWeight' in table 'Purchase~dulla^@204~ ll.", e)
                End Try
  ~dulla^@204~  Get
            Set
              ~dulla^@204~ PurchaseInfo.NetWeightColumn) = value~dulla^@204~  End Set
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Property Quantit~dulla^@204~ r
            Get
                R~dulla^@204~ e(Me.tablePurchaseInfo.QuantityColumn~dulla^@204~            End Get
            Set
~dulla^@204~    Me(Me.tablePurchaseInfo.QuantityCo~dulla^@204~ 
            End Set
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Pro~dulla^@204~  As Decimal
            Get
       ~dulla^@204~ 
                    Return CType(Me~dulla^@204~ haseInfo.PriceColumn),Decimal)
     ~dulla^@204~ tch e As System.InvalidCastException~dulla^@204~         Throw New System.Data.StrongT~dulla^@204~ n("The value for column 'Price' in ta~dulla^@204~ Info' is DBNull.", e)
              ~dulla^@204~           End Get
            Set
 ~dulla^@204~   Me(Me.tablePurchaseInfo.PriceColumn~dulla^@204~           End Set
        End Proper~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public Propert~dulla^@204~  Decimal
            Get
          ~dulla^@204~ CType(Me(Me.tablePurchaseInfo.AmountC~dulla^@204~ l)
            End Get
            ~dulla^@204~         Me(Me.tablePurchaseInfo.Amoun~dulla^@204~ lue
            End Set
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ lierID() As String
            Get
~dulla^@204~    Return CType(Me(Me.tablePurchaseIn~dulla^@204~ Column),String)
            End Get~dulla^@204~ Set
                Me(Me.tablePurch~dulla^@204~ ierIDColumn) = value
            End~dulla^@204~  End Property
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Property InvoiceNo() As String
 ~dulla^@204~ t
                Return CType(Me(Me~dulla^@204~ eInfo.InvoiceNoColumn),String)
     ~dulla^@204~ t
            Set
                M~dulla^@204~ chaseInfo.InvoiceNoColumn) = value
 ~dulla^@204~ d Set
        End Property
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Property PurchaseRo~dulla^@204~ seRow
            Get
             ~dulla^@204~ pe(Me.GetParentRow(Me.Table.ParentRel~dulla^@204~ rchaseInfo_Purchase")),PurchaseRow)
~dulla^@204~ nd Get
            Set
            ~dulla^@204~ entRow(value, Me.Table.ParentRelation~dulla^@204~ eInfo_Purchase"))
            End Se~dulla^@204~ d Property
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Property SupplierRow() As SupplierRo~dulla^@204~   Get
                Return CType(M~dulla^@204~ w(Me.Table.ParentRelations("FK_Purcha~dulla^@204~ er")),SupplierRow)
            End G~dulla^@204~    Set
                Me.SetParentR~dulla^@204~ Table.ParentRelations("FK_PurchaseInf~dulla^@204~ 
            End Set
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Fun~dulla^@204~ Null() As Boolean
            Return~dulla^@204~ .tablePurchaseInfo.BrandColumn)
    ~dulla^@204~ ion
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Sub SetBrandNull()
            Me(~dulla^@204~ aseInfo.BrandColumn) = System.Convert~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Function IsOriginNull() As Boolean~dulla^@204~ Return Me.IsNull(Me.tablePurchaseInfo~dulla^@204~ )
        End Function
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Sub SetOriginNull()
  ~dulla^@204~ Me.tablePurchaseInfo.OriginColumn) = ~dulla^@204~ t.DBNull
        End Sub
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Function IsNetWeightN~dulla^@204~ ean
            Return Me.IsNull(Me.~dulla^@204~ Info.NetWeightColumn)
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Sub~dulla^@204~ Null()
            Me(Me.tablePurcha~dulla^@204~ ghtColumn) = System.Convert.DBNull
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  IsPriceNull() As Boolean
          ~dulla^@204~ sNull(Me.tablePurchaseInfo.PriceColum~dulla^@204~ nd Function
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Sub SetPriceNull()
            Me(~dulla^@204~ aseInfo.PriceColumn) = System.Convert~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Function GetProductsRows() As Produ~dulla^@204~          Return CType(MyBase.GetChild~dulla^@204~ .ChildRelations("FK_Products_Purchase~dulla^@204~ ctsRow())
        End Function
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Function GetPro~dulla^@204~ rchaseInfo_Products() As ProductsRow(~dulla^@204~   Return CType(MyBase.GetChildRows(Me~dulla^@204~ elations("PurchaseInfo_Products")),Pr~dulla^@204~ 
        End Function
    End Class~dulla^@204~ ystem.CodeDom.Compiler.GeneratedCodeA~dulla^@204~ tem.Data.Design.TypedDataSetGenerator~dulla^@204~ >  _
    Partial Public Class SalesI~dulla^@204~    Inherits System.Data.DataRow
    ~dulla^@204~  Private tableSalesInfo As SalesInfoD~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Friend S~dulla^@204~ rb As System.Data.DataRowBuilder)
  ~dulla^@204~ ase.New(rb)
            Me.tableSale~dulla^@204~ (Me.Table,SalesInfoDataTable)
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ No() As String
            Get
    ~dulla^@204~ eturn CType(Me(Me.tableSalesInfo.Part~dulla^@204~ ing)
            End Get
          ~dulla^@204~           Me(Me.tableSalesInfo.PartNo~dulla^@204~ ue
            End Set
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public P~dulla^@204~ iption() As String
            Get
~dulla^@204~    Return CType(Me(Me.tableSalesInfo.~dulla^@204~ lumn),String)
            End Get
 ~dulla^@204~ t
                Me(Me.tableSalesIn~dulla^@204~ nColumn) = value
            End Set~dulla^@204~  Property
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Property Quantity() As Integer
     ~dulla^@204~                Return CType(Me(Me.tab~dulla^@204~ uantityColumn),Integer)
            ~dulla^@204~         Set
                Me(Me.ta~dulla^@204~ QuantityColumn) = value
            ~dulla^@204~     End Property
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Property UnitPrice() As Decima~dulla^@204~   Get
                Return CType(M~dulla^@204~ esInfo.UnitPriceColumn),Decimal)
   ~dulla^@204~ Get
            Set
               ~dulla^@204~ alesInfo.UnitPriceColumn) = value
  ~dulla^@204~  Set
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Property Amount() As~dulla^@204~          Get
                Return ~dulla^@204~ ableSalesInfo.AmountColumn),Decimal)~dulla^@204~ End Get
            Set
           ~dulla^@204~ bleSalesInfo.AmountColumn) = value
 ~dulla^@204~ d Set
        End Property
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Property DateOfSale~dulla^@204~            Get
                Retur~dulla^@204~ .tableSalesInfo.DateOfSaleColumn),Dat~dulla^@204~    End Get
            Set
        ~dulla^@204~ .tableSalesInfo.DateOfSaleColumn) = v~dulla^@204~      End Set
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public Property Cas~dulla^@204~ No() As String
            Get
    ~dulla^@204~ eturn CType(Me(Me.tableSalesInfo.Cash~dulla^@204~ oColumn),String)
            End Get~dulla^@204~  Set
                Me(Me.tableSale~dulla^@204~ esInvoiceNoColumn) = value
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Property CreditSalesInvoice~dulla^@204~ g
            Get
                R~dulla^@204~ e(Me.tableSalesInfo.CreditSalesInvoic~dulla^@204~ ring)
            End Get
         ~dulla^@204~            Me(Me.tableSalesInfo.Credi~dulla^@204~ NoColumn) = value
            End Se~dulla^@204~ d Property
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Property CashSalesRow() As CashSales~dulla^@204~     Get
                Return CType~dulla^@204~ Row(Me.Table.ParentRelations("FK_Sale~dulla^@204~ es")),CashSalesRow)
            End ~dulla^@204~     Set
                Me.SetParent~dulla^@204~ .Table.ParentRelations("FK_SalesInfo_~dulla^@204~ 
            End Set
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Prop~dulla^@204~ lesRow() As CreditSalesRow
         ~dulla^@204~            Return CType(Me.GetParentR~dulla^@204~ arentRelations("FK_SalesInfo_CreditSa~dulla^@204~ SalesRow)
            End Get
     ~dulla^@204~                Me.SetParentRow(value,~dulla^@204~ entRelations("FK_SalesInfo_CreditSale~dulla^@204~      End Set
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public Property Pro~dulla^@204~  ProductsRow
            Get
      ~dulla^@204~ urn CType(Me.GetParentRow(Me.Table.Pa~dulla^@204~ ("FK_SalesInfo_Products")),ProductsRo~dulla^@204~    End Get
            Set
        ~dulla^@204~ tParentRow(value, Me.Table.ParentRela~dulla^@204~ esInfo_Products"))
            End S~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Property StockCardDetailRowParentBy~dulla^@204~ StockCardDetail() As StockCardDetailR~dulla^@204~    Get
                Return CType(~dulla^@204~ ow(Me.Table.ParentRelations("FK_Sales~dulla^@204~ dDetail")),StockCardDetailRow)
     ~dulla^@204~ t
            Set
                M~dulla^@204~ w(value, Me.Table.ParentRelations("FK~dulla^@204~ ockCardDetail"))
            End Set~dulla^@204~  Property
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Property StockCardDetailRowParentByFK~dulla^@204~ ockCardDetail1() As StockCardDetailRo~dulla^@204~   Get
                Return CType(M~dulla^@204~ w(Me.Table.ParentRelations("FK_SalesI~dulla^@204~ Detail1")),StockCardDetailRow)
     ~dulla^@204~ t
            Set
                M~dulla^@204~ w(value, Me.Table.ParentRelations("FK~dulla^@204~ ockCardDetail1"))
            End Se~dulla^@204~ d Property
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Function GetStockCardRows() As Stock~dulla^@204~           Return CType(MyBase.GetChil~dulla^@204~ e.ChildRelations("FK_StockCard_SalesI~dulla^@204~ ardRow())
        End Function
    ~dulla^@204~   
    <System.CodeDom.Compiler.Gene~dulla^@204~ ibute("System.Data.Design.TypedDataSe~dulla^@204~ "2.0.0.0")>  _
    Partial Public Cl~dulla^@204~ Row
        Inherits System.Data.DataRow
        
        Private tableStock~dulla^@204~ CardDataTable
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ end Sub New(ByVal rb As System.Data.D~dulla^@204~ )
            MyBase.New(rb)
      ~dulla^@204~ eStockCard = CType(Me.Table,StockCard~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Property StockCardNo() As String~dulla^@204~  Get
                Return CType(Me~dulla^@204~ kCard.StockCardNoColumn),String)
   ~dulla^@204~ Get
            Set
               ~dulla^@204~ tockCard.StockCardNoColumn) = value
~dulla^@204~ nd Set
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Property PartNo() ~dulla^@204~           Get
                Return~dulla^@204~ tableStockCard.PartNoColumn),String)~dulla^@204~ End Get
            Set
           ~dulla^@204~ bleStockCard.PartNoColumn) = value
 ~dulla^@204~ d Set
        End Property
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Property Descriptio~dulla^@204~ 
            Get
                Re~dulla^@204~ (Me.tableStockCard.DescriptionColumn)~dulla^@204~          End Get
            Set
  ~dulla^@204~  Me(Me.tableStockCard.DescriptionColu~dulla^@204~             End Set
        End Prop~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Prope~dulla^@204~ () As Decimal
            Get
     ~dulla^@204~ turn CType(Me(Me.tableStockCard.CostP~dulla^@204~ ecimal)
            End Get
       ~dulla^@204~              Me(Me.tableStockCard.Cos~dulla^@204~  = value
            End Set
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  SellingPrice() As Decimal
         ~dulla^@204~            Return CType(Me(Me.tableSt~dulla^@204~ ngPriceColumn),Decimal)
            ~dulla^@204~         Set
                Me(Me.ta~dulla^@204~ SellingPriceColumn) = value
        ~dulla^@204~         End Property
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Property SalesInfoRow() As~dulla^@204~ 
            Get
                Re~dulla^@204~ .GetParentRow(Me.Table.ParentRelation~dulla^@204~ rd_SalesInfo")),SalesInfoRow)
      ~dulla^@204~ 
            Set
                Me~dulla^@204~ (value, Me.Table.ParentRelations("FK_~dulla^@204~ esInfo"))
            End Set
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ n GetStockCardDetailRows() As StockCa~dulla^@204~ 
            Return CType(MyBase.Get~dulla^@204~ Table.ChildRelations("FK_StockCardDet~dulla^@204~ ")),StockCardDetailRow())
        En~dulla^@204~    End Class
    
    <System.CodeD~dulla^@204~ eneratedCodeAttribute("System.Data.De~dulla^@204~ aSetGenerator", "2.0.0.0")>  _
    P~dulla^@204~  Class StockCardDetailRow
        In~dulla^@204~ .Data.DataRow
        
        Priv~dulla^@204~ kCardDetail As StockCardDetailDataTab~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Friend Sub New~dulla^@204~ System.Data.DataRowBuilder)
        ~dulla^@204~ w(rb)
            Me.tableStockCardD~dulla^@204~ (Me.Table,StockCardDetailDataTable)
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y SalesInvoiceNo() As String
       ~dulla^@204~              Return CType(Me(Me.table~dulla^@204~ il.SalesInvoiceNoColumn),String)
   ~dulla^@204~ Get
            Set
               ~dulla^@204~ tockCardDetail.SalesInvoiceNoColumn) ~dulla^@204~         End Set
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public Property ~dulla^@204~ As Date
            Get
           ~dulla^@204~ Type(Me(Me.tableStockCardDetail.DateO~dulla^@204~ Date)
            End Get
         ~dulla^@204~            Me(Me.tableStockCardDetail~dulla^@204~ lumn) = value
            End Set
 ~dulla^@204~ operty
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ perty DateRecieved() As Date
       ~dulla^@204~              Try 
                  ~dulla^@204~ e(Me(Me.tableStockCardDetail.DateReci~dulla^@204~ ate)
                Catch e As Syst~dulla^@204~ tException
                    Throw~dulla^@204~ ata.StrongTypingException("The value ~dulla^@204~ ateRecieved' in table 'StockCardDetai~dulla^@204~ ", e)
                End Try
     ~dulla^@204~ t
            Set
                M~dulla^@204~ ckCardDetail.DateRecievedColumn) = va~dulla^@204~     End Set
        End Property
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Property QtyR~dulla^@204~ Integer
            Get
           ~dulla^@204~                   Return CType(Me(Me.~dulla^@204~ dDetail.QtyRecievedColumn),Integer)
~dulla^@204~    Catch e As System.InvalidCastExcep~dulla^@204~              Throw New System.Data.St~dulla^@204~ eption("The value for column 'QtyReci~dulla^@204~ e 'StockCardDetail' is DBNull.", e)
~dulla^@204~    End Try
            End Get
    ~dulla^@204~                 Me(Me.tableStockCardD~dulla^@204~ evedColumn) = value
            End ~dulla^@204~ End Property
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic Property QtyIssued() As Integer
 ~dulla^@204~ t
                Try 
            ~dulla^@204~ n CType(Me(Me.tableStockCardDetail.Qt~dulla^@204~ ),Integer)
                Catch e A~dulla^@204~ lidCastException
                   ~dulla^@204~ stem.Data.StrongTypingException("The ~dulla^@204~ umn 'QtyIssued' in table 'StockCardDe~dulla^@204~ ll.", e)
                End Try
  ~dulla^@204~  Get
            Set
              ~dulla^@204~ StockCardDetail.QtyIssuedColumn) = va~dulla^@204~     End Set
        End Property
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Property QtyB~dulla^@204~ nteger
            Get
            ~dulla^@204~                  Return CType(Me(Me.t~dulla^@204~ Detail.QtyBalanceColumn),Integer)
  ~dulla^@204~  Catch e As System.InvalidCastExcepti~dulla^@204~            Throw New System.Data.Stro~dulla^@204~ tion("The value for column 'QtyBalanc~dulla^@204~ StockCardDetail' is DBNull.", e)
   ~dulla^@204~ End Try
            End Get
       ~dulla^@204~              Me(Me.tableStockCardDeta~dulla^@204~ Column) = value
            End Set~dulla^@204~ Property
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ roperty StockCardNo() As String
    ~dulla^@204~                 Return CType(Me(Me.ta~dulla^@204~ etail.StockCardNoColumn),String)
   ~dulla^@204~ Get
            Set
               ~dulla^@204~ tockCardDetail.StockCardNoColumn) = v~dulla^@204~      End Set
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public Property Sto~dulla^@204~ s StockCardRow
            Get
    ~dulla^@204~ eturn CType(Me.GetParentRow(Me.Table.~dulla^@204~ ns("FK_StockCardDetail_StockCard")),S~dulla^@204~ 
            End Get
            Set~dulla^@204~      Me.SetParentRow(value, Me.Table.~dulla^@204~ ns("FK_StockCardDetail_StockCard"))
~dulla^@204~ nd Set
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Function IsDateRec~dulla^@204~ s Boolean
            Return Me.IsNu~dulla^@204~ ockCardDetail.DateRecievedColumn)
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ SetDateRecievedNull()
            Me~dulla^@204~ kCardDetail.DateRecievedColumn) = Sys~dulla^@204~ BNull
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Function IsQtyRecievedNu~dulla^@204~ an
            Return Me.IsNull(Me.t~dulla^@204~ Detail.QtyRecievedColumn)
        En~dulla^@204~        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
      ~dulla^@204~ SetQtyRecievedNull()
            Me(~dulla^@204~ CardDetail.QtyRecievedColumn) = Syste~dulla^@204~ ull
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Function IsQtyIssuedNull()~dulla^@204~             Return Me.IsNull(Me.table~dulla^@204~ il.QtyIssuedColumn)
        End Func~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Sub S~dulla^@204~ ll()
            Me(Me.tableStockCar~dulla^@204~ suedColumn) = System.Convert.DBNull
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ n IsQtyBalanceNull() As Boolean
    ~dulla^@204~ n Me.IsNull(Me.tableStockCardDetail.Q~dulla^@204~ mn)
        End Function
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public Sub SetQtyBalanceNull~dulla^@204~    Me(Me.tableStockCardDetail.QtyBala~dulla^@204~ System.Convert.DBNull
        End Su~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Function~dulla^@204~ RowsByFK_SalesInfo_StockCardDetail() ~dulla^@204~ ow()
            Return CType(MyBase~dulla^@204~ (Me.Table.ChildRelations("FK_SalesInf~dulla^@204~ tail")),SalesInfoRow())
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Public F~dulla^@204~ lesInfoRowsByFK_SalesInfo_StockCardDe~dulla^@204~ lesInfoRow()
            Return CTyp~dulla^@204~ hildRows(Me.Table.ChildRelations("FK_~dulla^@204~ ckCardDetail1")),SalesInfoRow())
   ~dulla^@204~ tion
    End Class
    
    <Syste~dulla^@204~ piler.GeneratedCodeAttribute("System.~dulla^@204~ ypedDataSetGenerator", "2.0.0.0")>  _~dulla^@204~  Public Class SupplierRow
        In~dulla^@204~ .Data.DataRow
        
        Priv~dulla^@204~ lier As SupplierDataTable
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Friend Sub New(ByVal rb As S~dulla^@204~ taRowBuilder)
            MyBase.New~dulla^@204~      Me.tableSupplier = CType(Me.Tabl~dulla^@204~ aTable)
        End Sub
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public Property SupplierID() ~dulla^@204~           Get
                Return~dulla^@204~ tableSupplier.SupplierIDColumn),Strin~dulla^@204~    End Get
            Set
        ~dulla^@204~ .tableSupplier.SupplierIDColumn) = va~dulla^@204~     End Set
        End Property
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Property Supp~dulla^@204~  String
            Get
           ~dulla^@204~ Type(Me(Me.tableSupplier.SupplierName~dulla^@204~ g)
            End Get
            ~dulla^@204~         Me(Me.tableSupplier.SupplierN~dulla^@204~ value
            End Set
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ dress() As String
            Get
 ~dulla^@204~   Try 
                    Return CT~dulla^@204~ leSupplier.AddressColumn),String)
  ~dulla^@204~  Catch e As System.InvalidCastExcepti~dulla^@204~            Throw New System.Data.Stro~dulla^@204~ tion("The value for column 'Address' ~dulla^@204~ plier' is DBNull.", e)
             ~dulla^@204~            End Get
            Set
~dulla^@204~    Me(Me.tableSupplier.AddressColumn)~dulla^@204~          End Set
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Property~dulla^@204~ ring
            Get
              ~dulla^@204~                Return CType(Me(Me.tab~dulla^@204~ tyColumn),String)
                Ca~dulla^@204~ em.InvalidCastException
            ~dulla^@204~  New System.Data.StrongTypingExceptio~dulla^@204~ for column 'City' in table 'Supplier'~dulla^@204~  e)
                End Try
       ~dulla^@204~ 
            Set
                Me(~dulla^@204~ ier.CityColumn) = value
            ~dulla^@204~     End Property
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Property Country() As String
~dulla^@204~ et
                Try 
           ~dulla^@204~ rn CType(Me(Me.tableSupplier.CountryC~dulla^@204~ )
                Catch e As System.~dulla^@204~ ception
                    Throw Ne~dulla^@204~ .StrongTypingException("The value for~dulla^@204~ try' in table 'Supplier' is DBNull.",~dulla^@204~         End Try
            End Get~dulla^@204~ Set
                Me(Me.tableSuppl~dulla^@204~ lumn) = value
            End Set
 ~dulla^@204~ operty
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ perty Phone() As String
            ~dulla^@204~         Try 
                    Ret~dulla^@204~ Me.tableSupplier.PhoneColumn),String)~dulla^@204~      Catch e As System.InvalidCastExc~dulla^@204~                Throw New System.Data.~dulla^@204~ xception("The value for column 'Phone~dulla^@204~ upplier' is DBNull.", e)
           ~dulla^@204~ 
            End Get
            Set~dulla^@204~      Me(Me.tableSupplier.PhoneColumn)~dulla^@204~          End Set
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Property~dulla^@204~ ing
            Get
               ~dulla^@204~               Return CType(Me(Me.tabl~dulla^@204~ Column),String)
                Catc~dulla^@204~ .InvalidCastException
              ~dulla^@204~ ew System.Data.StrongTypingException(~dulla^@204~ r column 'Fax' in table 'Supplier' is~dulla^@204~ 
                End Try
          ~dulla^@204~           Set
                Me(Me.~dulla^@204~ .FaxColumn) = value
            End ~dulla^@204~ End Property
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic Property PostalAddress() As String~dulla^@204~  Get
                Try 
         ~dulla^@204~ turn CType(Me(Me.tableSupplier.Postal~dulla^@204~ ),String)
                Catch e As~dulla^@204~ idCastException
                    ~dulla^@204~ tem.Data.StrongTypingException("The v~dulla^@204~ mn 'PostalAddress' in table 'Supplier~dulla^@204~ , e)
                End Try
      ~dulla^@204~ 
            Set
                Me~dulla^@204~ lier.PostalAddressColumn) = value
  ~dulla^@204~  Set
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Property Website() A~dulla^@204~          Get
                Try 
 ~dulla^@204~       Return CType(Me(Me.tableSupplie~dulla^@204~ mn),String)
                Catch e ~dulla^@204~ alidCastException
                  ~dulla^@204~ ystem.Data.StrongTypingException("The~dulla^@204~ lumn 'Website' in table 'Supplier' is~dulla^@204~ 
                End Try
          ~dulla^@204~           Set
                Me(Me.~dulla^@204~ .WebsiteColumn) = value
            ~dulla^@204~     End Property
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Property Email() As String
  ~dulla^@204~ 
                Try 
             ~dulla^@204~  CType(Me(Me.tableSupplier.EmailColum~dulla^@204~                Catch e As System.Inva~dulla^@204~ ion
                    Throw New Sy~dulla^@204~ ongTypingException("The value for col~dulla^@204~ n table 'Supplier' is DBNull.", e)
 ~dulla^@204~   End Try
            End Get
     ~dulla^@204~                Me(Me.tableSupplier.Em~dulla^@204~ value
            End Set
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ AddressNull() As Boolean
           ~dulla^@204~ Null(Me.tableSupplier.AddressColumn)~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ ub SetAddressNull()
            Me(M~dulla^@204~ er.AddressColumn) = System.Convert.DB~dulla^@204~  End Sub
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ unction IsCityNull() As Boolean
    ~dulla^@204~ n Me.IsNull(Me.tableSupplier.CityColumn)
        End Function
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Sub SetCityNull()
       ~dulla^@204~ bleSupplier.CityColumn) = System.Conv~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Function IsCountryNull() As Bool~dulla^@204~     Return Me.IsNull(Me.tableSupplier~dulla^@204~ n)
        End Function
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public Sub SetCountryNull()
~dulla^@204~ e(Me.tableSupplier.CountryColumn) = S~dulla^@204~ .DBNull
        End Sub
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public Function IsPhoneNull()~dulla^@204~             Return Me.IsNull(Me.table~dulla^@204~ eColumn)
        End Function
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Sub SetPhoneNull~dulla^@204~    Me(Me.tableSupplier.PhoneColumn) =~dulla^@204~ rt.DBNull
        End Sub
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Function IsFaxNull()~dulla^@204~             Return Me.IsNull(Me.table~dulla^@204~ olumn)
        End Function
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Public Sub SetFaxNull()
~dulla^@204~ e(Me.tableSupplier.FaxColumn) = Syste~dulla^@204~ ull
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Function IsPostalAddressNu~dulla^@204~ an
            Return Me.IsNull(Me.t~dulla^@204~ PostalAddressColumn)
        End Fun~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Sub ~dulla^@204~ essNull()
            Me(Me.tableSup~dulla^@204~ ddressColumn) = System.Convert.DBNull~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ ion IsWebsiteNull() As Boolean
     ~dulla^@204~  Me.IsNull(Me.tableSupplier.WebsiteCo~dulla^@204~   End Function
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Sub SetWebsiteNull()
          ~dulla^@204~ Supplier.WebsiteColumn) = System.Conv~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Function IsEmailNull() As Boolea~dulla^@204~   Return Me.IsNull(Me.tableSupplier.E~dulla^@204~         End Function
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Sub SetEmailNull()
      ~dulla^@204~ ableSupplier.EmailColumn) = System.Co~dulla^@204~ 
        End Sub
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Function GetPurchaseRows() As ~dulla^@204~ 
            Return CType(MyBase.Get~dulla^@204~ Table.ChildRelations("FK_Purchase_Sup~dulla^@204~ haseRow())
        End Function
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public Function GetPu~dulla^@204~ s() As PurchaseInfoRow()
           ~dulla^@204~ (MyBase.GetChildRows(Me.Table.ChildRe~dulla^@204~ urchaseInfo_Supplier")),PurchaseInfoR~dulla^@204~   End Function
    End Class
    
~dulla^@204~ odeDom.Compiler.GeneratedCodeAttribut~dulla^@204~ a.Design.TypedDataSetGenerator", "2.0~dulla^@204~    Public Class BlankTableRowChangeEv~dulla^@204~ Inherits System.EventArgs
        
~dulla^@204~ te eventRow As BlankTableRow
       ~dulla^@204~ ivate eventAction As System.Data.Data~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~  row As BlankTableRow, ByVal action A~dulla^@204~ .DataRowAction)
            MyBase.N~dulla^@204~    Me.eventRow = row
            Me.~dulla^@204~  action
        End Sub
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public ReadOnly Property Row(~dulla^@204~ leRow
            Get
             ~dulla^@204~ eventRow
            End Get
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  Property Action() As System.Data.Dat~dulla^@204~            Get
                Retur~dulla^@204~ ion
            End Get
        End~dulla^@204~   End Class
    
    <System.CodeDo~dulla^@204~ neratedCodeAttribute("System.Data.Des~dulla^@204~ SetGenerator", "2.0.0.0")>  _
    Pu~dulla^@204~ shSalesRowChangeEvent
        Inheri~dulla^@204~ ntArgs
        
        Private eve~dulla^@204~ SalesRow
        
        Private e~dulla^@204~  System.Data.DataRowAction
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Sub New(ByVal row As~dulla^@204~ , ByVal action As System.Data.DataRow~dulla^@204~         MyBase.New
            Me.ev~dulla^@204~ 
            Me.eventAction = action~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ly Property Row() As CashSalesRow
  ~dulla^@204~ 
                Return Me.eventRow~dulla^@204~ End Get
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public ReadOnly Property~dulla^@204~ System.Data.DataRowAction
          ~dulla^@204~           Return Me.eventAction
    ~dulla^@204~ et
        End Property
    End Cla~dulla^@204~  <System.CodeDom.Compiler.GeneratedCo~dulla^@204~ System.Data.Design.TypedDataSetGenera~dulla^@204~ 0")>  _
    Public Class CreditSales~dulla^@204~ t
        Inherits System.EventArgs~dulla^@204~       Private eventRow As CreditSales~dulla^@204~ 
        Private eventAction As Syst~dulla^@204~ owAction
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ ub New(ByVal row As CreditSalesRow, B~dulla^@204~ s System.Data.DataRowAction)
       ~dulla^@204~ ew
            Me.eventRow = row
  ~dulla^@204~ eventAction = action
        End Sub~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public ReadOnly ~dulla^@204~ ) As CreditSalesRow
            Get~dulla^@204~     Return Me.eventRow
            E~dulla^@204~    End Property
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic ReadOnly Property Action() As S~dulla^@204~ taRowAction
            Get
       ~dulla^@204~ rn Me.eventAction
            End Ge~dulla^@204~ d Property
    End Class
    
    ~dulla^@204~ om.Compiler.GeneratedCodeAttribute("S~dulla^@204~ sign.TypedDataSetGenerator", "2.0.0.0~dulla^@204~ ublic Class CustomersRowChangeEvent
~dulla^@204~ its System.EventArgs
        
     ~dulla^@204~ entRow As CustomersRow
        
   ~dulla^@204~ eventAction As System.Data.DataRowAct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Sub Ne~dulla^@204~ s CustomersRow, ByVal action As Syste~dulla^@204~ wAction)
            MyBase.New
   ~dulla^@204~ ventRow = row
            Me.eventAc~dulla^@204~ 
        End Sub
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public ReadOnly Property Row() As Cu~dulla^@204~            Get
                Retur~dulla^@204~ 
            End Get
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Rea~dulla^@204~ y Action() As System.Data.DataRowActi~dulla^@204~    Get
                Return Me.eve~dulla^@204~          End Get
        End Propert~dulla^@204~ ass
    
    <System.CodeDom.Compil~dulla^@204~ odeAttribute("System.Data.Design.Type~dulla^@204~ ator", "2.0.0.0")>  _
    Public Cla~dulla^@204~ angeEvent
        Inherits System.Ev~dulla^@204~     
        Private eventRow As Ord~dulla^@204~   
        Private eventAction As Sy~dulla^@204~ aRowAction
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Sub New(ByVal row As OrderRow, ByVal~dulla^@204~ stem.Data.DataRowAction)
           ~dulla^@204~             Me.eventRow = row
      ~dulla^@204~ tAction = action
        End Sub
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadO~dulla^@204~ Row() As OrderRow
            Get
 ~dulla^@204~   Return Me.eventRow
            End~dulla^@204~  End Property
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic ReadOnly Property Action() As Sys~dulla^@204~ RowAction
            Get
         ~dulla^@204~  Me.eventAction
            End Get~dulla^@204~ Property
    End Class
    
    <S~dulla^@204~ .Compiler.GeneratedCodeAttribute("Sys~dulla^@204~ gn.TypedDataSetGenerator", "2.0.0.0")~dulla^@204~ lic Class ProductsRowChangeEvent
   ~dulla^@204~  System.EventArgs
        
        ~dulla^@204~ Row As ProductsRow
        
       ~dulla^@204~ tAction As System.Data.DataRowAction~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Sub New(By~dulla^@204~ oductsRow, ByVal action As System.Dat~dulla^@204~ on)
            MyBase.New
        ~dulla^@204~ ow = row
            Me.eventAction ~dulla^@204~      End Sub
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic ReadOnly Property Row() As Product~dulla^@204~      Get
                Return Me.e~dulla^@204~         End Get
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Public ReadOnly ~dulla^@204~ on() As System.Data.DataRowAction
  ~dulla^@204~ 
                Return Me.eventActi~dulla^@204~    End Get
        End Property
   ~dulla^@204~    
    <System.CodeDom.Compiler.Gen~dulla^@204~ ribute("System.Data.Design.TypedDataS~dulla^@204~  "2.0.0.0")>  _
    Public Class Pur~dulla^@204~ eEvent
        Inherits System.Event~dulla^@204~  
        Private eventRow As Purcha~dulla^@204~   
        Private eventAction As Sy~dulla^@204~ aRowAction
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Sub New(ByVal row As PurchaseRow, By~dulla^@204~  System.Data.DataRowAction)
        ~dulla^@204~ w
            Me.eventRow = row
   ~dulla^@204~ ventAction = action
        End Sub~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public ReadOnly P~dulla^@204~  As PurchaseRow
            Get
   ~dulla^@204~ Return Me.eventRow
            End G~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c ReadOnly Property Action() As Syste~dulla^@204~ wAction
            Get
           ~dulla^@204~ e.eventAction
            End Get
 ~dulla^@204~ operty
    End Class
    
    <Sys~dulla^@204~ ompiler.GeneratedCodeAttribute("Syste~dulla^@204~ .TypedDataSetGenerator", "2.0.0.0")> ~dulla^@204~ c Class PurchaseInfoRowChangeEvent
 ~dulla^@204~ ts System.EventArgs
        
      ~dulla^@204~ ntRow As PurchaseInfoRow
        
 ~dulla^@204~ e eventAction As System.Data.DataRowA~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Sub ~dulla^@204~  As PurchaseInfoRow, ByVal action As ~dulla^@204~ ataRowAction)
            MyBase.New~dulla^@204~  Me.eventRow = row
            Me.ev~dulla^@204~ ction
        End Sub
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public ReadOnly Property Row() ~dulla^@204~ foRow
            Get
             ~dulla^@204~ eventRow
            End Get
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  Property Action() As System.Data.Dat~dulla^@204~            Get
                Retur~dulla^@204~ ion
            End Get
        End~dulla^@204~   End Class
    
    <System.CodeDo~dulla^@204~ neratedCodeAttribute("System.Data.Des~dulla^@204~ SetGenerator", "2.0.0.0")>  _
    Pu~dulla^@204~ lesInfoRowChangeEvent
        Inheri~dulla^@204~ ntArgs
        
        Private eve~dulla^@204~ sInfoRow
        
        Private e~dulla^@204~  System.Data.DataRowAction
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public Sub New(ByVal row As~dulla^@204~ , ByVal action As System.Data.DataRow~dulla^@204~         MyBase.New
            Me.ev~dulla^@204~ 
            Me.eventAction = action~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ly Property Row() As SalesInfoRow
  ~dulla^@204~ 
                Return Me.eventRow~dulla^@204~ End Get
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public ReadOnly Property~dulla^@204~ System.Data.DataRowAction
          ~dulla^@204~           Return Me.eventAction
    ~dulla^@204~ et
        End Property
    End Cla~dulla^@204~  <System.CodeDom.Compiler.GeneratedCo~dulla^@204~ System.Data.Design.TypedDataSetGenera~dulla^@204~ 0")>  _
    Public Class StockCardRo~dulla^@204~ 
        Inherits System.EventArgs
 ~dulla^@204~     Private eventRow As StockCardRow~dulla^@204~       Private eventAction As System.D~dulla^@204~ tion
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ ew(ByVal row As StockCardRow, ByVal a~dulla^@204~ em.Data.DataRowAction)
            M~dulla^@204~           Me.eventRow = row
        ~dulla^@204~ ction = action
        End Sub
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public ReadOnly Proper~dulla^@204~ tockCardRow
            Get
       ~dulla^@204~ rn Me.eventRow
            End Get
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ adOnly Property Action() As System.Da~dulla^@204~ ion
            Get
               ~dulla^@204~ entAction
            End Get
     ~dulla^@204~ ty
    End Class
    
    <System.~dulla^@204~ ler.GeneratedCodeAttribute("System.Da~dulla^@204~ edDataSetGenerator", "2.0.0.0")>  _
~dulla^@204~ ass StockCardDetailRowChangeEvent
  ~dulla^@204~ s System.EventArgs
        
       ~dulla^@204~ tRow As StockCardDetailRow
        ~dulla^@204~ ate eventAction As System.Data.DataRo~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Public Su~dulla^@204~ ow As StockCardDetailRow, ByVal actio~dulla^@204~ ata.DataRowAction)
            MyBas~dulla^@204~       Me.eventRow = row
            ~dulla^@204~ n = action
        End Sub
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public ReadOnly Property R~dulla^@204~ CardDetailRow
            Get
     ~dulla^@204~ turn Me.eventRow
            End Get~dulla^@204~  Property
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ ReadOnly Property Action() As System.~dulla^@204~ ction
            Get
             ~dulla^@204~ eventAction
            End Get
   ~dulla^@204~ erty
    End Class
    
    <Syste~dulla^@204~ piler.GeneratedCodeAttribute("System.~dulla^@204~ ypedDataSetGenerator", "2.0.0.0")>  _~dulla^@204~ Class SupplierRowChangeEvent
       ~dulla^@204~ tem.EventArgs
        
        Priv~dulla^@204~ As SupplierRow
        
        Pri~dulla^@204~ ion As System.Data.DataRowAction
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public Sub New(ByVal ~dulla^@204~ erRow, ByVal action As System.Data.Da~dulla^@204~ 
            MyBase.New
            ~dulla^@204~  row
            Me.eventAction = ac~dulla^@204~  End Sub
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ eadOnly Property Row() As SupplierRow~dulla^@204~  Get
                Return Me.event~dulla^@204~     End Get
        End Property
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public ReadOnly Prop~dulla^@204~  As System.Data.DataRowAction
      ~dulla^@204~               Return Me.eventAction
~dulla^@204~ nd Get
        End Property
    End~dulla^@204~ lass

Namespace PurchaseInfoDataSet~dulla^@204~ s
    
    <System.CodeDom.Compiler~dulla^@204~ eAttribute("System.Data.Design.TypedD~dulla^@204~ or", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code~dulla^@204~ System.ComponentModel.ToolboxItem(tru~dulla^@204~ System.ComponentModel.DataObjectAttri~dulla^@204~ _
     System.ComponentModel.Designe~dulla^@204~ icrosoft.VSDesigner.DataSource.Design~dulla^@204~ Designer, Microsoft.VSDesigner"& _ 
~dulla^@204~ rsion=8.0.0.0, Culture=neutral, Publi~dulla^@204~ f5f7f11d50a3a"),  _
     System.Comp~dulla^@204~ sign.HelpKeywordAttribute("vs.data.Ta~dulla^@204~   _
    Partial Public Class BlankTa~dulla^@204~ er
        Inherits System.Component~dulla^@204~ nt
        
        Private WithEve~dulla^@204~ As System.Data.SqlClient.SqlDataAdapt~dulla^@204~ 
        Private _connection As Syste~dulla^@204~ ent.SqlConnection
        
        ~dulla^@204~ andCollection() As System.Data.SqlCli~dulla^@204~ d
        
        Private _clearBe~dulla^@204~ oolean
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~  New()
            MyBase.New
     ~dulla^@204~ arBeforeFill = true
        End Sub~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Private ReadOnly ~dulla^@204~ ter() As System.Data.SqlClient.SqlDat~dulla^@204~          Get
                If (Me.~dulla^@204~ othing) Then
                    Me.~dulla^@204~                 End If
             ~dulla^@204~ _adapter
            End Get
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Fr~dulla^@204~  Connection() As System.Data.SqlClien~dulla^@204~ on
            Get
                ~dulla^@204~ ction Is Nothing) Then
             ~dulla^@204~ tConnection
                End If
~dulla^@204~    Return Me._connection
           ~dulla^@204~          Set
                Me._con~dulla^@204~ ue
                If (Not (Me.Adapt~dulla^@204~ and) Is Nothing) Then
              ~dulla^@204~ ter.InsertCommand.Connection = value~dulla^@204~     End If
                If (Not (~dulla^@204~ leteCommand) Is Nothing) Then
      ~dulla^@204~  Me.Adapter.DeleteCommand.Connection ~dulla^@204~             End If
                I~dulla^@204~ apter.UpdateCommand) Is Nothing) Then~dulla^@204~          Me.Adapter.UpdateCommand.Con~dulla^@204~ ue
                End If
         ~dulla^@204~ As Integer = 0
                Do Wh~dulla^@204~ ommandCollection.Length)
           ~dulla^@204~ Not (Me.CommandCollection(i)) Is Noth~dulla^@204~                       CType(Me.Comman~dulla^@204~ ),System.Data.SqlClient.SqlCommand).C~dulla^@204~ alue
                    End If
   ~dulla^@204~     i = (i + 1)
                Loop~dulla^@204~  End Set
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Protected ReadOnly Prop~dulla^@204~ ollection() As System.Data.SqlClient.~dulla^@204~ 
            Get
                If ~dulla^@204~ ollection Is Nothing) Then
         ~dulla^@204~ .InitCommandCollection
             ~dulla^@204~               Return Me._commandColle~dulla^@204~       End Get
        End Property
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Property Cl~dulla^@204~ () As Boolean
            Get
     ~dulla^@204~ turn Me._clearBeforeFill
           ~dulla^@204~          Set
                Me._cle~dulla^@204~ = value
            End Set
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pri~dulla^@204~ Adapter()
            Me._adapter = ~dulla^@204~ ta.SqlClient.SqlDataAdapter
        ~dulla^@204~ Mapping As System.Data.Common.DataTab~dulla^@204~ ew System.Data.Common.DataTableMappin~dulla^@204~   tableMapping.SourceTable = "Table"~dulla^@204~ tableMapping.DataSetTable = "BlankTab~dulla^@204~     tableMapping.ColumnMappings.Add("~dulla^@204~ tNo")
            tableMapping.Colum~dulla^@204~ ("Description", "Description")
     ~dulla^@204~ apping.ColumnMappings.Add("ReorderLev~dulla^@204~ Level")
            tableMapping.Col~dulla^@204~ dd("ShelfNo", "ShelfNo")
           ~dulla^@204~ TableMappings.Add(tableMapping)
    ~dulla^@204~ dapter.InsertCommand = New System.Dat~dulla^@204~ qlCommand
            Me._adapter.In~dulla^@204~ onnection = Me.Connection
          ~dulla^@204~ .InsertCommand.CommandText = "INSERT ~dulla^@204~ lankTable] ([PartNo], [Description], ~dulla^@204~ ], [ShelfNo"& _ 
                "])~dulla^@204~ tNo, @Description, @ReorderLevel, @Sh~dulla^@204~         Me._adapter.InsertCommand.Com~dulla^@204~ stem.Data.CommandType.Text
         ~dulla^@204~ r.InsertCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@PartNo", System~dulla^@204~ pe.NVarChar, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "PartNo", System.Data.DataR~dulla^@204~ rent, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.InsertCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Descrip~dulla^@204~ .Data.SqlDbType.[Char], 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "Description", S~dulla^@204~ taRowVersion.Current, false, Nothing,~dulla^@204~ 
            Me._adapter.InsertComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ derLevel", System.Data.SqlDbType.Int,~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "R~dulla^@204~  System.Data.DataRowVersion.Current, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@ShelfNo", System.Data.SqlD~dulla^@204~ r, 0, System.Data.ParameterDirection.~dulla^@204~ "ShelfNo", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
        En~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Private Sub~dulla^@204~ on()
            Me._connection = Ne~dulla^@204~ .SqlClient.SqlConnection
           ~dulla^@204~ on.ConnectionString = Global.Inventor~dulla^@204~ m.My.MySettings.Default.PurchaseInfoC~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ vate Sub InitCommandCollection()
   ~dulla^@204~ commandCollection = New System.Data.S~dulla^@204~ ommand(0) {}
            Me._command~dulla^@204~  = New System.Data.SqlClient.SqlComma~dulla^@204~    Me._commandCollection(0).Connectio~dulla^@204~ tion
            Me._commandCollecti~dulla^@204~ Text = "SELECT PartNo, Description, R~dulla^@204~ ShelfNo FROM dbo.BlankTable"
       ~dulla^@204~ andCollection(0).CommandType = System~dulla^@204~ Type.Text
        End Sub
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
         System.ComponentModel.Desi~dulla^@204~ dAttribute("vs.data.TableAdapter"),  ~dulla^@204~ ystem.ComponentModel.DataObjectMethod~dulla^@204~ tem.ComponentModel.DataObjectMethodTy~dulla^@204~ )>  _
        Public Overloads Overr~dulla^@204~ on Fill(ByVal dataTable As PurchaseIn~dulla^@204~ ankTableDataTable) As Integer
      ~dulla^@204~ ter.SelectCommand = Me.CommandCollect~dulla^@204~        If (Me.ClearBeforeFill = true)~dulla^@204~           dataTable.Clear
          ~dulla^@204~          Dim returnValue As Integer =~dulla^@204~ ill(dataTable)
            Return re~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~    System.ComponentModel.Design.HelpK~dulla^@204~ te("vs.data.TableAdapter"),  _
     ~dulla^@204~ mponentModel.DataObjectMethodAttribut~dulla^@204~ onentModel.DataObjectMethodType.[Sele~dulla^@204~ _
        Public Overloads Overridab~dulla^@204~ etData() As PurchaseInfoDataSet2.Blan~dulla^@204~ le
            Me.Adapter.SelectComm~dulla^@204~ andCollection(0)
            Dim dat~dulla^@204~ chaseInfoDataSet2.BlankTableDataTable~dulla^@204~ seInfoDataSet2.BlankTableDataTable
 ~dulla^@204~ .Adapter.Fill(dataTable)
           ~dulla^@204~ able
        End Function
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
         System.ComponentModel.Desi~dulla^@204~ dAttribute("vs.data.TableAdapter")>  ~dulla^@204~ blic Overloads Overridable Function U~dulla^@204~ ataTable As PurchaseInfoDataSet2.Blan~dulla^@204~ le) As Integer
            Return Me.Adapter.Update(dataTable)
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute(),  _
         System.Co~dulla^@204~ Design.HelpKeywordAttribute("vs.data.~dulla^@204~ )>  _
        Public Overloads Overr~dulla^@204~ on Update(ByVal dataSet As PurchaseIn~dulla^@204~ s Integer
            Return Me.Adap~dulla^@204~ taSet, "BlankTable")
        End Fun~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute(),  _
         System.Com~dulla^@204~ esign.HelpKeywordAttribute("vs.data.T~dulla^@204~ >  _
        Public Overloads Overri~dulla^@204~ n Update(ByVal dataRow As System.Data~dulla^@204~ Integer
            Return Me.Adapte~dulla^@204~ System.Data.DataRow() {dataRow})
   ~dulla^@204~ tion
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute(),  _
       ~dulla^@204~ onentModel.Design.HelpKeywordAttribut~dulla^@204~ bleAdapter")>  _
        Public Over~dulla^@204~ able Function Update(ByVal dataRows()~dulla^@204~ ta.DataRow) As Integer
            R~dulla^@204~ ter.Update(dataRows)
        End Fun~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute(),  _
         System.Com~dulla^@204~ esign.HelpKeywordAttribute("vs.data.T~dulla^@204~ ,  _
         System.ComponentModel.~dulla^@204~ hodAttribute(System.ComponentModel.Da~dulla^@204~ dType.Insert, true)>  _
        Publ~dulla^@204~ Overridable Function Insert(ByVal Par~dulla^@204~ , ByVal Description As String, ByVal ~dulla^@204~ As System.Nullable(Of Integer), ByVal~dulla^@204~ tring) As Integer
            If (Pa~dulla^@204~ ng) Then
                Me.Adapter.~dulla^@204~ .Parameters(0).Value = System.DBNull.~dulla^@204~       Else
                Me.Adapte~dulla^@204~ nd.Parameters(0).Value = CType(PartNo~dulla^@204~          End If
            If (Desc~dulla^@204~ thing) Then
                Me.Adapt~dulla^@204~ and.Parameters(1).Value = System.DBNu~dulla^@204~          Else
                Me.Ada~dulla^@204~ mmand.Parameters(1).Value = CType(Des~dulla^@204~ ng)
            End If
            ~dulla^@204~ vel.HasValue = true) Then
          ~dulla^@204~ ter.InsertCommand.Parameters(2).Value~dulla^@204~ derLevel.Value,Integer)
            ~dulla^@204~          Me.Adapter.InsertCommand.Par~dulla^@204~ lue = System.DBNull.Value
          ~dulla^@204~          If (ShelfNo Is Nothing) Then~dulla^@204~      Me.Adapter.InsertCommand.Paramet~dulla^@204~ = System.DBNull.Value
            El~dulla^@204~        Me.Adapter.InsertCommand.Param~dulla^@204~ e = CType(ShelfNo,String)
          ~dulla^@204~          Dim previousConnectionState ~dulla^@204~ a.ConnectionState = Me.Adapter.Insert~dulla^@204~ ction.State
            If ((Me.Adap~dulla^@204~ mand.Connection.State And System.Data~dulla^@204~ ate.Open)  _
                       ~dulla^@204~ ta.ConnectionState.Open) Then
      ~dulla^@204~ Adapter.InsertCommand.Connection.Open~dulla^@204~  End If
            Try 
          ~dulla^@204~ urnValue As Integer = Me.Adapter.Inse~dulla^@204~ cuteNonQuery
                Return ~dulla^@204~             Finally
                ~dulla^@204~ onnectionState = System.Data.Connecti~dulla^@204~ d) Then
                    Me.Adapt~dulla^@204~ and.Connection.Close
               ~dulla^@204~         End Try
        End Function~dulla^@204~ ss
    
    <System.CodeDom.Compile~dulla^@204~ deAttribute("System.Data.Design.Typed~dulla^@204~ tor", "2.0.0.0"),  _
     System.Com~dulla^@204~ esignerCategoryAttribute("code"),  _~dulla^@204~ ComponentModel.ToolboxItem(true),  _~dulla^@204~ ComponentModel.DataObjectAttribute(tr~dulla^@204~  System.ComponentModel.DesignerAttrib~dulla^@204~ t.VSDesigner.DataSource.Design.TableA~dulla^@204~ r, Microsoft.VSDesigner"& _ 
       ~dulla^@204~ .0.0.0, Culture=neutral, PublicKeyTok~dulla^@204~ d50a3a"),  _
     System.ComponentMo~dulla^@204~ lpKeywordAttribute("vs.data.TableAdap~dulla^@204~   Partial Public Class CashSalesTable~dulla^@204~     Inherits System.ComponentModel.Co~dulla^@204~     
        Private WithEvents _ada~dulla^@204~ m.Data.SqlClient.SqlDataAdapter
    ~dulla^@204~  Private _connection As System.Data.S~dulla^@204~ onnection
        
        Private ~dulla^@204~ ction() As System.Data.SqlClient.SqlC~dulla^@204~    
        Private _clearBeforeFill~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~             MyBase.New
            M~dulla^@204~ Fill = true
        End Sub
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Private ReadOnly Property~dulla^@204~  System.Data.SqlClient.SqlDataAdapter~dulla^@204~  Get
                If (Me._adapter~dulla^@204~ Then
                    Me.InitAdap~dulla^@204~         End If
                Retur~dulla^@204~ 
            End Get
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Friend Pro~dulla^@204~ ion() As System.Data.SqlClient.SqlCon~dulla^@204~         Get
                If (Me._~dulla^@204~  Nothing) Then
                    M~dulla^@204~ ion
                End If
        ~dulla^@204~ n Me._connection
            End Get~dulla^@204~  Set
                Me._connection ~dulla^@204~             If (Not (Me.Adapter.Inser~dulla^@204~ Nothing) Then
                    Me~dulla^@204~ rtCommand.Connection = value
       ~dulla^@204~ If
                If (Not (Me.Adapt~dulla^@204~ and) Is Nothing) Then
              ~dulla^@204~ ter.DeleteCommand.Connection = value~dulla^@204~     End If
                If (Not (~dulla^@204~ dateCommand) Is Nothing) Then
      ~dulla^@204~  Me.Adapter.UpdateCommand.Connection ~dulla^@204~             End If
                D~dulla^@204~ er = 0
                Do While (i <~dulla^@204~ llection.Length)
                   ~dulla^@204~ CommandCollection(i)) Is Nothing) The~dulla^@204~               CType(Me.CommandCollect~dulla^@204~ .Data.SqlClient.SqlCommand).Connectio~dulla^@204~                   End If
           ~dulla^@204~ (i + 1)
                Loop
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Protected ReadOnly Property Com~dulla^@204~ n() As System.Data.SqlClient.SqlComma~dulla^@204~      Get
                If (Me._com~dulla^@204~ n Is Nothing) Then
                 ~dulla^@204~ mandCollection
                End I~dulla^@204~       Return Me._commandCollection
 ~dulla^@204~ d Get
        End Property
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Property ClearBefor~dulla^@204~ olean
            Get
             ~dulla^@204~ _clearBeforeFill
            End Get~dulla^@204~  Set
                Me._clearBefore~dulla^@204~ 
            End Set
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Private Sub~dulla^@204~ )
            Me._adapter = New Syst~dulla^@204~ ient.SqlDataAdapter
            Dim ~dulla^@204~ As System.Data.Common.DataTableMappin~dulla^@204~ m.Data.Common.DataTableMapping
     ~dulla^@204~ apping.SourceTable = "Table"
       ~dulla^@204~ ping.DataSetTable = "CashSales"
    ~dulla^@204~ Mapping.ColumnMappings.Add("CashSales~dulla^@204~ CashSalesInvoiceNo")
            tab~dulla^@204~ umnMappings.Add("Date", "Date")
    ~dulla^@204~ Mapping.ColumnMappings.Add("TotalAmou~dulla^@204~ ount")
            tableMapping.Colu~dulla^@204~ d("VAT", "VAT")
            tableMap~dulla^@204~ ppings.Add("GrandTotal", "GrandTotal"~dulla^@204~   tableMapping.ColumnMappings.Add("To~dulla^@204~ "TotalInWords")
            tableMap~dulla^@204~ ppings.Add("CustomerName", "CustomerN~dulla^@204~       Me._adapter.TableMappings.Add(t~dulla^@204~ 
            Me._adapter.DeleteComman~dulla^@204~ m.Data.SqlClient.SqlCommand
        ~dulla^@204~ er.DeleteCommand.Connection = Me.Conn~dulla^@204~        Me._adapter.DeleteCommand.Comm~dulla^@204~ LETE FROM [dbo].[CashSales] WHERE (([~dulla^@204~ iceNo] = @Original_CashSalesI"& _ 
 ~dulla^@204~   "nvoiceNo) AND ([Date] = @Original_Date) AND ([TotalAmount] = @Original_Total~dulla^@204~               "nt) AND ([VAT] = @Orig~dulla^@204~  ([GrandTotal] = @Original_GrandTotal~dulla^@204~ 
                "TotalInWords] = @O~dulla^@204~ InWords) AND ([CustomerName] = @Origi~dulla^@204~ & _ 
                "Name))"
     ~dulla^@204~ apter.DeleteCommand.CommandType = Sys~dulla^@204~ andType.Text
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@Original_CashSalesInvoiceNo",~dulla^@204~ SqlDbType.NVarChar, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "CashSalesInvoiceNo"~dulla^@204~ .DataRowVersion.Original, false, Noth~dulla^@204~ ""))
            Me._adapter.DeleteC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ Original_Date", System.Data.SqlDbType~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@Original_TotalAmount", ~dulla^@204~ qlDbType.Money, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "TotalAmount", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.DeleteCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ T", System.Data.SqlDbType.Float, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "VAT", ~dulla^@204~ ataRowVersion.Original, false, Nothin~dulla^@204~ ))
            Me._adapter.DeleteCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ iginal_GrandTotal", System.Data.SqlDb~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ ndTotal", System.Data.DataRowVersion.~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .DeleteCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@Original_TotalIn~dulla^@204~ m.Data.SqlDbType.[Char], 0, System.Da~dulla^@204~ irection.Input, 0, 0, "TotalInWords",~dulla^@204~ DataRowVersion.Original, false, Nothi~dulla^@204~ "))
            Me._adapter.DeleteCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ riginal_CustomerName", System.Data.Sq~dulla^@204~ ], 0, System.Data.ParameterDirection.~dulla^@204~ "CustomerName", System.Data.DataRowVe~dulla^@204~ l, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.InsertCommand = New System.Dat~dulla^@204~ qlCommand
            Me._adapter.In~dulla^@204~ onnection = Me.Connection
          ~dulla^@204~ .InsertCommand.CommandText = "INSERT ~dulla^@204~ ashSales] ([CashSalesInvoiceNo], [Dat~dulla^@204~ unt], [VAT]"& _ 
                ", ~dulla^@204~  [TotalInWords], [CustomerName]) VALU~dulla^@204~ sInvoiceNo, @Da"& _ 
               ~dulla^@204~ mount, @VAT, @GrandTotal, @TotalInWor~dulla^@204~ Name);"&Global.Microsoft.VisualBasic.~dulla^@204~ al.Microsoft.VisualBasic.ChrW(10)&"SE~dulla^@204~  
                "SalesInvoiceNo, D~dulla^@204~ unt, VAT, GrandTotal, TotalInWords, C~dulla^@204~ "& _ 
                "ROM CashSales~dulla^@204~ alesInvoiceNo = @CashSalesInvoiceNo)"~dulla^@204~  Me._adapter.InsertCommand.CommandTyp~dulla^@204~ ta.CommandType.Text
            Me._~dulla^@204~ tCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@CashSalesInvoiceNo", S~dulla^@204~ lDbType.NVarChar, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "CashSalesInvoiceNo", ~dulla^@204~ ataRowVersion.Current, false, Nothing~dulla^@204~ )
            Me._adapter.InsertComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ e", System.Data.SqlDbType.DateTime, 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Dat~dulla^@204~ ta.DataRowVersion.Current, false, Not~dulla^@204~  ""))
            Me._adapter.Insert~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @TotalAmount", System.Data.SqlDbType.~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ unt", System.Data.DataRowVersion.Curr~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ rtCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@VAT", System.Data.Sql~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ AT", System.Data.DataRowVersion.Curre~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ tCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@GrandTotal", System.Da~dulla^@204~ Money, 0, System.Data.ParameterDirect~dulla^@204~  0, "GrandTotal", System.Data.DataRow~dulla^@204~ nt, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.InsertCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@TotalInWo~dulla^@204~ Data.SqlDbType.[Char], 0, System.Data~dulla^@204~ ection.Input, 0, 0, "TotalInWords", S~dulla^@204~ taRowVersion.Current, false, Nothing,~dulla^@204~ 
            Me._adapter.InsertComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ omerName", System.Data.SqlDbType.[Cha~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ e", System.Data.DataRowVersion.Curren~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command = New System.Data.SqlClient.S~dulla^@204~           Me._adapter.UpdateCommand.C~dulla^@204~ e.Connection
            Me._adapter~dulla^@204~ d.CommandText = "UPDATE [dbo].[CashSa~dulla^@204~ hSalesInvoiceNo] = @CashSalesInvoiceN~dulla^@204~  _ 
                " @Date, [TotalA~dulla^@204~ alAmount, [VAT] = @VAT, [GrandTotal] ~dulla^@204~ , "& _ 
                "[TotalInWor~dulla^@204~ nWords, [CustomerName] = @CustomerNam~dulla^@204~ shSale"& _ 
                "sInvoic~dulla^@204~ nal_CashSalesInvoiceNo) AND ([Date] =~dulla^@204~ te) AND (["& _ 
                "Tot~dulla^@204~ Original_TotalAmount) AND ([VAT] = @O~dulla^@204~ AND ([GrandTot"& _ 
                ~dulla^@204~ nal_GrandTotal) AND ([TotalInWords] =~dulla^@204~ talInWords) AND (["& _ 
            ~dulla^@204~ Name] = @Original_CustomerName));"&Gl~dulla^@204~ t.VisualBasic.ChrW(13)&Global.Microso~dulla^@204~ c.ChrW(10)&"SELECT CashSalesInvoiceNo~dulla^@204~ & _ 
                "lAmount, VAT, ~dulla^@204~ otalInWords, CustomerName FROM CashSa~dulla^@204~ shS"& _ 
                "alesInvoic~dulla^@204~ lesInvoiceNo)"
            Me._adapt~dulla^@204~ and.CommandType = System.Data.Command~dulla^@204~           Me._adapter.UpdateCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~ sInvoiceNo", System.Data.SqlDbType.NV~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ esInvoiceNo", System.Data.DataRowVers~dulla^@204~ false, Nothing, "", "", ""))
       ~dulla^@204~ ter.UpdateCommand.Parameters.Add(New ~dulla^@204~ qlClient.SqlParameter("@Date", System~dulla^@204~ pe.DateTime, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "Date", System.Data.DataRow~dulla^@204~ nt, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.UpdateCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@TotalAmou~dulla^@204~ ata.SqlDbType.Money, 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "TotalAmount", Syst~dulla^@204~ owVersion.Current, false, Nothing, ""~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ ystem.Data.SqlDbType.Float, 0, System~dulla^@204~ erDirection.Input, 0, 0, "VAT", Syste~dulla^@204~ wVersion.Current, false, Nothing, "",~dulla^@204~           Me._adapter.UpdateCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~ al", System.Data.SqlDbType.Money, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Grand~dulla^@204~ m.Data.DataRowVersion.Current, false,~dulla^@204~  "", ""))
            Me._adapter.Up~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@TotalInWords", System.Data.SqlDb~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ talInWords", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@CustomerName",~dulla^@204~ SqlDbType.[Char], 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "CustomerName", System~dulla^@204~ Version.Current, false, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ CashSalesInvoiceNo", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "CashSalesInvoiceNo", System.~dulla^@204~ ersion.Original, false, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ Date", System.Data.SqlDbType.DateTime~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ .Data.DataRowVersion.Original, false,~dulla^@204~  "", ""))
            Me._adapter.Up~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@Original_TotalAmount", System.Da~dulla^@204~ Money, 0, System.Data.ParameterDirect~dulla^@204~  0, "TotalAmount", System.Data.DataRo~dulla^@204~ inal, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.UpdateCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Origina~dulla^@204~ m.Data.SqlDbType.Float, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "VAT", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ andTotal", System.Data.SqlDbType.Mone~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@Original_TotalInWords", S~dulla^@204~ lDbType.[Char], 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "TotalInWords", System.D~dulla^@204~ rsion.Original, false, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ ustomerName", System.Data.SqlDbType.[~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ Name", System.Data.DataRowVersion.Ori~dulla^@204~  Nothing, "", "", ""))
        End S~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Private Sub In~dulla^@204~ )
            Me._connection = New S~dulla^@204~ lClient.SqlConnection
            Me~dulla^@204~ ConnectionString = Global.InventoryCo~dulla^@204~ y.MySettings.Default.PurchaseInfoConn~dulla^@204~    End Sub
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~ e Sub InitCommandCollection()
      ~dulla^@204~ mandCollection = New System.Data.SqlC~dulla^@204~ and(0) {}
            Me._commandCol~dulla^@204~ New System.Data.SqlClient.SqlCommand~dulla^@204~ Me._commandCollection(0).Connection =~dulla^@204~ n
            Me._commandCollection(~dulla^@204~ t = "SELECT CashSalesInvoiceNo, Date,~dulla^@204~  VAT, GrandTotal, TotalInWords, Cust"~dulla^@204~          "omerName FROM dbo.CashSales~dulla^@204~   Me._commandCollection(0).CommandTyp~dulla^@204~ ta.CommandType.Text
        End Sub~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute(),  _
         System.Component~dulla^@204~ HelpKeywordAttribute("vs.data.TableAd~dulla^@204~          System.ComponentModel.DataOb~dulla^@204~ ribute(System.ComponentModel.DataObje~dulla^@204~ Fill, true)>  _
        Public Overl~dulla^@204~ ble Function Fill(ByVal dataTable As ~dulla^@204~ ataSet2.CashSalesDataTable) As Intege~dulla^@204~   Me.Adapter.SelectCommand = Me.Comma~dulla^@204~ 0)
            If (Me.ClearBeforeFil~dulla^@204~ n
                dataTable.Clear
 ~dulla^@204~ d If
            Dim returnValue As ~dulla^@204~ Adapter.Fill(dataTable)
            ~dulla^@204~ Value
        End Function
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
         System.ComponentModel.Des~dulla^@204~ rdAttribute("vs.data.TableAdapter"), ~dulla^@204~ System.ComponentModel.DataObjectMetho~dulla^@204~ stem.ComponentModel.DataObjectMethodT~dulla^@204~  true)>  _
        Public Overloads ~dulla^@204~ unction GetData() As PurchaseInfoData~dulla^@204~ sDataTable
            Me.Adapter.Se~dulla^@204~  Me.CommandCollection(0)
           ~dulla^@204~ e As PurchaseInfoDataSet2.CashSalesDa~dulla^@204~  PurchaseInfoDataSet2.CashSalesDataTa~dulla^@204~     Me.Adapter.Fill(dataTable)
     ~dulla^@204~  dataTable
        End Function
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ (),  _
         System.ComponentMode~dulla^@204~ KeywordAttribute("vs.data.TableAdapte~dulla^@204~     Public Overloads Overridable Func~dulla^@204~ yVal dataTable As PurchaseInfoDataSet~dulla^@204~ taTable) As Integer
            Retu~dulla^@204~ .Update(dataTable)
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute(),  _
         System.Compo~dulla^@204~ ign.HelpKeywordAttribute("vs.data.Tab~dulla^@204~  _
        Public Overloads Overrida~dulla^@204~ Update(ByVal dataSet As PurchaseInfoD~dulla^@204~ nteger
            Return Me.Adapter~dulla^@204~ et, "CashSales")
        End Functio~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute(),  _
         System.Compone~dulla^@204~ n.HelpKeywordAttribute("vs.data.Table~dulla^@204~ 
        Public Overloads Overridabl~dulla^@204~ date(ByVal dataRow As System.Data.Dat~dulla^@204~ ger
            Return Me.Adapter.Up~dulla^@204~ em.Data.DataRow() {dataRow})
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute(),  _
         Sy~dulla^@204~ tModel.Design.HelpKeywordAttribute("v~dulla^@204~ dapter")>  _
        Public Overload~dulla^@204~  Function Update(ByVal dataRows() As ~dulla^@204~ ataRow) As Integer
            Retur~dulla^@204~ Update(dataRows)
        End Functio~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute(),  _
         System.Compone~dulla^@204~ n.HelpKeywordAttribute("vs.data.Table~dulla^@204~ 
         System.ComponentModel.Data~dulla^@204~ ttribute(System.ComponentModel.DataOb~dulla^@204~ e.Delete, true)>  _
        Public O~dulla^@204~ ridable Function Delete(ByVal Origina~dulla^@204~ voiceNo As String, ByVal Original_Dat~dulla^@204~ Val Original_TotalAmount As Decimal, ~dulla^@204~ l_VAT As Double, ByVal Original_Grand~dulla^@204~ mal, ByVal Original_TotalInWords As S~dulla^@204~ Original_CustomerName As String) As I~dulla^@204~        If (Original_CashSalesInvoiceN~dulla^@204~  Then
                Throw New Syst~dulla^@204~ llException("Original_CashSalesInvoic~dulla^@204~       Else
                Me.Adapte~dulla^@204~ nd.Parameters(0).Value = CType(Origin~dulla^@204~ nvoiceNo,String)
            End If~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(1~dulla^@204~ pe(Original_Date,Date)
            M~dulla^@204~ eteCommand.Parameters(2).Value = CTyp~dulla^@204~ talAmount,Decimal)
            Me.Ad~dulla^@204~ ommand.Parameters(3).Value = CType(Or~dulla^@204~ uble)
            Me.Adapter.DeleteC~dulla^@204~ ters(4).Value = CType(Original_GrandT~dulla^@204~ 
            If (Original_TotalInWor~dulla^@204~ ) Then
                Throw New Sys~dulla^@204~ ullException("Original_TotalInWords")~dulla^@204~  Else
                Me.Adapter.Del~dulla^@204~ rameters(5).Value = CType(Original_To~dulla^@204~ ring)
            End If
          ~dulla^@204~ l_CustomerName Is Nothing) Then
    ~dulla^@204~ hrow New System.ArgumentNullException~dulla^@204~ stomerName")
            Else
     ~dulla^@204~ .Adapter.DeleteCommand.Parameters(6).~dulla^@204~ (Original_CustomerName,String)
     ~dulla^@204~ 
            Dim previousConnectionS~dulla^@204~ m.Data.ConnectionState = Me.Adapter.D~dulla^@204~ Connection.State
            If ((Me~dulla^@204~ teCommand.Connection.State And System~dulla^@204~ ionState.Open)  _
                  ~dulla^@204~ em.Data.ConnectionState.Open) Then
 ~dulla^@204~   Me.Adapter.DeleteCommand.Connection~dulla^@204~       End If
            Try 
     ~dulla^@204~ m returnValue As Integer = Me.Adapter~dulla^@204~ d.ExecuteNonQuery
                Re~dulla^@204~ lue
            Finally
           ~dulla^@204~ iousConnectionState = System.Data.Con~dulla^@204~ Closed) Then
                    Me.~dulla^@204~ eCommand.Connection.Close
          ~dulla^@204~ 
            End Try
        End Fun~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute(),  _
         System.Com~dulla^@204~ esign.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.Compone~dulla^@204~ bjectMethodAttribute(System.Component~dulla^@204~ ectMethodType.Insert, true)>  _
    ~dulla^@204~ erloads Overridable Function Insert(B~dulla^@204~ sInvoiceNo As String, ByVal _Date As ~dulla^@204~ otalAmount As Decimal, ByVal VAT As D~dulla^@204~ GrandTotal As Decimal, ByVal TotalInW~dulla^@204~ g, ByVal CustomerName As String) As I~dulla^@204~        If (CashSalesInvoiceNo Is Noth~dulla^@204~               Throw New System.Argume~dulla^@204~ on("CashSalesInvoiceNo")
           ~dulla^@204~           Me.Adapter.InsertCommand.Pa~dulla^@204~ alue = CType(CashSalesInvoiceNo,Strin~dulla^@204~    End If
            Me.Adapter.Ins~dulla^@204~ rameters(1).Value = CType(_Date,Date)~dulla^@204~  Me.Adapter.InsertCommand.Parameters(~dulla^@204~ ype(TotalAmount,Decimal)
           ~dulla^@204~ nsertCommand.Parameters(3).Value = CT~dulla^@204~ e)
            Me.Adapter.InsertComm~dulla^@204~ s(4).Value = CType(GrandTotal,Decimal~dulla^@204~   If (TotalInWords Is Nothing) Then
~dulla^@204~    Throw New System.ArgumentNullExcep~dulla^@204~ Words")
            Else
          ~dulla^@204~ ter.InsertCommand.Parameters(5).Value~dulla^@204~ lInWords,String)
            End If~dulla^@204~ If (CustomerName Is Nothing) Then
  ~dulla^@204~  Throw New System.ArgumentNullExcepti~dulla^@204~ ame")
            Else
            ~dulla^@204~ r.InsertCommand.Parameters(6).Value =~dulla^@204~ erName,String)
            End If
 ~dulla^@204~ m previousConnectionState As System.D~dulla^@204~ nState = Me.Adapter.InsertCommand.Con~dulla^@204~ 
            If ((Me.Adapter.InsertC~dulla^@204~ tion.State And System.Data.Connection~dulla^@204~ _
                        <> System.~dulla^@204~ onState.Open) Then
                M~dulla^@204~ ertCommand.Connection.Open
         ~dulla^@204~           Try 
                Dim r~dulla^@204~  Integer = Me.Adapter.InsertCommand.E~dulla^@204~ y
                Return returnValue~dulla^@204~  Finally
                If (previou~dulla^@204~ ate = System.Data.ConnectionState.Clo~dulla^@204~                   Me.Adapter.InsertCo~dulla^@204~ ion.Close
                End If
  ~dulla^@204~  Try
        End Function
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
         System.ComponentModel.Desi~dulla^@204~ dAttribute("vs.data.TableAdapter"),  ~dulla^@204~ ystem.ComponentModel.DataObjectMethod~dulla^@204~ tem.ComponentModel.DataObjectMethodTy~dulla^@204~ ue)>  _
        Public Overloads Ove~dulla^@204~ tion Update(ByVal CashSalesInvoiceNo ~dulla^@204~ Val _Date As Date, ByVal TotalAmount ~dulla^@204~ yVal VAT As Double, ByVal GrandTotal ~dulla^@204~ yVal TotalInWords As String, ByVal Cu~dulla^@204~  String, ByVal Original_CashSalesInvo~dulla^@204~ ng, ByVal Original_Date As Date, ByVa~dulla^@204~ talAmount As Decimal, ByVal Original_~dulla^@204~ , ByVal Original_GrandTotal As Decima~dulla^@204~ inal_TotalInWords As String, ByVal Or~dulla^@204~ erName As String) As Integer
       ~dulla^@204~ SalesInvoiceNo Is Nothing) Then
    ~dulla^@204~ hrow New System.ArgumentNullException~dulla^@204~ voiceNo")
            Else
        ~dulla^@204~ apter.UpdateCommand.Parameters(0).Val~dulla^@204~ shSalesInvoiceNo,String)
           ~dulla^@204~         Me.Adapter.UpdateCommand.Para~dulla^@204~ ue = CType(_Date,Date)
            M~dulla^@204~ ateCommand.Parameters(2).Value = CTyp~dulla^@204~ ,Decimal)
            Me.Adapter.Upd~dulla^@204~ rameters(3).Value = CType(VAT,Double)~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ ype(GrandTotal,Decimal)
            ~dulla^@204~ rds Is Nothing) Then
               ~dulla^@204~ stem.ArgumentNullException("TotalInWo~dulla^@204~       Else
                Me.Adapte~dulla^@204~ nd.Parameters(5).Value = CType(TotalI~dulla^@204~ )
            End If
            If~dulla^@204~ e Is Nothing) Then
                T~dulla^@204~ em.ArgumentNullException("CustomerNam~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(6).Value = CType(Customer~dulla^@204~ 
            End If
            If (~dulla^@204~ SalesInvoiceNo Is Nothing) Then
    ~dulla^@204~ hrow New System.ArgumentNullException~dulla^@204~ shSalesInvoiceNo")
            Else~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~  CType(Original_CashSalesInvoiceNo,St~dulla^@204~       End If
            Me.Adapter.~dulla^@204~ .Parameters(8).Value = CType(Original~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ .Value = CType(Original_TotalAmount,D~dulla^@204~         Me.Adapter.UpdateCommand.Para~dulla^@204~ lue = CType(Original_VAT,Double)
   ~dulla^@204~ dapter.UpdateCommand.Parameters(11).V~dulla^@204~ Original_GrandTotal,Decimal)
       ~dulla^@204~ inal_TotalInWords Is Nothing) Then
 ~dulla^@204~   Throw New System.ArgumentNullExcept~dulla^@204~ _TotalInWords")
            Else
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ Type(Original_TotalInWords,String)
 ~dulla^@204~ d If
            If (Original_Custom~dulla^@204~ hing) Then
                Throw New~dulla^@204~ entNullException("Original_CustomerNa~dulla^@204~      Else
                Me.Adapter~dulla^@204~ d.Parameters(13).Value = CType(Origin~dulla^@204~ me,String)
            End If
     ~dulla^@204~ eviousConnectionState As System.Data.~dulla^@204~ te = Me.Adapter.UpdateCommand.Connect~dulla^@204~           If ((Me.Adapter.UpdateComma~dulla^@204~ .State And System.Data.ConnectionStat~dulla^@204~                        <> System.Data~dulla^@204~ ate.Open) Then
                Me.Ad~dulla^@204~ ommand.Connection.Open
            E~dulla^@204~       Try 
                Dim retur~dulla^@204~ eger = Me.Adapter.UpdateCommand.Execu~dulla^@204~                Return returnValue
  ~dulla^@204~ ally
                If (previousCon~dulla^@204~ = System.Data.ConnectionState.Closed)~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ Close
                End If
      ~dulla^@204~ 
        End Function
    End Class~dulla^@204~ System.CodeDom.Compiler.GeneratedCode~dulla^@204~ stem.Data.Design.TypedDataSetGenerato~dulla^@204~ ),  _
     System.ComponentModel.Des~dulla^@204~ Attribute("code"),  _
     System.Co~dulla^@204~ ToolboxItem(true),  _
     System.Co~dulla^@204~ DataObjectAttribute(true),  _
     S~dulla^@204~ ntModel.DesignerAttribute("Microsoft.~dulla^@204~ taSource.Design.TableAdapterDesigner,~dulla^@204~ Designer"& _ 
        ", Version=8.0~dulla^@204~ =neutral, PublicKeyToken=b03f5f7f11d5~dulla^@204~     System.ComponentModel.Design.Help~dulla^@204~ ute("vs.data.TableAdapter")>  _
    ~dulla^@204~ c Class CreditSalesTableAdapter
    ~dulla^@204~ System.ComponentModel.Component
    ~dulla^@204~  Private WithEvents _adapter As Syste~dulla^@204~ ent.SqlDataAdapter
        
       ~dulla^@204~ nection As System.Data.SqlClient.SqlC~dulla^@204~       
        Private _commandColle~dulla^@204~ stem.Data.SqlClient.SqlCommand
     ~dulla^@204~ Private _clearBeforeFill As Boolean
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Public Sub New()
~dulla^@204~ yBase.New
            Me.ClearBefore~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ rivate ReadOnly Property Adapter() As~dulla^@204~ SqlClient.SqlDataAdapter
           ~dulla^@204~          If (Me._adapter Is Nothing) ~dulla^@204~              Me.InitAdapter
        ~dulla^@204~ f
                Return Me._adapter~dulla^@204~  End Get
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Friend Property Connect~dulla^@204~ em.Data.SqlClient.SqlConnection
    ~dulla^@204~                 If (Me._connection Is~dulla^@204~ n
                    Me.InitConnect~dulla^@204~         End If
                Retur~dulla^@204~ ion
            End Get
           ~dulla^@204~          Me._connection = value
    ~dulla^@204~ f (Not (Me.Adapter.InsertCommand) Is ~dulla^@204~ 
                    Me.Adapter.Inse~dulla^@204~ nection = value
                End If
                If (Not (Me.Adapter.De~dulla^@204~ Is Nothing) Then
                   ~dulla^@204~ eleteCommand.Connection = value
    ~dulla^@204~ nd If
                If (Not (Me.Ad~dulla^@204~ ommand) Is Nothing) Then
           ~dulla^@204~ dapter.UpdateCommand.Connection = val~dulla^@204~        End If
                Dim i ~dulla^@204~ 0
                Do While (i < Me.C~dulla^@204~ ion.Length)
                    If (~dulla^@204~ ndCollection(i)) Is Nothing) Then
  ~dulla^@204~          CType(Me.CommandCollection(i~dulla^@204~ .SqlClient.SqlCommand).Connection = v~dulla^@204~              End If
                ~dulla^@204~ 1)
                Loop
           ~dulla^@204~      End Property
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Protected ReadOnly Property CommandC~dulla^@204~ s System.Data.SqlClient.SqlCommand()~dulla^@204~ Get
                If (Me._commandC~dulla^@204~ Nothing) Then
                    Me~dulla^@204~ ollection
                End If
  ~dulla^@204~  Return Me._commandCollection
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Property ClearBeforeFill~dulla^@204~ 
            Get
                Re~dulla^@204~ rBeforeFill
            End Get
   ~dulla^@204~ 
                Me._clearBeforeFill ~dulla^@204~         End Set
        End Property~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Private Sub Init~dulla^@204~           Me._adapter = New System.Da~dulla^@204~ SqlDataAdapter
            Dim table~dulla^@204~ stem.Data.Common.DataTableMapping = N~dulla^@204~ a.Common.DataTableMapping
          ~dulla^@204~ g.SourceTable = "Table"
            ~dulla^@204~ DataSetTable = "CreditSales"
       ~dulla^@204~ ping.ColumnMappings.Add("CreditSalesI~dulla^@204~ reditSalesInvoiceNo")
            ta~dulla^@204~ lumnMappings.Add("Date", "Date")
   ~dulla^@204~ eMapping.ColumnMappings.Add("TotalAmo~dulla^@204~ mount")
            tableMapping.Col~dulla^@204~ dd("VAT", "VAT")
            tableMa~dulla^@204~ appings.Add("GrandTotal", "GrandTotal~dulla^@204~    tableMapping.ColumnMappings.Add("T~dulla^@204~  "TotalInWords")
            tableMa~dulla^@204~ appings.Add("DueDate", "DueDate")
  ~dulla^@204~ leMapping.ColumnMappings.Add("Custome~dulla^@204~ omerName")
            Me._adapter.T~dulla^@204~ Add(tableMapping)
            Me._ad~dulla^@204~ ommand = New System.Data.SqlClient.Sq~dulla^@204~          Me._adapter.DeleteCommand.Co~dulla^@204~ .Connection
            Me._adapter.~dulla^@204~ .CommandText = "DELETE FROM [dbo].[Cr~dulla^@204~ ERE (([CreditSalesInvoiceNo] = @Origi~dulla^@204~ _ 
                "SalesInvoiceNo) ~dulla^@204~  @Original_Date) AND ([TotalAmount] =~dulla^@204~ t"& _ 
                "alAmount) AN~dulla^@204~ riginal_VAT) AND ([GrandTotal] = @Ori~dulla^@204~ tal) "& _ 
                "AND ((@I~dulla^@204~ Words = 1 AND [TotalInWords] IS NULL)~dulla^@204~ Words] = "& _ 
                "@Ori~dulla^@204~ Words)) AND ([DueDate] = @Original_Du~dulla^@204~ CustomerName]"& _ 
                "~dulla^@204~ CustomerName))"
            Me._adap~dulla^@204~ mand.CommandType = System.Data.Comman~dulla^@204~            Me._adapter.DeleteCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ l_CreditSalesInvoiceNo", System.Data.~dulla^@204~ rChar, 0, System.Data.ParameterDirect~dulla^@204~  0, "CreditSalesInvoiceNo", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.DeleteCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ te", System.Data.SqlDbType.DateTime, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "Da~dulla^@204~ ata.DataRowVersion.Original, false, N~dulla^@204~ ", ""))
            Me._adapter.Dele~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@Original_TotalAmount", System.Data~dulla^@204~ ney, 0, System.Data.ParameterDirectio~dulla^@204~ , "TotalAmount", System.Data.DataRowV~dulla^@204~ al, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.DeleteCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Original_~dulla^@204~ Data.SqlDbType.Float, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "VAT", System.Data~dulla^@204~ on.Original, false, Nothing, "", "", ~dulla^@204~      Me._adapter.DeleteCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ dTotal", System.Data.SqlDbType.Money,~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "G~dulla^@204~ ystem.Data.DataRowVersion.Original, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@IsNull_TotalInWords", Syste~dulla^@204~ ype.Int, 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "TotalInWords", System.Data.Dat~dulla^@204~ riginal, true, Nothing, "", "", ""))~dulla^@204~ Me._adapter.DeleteCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@Origi~dulla^@204~ rds", System.Data.SqlDbType.[Char], 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Tot~dulla^@204~ ystem.Data.DataRowVersion.Original, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@Original_DueDate", System.D~dulla^@204~ .DateTime, 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "DueDate", System.Data.DataRo~dulla^@204~ inal, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.DeleteCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Origina~dulla^@204~ e", System.Data.SqlDbType.[Char], 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Custo~dulla^@204~ tem.Data.DataRowVersion.Original, fal~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d = New System.Data.SqlClient.SqlComm~dulla^@204~     Me._adapter.InsertCommand.Connect~dulla^@204~ ection
            Me._adapter.Inser~dulla^@204~ andText = "INSERT INTO [dbo].[CreditS~dulla^@204~ tSalesInvoiceNo], [Date], [TotalAmoun~dulla^@204~                "VAT], [GrandTotal], [~dulla^@204~ , [DueDate], [CustomerName]) VALUES (~dulla^@204~  
                "lesInvoiceNo, @Da~dulla^@204~ unt, @VAT, @GrandTotal, @TotalInWords~dulla^@204~ "& _ 
                "CustomerName)~dulla^@204~ rosoft.VisualBasic.ChrW(13)&Global.Mi~dulla^@204~ lBasic.ChrW(10)&"SELECT CreditSalesIn~dulla^@204~ , TotalAmount, VAT, GrandTotal,"& _ ~dulla^@204~     " TotalInWords, DueDate, Customer~dulla^@204~ ditSales WHERE (CreditSalesInvoiceN"&~dulla^@204~         "o = @CreditSalesInvoiceNo)"~dulla^@204~ Me._adapter.InsertCommand.CommandType~dulla^@204~ a.CommandType.Text
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@CreditSalesInvoiceNo", ~dulla^@204~ qlDbType.NVarChar, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "CreditSalesInvoiceNo~dulla^@204~ a.DataRowVersion.Current, false, Noth~dulla^@204~ ""))
            Me._adapter.InsertC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ Date", System.Data.SqlDbType.DateTime~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ .Data.DataRowVersion.Current, false, ~dulla^@204~ "", ""))
            Me._adapter.Ins~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@TotalAmount", System.Data.SqlDbTy~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ Amount", System.Data.DataRowVersion.C~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ nsertCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@VAT", System.Data.~dulla^@204~ at, 0, System.Data.ParameterDirection~dulla^@204~  "VAT", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ sertCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@GrandTotal", System~dulla^@204~ pe.Money, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "GrandTotal", System.Data.Data~dulla^@204~ rrent, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.InsertCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@TotalI~dulla^@204~ em.Data.SqlDbType.[Char], 0, System.D~dulla^@204~ Direction.Input, 0, 0, "TotalInWords", System.Data.DataRowVersion.Current, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@DueDate", System.Data.SqlDbTyp~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ Date", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ertCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@CustomerName", Syste~dulla^@204~ ype.[Char], 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "CustomerName", System.Data.~dulla^@204~ n.Current, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.UpdateCommand = New Sy~dulla^@204~ Client.SqlCommand
            Me._ad~dulla^@204~ ommand.Connection = Me.Connection
  ~dulla^@204~ _adapter.UpdateCommand.CommandText = ~dulla^@204~ .[CreditSales] SET [CreditSalesInvoic~dulla^@204~ tSalesInvoiceNo, [D"& _ 
           ~dulla^@204~ @Date, [TotalAmount] = @TotalAmount, ~dulla^@204~  [GrandTotal] = @GrandT"& _ 
       ~dulla^@204~ l, [TotalInWords] = @TotalInWords, [D~dulla^@204~ eDate, [CustomerName] = @Cu"& _ 
   ~dulla^@204~ "stomerName WHERE (([CreditSalesInvoi~dulla^@204~ inal_CreditSalesInvoiceNo) AND "& _ ~dulla^@204~     "([Date] = @Original_Date) AND ([~dulla^@204~ = @Original_TotalAmount) AND ([VAT]"&~dulla^@204~         " = @Original_VAT) AND ([Gran~dulla^@204~ iginal_GrandTotal) AND ((@IsNull_Tota~dulla^@204~             "nWords = 1 AND [TotalInW~dulla^@204~ ) OR ([TotalInWords] = @Original_Tota~dulla^@204~                 "ds)) AND ([DueDate] ~dulla^@204~ ueDate) AND ([CustomerName] = @Origin~dulla^@204~ _ 
                "rName));"&Global~dulla^@204~ sualBasic.ChrW(13)&Global.Microsoft.V~dulla^@204~ rW(10)&"SELECT CreditSalesInvoiceNo, ~dulla^@204~ ount, VAT, GrandTotal, Total"& _ 
  ~dulla^@204~  "InWords, DueDate, CustomerName FROM~dulla^@204~ WHERE (CreditSalesInvoiceNo = @C"& _ ~dulla^@204~      "reditSalesInvoiceNo)"
        ~dulla^@204~ er.UpdateCommand.CommandType = System~dulla^@204~ Type.Text
            Me._adapter.Up~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@CreditSalesInvoiceNo", System.Da~dulla^@204~ NVarChar, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "CreditSalesInvoiceNo", System~dulla^@204~ Version.Current, false, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ stem.Data.SqlDbType.DateTime, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "Date", Sy~dulla^@204~ aRowVersion.Current, false, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ Amount", System.Data.SqlDbType.Money,~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "T~dulla^@204~ System.Data.DataRowVersion.Current, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@VAT", System.Data.SqlDbType~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ ystem.Data.DataRowVersion.Current, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@GrandTotal", System.Data.Sql~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ randTotal", System.Data.DataRowVersio~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.UpdateCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@TotalInWords", ~dulla^@204~ qlDbType.[Char], 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "TotalInWords", System.~dulla^@204~ ersion.Current, false, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ System.Data.SqlDbType.DateTime, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "DueDate~dulla^@204~ a.DataRowVersion.Current, false, Noth~dulla^@204~ ""))
            Me._adapter.UpdateC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ CustomerName", System.Data.SqlDbType.~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ rName", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ dateCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@Original_CreditSale~dulla^@204~ System.Data.SqlDbType.NVarChar, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "CreditS~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@Original_Date", System.~dulla^@204~ e.DateTime, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "Date", System.Data.DataRowV~dulla^@204~ al, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.UpdateCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Original_~dulla^@204~  System.Data.SqlDbType.Money, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "TotalAmou~dulla^@204~ ata.DataRowVersion.Original, false, N~dulla^@204~ ", ""))
            Me._adapter.Upda~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@Original_VAT", System.Data.SqlDbTy~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@Original_GrandTotal", Sys~dulla^@204~ bType.Money, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "GrandTotal", System.Data.D~dulla^@204~ .Original, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.UpdateCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Is~dulla^@204~ ords", System.Data.SqlDbType.Int, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Total~dulla^@204~ tem.Data.DataRowVersion.Original, tru~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Original_TotalInWords", System~dulla^@204~ pe.[Char], 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "TotalInWords", System.Data.D~dulla^@204~ .Original, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.UpdateCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Or~dulla^@204~ e", System.Data.SqlDbType.DateTime, 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Due~dulla^@204~ .Data.DataRowVersion.Original, false,~dulla^@204~  "", ""))
            Me._adapter.Up~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@Original_CustomerName", System.D~dulla^@204~ .[Char], 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "CustomerName", System.Data.Dat~dulla^@204~ riginal, false, Nothing, "", "", ""))~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ InitConnection()
            Me._con~dulla^@204~  System.Data.SqlClient.SqlConnection~dulla^@204~ Me._connection.ConnectionString = Glo~dulla^@204~ ControlSystem.My.MySettings.Default.P~dulla^@204~ nnection
        End Sub
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Private Sub InitCommandColle~dulla^@204~         Me._commandCollection = New S~dulla^@204~ lClient.SqlCommand(0) {}
           ~dulla^@204~ ollection(0) = New System.Data.SqlCli~dulla^@204~ d
            Me._commandCollection(~dulla^@204~  = Me.Connection
            Me._com~dulla^@204~ n(0).CommandText = "SELECT CreditSale~dulla^@204~ ate, TotalAmount, VAT, GrandTotal, To~dulla^@204~ u"& _ 
                "eDate, Custo~dulla^@204~ dbo.CreditSales"
            Me._com~dulla^@204~ n(0).CommandType = System.Data.Comman~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute(),  ~dulla^@204~ ystem.ComponentModel.Design.HelpKeywo~dulla^@204~ vs.data.TableAdapter"),  _
         ~dulla^@204~ entModel.DataObjectMethodAttribute(Sy~dulla^@204~ tModel.DataObjectMethodType.Fill, tru~dulla^@204~    Public Overloads Overridable Funct~dulla^@204~ l dataTable As PurchaseInfoDataSet2.C~dulla^@204~ aTable) As Integer
            Me.Ad~dulla^@204~ ommand = Me.CommandCollection(0)
   ~dulla^@204~ Me.ClearBeforeFill = true) Then
    ~dulla^@204~ ataTable.Clear
            End If
 ~dulla^@204~ m returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return retur~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute(), ~dulla^@204~ System.ComponentModel.Design.HelpKeyw~dulla^@204~ "vs.data.TableAdapter"),  _
        ~dulla^@204~ nentModel.DataObjectMethodAttribute(S~dulla^@204~ ntModel.DataObjectMethodType.[Select]~dulla^@204~         Public Overloads Overridable ~dulla^@204~ ata() As PurchaseInfoDataSet2.CreditS~dulla^@204~ 
            Me.Adapter.SelectComman~dulla^@204~ dCollection(0)
            Dim dataT~dulla^@204~ aseInfoDataSet2.CreditSalesDataTable ~dulla^@204~ eInfoDataSet2.CreditSalesDataTable
 ~dulla^@204~ .Adapter.Fill(dataTable)
           ~dulla^@204~ able
        End Function
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
         System.ComponentModel.Desi~dulla^@204~ dAttribute("vs.data.TableAdapter")>  ~dulla^@204~ blic Overloads Overridable Function U~dulla^@204~ ataTable As PurchaseInfoDataSet2.Cred~dulla^@204~ ble) As Integer
            Return M~dulla^@204~ ate(dataTable)
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute(),  _
         System.Component~dulla^@204~ HelpKeywordAttribute("vs.data.TableAd~dulla^@204~         Public Overloads Overridable ~dulla^@204~ te(ByVal dataSet As PurchaseInfoDataS~dulla^@204~ er
            Return Me.Adapter.Upd~dulla^@204~ "CreditSales")
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute(),  _
         System.Component~dulla^@204~ HelpKeywordAttribute("vs.data.TableAd~dulla^@204~         Public Overloads Overridable ~dulla^@204~ te(ByVal dataRow As System.Data.DataR~dulla^@204~ r
            Return Me.Adapter.Upda~dulla^@204~ .Data.DataRow() {dataRow})
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute(),  _
         Syst~dulla^@204~ odel.Design.HelpKeywordAttribute("vs.~dulla^@204~ pter")>  _
        Public Overloads ~dulla^@204~ unction Update(ByVal dataRows() As Sy~dulla^@204~ aRow) As Integer
            Return ~dulla^@204~ date(dataRows)
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute(),  _
         System.Component~dulla^@204~ HelpKeywordAttribute("vs.data.TableAd~dulla^@204~          System.ComponentModel.DataOb~dulla^@204~ ribute(System.ComponentModel.DataObje~dulla^@204~ Delete, true)>  _
        Public Ove~dulla^@204~ dable Function Delete(ByVal Original_~dulla^@204~ voiceNo As String, ByVal Original_Dat~dulla^@204~ Val Original_TotalAmount As Decimal, ~dulla^@204~ l_VAT As Double, ByVal Original_Grand~dulla^@204~ mal, ByVal Original_TotalInWords As S~dulla^@204~ Original_DueDate As Date, ByVal Origi~dulla^@204~ ame As String) As Integer
          ~dulla^@204~ l_CreditSalesInvoiceNo Is Nothing) Th~dulla^@204~        Throw New System.ArgumentNullE~dulla^@204~ ginal_CreditSalesInvoiceNo")
       ~dulla^@204~               Me.Adapter.DeleteComman~dulla^@204~ 0).Value = CType(Original_CreditSales~dulla^@204~ ing)
            End If
           ~dulla^@204~ eleteCommand.Parameters(1).Value = CT~dulla^@204~ Date,Date)
            Me.Adapter.De~dulla^@204~ arameters(2).Value = CType(Original_T~dulla^@204~ cimal)
            Me.Adapter.Delete~dulla^@204~ eters(3).Value = CType(Original_VAT,D~dulla^@204~        Me.Adapter.DeleteCommand.Param~dulla^@204~ e = CType(Original_GrandTotal,Decimal~dulla^@204~   If (Original_TotalInWords Is Nothin~dulla^@204~             Me.Adapter.DeleteCommand.~dulla^@204~ .Value = CType(1,Object)
           ~dulla^@204~ er.DeleteCommand.Parameters(6).Value ~dulla^@204~ ll.Value
            Else
         ~dulla^@204~ pter.DeleteCommand.Parameters(5).Valu~dulla^@204~ bject)
                Me.Adapter.De~dulla^@204~ arameters(6).Value = CType(Original_T~dulla^@204~ tring)
            End If
         ~dulla^@204~ .DeleteCommand.Parameters(7).Value = ~dulla^@204~ l_DueDate,Date)
            If (Orig~dulla^@204~ Name Is Nothing) Then
              ~dulla^@204~ ystem.ArgumentNullException("Original~dulla^@204~ ")
            Else
               ~dulla^@204~ eleteCommand.Parameters(8).Value = CT~dulla^@204~ CustomerName,String)
            End~dulla^@204~     Dim previousConnectionState As Sy~dulla^@204~ nectionState = Me.Adapter.DeleteComma~dulla^@204~ .State
            If ((Me.Adapter.D~dulla^@204~ Connection.State And System.Data.Conn~dulla^@204~ pen)  _
                        <> S~dulla^@204~ nnectionState.Open) Then
           ~dulla^@204~ er.DeleteCommand.Connection.Open
   ~dulla^@204~ If
            Try 
               ~dulla^@204~ lue As Integer = Me.Adapter.DeleteCom~dulla^@204~ onQuery
                Return retur~dulla^@204~        Finally
                If (p~dulla^@204~ tionState = System.Data.ConnectionSta~dulla^@204~ en
                    Me.Adapter.De~dulla^@204~ onnection.Close
                End ~dulla^@204~    End Try
        End Function
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ (),  _
         System.ComponentMode~dulla^@204~ KeywordAttribute("vs.data.TableAdapte~dulla^@204~      System.ComponentModel.DataObject~dulla^@204~ te(System.ComponentModel.DataObjectMe~dulla^@204~ rt, true)>  _
        Public Overloa~dulla^@204~ e Function Insert(ByVal CreditSalesIn~dulla^@204~ ring, ByVal _Date As Date, ByVal Tota~dulla^@204~ cimal, ByVal VAT As Double, ByVal Gra~dulla^@204~ cimal, ByVal TotalInWords As String, ~dulla^@204~  As Date, ByVal CustomerName As Strin~dulla^@204~ 
            If (CreditSalesInvoiceN~dulla^@204~  Then
                Throw New Syst~dulla^@204~ llException("CreditSalesInvoiceNo")
~dulla^@204~ lse
                Me.Adapter.Inser~dulla^@204~ meters(0).Value = CType(CreditSalesIn~dulla^@204~ g)
            End If
            M~dulla^@204~ ertCommand.Parameters(1).Value = CTyp~dulla^@204~ 
            Me.Adapter.InsertComman~dulla^@204~ 2).Value = CType(TotalAmount,Decimal)~dulla^@204~  Me.Adapter.InsertCommand.Parameters(~dulla^@204~ ype(VAT,Double)
            Me.Adapt~dulla^@204~ and.Parameters(4).Value = CType(Grand~dulla^@204~ )
            If (TotalInWords Is No~dulla^@204~                 Me.Adapter.InsertComm~dulla^@204~ s(5).Value = System.DBNull.Value
   ~dulla^@204~ 
                Me.Adapter.InsertCo~dulla^@204~ ers(5).Value = CType(TotalInWords,Str~dulla^@204~      End If
            Me.Adapter.I~dulla^@204~ Parameters(6).Value = CType(DueDate,D~dulla^@204~      If (CustomerName Is Nothing) The~dulla^@204~       Throw New System.ArgumentNullEx~dulla^@204~ omerName")
            Else
       ~dulla^@204~ dapter.InsertCommand.Parameters(7).Va~dulla^@204~ ustomerName,String)
            End ~dulla^@204~    Dim previousConnectionState As Sys~dulla^@204~ ectionState = Me.Adapter.InsertComman~dulla^@204~ State
            If ((Me.Adapter.In~dulla^@204~ onnection.State And System.Data.Conne~dulla^@204~ en)  _
                        <> Sy~dulla^@204~ nectionState.Open) Then
            ~dulla^@204~ r.InsertCommand.Connection.Open
    ~dulla^@204~ f
            Try 
                ~dulla^@204~ ue As Integer = Me.Adapter.InsertComm~dulla^@204~ nQuery
                Return return~dulla^@204~       Finally
                If (pr~dulla^@204~ ionState = System.Data.ConnectionStat~dulla^@204~ n
                    Me.Adapter.Ins~dulla^@204~ nnection.Close
                End I~dulla^@204~   End Try
        End Function
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ ),  _
         System.ComponentModel~dulla^@204~ eywordAttribute("vs.data.TableAdapter~dulla^@204~     System.ComponentModel.DataObjectM~dulla^@204~ e(System.ComponentModel.DataObjectMet~dulla^@204~ e, true)>  _
        Public Overload~dulla^@204~  Function Update( _
                ~dulla^@204~ ditSalesInvoiceNo As String,  _
    ~dulla^@204~    ByVal _Date As Date,  _
         ~dulla^@204~ Val TotalAmount As Decimal,  _
     ~dulla^@204~   ByVal VAT As Double,  _
          ~dulla^@204~ al GrandTotal As Decimal,  _
       ~dulla^@204~ ByVal TotalInWords As String,  _
   ~dulla^@204~     ByVal DueDate As Date,  _
                    ByVal CustomerName As String~dulla^@204~              ByVal Original_CreditSal~dulla^@204~ s String,  _
                    ByV~dulla^@204~ ate As Date,  _
                    ~dulla^@204~ l_TotalAmount As Decimal,  _
       ~dulla^@204~ ByVal Original_VAT As Double,  _
   ~dulla^@204~     ByVal Original_GrandTotal As Deci~dulla^@204~                 ByVal Original_TotalI~dulla^@204~ ing,  _
                    ByVal Or~dulla^@204~ e As Date,  _
                    By~dulla^@204~ CustomerName As String) As Integer
 ~dulla^@204~  (CreditSalesInvoiceNo Is Nothing) Th~dulla^@204~        Throw New System.ArgumentNullE~dulla^@204~ ditSalesInvoiceNo")
            Else~dulla^@204~      Me.Adapter.UpdateCommand.Paramet~dulla^@204~ = CType(CreditSalesInvoiceNo,String)~dulla^@204~ End If
            Me.Adapter.Update~dulla^@204~ eters(1).Value = CType(_Date,Date)
 ~dulla^@204~ .Adapter.UpdateCommand.Parameters(2).~dulla^@204~ (TotalAmount,Decimal)
            Me~dulla^@204~ teCommand.Parameters(3).Value = CType~dulla^@204~ 
            Me.Adapter.UpdateCommand~dulla^@204~ ).Value = CType(GrandTotal,Decimal)
~dulla^@204~ f (TotalInWords Is Nothing) Then
   ~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(5~dulla^@204~ tem.DBNull.Value
            Else
 ~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ Type(TotalInWords,String)
          ~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ lue = CType(DueDate,Date)
          ~dulla^@204~ rName Is Nothing) Then
             ~dulla^@204~ System.ArgumentNullException("Custome~dulla^@204~         Else
                Me.Adap~dulla^@204~ mand.Parameters(7).Value = CType(Cust~dulla^@204~ ng)
            End If
            ~dulla^@204~ CreditSalesInvoiceNo Is Nothing) Then~dulla^@204~      Throw New System.ArgumentNullExc~dulla^@204~ nal_CreditSalesInvoiceNo")
         ~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ .Value = CType(Original_CreditSalesIn~dulla^@204~ g)
            End If
            M~dulla^@204~ ateCommand.Parameters(9).Value = CTyp~dulla^@204~ te,Date)
            Me.Adapter.Upda~dulla^@204~ ameters(10).Value = CType(Original_To~dulla^@204~ imal)
            Me.Adapter.UpdateC~dulla^@204~ ters(11).Value = CType(Original_VAT,D~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ ue = CType(Original_GrandTotal,Decima~dulla^@204~    If (Original_TotalInWords Is Nothi~dulla^@204~              Me.Adapter.UpdateCommand~dulla^@204~ 3).Value = CType(1,Object)
         ~dulla^@204~ pter.UpdateCommand.Parameters(14).Val~dulla^@204~ BNull.Value
            Else
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(13).~dulla^@204~ (0,Object)
                Me.Adapte~dulla^@204~ nd.Parameters(14).Value = CType(Origi~dulla^@204~ rds,String)
            End If
    ~dulla^@204~ apter.UpdateCommand.Parameters(15).Va~dulla^@204~ riginal_DueDate,Date)
            If~dulla^@204~ stomerName Is Nothing) Then
        ~dulla^@204~  New System.ArgumentNullException("Or~dulla^@204~ erName")
            Else
         ~dulla^@204~ pter.UpdateCommand.Parameters(16).Val~dulla^@204~ iginal_CustomerName,String)
        ~dulla^@204~            Dim previousConnectionStat~dulla^@204~ ata.ConnectionState = Me.Adapter.Upda~dulla^@204~ nection.State
            If ((Me.Ad~dulla^@204~ ommand.Connection.State And System.Da~dulla^@204~ State.Open)  _
                     ~dulla^@204~ Data.ConnectionState.Open) Then
    ~dulla^@204~ e.Adapter.UpdateCommand.Connection.Op~dulla^@204~    End If
            Try 
        ~dulla^@204~ eturnValue As Integer = Me.Adapter.Up~dulla^@204~ xecuteNonQuery
                Retur~dulla^@204~ 
            Finally
              ~dulla^@204~ sConnectionState = System.Data.Connec~dulla^@204~ sed) Then
                    Me.Ada~dulla^@204~ mmand.Connection.Close
             ~dulla^@204~           End Try
        End Functi~dulla^@204~ lass
    
    <System.CodeDom.Compi~dulla^@204~ CodeAttribute("System.Data.Design.Typ~dulla^@204~ rator", "2.0.0.0"),  _
     System.C~dulla^@204~ .DesignerCategoryAttribute("code"),  ~dulla^@204~ m.ComponentModel.ToolboxItem(true),  ~dulla^@204~ m.ComponentModel.DataObjectAttribute(~dulla^@204~    System.ComponentModel.DesignerAttr~dulla^@204~ oft.VSDesigner.DataSource.Design.Tabl~dulla^@204~ ner, Microsoft.VSDesigner"& _ 
     ~dulla^@204~ =8.0.0.0, Culture=neutral, PublicKeyT~dulla^@204~ 11d50a3a"),  _
     System.Component~dulla^@204~ HelpKeywordAttribute("vs.data.TableAd~dulla^@204~     Partial Public Class CustomersTab~dulla^@204~       Inherits System.ComponentModel.~dulla^@204~       
        Private WithEvents _a~dulla^@204~ tem.Data.SqlClient.SqlDataAdapter
  ~dulla^@204~    Private _connection As System.Data~dulla^@204~ lConnection
        
        Privat~dulla^@204~ lection() As System.Data.SqlClient.Sq~dulla^@204~      
        Private _clearBeforeFi~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ 
            MyBase.New
           ~dulla^@204~ reFill = true
        End Sub
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Private ReadOnly Proper~dulla^@204~ As System.Data.SqlClient.SqlDataAdapt~dulla^@204~    Get
                If (Me._adapt~dulla^@204~ ) Then
                    Me.InitAd~dulla^@204~           End If
                Ret~dulla^@204~ er
            End Get
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Friend P~dulla^@204~ ction() As System.Data.SqlClient.SqlC~dulla^@204~           Get
                If (Me~dulla^@204~ Is Nothing) Then
                   ~dulla^@204~ ction
                End If
      ~dulla^@204~ urn Me._connection
            End G~dulla^@204~    Set
                Me._connectio~dulla^@204~               If (Not (Me.Adapter.Ins~dulla^@204~ s Nothing) Then
                    ~dulla^@204~ sertCommand.Connection = value
     ~dulla^@204~ d If
                If (Not (Me.Ada~dulla^@204~ mmand) Is Nothing) Then
            ~dulla^@204~ apter.DeleteCommand.Connection = valu~dulla^@204~       End If
                If (Not~dulla^@204~ UpdateCommand) Is Nothing) Then
    ~dulla^@204~    Me.Adapter.UpdateCommand.Connectio~dulla^@204~               End If
               ~dulla^@204~ eger = 0
                Do While (i~dulla^@204~ Collection.Length)
                 ~dulla^@204~ e.CommandCollection(i)) Is Nothing) T~dulla^@204~                 CType(Me.CommandColle~dulla^@204~ em.Data.SqlClient.SqlCommand).Connect~dulla^@204~                     End If
         ~dulla^@204~ = (i + 1)
                Loop
    ~dulla^@204~ et
        End Property
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Protected ReadOnly Property C~dulla^@204~ ion() As System.Data.SqlClient.SqlCom~dulla^@204~        Get
                If (Me._c~dulla^@204~ ion Is Nothing) Then
               ~dulla^@204~ ommandCollection
                End~dulla^@204~         Return Me._commandCollection~dulla^@204~ End Get
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Property ClearBef~dulla^@204~ Boolean
            Get
           ~dulla^@204~ e._clearBeforeFill
            End G~dulla^@204~    Set
                Me._clearBefo~dulla^@204~ e
            End Set
        End P~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Private S~dulla^@204~ r()
            Me._adapter = New Sy~dulla^@204~ Client.SqlDataAdapter
            Di~dulla^@204~ g As System.Data.Common.DataTableMapp~dulla^@204~ tem.Data.Common.DataTableMapping
   ~dulla^@204~ eMapping.SourceTable = "Table"
     ~dulla^@204~ apping.DataSetTable = "Customers"
  ~dulla^@204~ leMapping.ColumnMappings.Add("Custome~dulla^@204~ omerName")
            tableMapping.~dulla^@204~ s.Add("SubCity", "SubCity")
        ~dulla^@204~ ing.ColumnMappings.Add("Kebele", "Keb~dulla^@204~       tableMapping.ColumnMappings.Add~dulla^@204~ HouseNo")
            tableMapping.ColumnMappings.Add("Tel", "Tel")
         ~dulla^@204~ ng.ColumnMappings.Add("Fax", "Fax")
~dulla^@204~ ableMapping.ColumnMappings.Add("Posta~dulla^@204~ ostalAddress")
            tableMapp~dulla^@204~ pings.Add("Email", "Email")
        ~dulla^@204~ ing.ColumnMappings.Add("CustomerVATRe~dulla^@204~ erVATRegNo")
            tableMappin~dulla^@204~ ngs.Add("CustomerTINNo", "CustomerTIN~dulla^@204~      tableMapping.ColumnMappings.Add(~dulla^@204~ OfReg", "CustomerDateOfReg")
       ~dulla^@204~ ter.TableMappings.Add(tableMapping)
~dulla^@204~ e._adapter.DeleteCommand = New System~dulla^@204~ nt.SqlCommand
            Me._adapte~dulla^@204~ nd.Connection = Me.Connection
      ~dulla^@204~ pter.DeleteCommand.CommandText = "DEL~dulla^@204~ ].[Customers] WHERE (([CustomerName] ~dulla^@204~ ustomerName) AN"& _ 
               ~dulla^@204~ _SubCity = 1 AND [SubCity] IS NULL) O~dulla^@204~ = @Original_SubCity"& _ 
           ~dulla^@204~ ((@IsNull_Kebele = 1 AND [Kebele] IS ~dulla^@204~ bele] = @Original_Kebel"& _ 
       ~dulla^@204~  AND ((@IsNull_HouseNo = 1 AND [House~dulla^@204~ OR ([HouseNo] = @Original_H"& _ 
   ~dulla^@204~ "ouseNo)) AND ((@IsNull_Tel = 1 AND [~dulla^@204~  OR ([Tel] = @Original_Tel)) AN"& _ ~dulla^@204~     "D ((@IsNull_Fax = 1 AND [Fax] IS~dulla^@204~ ax] = @Original_Fax)) AND ((@IsNull"&~dulla^@204~         "_PostalAddress = 1 AND [Post~dulla^@204~  NULL) OR ([PostalAddress] = @Origina~dulla^@204~             "PostalAddress)) AND ((@I~dulla^@204~  1 AND [Email] IS NULL) OR ([Email] =~dulla^@204~                 "inal_Email)) AND ((@~dulla^@204~ erVATRegNo = 1 AND [CustomerVATRegNo]~dulla^@204~ _ 
                "OR ([CustomerVAT~dulla^@204~ ginal_CustomerVATRegNo)) AND ((@IsNul~dulla^@204~ N"& _ 
                "o = 1 AND [C~dulla^@204~  IS NULL) OR ([CustomerTINNo] = @Orig~dulla^@204~ TINNo"& _ 
                ")) AND (~dulla^@204~ omerDateOfReg = 1 AND [CustomerDateOf~dulla^@204~  OR ([Cus"& _ 
                "tome~dulla^@204~  @Original_CustomerDateOfReg)))"
   ~dulla^@204~ adapter.DeleteCommand.CommandType = S~dulla^@204~ mmandType.Text
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@Original_CustomerName", Sys~dulla^@204~ bType.[Char], 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "CustomerName", System.Dat~dulla^@204~ ion.Original, false, Nothing, "", "",~dulla^@204~       Me._adapter.DeleteCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ ty", System.Data.SqlDbType.Int, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "SubCity~dulla^@204~ a.DataRowVersion.Original, true, Noth~dulla^@204~ ""))
            Me._adapter.DeleteC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ Original_SubCity", System.Data.SqlDbT~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ City", System.Data.DataRowVersion.Ori~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ leteCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@IsNull_Kebele", Sys~dulla^@204~ bType.Int, 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "Kebele", System.Data.DataRow~dulla^@204~ nal, true, Nothing, "", "", ""))
   ~dulla^@204~ adapter.DeleteCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Original_~dulla^@204~ em.Data.SqlDbType.[Char], 0, System.D~dulla^@204~ Direction.Input, 0, 0, "Kebele", Syst~dulla^@204~ owVersion.Original, false, Nothing, "~dulla^@204~             Me._adapter.DeleteCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ _HouseNo", System.Data.SqlDbType.Int,~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "H~dulla^@204~ em.Data.DataRowVersion.Original, true~dulla^@204~ , "", ""))
            Me._adapter.D~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@Original_HouseNo", System.Data.~dulla^@204~ ar], 0, System.Data.ParameterDirectio~dulla^@204~ , "HouseNo", System.Data.DataRowVersi~dulla^@204~ false, Nothing, "", "", ""))
       ~dulla^@204~ ter.DeleteCommand.Parameters.Add(New ~dulla^@204~ qlClient.SqlParameter("@IsNull_Tel", ~dulla^@204~ qlDbType.Int, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "Tel", System.Data.DataRow~dulla^@204~ nal, true, Nothing, "", "", ""))
   ~dulla^@204~ adapter.DeleteCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Original_~dulla^@204~ Data.SqlDbType.[Char], 0, System.Data~dulla^@204~ ection.Input, 0, 0, "Tel", System.Dat~dulla^@204~ ion.Original, false, Nothing, "", "",~dulla^@204~       Me._adapter.DeleteCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~  System.Data.SqlDbType.Int, 0, System~dulla^@204~ erDirection.Input, 0, 0, "Fax", Syste~dulla^@204~ wVersion.Original, true, Nothing, "",~dulla^@204~           Me._adapter.DeleteCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~ _Fax", System.Data.SqlDbType.[Char], ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "Fa~dulla^@204~ ta.DataRowVersion.Original, false, No~dulla^@204~ , ""))
            Me._adapter.Delet~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@IsNull_PostalAddress", System.Data.~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ PostalAddress", System.Data.DataRowVe~dulla^@204~ l, true, Nothing, "", "", ""))
     ~dulla^@204~ apter.DeleteCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@Original_Po~dulla^@204~  System.Data.SqlDbType.[Char], 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "PostalAd~dulla^@204~ m.Data.DataRowVersion.Original, false~dulla^@204~ , "", ""))
            Me._adapter.D~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@IsNull_Email", System.Data.SqlD~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ l", System.Data.DataRowVersion.Origin~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@Original_Email", System~dulla^@204~ pe.[Char], 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "Email", System.Data.DataRowV~dulla^@204~ al, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.DeleteCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@IsNull_Cu~dulla^@204~ o", System.Data.SqlDbType.Int, 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "Customer~dulla^@204~ stem.Data.DataRowVersion.Original, tr~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@Original_CustomerVATRegNo", S~dulla^@204~ lDbType.NVarChar, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "CustomerVATRegNo", Sy~dulla^@204~ aRowVersion.Original, false, Nothing,~dulla^@204~ 
            Me._adapter.DeleteComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ ll_CustomerTINNo", System.Data.SqlDbT~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ erTINNo", System.Data.DataRowVersion.~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ DeleteCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@Original_Customer~dulla^@204~ m.Data.SqlDbType.[Char], 0, System.Da~dulla^@204~ irection.Input, 0, 0, "CustomerTINNo"~dulla^@204~ .DataRowVersion.Original, false, Noth~dulla^@204~ ""))
            Me._adapter.DeleteC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ IsNull_CustomerDateOfReg", System.Dat~dulla^@204~ nt, 0, System.Data.ParameterDirection~dulla^@204~  "CustomerDateOfReg", System.Data.Dat~dulla^@204~ riginal, true, Nothing, "", "", ""))~dulla^@204~ Me._adapter.DeleteCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@Origi~dulla^@204~ ateOfReg", System.Data.SqlDbType.Date~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ ateOfReg", System.Data.DataRowVersion~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.InsertCommand = New System.Data.Sql~dulla^@204~ mand
            Me._adapter.InsertC~dulla^@204~ tion = Me.Connection
            Me.~dulla^@204~ rtCommand.CommandText = "INSERT INTO ~dulla^@204~ ers] ([CustomerName], [SubCity], [Keb~dulla^@204~ o], [T"& _ 
                "el], [F~dulla^@204~ ddress], [Email], [CustomerVATRegNo],~dulla^@204~ No], [Cust"& _ 
                "omerDateOfReg]) VALUES (@CustomerName, @SubCi~dulla^@204~ @HouseNo, @Tel, @Fax, "& _ 
        ~dulla^@204~ talAddress, @Email, @CustomerVATRegNo~dulla^@204~ NNo, @CustomerDateOfReg);"&Global.Mic~dulla^@204~ Basic.ChrW(13)&Global.Microsoft.Visua~dulla^@204~ 0)&"SELECT CustomerName, SubCity, Keb~dulla^@204~  Tel, Fax, PostalAddress, Email, "& _~dulla^@204~       "CustomerVATRegNo, CustomerTINN~dulla^@204~ teOfReg FROM Customers WHERE (Custome~dulla^@204~           "rName = @CustomerName)"
 ~dulla^@204~ ._adapter.InsertCommand.CommandType =~dulla^@204~ CommandType.Text
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@CustomerName", System.Dat~dulla^@204~ Char], 0, System.Data.ParameterDirect~dulla^@204~  0, "CustomerName", System.Data.DataR~dulla^@204~ rent, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.InsertCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@SubCity~dulla^@204~ a.SqlDbType.[Char], 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "SubCity", System.Da~dulla^@204~ sion.Current, false, Nothing, "", "",~dulla^@204~       Me._adapter.InsertCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ tem.Data.SqlDbType.[Char], 0, System.~dulla^@204~ rDirection.Input, 0, 0, "Kebele", Sys~dulla^@204~ RowVersion.Current, false, Nothing, "~dulla^@204~             Me._adapter.InsertCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ o", System.Data.SqlDbType.[Char], 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "House~dulla^@204~ ata.DataRowVersion.Current, false, No~dulla^@204~ , ""))
            Me._adapter.Inser~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@Tel", System.Data.SqlDbType.[Char],~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "T~dulla^@204~ ata.DataRowVersion.Current, false, No~dulla^@204~ , ""))
            Me._adapter.Inser~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@Fax", System.Data.SqlDbType.[Char],~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "F~dulla^@204~ ata.DataRowVersion.Current, false, No~dulla^@204~ , ""))
            Me._adapter.Inser~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@PostalAddress", System.Data.SqlDbTy~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ alAddress", System.Data.DataRowVersio~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.InsertCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@Email", System.~dulla^@204~ e.[Char], 0, System.Data.ParameterDir~dulla^@204~  0, 0, "Email", System.Data.DataRowVe~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.InsertCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@CustomerVAT~dulla^@204~ m.Data.SqlDbType.NVarChar, 0, System.~dulla^@204~ rDirection.Input, 0, 0, "CustomerVATR~dulla^@204~ .Data.DataRowVersion.Current, false, ~dulla^@204~ "", ""))
            Me._adapter.Ins~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@CustomerTINNo", System.Data.SqlDb~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ stomerTINNo", System.Data.DataRowVers~dulla^@204~ false, Nothing, "", "", ""))
       ~dulla^@204~ ter.InsertCommand.Parameters.Add(New ~dulla^@204~ qlClient.SqlParameter("@CustomerDateO~dulla^@204~ .Data.SqlDbType.DateTime, 0, System.D~dulla^@204~ Direction.Input, 0, 0, "CustomerDateO~dulla^@204~ .Data.DataRowVersion.Current, false, ~dulla^@204~ "", ""))
            Me._adapter.Upd~dulla^@204~ New System.Data.SqlClient.SqlCommand~dulla^@204~ Me._adapter.UpdateCommand.Connection ~dulla^@204~ on
            Me._adapter.UpdateCom~dulla^@204~ ext = "UPDATE [dbo].[Customers] SET [~dulla^@204~  = @CustomerName, [SubCity] = @SubCit~dulla^@204~            ", [Kebele] = @Kebele, [Ho~dulla^@204~ seNo, [Tel] = @Tel, [Fax] = @Fax, [Po~dulla^@204~                "ddress] = @PostalAddr~dulla^@204~ = @Email, [CustomerVATRegNo] = @Custo~dulla^@204~  
                "No, [CustomerTINN~dulla^@204~ rTINNo, [CustomerDateOfReg] = @Custom~dulla^@204~ "& _ 
                "HERE (([Custo~dulla^@204~ riginal_CustomerName) AND ((@IsNull_S~dulla^@204~ D [S"& _ 
                "ubCity] I~dulla^@204~ SubCity] = @Original_SubCity)) AND ((~dulla^@204~ e = 1 AN"& _ 
                "D [Ke~dulla^@204~ ) OR ([Kebele] = @Original_Kebele)) A~dulla^@204~ HouseNo = 1 "& _ 
                "A~dulla^@204~ IS NULL) OR ([HouseNo] = @Original_Ho~dulla^@204~ (@IsNull_Tel = 1"& _ 
              ~dulla^@204~  IS NULL) OR ([Tel] = @Original_Tel))~dulla^@204~ l_Fax = 1 AND [Fax] "& _ 
          ~dulla^@204~ L) OR ([Fax] = @Original_Fax)) AND ((~dulla^@204~ lAddress = 1 AND [Postal"& _ 
      ~dulla^@204~ dress] IS NULL) OR ([PostalAddress] =~dulla^@204~ stalAddress)) AND ((@IsNull_"& _ 
  ~dulla^@204~  "Email = 1 AND [Email] IS NULL) OR (~dulla^@204~ iginal_Email)) AND ((@IsNull_Cus"& _ ~dulla^@204~      "tomerVATRegNo = 1 AND [Customer~dulla^@204~ NULL) OR ([CustomerVATRegNo] = @Orig"~dulla^@204~          "inal_CustomerVATRegNo)) AND~dulla^@204~ stomerTINNo = 1 AND [CustomerTINNo] I~dulla^@204~              "ULL) OR ([CustomerTINNo~dulla^@204~ _CustomerTINNo)) AND ((@IsNull_Custom~dulla^@204~ 
                "fReg = 1 AND [Custo~dulla^@204~  IS NULL) OR ([CustomerDateOfReg] = @~dulla^@204~  _ 
                "stomerDateOfReg~dulla^@204~ Microsoft.VisualBasic.ChrW(13)&Global~dulla^@204~ sualBasic.ChrW(10)&"SELECT CustomerNa~dulla^@204~ Kebele, HouseNo, Tel, Fax, Po"& _ 
 ~dulla^@204~   "stalAddress, Email, CustomerVATReg~dulla^@204~ INNo, CustomerDateOfReg FROM Cust"& _~dulla^@204~       "omers WHERE (CustomerName = @C~dulla^@204~ 
            Me._adapter.UpdateComma~dulla^@204~ e = System.Data.CommandType.Text
   ~dulla^@204~ adapter.UpdateCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@CustomerN~dulla^@204~ Data.SqlDbType.[Char], 0, System.Data~dulla^@204~ ection.Input, 0, 0, "CustomerName", S~dulla^@204~ taRowVersion.Current, false, Nothing,~dulla^@204~ 
            Me._adapter.UpdateComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ ity", System.Data.SqlDbType.[Char], 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Sub~dulla^@204~ .Data.DataRowVersion.Current, false, ~dulla^@204~ "", ""))
            Me._adapter.Upd~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@Kebele", System.Data.SqlDbType.[C~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ System.Data.DataRowVersion.Current, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@HouseNo", System.Data.SqlDb~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ useNo", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ dateCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@Tel", System.Data.S~dulla^@204~ r], 0, System.Data.ParameterDirection~dulla^@204~  "Tel", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ dateCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@Fax", System.Data.S~dulla^@204~ r], 0, System.Data.ParameterDirection~dulla^@204~  "Fax", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ dateCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@PostalAddress", Sys~dulla^@204~ bType.[Char], 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "PostalAddress", System.Da~dulla^@204~ sion.Current, false, Nothing, "", "",~dulla^@204~       Me._adapter.UpdateCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ em.Data.SqlDbType.[Char], 0, System.D~dulla^@204~ Direction.Input, 0, 0, "Email", Syste~dulla^@204~ wVersion.Current, false, Nothing, "",~dulla^@204~           Me._adapter.UpdateCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~ VATRegNo", System.Data.SqlDbType.NVar~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ ATRegNo", System.Data.DataRowVersion.~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ UpdateCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@CustomerTINNo", System.Data.SqlDbType.[Char], 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "CustomerTINNo",~dulla^@204~ DataRowVersion.Current, false, Nothin~dulla^@204~ ))
            Me._adapter.UpdateCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ stomerDateOfReg", System.Data.SqlDbTy~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ stomerDateOfReg", System.Data.DataRow~dulla^@204~ nt, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.UpdateCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Original_~dulla^@204~ , System.Data.SqlDbType.[Char], 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "Custome~dulla^@204~ m.Data.DataRowVersion.Original, false~dulla^@204~ , "", ""))
            Me._adapter.U~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@IsNull_SubCity", System.Data.Sq~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ bCity", System.Data.DataRowVersion.Or~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ dateCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@Original_SubCity", ~dulla^@204~ qlDbType.[Char], 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "SubCity", System.Data.~dulla^@204~ n.Original, false, Nothing, "", "", "~dulla^@204~     Me._adapter.UpdateCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@I~dulla^@204~ , System.Data.SqlDbType.Int, 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "Kebele", S~dulla^@204~ taRowVersion.Original, true, Nothing,~dulla^@204~ 
            Me._adapter.UpdateComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ inal_Kebele", System.Data.SqlDbType.[~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@IsNull_HouseNo", System.D~dulla^@204~ .Int, 0, System.Data.ParameterDirecti~dulla^@204~ 0, "HouseNo", System.Data.DataRowVers~dulla^@204~  true, Nothing, "", "", ""))
       ~dulla^@204~ ter.UpdateCommand.Parameters.Add(New ~dulla^@204~ qlClient.SqlParameter("@Original_Hous~dulla^@204~ Data.SqlDbType.[Char], 0, System.Data~dulla^@204~ ection.Input, 0, 0, "HouseNo", System~dulla^@204~ Version.Original, false, Nothing, "",~dulla^@204~           Me._adapter.UpdateCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~ el", System.Data.SqlDbType.Int, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "Tel", S~dulla^@204~ taRowVersion.Original, true, Nothing,~dulla^@204~ 
            Me._adapter.UpdateComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ inal_Tel", System.Data.SqlDbType.[Cha~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ m.Data.DataRowVersion.Original, false~dulla^@204~ , "", ""))
            Me._adapter.U~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@IsNull_Fax", System.Data.SqlDbT~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ System.Data.DataRowVersion.Original, ~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@Original_Fax", System.Data.~dulla^@204~ ar], 0, System.Data.ParameterDirectio~dulla^@204~ , "Fax", System.Data.DataRowVersion.O~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ UpdateCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@IsNull_PostalAddr~dulla^@204~ Data.SqlDbType.Int, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "PostalAddress", Sys~dulla^@204~ RowVersion.Original, true, Nothing, "~dulla^@204~             Me._adapter.UpdateCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ al_PostalAddress", System.Data.SqlDbT~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ talAddress", System.Data.DataRowVersi~dulla^@204~ false, Nothing, "", "", ""))
       ~dulla^@204~ ter.UpdateCommand.Parameters.Add(New ~dulla^@204~ qlClient.SqlParameter("@IsNull_Email"~dulla^@204~ .SqlDbType.Int, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "Email", System.Data.Dat~dulla^@204~ riginal, true, Nothing, "", "", ""))~dulla^@204~ Me._adapter.UpdateCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@Origi~dulla^@204~ ystem.Data.SqlDbType.[Char], 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "Email", Sy~dulla^@204~ aRowVersion.Original, false, Nothing,~dulla^@204~ 
            Me._adapter.UpdateComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ ll_CustomerVATRegNo", System.Data.Sql~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ tomerVATRegNo", System.Data.DataRowVe~dulla^@204~ l, true, Nothing, "", "", ""))
     ~dulla^@204~ apter.UpdateCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@Original_Cu~dulla^@204~ o", System.Data.SqlDbType.NVarChar, 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Cus~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@IsNull_CustomerTINNo", ~dulla^@204~ qlDbType.Int, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "CustomerTINNo", System.Da~dulla^@204~ sion.Original, true, Nothing, "", "",~dulla^@204~       Me._adapter.UpdateCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ tomerTINNo", System.Data.SqlDbType.[C~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ INNo", System.Data.DataRowVersion.Ori~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ dateCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@IsNull_CustomerDate~dulla^@204~ m.Data.SqlDbType.Int, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "CustomerDateOfReg~dulla^@204~ a.DataRowVersion.Original, true, Noth~dulla^@204~ ""))
            Me._adapter.UpdateC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ Original_CustomerDateOfReg", System.D~dulla^@204~ .DateTime, 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "CustomerDateOfReg", System.D~dulla^@204~ rsion.Original, false, Nothing, "", "~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ te Sub InitConnection()
            ~dulla^@204~ n = New System.Data.SqlClient.SqlConn~dulla^@204~        Me._connection.ConnectionStrin~dulla^@204~ ventoryControlSystem.My.MySettings.De~dulla^@204~ eInfoConnection
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Private Sub InitComma~dulla^@204~ )
            Me._commandCollection ~dulla^@204~ Data.SqlClient.SqlCommand(0) {}
    ~dulla^@204~ ommandCollection(0) = New System.Data~dulla^@204~ lCommand
            Me._commandColl~dulla^@204~ nection = Me.Connection
            ~dulla^@204~ llection(0).CommandText = "SELECT Cus~dulla^@204~ bCity, Kebele, HouseNo, Tel, Fax, Pos~dulla^@204~ mail, Cu"& _ 
                "stome~dulla^@204~ stomerTINNo, CustomerDateOfReg FROM d~dulla^@204~ 
            Me._commandCollection(0~dulla^@204~  = System.Data.CommandType.Text
    ~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute(),  _
         Syst~dulla^@204~ odel.Design.HelpKeywordAttribute("vs.~dulla^@204~ pter"),  _
         System.Component~dulla^@204~ ectMethodAttribute(System.ComponentMo~dulla^@204~ tMethodType.Fill, true)>  _
        ~dulla^@204~ ads Overridable Function Fill(ByVal d~dulla^@204~ urchaseInfoDataSet2.CustomersDataTabl~dulla^@204~ 
            Me.Adapter.SelectComman~dulla^@204~ dCollection(0)
            If (Me.Cl~dulla^@204~  = true) Then
                dataTa~dulla^@204~           End If
            Dim ret~dulla^@204~ nteger = Me.Adapter.Fill(dataTable)
~dulla^@204~ eturn returnValue
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute(),  _
         System.Compon~dulla^@204~ gn.HelpKeywordAttribute("vs.data.Tabl~dulla^@204~ _
         System.ComponentModel.Dat~dulla^@204~ Attribute(System.ComponentModel.DataO~dulla^@204~ pe.[Select], true)>  _
        Publi~dulla^@204~ verridable Function GetData() As Purc~dulla^@204~ et2.CustomersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollec~dulla^@204~         Dim dataTable As PurchaseInfo~dulla^@204~ omersDataTable = New PurchaseInfoData~dulla^@204~ sDataTable
            Me.Adapter.Fi~dulla^@204~ 
            Return dataTable
     ~dulla^@204~ on
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute(),  _
         ~dulla^@204~ entModel.Design.HelpKeywordAttribute(~dulla^@204~ eAdapter")>  _
        Public Overlo~dulla^@204~ le Function Update(ByVal dataTable As~dulla^@204~ DataSet2.CustomersDataTable) As Integ~dulla^@204~    Return Me.Adapter.Update(dataTable~dulla^@204~ d Function
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute(),  _
 ~dulla^@204~ m.ComponentModel.Design.HelpKeywordAt~dulla^@204~ ata.TableAdapter")>  _
        Publi~dulla^@204~ verridable Function Update(ByVal data~dulla^@204~ seInfoDataSet2) As Integer
         ~dulla^@204~ Adapter.Update(dataSet, "Customers")~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute(),  _
   ~dulla^@204~ ComponentModel.Design.HelpKeywordAttr~dulla^@204~ a.TableAdapter")>  _
        Public ~dulla^@204~ rridable Function Update(ByVal dataRo~dulla^@204~ ata.DataRow) As Integer
            ~dulla^@204~ pter.Update(New System.Data.DataRow()~dulla^@204~         End Function
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~      System.ComponentModel.Design.Hel~dulla^@204~ bute("vs.data.TableAdapter")>  _
   ~dulla^@204~ verloads Overridable Function Update(~dulla^@204~ s() As System.Data.DataRow) As Intege~dulla^@204~   Return Me.Adapter.Update(dataRows)~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute(),  _
   ~dulla^@204~ ComponentModel.Design.HelpKeywordAttr~dulla^@204~ a.TableAdapter"),  _
         System~dulla^@204~ el.DataObjectMethodAttribute(System.C~dulla^@204~ .DataObjectMethodType.Delete, true)> ~dulla^@204~ ublic Overloads Overridable Function ~dulla^@204~ Original_CustomerName As String, ByVa~dulla^@204~ bCity As String, ByVal Original_Kebel~dulla^@204~ ByVal Original_HouseNo As String, ByV~dulla^@204~ el As String, ByVal Original_Fax As S~dulla^@204~ Original_PostalAddress As String, ByV~dulla^@204~ mail As String, ByVal Original_Custom~dulla^@204~  String, ByVal Original_CustomerTINNo~dulla^@204~ yVal Original_CustomerDateOfReg As Sy~dulla^@204~ (Of Date)) As Integer
            If~dulla^@204~ stomerName Is Nothing) Then
        ~dulla^@204~  New System.ArgumentNullException("Or~dulla^@204~ erName")
            Else
         ~dulla^@204~ pter.DeleteCommand.Parameters(0).Valu~dulla^@204~ ginal_CustomerName,String)
         ~dulla^@204~           If (Original_SubCity Is Not~dulla^@204~                Me.Adapter.DeleteComma~dulla^@204~ (1).Value = CType(1,Object)
        ~dulla^@204~ apter.DeleteCommand.Parameters(2).Val~dulla^@204~ BNull.Value
            Else
      ~dulla^@204~ Adapter.DeleteCommand.Parameters(1).V~dulla^@204~ 0,Object)
                Me.Adapter~dulla^@204~ d.Parameters(2).Value = CType(Origina~dulla^@204~ ing)
            End If
           ~dulla^@204~ _Kebele Is Nothing) Then
           ~dulla^@204~ er.DeleteCommand.Parameters(3).Value ~dulla^@204~ ect)
                Me.Adapter.Dele~dulla^@204~ ameters(4).Value = System.DBNull.Valu~dulla^@204~   Else
                Me.Adapter.De~dulla^@204~ arameters(3).Value = CType(0,Object)~dulla^@204~     Me.Adapter.DeleteCommand.Paramete~dulla^@204~  CType(Original_Kebele,String)
     ~dulla^@204~ 
            If (Original_HouseNo Is~dulla^@204~ n
                Me.Adapter.DeleteC~dulla^@204~ ters(5).Value = CType(1,Object)
    ~dulla^@204~ e.Adapter.DeleteCommand.Parameters(6)~dulla^@204~ em.DBNull.Value
            Else
  ~dulla^@204~  Me.Adapter.DeleteCommand.Parameters(~dulla^@204~ ype(0,Object)
                Me.Ada~dulla^@204~ mmand.Parameters(6).Value = CType(Ori~dulla^@204~ ,String)
            End If
       ~dulla^@204~ inal_Tel Is Nothing) Then
          ~dulla^@204~ ter.DeleteCommand.Parameters(7).Value~dulla^@204~ ject)
                Me.Adapter.Del~dulla^@204~ rameters(8).Value = System.DBNull.Val~dulla^@204~    Else
                Me.Adapter.D~dulla^@204~ Parameters(7).Value = CType(0,Object)~dulla^@204~      Me.Adapter.DeleteCommand.Paramet~dulla^@204~ = CType(Original_Tel,String)
       ~dulla^@204~             If (Original_Fax Is Nothi~dulla^@204~              Me.Adapter.DeleteCommand~dulla^@204~ ).Value = CType(1,Object)
          ~dulla^@204~ ter.DeleteCommand.Parameters(10).Valu~dulla^@204~ Null.Value
            Else
       ~dulla^@204~ dapter.DeleteCommand.Parameters(9).Va~dulla^@204~ ,Object)
                Me.Adapter.~dulla^@204~ .Parameters(10).Value = CType(Origina~dulla^@204~ 
            End If
            If ~dulla^@204~ talAddress Is Nothing) Then
        ~dulla^@204~ apter.DeleteCommand.Parameters(11).Va~dulla^@204~ ,Object)
                Me.Adapter.~dulla^@204~ .Parameters(12).Value = System.DBNull~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(11).Value = CType(0,Ob~dulla^@204~           Me.Adapter.DeleteCommand.Pa~dulla^@204~ Value = CType(Original_PostalAddress,~dulla^@204~         End If
            If (Origi~dulla^@204~ Nothing) Then
                Me.Ada~dulla^@204~ mmand.Parameters(13).Value = CType(1,~dulla^@204~             Me.Adapter.DeleteCommand.~dulla^@204~ ).Value = System.DBNull.Value
      ~dulla^@204~                Me.Adapter.DeleteComma~dulla^@204~ (13).Value = CType(0,Object)
       ~dulla^@204~ dapter.DeleteCommand.Parameters(14).V~dulla^@204~ Original_Email,String)
            E~dulla^@204~       If (Original_CustomerVATRegNo I~dulla^@204~ en
                Me.Adapter.Delete~dulla^@204~ eters(15).Value = CType(1,Object)
  ~dulla^@204~  Me.Adapter.DeleteCommand.Parameters(~dulla^@204~ ystem.DBNull.Value
            Else~dulla^@204~     Me.Adapter.DeleteCommand.Paramete~dulla^@204~ = CType(0,Object)
                Me~dulla^@204~ teCommand.Parameters(16).Value = CTyp~dulla^@204~ stomerVATRegNo,String)
            E~dulla^@204~       If (Original_CustomerTINNo Is N~dulla^@204~ 
                Me.Adapter.DeleteCom~dulla^@204~ rs(17).Value = CType(1,Object)
     ~dulla^@204~ .Adapter.DeleteCommand.Parameters(18)~dulla^@204~ em.DBNull.Value
            Else
  ~dulla^@204~  Me.Adapter.DeleteCommand.Parameters(~dulla^@204~ Type(0,Object)
                Me.Ad~dulla^@204~ ommand.Parameters(18).Value = CType(O~dulla^@204~ merTINNo,String)
            End If~dulla^@204~ If (Original_CustomerDateOfReg.HasVal~dulla^@204~ en
                Me.Adapter.Delete~dulla^@204~ eters(19).Value = CType(0,Object)
  ~dulla^@204~  Me.Adapter.DeleteCommand.Parameters(~dulla^@204~ Type(Original_CustomerDateOfReg.Value~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(19).Value = CType(1,Ob~dulla^@204~           Me.Adapter.DeleteCommand.Pa~dulla^@204~ Value = System.DBNull.Value
        ~dulla^@204~            Dim previousConnectionStat~dulla^@204~ ata.ConnectionState = Me.Adapter.Dele~dulla^@204~ nection.State
            If ((Me.Ad~dulla^@204~ ommand.Connection.State And System.Da~dulla^@204~ State.Open)  _
                     ~dulla^@204~ Data.ConnectionState.Open) Then
    ~dulla^@204~ e.Adapter.DeleteCommand.Connection.Op~dulla^@204~    End If
            Try 
        ~dulla^@204~ eturnValue As Integer = Me.Adapter.De~dulla^@204~ xecuteNonQuery
                Retur~dulla^@204~ 
            Finally
              ~dulla^@204~ sConnectionState = System.Data.Connec~dulla^@204~ sed) Then
                    Me.Ada~dulla^@204~ mmand.Connection.Close
             ~dulla^@204~           End Try
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute(),  _
         System.Compon~dulla^@204~ gn.HelpKeywordAttribute("vs.data.Tabl~dulla^@204~ _
         System.ComponentModel.Dat~dulla^@204~ Attribute(System.ComponentModel.DataO~dulla^@204~ pe.Insert, true)>  _
        Public ~dulla^@204~ rridable Function Insert(ByVal Custom~dulla^@204~ ing, ByVal SubCity As String, ByVal Kebele As String, ByVal HouseNo As String, ~dulla^@204~ String, ByVal Fax As String, ByVal Po~dulla^@204~ s String, ByVal Email As String, ByVa~dulla^@204~ RegNo As String, ByVal CustomerTINNo ~dulla^@204~ Val CustomerDateOfReg As System.Nulla~dulla^@204~  As Integer
            If (Customer~dulla^@204~ ng) Then
                Throw New S~dulla^@204~ tNullException("CustomerName")
     ~dulla^@204~                 Me.Adapter.InsertComm~dulla^@204~ s(0).Value = CType(CustomerName,Strin~dulla^@204~    End If
            If (SubCity Is~dulla^@204~ n
                Me.Adapter.InsertC~dulla^@204~ ters(1).Value = System.DBNull.Value
~dulla^@204~ lse
                Me.Adapter.Inser~dulla^@204~ meters(1).Value = CType(SubCity,Strin~dulla^@204~    End If
            If (Kebele Is ~dulla^@204~ 
                Me.Adapter.InsertCo~dulla^@204~ ers(2).Value = System.DBNull.Value
 ~dulla^@204~ se
                Me.Adapter.Insert~dulla^@204~ eters(2).Value = CType(Kebele,String)~dulla^@204~  End If
            If (HouseNo Is N~dulla^@204~ 
                Me.Adapter.InsertCom~dulla^@204~ rs(3).Value = System.DBNull.Value
  ~dulla^@204~ e
                Me.Adapter.InsertC~dulla^@204~ ters(3).Value = CType(HouseNo,String)~dulla^@204~  End If
            If (Tel Is Nothi~dulla^@204~              Me.Adapter.InsertCommand~dulla^@204~ ).Value = System.DBNull.Value
      ~dulla^@204~                Me.Adapter.InsertComma~dulla^@204~ (4).Value = CType(Tel,String)
      ~dulla^@204~ 
            If (Fax Is Nothing) Then~dulla^@204~      Me.Adapter.InsertCommand.Paramet~dulla^@204~ = System.DBNull.Value
            El~dulla^@204~        Me.Adapter.InsertCommand.Param~dulla^@204~ e = CType(Fax,String)
            En~dulla^@204~      If (PostalAddress Is Nothing) Th~dulla^@204~        Me.Adapter.InsertCommand.Param~dulla^@204~ e = System.DBNull.Value
            ~dulla^@204~          Me.Adapter.InsertCommand.Par~dulla^@204~ lue = CType(PostalAddress,String)
  ~dulla^@204~  If
            If (Email Is Nothing~dulla^@204~            Me.Adapter.InsertCommand.P~dulla^@204~ Value = System.DBNull.Value
        ~dulla^@204~              Me.Adapter.InsertCommand~dulla^@204~ ).Value = CType(Email,String)
      ~dulla^@204~ 
            If (CustomerVATRegNo Is ~dulla^@204~ 
                Me.Adapter.InsertCo~dulla^@204~ ers(8).Value = System.DBNull.Value
 ~dulla^@204~ se
                Me.Adapter.Insert~dulla^@204~ eters(8).Value = CType(CustomerVATReg~dulla^@204~            End If
            If (Cu~dulla^@204~ s Nothing) Then
                Me.A~dulla^@204~ Command.Parameters(9).Value = System.~dulla^@204~ 
            Else
                Me~dulla^@204~ rtCommand.Parameters(9).Value = CType~dulla^@204~ o,String)
            End If
      ~dulla^@204~ tomerDateOfReg.HasValue = true) Then~dulla^@204~     Me.Adapter.InsertCommand.Paramete~dulla^@204~ = CType(CustomerDateOfReg.Value,Date)~dulla^@204~  Else
                Me.Adapter.Ins~dulla^@204~ rameters(10).Value = System.DBNull.Va~dulla^@204~     End If
            Dim previousC~dulla^@204~ e As System.Data.ConnectionState = Me~dulla^@204~ rtCommand.Connection.State
         ~dulla^@204~ apter.InsertCommand.Connection.State ~dulla^@204~ ta.ConnectionState.Open)  _
        ~dulla^@204~    <> System.Data.ConnectionState.Ope~dulla^@204~             Me.Adapter.InsertCommand.~dulla^@204~ en
            End If
            T~dulla^@204~         Dim returnValue As Integer = ~dulla^@204~ sertCommand.ExecuteNonQuery
        ~dulla^@204~ n returnValue
            Finally
 ~dulla^@204~   If (previousConnectionState = Syste~dulla^@204~ tionState.Closed) Then
             ~dulla^@204~ pter.InsertCommand.Connection.Close
~dulla^@204~    End If
            End Try
     ~dulla^@204~ on
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute(),  _
         ~dulla^@204~ entModel.Design.HelpKeywordAttribute(~dulla^@204~ eAdapter"),  _
         System.Compo~dulla^@204~ aObjectMethodAttribute(System.Compone~dulla^@204~ bjectMethodType.Update, true)>  _
  ~dulla^@204~ Overloads Overridable Function Update~dulla^@204~             ByVal CustomerName As Str~dulla^@204~                 ByVal SubCity As Stri~dulla^@204~                ByVal Kebele As String~dulla^@204~              ByVal HouseNo As String,~dulla^@204~             ByVal Tel As String,  _
~dulla^@204~        ByVal Fax As String,  _
     ~dulla^@204~   ByVal PostalAddress As String,  _
~dulla^@204~        ByVal Email As String,  _
   ~dulla^@204~     ByVal CustomerVATRegNo As String,~dulla^@204~             ByVal CustomerTINNo As St~dulla^@204~                  ByVal CustomerDateOf~dulla^@204~ .Nullable(Of Date),  _
             ~dulla^@204~ Original_CustomerName As String,  _
~dulla^@204~        ByVal Original_SubCity As Stri~dulla^@204~                ByVal Original_Kebele ~dulla^@204~ 
                    ByVal Original_~dulla^@204~ ring,  _
                    ByVal O~dulla^@204~ s String,  _
                    ByV~dulla^@204~ ax As String,  _
                   ~dulla^@204~ al_PostalAddress As String,  _
     ~dulla^@204~   ByVal Original_Email As String,  _~dulla^@204~         ByVal Original_CustomerVATReg~dulla^@204~   _
                    ByVal Origin~dulla^@204~ NNo As String,  _
                  ~dulla^@204~ nal_CustomerDateOfReg As System.Nulla~dulla^@204~  As Integer
            If (Customer~dulla^@204~ ng) Then
                Throw New S~dulla^@204~ tNullException("CustomerName")
     ~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(0).Value = CType(CustomerName,Strin~dulla^@204~    End If
            If (SubCity Is~dulla^@204~ n
                Me.Adapter.UpdateC~dulla^@204~ ters(1).Value = System.DBNull.Value
~dulla^@204~ lse
                Me.Adapter.Updat~dulla^@204~ meters(1).Value = CType(SubCity,Strin~dulla^@204~    End If
            If (Kebele Is ~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(2).Value = System.DBNull.Value
 ~dulla^@204~ se
                Me.Adapter.Update~dulla^@204~ eters(2).Value = CType(Kebele,String)~dulla^@204~  End If
            If (HouseNo Is N~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(3).Value = System.DBNull.Value
  ~dulla^@204~ e
                Me.Adapter.UpdateC~dulla^@204~ ters(3).Value = CType(HouseNo,String)~dulla^@204~  End If
            If (Tel Is Nothi~dulla^@204~              Me.Adapter.UpdateCommand~dulla^@204~ ).Value = System.DBNull.Value
      ~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ (4).Value = CType(Tel,String)
      ~dulla^@204~ 
            If (Fax Is Nothing) Then~dulla^@204~      Me.Adapter.UpdateCommand.Paramet~dulla^@204~ = System.DBNull.Value
            El~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ e = CType(Fax,String)
            En~dulla^@204~      If (PostalAddress Is Nothing) Th~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ e = System.DBNull.Value
            ~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ lue = CType(PostalAddress,String)
  ~dulla^@204~  If
            If (Email Is Nothing~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ Value = System.DBNull.Value
        ~dulla^@204~              Me.Adapter.UpdateCommand~dulla^@204~ ).Value = CType(Email,String)
      ~dulla^@204~ 
            If (CustomerVATRegNo Is ~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(8).Value = System.DBNull.Value
 ~dulla^@204~ se
                Me.Adapter.Update~dulla^@204~ eters(8).Value = CType(CustomerVATReg~dulla^@204~            End If
            If (Cu~dulla^@204~ s Nothing) Then
                Me.A~dulla^@204~ Command.Parameters(9).Value = System.~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(9).Value = CType~dulla^@204~ o,String)
            End If
      ~dulla^@204~ tomerDateOfReg.HasValue = true) Then~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~ = CType(CustomerDateOfReg.Value,Date)~dulla^@204~  Else
                Me.Adapter.Upd~dulla^@204~ rameters(10).Value = System.DBNull.Value
            End If
            If (O~dulla^@204~ merName Is Nothing) Then
           ~dulla^@204~ w System.ArgumentNullException("Origi~dulla^@204~ ame")
            Else
            ~dulla^@204~ r.UpdateCommand.Parameters(11).Value ~dulla^@204~ nal_CustomerName,String)
           ~dulla^@204~         If (Original_SubCity Is Nothi~dulla^@204~              Me.Adapter.UpdateCommand~dulla^@204~ 2).Value = CType(1,Object)
         ~dulla^@204~ pter.UpdateCommand.Parameters(13).Val~dulla^@204~ BNull.Value
            Else
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(12).~dulla^@204~ (0,Object)
                Me.Adapte~dulla^@204~ nd.Parameters(13).Value = CType(Origi~dulla^@204~ tring)
            End If
         ~dulla^@204~ al_Kebele Is Nothing) Then
         ~dulla^@204~ pter.UpdateCommand.Parameters(14).Val~dulla^@204~ Object)
                Me.Adapter.U~dulla^@204~ Parameters(15).Value = System.DBNull.~dulla^@204~       Else
                Me.Adapte~dulla^@204~ nd.Parameters(14).Value = CType(0,Obj~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ alue = CType(Original_Kebele,String)~dulla^@204~ End If
            If (Original_Hous~dulla^@204~ g) Then
                Me.Adapter.U~dulla^@204~ Parameters(16).Value = CType(1,Object~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~ e = System.DBNull.Value
            ~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ alue = CType(0,Object)
             ~dulla^@204~ .UpdateCommand.Parameters(17).Value =~dulla^@204~ al_HouseNo,String)
            End I~dulla^@204~   If (Original_Tel Is Nothing) Then
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~  CType(1,Object)
                Me.~dulla^@204~ eCommand.Parameters(19).Value = Syste~dulla^@204~ e
            Else
                ~dulla^@204~ dateCommand.Parameters(18).Value = CT~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(19).Value = CType(Original_Tel,St~dulla^@204~       End If
            If (Origina~dulla^@204~ ing) Then
                Me.Adapter~dulla^@204~ d.Parameters(20).Value = CType(1,Obje~dulla^@204~         Me.Adapter.UpdateCommand.Para~dulla^@204~ lue = System.DBNull.Value
          ~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ .Value = CType(0,Object)
           ~dulla^@204~ er.UpdateCommand.Parameters(21).Value~dulla^@204~ inal_Fax,String)
            End If~dulla^@204~ If (Original_PostalAddress Is Nothing~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ .Value = CType(1,Object)
           ~dulla^@204~ er.UpdateCommand.Parameters(23).Value~dulla^@204~ ull.Value
            Else
        ~dulla^@204~ apter.UpdateCommand.Parameters(22).Va~dulla^@204~ ,Object)
                Me.Adapter.~dulla^@204~ .Parameters(23).Value = CType(Origina~dulla^@204~ ss,String)
            End If
     ~dulla^@204~ iginal_Email Is Nothing) Then
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(24).~dulla^@204~ (1,Object)
                Me.Adapte~dulla^@204~ nd.Parameters(25).Value = System.DBNu~dulla^@204~          Else
                Me.Ada~dulla^@204~ mmand.Parameters(24).Value = CType(0,~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ ).Value = CType(Original_Email,String~dulla^@204~   End If
            If (Original_Cu~dulla^@204~ o Is Nothing) Then
                M~dulla^@204~ ateCommand.Parameters(26).Value = CTy~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(27).Value = System.DBNull.Value
 ~dulla^@204~ se
                Me.Adapter.Update~dulla^@204~ eters(26).Value = CType(0,Object)
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ Type(Original_CustomerVATRegNo,String~dulla^@204~   End If
            If (Original_Cu~dulla^@204~ s Nothing) Then
                Me.A~dulla^@204~ Command.Parameters(28).Value = CType(~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 29).Value = System.DBNull.Value
    ~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(28).Value = CType(0,Object)
     ~dulla^@204~ .Adapter.UpdateCommand.Parameters(29)~dulla^@204~ e(Original_CustomerTINNo,String)
   ~dulla^@204~ If
            If (Original_Customer~dulla^@204~ Value = true) Then
                M~dulla^@204~ ateCommand.Parameters(30).Value = CTy~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(31).Value = CType(Original_Custome~dulla^@204~ lue,Date)
            Else
        ~dulla^@204~ apter.UpdateCommand.Parameters(30).Va~dulla^@204~ ,Object)
                Me.Adapter.~dulla^@204~ .Parameters(31).Value = System.DBNull~dulla^@204~        End If
            Dim previo~dulla^@204~ tate As System.Data.ConnectionState =~dulla^@204~ pdateCommand.Connection.State
      ~dulla^@204~ .Adapter.UpdateCommand.Connection.Sta~dulla^@204~ .Data.ConnectionState.Open)  _
     ~dulla^@204~       <> System.Data.ConnectionState.~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ .Open
            End If
          ~dulla^@204~            Dim returnValue As Integer~dulla^@204~ .UpdateCommand.ExecuteNonQuery
     ~dulla^@204~ turn returnValue
            Finally~dulla^@204~      If (previousConnectionState = Sy~dulla^@204~ nectionState.Closed) Then
          ~dulla^@204~ Adapter.UpdateCommand.Connection.Clos~dulla^@204~       End If
            End Try
  ~dulla^@204~ ction
    End Class
    
    <Syst~dulla^@204~ mpiler.GeneratedCodeAttribute("System~dulla^@204~ TypedDataSetGenerator", "2.0.0.0"),  ~dulla^@204~ m.ComponentModel.DesignerCategoryAttr~dulla^@204~ ,  _
     System.ComponentModel.Tool~dulla^@204~ ,  _
     System.ComponentModel.Data~dulla^@204~ te(true),  _
     System.ComponentMo~dulla^@204~ ttribute("Microsoft.VSDesigner.DataSo~dulla^@204~ ableAdapterDesigner, Microsoft.VSDesi~dulla^@204~       ", Version=8.0.0.0, Culture=neu~dulla^@204~ eyToken=b03f5f7f11d50a3a"),  _
     ~dulla^@204~ entModel.Design.HelpKeywordAttribute(~dulla^@204~ eAdapter")>  _
    Partial Public Cl~dulla^@204~ eAdapter
        Inherits System.Com~dulla^@204~ omponent
        
        Private W~dulla^@204~ apter As System.Data.SqlClient.SqlDat~dulla^@204~      
        Private _connection As~dulla^@204~ SqlClient.SqlConnection
        
  ~dulla^@204~  _commandCollection() As System.Data.~dulla^@204~ Command
        
        Private _c~dulla^@204~ l As Boolean
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic Sub New()
            MyBase.New~dulla^@204~ Me.ClearBeforeFill = true
        En~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Private Rea~dulla^@204~ y Adapter() As System.Data.SqlClient.~dulla^@204~ r
            Get
                I~dulla^@204~ r Is Nothing) Then
                 ~dulla^@204~ pter
                End If
       ~dulla^@204~ rn Me._adapter
            End Get
~dulla^@204~ roperty
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ operty Connection() As System.Data.Sq~dulla^@204~ nnection
            Get
          ~dulla^@204~ _connection Is Nothing) Then
       ~dulla^@204~ Me.InitConnection
                En~dulla^@204~          Return Me._connection
     ~dulla^@204~ t
            Set
                M~dulla^@204~  = value
                If (Not (Me~dulla^@204~ rtCommand) Is Nothing) Then
        ~dulla^@204~ e.Adapter.InsertCommand.Connection = ~dulla^@204~           End If
                If ~dulla^@204~ ter.DeleteCommand) Is Nothing) Then
~dulla^@204~        Me.Adapter.DeleteCommand.Conne~dulla^@204~ 
                End If
           ~dulla^@204~ (Me.Adapter.UpdateCommand) Is Nothing~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~  = value
                End If
   ~dulla^@204~ Dim i As Integer = 0
               ~dulla^@204~ < Me.CommandCollection.Length)
     ~dulla^@204~   If (Not (Me.CommandCollection(i)) I~dulla^@204~ en
                        CType(Me.~dulla^@204~ tion(i),System.Data.SqlClient.SqlComm~dulla^@204~ on = value
                    End I~dulla^@204~           i = (i + 1)
                Loop
            End Set
        End P~dulla^@204~     
        <System.Diagnostics.Deb~dulla^@204~ odeAttribute()>  _
        Protected~dulla^@204~ perty CommandCollection() As System.D~dulla^@204~ .SqlCommand()
            Get
     ~dulla^@204~  (Me._commandCollection Is Nothing) T~dulla^@204~             Me.InitCommandCollection~dulla^@204~     End If
                Return Me~dulla^@204~ ection
            End Get
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ learBeforeFill() As Boolean
        ~dulla^@204~             Return Me._clearBeforeFil~dulla^@204~   End Get
            Set
         ~dulla^@204~ earBeforeFill = value
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ ivate Sub InitAdapter()
            ~dulla^@204~  New System.Data.SqlClient.SqlDataAda~dulla^@204~      Dim tableMapping As System.Data.~dulla^@204~ bleMapping = New System.Data.Common.D~dulla^@204~ ng
            tableMapping.SourceTa~dulla^@204~ 
            tableMapping.DataSetTab~dulla^@204~ 
            tableMapping.ColumnMappi~dulla^@204~ rNo", "OrderNo")
            tableMa~dulla^@204~ appings.Add("PartNo", "PartNo")
    ~dulla^@204~ Mapping.ColumnMappings.Add("Descripti~dulla^@204~ tion")
            tableMapping.Colu~dulla^@204~ d("RequiredQuantity", "RequiredQuanti~dulla^@204~      Me._adapter.TableMappings.Add(ta~dulla^@204~             Me._adapter.DeleteCommand~dulla^@204~ .Data.SqlClient.SqlCommand
         ~dulla^@204~ r.DeleteCommand.Connection = Me.Conne~dulla^@204~       Me._adapter.DeleteCommand.Comma~dulla^@204~ ETE FROM [dbo].[Order] WHERE (([Order~dulla^@204~ al_OrderNo) AND ([PartNo] = "& _ 
  ~dulla^@204~  "@Original_PartNo) AND ([Description~dulla^@204~ _Description) AND ([RequiredQuan"& _ ~dulla^@204~      "tity] = @Original_RequiredQuant~dulla^@204~        Me._adapter.DeleteCommand.Comm~dulla^@204~ tem.Data.CommandType.Text
          ~dulla^@204~ .DeleteCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@Original_OrderNo~dulla^@204~ a.SqlDbType.NVarChar, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "OrderNo", System.~dulla^@204~ ersion.Original, false, Nothing, "", ~dulla^@204~          Me._adapter.DeleteCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ PartNo", System.Data.SqlDbType.NVarCh~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ stem.Data.DataRowVersion.Original, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Original_Description", Syste~dulla^@204~ ype.[Char], 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "Description", System.Data.D~dulla^@204~ .Original, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.DeleteCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Or~dulla^@204~ edQuantity", System.Data.SqlDbType.In~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ tity", System.Data.DataRowVersion.Ori~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ sertCommand = New System.Data.SqlClie~dulla^@204~ 
            Me._adapter.InsertComma~dulla^@204~  = Me.Connection
            Me._ada~dulla^@204~ mmand.CommandText = "INSERT INTO [dbo~dulla^@204~ rderNo], [PartNo], [Description], [Re~dulla^@204~ y]"& _ 
                ") VALUES (@~dulla^@204~ tNo, @Description, @RequiredQuantity)~dulla^@204~ rosoft.VisualBasic.ChrW(13)&Global.Mi~dulla^@204~ lBasic.ChrW(10)&"SELECT OrderNo, "& _~dulla^@204~       "PartNo, Description, RequiredQ~dulla^@204~ [Order] WHERE (OrderNo = @OrderNo)"
~dulla^@204~ e._adapter.InsertCommand.CommandType ~dulla^@204~ .CommandType.Text
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@OrderNo", System.Data.Sq~dulla^@204~ har, 0, System.Data.ParameterDirectio~dulla^@204~ , "OrderNo", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.InsertCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@PartNo", Syste~dulla^@204~ ype.NVarChar, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "PartNo", System.Data.Data~dulla^@204~ rrent, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.InsertCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@Descri~dulla^@204~ m.Data.SqlDbType.[Char], 0, System.Da~dulla^@204~ irection.Input, 0, 0, "Description", ~dulla^@204~ ataRowVersion.Current, false, Nothing~dulla^@204~ )
            Me._adapter.InsertComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ uiredQuantity", System.Data.SqlDbType~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ uantity", System.Data.DataRowVersion.~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ UpdateCommand = New System.Data.SqlCl~dulla^@204~ nd
            Me._adapter.UpdateCom~dulla^@204~ on = Me.Connection
            Me._a~dulla^@204~ Command.CommandText = "UPDATE [dbo].[~dulla^@204~ rderNo] = @OrderNo, [PartNo] = @PartN~dulla^@204~ on] "& _ 
                "= @Descri~dulla^@204~ redQuantity] = @RequiredQuantity WHER~dulla^@204~  = @Orig"& _ 
                "inal_~dulla^@204~ ([PartNo] = @Original_PartNo) AND ([D~dulla^@204~  @Original_D"& _ 
                "e~dulla^@204~ D ([RequiredQuantity] = @Original_Req~dulla^@204~ ));"&Global.Microsoft.VisualBasic.Chr~dulla^@204~ Microsoft.VisualBasic.ChrW(10)&"SELEC~dulla^@204~                 "rNo, PartNo, Descrip~dulla^@204~ dQuantity FROM [Order] WHERE (OrderNo~dulla^@204~ _ 
                "o)"
           ~dulla^@204~ UpdateCommand.CommandType = System.Da~dulla^@204~ e.Text
            Me._adapter.Updat~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@OrderNo", System.Data.SqlDbType.NVa~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ , System.Data.DataRowVersion.Current,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@PartNo", System.Data.SqlD~dulla^@204~ r, 0, System.Data.ParameterDirection.~dulla^@204~ "PartNo", System.Data.DataRowVersion.~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ UpdateCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@Description", Sys~dulla^@204~ bType.[Char], 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "Description", System.Data~dulla^@204~ on.Current, false, Nothing, "", "", "~dulla^@204~     Me._adapter.UpdateCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@R~dulla^@204~ ty", System.Data.SqlDbType.Int, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "Require~dulla^@204~ ystem.Data.DataRowVersion.Current, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Original_OrderNo", System.Da~dulla^@204~ NVarChar, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "OrderNo", System.Data.DataRow~dulla^@204~ nal, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.UpdateCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@Original~dulla^@204~ tem.Data.SqlDbType.NVarChar, 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "PartNo", S~dulla^@204~ taRowVersion.Original, false, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ginal_Description", System.Data.SqlDb~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ scription", System.Data.DataRowVersio~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Original_Requi~dulla^@204~  System.Data.SqlDbType.Int, 0, System~dulla^@204~ erDirection.Input, 0, 0, "RequiredQua~dulla^@204~ m.Data.DataRowVersion.Original, false~dulla^@204~ , "", ""))
        End Sub
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Private Sub InitConnection~dulla^@204~    Me._connection = New System.Data.S~dulla^@204~ onnection
            Me._connection~dulla^@204~ ring = Global.InventoryControlSystem.~dulla^@204~ .Default.PurchaseInfoConnection
        End Sub
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ b InitCommandCollection()
          ~dulla^@204~ Collection = New System.Data.SqlClien~dulla^@204~ 0) {}
            Me._commandCollect~dulla^@204~ System.Data.SqlClient.SqlCommand
   ~dulla^@204~ commandCollection(0).Connection = Me.~dulla^@204~            Me._commandCollection(0).C~dulla^@204~ "SELECT OrderNo, PartNo, Description,~dulla^@204~ tity FROM dbo.[Order]"
            M~dulla^@204~ lection(0).CommandType = System.Data.~dulla^@204~ ext
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~      System.ComponentModel.Design.Hel~dulla^@204~ bute("vs.data.TableAdapter"),  _
   ~dulla^@204~ ComponentModel.DataObjectMethodAttrib~dulla^@204~ mponentModel.DataObjectMethodType.Fil~dulla^@204~ 
        Public Overloads Overridable~dulla^@204~ l(ByVal dataTable As PurchaseInfoData~dulla^@204~ aTable) As Integer
            Me.Ad~dulla^@204~ ommand = Me.CommandCollection(0)
   ~dulla^@204~ Me.ClearBeforeFill = true) Then
    ~dulla^@204~ ataTable.Clear
            End If
 ~dulla^@204~ m returnValue As Integer = Me.Adapter~dulla^@204~ le)
            Return returnValue
~dulla^@204~ unction
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute(),  _
    ~dulla^@204~ omponentModel.Design.HelpKeywordAttri~dulla^@204~ .TableAdapter"),  _
         System.~dulla^@204~ l.DataObjectMethodAttribute(System.Co~dulla^@204~ DataObjectMethodType.[Select], true)>~dulla^@204~ Public Overloads Overridable Function~dulla^@204~  PurchaseInfoDataSet2.OrderDataTable~dulla^@204~ Me.Adapter.SelectCommand = Me.Command~dulla^@204~ 
            Dim dataTable As Purcha~dulla^@204~ 2.OrderDataTable = New PurchaseInfoDa~dulla^@204~ ataTable
            Me.Adapter.Fill~dulla^@204~             Return dataTable
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute(),  _
         Sy~dulla^@204~ tModel.Design.HelpKeywordAttribute("v~dulla^@204~ dapter")>  _
        Public Overload~dulla^@204~  Function Update(ByVal dataTable As P~dulla^@204~ taSet2.OrderDataTable) As Integer
  ~dulla^@204~ urn Me.Adapter.Update(dataTable)
   ~dulla^@204~ tion
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute(),  _
       ~dulla^@204~ onentModel.Design.HelpKeywordAttribut~dulla^@204~ bleAdapter")>  _
        Public Over~dulla^@204~ able Function Update(ByVal dataSet As~dulla^@204~ DataSet2) As Integer
            Ret~dulla^@204~ r.Update(dataSet, "Order")
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute(),  _
         Syst~dulla^@204~ odel.Design.HelpKeywordAttribute("vs.~dulla^@204~ pter")>  _
        Public Overloads ~dulla^@204~ unction Update(ByVal dataRow As Syste~dulla^@204~ w) As Integer
            Return Me.~dulla^@204~ e(New System.Data.DataRow() {dataRow}~dulla^@204~ d Function
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute(),  _
 ~dulla^@204~ m.ComponentModel.Design.HelpKeywordAt~dulla^@204~ ata.TableAdapter")>  _
        Publi~dulla^@204~ verridable Function Update(ByVal data~dulla^@204~ tem.Data.DataRow) As Integer
       ~dulla^@204~ e.Adapter.Update(dataRows)
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute(),  _
         Syst~dulla^@204~ odel.Design.HelpKeywordAttribute("vs.~dulla^@204~ pter"),  _
         System.Component~dulla^@204~ ectMethodAttribute(System.ComponentMo~dulla^@204~ tMethodType.Delete, true)>  _
      ~dulla^@204~ loads Overridable Function Delete(ByV~dulla^@204~ rderNo As String, ByVal Original_Part~dulla^@204~  ByVal Original_Description As String~dulla^@204~ nal_RequiredQuantity As Integer) As I~dulla^@204~        If (Original_OrderNo Is Nothin~dulla^@204~             Throw New System.Argument~dulla^@204~ ("Original_OrderNo")
            Els~dulla^@204~       Me.Adapter.DeleteCommand.Parame~dulla^@204~  = CType(Original_OrderNo,String)
  ~dulla^@204~  If
            If (Original_PartNo ~dulla^@204~ hen
                Throw New System~dulla^@204~ Exception("Original_PartNo")
       ~dulla^@204~               Me.Adapter.DeleteComman~dulla^@204~ 1).Value = CType(Original_PartNo,Stri~dulla^@204~     End If
            If (Original_~dulla^@204~ s Nothing) Then
                Me.A~dulla^@204~ Command.Parameters(2).Value = System.~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(2).Value = CType~dulla^@204~ cription,String)
            End If~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(3~dulla^@204~ pe(Original_RequiredQuantity,Integer)~dulla^@204~  Dim previousConnectionState As Syste~dulla^@204~ tionState = Me.Adapter.DeleteCommand.~dulla^@204~ ate
            If ((Me.Adapter.Dele~dulla^@204~ nection.State And System.Data.Connect~dulla^@204~ )  _
                        <> Syst~dulla^@204~ ctionState.Open) Then
              ~dulla^@204~ DeleteCommand.Connection.Open
      ~dulla^@204~ 
            Try 
                Di~dulla^@204~  As Integer = Me.Adapter.DeleteComman~dulla^@204~ uery
                Return returnVa~dulla^@204~     Finally
                If (prev~dulla^@204~ nState = System.Data.ConnectionState.~dulla^@204~ 
                    Me.Adapter.Delet~dulla^@204~ ection.Close
                End If~dulla^@204~ End Try
        End Function
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
         System.ComponentModel.D~dulla^@204~ wordAttribute("vs.data.TableAdapter")~dulla^@204~   System.ComponentModel.DataObjectMet~dulla^@204~ System.ComponentModel.DataObjectMetho~dulla^@204~  true)>  _
        Public Overloads ~dulla^@204~ unction Insert(ByVal OrderNo As Strin~dulla^@204~ No As String, ByVal Description As St~dulla^@204~ equiredQuantity As Integer) As Intege~dulla^@204~   If (OrderNo Is Nothing) Then
     ~dulla^@204~ row New System.ArgumentNullException(~dulla^@204~            Else
                Me.A~dulla^@204~ Command.Parameters(0).Value = CType(O~dulla^@204~ )
            End If
            If~dulla^@204~ othing) Then
                Throw N~dulla^@204~ umentNullException("PartNo")
       ~dulla^@204~               Me.Adapter.InsertComman~dulla^@204~ 1).Value = CType(PartNo,String)
    ~dulla^@204~ f
            If (Description Is Not~dulla^@204~                Me.Adapter.InsertComma~dulla^@204~ (2).Value = System.DBNull.Value
    ~dulla^@204~ 
                Me.Adapter.InsertCom~dulla^@204~ rs(2).Value = CType(Description,Strin~dulla^@204~    End If
            Me.Adapter.Ins~dulla^@204~ rameters(3).Value = CType(RequiredQua~dulla^@204~ )
            Dim previousConnection~dulla^@204~ em.Data.ConnectionState = Me.Adapter.~dulla^@204~ .Connection.State
            If ((M~dulla^@204~ ertCommand.Connection.State And Syste~dulla^@204~ tionState.Open)  _
                 ~dulla^@204~ tem.Data.ConnectionState.Open) Then
~dulla^@204~    Me.Adapter.InsertCommand.Connectio~dulla^@204~        End If
            Try 
    ~dulla^@204~ im returnValue As Integer = Me.Adapte~dulla^@204~ nd.ExecuteNonQuery
                R~dulla^@204~ alue
            Finally
          ~dulla^@204~ viousConnectionState = System.Data.Co~dulla^@204~ .Closed) Then
                    Me~dulla^@204~ rtCommand.Connection.Close
         ~dulla^@204~ 
            End Try
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute(),  _
         System.Co~dulla^@204~ Design.HelpKeywordAttribute("vs.data.~dulla^@204~ ),  _
         System.ComponentModel~dulla^@204~ thodAttribute(System.ComponentModel.D~dulla^@204~ odType.Update, true)>  _
        Pub~dulla^@204~  Overridable Function Update(ByVal Or~dulla^@204~ ng, ByVal PartNo As String, ByVal Des~dulla^@204~ tring, ByVal RequiredQuantity As Inte~dulla^@204~ iginal_OrderNo As String, ByVal Origi~dulla^@204~  String, ByVal Original_Description A~dulla^@204~ al Original_RequiredQuantity As Integ~dulla^@204~ r
            If (OrderNo Is Nothing~dulla^@204~            Throw New System.ArgumentN~dulla^@204~ "OrderNo")
            Else
                Me.Adapter.UpdateCommand.Paramete~dulla^@204~  CType(OrderNo,String)
            E~dulla^@204~       If (PartNo Is Nothing) Then
  ~dulla^@204~  Throw New System.ArgumentNullExcepti~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(1).Value = CType~dulla^@204~ g)
            End If
            I~dulla^@204~ n Is Nothing) Then
                M~dulla^@204~ ateCommand.Parameters(2).Value = Syst~dulla^@204~ ue
            Else
               ~dulla^@204~ pdateCommand.Parameters(2).Value = CT~dulla^@204~ on,String)
            End If
     ~dulla^@204~ pter.UpdateCommand.Parameters(3).Valu~dulla^@204~ uiredQuantity,Integer)
            I~dulla^@204~ rderNo Is Nothing) Then
            ~dulla^@204~  System.ArgumentNullException("Origin~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(4).Value = CType~dulla^@204~ erNo,String)
            End If
   ~dulla^@204~ Original_PartNo Is Nothing) Then
   ~dulla^@204~ Throw New System.ArgumentNullExceptio~dulla^@204~ artNo")
            Else
          ~dulla^@204~ ter.UpdateCommand.Parameters(5).Value~dulla^@204~ inal_PartNo,String)
            End ~dulla^@204~    If (Original_Description Is Nothin~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ .Value = System.DBNull.Value
       ~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 6).Value = CType(Original_Description~dulla^@204~          End If
            Me.Adapt~dulla^@204~ and.Parameters(7).Value = CType(Origi~dulla^@204~ uantity,Integer)
            Dim pre~dulla^@204~ onState As System.Data.ConnectionStat~dulla^@204~ r.UpdateCommand.Connection.State
   ~dulla^@204~ (Me.Adapter.UpdateCommand.Connection.~dulla^@204~ tem.Data.ConnectionState.Open)  _
  ~dulla^@204~          <> System.Data.ConnectionSta~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ion.Open
            End If
       ~dulla^@204~               Dim returnValue As Inte~dulla^@204~ ter.UpdateCommand.ExecuteNonQuery
  ~dulla^@204~  Return returnValue
            Fina~dulla^@204~         If (previousConnectionState =~dulla^@204~ ConnectionState.Closed) Then
       ~dulla^@204~ Me.Adapter.UpdateCommand.Connection.C~dulla^@204~          End If
            End Try~dulla^@204~ Function
    End Class
    
    <S~dulla^@204~ .Compiler.GeneratedCodeAttribute("Sys~dulla^@204~ gn.TypedDataSetGenerator", "2.0.0.0")~dulla^@204~ stem.ComponentModel.DesignerCategoryA~dulla^@204~ e"),  _
     System.ComponentModel.T~dulla^@204~ ue),  _
     System.ComponentModel.D~dulla^@204~ ibute(true),  _
     System.Componen~dulla^@204~ erAttribute("Microsoft.VSDesigner.Dat~dulla^@204~ n.TableAdapterDesigner, Microsoft.VSD~dulla^@204~ 
        ", Version=8.0.0.0, Culture=~dulla^@204~ icKeyToken=b03f5f7f11d50a3a"),  _
  ~dulla^@204~ ponentModel.Design.HelpKeywordAttribu~dulla^@204~ ableAdapter")>  _
    Partial Public~dulla^@204~ tsTableAdapter
        Inherits Syst~dulla^@204~ odel.Component
        
        Pri~dulla^@204~ ts _adapter As System.Data.SqlClient.~dulla^@204~ r
        
        Private _connect~dulla^@204~ .Data.SqlClient.SqlConnection
      ~dulla^@204~ rivate _commandCollection() As System~dulla^@204~ nt.SqlCommand
        
        Priv~dulla^@204~ oreFill As Boolean
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public Sub New()
            MyBas~dulla^@204~       Me.ClearBeforeFill = true
    ~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Priva~dulla^@204~ roperty Adapter() As System.Data.SqlC~dulla^@204~ Adapter
            Get
           ~dulla^@204~ adapter Is Nothing) Then
           ~dulla^@204~ nitAdapter
                End If
 ~dulla^@204~   Return Me._adapter
            End~dulla^@204~  End Property
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ end Property Connection() As System.D~dulla^@204~ .SqlConnection
            Get
    ~dulla^@204~ f (Me._connection Is Nothing) Then
 ~dulla^@204~       Me.InitConnection
            ~dulla^@204~                Return Me._connection~dulla^@204~ End Get
            Set
           ~dulla^@204~ ection = value
                If (N~dulla^@204~ r.InsertCommand) Is Nothing) Then
  ~dulla^@204~      Me.Adapter.InsertCommand.Connect~dulla^@204~                 End If
             ~dulla^@204~ e.Adapter.DeleteCommand) Is Nothing) ~dulla^@204~              Me.Adapter.DeleteCommand~dulla^@204~  value
                End If
     ~dulla^@204~  (Not (Me.Adapter.UpdateCommand) Is N~dulla^@204~ 
                    Me.Adapter.Updat~dulla^@204~ ection = value
                End I~dulla^@204~       Dim i As Integer = 0
         ~dulla^@204~ le (i < Me.CommandCollection.Length)~dulla^@204~         If (Not (Me.CommandCollection~dulla^@204~ ng) Then
                        CTy~dulla^@204~ Collection(i),System.Data.SqlClient.S~dulla^@204~ nnection = value
                   ~dulla^@204~                 i = (i + 1)
        ~dulla^@204~ 
            End Set
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Protected R~dulla^@204~ rty CommandCollection() As System.Dat~dulla^@204~ qlCommand()
            Get
       ~dulla^@204~ Me._commandCollection Is Nothing) The~dulla^@204~           Me.InitCommandCollection
 ~dulla^@204~   End If
                Return Me._~dulla^@204~ tion
            End Get
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ arBeforeFill() As Boolean
          ~dulla^@204~           Return Me._clearBeforeFill~dulla^@204~ End Get
            Set
           ~dulla^@204~ rBeforeFill = value
            End ~dulla^@204~ End Property
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ate Sub InitAdapter()
            Me~dulla^@204~ ew System.Data.SqlClient.SqlDataAdapt~dulla^@204~    Dim tableMapping As System.Data.Co~dulla^@204~ eMapping = New System.Data.Common.Dat~dulla^@204~ 
            tableMapping.SourceTabl~dulla^@204~             tableMapping.DataSetTable~dulla^@204~ 
            tableMapping.ColumnMapp~dulla^@204~ tNo", "PartNo")
            tableMap~dulla^@204~ ppings.Add("Description", "Descriptio~dulla^@204~     tableMapping.ColumnMappings.Add("~dulla^@204~ nitCost")
            tableMapping.C~dulla^@204~ .Add("SellingPrice1", "SellingPrice1"~dulla^@204~   tableMapping.ColumnMappings.Add("Se~dulla^@204~  "SellingPrice2")
            tableM~dulla^@204~ Mappings.Add("QtyAtShop1", "QtyAtShop~dulla^@204~     tableMapping.ColumnMappings.Add("~dulla^@204~ "QtyAtShop2")
            tableMappi~dulla^@204~ ings.Add("QtyAtStore", "QtyAtStore")~dulla^@204~ tableMapping.ColumnMappings.Add("Tota~dulla^@204~ TotalQuantity")
            tableMap~dulla^@204~ ppings.Add("ReorderLevel", "ReorderLe~dulla^@204~       tableMapping.ColumnMappings.Add~dulla^@204~ ShelfNo")
            Me._adapter.Ta~dulla^@204~ dd(tableMapping)
            Me._ada~dulla^@204~ mmand = New System.Data.SqlClient.Sql~dulla^@204~         Me._adapter.DeleteCommand.Con~dulla^@204~ Connection
            Me._adapter.D~dulla^@204~ CommandText = "DELETE FROM [dbo].[Pro~dulla^@204~ (([PartNo] = @Original_PartNo) AND ([~dulla^@204~  
                "on] = @Original_D~dulla^@204~ ND ((@IsNull_UnitCost = 1 AND [UnitCo~dulla^@204~ "& _ 
                "OR ([UnitCost~dulla^@204~ _UnitCost)) AND ((@IsNull_SellingPric~dulla^@204~ elli"& _ 
                "ngPrice1]~dulla^@204~ ([SellingPrice1] = @Original_SellingP~dulla^@204~ (@IsNull"& _ 
                "_Sell~dulla^@204~  AND [SellingPrice2] IS NULL) OR ([Se~dulla^@204~ = @Original_"& _ 
                "S~dulla^@204~ ) AND ((@IsNull_QtyAtShop1 = 1 AND [Q~dulla^@204~  NULL) OR ([QtyA"& _ 
              ~dulla^@204~ @Original_QtyAtShop1)) AND ((@IsNull_~dulla^@204~ 1 AND [QtyAtShop2] I"& _ 
          ~dulla^@204~ ) OR ([QtyAtShop2] = @Original_QtyAtS~dulla^@204~ @IsNull_QtyAtStore = 1 A"& _ 
      ~dulla^@204~  [QtyAtStore] IS NULL) OR ([QtyAtStore] = @Original_QtyAtStore)) AND ((@IsNull"~dulla^@204~          "_TotalQuantity = 1 AND [Tot~dulla^@204~ S NULL) OR ([TotalQuantity] = @Origin~dulla^@204~              "TotalQuantity)) AND ([R~dulla^@204~ = @Original_ReorderLevel) AND ([Shelf~dulla^@204~ 
                "Original_ShelfNo))"~dulla^@204~  Me._adapter.DeleteCommand.CommandTyp~dulla^@204~ ta.CommandType.Text
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@Original_PartNo", Syst~dulla^@204~ Type.NVarChar, 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "PartNo", System.Data.Dat~dulla^@204~ riginal, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.DeleteCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Orig~dulla^@204~ ion", System.Data.SqlDbType.[Char], 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Des~dulla^@204~ stem.Data.DataRowVersion.Original, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@IsNull_UnitCost", System.Dat~dulla^@204~ nt, 0, System.Data.ParameterDirection~dulla^@204~  "UnitCost", System.Data.DataRowVersi~dulla^@204~ true, Nothing, "", "", ""))
        ~dulla^@204~ er.DeleteCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Original_UnitC~dulla^@204~ Data.SqlDbType.Money, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "UnitCost", System~dulla^@204~ Version.Original, false, Nothing, "",~dulla^@204~           Me._adapter.DeleteCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~ ellingPrice1", System.Data.SqlDbType.~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ ce1", System.Data.DataRowVersion.Orig~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@Original_SellingPrice~dulla^@204~ ta.SqlDbType.Float, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "SellingPrice1", Sys~dulla^@204~ RowVersion.Original, false, Nothing, ~dulla^@204~ 
            Me._adapter.DeleteComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ l_SellingPrice2", System.Data.SqlDbTy~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ Price2", System.Data.DataRowVersion.O~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ eleteCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@Original_SellingPr~dulla^@204~ .Data.SqlDbType.Float, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "SellingPrice2", ~dulla^@204~ ataRowVersion.Original, false, Nothin~dulla^@204~ ))
            Me._adapter.DeleteCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ Null_QtyAtShop1", System.Data.SqlDbTy~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ op1", System.Data.DataRowVersion.Orig~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@Original_QtyAtShop1",~dulla^@204~ SqlDbType.Int, 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "QtyAtShop1", System.Data~dulla^@204~ on.Original, false, Nothing, "", "", ~dulla^@204~      Me._adapter.DeleteCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ hop2", System.Data.SqlDbType.Int, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "QtyAt~dulla^@204~ m.Data.DataRowVersion.Original, true,~dulla^@204~  "", ""))
            Me._adapter.De~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@Original_QtyAtShop2", System.Dat~dulla^@204~ nt, 0, System.Data.ParameterDirection~dulla^@204~  "QtyAtShop2", System.Data.DataRowVer~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.DeleteCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@IsNull_QtyA~dulla^@204~ em.Data.SqlDbType.Int, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "QtyAtStore", Sys~dulla^@204~ RowVersion.Original, true, Nothing, "~dulla^@204~             Me._adapter.DeleteCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ al_QtyAtStore", System.Data.SqlDbType~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ e", System.Data.DataRowVersion.Origin~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@IsNull_TotalQuantity",~dulla^@204~ SqlDbType.Int, 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "TotalQuantity", System.D~dulla^@204~ rsion.Original, true, Nothing, "", ""~dulla^@204~        Me._adapter.DeleteCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ talQuantity", System.Data.SqlDbType.I~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ ty", System.Data.DataRowVersion.Origi~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@Original_ReorderLevel~dulla^@204~ a.SqlDbType.Int, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "ReorderLevel", System.~dulla^@204~ ersion.Original, false, Nothing, "", ~dulla^@204~          Me._adapter.DeleteCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ ShelfNo", System.Data.SqlDbType.NVarC~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ System.Data.DataRowVersion.Original, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand = New System.Data.SqlClient.SqlC~dulla^@204~        Me._adapter.InsertCommand.Conn~dulla^@204~ onnection
            Me._adapter.In~dulla^@204~ ommandText = "INSERT INTO [dbo].[Prod~dulla^@204~ o], [Description], [UnitCost], [Selli~dulla^@204~ 
                "], [SellingPrice2]~dulla^@204~ ], [QtyAtShop2], [QtyAtStore], [Total~dulla^@204~ & _ 
                "ReorderLevel],~dulla^@204~ ALUES (@PartNo, @Description, @UnitCo~dulla^@204~ ric"& _ 
                "e1, @Selli~dulla^@204~ yAtShop1, @QtyAtShop2, @QtyAtStore, @~dulla^@204~ , @Reor"& _ 
                "derLev~dulla^@204~ ;"&Global.Microsoft.VisualBasic.ChrW(~dulla^@204~ crosoft.VisualBasic.ChrW(10)&"SELECT ~dulla^@204~ iption, UnitCost, SellingPrice1, Sell~dulla^@204~            "ngPrice2, QtyAtShop1, Qty~dulla^@204~ tStore, TotalQuantity, ReorderLevel, ~dulla^@204~                "No FROM Products WHER~dulla^@204~ PartNo)"
            Me._adapter.Ins~dulla^@204~ mmandType = System.Data.CommandType.T~dulla^@204~     Me._adapter.InsertCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@P~dulla^@204~ m.Data.SqlDbType.NVarChar, 0, System.~dulla^@204~ rDirection.Input, 0, 0, "PartNo", Sys~dulla^@204~ RowVersion.Current, false, Nothing, "~dulla^@204~             Me._adapter.InsertCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ ption", System.Data.SqlDbType.[Char],~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "D~dulla^@204~ System.Data.DataRowVersion.Current, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@UnitCost", System.Data.SqlD~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ itCost", System.Data.DataRowVersion.C~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ nsertCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@SellingPrice1", Sy~dulla^@204~ DbType.Float, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "SellingPrice1", System.Da~dulla^@204~ sion.Current, false, Nothing, "", "",~dulla^@204~       Me._adapter.InsertCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ 2", System.Data.SqlDbType.Float, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "Sellin~dulla^@204~ tem.Data.DataRowVersion.Current, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@QtyAtShop1", System.Data.SqlDb~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ Shop1", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ sertCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@QtyAtShop2", System~dulla^@204~ pe.Int, 0, System.Data.ParameterDirec~dulla^@204~ , 0, "QtyAtShop2", System.Data.DataRo~dulla^@204~ ent, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@~dulla^@204~ System.Data.SqlDbType.Int, 0, System.~dulla^@204~ rDirection.Input, 0, 0, "QtyAtStore",~dulla^@204~ DataRowVersion.Current, false, Nothin~dulla^@204~ ))
            Me._adapter.InsertCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ talQuantity", System.Data.SqlDbType.I~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ ty", System.Data.DataRowVersion.Curre~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ tCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@ReorderLevel", System.~dulla^@204~ e.Int, 0, System.Data.ParameterDirect~dulla^@204~  0, "ReorderLevel", System.Data.DataR~dulla^@204~ rent, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.InsertCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@ShelfNo~dulla^@204~ a.SqlDbType.NVarChar, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "ShelfNo", System.~dulla^@204~ ersion.Current, false, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand = N~dulla^@204~ a.SqlClient.SqlCommand
            M~dulla^@204~ dateCommand.Connection = Me.Connectio~dulla^@204~   Me._adapter.UpdateCommand.CommandTe~dulla^@204~ [dbo].[Products] SET [PartNo] = @Part~dulla^@204~ ion] = @Description, [Un"& _ 
      ~dulla^@204~ Cost] = @UnitCost, [SellingPrice1] = ~dulla^@204~ 1, [SellingPrice2] = @Sellin"& _ 
  ~dulla^@204~  "gPrice2, [QtyAtShop1] = @QtyAtShop1~dulla^@204~ ] = @QtyAtShop2, [QtyAtStore] = "& _ ~dulla^@204~      "@QtyAtStore, [TotalQuantity] = ~dulla^@204~ y, [ReorderLevel] = @ReorderLevel, ["~dulla^@204~          "ShelfNo] = @ShelfNo WHERE (~dulla^@204~ Original_PartNo) AND ([Description] =~dulla^@204~              "riginal_Description) AN~dulla^@204~ nitCost = 1 AND [UnitCost] IS NULL) O~dulla^@204~ 
                "tCost] = @Original_~dulla^@204~ D ((@IsNull_SellingPrice1 = 1 AND [Se~dulla^@204~  _ 
                "] IS NULL) OR (~dulla^@204~ 1] = @Original_SellingPrice1)) AND ((~dulla^@204~ ng"& _ 
                "Price2 = 1 ~dulla^@204~ rice2] IS NULL) OR ([SellingPrice2] =~dulla^@204~ llingP"& _ 
                "rice2))~dulla^@204~ l_QtyAtShop1 = 1 AND [QtyAtShop1] IS ~dulla^@204~ yAtShop1] "& _ 
                "= @~dulla^@204~ tShop1)) AND ((@IsNull_QtyAtShop2 = 1~dulla^@204~ op2] IS NULL) "& _ 
                ~dulla^@204~ op2] = @Original_QtyAtShop2)) AND ((@~dulla^@204~ tore = 1 AND [QtyA"& _ 
            ~dulla^@204~ IS NULL) OR ([QtyAtStore] = @Original~dulla^@204~  AND ((@IsNull_TotalQu"& _ 
        ~dulla^@204~ ty = 1 AND [TotalQuantity] IS NULL) O~dulla^@204~ tity] = @Original_TotalQua"& _ 
    ~dulla^@204~ ntity)) AND ([ReorderLevel] = @Origin~dulla^@204~ el) AND ([ShelfNo] = @Original"& _ 
~dulla^@204~    "_ShelfNo));"&Global.Microsoft.Vis~dulla^@204~ (13)&Global.Microsoft.VisualBasic.Chr~dulla^@204~  PartNo, Description, UnitCost, Selli~dulla^@204~ lingPrice2,"& _ 
                " Q~dulla^@204~ yAtShop2, QtyAtStore, TotalQuantity, ~dulla^@204~  ShelfNo FROM P"& _ 
               ~dulla^@204~ RE (PartNo = @PartNo)"
            M~dulla^@204~ dateCommand.CommandType = System.Data~dulla^@204~ Text
            Me._adapter.UpdateC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ PartNo", System.Data.SqlDbType.NVarCh~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ stem.Data.DataRowVersion.Current, fal~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@Description", System.Data.Sql~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ Description", System.Data.DataRowVers~dulla^@204~ false, Nothing, "", "", ""))
       ~dulla^@204~ ter.UpdateCommand.Parameters.Add(New ~dulla^@204~ qlClient.SqlParameter("@UnitCost", Sy~dulla^@204~ DbType.Money, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "UnitCost", System.Data.Da~dulla^@204~ Current, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Sell~dulla^@204~ ystem.Data.SqlDbType.Float, 0, System~dulla^@204~ erDirection.Input, 0, 0, "SellingPric~dulla^@204~ ata.DataRowVersion.Current, false, No~dulla^@204~ , ""))
            Me._adapter.Updat~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@SellingPrice2", System.Data.SqlDbTy~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ ngPrice2", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@QtyAtShop1", Sys~dulla^@204~ bType.Int, 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "QtyAtShop1", System.Data.Dat~dulla^@204~ urrent, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.UpdateCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@QtyAt~dulla^@204~ m.Data.SqlDbType.Int, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "QtyAtShop2", Syst~dulla^@204~ owVersion.Current, false, Nothing, ""~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ ore", System.Data.SqlDbType.Int, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "QtyAtS~dulla^@204~ .Data.DataRowVersion.Current, false, ~dulla^@204~ "", ""))
            Me._adapter.Upd~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@TotalQuantity", System.Data.SqlDb~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ Quantity", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@ReorderLevel", S~dulla^@204~ lDbType.Int, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "ReorderLevel", System.Data~dulla^@204~ on.Current, false, Nothing, "", "", "~dulla^@204~     Me._adapter.UpdateCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@S~dulla^@204~ em.Data.SqlDbType.NVarChar, 0, System~dulla^@204~ erDirection.Input, 0, 0, "ShelfNo", S~dulla^@204~ taRowVersion.Current, false, Nothing,~dulla^@204~ 
            Me._adapter.UpdateComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ inal_PartNo", System.Data.SqlDbType.N~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@Original_Description", ~dulla^@204~ qlDbType.[Char], 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "Description", System.D~dulla^@204~ rsion.Original, false, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ tCost", System.Data.SqlDbType.Int, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Unit~dulla^@204~ .Data.DataRowVersion.Original, true, ~dulla^@204~ "", ""))
            Me._adapter.Upd~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@Original_UnitCost", System.Data.S~dulla^@204~ y, 0, System.Data.ParameterDirection.~dulla^@204~ "UnitCost", System.Data.DataRowVersio~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@IsNull_Selling~dulla^@204~ em.Data.SqlDbType.Int, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "SellingPrice1", ~dulla^@204~ ataRowVersion.Original, true, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ginal_SellingPrice1", System.Data.Sql~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ ellingPrice1", System.Data.DataRowVer~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.UpdateCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@IsNull_Sell~dulla^@204~ ystem.Data.SqlDbType.Int, 0, System.D~dulla^@204~ Direction.Input, 0, 0, "SellingPrice2~dulla^@204~ a.DataRowVersion.Original, true, Noth~dulla^@204~ ""))
            Me._adapter.UpdateC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ Original_SellingPrice2", System.Data.~dulla^@204~ at, 0, System.Data.ParameterDirection~dulla^@204~  "SellingPrice2", System.Data.DataRowVersion.Original, false, Nothing, "", "", ~dulla^@204~      Me._adapter.UpdateCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ hop1", System.Data.SqlDbType.Int, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "QtyAt~dulla^@204~ m.Data.DataRowVersion.Original, true,~dulla^@204~  "", ""))
            Me._adapter.Up~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@Original_QtyAtShop1", System.Dat~dulla^@204~ nt, 0, System.Data.ParameterDirection~dulla^@204~  "QtyAtShop1", System.Data.DataRowVer~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.UpdateCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@IsNull_QtyA~dulla^@204~ em.Data.SqlDbType.Int, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "QtyAtShop2", Sys~dulla^@204~ RowVersion.Original, true, Nothing, "~dulla^@204~             Me._adapter.UpdateCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ al_QtyAtShop2", System.Data.SqlDbType~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ 2", System.Data.DataRowVersion.Origin~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@IsNull_QtyAtStore", Sy~dulla^@204~ DbType.Int, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "QtyAtStore", System.Data.Da~dulla^@204~ Original, true, Nothing, "", "", ""))~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Orig~dulla^@204~ re", System.Data.SqlDbType.Int, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "QtyAtSt~dulla^@204~ Data.DataRowVersion.Original, false, ~dulla^@204~ "", ""))
            Me._adapter.Upd~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@IsNull_TotalQuantity", System.Dat~dulla^@204~ nt, 0, System.Data.ParameterDirection~dulla^@204~  "TotalQuantity", System.Data.DataRow~dulla^@204~ nal, true, Nothing, "", "", ""))
   ~dulla^@204~ adapter.UpdateCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Original_~dulla^@204~ ", System.Data.SqlDbType.Int, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "TotalQuan~dulla^@204~ .Data.DataRowVersion.Original, false,~dulla^@204~  "", ""))
            Me._adapter.Up~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@Original_ReorderLevel", System.D~dulla^@204~ .Int, 0, System.Data.ParameterDirecti~dulla^@204~ 0, "ReorderLevel", System.Data.DataRo~dulla^@204~ inal, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.UpdateCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Origina~dulla^@204~ ystem.Data.SqlDbType.NVarChar, 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "ShelfNo"~dulla^@204~ .DataRowVersion.Original, false, Noth~dulla^@204~ ""))
        End Sub
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Private Sub InitConnection()
  ~dulla^@204~ _connection = New System.Data.SqlClie~dulla^@204~ ion
            Me._connection.Conne~dulla^@204~  Global.InventoryControlSystem.My.MyS~dulla^@204~ lt.PurchaseInfoConnection
        En~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Private Sub~dulla^@204~ ollection()
            Me._commandC~dulla^@204~ ew System.Data.SqlClient.SqlCommand(0~dulla^@204~      Me._commandCollection(0) = New S~dulla^@204~ lClient.SqlCommand
            Me._c~dulla^@204~ ion(0).Connection = Me.Connection
  ~dulla^@204~ _commandCollection(0).CommandText = "~dulla^@204~ , Description, UnitCost, SellingPrice~dulla^@204~ ce2, QtyAtShop1, Q"& _ 
            ~dulla^@204~ 2, QtyAtStore, TotalQuantity, Reorder~dulla^@204~ o FROM dbo.Products"
            Me.~dulla^@204~ ction(0).CommandType = System.Data.Co~dulla^@204~ t
        End Sub
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~    System.ComponentModel.Design.HelpK~dulla^@204~ te("vs.data.TableAdapter"),  _
     ~dulla^@204~ mponentModel.DataObjectMethodAttribut~dulla^@204~ onentModel.DataObjectMethodType.Fill,~dulla^@204~        Public Overloads Overridable F~dulla^@204~ ByVal dataTable As PurchaseInfoDataSe~dulla^@204~ taTable) As Integer
            Me.A~dulla^@204~ Command = Me.CommandCollection(0)
  ~dulla^@204~ (Me.ClearBeforeFill = true) Then
   ~dulla^@204~ dataTable.Clear
            End If
~dulla^@204~ im returnValue As Integer = Me.Adapte~dulla^@204~ ble)
            Return returnValue~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute(),  _
   ~dulla^@204~ ComponentModel.Design.HelpKeywordAttr~dulla^@204~ a.TableAdapter"),  _
         System~dulla^@204~ el.DataObjectMethodAttribute(System.C~dulla^@204~ .DataObjectMethodType.[Select], true)~dulla^@204~  Public Overloads Overridable Functio~dulla^@204~ s PurchaseInfoDataSet2.ProductsDataTa~dulla^@204~     Me.Adapter.SelectCommand = Me.Com~dulla^@204~ n(0)
            Dim dataTable As Pu~dulla^@204~ aSet2.ProductsDataTable = New Purchas~dulla^@204~ .ProductsDataTable
            Me.Ad~dulla^@204~ taTable)
            Return dataTabl~dulla^@204~ d Function
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute(),  _
 ~dulla^@204~ m.ComponentModel.Design.HelpKeywordAt~dulla^@204~ ata.TableAdapter")>  _
        Publi~dulla^@204~ verridable Function Update(ByVal data~dulla^@204~ haseInfoDataSet2.ProductsDataTable) A~dulla^@204~           Return Me.Adapter.Update(da~dulla^@204~      End Function
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~   System.ComponentModel.Design.HelpKe~dulla^@204~ e("vs.data.TableAdapter")>  _
      ~dulla^@204~ loads Overridable Function Update(ByV~dulla^@204~  PurchaseInfoDataSet2) As Integer
  ~dulla^@204~ urn Me.Adapter.Update(dataSet, "Produ~dulla^@204~   End Function
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute(),  ~dulla^@204~ ystem.ComponentModel.Design.HelpKeywo~dulla^@204~ vs.data.TableAdapter")>  _
        P~dulla^@204~ ds Overridable Function Update(ByVal ~dulla^@204~ stem.Data.DataRow) As Integer
      ~dulla^@204~ Me.Adapter.Update(New System.Data.Dat~dulla^@204~ ow})
        End Function
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
         System.ComponentModel.Desi~dulla^@204~ dAttribute("vs.data.TableAdapter")>  ~dulla^@204~ blic Overloads Overridable Function U~dulla^@204~ ataRows() As System.Data.DataRow) As ~dulla^@204~         Return Me.Adapter.Update(data~dulla^@204~   End Function
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute(),  ~dulla^@204~ ystem.ComponentModel.Design.HelpKeywo~dulla^@204~ vs.data.TableAdapter"),  _
         ~dulla^@204~ entModel.DataObjectMethodAttribute(Sy~dulla^@204~ tModel.DataObjectMethodType.Delete, t~dulla^@204~      Public Overloads Overridable Fun~dulla^@204~ ByVal Original_PartNo As String, ByVa~dulla^@204~ scription As String, ByVal Original_U~dulla^@204~ stem.Nullable(Of Decimal), ByVal Orig~dulla^@204~ rice1 As System.Nullable(Of Double), ~dulla^@204~ l_SellingPrice2 As System.Nullable(Of~dulla^@204~ al Original_QtyAtShop1 As System.Null~dulla^@204~ er), ByVal Original_QtyAtShop2 As Sys~dulla^@204~ Of Integer), ByVal Original_QtyAtStor~dulla^@204~ ullable(Of Integer), ByVal Original_T~dulla^@204~ As System.Nullable(Of Integer), ByVal~dulla^@204~ rderLevel As Integer, ByVal Original_~dulla^@204~ ring) As Integer
            If (Ori~dulla^@204~ Is Nothing) Then
                Thr~dulla^@204~ .ArgumentNullException("Original_Part~dulla^@204~      Else
                Me.Adapter~dulla^@204~ d.Parameters(0).Value = CType(Origina~dulla^@204~ ng)
            End If
            ~dulla^@204~ Description Is Nothing) Then
       ~dulla^@204~ w New System.ArgumentNullException("O~dulla^@204~ iption")
            Else
         ~dulla^@204~ pter.DeleteCommand.Parameters(1).Valu~dulla^@204~ ginal_Description,String)
          ~dulla^@204~          If (Original_UnitCost.HasVal~dulla^@204~ en
                Me.Adapter.Delete~dulla^@204~ eters(2).Value = CType(0,Object)
   ~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(3~dulla^@204~ pe(Original_UnitCost.Value,Decimal)
            Else
                Me.Adapt~dulla^@204~ and.Parameters(2).Value = CType(1,Obj~dulla^@204~          Me.Adapter.DeleteCommand.Par~dulla^@204~ lue = System.DBNull.Value
          ~dulla^@204~          If (Original_SellingPrice1.H~dulla^@204~ e) Then
                Me.Adapter.D~dulla^@204~ Parameters(4).Value = CType(0,Object)~dulla^@204~      Me.Adapter.DeleteCommand.Paramet~dulla^@204~ = CType(Original_SellingPrice1.Value,~dulla^@204~         Else
                Me.Adap~dulla^@204~ mand.Parameters(4).Value = CType(1,Ob~dulla^@204~           Me.Adapter.DeleteCommand.Pa~dulla^@204~ alue = System.DBNull.Value
         ~dulla^@204~           If (Original_SellingPrice2.~dulla^@204~ ue) Then
                Me.Adapter.~dulla^@204~ .Parameters(6).Value = CType(0,Object~dulla^@204~       Me.Adapter.DeleteCommand.Parame~dulla^@204~  = CType(Original_SellingPrice2.Value~dulla^@204~          Else
                Me.Ada~dulla^@204~ mmand.Parameters(6).Value = CType(1,O~dulla^@204~            Me.Adapter.DeleteCommand.P~dulla^@204~ Value = System.DBNull.Value
        ~dulla^@204~            If (Original_QtyAtShop1.Ha~dulla^@204~ ) Then
                Me.Adapter.De~dulla^@204~ arameters(8).Value = CType(0,Object)~dulla^@204~     Me.Adapter.DeleteCommand.Paramete~dulla^@204~  CType(Original_QtyAtShop1.Value,Inte~dulla^@204~      Else
                Me.Adapter~dulla^@204~ d.Parameters(8).Value = CType(1,Objec~dulla^@204~        Me.Adapter.DeleteCommand.Param~dulla^@204~ e = System.DBNull.Value
            ~dulla^@204~        If (Original_QtyAtShop2.HasVal~dulla^@204~ en
                Me.Adapter.Delete~dulla^@204~ eters(10).Value = CType(0,Object)
  ~dulla^@204~  Me.Adapter.DeleteCommand.Parameters(~dulla^@204~ Type(Original_QtyAtShop2.Value,Intege~dulla^@204~    Else
                Me.Adapter.D~dulla^@204~ Parameters(10).Value = CType(1,Object~dulla^@204~       Me.Adapter.DeleteCommand.Parame~dulla^@204~ e = System.DBNull.Value
            ~dulla^@204~        If (Original_QtyAtStore.HasVal~dulla^@204~ en
                Me.Adapter.Delete~dulla^@204~ eters(12).Value = CType(0,Object)
  ~dulla^@204~  Me.Adapter.DeleteCommand.Parameters(~dulla^@204~ Type(Original_QtyAtStore.Value,Intege~dulla^@204~    Else
                Me.Adapter.D~dulla^@204~ Parameters(12).Value = CType(1,Object~dulla^@204~       Me.Adapter.DeleteCommand.Parame~dulla^@204~ e = System.DBNull.Value
            ~dulla^@204~        If (Original_TotalQuantity.Has~dulla^@204~  Then
                Me.Adapter.Del~dulla^@204~ rameters(14).Value = CType(0,Object)~dulla^@204~     Me.Adapter.DeleteCommand.Paramete~dulla^@204~ = CType(Original_TotalQuantity.Value,~dulla^@204~          Else
                Me.Ada~dulla^@204~ mmand.Parameters(14).Value = CType(1,~dulla^@204~             Me.Adapter.DeleteCommand.~dulla^@204~ ).Value = System.DBNull.Value
      ~dulla^@204~ 
            Me.Adapter.DeleteCommand~dulla^@204~ 6).Value = CType(Original_ReorderLeve~dulla^@204~            If (Original_ShelfNo Is No~dulla^@204~                 Throw New System.Argu~dulla^@204~ tion("Original_ShelfNo")
           ~dulla^@204~           Me.Adapter.DeleteCommand.Pa~dulla^@204~ Value = CType(Original_ShelfNo,String~dulla^@204~   End If
            Dim previousCon~dulla^@204~ As System.Data.ConnectionState = Me.A~dulla^@204~ Command.Connection.State
           ~dulla^@204~ ter.DeleteCommand.Connection.State An~dulla^@204~ .ConnectionState.Open)  _
          ~dulla^@204~  <> System.Data.ConnectionState.Open)~dulla^@204~           Me.Adapter.DeleteCommand.Co~dulla^@204~ 
            End If
            Try~dulla^@204~       Dim returnValue As Integer = Me~dulla^@204~ teCommand.ExecuteNonQuery
          ~dulla^@204~ returnValue
            Finally
   ~dulla^@204~ If (previousConnectionState = System.~dulla^@204~ onState.Closed) Then
               ~dulla^@204~ er.DeleteCommand.Connection.Close
  ~dulla^@204~  End If
            End Try
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute(),  _
         Sy~dulla^@204~ tModel.Design.HelpKeywordAttribute("v~dulla^@204~ dapter"),  _
         System.Compone~dulla^@204~ bjectMethodAttribute(System.Component~dulla^@204~ ectMethodType.Insert, true)>  _
    ~dulla^@204~ erloads Overridable Function Insert(B~dulla^@204~ s String, ByVal Description As String~dulla^@204~ ost As System.Nullable(Of Decimal), B~dulla^@204~ rice1 As System.Nullable(Of Double), ~dulla^@204~ Price2 As System.Nullable(Of Double),~dulla^@204~ hop1 As System.Nullable(Of Integer), ~dulla^@204~ op2 As System.Nullable(Of Integer), B~dulla^@204~ re As System.Nullable(Of Integer), By~dulla^@204~ tity As System.Nullable(Of Integer), ~dulla^@204~ Level As Integer, ByVal ShelfNo As St~dulla^@204~ ger
            If (PartNo Is Nothin~dulla^@204~             Throw New System.Argument~dulla^@204~ ("PartNo")
            Else
       ~dulla^@204~ dapter.InsertCommand.Parameters(0).Va~dulla^@204~ artNo,String)
            End If
  ~dulla^@204~ (Description Is Nothing) Then
      ~dulla^@204~ ow New System.ArgumentNullException("~dulla^@204~ 
            Else
                M~dulla^@204~ ertCommand.Parameters(1).Value = CTyp~dulla^@204~ ,String)
            End If
       ~dulla^@204~ Cost.HasValue = true) Then
         ~dulla^@204~ pter.InsertCommand.Parameters(2).Valu~dulla^@204~ tCost.Value,Decimal)
            Els~dulla^@204~       Me.Adapter.InsertCommand.Parame~dulla^@204~  = System.DBNull.Value
            E~dulla^@204~       If (SellingPrice1.HasValue = tr~dulla^@204~              Me.Adapter.InsertCommand~dulla^@204~ ).Value = CType(SellingPrice1.Value,D~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(3).Value = System.DBNu~dulla^@204~          End If
            If (Sell~dulla^@204~ Value = true) Then
                M~dulla^@204~ ertCommand.Parameters(4).Value = CTyp~dulla^@204~ e2.Value,Double)
            Else
 ~dulla^@204~   Me.Adapter.InsertCommand.Parameters~dulla^@204~ ystem.DBNull.Value
            End I~dulla^@204~   If (QtyAtShop1.HasValue = true) The~dulla^@204~       Me.Adapter.InsertCommand.Parame~dulla^@204~  = CType(QtyAtShop1.Value,Integer)
 ~dulla^@204~ se
                Me.Adapter.Insert~dulla^@204~ eters(5).Value = System.DBNull.Value~dulla^@204~ End If
            If (QtyAtShop2.Ha~dulla^@204~ ) Then
                Me.Adapter.In~dulla^@204~ arameters(6).Value = CType(QtyAtShop2~dulla^@204~ r)
            Else
               ~dulla^@204~ nsertCommand.Parameters(6).Value = Sy~dulla^@204~ alue
            End If
           ~dulla^@204~ re.HasValue = true) Then
           ~dulla^@204~ er.InsertCommand.Parameters(7).Value ~dulla^@204~ Store.Value,Integer)
            Els~dulla^@204~       Me.Adapter.InsertCommand.Parame~dulla^@204~  = System.DBNull.Value
            E~dulla^@204~       If (TotalQuantity.HasValue = tr~dulla^@204~              Me.Adapter.InsertCommand~dulla^@204~ ).Value = CType(TotalQuantity.Value,I~dulla^@204~         Else
                Me.Adap~dulla^@204~ mand.Parameters(8).Value = System.DBN~dulla^@204~           End If
            Me.Adap~dulla^@204~ mand.Parameters(9).Value = CType(Reor~dulla^@204~ ger)
            If (ShelfNo Is Noth~dulla^@204~               Throw New System.Argume~dulla^@204~ on("ShelfNo")
            Else
    ~dulla^@204~ e.Adapter.InsertCommand.Parameters(10~dulla^@204~ pe(ShelfNo,String)
            End I~dulla^@204~   Dim previousConnectionState As Syst~dulla^@204~ ctionState = Me.Adapter.InsertCommand~dulla^@204~ tate
            If ((Me.Adapter.Ins~dulla^@204~ nnection.State And System.Data.Connec~dulla^@204~ n)  _
                        <> Sys~dulla^@204~ ectionState.Open) Then
             ~dulla^@204~ .InsertCommand.Connection.Open
     ~dulla^@204~ 
            Try 
                D~dulla^@204~ e As Integer = Me.Adapter.InsertComma~dulla^@204~ Query
                Return returnV~dulla^@204~      Finally
                If (pre~dulla^@204~ onState = System.Data.ConnectionState~dulla^@204~ 
                    Me.Adapter.Inse~dulla^@204~ nection.Close
                End If
            End Try
        End Functio~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute(),  _
         System.Compone~dulla^@204~ n.HelpKeywordAttribute("vs.data.Table~dulla^@204~ 
         System.ComponentModel.Data~dulla^@204~ ttribute(System.ComponentModel.DataOb~dulla^@204~ e.Update, true)>  _
        Public O~dulla^@204~ ridable Function Update( _
         ~dulla^@204~ Val PartNo As String,  _
           ~dulla^@204~ l Description As String,  _
        ~dulla^@204~ yVal UnitCost As System.Nullable(Of D~dulla^@204~                     ByVal SellingPric~dulla^@204~ Nullable(Of Double),  _
            ~dulla^@204~  SellingPrice2 As System.Nullable(Of ~dulla^@204~                     ByVal QtyAtShop1 ~dulla^@204~ lable(Of Integer),  _
              ~dulla^@204~ tyAtShop2 As System.Nullable(Of Integ~dulla^@204~                 ByVal QtyAtStore As S~dulla^@204~ e(Of Integer),  _
                  ~dulla^@204~ Quantity As System.Nullable(Of Intege~dulla^@204~                ByVal ReorderLevel As ~dulla^@204~                     ByVal ShelfNo As ~dulla^@204~                    ByVal Original_Par~dulla^@204~ ,  _
                    ByVal Origi~dulla^@204~ on As String,  _
                   ~dulla^@204~ al_UnitCost As System.Nullable(Of Dec~dulla^@204~                   ByVal Original_Sell~dulla^@204~ System.Nullable(Of Double),  _
     ~dulla^@204~   ByVal Original_SellingPrice2 As Sys~dulla^@204~ Of Double),  _
                    B~dulla^@204~ _QtyAtShop1 As System.Nullable(Of Int~dulla^@204~                   ByVal Original_QtyA~dulla^@204~ tem.Nullable(Of Integer),  _
       ~dulla^@204~ ByVal Original_QtyAtStore As System.N~dulla^@204~ teger),  _
                    ByVal~dulla^@204~ alQuantity As System.Nullable(Of Inte~dulla^@204~                  ByVal Original_Reord~dulla^@204~ teger,  _
                    ByVal ~dulla^@204~ fNo As String) As Integer
          ~dulla^@204~ Is Nothing) Then
                Thr~dulla^@204~ .ArgumentNullException("PartNo")
   ~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(0).Value = CType(PartNo,String)
~dulla^@204~ nd If
            If (Description Is~dulla^@204~ n
                Throw New System.A~dulla^@204~ ception("Description")
            E~dulla^@204~         Me.Adapter.UpdateCommand.Para~dulla^@204~ ue = CType(Description,String)
     ~dulla^@204~ 
            If (UnitCost.HasValue =~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(2).Value = CType(UnitCost.Value,Dec~dulla^@204~       Else
                Me.Adapte~dulla^@204~ nd.Parameters(2).Value = System.DBNul~dulla^@204~         End If
            If (Selli~dulla^@204~ alue = true) Then
                Me~dulla^@204~ teCommand.Parameters(3).Value = CType~dulla^@204~ 1.Value,Double)
            Else
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ stem.DBNull.Value
            End If~dulla^@204~  If (SellingPrice2.HasValue = true) T~dulla^@204~         Me.Adapter.UpdateCommand.Para~dulla^@204~ ue = CType(SellingPrice2.Value,Double~dulla^@204~   Else
                Me.Adapter.Up~dulla^@204~ arameters(4).Value = System.DBNull.Va~dulla^@204~     End If
            If (QtyAtShop~dulla^@204~ true) Then
                Me.Adapte~dulla^@204~ nd.Parameters(5).Value = CType(QtyAtS~dulla^@204~ teger)
            Else
           ~dulla^@204~ er.UpdateCommand.Parameters(5).Value ~dulla^@204~ ll.Value
            End If
       ~dulla^@204~ tShop2.HasValue = true) Then
       ~dulla^@204~ dapter.UpdateCommand.Parameters(6).Va~dulla^@204~ tyAtShop2.Value,Integer)
           ~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ alue = System.DBNull.Value
         ~dulla^@204~           If (QtyAtStore.HasValue = t~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 7).Value = CType(QtyAtStore.Value,Int~dulla^@204~       Else
                Me.Adapte~dulla^@204~ nd.Parameters(7).Value = System.DBNul~dulla^@204~         End If
            If (Total~dulla^@204~ alue = true) Then
                Me~dulla^@204~ teCommand.Parameters(8).Value = CType~dulla^@204~ y.Value,Integer)
            Else
 ~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ ystem.DBNull.Value
            End I~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ Type(ReorderLevel,Integer)
         ~dulla^@204~ o Is Nothing) Then
                T~dulla^@204~ em.ArgumentNullException("ShelfNo")
~dulla^@204~ lse
                Me.Adapter.Updat~dulla^@204~ meters(10).Value = CType(ShelfNo,Stri~dulla^@204~     End If
            If (Original_~dulla^@204~ hing) Then
                Throw New~dulla^@204~ entNullException("Original_PartNo")
~dulla^@204~ lse
                Me.Adapter.Updat~dulla^@204~ meters(11).Value = CType(Original_Par~dulla^@204~             End If
            If (O~dulla^@204~ iption Is Nothing) Then
            ~dulla^@204~  System.ArgumentNullException("Origin~dulla^@204~ n")
            Else
              ~dulla^@204~ UpdateCommand.Parameters(12).Value = ~dulla^@204~ l_Description,String)
            En~dulla^@204~      If (Original_UnitCost.HasValue =~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(13).Value = CType(0,Object)
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(14).~dulla^@204~ (Original_UnitCost.Value,Decimal)
  ~dulla^@204~ e
                Me.Adapter.UpdateC~dulla^@204~ ters(13).Value = CType(1,Object)
   ~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(1~dulla^@204~ stem.DBNull.Value
            End If~dulla^@204~  If (Original_SellingPrice1.HasValue ~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(15).Value = CType(0,Object)
     ~dulla^@204~ .Adapter.UpdateCommand.Parameters(16)~dulla^@204~ e(Original_SellingPrice1.Value,Double~dulla^@204~   Else
                Me.Adapter.Up~dulla^@204~ arameters(15).Value = CType(1,Object)~dulla^@204~      Me.Adapter.UpdateCommand.Paramet~dulla^@204~  = System.DBNull.Value
            E~dulla^@204~       If (Original_SellingPrice2.HasV~dulla^@204~ Then
                Me.Adapter.Upda~dulla^@204~ ameters(17).Value = CType(0,Object)
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~  CType(Original_SellingPrice2.Value,D~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(17).Value = CType(1,Ob~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ Value = System.DBNull.Value
        ~dulla^@204~            If (Original_QtyAtShop1.Ha~dulla^@204~ ) Then
                Me.Adapter.Up~dulla^@204~ arameters(19).Value = CType(0,Object)~dulla^@204~      Me.Adapter.UpdateCommand.Paramet~dulla^@204~  = CType(Original_QtyAtShop1.Value,In~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(19).Value = CType(1,Ob~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ Value = System.DBNull.Value
        ~dulla^@204~            If (Original_QtyAtShop2.Ha~dulla^@204~ ) Then
                Me.Adapter.Up~dulla^@204~ arameters(21).Value = CType(0,Object)~dulla^@204~      Me.Adapter.UpdateCommand.Paramet~dulla^@204~  = CType(Original_QtyAtShop2.Value,In~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(21).Value = CType(1,Ob~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ Value = System.DBNull.Value
        ~dulla^@204~            If (Original_QtyAtStore.Ha~dulla^@204~ ) Then
                Me.Adapter.Up~dulla^@204~ arameters(23).Value = CType(0,Object)~dulla^@204~      Me.Adapter.UpdateCommand.Paramet~dulla^@204~  = CType(Original_QtyAtStore.Value,In~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(23).Value = CType(1,Ob~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ Value = System.DBNull.Value
        ~dulla^@204~            If (Original_TotalQuantity~dulla^@204~ rue) Then
                Me.Adapter~dulla^@204~ d.Parameters(25).Value = CType(0,Obje~dulla^@204~         Me.Adapter.UpdateCommand.Para~dulla^@204~ lue = CType(Original_TotalQuantity.Va~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.Up~dulla^@204~ arameters(26).Value = System.DBNull.V~dulla^@204~      End If
            Me.Adapter.U~dulla^@204~ Parameters(27).Value = CType(Original~dulla^@204~ ,Integer)
            If (Original_S~dulla^@204~ hing) Then
                Throw New~dulla^@204~ entNullException("Original_ShelfNo")~dulla^@204~ Else
                Me.Adapter.Upda~dulla^@204~ ameters(28).Value = CType(Original_Sh~dulla^@204~ 
            End If
            Dim~dulla^@204~ ectionState As System.Data.Connection~dulla^@204~ apter.UpdateCommand.Connection.State~dulla^@204~ If ((Me.Adapter.UpdateCommand.Connect~dulla^@204~  System.Data.ConnectionState.Open)  _~dulla^@204~              <> System.Data.Connectio~dulla^@204~ Then
                Me.Adapter.Upda~dulla^@204~ nection.Open
            End If
   ~dulla^@204~ 
                Dim returnValue As ~dulla^@204~ Adapter.UpdateCommand.ExecuteNonQuery~dulla^@204~      Return returnValue
            ~dulla^@204~             If (previousConnectionSta~dulla^@204~ ata.ConnectionState.Closed) Then
   ~dulla^@204~     Me.Adapter.UpdateCommand.Connecti~dulla^@204~              End If
            End ~dulla^@204~ End Function
    End Class
    
  ~dulla^@204~ eDom.Compiler.GeneratedCodeAttribute(~dulla^@204~ Design.TypedDataSetGenerator", "2.0.0~dulla^@204~   System.ComponentModel.DesignerCateg~dulla^@204~ "code"),  _
     System.ComponentMod~dulla^@204~ m(true),  _
     System.ComponentMod~dulla^@204~ Attribute(true),  _
     System.Comp~dulla^@204~ signerAttribute("Microsoft.VSDesigner~dulla^@204~ esign.TableAdapterDesigner, Microsoft~dulla^@204~  _ 
        ", Version=8.0.0.0, Cult~dulla^@204~ PublicKeyToken=b03f5f7f11d50a3a"),  _~dulla^@204~ .ComponentModel.Design.HelpKeywordAtt~dulla^@204~ ta.TableAdapter")>  _
    Partial Pu~dulla^@204~ rchaseTableAdapter
        Inherits ~dulla^@204~ entModel.Component
        
       ~dulla^@204~ Events _adapter As System.Data.SqlCli~dulla^@204~ apter
        
        Private _con~dulla^@204~ stem.Data.SqlClient.SqlConnection
  ~dulla^@204~    Private _commandCollection() As Sy~dulla^@204~ Client.SqlCommand
        
        ~dulla^@204~ rBeforeFill As Boolean
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public Sub New()
            M~dulla^@204~           Me.ClearBeforeFill = true
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ ly Property Adapter() As System.Data.~dulla^@204~ DataAdapter
            Get
       ~dulla^@204~ Me._adapter Is Nothing) Then
       ~dulla^@204~ Me.InitAdapter
                End I~dulla^@204~       Return Me._adapter
           ~dulla^@204~      End Property
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Friend Property Connection() As Syst~dulla^@204~ ient.SqlConnection
            Get
~dulla^@204~    If (Me._connection Is Nothing) The~dulla^@204~           Me.InitConnection
        ~dulla^@204~ f
                Return Me._connect~dulla^@204~     End Get
            Set
       ~dulla^@204~ connection = value
                I~dulla^@204~ apter.InsertCommand) Is Nothing) Then~dulla^@204~          Me.Adapter.InsertCommand.Con~dulla^@204~ ue
                End If
         ~dulla^@204~ t (Me.Adapter.DeleteCommand) Is Nothi~dulla^@204~                  Me.Adapter.DeleteCom~dulla^@204~ on = value
                End If
 ~dulla^@204~   If (Not (Me.Adapter.UpdateCommand) ~dulla^@204~ hen
                    Me.Adapter.U~dulla^@204~ Connection = value
                E~dulla^@204~           Dim i As Integer = 0
     ~dulla^@204~  While (i < Me.CommandCollection.Leng~dulla^@204~             If (Not (Me.CommandCollec~dulla^@204~ othing) Then
                       ~dulla^@204~ mandCollection(i),System.Data.SqlClie~dulla^@204~ ).Connection = value
               ~dulla^@204~                     i = (i + 1)
    ~dulla^@204~ oop
            End Set
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Protect~dulla^@204~ roperty CommandCollection() As System~dulla^@204~ nt.SqlCommand()
            Get
   ~dulla^@204~ If (Me._commandCollection Is Nothing)~dulla^@204~               Me.InitCommandCollectio~dulla^@204~       End If
                Return ~dulla^@204~ llection
            End Get
      ~dulla^@204~ y
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  ClearBeforeFill() As Boolean
      ~dulla^@204~               Return Me._clearBeforeF~dulla^@204~     End Get
            Set
       ~dulla^@204~ clearBeforeFill = value
            ~dulla^@204~     End Property
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Private Sub InitAdapter()
          ~dulla^@204~  = New System.Data.SqlClient.SqlDataA~dulla^@204~        Dim tableMapping As System.Dat~dulla^@204~ TableMapping = New System.Data.Common~dulla^@204~ ping
            tableMapping.Source~dulla^@204~ e"
            tableMapping.DataSetT~dulla^@204~ ase"
            tableMapping.Column~dulla^@204~ "PurchaseInvoiceNo", "PurchaseInvoice~dulla^@204~      tableMapping.ColumnMappings.Add(~dulla^@204~ se", "DateOfPurchase")
            t~dulla^@204~ olumnMappings.Add("TotalAmount", "Tot~dulla^@204~            tableMapping.ColumnMapping~dulla^@204~ tCharge", "FrieghtCharge")
         ~dulla^@204~ ng.ColumnMappings.Add("MiscellaneousC~dulla^@204~ laneousCost")
            tableMappi~dulla^@204~ ings.Add("GrandTotal", "GrandTotal")~dulla^@204~ tableMapping.ColumnMappings.Add("Supp~dulla^@204~ plierID")
            Me._adapter.Ta~dulla^@204~ dd(tableMapping)
            Me._ada~dulla^@204~ mmand = New System.Data.SqlClient.Sql~dulla^@204~         Me._adapter.DeleteCommand.Con~dulla^@204~ Connection
            Me._adapter.D~dulla^@204~ CommandText = "DELETE FROM [dbo].[Pur~dulla^@204~ (([PurchaseInvoiceNo] = @Original_Pur~dulla^@204~  
                "iceNo) AND ([Date~dulla^@204~  @Original_DateOfPurchase) AND ([Tota~dulla^@204~ "& _ 
                "riginal_Total~dulla^@204~ [FrieghtCharge] = @Original_FrieghtCh~dulla^@204~ isce"& _ 
                "llaneousC~dulla^@204~ nal_MiscellaneousCost) AND ([GrandTot~dulla^@204~ al_Grand"& _ 
                "Total~dulla^@204~ ierID] = @Original_SupplierID))"
   ~dulla^@204~ adapter.DeleteCommand.CommandType = S~dulla^@204~ mmandType.Text
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@Original_PurchaseInvoiceNo"~dulla^@204~ .SqlDbType.NVarChar, 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "PurchaseInvoiceNo"~dulla^@204~ .DataRowVersion.Original, false, Noth~dulla^@204~ ""))
            Me._adapter.DeleteC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ Original_DateOfPurchase", System.Data~dulla^@204~ teTime, 0, System.Data.ParameterDirec~dulla^@204~ , 0, "DateOfPurchase", System.Data.Da~dulla^@204~ Original, false, Nothing, "", "", "")~dulla^@204~   Me._adapter.DeleteCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@Ori~dulla^@204~ ount", System.Data.SqlDbType.Money, 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Tot~dulla^@204~ stem.Data.DataRowVersion.Original, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Original_FrieghtCharge", Sys~dulla^@204~ bType.Money, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "FrieghtCharge", System.Dat~dulla^@204~ ion.Original, false, Nothing, "", "",~dulla^@204~       Me._adapter.DeleteCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ cellaneousCost", System.Data.SqlDbTyp~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ laneousCost", System.Data.DataRowVers~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.DeleteCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@Original_Gra~dulla^@204~ tem.Data.SqlDbType.Money, 0, System.D~dulla^@204~ Direction.Input, 0, 0, "GrandTotal", ~dulla^@204~ ataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.D~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@Original_SupplierID", System.Da~dulla^@204~ NVarChar, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "SupplierID", System.Data.Data~dulla^@204~ iginal, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.InsertCommand = New Syste~dulla^@204~ ent.SqlCommand
            Me._adapt~dulla^@204~ and.Connection = Me.Connection
     ~dulla^@204~ apter.InsertCommand.CommandText = "IN~dulla^@204~ o].[Purchase] ([PurchaseInvoiceNo], [~dulla^@204~ e], [TotalAmount"& _ 
              ~dulla^@204~ tCharge], [MiscellaneousCost], [Grand~dulla^@204~ lierID]) VALUES (@Pu"& _ 
          ~dulla^@204~ InvoiceNo, @DateOfPurchase, @TotalAmo~dulla^@204~ Charge, @MiscellaneousCo"& _ 
      ~dulla^@204~ , @GrandTotal, @SupplierID);"&Global.~dulla^@204~ ualBasic.ChrW(13)&Global.Microsoft.Vi~dulla^@204~ W(10)&"SELECT PurchaseInvoiceNo, Date~dulla^@204~ otalA"& _ 
                "mount, F~dulla^@204~  MiscellaneousCost, GrandTotal, Suppl~dulla^@204~ rchase WH"& _ 
                "ERE ~dulla^@204~ iceNo = @PurchaseInvoiceNo)"
       ~dulla^@204~ ter.InsertCommand.CommandType = Syste~dulla^@204~ dType.Text
            Me._adapter.I~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@PurchaseInvoiceNo", System.Data~dulla^@204~ arChar, 0, System.Data.ParameterDirec~dulla^@204~ , 0, "PurchaseInvoiceNo", System.Data~dulla^@204~ on.Current, false, Nothing, "", "", "~dulla^@204~     Me._adapter.InsertCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@D~dulla^@204~ ", System.Data.SqlDbType.DateTime, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Date~dulla^@204~ System.Data.DataRowVersion.Current, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@TotalAmount", System.Data.S~dulla^@204~ y, 0, System.Data.ParameterDirection.~dulla^@204~ "TotalAmount", System.Data.DataRowVer~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.InsertCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@FrieghtCharg~dulla^@204~ ta.SqlDbType.Money, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "FrieghtCharge", Sys~dulla^@204~ RowVersion.Current, false, Nothing, "~dulla^@204~             Me._adapter.InsertCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ laneousCost", System.Data.SqlDbType.M~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ eousCost", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .InsertCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@GrandTotal", Sys~dulla^@204~ bType.Money, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "GrandTotal", System.Data.D~dulla^@204~ .Current, false, Nothing, "", "", "")~dulla^@204~   Me._adapter.InsertCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@Sup~dulla^@204~ tem.Data.SqlDbType.NVarChar, 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "SupplierID~dulla^@204~ a.DataRowVersion.Current, false, Noth~dulla^@204~ ""))
            Me._adapter.UpdateC~dulla^@204~ System.Data.SqlClient.SqlCommand
   ~dulla^@204~ adapter.UpdateCommand.Connection = Me~dulla^@204~             Me._adapter.UpdateCommand~dulla^@204~ = "UPDATE [dbo].[Purchase] SET [Purch~dulla^@204~  = @PurchaseInvoiceNo, [DateOfPurc"& ~dulla^@204~        "hase] = @DateOfPurchase, [Tot~dulla^@204~ TotalAmount, [FrieghtCharge] = @Frieg~dulla^@204~            "tCharge, [MiscellaneousCo~dulla^@204~ laneousCost, [GrandTotal] = @GrandTot~dulla^@204~                "SupplierID] = @Suppli~dulla^@204~ [PurchaseInvoiceNo] = @Original_Purch~dulla^@204~  
                "eNo) AND ([DateOf~dulla^@204~ Original_DateOfPurchase) AND ([TotalA~dulla^@204~ "& _ 
                "ginal_TotalAm~dulla^@204~ rieghtCharge] = @Original_FrieghtChar~dulla^@204~ cell"& _ 
                "aneousCos~dulla^@204~ l_MiscellaneousCost) AND ([GrandTotal~dulla^@204~ _GrandTo"& _ 
                "tal) ~dulla^@204~ rID] = @Original_SupplierID));"&Globa~dulla^@204~ isualBasic.ChrW(13)&Global.Microsoft.~dulla^@204~ hrW(10)&"SELECT PurchaseInvoiceNo, Da~dulla^@204~             "OfPurchase, TotalAmount,~dulla^@204~ e, MiscellaneousCost, GrandTotal, Sup~dulla^@204~                 "D FROM Purchase WHER~dulla^@204~ voiceNo = @PurchaseInvoiceNo)"
     ~dulla^@204~ apter.UpdateCommand.CommandType = Sys~dulla^@204~ andType.Text
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@PurchaseInvoiceNo", System.Da~dulla^@204~ NVarChar, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "PurchaseInvoiceNo", System.Da~dulla^@204~ sion.Current, false, Nothing, "", "",~dulla^@204~       Me._adapter.UpdateCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ se", System.Data.SqlDbType.DateTime, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "Da~dulla^@204~ , System.Data.DataRowVersion.Current,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@TotalAmount", System.Data~dulla^@204~ ney, 0, System.Data.ParameterDirectio~dulla^@204~ , "TotalAmount", System.Data.DataRowV~dulla^@204~ t, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@FrieghtCha~dulla^@204~ Data.SqlDbType.Money, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "FrieghtCharge", S~dulla^@204~ taRowVersion.Current, false, Nothing,~dulla^@204~ 
            Me._adapter.UpdateComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ ellaneousCost", System.Data.SqlDbType~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ aneousCost", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@GrandTotal", S~dulla^@204~ lDbType.Money, 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "GrandTotal", System.Data~dulla^@204~ on.Current, false, Nothing, "", "", "~dulla^@204~     Me._adapter.UpdateCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@S~dulla^@204~ ystem.Data.SqlDbType.NVarChar, 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "Supplier~dulla^@204~ ata.DataRowVersion.Current, false, No~dulla^@204~ , ""))
            Me._adapter.Updat~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@Original_PurchaseInvoiceNo", System~dulla^@204~ pe.NVarChar, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "PurchaseInvoiceNo", System~dulla^@204~ Version.Original, false, Nothing, "",~dulla^@204~           Me._adapter.UpdateCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~ _DateOfPurchase", System.Data.SqlDbTy~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ teOfPurchase", System.Data.DataRowVer~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.UpdateCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@Original_To~dulla^@204~ ystem.Data.SqlDbType.Money, 0, System~dulla^@204~ erDirection.Input, 0, 0, "TotalAmount~dulla^@204~ a.DataRowVersion.Original, false, Not~dulla^@204~  ""))
            Me._adapter.Update~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @Original_FrieghtCharge", System.Data~dulla^@204~ ney, 0, System.Data.ParameterDirectio~dulla^@204~ , "FrieghtCharge", System.Data.DataRo~dulla^@204~ inal, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.UpdateCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Origina~dulla^@204~ usCost", System.Data.SqlDbType.Money,~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "M~dulla^@204~ ost", System.Data.DataRowVersion.Orig~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@Original_GrandTotal"~dulla^@204~ .SqlDbType.Money, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "GrandTotal", System.D~dulla^@204~ rsion.Original, false, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ upplierID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.I~dulla^@204~ SupplierID", System.Data.DataRowVersi~dulla^@204~ false, Nothing, "", "", ""))
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Private ~dulla^@204~ ction()
            Me._connection =~dulla^@204~ ata.SqlClient.SqlConnection
        ~dulla^@204~ ction.ConnectionString = Global.Inven~dulla^@204~ stem.My.MySettings.Default.PurchaseIn~dulla^@204~ 
        End Sub
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Private Sub InitCommandCollection()
~dulla^@204~ e._commandCollection = New System.Dat~dulla^@204~ qlCommand(0) {}
            Me._comm~dulla^@204~ (0) = New System.Data.SqlClient.SqlCo~dulla^@204~       Me._commandCollection(0).Connec~dulla^@204~ nection
            Me._commandColle~dulla^@204~ andText = "SELECT PurchaseInvoiceNo, ~dulla^@204~ e, TotalAmount, FrieghtCharge, Miscel~dulla^@204~                "usCost, GrandTotal, S~dulla^@204~ M dbo.Purchase"
            Me._comm~dulla^@204~ (0).CommandType = System.Data.Command~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ stem.ComponentModel.Design.HelpKeywor~dulla^@204~ s.data.TableAdapter"),  _
         S~dulla^@204~ ntModel.DataObjectMethodAttribute(Sys~dulla^@204~ Model.DataObjectMethodType.Fill, true~dulla^@204~   Public Overloads Overridable Functi~dulla^@204~  dataTable As PurchaseInfoDataSet2.Pu~dulla^@204~ le) As Integer
            Me.Adapte~dulla^@204~ nd = Me.CommandCollection(0)
       ~dulla^@204~ learBeforeFill = true) Then
        ~dulla^@204~ able.Clear
            End If
     ~dulla^@204~ turnValue As Integer = Me.Adapter.Fil~dulla^@204~ 
            Return returnValue
    ~dulla^@204~ ion
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute(),  _
        ~dulla^@204~ nentModel.Design.HelpKeywordAttribute~dulla^@204~ leAdapter"),  _
         System.Comp~dulla^@204~ taObjectMethodAttribute(System.Compon~dulla^@204~ ObjectMethodType.[Select], true)>  _~dulla^@204~ ic Overloads Overridable Function Get~dulla^@204~ chaseInfoDataSet2.PurchaseDataTable
~dulla^@204~ e.Adapter.SelectCommand = Me.CommandC~dulla^@204~ 
            Dim dataTable As Purchas~dulla^@204~ .PurchaseDataTable = New PurchaseInfo~dulla^@204~ haseDataTable
            Me.Adapter~dulla^@204~ le)
            Return dataTable
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute(),  _
      ~dulla^@204~ ponentModel.Design.HelpKeywordAttribu~dulla^@204~ ableAdapter")>  _
        Public Ove~dulla^@204~ dable Function Update(ByVal dataTable~dulla^@204~ nfoDataSet2.PurchaseDataTable) As Int~dulla^@204~      Return Me.Adapter.Update(dataTab~dulla^@204~ End Function
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ tem.ComponentModel.Design.HelpKeyword~dulla^@204~ .data.TableAdapter")>  _
        Pub~dulla^@204~  Overridable Function Update(ByVal da~dulla^@204~ haseInfoDataSet2) As Integer
       ~dulla^@204~ e.Adapter.Update(dataSet, "Purchase")~dulla^@204~  Function
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute(),  _
  ~dulla^@204~ .ComponentModel.Design.HelpKeywordAtt~dulla^@204~ ta.TableAdapter")>  _
        Public~dulla^@204~ erridable Function Update(ByVal dataR~dulla^@204~ Data.DataRow) As Integer
           ~dulla^@204~ apter.Update(New System.Data.DataRow(~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~       System.ComponentModel.Design.He~dulla^@204~ ibute("vs.data.TableAdapter")>  _
  ~dulla^@204~ Overloads Overridable Function Update~dulla^@204~ ws() As System.Data.DataRow) As Integ~dulla^@204~    Return Me.Adapter.Update(dataRows)~dulla^@204~  Function
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute(),  _
  ~dulla^@204~ .ComponentModel.Design.HelpKeywordAtt~dulla^@204~ ta.TableAdapter"),  _
         Syste~dulla^@204~ del.DataObjectMethodAttribute(System.~dulla^@204~ l.DataObjectMethodType.Delete, true)>~dulla^@204~ Public Overloads Overridable Function~dulla^@204~  Original_PurchaseInvoiceNo As String~dulla^@204~ nal_DateOfPurchase As Date, ByVal Ori~dulla^@204~ ount As Decimal, ByVal Original_Frieg~dulla^@204~ ecimal, ByVal Original_MiscellaneousC~dulla^@204~ l, ByVal Original_GrandTotal As Decim~dulla^@204~ ginal_SupplierID As String) As Intege~dulla^@204~   If (Original_PurchaseInvoiceNo Is N~dulla^@204~ 
                Throw New System.Arg~dulla^@204~ ption("Original_PurchaseInvoiceNo")
~dulla^@204~ lse
                Me.Adapter.Delet~dulla^@204~ meters(0).Value = CType(Original_Purc~dulla^@204~ ,String)
            End If
       ~dulla^@204~ er.DeleteCommand.Parameters(1).Value ~dulla^@204~ nal_DateOfPurchase,Date)
           ~dulla^@204~ eleteCommand.Parameters(2).Value = CT~dulla^@204~ TotalAmount,Decimal)
            Me.~dulla^@204~ eCommand.Parameters(3).Value = CType(~dulla^@204~ ghtCharge,Decimal)
            Me.Ad~dulla^@204~ ommand.Parameters(4).Value = CType(Or~dulla^@204~ laneousCost,Decimal)
            Me.~dulla^@204~ eCommand.Parameters(5).Value = CType(~dulla^@204~ dTotal,Decimal)
            If (Orig~dulla^@204~ ID Is Nothing) Then
                ~dulla^@204~ tem.ArgumentNullException("Original_S~dulla^@204~             Else
                Me.~dulla^@204~ eCommand.Parameters(6).Value = CType(~dulla^@204~ lierID,String)
            End If
 ~dulla^@204~ m previousConnectionState As System.D~dulla^@204~ nState = Me.Adapter.DeleteCommand.Con~dulla^@204~ 
            If ((Me.Adapter.DeleteC~dulla^@204~ tion.State And System.Data.Connection~dulla^@204~ _
                        <> System.~dulla^@204~ onState.Open) Then
                M~dulla^@204~ eteCommand.Connection.Open
         ~dulla^@204~           Try 
                Dim r~dulla^@204~  Integer = Me.Adapter.DeleteCommand.E~dulla^@204~ y
                Return returnValue~dulla^@204~  Finally
                If (previou~dulla^@204~ ate = System.Data.ConnectionState.Clo~dulla^@204~                   Me.Adapter.DeleteCo~dulla^@204~ ion.Close
                End If
  ~dulla^@204~  Try
        End Function
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
         System.ComponentModel.Desi~dulla^@204~ dAttribute("vs.data.TableAdapter"),  ~dulla^@204~ ystem.ComponentModel.DataObjectMethod~dulla^@204~ tem.ComponentModel.DataObjectMethodTy~dulla^@204~ ue)>  _
        Public Overloads Ove~dulla^@204~ tion Insert(ByVal PurchaseInvoiceNo A~dulla^@204~ al DateOfPurchase As Date, ByVal Tota~dulla^@204~ cimal, ByVal FrieghtCharge As Decimal~dulla^@204~ llaneousCost As Decimal, ByVal GrandT~dulla^@204~ al, ByVal SupplierID As String) As In~dulla^@204~       If (PurchaseInvoiceNo Is Nothin~dulla^@204~             Throw New System.Argument~dulla^@204~ ("PurchaseInvoiceNo")
            El~dulla^@204~        Me.Adapter.InsertCommand.Param~dulla^@204~ e = CType(PurchaseInvoiceNo,String)
~dulla^@204~ nd If
            Me.Adapter.InsertC~dulla^@204~ ters(1).Value = CType(DateOfPurchase,~dulla^@204~       Me.Adapter.InsertCommand.Parame~dulla^@204~  = CType(TotalAmount,Decimal)
      ~dulla^@204~ ter.InsertCommand.Parameters(3).Value~dulla^@204~ ghtCharge,Decimal)
            Me.Ad~dulla^@204~ ommand.Parameters(4).Value = CType(Mi~dulla^@204~ st,Decimal)
            Me.Adapter.I~dulla^@204~ Parameters(5).Value = CType(GrandTota~dulla^@204~            If (SupplierID Is Nothing)~dulla^@204~           Throw New System.ArgumentNu~dulla^@204~ SupplierID")
            Else
     ~dulla^@204~ .Adapter.InsertCommand.Parameters(6).~dulla^@204~ (SupplierID,String)
            End ~dulla^@204~    Dim previousConnectionState As Sys~dulla^@204~ ectionState = Me.Adapter.InsertComman~dulla^@204~ State
            If ((Me.Adapter.In~dulla^@204~ onnection.State And System.Data.Conne~dulla^@204~ en)  _
                        <> Sy~dulla^@204~ nectionState.Open) Then
            ~dulla^@204~ r.InsertCommand.Connection.Open
    ~dulla^@204~ f
            Try 
                Dim returnValue As Integer = Me.Adapter.In~dulla^@204~ xecuteNonQuery
                Retur~dulla^@204~ 
            Finally
              ~dulla^@204~ sConnectionState = System.Data.Connec~dulla^@204~ sed) Then
                    Me.Ada~dulla^@204~ mmand.Connection.Close
             ~dulla^@204~           End Try
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute(),  _
         System.Compon~dulla^@204~ gn.HelpKeywordAttribute("vs.data.Tabl~dulla^@204~ _
         System.ComponentModel.Dat~dulla^@204~ Attribute(System.ComponentModel.DataO~dulla^@204~ pe.Update, true)>  _
        Public ~dulla^@204~ rridable Function Update(ByVal Purcha~dulla^@204~ s String, ByVal DateOfPurchase As Dat~dulla^@204~ lAmount As Decimal, ByVal FrieghtChar~dulla^@204~ , ByVal MiscellaneousCost As Decimal,~dulla^@204~ otal As Decimal, ByVal SupplierID As ~dulla^@204~  Original_PurchaseInvoiceNo As String~dulla^@204~ nal_DateOfPurchase As Date, ByVal Ori~dulla^@204~ ount As Decimal, ByVal Original_Frieg~dulla^@204~ ecimal, ByVal Original_MiscellaneousC~dulla^@204~ l, ByVal Original_GrandTotal As Decim~dulla^@204~ ginal_SupplierID As String) As Intege~dulla^@204~   If (PurchaseInvoiceNo Is Nothing) T~dulla^@204~         Throw New System.ArgumentNull~dulla^@204~ rchaseInvoiceNo")
            Else
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~ CType(PurchaseInvoiceNo,String)
    ~dulla^@204~ f
            Me.Adapter.UpdateComma~dulla^@204~ (1).Value = CType(DateOfPurchase,Date~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ Type(TotalAmount,Decimal)
          ~dulla^@204~ UpdateCommand.Parameters(3).Value = C~dulla^@204~ harge,Decimal)
            Me.Adapte~dulla^@204~ nd.Parameters(4).Value = CType(Miscel~dulla^@204~ ecimal)
            Me.Adapter.Updat~dulla^@204~ meters(5).Value = CType(GrandTotal,De~dulla^@204~        If (SupplierID Is Nothing) The~dulla^@204~       Throw New System.ArgumentNullEx~dulla^@204~ lierID")
            Else
         ~dulla^@204~ pter.UpdateCommand.Parameters(6).Valu~dulla^@204~ plierID,String)
            End If
~dulla^@204~ f (Original_PurchaseInvoiceNo Is Noth~dulla^@204~               Throw New System.Argume~dulla^@204~ on("Original_PurchaseInvoiceNo")
   ~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(7).Value = CType(Original_Purchas~dulla^@204~ ring)
            End If
          ~dulla^@204~ UpdateCommand.Parameters(8).Value = C~dulla^@204~ _DateOfPurchase,Date)
            Me~dulla^@204~ teCommand.Parameters(9).Value = CType~dulla^@204~ alAmount,Decimal)
            Me.Ada~dulla^@204~ mmand.Parameters(10).Value = CType(Or~dulla^@204~ tCharge,Decimal)
            Me.Adap~dulla^@204~ mand.Parameters(11).Value = CType(Ori~dulla^@204~ aneousCost,Decimal)
            Me.A~dulla^@204~ Command.Parameters(12).Value = CType(~dulla^@204~ dTotal,Decimal)
            If (Orig~dulla^@204~ ID Is Nothing) Then
                ~dulla^@204~ tem.ArgumentNullException("Original_S~dulla^@204~             Else
                Me.~dulla^@204~ eCommand.Parameters(13).Value = CType~dulla^@204~ plierID,String)
            End If
~dulla^@204~ im previousConnectionState As System.~dulla^@204~ onState = Me.Adapter.UpdateCommand.Co~dulla^@204~ e
            If ((Me.Adapter.Update~dulla^@204~ ction.State And System.Data.Connectio~dulla^@204~  _
                        <> System~dulla^@204~ ionState.Open) Then
                ~dulla^@204~ dateCommand.Connection.Open
        ~dulla^@204~            Try 
                Dim ~dulla^@204~ s Integer = Me.Adapter.UpdateCommand.~dulla^@204~ ry
                Return returnValu~dulla^@204~   Finally
                If (previo~dulla^@204~ tate = System.Data.ConnectionState.Cl~dulla^@204~                    Me.Adapter.UpdateC~dulla^@204~ tion.Close
                End If
 ~dulla^@204~ d Try
        End Function
    End ~dulla^@204~     <System.CodeDom.Compiler.Generate~dulla^@204~ e("System.Data.Design.TypedDataSetGen~dulla^@204~ .0.0"),  _
     System.ComponentMode~dulla^@204~ egoryAttribute("code"),  _
     Syst~dulla^@204~ odel.ToolboxItem(true),  _
     Syst~dulla^@204~ odel.DataObjectAttribute(true),  _
 ~dulla^@204~ mponentModel.DesignerAttribute("Micro~dulla^@204~ er.DataSource.Design.TableAdapterDesi~dulla^@204~ ft.VSDesigner"& _ 
        ", Versio~dulla^@204~ lture=neutral, PublicKeyToken=b03f5f7~dulla^@204~  _
     System.ComponentModel.Design~dulla^@204~ ttribute("vs.data.TableAdapter")>  _~dulla^@204~ Public Class PurchaseInfoTableAdapter~dulla^@204~ erits System.ComponentModel.Component~dulla^@204~        Private WithEvents _adapter As~dulla^@204~ SqlClient.SqlDataAdapter
        
 ~dulla^@204~ e _connection As System.Data.SqlClien~dulla^@204~ on
        
        Private _comman~dulla^@204~  As System.Data.SqlClient.SqlCommand~dulla^@204~       Private _clearBeforeFill As Boo~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Sub N~dulla^@204~      MyBase.New
            Me.Clear~dulla^@204~ true
        End Sub
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Private ReadOnly Property Adapte~dulla^@204~ .Data.SqlClient.SqlDataAdapter
     ~dulla^@204~                If (Me._adapter Is Not~dulla^@204~                    Me.InitAdapter
  ~dulla^@204~  End If
                Return Me._a~dulla^@204~        End Get
        End Property~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Friend Property C~dulla^@204~ s System.Data.SqlClient.SqlConnection~dulla^@204~  Get
                If (Me._connect~dulla^@204~ g) Then
                    Me.InitC~dulla^@204~               End If
               ~dulla^@204~ onnection
            End Get
     ~dulla^@204~                Me._connection = value~dulla^@204~      If (Not (Me.Adapter.InsertComman~dulla^@204~ ) Then
                    Me.Adapte~dulla^@204~ nd.Connection = value
              ~dulla^@204~              If (Not (Me.Adapter.Dele~dulla^@204~  Nothing) Then
                    M~dulla^@204~ eteCommand.Connection = value
      ~dulla^@204~  If
                If (Not (Me.Adap~dulla^@204~ mand) Is Nothing) Then
             ~dulla^@204~ pter.UpdateCommand.Connection = value~dulla^@204~      End If
                Dim i As~dulla^@204~ 
                Do While (i < Me.Com~dulla^@204~ n.Length)
                    If (No~dulla^@204~ Collection(i)) Is Nothing) Then
    ~dulla^@204~        CType(Me.CommandCollection(i),~dulla^@204~ qlClient.SqlCommand).Connection = val~dulla^@204~            End If
                  ~dulla^@204~ 
                Loop
            E~dulla^@204~    End Property
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ rotected ReadOnly Property CommandCol~dulla^@204~ System.Data.SqlClient.SqlCommand()
 ~dulla^@204~ t
                If (Me._commandCol~dulla^@204~ thing) Then
                    Me.I~dulla^@204~ lection
                End If
    ~dulla^@204~ eturn Me._commandCollection
        ~dulla^@204~         End Property
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Property ClearBeforeFill()~dulla^@204~             Get
                Retu~dulla^@204~ eforeFill
            End Get
     ~dulla^@204~                Me._clearBeforeFill = ~dulla^@204~       End Set
        End Property
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Private Sub InitAd~dulla^@204~         Me._adapter = New System.Data~dulla^@204~ lDataAdapter
            Dim tableMa~dulla^@204~ em.Data.Common.DataTableMapping = New~dulla^@204~ Common.DataTableMapping
            ~dulla^@204~ SourceTable = "Table"
            ta~dulla^@204~ taSetTable = "PurchaseInfo"
        ~dulla^@204~ ing.ColumnMappings.Add("PartNo", "Par~dulla^@204~       tableMapping.ColumnMappings.Add~dulla^@204~ ", "Description")
            tableM~dulla^@204~ Mappings.Add("Brand", "Brand")
     ~dulla^@204~ apping.ColumnMappings.Add("Origin", "~dulla^@204~          tableMapping.ColumnMappings.Add("NetWeight", "NetWeight")
           ~dulla^@204~ .ColumnMappings.Add("Quantity", "Quan~dulla^@204~        tableMapping.ColumnMappings.Ad~dulla^@204~ rice")
            tableMapping.Colu~dulla^@204~ d("Amount", "Amount")
            ta~dulla^@204~ lumnMappings.Add("SupplierID", "Suppl~dulla^@204~         tableMapping.ColumnMappings.A~dulla^@204~ ", "InvoiceNo")
            Me._adap~dulla^@204~ ings.Add(tableMapping)
            M~dulla^@204~ leteCommand = New System.Data.SqlClie~dulla^@204~ 
            Me._adapter.DeleteComma~dulla^@204~  = Me.Connection
            Me._ada~dulla^@204~ mmand.CommandText = "DELETE FROM [dbo~dulla^@204~ fo] WHERE (([PartNo] = @Original_Part~dulla^@204~ cr"& _ 
                "iption] = @~dulla^@204~ ription) AND ((@IsNull_Brand = 1 AND ~dulla^@204~ LL) OR"& _ 
                " ([Bran~dulla^@204~ l_Brand)) AND ((@IsNull_Origin = 1 AN~dulla^@204~  NULL) OR "& _ 
                "([O~dulla^@204~ ginal_Origin)) AND ((@IsNull_NetWeigh~dulla^@204~ tWeight] IS NU"& _ 
                ~dulla^@204~ Weight] = @Original_NetWeight)) AND (~dulla^@204~ @Original_Quantity"& _ 
            ~dulla^@204~ @IsNull_Price = 1 AND [Price] IS NULL~dulla^@204~  = @Original_Price)) A"& _ 
        ~dulla^@204~ [Amount] = @Original_Amount) AND ([Su~dulla^@204~ Original_SupplierID) AND ("& _ 
    ~dulla^@204~ [InvoiceNo] = @Original_InvoiceNo))"~dulla^@204~ Me._adapter.DeleteCommand.CommandType~dulla^@204~ a.CommandType.Text
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@Original_PartNo", Syste~dulla^@204~ ype.NVarChar, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "PartNo", System.Data.Data~dulla^@204~ iginal, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.DeleteCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@Origi~dulla^@204~ on", System.Data.SqlDbType.[Char], 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Desc~dulla^@204~ tem.Data.DataRowVersion.Original, fal~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@IsNull_Brand", System.Data.Sq~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ and", System.Data.DataRowVersion.Orig~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@Original_Brand", Syst~dulla^@204~ Type.[Char], 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "Brand", System.Data.DataRo~dulla^@204~ inal, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.DeleteCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@IsNull_~dulla^@204~ em.Data.SqlDbType.Int, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "Origin", System.~dulla^@204~ ersion.Original, true, Nothing, "", "~dulla^@204~         Me._adapter.DeleteCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ rigin", System.Data.SqlDbType.[Char],~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "O~dulla^@204~ m.Data.DataRowVersion.Original, false~dulla^@204~ , "", ""))
            Me._adapter.D~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@IsNull_NetWeight", System.Data.~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ NetWeight", System.Data.DataRowVersio~dulla^@204~ rue, Nothing, "", "", ""))
         ~dulla^@204~ r.DeleteCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@Original_NetWei~dulla^@204~ Data.SqlDbType.[Char], 0, System.Data~dulla^@204~ ection.Input, 0, 0, "NetWeight", Syst~dulla^@204~ owVersion.Original, false, Nothing, "~dulla^@204~             Me._adapter.DeleteCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ al_Quantity", System.Data.SqlDbType.I~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ System.Data.DataRowVersion.Original, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@IsNull_Price", System.Data~dulla^@204~ t, 0, System.Data.ParameterDirection.~dulla^@204~ "Price", System.Data.DataRowVersion.O~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ eleteCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@Original_Price", S~dulla^@204~ lDbType.Money, 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "Price", System.Data.Data~dulla^@204~ iginal, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.DeleteCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@Origi~dulla^@204~ System.Data.SqlDbType.Money, 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "Amount", S~dulla^@204~ taRowVersion.Original, false, Nothing~dulla^@204~ )
            Me._adapter.DeleteComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ginal_SupplierID", System.Data.SqlDbT~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ upplierID", System.Data.DataRowVersio~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.DeleteCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Original_Invoi~dulla^@204~ .Data.SqlDbType.NVarChar, 0, System.D~dulla^@204~ Direction.Input, 0, 0, "InvoiceNo", S~dulla^@204~ taRowVersion.Original, false, Nothing~dulla^@204~ )
            Me._adapter.InsertComm~dulla^@204~ tem.Data.SqlClient.SqlCommand
      ~dulla^@204~ pter.InsertCommand.Connection = Me.Co~dulla^@204~          Me._adapter.InsertCommand.Co~dulla^@204~ INSERT INTO [dbo].[PurchaseInfo] ([Pa~dulla^@204~ iption], [Brand], [Origin], [Ne"& _ ~dulla^@204~     "tWeight], [Quantity], [Price], [~dulla^@204~ plierID], [InvoiceNo]) VALUES (@Par"&~dulla^@204~         "tNo, @Description, @Brand, @~dulla^@204~ eight, @Quantity, @Price, @Amount, @S~dulla^@204~             "plierID, @InvoiceNo);"&G~dulla^@204~ ft.VisualBasic.ChrW(13)&Global.Micros~dulla^@204~ ic.ChrW(10)&"SELECT PartNo, Descripti~dulla^@204~ igin, NetWeight, Qua"& _ 
          ~dulla^@204~  Price, Amount, SupplierID, InvoiceNo~dulla^@204~ eInfo WHERE (PartNo = @P"& _ 
      ~dulla^@204~ tNo)"
            Me._adapter.Insert~dulla^@204~ ndType = System.Data.CommandType.Text~dulla^@204~  Me._adapter.InsertCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Part~dulla^@204~ ata.SqlDbType.NVarChar, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "PartNo", System~dulla^@204~ Version.Current, false, Nothing, "", ~dulla^@204~          Me._adapter.InsertCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ on", System.Data.SqlDbType.[Char], 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Desc~dulla^@204~ tem.Data.DataRowVersion.Current, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Brand", System.Data.SqlDbType.~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~  System.Data.DataRowVersion.Current, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Origin", System.Data.SqlDb~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ igin", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ertCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@NetWeight", System.D~dulla^@204~ .[Char], 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "NetWeight", System.Data.DataRo~dulla^@204~ ent, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.InsertCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@Quantity~dulla^@204~ a.SqlDbType.Int, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "Quantity", System.Data~dulla^@204~ on.Current, false, Nothing, "", "", "~dulla^@204~     Me._adapter.InsertCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@P~dulla^@204~ .Data.SqlDbType.Money, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "Price", System.D~dulla^@204~ rsion.Current, false, Nothing, "", ""~dulla^@204~        Me._adapter.InsertCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ stem.Data.SqlDbType.Money, 0, System.~dulla^@204~ rDirection.Input, 0, 0, "Amount", Sys~dulla^@204~ RowVersion.Current, false, Nothing, "~dulla^@204~             Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.~dulla^@204~ "@SupplierID", System.Data.SqlDbType.~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ ierID", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ sertCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@InvoiceNo", System.~dulla^@204~ e.NVarChar, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "InvoiceNo", System.Data.Dat~dulla^@204~ urrent, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.UpdateCommand = New Syste~dulla^@204~ ent.SqlCommand
            Me._adapt~dulla^@204~ and.Connection = Me.Connection
     ~dulla^@204~ apter.UpdateCommand.CommandText = "UP~dulla^@204~ urchaseInfo] SET [PartNo] = @PartNo, ~dulla^@204~  = @Description,"& _ 
              ~dulla^@204~  @Brand, [Origin] = @Origin, [NetWeig~dulla^@204~ ght, [Quantity] = @Q"& _ 
          ~dulla^@204~ y, [Price] = @Price, [Amount] = @Amou~dulla^@204~ ID] = @SupplierID, [Invo"& _ 
      ~dulla^@204~ eNo] = @InvoiceNo WHERE (([PartNo] = ~dulla^@204~ tNo) AND ([Description] = @O"& _ 
  ~dulla^@204~  "riginal_Description) AND ((@IsNull_~dulla^@204~  [Brand] IS NULL) OR ([Brand] = "& _ ~dulla^@204~      "@Original_Brand)) AND ((@IsNull~dulla^@204~ ND [Origin] IS NULL) OR ([Origin] = "~dulla^@204~          "@Original_Origin)) AND ((@I~dulla^@204~ ht = 1 AND [NetWeight] IS NULL) OR ([~dulla^@204~              "Weight] = @Original_Net~dulla^@204~ ([Quantity] = @Original_Quantity) AND~dulla^@204~ 
                "ull_Price = 1 AND [~dulla^@204~ L) OR ([Price] = @Original_Price)) AN~dulla^@204~  _ 
                " = @Original_Am~dulla^@204~ upplierID] = @Original_SupplierID) AN~dulla^@204~ ] "& _ 
                "= @Original~dulla^@204~ "&Global.Microsoft.VisualBasic.ChrW(1~dulla^@204~ rosoft.VisualBasic.ChrW(10)&"SELECT P~dulla^@204~ ption, Brand, Origin, NetWeight, "& _~dulla^@204~       "Quantity, Price, Amount, Suppl~dulla^@204~ eNo FROM PurchaseInfo WHERE (PartNo =~dulla^@204~           " @PartNo)"
            Me~dulla^@204~ ateCommand.CommandType = System.Data.~dulla^@204~ ext
            Me._adapter.UpdateCo~dulla^@204~ ers.Add(New System.Data.SqlClient.Sql~dulla^@204~ artNo", System.Data.SqlDbType.NVarCha~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ tem.Data.DataRowVersion.Current, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Description", System.Data.SqlD~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ escription", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Brand", System~dulla^@204~ pe.[Char], 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "Brand", System.Data.DataRowV~dulla^@204~ t, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@Origin", S~dulla^@204~ lDbType.[Char], 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "Origin", System.Data.Da~dulla^@204~ Current, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@NetW~dulla^@204~ m.Data.SqlDbType.[Char], 0, System.Da~dulla^@204~ irection.Input, 0, 0, "NetWeight", Sy~dulla^@204~ aRowVersion.Current, false, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ ity", System.Data.SqlDbType.Int, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "Quanti~dulla^@204~ ata.DataRowVersion.Current, false, No~dulla^@204~ , ""))
            Me._adapter.Updat~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@Price", System.Data.SqlDbType.Money~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ m.Data.DataRowVersion.Current, false,~dulla^@204~  "", ""))
            Me._adapter.Up~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@Amount", System.Data.SqlDbType.M~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ System.Data.DataRowVersion.Current, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@SupplierID", System.Data.Sq~dulla^@204~ har, 0, System.Data.ParameterDirectio~dulla^@204~ , "SupplierID", System.Data.DataRowVe~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.UpdateCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@InvoiceNo",~dulla^@204~ SqlDbType.NVarChar, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "InvoiceNo", System.~dulla^@204~ ersion.Current, false, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ artNo", System.Data.SqlDbType.NVarCha~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ tem.Data.DataRowVersion.Original, fal~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@Original_Description", System~dulla^@204~ pe.[Char], 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "Description", System.Data.Da~dulla^@204~ Original, false, Nothing, "", "", "")~dulla^@204~   Me._adapter.UpdateCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@IsN~dulla^@204~ ystem.Data.SqlDbType.Int, 0, System.D~dulla^@204~ Direction.Input, 0, 0, "Brand", Syste~dulla^@204~ wVersion.Original, true, Nothing, "",~dulla^@204~           Me._adapter.UpdateCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~ _Brand", System.Data.SqlDbType.[Char]~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ m.Data.DataRowVersion.Original, false~dulla^@204~ , "", ""))
            Me._adapter.U~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@IsNull_Origin", System.Data.Sql~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ gin", System.Data.DataRowVersion.Orig~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@Original_Origin", Sys~dulla^@204~ bType.[Char], 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "Origin", System.Data.Data~dulla^@204~ iginal, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.UpdateCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@IsNul~dulla^@204~  System.Data.SqlDbType.Int, 0, System~dulla^@204~ erDirection.Input, 0, 0, "NetWeight",~dulla^@204~ DataRowVersion.Original, true, Nothin~dulla^@204~ ))
            Me._adapter.UpdateCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ iginal_NetWeight", System.Data.SqlDbT~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ Weight", System.Data.DataRowVersion.O~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ UpdateCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@Original_Quantity~dulla^@204~ a.SqlDbType.Int, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "Quantity", System.Data~dulla^@204~ on.Original, false, Nothing, "", "", ~dulla^@204~      Me._adapter.UpdateCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ , System.Data.SqlDbType.Int, 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "Price", Sy~dulla^@204~ aRowVersion.Original, true, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ nal_Price", System.Data.SqlDbType.Mon~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ tem.Data.DataRowVersion.Original, fal~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@Original_Amount", System.Data~dulla^@204~ ney, 0, System.Data.ParameterDirectio~dulla^@204~ , "Amount", System.Data.DataRowVersio~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Original_Suppl~dulla^@204~ m.Data.SqlDbType.NVarChar, 0, System.~dulla^@204~ rDirection.Input, 0, 0, "SupplierID",~dulla^@204~ DataRowVersion.Original, false, Nothi~dulla^@204~ "))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Original_InvoiceNo", System.Da~dulla^@204~ NVarChar, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "InvoiceNo", System.Data.DataR~dulla^@204~ ginal, false, Nothing, "", "", ""))
~dulla^@204~ ub
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ itConnection()
            Me._conne~dulla^@204~ ystem.Data.SqlClient.SqlConnection
 ~dulla^@204~ ._connection.ConnectionString = Globa~dulla^@204~ ntrolSystem.My.MySettings.Default.Pur~dulla^@204~ ection
        End Sub
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Private Sub InitCommandCollect~dulla^@204~       Me._commandCollection = New Sys~dulla^@204~ lient.SqlCommand(0) {}
            M~dulla^@204~ lection(0) = New System.Data.SqlClien~dulla^@204~ 
            Me._commandCollection(0)~dulla^@204~  Me.Connection
            Me._comma~dulla^@204~ 0).CommandText = "SELECT PartNo, Desc~dulla^@204~ d, Origin, NetWeight, Quantity, Price~dulla^@204~ & _ 
                "pplierID, Invo~dulla^@204~ o.PurchaseInfo"
            Me._comm~dulla^@204~ (0).CommandType = System.Data.Command~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ stem.ComponentModel.Design.HelpKeywor~dulla^@204~ s.data.TableAdapter"),  _
         S~dulla^@204~ ntModel.DataObjectMethodAttribute(Sys~dulla^@204~ Model.DataObjectMethodType.Fill, true~dulla^@204~   Public Overloads Overridable Functi~dulla^@204~  dataTable As PurchaseInfoDataSet2.Pu~dulla^@204~ aTable) As Integer
            Me.Ad~dulla^@204~ ommand = Me.CommandCollection(0)
   ~dulla^@204~ Me.ClearBeforeFill = true) Then
    ~dulla^@204~ ataTable.Clear
            End If
 ~dulla^@204~ m returnValue As Integer = Me.Adapter~dulla^@204~ le)
            Return returnValue
~dulla^@204~ unction
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute(),  _
    ~dulla^@204~ omponentModel.Design.HelpKeywordAttri~dulla^@204~ .TableAdapter"),  _
         System.~dulla^@204~ l.DataObjectMethodAttribute(System.Co~dulla^@204~ DataObjectMethodType.[Select], true)>~dulla^@204~ Public Overloads Overridable Function~dulla^@204~  PurchaseInfoDataSet2.PurchaseInfoDat~dulla^@204~        Me.Adapter.SelectCommand = Me.~dulla^@204~ tion(0)
            Dim dataTable As~dulla^@204~ DataSet2.PurchaseInfoDataTable = New ~dulla^@204~ ataSet2.PurchaseInfoDataTable
      ~dulla^@204~ ter.Fill(dataTable)
            Retu~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~       System.ComponentModel.Design.He~dulla^@204~ ibute("vs.data.TableAdapter")>  _
  ~dulla^@204~ Overloads Overridable Function Update~dulla^@204~ ble As PurchaseInfoDataSet2.PurchaseI~dulla^@204~  As Integer
            Return Me.Ad~dulla^@204~ dataTable)
        End Function
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ (),  _
         System.ComponentMode~dulla^@204~ KeywordAttribute("vs.data.TableAdapte~dulla^@204~     Public Overloads Overridable Func~dulla^@204~ yVal dataSet As PurchaseInfoDataSet2)~dulla^@204~             Return Me.Adapter.Update(~dulla^@204~ chaseInfo")
        End Function
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e(),  _
         System.ComponentMod~dulla^@204~ pKeywordAttribute("vs.data.TableAdapt~dulla^@204~      Public Overloads Overridable Fun~dulla^@204~ ByVal dataRow As System.Data.DataRow)~dulla^@204~             Return Me.Adapter.Update(~dulla^@204~ ta.DataRow() {dataRow})
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute(),  _
         System.~dulla^@204~ l.Design.HelpKeywordAttribute("vs.dat~dulla^@204~ r")>  _
        Public Overloads Ove~dulla^@204~ tion Update(ByVal dataRows() As Syste~dulla^@204~ w) As Integer
            Return Me.~dulla^@204~ e(dataRows)
        End Function
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e(),  _
         System.ComponentMod~dulla^@204~ pKeywordAttribute("vs.data.TableAdapt~dulla^@204~       System.ComponentModel.DataObjec~dulla^@204~ ute(System.ComponentModel.DataObjectM~dulla^@204~ ete, true)>  _
        Public Overlo~dulla^@204~ le Function Delete(ByVal Original_Par~dulla^@204~ , ByVal Original_Description As Strin~dulla^@204~ inal_Brand As String, ByVal Original_~dulla^@204~ ing, ByVal Original_NetWeight As Stri~dulla^@204~ ginal_Quantity As Integer, ByVal Orig~dulla^@204~  System.Nullable(Of Decimal), ByVal O~dulla^@204~ t As Decimal, ByVal Original_Supplier~dulla^@204~  ByVal Original_InvoiceNo As String) ~dulla^@204~            If (Original_PartNo Is Not~dulla^@204~                Throw New System.Argum~dulla^@204~ ion("Original_PartNo")
            E~dulla^@204~         Me.Adapter.DeleteCommand.Para~dulla^@204~ ue = CType(Original_PartNo,String)
 ~dulla^@204~ d If
            If (Original_Descri~dulla^@204~ ing) Then
                Throw New ~dulla^@204~ ntNullException("Original_Description~dulla^@204~    Else
                Me.Adapter.D~dulla^@204~ Parameters(1).Value = CType(Original_~dulla^@204~ tring)
            End If
         ~dulla^@204~ al_Brand Is Nothing) Then
          ~dulla^@204~ ter.DeleteCommand.Parameters(2).Value~dulla^@204~ ject)
                Me.Adapter.Del~dulla^@204~ rameters(3).Value = System.DBNull.Val~dulla^@204~    Else
                Me.Adapter.D~dulla^@204~ Parameters(2).Value = CType(0,Object)~dulla^@204~      Me.Adapter.DeleteCommand.Paramet~dulla^@204~ = CType(Original_Brand,String)
     ~dulla^@204~ 
            If (Original_Origin Is ~dulla^@204~ 
                Me.Adapter.DeleteCo~dulla^@204~ ers(4).Value = CType(1,Object)
     ~dulla^@204~ .Adapter.DeleteCommand.Parameters(5).~dulla^@204~ m.DBNull.Value
            Else
   ~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(4~dulla^@204~ pe(0,Object)
                Me.Adap~dulla^@204~ mand.Parameters(5).Value = CType(Orig~dulla^@204~ tring)
            End If
         ~dulla^@204~ al_NetWeight Is Nothing) Then
      ~dulla^@204~ Adapter.DeleteCommand.Parameters(6).V~dulla^@204~ 1,Object)
                Me.Adapter~dulla^@204~ d.Parameters(7).Value = System.DBNull~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(6).Value = CType(0,Obj~dulla^@204~          Me.Adapter.DeleteCommand.Par~dulla^@204~ lue = CType(Original_NetWeight,String~dulla^@204~   End If
            Me.Adapter.Dele~dulla^@204~ ameters(8).Value = CType(Original_Qua~dulla^@204~ )
            If (Original_Price.Has~dulla^@204~  Then
                Me.Adapter.Del~dulla^@204~ rameters(9).Value = CType(0,Object)
~dulla^@204~    Me.Adapter.DeleteCommand.Parameter~dulla^@204~  CType(Original_Price.Value,Decimal)~dulla^@204~ Else
                Me.Adapter.Dele~dulla^@204~ ameters(9).Value = CType(1,Object)
 ~dulla^@204~   Me.Adapter.DeleteCommand.Parameters~dulla^@204~ System.DBNull.Value
            End ~dulla^@204~    Me.Adapter.DeleteCommand.Parameter~dulla^@204~  CType(Original_Amount,Decimal)
    ~dulla^@204~ riginal_SupplierID Is Nothing) Then
~dulla^@204~    Throw New System.ArgumentNullExcep~dulla^@204~ l_SupplierID")
            Else
   ~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(1~dulla^@204~ ype(Original_SupplierID,String)
    ~dulla^@204~ f
            If (Original_InvoiceNo~dulla^@204~ Then
                Throw New Syste~dulla^@204~ lException("Original_InvoiceNo")
   ~dulla^@204~ 
                Me.Adapter.DeleteCo~dulla^@204~ ers(13).Value = CType(Original_Invoic~dulla^@204~             End If
            Dim p~dulla^@204~ tionState As System.Data.ConnectionSt~dulla^@204~ ter.DeleteCommand.Connection.State
 ~dulla^@204~  ((Me.Adapter.DeleteCommand.Connectio~dulla^@204~ ystem.Data.ConnectionState.Open)  _
~dulla^@204~            <> System.Data.ConnectionS~dulla^@204~ en
                Me.Adapter.Delete~dulla^@204~ ction.Open
            End If
     ~dulla^@204~                 Dim returnValue As In~dulla^@204~ apter.DeleteCommand.ExecuteNonQuery
~dulla^@204~    Return returnValue
            Finally
                If (previousConnect~dulla^@204~ stem.Data.ConnectionState.Closed) The~dulla^@204~           Me.Adapter.DeleteCommand.Co~dulla^@204~ e
                End If
          ~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~    System.ComponentModel.Design.HelpK~dulla^@204~ te("vs.data.TableAdapter"),  _
     ~dulla^@204~ mponentModel.DataObjectMethodAttribut~dulla^@204~ onentModel.DataObjectMethodType.Inser~dulla^@204~ 
        Public Overloads Overridable~dulla^@204~ ert(ByVal PartNo As String, ByVal Des~dulla^@204~ tring, ByVal Brand As String, ByVal O~dulla^@204~ ng, ByVal NetWeight As String, ByVal ~dulla^@204~ nteger, ByVal Price As System.Nullabl~dulla^@204~ , ByVal Amount As Decimal, ByVal Supp~dulla^@204~ ing, ByVal InvoiceNo As String) As In~dulla^@204~       If (PartNo Is Nothing) Then
  ~dulla^@204~  Throw New System.ArgumentNullExcepti~dulla^@204~ 
            Else
                Me~dulla^@204~ rtCommand.Parameters(0).Value = CType~dulla^@204~ g)
            End If
            I~dulla^@204~ n Is Nothing) Then
                T~dulla^@204~ em.ArgumentNullException("Description~dulla^@204~    Else
                Me.Adapter.I~dulla^@204~ Parameters(1).Value = CType(Descripti~dulla^@204~            End If
            If (Br~dulla^@204~ g) Then
                Me.Adapter.I~dulla^@204~ Parameters(2).Value = System.DBNull.V~dulla^@204~      Else
                Me.Adapter~dulla^@204~ d.Parameters(2).Value = CType(Brand,S~dulla^@204~        End If
            If (Origin~dulla^@204~ Then
                Me.Adapter.Inse~dulla^@204~ ameters(3).Value = System.DBNull.Valu~dulla^@204~   Else
                Me.Adapter.In~dulla^@204~ arameters(3).Value = CType(Origin,Str~dulla^@204~      End If
            If (NetWeigh~dulla^@204~  Then
                Me.Adapter.Ins~dulla^@204~ rameters(4).Value = System.DBNull.Val~dulla^@204~    Else
                Me.Adapter.I~dulla^@204~ Parameters(4).Value = CType(NetWeight~dulla^@204~          End If
            Me.Adapt~dulla^@204~ and.Parameters(5).Value = CType(Quant~dulla^@204~ 
            If (Price.HasValue = tru~dulla^@204~             Me.Adapter.InsertCommand.~dulla^@204~ .Value = CType(Price.Value,Decimal)
~dulla^@204~ lse
                Me.Adapter.Inser~dulla^@204~ meters(6).Value = System.DBNull.Value~dulla^@204~  End If
            Me.Adapter.Inser~dulla^@204~ meters(7).Value = CType(Amount,Decima~dulla^@204~    If (SupplierID Is Nothing) Then
 ~dulla^@204~   Throw New System.ArgumentNullExcept~dulla^@204~ ID")
            Else
             ~dulla^@204~ .InsertCommand.Parameters(8).Value = ~dulla^@204~ rID,String)
            End If
    ~dulla^@204~ nvoiceNo Is Nothing) Then
          ~dulla^@204~ ew System.ArgumentNullException("Invo~dulla^@204~         Else
                Me.Adap~dulla^@204~ mand.Parameters(9).Value = CType(Invo~dulla^@204~ 
            End If
            Dim~dulla^@204~ ectionState As System.Data.Connection~dulla^@204~ apter.InsertCommand.Connection.State~dulla^@204~ If ((Me.Adapter.InsertCommand.Connect~dulla^@204~  System.Data.ConnectionState.Open)  _~dulla^@204~              <> System.Data.Connectio~dulla^@204~ Then
                Me.Adapter.Inse~dulla^@204~ nection.Open
            End If
   ~dulla^@204~ 
                Dim returnValue As ~dulla^@204~ Adapter.InsertCommand.ExecuteNonQuery~dulla^@204~      Return returnValue
            ~dulla^@204~             If (previousConnectionSta~dulla^@204~ ata.ConnectionState.Closed) Then
   ~dulla^@204~     Me.Adapter.InsertCommand.Connecti~dulla^@204~              End If
            End ~dulla^@204~ End Function
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ tem.ComponentModel.Design.HelpKeyword~dulla^@204~ .data.TableAdapter"),  _
         Sy~dulla^@204~ tModel.DataObjectMethodAttribute(Syst~dulla^@204~ odel.DataObjectMethodType.Update, tru~dulla^@204~    Public Overloads Overridable Funct~dulla^@204~ 
                    ByVal PartNo As~dulla^@204~                     ByVal Description~dulla^@204~ _
                    ByVal Brand As~dulla^@204~                     ByVal Origin As S~dulla^@204~                   ByVal NetWeight As ~dulla^@204~                    ByVal Quantity As ~dulla^@204~                     ByVal Price As Sy~dulla^@204~ (Of Decimal),  _
                   ~dulla^@204~  As Decimal,  _
                    ~dulla^@204~ rID As String,  _
                  ~dulla^@204~ ceNo As String,  _
                 ~dulla^@204~ inal_PartNo As String,  _
          ~dulla^@204~ al Original_Description As String,  _~dulla^@204~          ByVal Original_Brand As Stri~dulla^@204~                ByVal Original_Origin ~dulla^@204~ 
                    ByVal Original_~dulla^@204~ String,  _
                    ByVal~dulla^@204~ ntity As Integer,  _
               ~dulla^@204~ iginal_Price As System.Nullable(Of De~dulla^@204~                    ByVal Original_Amo~dulla^@204~ l,  _
                    ByVal Orig~dulla^@204~ ID As String,  _
                   ~dulla^@204~ al_InvoiceNo As String) As Integer
 ~dulla^@204~  (PartNo Is Nothing) Then
          ~dulla^@204~ ew System.ArgumentNullException("Part~dulla^@204~      Else
                Me.Adapter~dulla^@204~ d.Parameters(0).Value = CType(PartNo,~dulla^@204~         End If
            If (Descr~dulla^@204~ hing) Then
                Throw New~dulla^@204~ entNullException("Description")
    ~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(1).Value = CType(Description,Strin~dulla^@204~    End If
            If (Brand Is N~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(2).Value = System.DBNull.Value
  ~dulla^@204~ e
                Me.Adapter.UpdateC~dulla^@204~ ters(2).Value = CType(Brand,String)
~dulla^@204~ nd If
            If (Origin Is Noth~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 3).Value = System.DBNull.Value
     ~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(3).Value = CType(Origin,String)
  ~dulla^@204~  If
            If (NetWeight Is Not~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ (4).Value = System.DBNull.Value
    ~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(4).Value = CType(NetWeight,String)~dulla^@204~  End If
            Me.Adapter.Updat~dulla^@204~ meters(5).Value = CType(Quantity,Inte~dulla^@204~      If (Price.HasValue = true) Then~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~  CType(Price.Value,Decimal)
        ~dulla^@204~              Me.Adapter.UpdateCommand~dulla^@204~ ).Value = System.DBNull.Value
      ~dulla^@204~ 
            Me.Adapter.UpdateCommand~dulla^@204~ ).Value = CType(Amount,Decimal)
    ~dulla^@204~ upplierID Is Nothing) Then
         ~dulla^@204~ New System.ArgumentNullException("Sup~dulla^@204~           Else
                Me.Ad~dulla^@204~ ommand.Parameters(8).Value = CType(Su~dulla^@204~ ng)
            End If
            ~dulla^@204~  Is Nothing) Then
                Th~dulla^@204~ m.ArgumentNullException("InvoiceNo")~dulla^@204~ Else
                Me.Adapter.Upda~dulla^@204~ ameters(9).Value = CType(InvoiceNo,St~dulla^@204~       End If
            If (Origina~dulla^@204~ othing) Then
                Throw N~dulla^@204~ umentNullException("Original_PartNo")~dulla^@204~  Else
                Me.Adapter.Upd~dulla^@204~ rameters(10).Value = CType(Original_P~dulla^@204~ 
            End If
            If ~dulla^@204~ cription Is Nothing) Then
          ~dulla^@204~ ew System.ArgumentNullException("Orig~dulla^@204~ ion")
            Else
            ~dulla^@204~ r.UpdateCommand.Parameters(11).Value ~dulla^@204~ nal_Description,String)
            ~dulla^@204~        If (Original_Brand Is Nothing)~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ Value = CType(1,Object)
            ~dulla^@204~ r.UpdateCommand.Parameters(13).Value ~dulla^@204~ ll.Value
            Else
         ~dulla^@204~ pter.UpdateCommand.Parameters(12).Val~dulla^@204~ Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(~dulla^@204~ d,String)
            End If
      ~dulla^@204~ ginal_Origin Is Nothing) Then
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(14).~dulla^@204~ (1,Object)
                Me.Adapte~dulla^@204~ nd.Parameters(15).Value = System.DBNu~dulla^@204~          Else
                Me.Ada~dulla^@204~ mmand.Parameters(14).Value = CType(0,~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ ).Value = CType(Original_Origin,Strin~dulla^@204~    End If
            If (Original_N~dulla^@204~ othing) Then
                Me.Adap~dulla^@204~ mand.Parameters(16).Value = CType(1,O~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ .Value = System.DBNull.Value
       ~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 16).Value = CType(0,Object)
        ~dulla^@204~ apter.UpdateCommand.Parameters(17).Va~dulla^@204~ riginal_NetWeight,String)
          ~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ alue = CType(Original_Quantity,Intege~dulla^@204~    If (Original_Price.HasValue = true~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ .Value = CType(0,Object)
           ~dulla^@204~ er.UpdateCommand.Parameters(20).Value~dulla^@204~ inal_Price.Value,Decimal)
          ~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ .Value = CType(1,Object)
           ~dulla^@204~ er.UpdateCommand.Parameters(20).Value~dulla^@204~ ull.Value
            End If
      ~dulla^@204~ ter.UpdateCommand.Parameters(21).Valu~dulla^@204~ ginal_Amount,Decimal)
            If~dulla^@204~ pplierID Is Nothing) Then
          ~dulla^@204~ ew System.ArgumentNullException("Orig~dulla^@204~ ID")
            Else
             ~dulla^@204~ .UpdateCommand.Parameters(22).Value =~dulla^@204~ al_SupplierID,String)
            En~dulla^@204~      If (Original_InvoiceNo Is Nothin~dulla^@204~             Throw New System.Argument~dulla^@204~ ("Original_InvoiceNo")
            E~dulla^@204~         Me.Adapter.UpdateCommand.Para~dulla^@204~ lue = CType(Original_InvoiceNo,String~dulla^@204~   End If
            Dim previousCon~dulla^@204~ As System.Data.ConnectionState = Me.A~dulla^@204~ Command.Connection.State
           ~dulla^@204~ ter.UpdateCommand.Connection.State An~dulla^@204~ .ConnectionState.Open)  _
          ~dulla^@204~  <> System.Data.ConnectionState.Open)~dulla^@204~           Me.Adapter.UpdateCommand.Co~dulla^@204~ 
            End If
            Try~dulla^@204~       Dim returnValue As Integer = Me~dulla^@204~ teCommand.ExecuteNonQuery
          ~dulla^@204~ returnValue
            Finally
   ~dulla^@204~ If (previousConnectionState = System.~dulla^@204~ onState.Closed) Then
               ~dulla^@204~ er.UpdateCommand.Connection.Close
  ~dulla^@204~  End If
            End Try
       ~dulla^@204~ 
    End Class
    
    <System.Co~dulla^@204~ r.GeneratedCodeAttribute("System.Data~dulla^@204~ DataSetGenerator", "2.0.0.0"),  _
  ~dulla^@204~ ponentModel.DesignerCategoryAttribute~dulla^@204~ 
     System.ComponentModel.ToolboxIt~dulla^@204~ 
     System.ComponentModel.DataObjec~dulla^@204~ ue),  _
     System.ComponentModel.D~dulla^@204~ ute("Microsoft.VSDesigner.DataSource.~dulla^@204~ dapterDesigner, Microsoft.VSDesigner"~dulla^@204~  ", Version=8.0.0.0, Culture=neutral,~dulla^@204~ en=b03f5f7f11d50a3a"),  _
     Syste~dulla^@204~ del.Design.HelpKeywordAttribute("vs.d~dulla^@204~ ter")>  _
    Partial Public Class S~dulla^@204~ Adapter
        Inherits System.Comp~dulla^@204~ mponent
        
        Private Wi~dulla^@204~ pter As System.Data.SqlClient.SqlData~dulla^@204~     
        Private _connection As ~dulla^@204~ qlClient.SqlConnection
        
   ~dulla^@204~ _commandCollection() As System.Data.S~dulla^@204~ ommand
        
        Private _cl~dulla^@204~  As Boolean
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Sub New()
            MyBase.New
~dulla^@204~ e.ClearBeforeFill = true
        End~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Private Read~dulla^@204~  Adapter() As System.Data.SqlClient.S~dulla^@204~ 
            Get
                If~dulla^@204~  Is Nothing) Then
                  ~dulla^@204~ ter
                End If
        ~dulla^@204~ n Me._adapter
            End Get
 ~dulla^@204~ operty
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~ perty Connection() As System.Data.Sql~dulla^@204~ nection
            Get
           ~dulla^@204~ connection Is Nothing) Then
        ~dulla^@204~ e.InitConnection
                End~dulla^@204~         Return Me._connection
      ~dulla^@204~ 
            Set
                Me~dulla^@204~ = value
                If (Not (Me.~dulla^@204~ tCommand) Is Nothing) Then
         ~dulla^@204~ .Adapter.InsertCommand.Connection = v~dulla^@204~          End If
                If (~dulla^@204~ er.DeleteCommand) Is Nothing) Then
 ~dulla^@204~       Me.Adapter.DeleteCommand.Connec~dulla^@204~ 
                End If
            ~dulla^@204~ Me.Adapter.UpdateCommand) Is Nothing)~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ = value
                End If
    ~dulla^@204~ im i As Integer = 0
                ~dulla^@204~  Me.CommandCollection.Length)
      ~dulla^@204~  If (Not (Me.CommandCollection(i)) Is~dulla^@204~ n
                        CType(Me.C~dulla^@204~ ion(i),System.Data.SqlClient.SqlComma~dulla^@204~ n = value
                    End If~dulla^@204~          i = (i + 1)
               ~dulla^@204~       End Set
        End Property
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Protected ReadOnly~dulla^@204~ mandCollection() As System.Data.SqlCl~dulla^@204~ nd()
            Get
              ~dulla^@204~ mandCollection Is Nothing) Then
    ~dulla^@204~    Me.InitCommandCollection
        ~dulla^@204~ f
                Return Me._command~dulla^@204~            End Get
        End Prope~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Proper~dulla^@204~ eFill() As Boolean
            Get
~dulla^@204~    Return Me._clearBeforeFill
      ~dulla^@204~ 
            Set
                Me~dulla^@204~ Fill = value
            End Set
  ~dulla^@204~ perty
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~  InitAdapter()
            Me._adapt~dulla^@204~ em.Data.SqlClient.SqlDataAdapter
   ~dulla^@204~ tableMapping As System.Data.Common.Da~dulla^@204~ g = New System.Data.Common.DataTableM~dulla^@204~        tableMapping.SourceTable = "Ta~dulla^@204~      tableMapping.DataSetTable = "Sal~dulla^@204~         tableMapping.ColumnMappings.A~dulla^@204~ "PartNo")
            tableMapping.C~dulla^@204~ .Add("Description", "Description")
 ~dulla^@204~ bleMapping.ColumnMappings.Add("Quanti~dulla^@204~ y")
            tableMapping.ColumnM~dulla^@204~ UnitPrice", "UnitPrice")
           ~dulla^@204~ .ColumnMappings.Add("Amount", "Amount~dulla^@204~    tableMapping.ColumnMappings.Add("D~dulla^@204~ DateOfSale")
            tableMappin~dulla^@204~ ngs.Add("CashSalesInvoiceNo", "CashSa~dulla^@204~ )
            tableMapping.ColumnMap~dulla^@204~ editSalesInvoiceNo", "CreditSalesInvo~dulla^@204~         Me._adapter.TableMappings.Add~dulla^@204~ )
            Me._adapter.DeleteComm~dulla^@204~ tem.Data.SqlClient.SqlCommand
      ~dulla^@204~ pter.DeleteCommand.Connection = Me.Co~dulla^@204~          Me._adapter.DeleteCommand.Co~dulla^@204~ DELETE FROM [dbo].[SalesInfo] WHERE (~dulla^@204~ Original_PartNo) AND ([Descript"& _ ~dulla^@204~     "ion] = @Original_Description) AN~dulla^@204~  = @Original_Quantity) AND ([UnitPr"&~dulla^@204~         "ice] = @Original_UnitPrice) ~dulla^@204~  = @Original_Amount) AND ([DateOfSale~dulla^@204~             "= @Original_DateOfSale) ~dulla^@204~ esInvoiceNo] = @Original_CashSalesInv~dulla^@204~                 ") AND ([CreditSalesI~dulla^@204~ Original_CreditSalesInvoiceNo))"
   ~dulla^@204~ adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            M~dulla^@204~ leteCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@Original_PartNo", S~dulla^@204~ lDbType.NVarChar, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "PartNo", System.Data.~dulla^@204~ n.Original, false, Nothing, "", "", "~dulla^@204~     Me._adapter.DeleteCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@O~dulla^@204~ iption", System.Data.SqlDbType.[Char]~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@Original_Quantity", Syste~dulla^@204~ ype.Int, 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "Quantity", System.Data.DataRow~dulla^@204~ nal, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.DeleteCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@Original~dulla^@204~ System.Data.SqlDbType.Money, 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "UnitPrice"~dulla^@204~ .DataRowVersion.Original, false, Noth~dulla^@204~ ""))
            Me._adapter.DeleteC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ Original_Amount", System.Data.SqlDbTy~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ t", System.Data.DataRowVersion.Origin~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@Original_DateOfSale", ~dulla^@204~ qlDbType.DateTime, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "DateOfSale", System.~dulla^@204~ ersion.Original, false, Nothing, "", ~dulla^@204~          Me._adapter.DeleteCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ CashSalesInvoiceNo", System.Data.SqlD~dulla^@204~ r, 0, System.Data.ParameterDirection.~dulla^@204~ "CashSalesInvoiceNo", System.Data.Dat~dulla^@204~ riginal, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.DeleteCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Orig~dulla^@204~ lesInvoiceNo", System.Data.SqlDbType.~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ tSalesInvoiceNo", System.Data.DataRow~dulla^@204~ nal, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.InsertCommand = New System.D~dulla^@204~ .SqlCommand
            Me._adapter.~dulla^@204~ .Connection = Me.Connection
        ~dulla^@204~ er.InsertCommand.CommandText = "INSER~dulla^@204~ [SalesInfo] ([PartNo], [Description],~dulla^@204~ [UnitPrice], "& _ 
                "~dulla^@204~ teOfSale], [CashSalesInvoiceNo], [Cre~dulla^@204~ ceNo]) VALUES (@P"& _ 
             ~dulla^@204~ escription, @Quantity, @UnitPrice, @A~dulla^@204~ fSale, @CashSalesInvo"& _ 
         ~dulla^@204~ , @CreditSalesInvoiceNo);"&Global.Mic~dulla^@204~ Basic.ChrW(13)&Global.Microsoft.Visua~dulla^@204~ 0)&"SELECT PartNo, Description, Quant~dulla^@204~ e,"& _ 
                " Amount, Da~dulla^@204~ hSalesInvoiceNo, CreditSalesInvoiceNo~dulla^@204~ fo WHE"& _ 
                "RE (Par~dulla^@204~ )"
            Me._adapter.InsertCom~dulla^@204~ ype = System.Data.CommandType.Text
 ~dulla^@204~ ._adapter.InsertCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@PartNo"~dulla^@204~ .SqlDbType.NVarChar, 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "PartNo", System.Da~dulla^@204~ sion.Current, false, Nothing, "", "",~dulla^@204~       Me._adapter.InsertCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ , System.Data.SqlDbType.[Char], 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "Descrip~dulla^@204~ .Data.DataRowVersion.Current, false, ~dulla^@204~ "", ""))
            Me._adapter.Ins~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@Quantity", System.Data.SqlDbType.~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~  System.Data.DataRowVersion.Current, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@UnitPrice", System.Data.Sq~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ UnitPrice", System.Data.DataRowVersio~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.InsertCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@Amount", System~dulla^@204~ pe.Money, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "Amount", System.Data.DataRowV~dulla^@204~ t, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.InsertCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@DateOfSale~dulla^@204~ a.SqlDbType.DateTime, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "DateOfSale", Syst~dulla^@204~ owVersion.Current, false, Nothing, ""~dulla^@204~            Me._adapter.InsertCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ esInvoiceNo", System.Data.SqlDbType.N~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ lesInvoiceNo", System.Data.DataRowVer~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.InsertCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@CreditSalesI~dulla^@204~ stem.Data.SqlDbType.NVarChar, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "CreditSal~dulla^@204~  System.Data.DataRowVersion.Current, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand = New System.Data.SqlClient.SqlC~dulla^@204~        Me._adapter.UpdateCommand.Conn~dulla^@204~ onnection
            Me._adapter.Up~dulla^@204~ ommandText = "UPDATE [dbo].[SalesInfo~dulla^@204~ ] = @PartNo, [Description] = @Descrip~dulla^@204~ 
                "uantity] = @Quanti~dulla^@204~ e] = @UnitPrice, [Amount] = @Amount, ~dulla^@204~ & _ 
                " = @DateOfSale~dulla^@204~ nvoiceNo] = @CashSalesInvoiceNo, [Cre~dulla^@204~ ceN"& _ 
                "o] = @Cred~dulla^@204~ eNo WHERE (([PartNo] = @Original_Part~dulla^@204~ criptio"& _ 
                "n] = @~dulla^@204~ ription) AND ([Quantity] = @Original_~dulla^@204~  ([UnitPric"& _ 
                "e]~dulla^@204~ UnitPrice) AND ([Amount] = @Original_~dulla^@204~ [DateOfSale] = "& _ 
               ~dulla^@204~ ateOfSale) AND ([CashSalesInvoiceNo] ~dulla^@204~ ashSalesInvoiceNo) "& _ 
           ~dulla^@204~ reditSalesInvoiceNo] = @Original_Cred~dulla^@204~ eNo));"&Global.Microsoft.VisualBasic.~dulla^@204~ al.Microsoft.VisualBasic.ChrW(10)&"SE~dulla^@204~ "& _ 
                "Description, ~dulla^@204~ tPrice, Amount, DateOfSale, CashSales~dulla^@204~ edit"& _ 
                "SalesInvo~dulla^@204~ lesInfo WHERE (PartNo = @PartNo)"
  ~dulla^@204~ _adapter.UpdateCommand.CommandType = ~dulla^@204~ ommandType.Text
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@PartNo", System.Data.SqlDb~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ PartNo", System.Data.DataRowVersion.C~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ pdateCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@Description", Syst~dulla^@204~ Type.[Char], 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "Description", System.Data.~dulla^@204~ n.Current, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.UpdateCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Qu~dulla^@204~ em.Data.SqlDbType.Int, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "Quantity", Syste~dulla^@204~ wVersion.Current, false, Nothing, "",~dulla^@204~           Me._adapter.UpdateCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~ e", System.Data.SqlDbType.Money, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "UnitPr~dulla^@204~ Data.DataRowVersion.Current, false, N~dulla^@204~ ", ""))
            Me._adapter.Upda~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@Amount", System.Data.SqlDbType.Mon~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ stem.Data.DataRowVersion.Current, fal~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@DateOfSale", System.Data.SqlD~dulla^@204~ e, 0, System.Data.ParameterDirection.~dulla^@204~ "DateOfSale", System.Data.DataRowVers~dulla^@204~ false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@CashS~dulla^@204~ ", System.Data.SqlDbType.NVarChar, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Cash~dulla^@204~ o", System.Data.DataRowVersion.Curren~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@CreditSalesInvoiceNo", ~dulla^@204~ qlDbType.NVarChar, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "CreditSalesInvoiceNo~dulla^@204~ a.DataRowVersion.Current, false, Noth~dulla^@204~ ""))
            Me._adapter.UpdateC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ Original_PartNo", System.Data.SqlDbTy~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ rtNo", System.Data.DataRowVersion.Ori~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ dateCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@Original_Descriptio~dulla^@204~ ta.SqlDbType.[Char], 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "Description", Syst~dulla^@204~ owVersion.Original, false, Nothing, "~dulla^@204~             Me._adapter.UpdateCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ al_Quantity", System.Data.SqlDbType.I~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ System.Data.DataRowVersion.Original, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Original_UnitPrice", Syste~dulla^@204~ ype.Money, 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "UnitPrice", System.Data.Data~dulla^@204~ iginal, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.UpdateCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@Origi~dulla^@204~ System.Data.SqlDbType.Money, 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "Amount", S~dulla^@204~ taRowVersion.Original, false, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ginal_DateOfSale", System.Data.SqlDbT~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ ateOfSale", System.Data.DataRowVersio~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Original_CashS~dulla^@204~ ", System.Data.SqlDbType.NVarChar, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Cash~dulla^@204~ o", System.Data.DataRowVersion.Origin~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@Original_CreditSalesIn~dulla^@204~ tem.Data.SqlDbType.NVarChar, 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "CreditSale~dulla^@204~ System.Data.DataRowVersion.Original, ~dulla^@204~ g, "", "", ""))
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Private Sub InitConne~dulla^@204~         Me._connection = New System.D~dulla^@204~ .SqlConnection
            Me._conne~dulla^@204~ ionString = Global.InventoryControlSy~dulla^@204~ tings.Default.PurchaseInfoConnection~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ nitCommandCollection()
            M~dulla^@204~ lection = New System.Data.SqlClient.S~dulla^@204~ {}
            Me._commandCollection~dulla^@204~ tem.Data.SqlClient.SqlCommand
      ~dulla^@204~ mandCollection(0).Connection = Me.Con~dulla^@204~         Me._commandCollection(0).Comm~dulla^@204~ LECT PartNo, Description, Quantity, U~dulla^@204~ unt, DateOfSale, CashSalesInv"& _ 
 ~dulla^@204~   "oiceNo, CreditSalesInvoiceNo FROM ~dulla^@204~ "
            Me._commandCollection(~dulla^@204~ e = System.Data.CommandType.Text
   ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute(),  _
         Sys~dulla^@204~ Model.Design.HelpKeywordAttribute("vs~dulla^@204~ apter"),  _
         System.Componen~dulla^@204~ jectMethodAttribute(System.ComponentM~dulla^@204~ ctMethodType.Fill, true)>  _
       ~dulla^@204~ oads Overridable Function Fill(ByVal ~dulla^@204~ PurchaseInfoDataSet2.SalesInfoDataTab~dulla^@204~ r
            Me.Adapter.SelectComma~dulla^@204~ ndCollection(0)
            If (Me.C~dulla^@204~ l = true) Then
                dataT~dulla^@204~            End If
            Dim re~dulla^@204~ Integer = Me.Adapter.Fill(dataTable)~dulla^@204~ Return returnValue
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute(),  _
         System.Compo~dulla^@204~ ign.HelpKeywordAttribute("vs.data.Tab~dulla^@204~  _
         System.ComponentModel.Da~dulla^@204~ dAttribute(System.ComponentModel.Data~dulla^@204~ ype.[Select], true)>  _
        Publ~dulla^@204~ Overridable Function GetData() As Pur~dulla^@204~ Set2.SalesInfoDataTable
            ~dulla^@204~ lectCommand = Me.CommandCollection(0)~dulla^@204~  Dim dataTable As PurchaseInfoDataSet~dulla^@204~ taTable = New PurchaseInfoDataSet2.Sa~dulla^@204~ ble
            Me.Adapter.Fill(data~dulla^@204~        Return dataTable
        End ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute(),  _
         System.~dulla^@204~ l.Design.HelpKeywordAttribute("vs.dat~dulla^@204~ r")>  _
        Public Overloads Ove~dulla^@204~ tion Update(ByVal dataTable As Purcha~dulla^@204~ 2.SalesInfoDataTable) As Integer
   ~dulla^@204~ rn Me.Adapter.Update(dataTable)
    ~dulla^@204~ ion
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute(),  _
        ~dulla^@204~ nentModel.Design.HelpKeywordAttribute~dulla^@204~ leAdapter")>  _
        Public Overl~dulla^@204~ ble Function Update(ByVal dataSet As ~dulla^@204~ ataSet2) As Integer
            Retu~dulla^@204~ .Update(dataSet, "SalesInfo")
      ~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute(),  _
         S~dulla^@204~ ntModel.Design.HelpKeywordAttribute("~dulla^@204~ Adapter")>  _
        Public Overloa~dulla^@204~ e Function Update(ByVal dataRow As Sy~dulla^@204~ aRow) As Integer
            Return ~dulla^@204~ date(New System.Data.DataRow() {dataR~dulla^@204~  End Function
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ stem.ComponentModel.Design.HelpKeywor~dulla^@204~ s.data.TableAdapter")>  _
        Pu~dulla^@204~ s Overridable Function Update(ByVal d~dulla^@204~ System.Data.DataRow) As Integer
    ~dulla^@204~ n Me.Adapter.Update(dataRows)
      ~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute(),  _
         S~dulla^@204~ ntModel.Design.HelpKeywordAttribute("~dulla^@204~ Adapter"),  _
         System.Compon~dulla^@204~ ObjectMethodAttribute(System.Componen~dulla^@204~ jectMethodType.Delete, true)>  _
   ~dulla^@204~ verloads Overridable Function Delete(~dulla^@204~ l_PartNo As String, ByVal Original_De~dulla^@204~ String, ByVal Original_Quantity As In~dulla^@204~ Original_UnitPrice As Decimal, ByVal ~dulla^@204~ nt As Decimal, ByVal Original_DateOfS~dulla^@204~ ByVal Original_CashSalesInvoiceNo As ~dulla^@204~  Original_CreditSalesInvoiceNo As Str~dulla^@204~ er
            If (Original_PartNo I~dulla^@204~ en
                Throw New System.~dulla^@204~ xception("Original_PartNo")
        ~dulla^@204~              Me.Adapter.DeleteCommand~dulla^@204~ ).Value = CType(Original_PartNo,Strin~dulla^@204~    End If
            If (Original_D~dulla^@204~  Nothing) Then
                Throw~dulla^@204~ rgumentNullException("Original_Descri~dulla^@204~         Else
                Me.Adap~dulla^@204~ mand.Parameters(1).Value = CType(Orig~dulla^@204~ ion,String)
            End If
    ~dulla^@204~ apter.DeleteCommand.Parameters(2).Val~dulla^@204~ iginal_Quantity,Integer)
           ~dulla^@204~ eleteCommand.Parameters(3).Value = CT~dulla^@204~ UnitPrice,Decimal)
            Me.Ad~dulla^@204~ ommand.Parameters(4).Value = CType(Or~dulla^@204~ ,Decimal)
            Me.Adapter.Del~dulla^@204~ rameters(5).Value = CType(Original_Da~dulla^@204~ )
            If (Original_CashSales~dulla^@204~ Nothing) Then
                Throw ~dulla^@204~ gumentNullException("Original_CashSalesInvoiceNo")
            Else
         ~dulla^@204~ pter.DeleteCommand.Parameters(6).Valu~dulla^@204~ ginal_CashSalesInvoiceNo,String)
   ~dulla^@204~ If
            If (Original_CreditSa~dulla^@204~ Is Nothing) Then
                Thr~dulla^@204~ .ArgumentNullException("Original_Cred~dulla^@204~ eNo")
            Else
            ~dulla^@204~ r.DeleteCommand.Parameters(7).Value =~dulla^@204~ al_CreditSalesInvoiceNo,String)
    ~dulla^@204~ f
            Dim previousConnection~dulla^@204~ em.Data.ConnectionState = Me.Adapter.~dulla^@204~ .Connection.State
            If ((M~dulla^@204~ eteCommand.Connection.State And Syste~dulla^@204~ tionState.Open)  _
                 ~dulla^@204~ tem.Data.ConnectionState.Open) Then
~dulla^@204~    Me.Adapter.DeleteCommand.Connectio~dulla^@204~        End If
            Try 
    ~dulla^@204~ im returnValue As Integer = Me.Adapte~dulla^@204~ nd.ExecuteNonQuery
                R~dulla^@204~ alue
            Finally
          ~dulla^@204~ viousConnectionState = System.Data.Co~dulla^@204~ .Closed) Then
                    Me~dulla^@204~ teCommand.Connection.Close
         ~dulla^@204~ 
            End Try
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute(),  _
         System.Co~dulla^@204~ Design.HelpKeywordAttribute("vs.data.~dulla^@204~ ),  _
         System.ComponentModel~dulla^@204~ thodAttribute(System.ComponentModel.D~dulla^@204~ odType.Insert, true)>  _
        Pub~dulla^@204~  Overridable Function Insert(ByVal Pa~dulla^@204~ g, ByVal Description As String, ByVal~dulla^@204~ Integer, ByVal UnitPrice As Decimal, ~dulla^@204~ As Decimal, ByVal DateOfSale As Date,~dulla^@204~ lesInvoiceNo As String, ByVal CreditS~dulla^@204~  As String) As Integer
            I~dulla^@204~ Nothing) Then
                Throw ~dulla^@204~ gumentNullException("PartNo")
      ~dulla^@204~                Me.Adapter.InsertComma~dulla^@204~ (0).Value = CType(PartNo,String)
   ~dulla^@204~ If
            If (Description Is No~dulla^@204~                 Throw New System.Argu~dulla^@204~ tion("Description")
            Else~dulla^@204~      Me.Adapter.InsertCommand.Paramet~dulla^@204~ = CType(Description,String)
        ~dulla^@204~            Me.Adapter.InsertCommand.P~dulla^@204~ Value = CType(Quantity,Integer)
    ~dulla^@204~ apter.InsertCommand.Parameters(3).Val~dulla^@204~ itPrice,Decimal)
            Me.Adap~dulla^@204~ mand.Parameters(4).Value = CType(Amou~dulla^@204~             Me.Adapter.InsertCommand.~dulla^@204~ .Value = CType(DateOfSale,Date)
    ~dulla^@204~ ashSalesInvoiceNo Is Nothing) Then
 ~dulla^@204~   Throw New System.ArgumentNullExcept~dulla^@204~ sInvoiceNo")
            Else
     ~dulla^@204~ .Adapter.InsertCommand.Parameters(6).~dulla^@204~ (CashSalesInvoiceNo,String)
        ~dulla^@204~            If (CreditSalesInvoiceNo I~dulla^@204~ en
                Throw New System.~dulla^@204~ xception("CreditSalesInvoiceNo")
   ~dulla^@204~ 
                Me.Adapter.InsertCo~dulla^@204~ ers(7).Value = CType(CreditSalesInvoi~dulla^@204~ 
            End If
            Dim ~dulla^@204~ ctionState As System.Data.ConnectionS~dulla^@204~ pter.InsertCommand.Connection.State
~dulla^@204~ f ((Me.Adapter.InsertCommand.Connecti~dulla^@204~ System.Data.ConnectionState.Open)  _~dulla^@204~             <> System.Data.Connection~dulla^@204~ hen
                Me.Adapter.Inser~dulla^@204~ ection.Open
            End If
    ~dulla^@204~ 
                Dim returnValue As I~dulla^@204~ dapter.InsertCommand.ExecuteNonQuery~dulla^@204~     Return returnValue
            F~dulla^@204~            If (previousConnectionStat~dulla^@204~ ta.ConnectionState.Closed) Then
    ~dulla^@204~    Me.Adapter.InsertCommand.Connectio~dulla^@204~             End If
            End T~dulla^@204~ nd Function
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute(),  _
~dulla^@204~ em.ComponentModel.Design.HelpKeywordA~dulla^@204~ data.TableAdapter"),  _
         Sys~dulla^@204~ Model.DataObjectMethodAttribute(Syste~dulla^@204~ del.DataObjectMethodType.Update, true~dulla^@204~   Public Overloads Overridable Functi~dulla^@204~ 
                    ByVal PartNo As ~dulla^@204~                    ByVal Description ~dulla^@204~ 
                    ByVal Quantity ~dulla^@204~ _
                    ByVal UnitPric~dulla^@204~   _
                    ByVal Amount~dulla^@204~  _
                    ByVal DateOfS~dulla^@204~  _
                    ByVal CashSal~dulla^@204~ s String,  _
                    ByV~dulla^@204~ sInvoiceNo As String,  _
           ~dulla^@204~ l Original_PartNo As String,  _
    ~dulla^@204~    ByVal Original_Description As Stri~dulla^@204~                ByVal Original_Quantit~dulla^@204~   _
                    ByVal Origin~dulla^@204~ As Decimal,  _
                    B~dulla^@204~ _Amount As Decimal,  _
             ~dulla^@204~ Original_DateOfSale As Date,  _
    ~dulla^@204~    ByVal Original_CashSalesInvoiceNo ~dulla^@204~ 
                    ByVal Original_~dulla^@204~ voiceNo As String) As Integer
      ~dulla^@204~ tNo Is Nothing) Then
               ~dulla^@204~ stem.ArgumentNullException("PartNo")~dulla^@204~ Else
                Me.Adapter.Upda~dulla^@204~ ameters(0).Value = CType(PartNo,Strin~dulla^@204~    End If
            If (Descriptio~dulla^@204~  Then
                Throw New Syst~dulla^@204~ llException("Description")
         ~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ .Value = CType(Description,String)
 ~dulla^@204~ d If
            Me.Adapter.UpdateCo~dulla^@204~ ers(2).Value = CType(Quantity,Integer~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ Type(UnitPrice,Decimal)
            ~dulla^@204~ dateCommand.Parameters(4).Value = CTy~dulla^@204~ imal)
            Me.Adapter.UpdateC~dulla^@204~ ters(5).Value = CType(DateOfSale,Date~dulla^@204~   If (CashSalesInvoiceNo Is Nothing) ~dulla^@204~          Throw New System.ArgumentNul~dulla^@204~ ashSalesInvoiceNo")
            Else~dulla^@204~      Me.Adapter.UpdateCommand.Paramet~dulla^@204~ = CType(CashSalesInvoiceNo,String)
 ~dulla^@204~ d If
            If (CreditSalesInvo~dulla^@204~ ing) Then
                Throw New ~dulla^@204~ ntNullException("CreditSalesInvoiceNo~dulla^@204~    Else
                Me.Adapter.U~dulla^@204~ Parameters(7).Value = CType(CreditSal~dulla^@204~ tring)
            End If
         ~dulla^@204~ al_PartNo Is Nothing) Then
         ~dulla^@204~ New System.ArgumentNullException("Ori~dulla^@204~ )
            Else
                ~dulla^@204~ dateCommand.Parameters(8).Value = CTy~dulla^@204~ artNo,String)
            End If
  ~dulla^@204~ (Original_Description Is Nothing) The~dulla^@204~       Throw New System.ArgumentNullEx~dulla^@204~ inal_Description")
            Else~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~  CType(Original_Description,String)
~dulla^@204~ nd If
            Me.Adapter.UpdateC~dulla^@204~ ters(10).Value = CType(Original_Quant~dulla^@204~ 
            Me.Adapter.UpdateCommand~dulla^@204~ 1).Value = CType(Original_UnitPrice,D~dulla^@204~         Me.Adapter.UpdateCommand.Para~dulla^@204~ lue = CType(Original_Amount,Decimal)~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(1~dulla^@204~ ype(Original_DateOfSale,Date)
      ~dulla^@204~ ginal_CashSalesInvoiceNo Is Nothing) ~dulla^@204~          Throw New System.ArgumentNul~dulla^@204~ riginal_CashSalesInvoiceNo")
       ~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 14).Value = CType(Original_CashSalesI~dulla^@204~ ng)
            End If
            ~dulla^@204~ CreditSalesInvoiceNo Is Nothing) Then~dulla^@204~      Throw New System.ArgumentNullExc~dulla^@204~ nal_CreditSalesInvoiceNo")
         ~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ ).Value = CType(Original_CreditSalesI~dulla^@204~ ng)
            End If
            ~dulla^@204~ onnectionState As System.Data.Connect~dulla^@204~ .Adapter.UpdateCommand.Connection.Sta~dulla^@204~    If ((Me.Adapter.UpdateCommand.Conn~dulla^@204~ And System.Data.ConnectionState.Open)  _
                        <> System.Dat~dulla^@204~ tate.Open) Then
                Me.A~dulla^@204~ Command.Connection.Open
            ~dulla^@204~        Try 
                Dim retu~dulla^@204~ teger = Me.Adapter.UpdateCommand.Exec~dulla^@204~                 Return returnValue
 ~dulla^@204~ nally
                If (previousCo~dulla^@204~  = System.Data.ConnectionState.Closed~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ .Close
                End If
     ~dulla^@204~ y
        End Function
    End Clas~dulla^@204~ <System.CodeDom.Compiler.GeneratedCod~dulla^@204~ ystem.Data.Design.TypedDataSetGenerat~dulla^@204~ "),  _
     System.ComponentModel.De~dulla^@204~ yAttribute("code"),  _
     System.C~dulla^@204~ .ToolboxItem(true),  _
     System.C~dulla^@204~ .DataObjectAttribute(true),  _
     ~dulla^@204~ entModel.DesignerAttribute("Microsoft~dulla^@204~ ataSource.Design.TableAdapterDesigner~dulla^@204~ SDesigner"& _ 
        ", Version=8.~dulla^@204~ e=neutral, PublicKeyToken=b03f5f7f11d~dulla^@204~      System.ComponentModel.Design.Hel~dulla^@204~ bute("vs.data.TableAdapter")>  _
   ~dulla^@204~ ic Class StockCardTableAdapter
     ~dulla^@204~ ystem.ComponentModel.Component
     ~dulla^@204~ Private WithEvents _adapter As System~dulla^@204~ nt.SqlDataAdapter
        
        ~dulla^@204~ ection As System.Data.SqlClient.SqlCo~dulla^@204~      
        Private _commandCollec~dulla^@204~ tem.Data.SqlClient.SqlCommand
      ~dulla^@204~ rivate _clearBeforeFill As Boolean
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public Sub New()
 ~dulla^@204~ Base.New
            Me.ClearBeforeF~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ ivate ReadOnly Property Adapter() As ~dulla^@204~ qlClient.SqlDataAdapter
            ~dulla^@204~         If (Me._adapter Is Nothing) T~dulla^@204~             Me.InitAdapter
         ~dulla^@204~ 
                Return Me._adapter~dulla^@204~ End Get
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Friend Property Connecti~dulla^@204~ m.Data.SqlClient.SqlConnection
     ~dulla^@204~                If (Me._connection Is ~dulla^@204~ 
                    Me.InitConnecti~dulla^@204~        End If
                Return~dulla^@204~ on
            End Get
            ~dulla^@204~         Me._connection = value
     ~dulla^@204~  (Not (Me.Adapter.InsertCommand) Is N~dulla^@204~ 
                    Me.Adapter.Inser~dulla^@204~ ection = value
                End I~dulla^@204~       If (Not (Me.Adapter.DeleteComma~dulla^@204~ g) Then
                    Me.Adapt~dulla^@204~ and.Connection = value
             ~dulla^@204~               If (Not (Me.Adapter.Upd~dulla^@204~ s Nothing) Then
                    ~dulla^@204~ dateCommand.Connection = value
     ~dulla^@204~ d If
                Dim i As Intege~dulla^@204~           Do While (i < Me.CommandCol~dulla^@204~ h)
                    If (Not (Me.C~dulla^@204~ ion(i)) Is Nothing) Then
           ~dulla^@204~ CType(Me.CommandCollection(i),System.~dulla^@204~ t.SqlCommand).Connection = value
   ~dulla^@204~     End If
                    i = (~dulla^@204~            Loop
            End Set~dulla^@204~ Property
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ d ReadOnly Property CommandCollection~dulla^@204~ Data.SqlClient.SqlCommand()
        ~dulla^@204~             If (Me._commandCollection~dulla^@204~ Then
                    Me.InitComm~dulla^@204~ 
                End If
           ~dulla^@204~ e._commandCollection
            End~dulla^@204~  End Property
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Property ClearBeforeFill() As Boo~dulla^@204~      Get
                Return Me._~dulla^@204~ ll
            End Get
            ~dulla^@204~         Me._clearBeforeFill = value
~dulla^@204~ nd Set
        End Property
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Private Sub InitAdapter()~dulla^@204~  Me._adapter = New System.Data.SqlCli~dulla^@204~ apter
            Dim tableMapping A~dulla^@204~ .Common.DataTableMapping = New System~dulla^@204~ DataTableMapping
            tableMa~dulla^@204~ able = "Table"
            tableMapp~dulla^@204~ ble = "StockCard"
            tableM~dulla^@204~ Mappings.Add("StockCardNo", "StockCar~dulla^@204~       tableMapping.ColumnMappings.Add~dulla^@204~ artNo")
            tableMapping.Col~dulla^@204~ dd("Description", "Description")
   ~dulla^@204~ eMapping.ColumnMappings.Add("CostPric~dulla^@204~ e")
            tableMapping.ColumnM~dulla^@204~ SellingPrice", "SellingPrice")
     ~dulla^@204~ apter.TableMappings.Add(tableMapping)~dulla^@204~  Me._adapter.DeleteCommand = New Syst~dulla^@204~ ient.SqlCommand
            Me._adap~dulla^@204~ mand.Connection = Me.Connection
    ~dulla^@204~ dapter.DeleteCommand.CommandText = "D~dulla^@204~ bo].[StockCard] WHERE (([StockCardNo]~dulla^@204~ StockCardNo) AND "& _ 
             ~dulla^@204~  = @Original_PartNo) AND ([Descriptio~dulla^@204~ l_Description) AND (["& _ 
         ~dulla^@204~ rice] = @Original_CostPrice) AND ([Se~dulla^@204~  @Original_SellingPrice))"& _ 
     ~dulla^@204~ 
            Me._adapter.DeleteComma~dulla^@204~ e = System.Data.CommandType.Text
   ~dulla^@204~ adapter.DeleteCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Original_~dulla^@204~  System.Data.SqlDbType.NVarChar, 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "StockC~dulla^@204~ m.Data.DataRowVersion.Original, false~dulla^@204~ , "", ""))
            Me._adapter.D~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@Original_PartNo", System.Data.S~dulla^@204~ Char, 0, System.Data.ParameterDirecti~dulla^@204~ 0, "PartNo", System.Data.DataRowVersi~dulla^@204~ false, Nothing, "", "", ""))
       ~dulla^@204~ ter.DeleteCommand.Parameters.Add(New ~dulla^@204~ qlClient.SqlParameter("@Original_Desc~dulla^@204~ tem.Data.SqlDbType.[Char], 0, System.~dulla^@204~ rDirection.Input, 0, 0, "Description"~dulla^@204~ .DataRowVersion.Original, false, Noth~dulla^@204~ ""))
            Me._adapter.DeleteC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ Original_CostPrice", System.Data.SqlD~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ stPrice", System.Data.DataRowVersion.~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .DeleteCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@Original_Selling~dulla^@204~ m.Data.SqlDbType.Money, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "SellingPrice", ~dulla^@204~ ataRowVersion.Original, false, Nothin~dulla^@204~ ))
            Me._adapter.InsertCom~dulla^@204~ stem.Data.SqlClient.SqlCommand
     ~dulla^@204~ apter.InsertCommand.Connection = Me.C~dulla^@204~           Me._adapter.InsertCommand.C~dulla^@204~ "INSERT INTO [dbo].[StockCard] ([Stoc~dulla^@204~ rtNo], [Description], [CostPrice"& _ ~dulla^@204~      "], [SellingPrice]) VALUES (@Sto~dulla^@204~ rtNo, @Description, @CostPrice, @Sel"~dulla^@204~          "lingPrice);"&Global.Microso~dulla^@204~ c.ChrW(13)&Global.Microsoft.VisualBas~dulla^@204~ SELECT StockCardNo, PartNo, Descripti~dulla^@204~ , SellingPrice FR"& _ 
             ~dulla^@204~ ard WHERE (StockCardNo = @StockCardNo~dulla^@204~    Me._adapter.InsertCommand.CommandT~dulla^@204~ Data.CommandType.Text
            Me~dulla^@204~ ertCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@StockCardNo", System~dulla^@204~ pe.NVarChar, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "StockCardNo", System.Data.~dulla^@204~ n.Current, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.InsertCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Pa~dulla^@204~ .Data.SqlDbType.NVarChar, 0, System.D~dulla^@204~ Direction.Input, 0, 0, "PartNo", Syst~dulla^@204~ owVersion.Current, false, Nothing, ""~dulla^@204~            Me._adapter.InsertCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ tion", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ertCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@CostPrice", System.D~dulla^@204~ .Money, 0, System.Data.ParameterDirec~dulla^@204~ , 0, "CostPrice", System.Data.DataRow~dulla^@204~ nt, false, Nothing, "", "", ""))
   ~dulla^@204~ adapter.InsertCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@SellingPr~dulla^@204~ Data.SqlDbType.Money, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "SellingPrice", Sy~dulla^@204~ aRowVersion.Current, false, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ m.Data.SqlClient.SqlCommand
        ~dulla^@204~ er.UpdateCommand.Connection = Me.Conn~dulla^@204~        Me._adapter.UpdateCommand.Comm~dulla^@204~ DATE [dbo].[StockCard] SET [StockCard~dulla^@204~ ardNo, [PartNo] = @PartNo, [D"& _ 
 ~dulla^@204~   "escription] = @Description, [CostP~dulla^@204~ Price, [SellingPrice] = @SellingP"& _~dulla^@204~       "rice WHERE (([StockCardNo] = @~dulla^@204~ kCardNo) AND ([PartNo] = @Original_Pa~dulla^@204~           "rtNo) AND ([Description] =~dulla^@204~ scription) AND ([CostPrice] = @Origin~dulla^@204~               "ostPrice) AND ([Sellin~dulla^@204~ iginal_SellingPrice));"&Global.Micros~dulla^@204~ ic.ChrW(13)&Global.Microsoft.VisualBa~dulla^@204~ "SELECT StockCardNo, P"& _ 
        ~dulla^@204~ o, Description, CostPrice, SellingPri~dulla^@204~ Card WHERE (StockCardNo = "& _ 
    ~dulla^@204~ @StockCardNo)"
            Me._adapt~dulla^@204~ and.CommandType = System.Data.Command~dulla^@204~           Me._adapter.UpdateCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~ dNo", System.Data.SqlDbType.NVarChar,~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "S~dulla^@204~ System.Data.DataRowVersion.Current, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@PartNo", System.Data.SqlDbT~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ artNo", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ dateCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@Description", Syste~dulla^@204~ ype.[Char], 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "Description", System.Data.D~dulla^@204~ .Current, false, Nothing, "", "", "")~dulla^@204~   Me._adapter.UpdateCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@Cos~dulla^@204~ em.Data.SqlDbType.Money, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "CostPrice", Sy~dulla^@204~ aRowVersion.Current, false, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ ngPrice", System.Data.SqlDbType.Money~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ , System.Data.DataRowVersion.Current,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@Original_StockCardNo", Sy~dulla^@204~ DbType.NVarChar, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "StockCardNo", System.D~dulla^@204~ rsion.Original, false, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ artNo", System.Data.SqlDbType.NVarCha~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ tem.Data.DataRowVersion.Original, fal~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@Original_Description", System~dulla^@204~ pe.[Char], 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "Description", System.Data.Da~dulla^@204~ Original, false, Nothing, "", "", "")~dulla^@204~   Me._adapter.UpdateCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@Ori~dulla^@204~ ce", System.Data.SqlDbType.Money, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "CostP~dulla^@204~ .Data.DataRowVersion.Original, false,~dulla^@204~  "", ""))
            Me._adapter.Up~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@Original_SellingPrice", System.D~dulla^@204~ .Money, 0, System.Data.ParameterDirec~dulla^@204~ , 0, "SellingPrice", System.Data.Data~dulla^@204~ iginal, false, Nothing, "", "", ""))~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ nitConnection()
            Me._conn~dulla^@204~ System.Data.SqlClient.SqlConnection
~dulla^@204~ e._connection.ConnectionString = Glob~dulla^@204~ ontrolSystem.My.MySettings.Default.Pu~dulla^@204~ nection
        End Sub
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Private Sub InitCommandCollec~dulla^@204~        Me._commandCollection = New Sy~dulla^@204~ Client.SqlCommand(0) {}
            ~dulla^@204~ llection(0) = New System.Data.SqlClie~dulla^@204~ 
            Me._commandCollection(0~dulla^@204~ = Me.Connection
            Me._comm~dulla^@204~ (0).CommandText = "SELECT StockCardNo~dulla^@204~ cription, CostPrice, SellingPrice FRO~dulla^@204~ "& _ 
                "rd"
        ~dulla^@204~ ndCollection(0).CommandType = System.~dulla^@204~ ype.Text
        End Sub
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
         System.ComponentModel.Desig~dulla^@204~ Attribute("vs.data.TableAdapter"),  _~dulla^@204~ stem.ComponentModel.DataObjectMethodA~dulla^@204~ em.ComponentModel.DataObjectMethodTyp~dulla^@204~ >  _
        Public Overloads Overri~dulla^@204~ n Fill(ByVal dataTable As PurchaseInf~dulla^@204~ ckCardDataTable) As Integer
        ~dulla^@204~ r.SelectCommand = Me.CommandCollectio~dulla^@204~      If (Me.ClearBeforeFill = true) T~dulla^@204~         dataTable.Clear
            ~dulla^@204~        Dim returnValue As Integer = M~dulla^@204~ l(dataTable)
            Return retu~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute(),~dulla^@204~  System.ComponentModel.Design.HelpKey~dulla^@204~ ("vs.data.TableAdapter"),  _
       ~dulla^@204~ onentModel.DataObjectMethodAttribute(~dulla^@204~ entModel.DataObjectMethodType.[Select~dulla^@204~ 
        Public Overloads Overridable~dulla^@204~ Data() As PurchaseInfoDataSet2.StockC~dulla^@204~ 
            Me.Adapter.SelectCommand~dulla^@204~ Collection(0)
            Dim dataTa~dulla^@204~ seInfoDataSet2.StockCardDataTable = N~dulla^@204~ foDataSet2.StockCardDataTable
      ~dulla^@204~ ter.Fill(dataTable)
            Retu~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~       System.ComponentModel.Design.He~dulla^@204~ ibute("vs.data.TableAdapter")>  _
  ~dulla^@204~ Overloads Overridable Function Update~dulla^@204~ ble As PurchaseInfoDataSet2.StockCard~dulla^@204~  Integer
            Return Me.Adapt~dulla^@204~ aTable)
        End Function
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
         System.ComponentModel.D~dulla^@204~ wordAttribute("vs.data.TableAdapter")~dulla^@204~  Public Overloads Overridable Functio~dulla^@204~ l dataSet As PurchaseInfoDataSet2) As~dulla^@204~          Return Me.Adapter.Update(dat~dulla^@204~ ard")
        End Function
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
         System.ComponentModel.Des~dulla^@204~ rdAttribute("vs.data.TableAdapter")> ~dulla^@204~ ublic Overloads Overridable Function ~dulla^@204~ dataRow As System.Data.DataRow) As In~dulla^@204~       Return Me.Adapter.Update(New Sy~dulla^@204~ aRow() {dataRow})
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute(),  _
         System.Compon~dulla^@204~ gn.HelpKeywordAttribute("vs.data.Tabl~dulla^@204~ _
        Public Overloads Overridab~dulla^@204~ pdate(ByVal dataRows() As System.Data~dulla^@204~ Integer
            Return Me.Adapte~dulla^@204~ Rows)
        End Function
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAda~dulla^@204~         System.ComponentModel.DataObj~dulla^@204~ ibute(System.ComponentModel.DataObjec~dulla^@204~ elete, true)>  _
        Public Over~dulla^@204~ able Function Delete(ByVal Original_S~dulla^@204~  String, ByVal Original_PartNo As Str~dulla^@204~ iginal_Description As String, ByVal O~dulla^@204~ rice As Decimal, ByVal Original_Selli~dulla^@204~ cimal) As Integer
            If (Or~dulla^@204~ ardNo Is Nothing) Then
             ~dulla^@204~ System.ArgumentNullException("Origina~dulla^@204~ ")
            Else
               ~dulla^@204~ eleteCommand.Parameters(0).Value = CT~dulla^@204~ StockCardNo,String)
            End ~dulla^@204~    If (Original_PartNo Is Nothing) Th~dulla^@204~        Throw New System.ArgumentNullE~dulla^@204~ ginal_PartNo")
            Else
   ~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(1~dulla^@204~ pe(Original_PartNo,String)
         ~dulla^@204~           If (Original_Description Is~dulla^@204~ n
                Throw New System.A~dulla^@204~ ception("Original_Description")
    ~dulla^@204~ 
                Me.Adapter.DeleteCom~dulla^@204~ rs(2).Value = CType(Original_Descript~dulla^@204~             End If
            Me.Ad~dulla^@204~ ommand.Parameters(3).Value = CType(Or~dulla^@204~ ice,Decimal)
            Me.Adapter.~dulla^@204~ .Parameters(4).Value = CType(Original~dulla^@204~ ,Decimal)
            Dim previousCo~dulla^@204~  As System.Data.ConnectionState = Me.~dulla^@204~ eCommand.Connection.State
          ~dulla^@204~ pter.DeleteCommand.Connection.State A~dulla^@204~ a.ConnectionState.Open)  _
         ~dulla^@204~   <> System.Data.ConnectionState.Open~dulla^@204~            Me.Adapter.DeleteCommand.C~dulla^@204~ n
            End If
            Tr~dulla^@204~        Dim returnValue As Integer = M~dulla^@204~ eteCommand.ExecuteNonQuery
         ~dulla^@204~  returnValue
            Finally
  ~dulla^@204~  If (previousConnectionState = System~dulla^@204~ ionState.Closed) Then
              ~dulla^@204~ ter.DeleteCommand.Connection.Close
 ~dulla^@204~   End If
            End Try
      ~dulla^@204~ n
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute(),  _
         S~dulla^@204~ ntModel.Design.HelpKeywordAttribute("~dulla^@204~ Adapter"),  _
         System.Compon~dulla^@204~ ObjectMethodAttribute(System.Componen~dulla^@204~ jectMethodType.Insert, true)>  _
   ~dulla^@204~ verloads Overridable Function Insert(~dulla^@204~ rdNo As String, ByVal PartNo As Strin~dulla^@204~ ription As String, ByVal CostPrice As~dulla^@204~ al SellingPrice As Decimal) As Intege~dulla^@204~   If (StockCardNo Is Nothing) Then
 ~dulla^@204~   Throw New System.ArgumentNullExcept~dulla^@204~ dNo")
            Else
            ~dulla^@204~ r.InsertCommand.Parameters(0).Value =~dulla^@204~ ardNo,String)
            End If
  ~dulla^@204~ (PartNo Is Nothing) Then
           ~dulla^@204~ w System.ArgumentNullException("PartN~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(1).Value = CType(PartNo,S~dulla^@204~        End If
            If (Descri~dulla^@204~ ing) Then
                Throw New ~dulla^@204~ ntNullException("Description")
     ~dulla^@204~                 Me.Adapter.InsertComm~dulla^@204~ s(2).Value = CType(Description,String~dulla^@204~   End If
            Me.Adapter.Inse~dulla^@204~ ameters(3).Value = CType(CostPrice,De~dulla^@204~        Me.Adapter.InsertCommand.Param~dulla^@204~ e = CType(SellingPrice,Decimal)
    ~dulla^@204~ reviousConnectionState As System.Data~dulla^@204~ ate = Me.Adapter.InsertCommand.Connec~dulla^@204~            If ((Me.Adapter.InsertComm~dulla^@204~ n.State And System.Data.ConnectionSta~dulla^@204~                         <> System.Dat~dulla^@204~ tate.Open) Then
                Me.A~dulla^@204~ Command.Connection.Open
            ~dulla^@204~        Try 
                Dim retu~dulla^@204~ teger = Me.Adapter.InsertCommand.Exec~dulla^@204~                 Return returnValue
 ~dulla^@204~ nally
                If (previousCo~dulla^@204~  = System.Data.ConnectionState.Closed~dulla^@204~                Me.Adapter.InsertComma~dulla^@204~ .Close
                End If
     ~dulla^@204~ y
        End Function
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~         System.ComponentModel.Design.~dulla^@204~ tribute("vs.data.TableAdapter"),  _
~dulla^@204~ em.ComponentModel.DataObjectMethodAtt~dulla^@204~ .ComponentModel.DataObjectMethodType.~dulla^@204~ >  _
        Public Overloads Overri~dulla^@204~ n Update(ByVal StockCardNo As String,~dulla^@204~  As String, ByVal Description As Stri~dulla^@204~ tPrice As Decimal, ByVal SellingPrice~dulla^@204~ ByVal Original_StockCardNo As String,~dulla^@204~ al_PartNo As String, ByVal Original_D~dulla^@204~  String, ByVal Original_CostPrice As ~dulla^@204~ l Original_SellingPrice As Decimal) A~dulla^@204~           If (StockCardNo Is Nothing)~dulla^@204~           Throw New System.ArgumentNu~dulla^@204~ StockCardNo")
            Else
    ~dulla^@204~ e.Adapter.UpdateCommand.Parameters(0)~dulla^@204~ e(StockCardNo,String)
            En~dulla^@204~      If (PartNo Is Nothing) Then
   ~dulla^@204~ Throw New System.ArgumentNullExceptio~dulla^@204~             Else
                Me.~dulla^@204~ eCommand.Parameters(1).Value = CType(~dulla^@204~ )
            End If
            If~dulla^@204~  Is Nothing) Then
                Th~dulla^@204~ m.ArgumentNullException("Description"~dulla^@204~   Else
                Me.Adapter.Up~dulla^@204~ arameters(2).Value = CType(Descriptio~dulla^@204~           End If
            Me.Adap~dulla^@204~ mand.Parameters(3).Value = CType(Cost~dulla^@204~ )
            Me.Adapter.UpdateComma~dulla^@204~ (4).Value = CType(SellingPrice,Decima~dulla^@204~    If (Original_StockCardNo Is Nothin~dulla^@204~             Throw New System.Argument~dulla^@204~ ("Original_StockCardNo")
           ~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ alue = CType(Original_StockCardNo,Str~dulla^@204~      End If
            If (Original~dulla^@204~ thing) Then
                Throw Ne~dulla^@204~ mentNullException("Original_PartNo")~dulla^@204~ Else
                Me.Adapter.Upda~dulla^@204~ ameters(6).Value = CType(Original_Par~dulla^@204~             End If
            If (O~dulla^@204~ iption Is Nothing) Then
            ~dulla^@204~  System.ArgumentNullException("Origin~dulla^@204~ n")
            Else
              ~dulla^@204~ UpdateCommand.Parameters(7).Value = C~dulla^@204~ _Description,String)
            End~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~  CType(Original_CostPrice,Decimal)
 ~dulla^@204~ .Adapter.UpdateCommand.Parameters(9).~dulla^@204~ (Original_SellingPrice,Decimal)
    ~dulla^@204~ reviousConnectionState As System.Data~dulla^@204~ ate = Me.Adapter.UpdateCommand.Connec~dulla^@204~            If ((Me.Adapter.UpdateComm~dulla^@204~ n.State And System.Data.ConnectionSta~dulla^@204~                         <> System.Dat~dulla^@204~ tate.Open) Then
                Me.A~dulla^@204~ Command.Connection.Open
            ~dulla^@204~        Try 
                Dim retu~dulla^@204~ teger = Me.Adapter.UpdateCommand.Exec~dulla^@204~                 Return returnValue
 ~dulla^@204~ nally
                If (previousCo~dulla^@204~  = System.Data.ConnectionState.Closed~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ .Close
                End If
     ~dulla^@204~ y
        End Function
    End Clas~dulla^@204~ <System.CodeDom.Compiler.GeneratedCod~dulla^@204~ ystem.Data.Design.TypedDataSetGenerat~dulla^@204~ "),  _
     System.ComponentModel.De~dulla^@204~ yAttribute("code"),  _
     System.C~dulla^@204~ .ToolboxItem(true),  _
     System.C~dulla^@204~ .DataObjectAttribute(true),  _
     ~dulla^@204~ entModel.DesignerAttribute("Microsoft~dulla^@204~ ataSource.Design.TableAdapterDesigner~dulla^@204~ SDesigner"& _ 
        ", Version=8.~dulla^@204~ e=neutral, PublicKeyToken=b03f5f7f11d~dulla^@204~      System.ComponentModel.Design.Hel~dulla^@204~ bute("vs.data.TableAdapter")>  _
    Partial Public Class StockCardDetailTable~dulla^@204~     Inherits System.ComponentModel.Co~dulla^@204~     
        Private WithEvents _ada~dulla^@204~ m.Data.SqlClient.SqlDataAdapter
    ~dulla^@204~  Private _connection As System.Data.S~dulla^@204~ onnection
        
        Private ~dulla^@204~ ction() As System.Data.SqlClient.SqlC~dulla^@204~    
        Private _clearBeforeFill~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~             MyBase.New
            M~dulla^@204~ Fill = true
        End Sub
       ~dulla^@204~ ystem.Diagnostics.DebuggerNonUserCode~dulla^@204~  _
        Private ReadOnly Property~dulla^@204~  System.Data.SqlClient.SqlDataAdapter~dulla^@204~  Get
                If (Me._adapter~dulla^@204~ Then
                    Me.InitAdap~dulla^@204~         End If
                Retur~dulla^@204~ 
            End Get
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Friend Pro~dulla^@204~ ion() As System.Data.SqlClient.SqlCon~dulla^@204~         Get
                If (Me._~dulla^@204~  Nothing) Then
                    M~dulla^@204~ ion
                End If
        ~dulla^@204~ n Me._connection
            End Get~dulla^@204~  Set
                Me._connection ~dulla^@204~             If (Not (Me.Adapter.Inser~dulla^@204~ Nothing) Then
                    Me~dulla^@204~ rtCommand.Connection = value
       ~dulla^@204~ If
                If (Not (Me.Adapt~dulla^@204~ and) Is Nothing) Then
              ~dulla^@204~ ter.DeleteCommand.Connection = value~dulla^@204~     End If
                If (Not (~dulla^@204~ dateCommand) Is Nothing) Then
      ~dulla^@204~  Me.Adapter.UpdateCommand.Connection ~dulla^@204~             End If
                D~dulla^@204~ er = 0
                Do While (i <~dulla^@204~ llection.Length)
                   ~dulla^@204~ CommandCollection(i)) Is Nothing) The~dulla^@204~               CType(Me.CommandCollect~dulla^@204~ .Data.SqlClient.SqlCommand).Connectio~dulla^@204~                   End If
           ~dulla^@204~ (i + 1)
                Loop
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Protected ReadOnly Property Com~dulla^@204~ n() As System.Data.SqlClient.SqlComma~dulla^@204~      Get
                If (Me._com~dulla^@204~ n Is Nothing) Then
                 ~dulla^@204~ mandCollection
                End I~dulla^@204~       Return Me._commandCollection
 ~dulla^@204~ d Get
        End Property
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Property ClearBefor~dulla^@204~ olean
            Get
             ~dulla^@204~ _clearBeforeFill
            End Get~dulla^@204~  Set
                Me._clearBefore~dulla^@204~ 
            End Set
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Private Sub~dulla^@204~ )
            Me._adapter = New Syst~dulla^@204~ ient.SqlDataAdapter
            Dim ~dulla^@204~ As System.Data.Common.DataTableMappin~dulla^@204~ m.Data.Common.DataTableMapping
     ~dulla^@204~ apping.SourceTable = "Table"
       ~dulla^@204~ ping.DataSetTable = "StockCardDetail"~dulla^@204~  tableMapping.ColumnMappings.Add("Sal~dulla^@204~  "SalesInvoiceNo")
            table~dulla^@204~ nMappings.Add("DateOfSale", "DateOfSa~dulla^@204~      tableMapping.ColumnMappings.Add(~dulla^@204~ ", "DateRecieved")
            table~dulla^@204~ nMappings.Add("QtyRecieved", "QtyReci~dulla^@204~        tableMapping.ColumnMappings.Ad~dulla^@204~ , "QtyIssued")
            tableMapp~dulla^@204~ pings.Add("QtyBalance", "QtyBalance")~dulla^@204~  tableMapping.ColumnMappings.Add("Sto~dulla^@204~ tockCardNo")
            Me._adapter~dulla^@204~ s.Add(tableMapping)
            Me._~dulla^@204~ eCommand = New System.Data.SqlClient.~dulla^@204~            Me._adapter.DeleteCommand.~dulla^@204~ Me.Connection
            Me._adapte~dulla^@204~ nd.CommandText = "DELETE FROM [dbo].[~dulla^@204~ il] WHERE (([SalesInvoiceNo] = @Origi~dulla^@204~ & _ 
                "oiceNo) AND ([~dulla^@204~  @Original_DateOfSale) AND ((@IsNull_~dulla^@204~ = 1"& _ 
                " AND [Date~dulla^@204~ NULL) OR ([DateRecieved] = @Original_~dulla^@204~ ) AND ("& _ 
                "(@IsNu~dulla^@204~ d = 1 AND [QtyRecieved] IS NULL) OR (~dulla^@204~  = @Origina"& _ 
                "l_~dulla^@204~  AND ((@IsNull_QtyIssued = 1 AND [Qty~dulla^@204~ LL) OR ([QtyIss"& _ 
               ~dulla^@204~ ginal_QtyIssued)) AND ((@IsNull_QtyBa~dulla^@204~  [QtyBalance] IS NU"& _ 
           ~dulla^@204~ ([QtyBalance] = @Original_QtyBalance)~dulla^@204~ CardNo] = @Original_Sto"& _ 
       ~dulla^@204~ ardNo))"
            Me._adapter.Del~dulla^@204~ mmandType = System.Data.CommandType.T~dulla^@204~     Me._adapter.DeleteCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@O~dulla^@204~ InvoiceNo", System.Data.SqlDbType.NVa~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ oiceNo", System.Data.DataRowVersion.O~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ DeleteCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@Original_DateOfSa~dulla^@204~ ata.SqlDbType.DateTime, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "DateOfSale", Sy~dulla^@204~ aRowVersion.Original, false, Nothing,~dulla^@204~ 
            Me._adapter.DeleteComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ ll_DateRecieved", System.Data.SqlDbTy~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ ieved", System.Data.DataRowVersion.Or~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ leteCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@Original_DateReciev~dulla^@204~ ata.SqlDbType.DateTime, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "DateRecieved", ~dulla^@204~ ataRowVersion.Original, false, Nothin~dulla^@204~ ))
            Me._adapter.DeleteCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ Null_QtyRecieved", System.Data.SqlDbT~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ ieved", System.Data.DataRowVersion.Or~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ leteCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@Original_QtyRecieve~dulla^@204~ ta.SqlDbType.Int, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "QtyRecieved", System.~dulla^@204~ ersion.Original, false, Nothing, "", ~dulla^@204~          Me._adapter.DeleteCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ yIssued", System.Data.SqlDbType.Int, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "Qt~dulla^@204~ tem.Data.DataRowVersion.Original, tru~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Original_QtyIssued", System.Da~dulla^@204~ Int, 0, System.Data.ParameterDirectio~dulla^@204~ , "QtyIssued", System.Data.DataRowVer~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.DeleteCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@IsNull_QtyB~dulla^@204~ em.Data.SqlDbType.Int, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "QtyBalance", Sys~dulla^@204~ RowVersion.Original, true, Nothing, "~dulla^@204~             Me._adapter.DeleteCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ al_QtyBalance", System.Data.SqlDbType~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ e", System.Data.DataRowVersion.Origin~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@Original_StockCardNo",~dulla^@204~ SqlDbType.NVarChar, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "StockCardNo", Syste~dulla^@204~ wVersion.Original, false, Nothing, ""~dulla^@204~            Me._adapter.InsertCommand ~dulla^@204~ Data.SqlClient.SqlCommand
          ~dulla^@204~ .InsertCommand.Connection = Me.Connec~dulla^@204~      Me._adapter.InsertCommand.Comman~dulla^@204~ RT INTO [dbo].[StockCardDetail] ([SalesInvoiceNo], [DateOfSale], [DateRecieve"&~dulla^@204~         "d], [QtyRecieved], [QtyIssue~dulla^@204~ ce], [StockCardNo]) VALUES (@SalesInv~dulla^@204~             "ceNo, @DateOfSale, @Date~dulla^@204~ yRecieved, @QtyIssued, @QtyBalance, @~dulla^@204~                 "ardNo);"&Global.Micr~dulla^@204~ asic.ChrW(13)&Global.Microsoft.Visual~dulla^@204~ )&"SELECT SalesInvoiceNo, DateOfSale,~dulla^@204~ , QtyRecieved, QtyIssued"& _ 
      ~dulla^@204~ QtyBalance, StockCardNo FROM StockCar~dulla^@204~  (DateOfSale = @DateOfSale) "& _ 
  ~dulla^@204~  "AND (SalesInvoiceNo = @SalesInvoice~dulla^@204~      Me._adapter.InsertCommand.Comman~dulla^@204~ m.Data.CommandType.Text
            ~dulla^@204~ nsertCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@SalesInvoiceNo", S~dulla^@204~ lDbType.NVarChar, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "SalesInvoiceNo", Syst~dulla^@204~ owVersion.Current, false, Nothing, ""~dulla^@204~            Me._adapter.InsertCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ ale", System.Data.SqlDbType.DateTime,~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "D~dulla^@204~ ystem.Data.DataRowVersion.Current, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@DateRecieved", System.Data.S~dulla^@204~ Time, 0, System.Data.ParameterDirecti~dulla^@204~ 0, "DateRecieved", System.Data.DataRo~dulla^@204~ ent, false, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.InsertCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@QtyRecie~dulla^@204~ Data.SqlDbType.Int, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "QtyRecieved", Syste~dulla^@204~ wVersion.Current, false, Nothing, "",~dulla^@204~           Me._adapter.InsertCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~ d", System.Data.SqlDbType.Int, 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "QtyIssue~dulla^@204~ ta.DataRowVersion.Current, false, Not~dulla^@204~  ""))
            Me._adapter.Insert~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @QtyBalance", System.Data.SqlDbType.I~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ , System.Data.DataRowVersion.Current,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@StockCardNo", System.Data~dulla^@204~ arChar, 0, System.Data.ParameterDirec~dulla^@204~ , 0, "StockCardNo", System.Data.DataR~dulla^@204~ rent, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.UpdateCommand = New System.~dulla^@204~ t.SqlCommand
            Me._adapter~dulla^@204~ d.Connection = Me.Connection
       ~dulla^@204~ ter.UpdateCommand.CommandText = "UPDA~dulla^@204~ ckCardDetail] SET [SalesInvoiceNo] = ~dulla^@204~ No, [DateOfSal"& _ 
                ~dulla^@204~ Sale, [DateRecieved] = @DateRecieved,~dulla^@204~ ] = @QtyRecieved, "& _ 
            ~dulla^@204~ ed] = @QtyIssued, [QtyBalance] = @Qty~dulla^@204~ ckCardNo] = @StockCard"& _ 
        ~dulla^@204~ HERE (([SalesInvoiceNo] = @Original_S~dulla^@204~ ) AND ([DateOfSale] = @Ori"& _ 
    ~dulla^@204~ ginal_DateOfSale) AND ((@IsNull_DateR~dulla^@204~ ND [DateRecieved] IS NULL) OR "& _ 
~dulla^@204~    "([DateRecieved] = @Original_DateR~dulla^@204~  ((@IsNull_QtyRecieved = 1 AND [Qt"& ~dulla^@204~        "yRecieved] IS NULL) OR ([QtyR~dulla^@204~ riginal_QtyRecieved)) AND ((@IsNull_Q~dulla^@204~            "yIssued = 1 AND [QtyIssue~dulla^@204~ R ([QtyIssued] = @Original_QtyIssued)~dulla^@204~                " ((@IsNull_QtyBalance~dulla^@204~ Balance] IS NULL) OR ([QtyBalance] = ~dulla^@204~  
                "_QtyBalance)) AND~dulla^@204~ o] = @Original_StockCardNo));"&Global~dulla^@204~ sualBasic.ChrW(13)&Global.Microsoft.V~dulla^@204~ rW(10)&"SELECT SalesInvoice"& _ 
   ~dulla^@204~ "No, DateOfSale, DateRecieved, QtyRec~dulla^@204~ ued, QtyBalance, StockCardNo FR"& _ ~dulla^@204~     "OM StockCardDetail WHERE (DateOf~dulla^@204~ fSale) AND (SalesInvoiceNo = @Sales"&~dulla^@204~         "InvoiceNo)"
            Me.~dulla^@204~ teCommand.CommandType = System.Data.C~dulla^@204~ xt
            Me._adapter.UpdateCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ lesInvoiceNo", System.Data.SqlDbType.~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ InvoiceNo", System.Data.DataRowVersio~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.UpdateCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@DateOfSale", Sy~dulla^@204~ DbType.DateTime, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "DateOfSale", System.Da~dulla^@204~ sion.Current, false, Nothing, "", "",~dulla^@204~       Me._adapter.UpdateCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ ", System.Data.SqlDbType.DateTime, 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Date~dulla^@204~ stem.Data.DataRowVersion.Current, fal~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@QtyRecieved", System.Data.Sql~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ Recieved", System.Data.DataRowVersion~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@QtyIssued", Syst~dulla^@204~ Type.Int, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "QtyIssued", System.Data.DataR~dulla^@204~ rent, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.UpdateCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@QtyBala~dulla^@204~ Data.SqlDbType.Int, 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "QtyBalance", System~dulla^@204~ Version.Current, false, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ No", System.Data.SqlDbType.NVarChar, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "St~dulla^@204~ ystem.Data.DataRowVersion.Current, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@Original_SalesInvoiceNo", Sy~dulla^@204~ DbType.NVarChar, 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "SalesInvoiceNo", Syste~dulla^@204~ wVersion.Original, false, Nothing, ""~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ l_DateOfSale", System.Data.SqlDbType.~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ fSale", System.Data.DataRowVersion.Or~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ pdateCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@IsNull_DateRecieve~dulla^@204~ ta.SqlDbType.Int, 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "DateRecieved", System~dulla^@204~ Version.Original, true, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ DateRecieved", System.Data.SqlDbType.~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ ecieved", System.Data.DataRowVersion.~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@IsNull_QtyReciev~dulla^@204~ ata.SqlDbType.Int, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "QtyRecieved", System~dulla^@204~ Version.Original, true, Nothing, "", ~dulla^@204~          Me._adapter.UpdateCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ QtyRecieved", System.Data.SqlDbType.I~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@IsNull_QtyIssued", Syst~dulla^@204~ Type.Int, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "QtyIssued", System.Data.DataR~dulla^@204~ ginal, true, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.UpdateCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Origina~dulla^@204~  System.Data.SqlDbType.Int, 0, System~dulla^@204~ erDirection.Input, 0, 0, "QtyIssued",~dulla^@204~ DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@IsNull_QtyBalance", System.Dat~dulla^@204~ nt, 0, System.Data.ParameterDirection~dulla^@204~  "QtyBalance", System.Data.DataRowVer~dulla^@204~ , true, Nothing, "", "", ""))
      ~dulla^@204~ pter.UpdateCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@Original_Qty~dulla^@204~ tem.Data.SqlDbType.Int, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "QtyBalance", Sy~dulla^@204~ aRowVersion.Original, false, Nothing,~dulla^@204~ 
            Me._adapter.UpdateComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ inal_StockCardNo", System.Data.SqlDbT~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ tockCardNo", System.Data.DataRowVersi~dulla^@204~ false, Nothing, "", "", ""))
       ~dulla^@204~      
        <System.Diagnostics.De~dulla^@204~ CodeAttribute()>  _
        Private ~dulla^@204~ ction()
            Me._connection =~dulla^@204~ ata.SqlClient.SqlConnection
        ~dulla^@204~ ction.ConnectionString = Global.Inven~dulla^@204~ stem.My.MySettings.Default.PurchaseIn~dulla^@204~ 
        End Sub
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Private Sub InitCommandCollection()
~dulla^@204~ e._commandCollection = New System.Dat~dulla^@204~ qlCommand(0) {}
            Me._comm~dulla^@204~ (0) = New System.Data.SqlClient.SqlCo~dulla^@204~       Me._commandCollection(0).Connec~dulla^@204~ nection
            Me._commandColle~dulla^@204~ andText = "SELECT SalesInvoiceNo, Dat~dulla^@204~ Recieved, QtyRecieved, QtyIssued, Qty~dulla^@204~                "ce, StockCardNo FROM ~dulla^@204~ Detail"
            Me._commandColle~dulla^@204~ andType = System.Data.CommandType.Tex~dulla^@204~ d Sub
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute(),  _
      ~dulla^@204~ ponentModel.Design.HelpKeywordAttribu~dulla^@204~ ableAdapter"),  _
         System.Co~dulla^@204~ DataObjectMethodAttribute(System.Comp~dulla^@204~ taObjectMethodType.Fill, true)>  _
 ~dulla^@204~  Overloads Overridable Function Fill(~dulla^@204~ le As PurchaseInfoDataSet2.StockCardD~dulla^@204~ e) As Integer
            Me.Adapter~dulla^@204~ d = Me.CommandCollection(0)
        ~dulla^@204~ earBeforeFill = true) Then
         ~dulla^@204~ ble.Clear
            End If
      ~dulla^@204~ urnValue As Integer = Me.Adapter.Fill~dulla^@204~             Return returnValue
     ~dulla^@204~ on
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute(),  _
         ~dulla^@204~ entModel.Design.HelpKeywordAttribute(~dulla^@204~ eAdapter"),  _
         System.Compo~dulla^@204~ aObjectMethodAttribute(System.Compone~dulla^@204~ bjectMethodType.[Select], true)>  _
~dulla^@204~ c Overloads Overridable Function GetD~dulla^@204~ haseInfoDataSet2.StockCardDetailDataT~dulla^@204~      Me.Adapter.SelectCommand = Me.Co~dulla^@204~ on(0)
            Dim dataTable As P~dulla^@204~ taSet2.StockCardDetailDataTable = New~dulla^@204~ DataSet2.StockCardDetailDataTable
  ~dulla^@204~ Adapter.Fill(dataTable)
            ~dulla^@204~ ble
        End Function
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
         System.ComponentModel.Desig~dulla^@204~ Attribute("vs.data.TableAdapter")>  _~dulla^@204~ lic Overloads Overridable Function Up~dulla^@204~ taTable As PurchaseInfoDataSet2.Stock~dulla^@204~ aTable) As Integer
            Retur~dulla^@204~ Update(dataTable)
        End Functi~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute(),  _
         System.Compon~dulla^@204~ gn.HelpKeywordAttribute("vs.data.Tabl~dulla^@204~ _
        Public Overloads Overridab~dulla^@204~ pdate(ByVal dataSet As PurchaseInfoDa~dulla^@204~ teger
            Return Me.Adapter.~dulla^@204~ t, "StockCardDetail")
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute(),  _
         System.Co~dulla^@204~ Design.HelpKeywordAttribute("vs.data.~dulla^@204~ )>  _
        Public Overloads Overr~dulla^@204~ on Update(ByVal dataRow As System.Dat~dulla^@204~  Integer
            Return Me.Adapt~dulla^@204~  System.Data.DataRow() {dataRow})
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute(),  _
      ~dulla^@204~ ponentModel.Design.HelpKeywordAttribu~dulla^@204~ ableAdapter")>  _
        Public Ove~dulla^@204~ dable Function Update(ByVal dataRows(~dulla^@204~ ata.DataRow) As Integer
            ~dulla^@204~ pter.Update(dataRows)
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute(),  _
         System.Co~dulla^@204~ Design.HelpKeywordAttribute("vs.data.~dulla^@204~ ),  _
         System.ComponentModel~dulla^@204~ thodAttribute(System.ComponentModel.D~dulla^@204~ odType.Delete, true)>  _
        Pub~dulla^@204~  Overridable Function Delete(ByVal Or~dulla^@204~ nvoiceNo As String, ByVal Original_Da~dulla^@204~ ate, ByVal Original_DateRecieved As S~dulla^@204~ e(Of Date), ByVal Original_QtyRecieve~dulla^@204~ ullable(Of Integer), ByVal Original_Q~dulla^@204~ ystem.Nullable(Of Integer), ByVal Ori~dulla^@204~ nce As System.Nullable(Of Integer), B~dulla^@204~ _StockCardNo As String) As Integer
 ~dulla^@204~  (Original_SalesInvoiceNo Is Nothing)~dulla^@204~           Throw New System.ArgumentNu~dulla^@204~ Original_SalesInvoiceNo")
          ~dulla^@204~            Me.Adapter.DeleteCommand.P~dulla^@204~ Value = CType(Original_SalesInvoiceNo~dulla^@204~          End If
            Me.Adapt~dulla^@204~ and.Parameters(1).Value = CType(Origi~dulla^@204~ e,Date)
            If (Original_Dat~dulla^@204~ Value = true) Then
                M~dulla^@204~ eteCommand.Parameters(2).Value = CTyp~dulla^@204~                 Me.Adapter.DeleteComm~dulla^@204~ s(3).Value = CType(Original_DateRecie~dulla^@204~ e)
            Else
               ~dulla^@204~ eleteCommand.Parameters(2).Value = CT~dulla^@204~ 
                Me.Adapter.DeleteCo~dulla^@204~ ers(3).Value = System.DBNull.Value
 ~dulla^@204~ d If
            If (Original_QtyRec~dulla^@204~ e = true) Then
                Me.Ad~dulla^@204~ ommand.Parameters(4).Value = CType(0,~dulla^@204~             Me.Adapter.DeleteCommand.~dulla^@204~ .Value = CType(Original_QtyRecieved.V~dulla^@204~ 
            Else
                M~dulla^@204~ eteCommand.Parameters(4).Value = CTyp~dulla^@204~                 Me.Adapter.DeleteComm~dulla^@204~ s(5).Value = System.DBNull.Value
   ~dulla^@204~ If
            If (Original_QtyIssue~dulla^@204~ true) Then
                Me.Adapte~dulla^@204~ nd.Parameters(6).Value = CType(0,Obje~dulla^@204~         Me.Adapter.DeleteCommand.Para~dulla^@204~ ue = CType(Original_QtyIssued.Value,I~dulla^@204~         Else
                Me.Adap~dulla^@204~ mand.Parameters(6).Value = CType(1,Ob~dulla^@204~           Me.Adapter.DeleteCommand.Pa~dulla^@204~ alue = System.DBNull.Value
         ~dulla^@204~           If (Original_QtyBalance.Has~dulla^@204~  Then
                Me.Adapter.Del~dulla^@204~ rameters(8).Value = CType(0,Object)
~dulla^@204~    Me.Adapter.DeleteCommand.Parameter~dulla^@204~ CType(Original_QtyBalance.Value,Integ~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(8).Value = CType(1,Object~dulla^@204~       Me.Adapter.DeleteCommand.Parame~dulla^@204~  = System.DBNull.Value
            E~dulla^@204~       If (Original_StockCardNo Is Not~dulla^@204~                Throw New System.Argum~dulla^@204~ ion("Original_StockCardNo")
        ~dulla^@204~              Me.Adapter.DeleteCommand~dulla^@204~ 0).Value = CType(Original_StockCardNo~dulla^@204~          End If
            Dim prev~dulla^@204~ nState As System.Data.ConnectionState~dulla^@204~ .DeleteCommand.Connection.State
    ~dulla^@204~ Me.Adapter.DeleteCommand.Connection.S~dulla^@204~ em.Data.ConnectionState.Open)  _
   ~dulla^@204~         <> System.Data.ConnectionStat~dulla^@204~ 
                Me.Adapter.DeleteCom~dulla^@204~ on.Open
            End If
        ~dulla^@204~              Dim returnValue As Integ~dulla^@204~ er.DeleteCommand.ExecuteNonQuery
                Return returnValue
         ~dulla^@204~                If (previousConnection~dulla^@204~ m.Data.ConnectionState.Closed) Then
~dulla^@204~        Me.Adapter.DeleteCommand.Conne~dulla^@204~                 End If
            E~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute(), ~dulla^@204~ System.ComponentModel.Design.HelpKeyw~dulla^@204~ "vs.data.TableAdapter"),  _
        ~dulla^@204~ nentModel.DataObjectMethodAttribute(S~dulla^@204~ ntModel.DataObjectMethodType.Insert, ~dulla^@204~       Public Overloads Overridable Fu~dulla^@204~ (ByVal SalesInvoiceNo As String, ByVa~dulla^@204~ As Date, ByVal DateRecieved As System~dulla^@204~ Date), ByVal QtyRecieved As System.Nu~dulla^@204~ eger), ByVal QtyIssued As System.Null~dulla^@204~ er), ByVal QtyBalance As System.Nulla~dulla^@204~ r), ByVal StockCardNo As String) As I~dulla^@204~        If (SalesInvoiceNo Is Nothing)~dulla^@204~           Throw New System.ArgumentNu~dulla^@204~ SalesInvoiceNo")
            Else
 ~dulla^@204~   Me.Adapter.InsertCommand.Parameters~dulla^@204~ Type(SalesInvoiceNo,String)
        ~dulla^@204~            Me.Adapter.InsertCommand.P~dulla^@204~ Value = CType(DateOfSale,Date)
     ~dulla^@204~ teRecieved.HasValue = true) Then
   ~dulla^@204~ Me.Adapter.InsertCommand.Parameters(2~dulla^@204~ pe(DateRecieved.Value,Date)
        ~dulla^@204~              Me.Adapter.InsertCommand~dulla^@204~ ).Value = System.DBNull.Value
      ~dulla^@204~ 
            If (QtyRecieved.HasValue~dulla^@204~ 
                Me.Adapter.InsertCo~dulla^@204~ ers(3).Value = CType(QtyRecieved.Valu~dulla^@204~            Else
                Me.A~dulla^@204~ Command.Parameters(3).Value = System.~dulla^@204~ 
            End If
            If (~dulla^@204~ Value = true) Then
                M~dulla^@204~ ertCommand.Parameters(4).Value = CTyp~dulla^@204~ alue,Integer)
            Else
    ~dulla^@204~ e.Adapter.InsertCommand.Parameters(4)~dulla^@204~ em.DBNull.Value
            End If
~dulla^@204~ f (QtyBalance.HasValue = true) Then
~dulla^@204~    Me.Adapter.InsertCommand.Parameter~dulla^@204~ CType(QtyBalance.Value,Integer)
    ~dulla^@204~ 
                Me.Adapter.InsertCom~dulla^@204~ rs(5).Value = System.DBNull.Value
  ~dulla^@204~  If
            If (StockCardNo Is N~dulla^@204~ 
                Throw New System.Arg~dulla^@204~ ption("StockCardNo")
            Els~dulla^@204~       Me.Adapter.InsertCommand.Parame~dulla^@204~  = CType(StockCardNo,String)
       ~dulla^@204~             Dim previousConnectionSta~dulla^@204~ Data.ConnectionState = Me.Adapter.Ins~dulla^@204~ nnection.State
            If ((Me.A~dulla^@204~ Command.Connection.State And System.D~dulla^@204~ nState.Open)  _
                    ~dulla^@204~ .Data.ConnectionState.Open) Then
   ~dulla^@204~ Me.Adapter.InsertCommand.Connection.O~dulla^@204~     End If
            Try 
       ~dulla^@204~ returnValue As Integer = Me.Adapter.I~dulla^@204~ ExecuteNonQuery
                Retu~dulla^@204~ e
            Finally
             ~dulla^@204~ usConnectionState = System.Data.Conne~dulla^@204~ osed) Then
                    Me.Ad~dulla^@204~ ommand.Connection.Close
            ~dulla^@204~            End Try
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute(),  _
         System.Compo~dulla^@204~ ign.HelpKeywordAttribute("vs.data.Tab~dulla^@204~  _
         System.ComponentModel.Da~dulla^@204~ dAttribute(System.ComponentModel.Data~dulla^@204~ ype.Update, true)>  _
        Public~dulla^@204~ erridable Function Update(ByVal Sales~dulla^@204~ String, ByVal DateOfSale As Date, ByV~dulla^@204~ ed As System.Nullable(Of Date), ByVal~dulla^@204~ As System.Nullable(Of Integer), ByVal~dulla^@204~  System.Nullable(Of Integer), ByVal Q~dulla^@204~ System.Nullable(Of Integer), ByVal St~dulla^@204~ String, ByVal Original_SalesInvoiceNo~dulla^@204~ yVal Original_DateOfSale As Date, ByV~dulla^@204~ ateRecieved As System.Nullable(Of Dat~dulla^@204~ ginal_QtyRecieved As System.Nullable(~dulla^@204~ ByVal Original_QtyIssued As System.Nu~dulla^@204~ eger), ByVal Original_QtyBalance As S~dulla^@204~ e(Of Integer), ByVal Original_StockCa~dulla^@204~ g) As Integer
            If (SalesI~dulla^@204~ othing) Then
                Throw N~dulla^@204~ umentNullException("SalesInvoiceNo")~dulla^@204~ Else
                Me.Adapter.Upda~dulla^@204~ ameters(0).Value = CType(SalesInvoice~dulla^@204~            End If
            Me.Ada~dulla^@204~ mmand.Parameters(1).Value = CType(Dat~dulla^@204~ 
            If (DateRecieved.HasVal~dulla^@204~ en
                Me.Adapter.Update~dulla^@204~ eters(2).Value = CType(DateRecieved.V~dulla^@204~            Else
                Me.A~dulla^@204~ Command.Parameters(2).Value = System.~dulla^@204~ 
            End If
            If (~dulla^@204~ asValue = true) Then
               ~dulla^@204~ pdateCommand.Parameters(3).Value = CT~dulla^@204~ ed.Value,Integer)
            Else
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~ System.DBNull.Value
            End ~dulla^@204~    If (QtyIssued.HasValue = true) The~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~  = CType(QtyIssued.Value,Integer)
  ~dulla^@204~ e
                Me.Adapter.UpdateC~dulla^@204~ ters(4).Value = System.DBNull.Value
~dulla^@204~ nd If
            If (QtyBalance.Has~dulla^@204~  Then
                Me.Adapter.Upd~dulla^@204~ rameters(5).Value = CType(QtyBalance.~dulla^@204~ )
            Else
                ~dulla^@204~ dateCommand.Parameters(5).Value = Sys~dulla^@204~ lue
            End If
            ~dulla^@204~ No Is Nothing) Then
                ~dulla^@204~ tem.ArgumentNullException("StockCardN~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(6).Value = CType(StockCar~dulla^@204~             End If
            If (O~dulla^@204~ InvoiceNo Is Nothing) Then
         ~dulla^@204~ New System.ArgumentNullException("Ori~dulla^@204~ voiceNo")
            Else
        ~dulla^@204~ apter.UpdateCommand.Parameters(7).Val~dulla^@204~ iginal_SalesInvoiceNo,String)
      ~dulla^@204~ 
            Me.Adapter.UpdateCommand~dulla^@204~ ).Value = CType(Original_DateOfSale,D~dulla^@204~      If (Original_DateRecieved.HasVal~dulla^@204~ en
                Me.Adapter.Update~dulla^@204~ eters(9).Value = CType(0,Object)
   ~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(1~dulla^@204~ ype(Original_DateRecieved.Value,Date)~dulla^@204~  Else
                Me.Adapter.Upd~dulla^@204~ rameters(9).Value = CType(1,Object)
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~  System.DBNull.Value
            End~dulla^@204~     If (Original_QtyRecieved.HasValue~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(11).Value = CType(0,Object)
    ~dulla^@204~ e.Adapter.UpdateCommand.Parameters(12~dulla^@204~ pe(Original_QtyRecieved.Value,Integer~dulla^@204~   Else
                Me.Adapter.Up~dulla^@204~ arameters(11).Value = CType(1,Object)~dulla^@204~      Me.Adapter.UpdateCommand.Paramet~dulla^@204~  = System.DBNull.Value
            E~dulla^@204~       If (Original_QtyIssued.HasValue~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(13).Value = CType(0,Object)
    ~dulla^@204~ e.Adapter.UpdateCommand.Parameters(14~dulla^@204~ pe(Original_QtyIssued.Value,Integer)~dulla^@204~ Else
                Me.Adapter.Upda~dulla^@204~ ameters(13).Value = CType(1,Object)
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~  System.DBNull.Value
            End~dulla^@204~     If (Original_QtyBalance.HasValue ~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(15).Value = CType(0,Object)
     ~dulla^@204~ .Adapter.UpdateCommand.Parameters(16)~dulla^@204~ e(Original_QtyBalance.Value,Integer)~dulla^@204~ Else
                Me.Adapter.Upda~dulla^@204~ ameters(15).Value = CType(1,Object)
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~  System.DBNull.Value
            End~dulla^@204~     If (Original_StockCardNo Is Nothi~dulla^@204~              Throw New System.ArgumentNullException("Original_StockCardNo")
  ~dulla^@204~ e
                Me.Adapter.UpdateC~dulla^@204~ ters(17).Value = CType(Original_Stock~dulla^@204~ )
            End If
            Di~dulla^@204~ nectionState As System.Data.Connectio~dulla^@204~ dapter.UpdateCommand.Connection.State~dulla^@204~  If ((Me.Adapter.UpdateCommand.Connec~dulla^@204~ d System.Data.ConnectionState.Open)  ~dulla^@204~               <> System.Data.Connecti~dulla^@204~  Then
                Me.Adapter.Upd~dulla^@204~ nnection.Open
            End If
  ~dulla^@204~  
                Dim returnValue As~dulla^@204~ .Adapter.UpdateCommand.ExecuteNonQuer~dulla^@204~       Return returnValue
           ~dulla^@204~              If (previousConnectionSt~dulla^@204~ Data.ConnectionState.Closed) Then
  ~dulla^@204~      Me.Adapter.UpdateCommand.Connect~dulla^@204~               End If
            End~dulla^@204~  End Function
    End Class
    
 ~dulla^@204~ deDom.Compiler.GeneratedCodeAttribute~dulla^@204~ .Design.TypedDataSetGenerator", "2.0.~dulla^@204~    System.ComponentModel.DesignerCate~dulla^@204~ ("code"),  _
     System.ComponentMo~dulla^@204~ em(true),  _
     System.ComponentMo~dulla^@204~ tAttribute(true),  _
     System.Com~dulla^@204~ esignerAttribute("Microsoft.VSDesigne~dulla^@204~ Design.TableAdapterDesigner, Microsof~dulla^@204~ & _ 
        ", Version=8.0.0.0, Cul~dulla^@204~  PublicKeyToken=b03f5f7f11d50a3a"),  ~dulla^@204~ m.ComponentModel.Design.HelpKeywordAt~dulla^@204~ ata.TableAdapter")>  _
    Partial P~dulla^@204~ upplierTableAdapter
        Inherits~dulla^@204~ nentModel.Component
        
      ~dulla^@204~ hEvents _adapter As System.Data.SqlCl~dulla^@204~ dapter
        
        Private _co~dulla^@204~ ystem.Data.SqlClient.SqlConnection
 ~dulla^@204~     Private _commandCollection() As S~dulla^@204~ lClient.SqlCommand
        
       ~dulla^@204~ arBeforeFill As Boolean
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Sub New()
            ~dulla^@204~            Me.ClearBeforeFill = true~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ nly Property Adapter() As System.Data~dulla^@204~ lDataAdapter
            Get
      ~dulla^@204~ (Me._adapter Is Nothing) Then
      ~dulla^@204~  Me.InitAdapter
                End ~dulla^@204~        Return Me._adapter
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Friend Property Connection() As Sys~dulla^@204~ lient.SqlConnection
            Get~dulla^@204~     If (Me._connection Is Nothing) Th~dulla^@204~            Me.InitConnection
       ~dulla^@204~ If
                Return Me._connec~dulla^@204~      End Get
            Set
      ~dulla^@204~ _connection = value
                ~dulla^@204~ dapter.InsertCommand) Is Nothing) The~dulla^@204~           Me.Adapter.InsertCommand.Co~dulla^@204~ lue
                End If
        ~dulla^@204~ ot (Me.Adapter.DeleteCommand) Is Noth~dulla^@204~                   Me.Adapter.DeleteCo~dulla^@204~ ion = value
                End If
~dulla^@204~    If (Not (Me.Adapter.UpdateCommand)~dulla^@204~ Then
                    Me.Adapter.~dulla^@204~ .Connection = value
                ~dulla^@204~            Dim i As Integer = 0
    ~dulla^@204~ o While (i < Me.CommandCollection.Len~dulla^@204~              If (Not (Me.CommandColle~dulla^@204~ Nothing) Then
                      ~dulla^@204~ mmandCollection(i),System.Data.SqlCli~dulla^@204~ d).Connection = value
              ~dulla^@204~ 
                    i = (i + 1)
   ~dulla^@204~ Loop
            End Set
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Protec~dulla^@204~ Property CommandCollection() As Syste~dulla^@204~ ent.SqlCommand()
            Get
  ~dulla^@204~  If (Me._commandCollection Is Nothing~dulla^@204~                Me.InitCommandCollecti~dulla^@204~        End If
                Return~dulla^@204~ ollection
            End Get
     ~dulla^@204~ ty
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ y ClearBeforeFill() As Boolean
     ~dulla^@204~                Return Me._clearBefore~dulla^@204~      End Get
            Set
      ~dulla^@204~ _clearBeforeFill = value
           ~dulla^@204~      End Property
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Private Sub InitAdapter()
         ~dulla^@204~ r = New System.Data.SqlClient.SqlData~dulla^@204~         Dim tableMapping As System.Da~dulla^@204~ aTableMapping = New System.Data.Commo~dulla^@204~ pping
            tableMapping.Sourc~dulla^@204~ le"
            tableMapping.DataSet~dulla^@204~ lier"
            tableMapping.Colum~dulla^@204~ ("SupplierID", "SupplierID")
       ~dulla^@204~ ping.ColumnMappings.Add("SupplierName~dulla^@204~ ame")
            tableMapping.Colum~dulla^@204~ ("Address", "Address")
            t~dulla^@204~ olumnMappings.Add("City", "City")
  ~dulla^@204~ leMapping.ColumnMappings.Add("Country~dulla^@204~ 
            tableMapping.ColumnMapp~dulla^@204~ ne", "Phone")
            tableMappi~dulla^@204~ ings.Add("Fax", "Fax")
            t~dulla^@204~ olumnMappings.Add("PostalAddress", "P~dulla^@204~ )
            tableMapping.ColumnMap~dulla^@204~ bsite", "Website")
            table~dulla^@204~ nMappings.Add("Email", "Email")
    ~dulla^@204~ dapter.TableMappings.Add(tableMapping~dulla^@204~   Me._adapter.DeleteCommand = New Sys~dulla^@204~ lient.SqlCommand
            Me._ada~dulla^@204~ mmand.Connection = Me.Connection
   ~dulla^@204~ adapter.DeleteCommand.CommandText = "~dulla^@204~ dbo].[Supplier] WHERE (([SupplierID] ~dulla^@204~ upplierID) AND ([S"& _ 
            ~dulla^@204~ ame] = @Original_SupplierName) AND ((~dulla^@204~ ss = 1 AND [Address] I"& _ 
        ~dulla^@204~ LL) OR ([Address] = @Original_Address~dulla^@204~ ull_City = 1 AND [City] IS"& _ 
    ~dulla^@204~  NULL) OR ([City] = @Original_City)) ~dulla^@204~ _Country = 1 AND [Country] IS "& _ 
~dulla^@204~    "NULL) OR ([Country] = @Original_C~dulla^@204~ ((@IsNull_Phone = 1 AND [Phone] IS"& ~dulla^@204~        " NULL) OR ([Phone] = @Origina~dulla^@204~  ((@IsNull_Fax = 1 AND [Fax] IS NULL)~dulla^@204~            "OR ([Fax] = @Original_Fax~dulla^@204~ ull_PostalAddress = 1 AND [PostalAddr~dulla^@204~                "IS NULL) OR ([PostalA~dulla^@204~ iginal_PostalAddress)) AND ((@IsNull_~dulla^@204~  
                " 1 AND [Website] ~dulla^@204~ [Website] = @Original_Website)) AND (~dulla^@204~ "& _ 
                "l = 1 AND [Em~dulla^@204~  OR ([Email] = @Original_Email)))"
 ~dulla^@204~ ._adapter.DeleteCommand.CommandType =~dulla^@204~ CommandType.Text
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@Original_SupplierID", Sys~dulla^@204~ bType.NVarChar, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "SupplierID", System.Dat~dulla^@204~ ion.Original, false, Nothing, "", "",~dulla^@204~       Me._adapter.DeleteCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ plierName", System.Data.SqlDbType.[Ch~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ me", System.Data.DataRowVersion.Origi~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@IsNull_Address", Syst~dulla^@204~ Type.Int, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "Address", System.Data.DataRow~dulla^@204~ nal, true, Nothing, "", "", ""))
   ~dulla^@204~ adapter.DeleteCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Original_~dulla^@204~ tem.Data.SqlDbType.[Char], 0, System.~dulla^@204~ rDirection.Input, 0, 0, "Address", Sy~dulla^@204~ aRowVersion.Original, false, Nothing,~dulla^@204~ 
            Me._adapter.DeleteComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ ll_City", System.Data.SqlDbType.Int, ~dulla^@204~ a.ParameterDirection.Input, 0, 0, "Ci~dulla^@204~ ata.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@Original_City", System.Data~dulla^@204~ har], 0, System.Data.ParameterDirecti~dulla^@204~ 0, "City", System.Data.DataRowVersion~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.DeleteCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@IsNull_Country"~dulla^@204~ .SqlDbType.Int, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "Country", System.Data.D~dulla^@204~ .Original, true, Nothing, "", "", "")~dulla^@204~   Me._adapter.DeleteCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@Ori~dulla^@204~ ", System.Data.SqlDbType.[Char], 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "Countr~dulla^@204~ ta.DataRowVersion.Original, false, No~dulla^@204~ , ""))
            Me._adapter.Delet~dulla^@204~ meters.Add(New System.Data.SqlClient.~dulla^@204~ "@IsNull_Phone", System.Data.SqlDbTyp~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ System.Data.DataRowVersion.Original, ~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@Original_Phone", System.Dat~dulla^@204~ Char], 0, System.Data.ParameterDirect~dulla^@204~  0, "Phone", System.Data.DataRowVersi~dulla^@204~ false, Nothing, "", "", ""))
       ~dulla^@204~ ter.DeleteCommand.Parameters.Add(New ~dulla^@204~ qlClient.SqlParameter("@IsNull_Fax", ~dulla^@204~ qlDbType.Int, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "Fax", System.Data.DataRow~dulla^@204~ nal, true, Nothing, "", "", ""))
   ~dulla^@204~ adapter.DeleteCommand.Parameters.Add(~dulla^@204~ ta.SqlClient.SqlParameter("@Original_~dulla^@204~ Data.SqlDbType.[Char], 0, System.Data~dulla^@204~ ection.Input, 0, 0, "Fax", System.Dat~dulla^@204~ ion.Original, false, Nothing, "", "",~dulla^@204~       Me._adapter.DeleteCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ lAddress", System.Data.SqlDbType.Int,~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "P~dulla^@204~ , System.Data.DataRowVersion.Original~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@Original_PostalAddress", ~dulla^@204~ qlDbType.[Char], 0, System.Data.Param~dulla^@204~ .Input, 0, 0, "PostalAddress", System~dulla^@204~ Version.Original, false, Nothing, "",~dulla^@204~           Me._adapter.DeleteCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~ ebsite", System.Data.SqlDbType.Int, 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Web~dulla^@204~ .Data.DataRowVersion.Original, true, ~dulla^@204~ "", ""))
            Me._adapter.Del~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@Original_Website", System.Data.Sq~dulla^@204~ ], 0, System.Data.ParameterDirection.~dulla^@204~ "Website", System.Data.DataRowVersion~dulla^@204~ lse, Nothing, "", "", ""))
         ~dulla^@204~ r.DeleteCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@IsNull_Email", ~dulla^@204~ qlDbType.Int, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "Email", System.Data.DataR~dulla^@204~ ginal, true, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.DeleteCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Origina~dulla^@204~ tem.Data.SqlDbType.[Char], 0, System.~dulla^@204~ rDirection.Input, 0, 0, "Email", Syst~dulla^@204~ owVersion.Original, false, Nothing, "~dulla^@204~             Me._adapter.InsertCommand~dulla^@204~ .Data.SqlClient.SqlCommand
         ~dulla^@204~ r.InsertCommand.Connection = Me.Conne~dulla^@204~       Me._adapter.InsertCommand.Comma~dulla^@204~ ERT INTO [dbo].[Supplier] ([SupplierI~dulla^@204~ Name], [Address], [City], [C"& _ 
  ~dulla^@204~  "ountry], [Phone], [Fax], [PostalAdd~dulla^@204~ te], [Email]) VALUES (@SupplierI"& _ ~dulla^@204~      "D, @SupplierName, @Address, @Ci~dulla^@204~  @Phone, @Fax, @PostalAddress, @Webs"~dulla^@204~          "ite, @Email);"&Global.Micro~dulla^@204~ sic.ChrW(13)&Global.Microsoft.VisualB~dulla^@204~ &"SELECT SupplierID, SupplierName, Ad~dulla^@204~ Country, Phone, F"& _ 
             ~dulla^@204~ lAddress, Website, Email FROM Supplie~dulla^@204~ lierID = @SupplierID)"& _ 
         ~dulla^@204~           Me._adapter.InsertCommand.C~dulla^@204~ System.Data.CommandType.Text
       ~dulla^@204~ ter.InsertCommand.Parameters.Add(New ~dulla^@204~ qlClient.SqlParameter("@SupplierID", ~dulla^@204~ qlDbType.NVarChar, 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "SupplierID", System.~dulla^@204~ ersion.Current, false, Nothing, "", "~dulla^@204~         Me._adapter.InsertCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ me", System.Data.SqlDbType.[Char], 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Supp~dulla^@204~ stem.Data.DataRowVersion.Current, fal~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@Address", System.Data.SqlDbTy~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ ess", System.Data.DataRowVersion.Curr~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ rtCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@City", System.Data.Sq~dulla^@204~ ], 0, System.Data.ParameterDirection.~dulla^@204~ "City", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ sertCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@Country", System.Da~dulla^@204~ [Char], 0, System.Data.ParameterDirec~dulla^@204~ , 0, "Country", System.Data.DataRowVe~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.InsertCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@Phone", Sys~dulla^@204~ bType.[Char], 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "Phone", System.Data.DataR~dulla^@204~ rent, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.InsertCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Fax", S~dulla^@204~ lDbType.[Char], 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "Fax", System.Data.DataR~dulla^@204~ rent, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.InsertCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@PostalA~dulla^@204~ em.Data.SqlDbType.[Char], 0, System.D~dulla^@204~ Direction.Input, 0, 0, "PostalAddress~dulla^@204~ a.DataRowVersion.Current, false, Noth~dulla^@204~ ""))
            Me._adapter.InsertC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ Website", System.Data.SqlDbType.[Char~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ stem.Data.DataRowVersion.Current, fal~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@Email", System.Data.SqlDbType~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ , System.Data.DataRowVersion.Current,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand = New System.Data.SqlClient.Sql~dulla^@204~         Me._adapter.UpdateCommand.Con~dulla^@204~ Connection
            Me._adapter.U~dulla^@204~ CommandText = "UPDATE [dbo].[Supplier~dulla^@204~ erID] = @SupplierID, [SupplierName] =~dulla^@204~  
                "rName, [Address] ~dulla^@204~ City] = @City, [Country] = @Country, ~dulla^@204~ "& _ 
                "one, [Fax] = ~dulla^@204~ Address] = @PostalAddress, [Website] ~dulla^@204~ Emai"& _ 
                "l] = @Ema~dulla^@204~ upplierID] = @Original_SupplierID) AN~dulla^@204~ ame] = @"& _ 
                "Origi~dulla^@204~ ame) AND ((@IsNull_Address = 1 AND [A~dulla^@204~ LL) OR ([Add"& _ 
                "r~dulla^@204~ nal_Address)) AND ((@IsNull_City = 1 ~dulla^@204~  NULL) OR ([City"& _ 
              ~dulla^@204~ nal_City)) AND ((@IsNull_Country = 1 ~dulla^@204~  IS NULL) OR ([Count"& _ 
          ~dulla^@204~ @Original_Country)) AND ((@IsNull_Pho~dulla^@204~ hone] IS NULL) OR ([Phon"& _ 
      ~dulla^@204~  = @Original_Phone)) AND ((@IsNull_Fa~dulla^@204~ x] IS NULL) OR ([Fax] = @Ori"& _ 
  ~dulla^@204~  "ginal_Fax)) AND ((@IsNull_PostalAdd~dulla^@204~ [PostalAddress] IS NULL) OR ([Po"& _ ~dulla^@204~      "stalAddress] = @Original_PostalAddress)) AND ((@IsNull_Website = 1 AND [W~dulla^@204~ 
                " IS NULL) OR ([Webs~dulla^@204~ nal_Website)) AND ((@IsNull_Email = 1~dulla^@204~  _ 
                "] IS NULL) OR (~dulla^@204~ iginal_Email)));"&Global.Microsoft.Vi~dulla^@204~ W(13)&Global.Microsoft.VisualBasic.Ch~dulla^@204~ T SupplierID, SupplierName, A"& _ 
 ~dulla^@204~   "ddress, City, Country, Phone, Fax,~dulla^@204~ s, Website, Email FROM Supplier W"& _~dulla^@204~       "HERE (SupplierID = @SupplierID~dulla^@204~    Me._adapter.UpdateCommand.CommandT~dulla^@204~ Data.CommandType.Text
            Me~dulla^@204~ ateCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@SupplierID", System.~dulla^@204~ e.NVarChar, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "SupplierID", System.Data.Da~dulla^@204~ Current, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Supp~dulla^@204~ stem.Data.SqlDbType.[Char], 0, System~dulla^@204~ erDirection.Input, 0, 0, "SupplierNam~dulla^@204~ ta.DataRowVersion.Current, false, Not~dulla^@204~  ""))
            Me._adapter.Update~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @Address", System.Data.SqlDbType.[Cha~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ ystem.Data.DataRowVersion.Current, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@City", System.Data.SqlDbType~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~  System.Data.DataRowVersion.Current, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Country", System.Data.SqlD~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ ountry", System.Data.DataRowVersion.C~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ pdateCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@Phone", System.Dat~dulla^@204~ Char], 0, System.Data.ParameterDirect~dulla^@204~  0, "Phone", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@Fax", System.D~dulla^@204~ .[Char], 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "Fax", System.Data.DataRowVersi~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@PostalAddress"~dulla^@204~ .SqlDbType.[Char], 0, System.Data.Par~dulla^@204~ on.Input, 0, 0, "PostalAddress", Syst~dulla^@204~ owVersion.Current, false, Nothing, ""~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ ", System.Data.SqlDbType.[Char], 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "Websit~dulla^@204~ ta.DataRowVersion.Current, false, Not~dulla^@204~  ""))
            Me._adapter.Update~dulla^@204~ eters.Add(New System.Data.SqlClient.S~dulla^@204~ @Email", System.Data.SqlDbType.[Char]~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ m.Data.DataRowVersion.Current, false,~dulla^@204~  "", ""))
            Me._adapter.Up~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@Original_SupplierID", System.Dat~dulla^@204~ VarChar, 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "SupplierID", System.Data.DataR~dulla^@204~ ginal, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.UpdateCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@Origin~dulla^@204~ me", System.Data.SqlDbType.[Char], 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Supp~dulla^@204~ stem.Data.DataRowVersion.Original, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@IsNull_Address", System.Data~dulla^@204~ t, 0, System.Data.ParameterDirection.~dulla^@204~ "Address", System.Data.DataRowVersion~dulla^@204~ ue, Nothing, "", "", ""))
          ~dulla^@204~ .UpdateCommand.Parameters.Add(New Sys~dulla^@204~ lient.SqlParameter("@Original_Address~dulla^@204~ a.SqlDbType.[Char], 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "Address", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ ", System.Data.SqlDbType.Int, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "City", Sy~dulla^@204~ aRowVersion.Original, true, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ nal_City", System.Data.SqlDbType.[Cha~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ em.Data.DataRowVersion.Original, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@IsNull_Country", System.Data.S~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ ountry", System.Data.DataRowVersion.O~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ pdateCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@Original_Country",~dulla^@204~ SqlDbType.[Char], 0, System.Data.Para~dulla^@204~ n.Input, 0, 0, "Country", System.Data~dulla^@204~ on.Original, false, Nothing, "", "", ~dulla^@204~      Me._adapter.UpdateCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ , System.Data.SqlDbType.Int, 0, Syste~dulla^@204~ terDirection.Input, 0, 0, "Phone", Sy~dulla^@204~ aRowVersion.Original, true, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ nal_Phone", System.Data.SqlDbType.[Ch~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ stem.Data.DataRowVersion.Original, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@IsNull_Fax", System.Data.Sql~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@Original_Fax", System.Da~dulla^@204~ [Char], 0, System.Data.ParameterDirec~dulla^@204~ , 0, "Fax", System.Data.DataRowVersio~dulla^@204~ alse, Nothing, "", "", ""))
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@IsNull_PostalA~dulla^@204~ em.Data.SqlDbType.Int, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "PostalAddress", ~dulla^@204~ ataRowVersion.Original, true, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ginal_PostalAddress", System.Data.Sql~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ PostalAddress", System.Data.DataRowVe~dulla^@204~ l, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@IsNull_Web~dulla^@204~ .Data.SqlDbType.Int, 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "Website", System.D~dulla^@204~ rsion.Original, true, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ bsite", System.Data.SqlDbType.[Char],~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "W~dulla^@204~ em.Data.DataRowVersion.Original, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@IsNull_Email", System.Data.Sql~dulla^@204~ , System.Data.ParameterDirection.Inpu~dulla^@204~ il", System.Data.DataRowVersion.Origi~dulla^@204~ thing, "", "", ""))
            Me._~dulla^@204~ eCommand.Parameters.Add(New System.Da~dulla^@204~ SqlParameter("@Original_Email", Syste~dulla^@204~ ype.[Char], 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "Email", System.Data.DataRow~dulla^@204~ nal, false, Nothing, "", "", ""))
  ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pri~dulla^@204~ Connection()
            Me._connect~dulla^@204~ tem.Data.SqlClient.SqlConnection
   ~dulla^@204~ connection.ConnectionString = Global.InventoryControlSystem.My.MySettings.Defau~dulla^@204~ foConnection
        End Sub
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Private Sub InitCommandC~dulla^@204~             Me._commandCollection = N~dulla^@204~ a.SqlClient.SqlCommand(0) {}
       ~dulla^@204~ andCollection(0) = New System.Data.Sq~dulla^@204~ mmand
            Me._commandCollect~dulla^@204~ tion = Me.Connection
            Me.~dulla^@204~ ction(0).CommandText = "SELECT Suppli~dulla^@204~ rName, Address, City, Country, Phone,~dulla^@204~ ddres"& _ 
                "s, Websi~dulla^@204~ M dbo.Supplier"
            Me._comm~dulla^@204~ (0).CommandType = System.Data.Command~dulla^@204~       End Sub
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ stem.ComponentModel.Design.HelpKeywor~dulla^@204~ s.data.TableAdapter"),  _
         S~dulla^@204~ ntModel.DataObjectMethodAttribute(Sys~dulla^@204~ Model.DataObjectMethodType.Fill, true~dulla^@204~   Public Overloads Overridable Functi~dulla^@204~  dataTable As PurchaseInfoDataSet2.Su~dulla^@204~ le) As Integer
            Me.Adapte~dulla^@204~ nd = Me.CommandCollection(0)
       ~dulla^@204~ learBeforeFill = true) Then
        ~dulla^@204~ able.Clear
            End If
     ~dulla^@204~ turnValue As Integer = Me.Adapter.Fil~dulla^@204~ 
            Return returnValue
    ~dulla^@204~ ion
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute(),  _
        ~dulla^@204~ nentModel.Design.HelpKeywordAttribute~dulla^@204~ leAdapter"),  _
         System.Comp~dulla^@204~ taObjectMethodAttribute(System.Compon~dulla^@204~ ObjectMethodType.[Select], true)>  _~dulla^@204~ ic Overloads Overridable Function Get~dulla^@204~ chaseInfoDataSet2.SupplierDataTable
~dulla^@204~ e.Adapter.SelectCommand = Me.CommandC~dulla^@204~ 
            Dim dataTable As Purchas~dulla^@204~ .SupplierDataTable = New PurchaseInfo~dulla^@204~ lierDataTable
            Me.Adapter~dulla^@204~ le)
            Return dataTable
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute(),  _
      ~dulla^@204~ ponentModel.Design.HelpKeywordAttribu~dulla^@204~ ableAdapter")>  _
        Public Ove~dulla^@204~ dable Function Update(ByVal dataTable~dulla^@204~ nfoDataSet2.SupplierDataTable) As Int~dulla^@204~      Return Me.Adapter.Update(dataTab~dulla^@204~ End Function
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ tem.ComponentModel.Design.HelpKeyword~dulla^@204~ .data.TableAdapter")>  _
        Pub~dulla^@204~  Overridable Function Update(ByVal da~dulla^@204~ haseInfoDataSet2) As Integer
       ~dulla^@204~ e.Adapter.Update(dataSet, "Supplier")~dulla^@204~  Function
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute(),  _
  ~dulla^@204~ .ComponentModel.Design.HelpKeywordAtt~dulla^@204~ ta.TableAdapter")>  _
        Public~dulla^@204~ erridable Function Update(ByVal dataR~dulla^@204~ Data.DataRow) As Integer
           ~dulla^@204~ apter.Update(New System.Data.DataRow(~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~       System.ComponentModel.Design.He~dulla^@204~ ibute("vs.data.TableAdapter")>  _
  ~dulla^@204~ Overloads Overridable Function Update~dulla^@204~ ws() As System.Data.DataRow) As Integ~dulla^@204~    Return Me.Adapter.Update(dataRows)~dulla^@204~  Function
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute(),  _
  ~dulla^@204~ .ComponentModel.Design.HelpKeywordAtt~dulla^@204~ ta.TableAdapter"),  _
         Syste~dulla^@204~ del.DataObjectMethodAttribute(System.~dulla^@204~ l.DataObjectMethodType.Delete, true)>~dulla^@204~ Public Overloads Overridable Function~dulla^@204~  Original_SupplierID As String, ByVal~dulla^@204~ plierName As String, ByVal Original_A~dulla^@204~ ing, ByVal Original_City As String, B~dulla^@204~ _Country As String, ByVal Original_Ph~dulla^@204~ , ByVal Original_Fax As String, ByVal~dulla^@204~ talAddress As String, ByVal Original_~dulla^@204~ ring, ByVal Original_Email As String)~dulla^@204~             If (Original_SupplierID I~dulla^@204~ en
                Throw New System.~dulla^@204~ xception("Original_SupplierID")
    ~dulla^@204~ 
                Me.Adapter.DeleteCom~dulla^@204~ rs(0).Value = CType(Original_Supplier~dulla^@204~            End If
            If (Or~dulla^@204~ erName Is Nothing) Then
            ~dulla^@204~  System.ArgumentNullException("Origin~dulla^@204~ me")
            Else
             ~dulla^@204~ .DeleteCommand.Parameters(1).Value = ~dulla^@204~ l_SupplierName,String)
            E~dulla^@204~       If (Original_Address Is Nothing~dulla^@204~            Me.Adapter.DeleteCommand.P~dulla^@204~ Value = CType(1,Object)
            ~dulla^@204~ r.DeleteCommand.Parameters(3).Value =~dulla^@204~ l.Value
            Else
          ~dulla^@204~ ter.DeleteCommand.Parameters(2).Value~dulla^@204~ ject)
                Me.Adapter.Del~dulla^@204~ rameters(3).Value = CType(Original_Ad~dulla^@204~ 
            End If
            If ~dulla^@204~ y Is Nothing) Then
                M~dulla^@204~ eteCommand.Parameters(4).Value = CTyp~dulla^@204~                 Me.Adapter.DeleteComm~dulla^@204~ s(5).Value = System.DBNull.Value
   ~dulla^@204~ 
                Me.Adapter.DeleteCo~dulla^@204~ ers(4).Value = CType(0,Object)
     ~dulla^@204~ .Adapter.DeleteCommand.Parameters(5).~dulla^@204~ (Original_City,String)
            E~dulla^@204~       If (Original_Country Is Nothing~dulla^@204~            Me.Adapter.DeleteCommand.P~dulla^@204~ Value = CType(1,Object)
            ~dulla^@204~ r.DeleteCommand.Parameters(7).Value =~dulla^@204~ l.Value
            Else
          ~dulla^@204~ ter.DeleteCommand.Parameters(6).Value~dulla^@204~ ject)
                Me.Adapter.Del~dulla^@204~ rameters(7).Value = CType(Original_Co~dulla^@204~ 
            End If
            If ~dulla^@204~ ne Is Nothing) Then
                ~dulla^@204~ leteCommand.Parameters(8).Value = CTy~dulla^@204~ 
                Me.Adapter.DeleteCom~dulla^@204~ rs(9).Value = System.DBNull.Value
  ~dulla^@204~ e
                Me.Adapter.DeleteC~dulla^@204~ ters(8).Value = CType(0,Object)
    ~dulla^@204~ e.Adapter.DeleteCommand.Parameters(9)~dulla^@204~ e(Original_Phone,String)
           ~dulla^@204~         If (Original_Fax Is Nothing) ~dulla^@204~          Me.Adapter.DeleteCommand.Par~dulla^@204~ alue = CType(1,Object)
             ~dulla^@204~ .DeleteCommand.Parameters(11).Value =~dulla^@204~ l.Value
            Else
          ~dulla^@204~ ter.DeleteCommand.Parameters(10).Valu~dulla^@204~ bject)
                Me.Adapter.De~dulla^@204~ arameters(11).Value = CType(Original_~dulla^@204~             End If
            If (O~dulla^@204~ lAddress Is Nothing) Then
          ~dulla^@204~ ter.DeleteCommand.Parameters(12).Valu~dulla^@204~ bject)
                Me.Adapter.De~dulla^@204~ arameters(13).Value = System.DBNull.V~dulla^@204~      Else
                Me.Adapter~dulla^@204~ d.Parameters(12).Value = CType(0,Obje~dulla^@204~         Me.Adapter.DeleteCommand.Para~dulla^@204~ lue = CType(Original_PostalAddress,St~dulla^@204~       End If
            If (Origina~dulla^@204~ Nothing) Then
                Me.Ada~dulla^@204~ mmand.Parameters(14).Value = CType(1,~dulla^@204~             Me.Adapter.DeleteCommand.~dulla^@204~ ).Value = System.DBNull.Value
      ~dulla^@204~                Me.Adapter.DeleteComma~dulla^@204~ (14).Value = CType(0,Object)
       ~dulla^@204~ dapter.DeleteCommand.Parameters(15).V~dulla^@204~ Original_Website,String)
           ~dulla^@204~         If (Original_Email Is Nothing~dulla^@204~            Me.Adapter.DeleteCommand.P~dulla^@204~ .Value = CType(1,Object)
           ~dulla^@204~ er.DeleteCommand.Parameters(17).Value~dulla^@204~ ull.Value
            Else
        ~dulla^@204~ apter.DeleteCommand.Parameters(16).Va~dulla^@204~ ,Object)
                Me.Adapter.~dulla^@204~ .Parameters(17).Value = CType(Origina~dulla^@204~ g)
            End If
            D~dulla^@204~ nnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connect~dulla^@204~           If ((Me.Adapter.DeleteComma~dulla^@204~ .State And System.Data.ConnectionStat~dulla^@204~                        <> System.Data~dulla^@204~ ate.Open) Then
                Me.Ad~dulla^@204~ ommand.Connection.Open
            E~dulla^@204~       Try 
                Dim retur~dulla^@204~ eger = Me.Adapter.DeleteCommand.Execu~dulla^@204~                Return returnValue
  ~dulla^@204~ ally
                If (previousCon~dulla^@204~ = System.Data.ConnectionState.Closed)~dulla^@204~               Me.Adapter.DeleteComman~dulla^@204~ Close
                End If
      ~dulla^@204~ 
        End Function
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~        System.ComponentModel.Design.H~dulla^@204~ ribute("vs.data.TableAdapter"),  _
 ~dulla^@204~ m.ComponentModel.DataObjectMethodAttr~dulla^@204~ ComponentModel.DataObjectMethodType.I~dulla^@204~   _
        Public Overloads Overrid~dulla^@204~  Insert(ByVal SupplierID As String, B~dulla^@204~ Name As String, ByVal Address As Stri~dulla^@204~ y As String, ByVal Country As String,~dulla^@204~ As String, ByVal Fax As String, ByVal~dulla^@204~ s As String, ByVal Website As String,~dulla^@204~ As String) As Integer
            If~dulla^@204~ Is Nothing) Then
                Thr~dulla^@204~ .ArgumentNullException("SupplierID")~dulla^@204~ Else
                Me.Adapter.Inse~dulla^@204~ ameters(0).Value = CType(SupplierID,S~dulla^@204~        End If
            If (Suppli~dulla^@204~ hing) Then
                Throw New~dulla^@204~ entNullException("SupplierName")
   ~dulla^@204~ 
                Me.Adapter.InsertCo~dulla^@204~ ers(1).Value = CType(SupplierName,Str~dulla^@204~      End If
            If (Address ~dulla^@204~ hen
                Me.Adapter.Inser~dulla^@204~ meters(2).Value = System.DBNull.Value~dulla^@204~  Else
                Me.Adapter.Ins~dulla^@204~ rameters(2).Value = CType(Address,Str~dulla^@204~      End If
            If (City Is ~dulla^@204~ 
                Me.Adapter.InsertCo~dulla^@204~ ers(3).Value = System.DBNull.Value
 ~dulla^@204~ se
                Me.Adapter.Insert~dulla^@204~ eters(3).Value = CType(City,String)
~dulla^@204~ nd If
            If (Country Is Not~dulla^@204~                Me.Adapter.InsertComma~dulla^@204~ (4).Value = System.DBNull.Value
    ~dulla^@204~ 
                Me.Adapter.InsertCom~dulla^@204~ rs(4).Value = CType(Country,String)
~dulla^@204~ nd If
            If (Phone Is Nothi~dulla^@204~              Me.Adapter.InsertCommand~dulla^@204~ ).Value = System.DBNull.Value
      ~dulla^@204~                Me.Adapter.InsertComma~dulla^@204~ (5).Value = CType(Phone,String)
    ~dulla^@204~ f
            If (Fax Is Nothing) Th~dulla^@204~        Me.Adapter.InsertCommand.Param~dulla^@204~ e = System.DBNull.Value
            ~dulla^@204~          Me.Adapter.InsertCommand.Par~dulla^@204~ lue = CType(Fax,String)
            ~dulla^@204~        If (PostalAddress Is Nothing) ~dulla^@204~          Me.Adapter.InsertCommand.Par~dulla^@204~ lue = System.DBNull.Value
          ~dulla^@204~            Me.Adapter.InsertCommand.P~dulla^@204~ Value = CType(PostalAddress,String)
~dulla^@204~ nd If
            If (Website Is Not~dulla^@204~                Me.Adapter.InsertComma~dulla^@204~ (8).Value = System.DBNull.Value
    ~dulla^@204~ 
                Me.Adapter.InsertCom~dulla^@204~ rs(8).Value = CType(Website,String)
~dulla^@204~ nd If
            If (Email Is Nothi~dulla^@204~              Me.Adapter.InsertCommand~dulla^@204~ ).Value = System.DBNull.Value
      ~dulla^@204~                Me.Adapter.InsertComma~dulla^@204~ (9).Value = CType(Email,String)
    ~dulla^@204~ f
            Dim previousConnection~dulla^@204~ em.Data.ConnectionState = Me.Adapter.~dulla^@204~ .Connection.State
            If ((M~dulla^@204~ ertCommand.Connection.State And Syste~dulla^@204~ tionState.Open)  _
                 ~dulla^@204~ tem.Data.ConnectionState.Open) Then
~dulla^@204~    Me.Adapter.InsertCommand.Connectio~dulla^@204~        End If
            Try 
    ~dulla^@204~ im returnValue As Integer = Me.Adapte~dulla^@204~ nd.ExecuteNonQuery
                R~dulla^@204~ alue
            Finally
          ~dulla^@204~ viousConnectionState = System.Data.Co~dulla^@204~ .Closed) Then
                    Me~dulla^@204~ rtCommand.Connection.Close
         ~dulla^@204~ 
            End Try
        End Fu~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute(),  _
         System.Co~dulla^@204~ Design.HelpKeywordAttribute("vs.data.~dulla^@204~ ),  _
         System.ComponentModel~dulla^@204~ thodAttribute(System.ComponentModel.D~dulla^@204~ odType.Update, true)>  _
        Pub~dulla^@204~  Overridable Function Update( _
    ~dulla^@204~    ByVal SupplierID As String,  _
  ~dulla^@204~      ByVal SupplierName As String,  _~dulla^@204~          ByVal Address As String,  _~dulla^@204~         ByVal City As String,  _
   ~dulla^@204~     ByVal Country As String,  _
    ~dulla^@204~    ByVal Phone As String,  _
       ~dulla^@204~ ByVal Fax As String,  _
            ~dulla^@204~  PostalAddress As String,  _
       ~dulla^@204~ ByVal Website As String,  _
        ~dulla^@204~ yVal Email As String,  _
           ~dulla^@204~ l Original_SupplierID As String,  _
~dulla^@204~        ByVal Original_SupplierName As~dulla^@204~                     ByVal Original_Ad~dulla^@204~ ng,  _
                    ByVal Ori~dulla^@204~  String,  _
                    ByVa~dulla^@204~ untry As String,  _
                ~dulla^@204~ ginal_Phone As String,  _
          ~dulla^@204~ al Original_Fax As String,  _
      ~dulla^@204~  ByVal Original_PostalAddress As Stri~dulla^@204~                ByVal Original_Website~dulla^@204~ _
                    ByVal Original~dulla^@204~ ing) As Integer
            If (Supp~dulla^@204~ hing) Then
                Throw New~dulla^@204~ entNullException("SupplierID")
     ~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(0).Value = CType(SupplierID,String)~dulla^@204~  End If
            If (SupplierName~dulla^@204~ Then
                Throw New Syste~dulla^@204~ lException("SupplierName")
         ~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ .Value = CType(SupplierName,String)
~dulla^@204~ nd If
            If (Address Is Not~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ (2).Value = System.DBNull.Value
    ~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(2).Value = CType(Address,String)
~dulla^@204~ nd If
            If (City Is Nothin~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ .Value = System.DBNull.Value
       ~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 3).Value = CType(City,String)
      ~dulla^@204~ 
            If (Country Is Nothing) ~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ lue = System.DBNull.Value
          ~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ Value = CType(Country,String)
      ~dulla^@204~ 
            If (Phone Is Nothing) Th~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ e = System.DBNull.Value
            ~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ lue = CType(Phone,String)
          ~dulla^@204~          If (Fax Is Nothing) Then
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ stem.DBNull.Value
            Else
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~ CType(Fax,String)
            End If~dulla^@204~  If (PostalAddress Is Nothing) Then
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~ System.DBNull.Value
            Else~dulla^@204~      Me.Adapter.UpdateCommand.Paramet~dulla^@204~ = CType(PostalAddress,String)
      ~dulla^@204~ 
            If (Website Is Nothing) ~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ lue = System.DBNull.Value
          ~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ Value = CType(Website,String)
      ~dulla^@204~ 
            If (Email Is Nothing) Then
                Me.Adapter.UpdateComma~dulla^@204~ (9).Value = System.DBNull.Value
    ~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(9).Value = CType(Email,String)
  ~dulla^@204~  If
            If (Original_Supplie~dulla^@204~ g) Then
                Throw New Sy~dulla^@204~ NullException("Original_SupplierID")~dulla^@204~ Else
                Me.Adapter.Upda~dulla^@204~ ameters(10).Value = CType(Original_Su~dulla^@204~ ng)
            End If
            ~dulla^@204~ SupplierName Is Nothing) Then
      ~dulla^@204~ ow New System.ArgumentNullException("~dulla^@204~ lierName")
            Else
       ~dulla^@204~ dapter.UpdateCommand.Parameters(11).V~dulla^@204~ Original_SupplierName,String)
      ~dulla^@204~ 
            If (Original_Address Is ~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(12).Value = CType(1,Object)
    ~dulla^@204~ e.Adapter.UpdateCommand.Parameters(13~dulla^@204~ tem.DBNull.Value
            Else
 ~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ CType(0,Object)
                Me.A~dulla^@204~ Command.Parameters(13).Value = CType(~dulla^@204~ ess,String)
            End If
    ~dulla^@204~ riginal_City Is Nothing) Then
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(14).~dulla^@204~ (1,Object)
                Me.Adapte~dulla^@204~ nd.Parameters(15).Value = System.DBNu~dulla^@204~          Else
                Me.Ada~dulla^@204~ mmand.Parameters(14).Value = CType(0,~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ ).Value = CType(Original_City,String)~dulla^@204~  End If
            If (Original_Cou~dulla^@204~ ng) Then
                Me.Adapter.~dulla^@204~ .Parameters(16).Value = CType(1,Objec~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ ue = System.DBNull.Value
           ~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ Value = CType(0,Object)
            ~dulla^@204~ r.UpdateCommand.Parameters(17).Value ~dulla^@204~ nal_Country,String)
            End ~dulla^@204~    If (Original_Phone Is Nothing) The~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~ e = CType(1,Object)
                ~dulla^@204~ dateCommand.Parameters(19).Value = Sy~dulla^@204~ alue
            Else
             ~dulla^@204~ .UpdateCommand.Parameters(18).Value =~dulla^@204~ ct)
                Me.Adapter.Updat~dulla^@204~ meters(19).Value = CType(Original_Pho~dulla^@204~            End If
            If (Or~dulla^@204~  Nothing) Then
                Me.Ad~dulla^@204~ ommand.Parameters(20).Value = CType(1~dulla^@204~              Me.Adapter.UpdateCommand~dulla^@204~ 1).Value = System.DBNull.Value
     ~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(20).Value = CType(0,Object)
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(21).~dulla^@204~ (Original_Fax,String)
            En~dulla^@204~      If (Original_PostalAddress Is No~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(22).Value = CType(1,Object)
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(23).~dulla^@204~ m.DBNull.Value
            Else
   ~dulla^@204~ Me.Adapter.UpdateCommand.Parameters(2~dulla^@204~ ype(0,Object)
                Me.Ada~dulla^@204~ mmand.Parameters(23).Value = CType(Or~dulla^@204~ Address,String)
            End If
~dulla^@204~ f (Original_Website Is Nothing) Then~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~ = CType(1,Object)
                Me~dulla^@204~ teCommand.Parameters(25).Value = Syst~dulla^@204~ ue
            Else
               ~dulla^@204~ pdateCommand.Parameters(24).Value = C~dulla^@204~ )
                Me.Adapter.UpdateC~dulla^@204~ ters(25).Value = CType(Original_Websi~dulla^@204~            End If
            If (Or~dulla^@204~ Is Nothing) Then
                Me.~dulla^@204~ eCommand.Parameters(26).Value = CType~dulla^@204~                Me.Adapter.UpdateComma~dulla^@204~ (27).Value = System.DBNull.Value
   ~dulla^@204~ 
                Me.Adapter.UpdateCo~dulla^@204~ ers(26).Value = CType(0,Object)
    ~dulla^@204~ e.Adapter.UpdateCommand.Parameters(27~dulla^@204~ pe(Original_Email,String)
          ~dulla^@204~          Dim previousConnectionState ~dulla^@204~ a.ConnectionState = Me.Adapter.Update~dulla^@204~ ction.State
            If ((Me.Adap~dulla^@204~ mand.Connection.State And System.Data~dulla^@204~ ate.Open)  _
                       ~dulla^@204~ ta.ConnectionState.Open) Then
      ~dulla^@204~ Adapter.UpdateCommand.Connection.Open~dulla^@204~  End If
            Try 
          ~dulla^@204~ urnValue As Integer = Me.Adapter.Upda~dulla^@204~ cuteNonQuery
                Return ~dulla^@204~             Finally
                ~dulla^@204~ onnectionState = System.Data.Connecti~dulla^@204~ d) Then
                    Me.Adapt~dulla^@204~ and.Connection.Close
               ~dulla^@204~         End Try
        End Function
    End Class
End Namespace
