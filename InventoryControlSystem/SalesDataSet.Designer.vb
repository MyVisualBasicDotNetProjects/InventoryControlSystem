'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.312
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("SalesDataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class SalesDataSet
    Inherits System.Data.DataSet
    
    Private tableSalesInfo As SalesInfoDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SalesInfo")) Is Nothing) Then
                MyBase.Tables.Add(New SalesInfoDataTable(ds.Tables("SalesInfo")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SalesInfo() As SalesInfoDataTable
        Get
            Return Me.tableSalesInfo
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As SalesDataSet = CType(MyBase.Clone,SalesDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("SalesInfo")) Is Nothing) Then
                MyBase.Tables.Add(New SalesInfoDataTable(ds.Tables("SalesInfo")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSalesInfo = CType(MyBase.Tables("SalesInfo"),SalesInfoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSalesInfo) Is Nothing) Then
                Me.tableSalesInfo.InitVars
            End If
        End ~dulla^@204~ ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
    Private Sub InitClass()
 ~dulla^@204~ aSetName = "SalesDataSet"
        Me~dulla^@204~ 
        Me.Namespace = "http://tempu~dulla^@204~ ataSet.xsd"
        Me.EnforceConstr~dulla^@204~ 
        Me.SchemaSerializationMode =~dulla^@204~ SchemaSerializationMode.IncludeSchema~dulla^@204~ tableSalesInfo = New SalesInfoDataTab~dulla^@204~ yBase.Tables.Add(Me.tableSalesInfo)
~dulla^@204~     
    <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
    Private Function ~dulla^@204~ zeSalesInfo() As Boolean
        Ret~dulla^@204~   End Function
    
    <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
    P~dulla^@204~ hemaChanged(ByVal sender As Object, B~dulla^@204~ tem.ComponentModel.CollectionChangeEv~dulla^@204~      If (e.Action = System.ComponentM~dulla^@204~ onChangeAction.Remove) Then
        ~dulla^@204~ rs
        End If
    End Sub
    ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~    Public Shared Function GetTypedDat~dulla^@204~ Val xs As System.Xml.Schema.XmlSchema~dulla^@204~ m.Xml.Schema.XmlSchemaComplexType
  ~dulla^@204~ As SalesDataSet = New SalesDataSet
 ~dulla^@204~ pe As System.Xml.Schema.XmlSchemaComp~dulla^@204~  System.Xml.Schema.XmlSchemaComplexTy~dulla^@204~ im sequence As System.Xml.Schema.XmlS~dulla^@204~  = New System.Xml.Schema.XmlSchemaSeq~dulla^@204~   xs.Add(ds.GetSchemaSerializable)
 ~dulla^@204~ y As System.Xml.Schema.XmlSchemaAny =~dulla^@204~ ml.Schema.XmlSchemaAny
        any.N~dulla^@204~ .Namespace
        sequence.Items.Ad~dulla^@204~    type.Particle = sequence
        ~dulla^@204~     End Function
    
    Public De~dulla^@204~ lesInfoRowChangeEventHandler(ByVal se~dulla^@204~ t, ByVal e As SalesInfoRowChangeEvent~dulla^@204~ <System.CodeDom.Compiler.GeneratedCod~dulla^@204~ ystem.Data.Design.TypedDataSetGenerat~dulla^@204~ "),  _
     System.Serializable(),  ~dulla^@204~ m.Xml.Serialization.XmlSchemaProvider~dulla^@204~ tTypedTableSchema")>  _
    Partial ~dulla^@204~ SalesInfoDataTable
        Inherits ~dulla^@204~ ataTable
        Implements System.C~dulla^@204~ numerable
        
        Private ~dulla^@204~ As System.Data.DataColumn
        
~dulla^@204~ te columnDescription As System.Data.D~dulla^@204~       
        Private columnQuantit~dulla^@204~ ata.DataColumn
        
        Pri~dulla^@204~ itPrice As System.Data.DataColumn
  ~dulla^@204~    Private columnAmount As System.Dat~dulla^@204~ 
        
        Private columnDate~dulla^@204~ tem.Data.DataColumn
        
      ~dulla^@204~ umnCashSalesInvoiceNo As System.Data.~dulla^@204~        
        Private columnCredit~dulla^@204~ o As System.Data.DataColumn
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
        Public Sub New()
        ~dulla^@204~ w
            Me.TableName = "SalesI~dulla^@204~      Me.BeginInit
            Me.Ini~dulla^@204~        Me.EndInit
        End Sub
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Friend Sub New(ByVa~dulla^@204~ stem.Data.DataTable)
            MyB~dulla^@204~         Me.TableName = table.TableNam~dulla^@204~   If (table.CaseSensitive <> table.Da~dulla^@204~ sitive) Then
                Me.Case~dulla^@204~ able.CaseSensitive
            End I~dulla^@204~   If (table.Locale.ToString <> table.~dulla^@204~ e.ToString) Then
                Me.~dulla^@204~ e.Locale
            End If
       ~dulla^@204~ e.Namespace <> table.DataSet.Namespac~dulla^@204~             Me.Namespace = table.Name~dulla^@204~       End If
            Me.Prefix =~dulla^@204~ 
            Me.MinimumCapacity = ta~dulla^@204~ pacity
        End Sub
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Protected Sub New(ByVal info A~dulla^@204~ ime.Serialization.SerializationInfo, ~dulla^@204~  As System.Runtime.Serialization.Stre~dulla^@204~ 
            MyBase.New(info, contex~dulla^@204~    Me.InitVars
        End Sub
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public ReadOnly Proper~dulla^@204~ mn() As System.Data.DataColumn
     ~dulla^@204~                Return Me.columnPartNo~dulla^@204~  End Get
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public ReadOnly Propert~dulla^@204~ Column() As System.Data.DataColumn
 ~dulla^@204~ t
                Return Me.columnDe~dulla^@204~           End Get
        End Proper~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Public ReadOnl~dulla^@204~ antityColumn() As System.Data.DataCol~dulla^@204~     Get
                Return Me.co~dulla^@204~ 
            End Get
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Read~dulla^@204~  UnitPriceColumn() As System.Data.Dat~dulla^@204~         Get
                Return M~dulla^@204~ rice
            End Get
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute()>  _
        Public~dulla^@204~ perty AmountColumn() As System.Data.D~dulla^@204~           Get
                Return~dulla^@204~ unt
            End Get
        End~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ erty DateOfSaleColumn() As System.Dat~dulla^@204~ 
            Get
                Ret~dulla^@204~ DateOfSale
            End Get
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ ly Property CashSalesInvoiceNoColumn(~dulla^@204~ ata.DataColumn
            Get
    ~dulla^@204~ eturn Me.columnCashSalesInvoiceNo
  ~dulla^@204~  Get
        End Property
        ~dulla^@204~ tem.Diagnostics.DebuggerNonUserCodeAt~dulla^@204~ 
        Public ReadOnly Property Cr~dulla^@204~ iceNoColumn() As System.Data.DataColu~dulla^@204~    Get
                Return Me.col~dulla^@204~ sInvoiceNo
            End Get
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute(),  _
        ~dulla^@204~ nentModel.Browsable(false)>  _
     ~dulla^@204~ dOnly Property Count() As Integer
  ~dulla^@204~ 
                Return Me.Rows.Coun~dulla^@204~   End Get
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Default ReadOnl~dulla^@204~ em(ByVal index As Integer) As SalesIn~dulla^@204~       Get
                Return CTy~dulla^@204~ dex),SalesInfoRow)
            End G~dulla^@204~ nd Property
        
        Public~dulla^@204~ nfoRowChanging As SalesInfoRowChangeE~dulla^@204~         
        Public Event SalesI~dulla^@204~  As SalesInfoRowChangeEventHandler
 ~dulla^@204~     Public Event SalesInfoRowDeleting~dulla^@204~ RowChangeEventHandler
        
    ~dulla^@204~ ent SalesInfoRowDeleted As SalesInfoR~dulla^@204~ Handler
        
        <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ erloads Sub AddSalesInfoRow(ByVal row~dulla^@204~ Row)
            Me.Rows.Add(row)
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~ s Function AddSalesInfoRow(ByVal Part~dulla^@204~  ByVal Description As String, ByVal Q~dulla^@204~ teger, ByVal UnitPrice As Decimal, By~dulla^@204~  Decimal, ByVal DateOfSale As Date, B~dulla^@204~ sInvoiceNo As String, ByVal CreditSal~dulla^@204~ s String) As SalesInfoRow
          ~dulla^@204~ sInfoRow As SalesInfoRow = CType(Me.N~dulla^@204~ foRow)
            rowSalesInfoRow.I~dulla^@204~ w Object() {PartNo, Description, Quan~dulla^@204~ ce, Amount, DateOfSale, CashSalesInvo~dulla^@204~ SalesInvoiceNo}
            Me.Rows.~dulla^@204~ nfoRow)
            Return rowSalesI~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Function FindByPartNo(ByVal Par~dulla^@204~ ) As SalesInfoRow
            Return~dulla^@204~ s.Find(New Object() {PartNo}),SalesInfoRow)
        End Function
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Overridable Function Ge~dulla^@204~  As System.Collections.IEnumerator Im~dulla^@204~ em.Collections.IEnumerable.GetEnumera~dulla^@204~     Return Me.Rows.GetEnumerator
   ~dulla^@204~ tion
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ ides Function Clone() As System.Data.~dulla^@204~           Dim cln As SalesInfoDataTab~dulla^@204~ Base.Clone,SalesInfoDataTable)
     ~dulla^@204~ itVars
            Return cln
     ~dulla^@204~ on
        
        <System.Diagnos~dulla^@204~ NonUserCodeAttribute()>  _
        P~dulla^@204~ rides Function CreateInstance() As Sy~dulla^@204~ aTable
            Return New SalesI~dulla^@204~ 
        End Function
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Friend Sub InitVars()
         ~dulla^@204~ artNo = MyBase.Columns("PartNo")
   ~dulla^@204~ olumnDescription = MyBase.Columns("De~dulla^@204~             Me.columnQuantity = MyBas~dulla^@204~ antity")
            Me.columnUnitPr~dulla^@204~ Columns("UnitPrice")
            Me.~dulla^@204~ = MyBase.Columns("Amount")
         ~dulla^@204~ ateOfSale = MyBase.Columns("DateOfSal~dulla^@204~     Me.columnCashSalesInvoiceNo = MyB~dulla^@204~ CashSalesInvoiceNo")
            Me.~dulla^@204~ alesInvoiceNo = MyBase.Columns("Credi~dulla^@204~ No")
        End Sub
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Private Sub InitClass()
       ~dulla^@204~ nPartNo = New System.Data.DataColumn(~dulla^@204~ Type(String), Nothing, System.Data.Ma~dulla^@204~ ment)
            MyBase.Columns.Add~dulla^@204~ tNo)
            Me.columnDescriptio~dulla^@204~ m.Data.DataColumn("Description", GetT~dulla^@204~ Nothing, System.Data.MappingType.Elem~dulla^@204~      MyBase.Columns.Add(Me.columnDesc~dulla^@204~          Me.columnQuantity = New Syst~dulla^@204~ olumn("Quantity", GetType(Integer), N~dulla^@204~ m.Data.MappingType.Element)
        ~dulla^@204~ lumns.Add(Me.columnQuantity)
       ~dulla^@204~ nUnitPrice = New System.Data.DataColu~dulla^@204~ ", GetType(Decimal), Nothing, System.~dulla^@204~ ype.Element)
            MyBase.Colu~dulla^@204~ lumnUnitPrice)
            Me.column~dulla^@204~ System.Data.DataColumn("Amount", GetT~dulla^@204~  Nothing, System.Data.MappingType.Ele~dulla^@204~       MyBase.Columns.Add(Me.columnAmo~dulla^@204~      Me.columnDateOfSale = New System~dulla^@204~ umn("DateOfSale", GetType(Date), Noth~dulla^@204~ ata.MappingType.Element)
           ~dulla^@204~ ns.Add(Me.columnDateOfSale)
        ~dulla^@204~ CashSalesInvoiceNo = New System.Data.~dulla^@204~ ashSalesInvoiceNo", GetType(String), ~dulla^@204~ em.Data.MappingType.Element)
       ~dulla^@204~ olumns.Add(Me.columnCashSalesInvoiceN~dulla^@204~    Me.columnCreditSalesInvoiceNo = Ne~dulla^@204~ .DataColumn("CreditSalesInvoiceNo", G~dulla^@204~ ), Nothing, System.Data.MappingType.E~dulla^@204~         MyBase.Columns.Add(Me.columnC~dulla^@204~ oiceNo)
            Me.Constraints.A~dulla^@204~ .Data.UniqueConstraint("Constraint1",~dulla^@204~ ata.DataColumn() {Me.columnPartNo}, t~dulla^@204~       Me.columnPartNo.AllowDBNull = f~dulla^@204~      Me.columnPartNo.Unique = true
 ~dulla^@204~ .columnPartNo.MaxLength = 20
       ~dulla^@204~ nDescription.MaxLength = 20
        ~dulla^@204~ Quantity.AllowDBNull = false
       ~dulla^@204~ nCashSalesInvoiceNo.MaxLength = 20
 ~dulla^@204~ .columnCreditSalesInvoiceNo.MaxLength~dulla^@204~   End Sub
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Function NewSalesInfoRow() As SalesIn~dulla^@204~       Return CType(Me.NewRow,SalesInf~dulla^@204~   End Function
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ otected Overrides Function NewRowFrom~dulla^@204~  builder As System.Data.DataRowBuilde~dulla^@204~ Data.DataRow
            Return New ~dulla^@204~ builder)
        End Function
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Protected Overrides Fun~dulla^@204~ ype() As System.Type
            Ret~dulla^@204~ alesInfoRow)
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Protected Overrides~dulla^@204~ nged(ByVal e As System.Data.DataRowCh~dulla^@204~ )
            MyBase.OnRowChanged(e)~dulla^@204~  If (Not (Me.SalesInfoRowChangedEvent~dulla^@204~  Then
                RaiseEvent Sal~dulla^@204~ ged(Me, New SalesInfoRowChangeEvent(C~dulla^@204~ lesInfoRow), e.Action))
            ~dulla^@204~    End Sub
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~ ted Overrides Sub OnRowChanging(ByVal~dulla^@204~ Data.DataRowChangeEventArgs)
       ~dulla^@204~ nRowChanging(e)
            If (Not ~dulla^@204~ RowChangingEvent) Is Nothing) Then
 ~dulla^@204~   RaiseEvent SalesInfoRowChanging(Me,~dulla^@204~ oRowChangeEvent(CType(e.Row,SalesInfo~dulla^@204~ n))
            End If
        End ~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Protected Ove~dulla^@204~ RowDeleted(ByVal e As System.Data.Dat~dulla^@204~ ntArgs)
            MyBase.OnRowDele~dulla^@204~        If (Not (Me.SalesInfoRowDelete~dulla^@204~ thing) Then
                RaiseEve~dulla^@204~ owDeleted(Me, New SalesInfoRowChangeE~dulla^@204~ Row,SalesInfoRow), e.Action))
      ~dulla^@204~ 
        End Sub
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Protected Overrides Sub OnRowDeleting~dulla^@204~ ystem.Data.DataRowChangeEventArgs)
 ~dulla^@204~ Base.OnRowDeleting(e)
            If~dulla^@204~ esInfoRowDeletingEvent) Is Nothing) T~dulla^@204~         RaiseEvent SalesInfoRowDeleti~dulla^@204~ lesInfoRowChangeEvent(CType(e.Row,Sal~dulla^@204~ .Action))
            End If
      ~dulla^@204~       
        <System.Diagnostics.D~dulla^@204~ rCodeAttribute()>  _
        Public ~dulla^@204~ esInfoRow(ByVal row As SalesInfoRow)~dulla^@204~ Me.Rows.Remove(row)
        End Sub~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Shared Fun~dulla^@204~ dTableSchema(ByVal xs As System.Xml.S~dulla^@204~ maSet) As System.Xml.Schema.XmlSchema~dulla^@204~             Dim type As System.Xml.Sc~dulla^@204~ aComplexType = New System.Xml.Schema.~dulla^@204~ lexType
            Dim sequence As ~dulla^@204~ hema.XmlSchemaSequence = New System.X~dulla^@204~ SchemaSequence
            Dim ds As~dulla^@204~  = New SalesDataSet
            xs.A~dulla^@204~ maSerializable)
            Dim any1~dulla^@204~ l.Schema.XmlSchemaAny = New System.Xm~dulla^@204~ chemaAny
            any1.Namespace ~dulla^@204~ .w3.org/2001/XMLSchema"
            ~dulla^@204~ s = New Decimal(0)
            any1.~dulla^@204~ ecimal.MaxValue
            any1.Pro~dulla^@204~ = System.Xml.Schema.XmlSchemaContentP~dulla^@204~ 
            sequence.Items.Add(any1~dulla^@204~   Dim any2 As System.Xml.Schema.XmlSc~dulla^@204~  System.Xml.Schema.XmlSchemaAny
    ~dulla^@204~ Namespace = "urn:schemas-microsoft-co~dulla^@204~ m-v1"
            any2.MinOccurs = N~dulla^@204~ 
            any2.ProcessContents = ~dulla^@204~ hema.XmlSchemaContentProcessing.Lax
~dulla^@204~ equence.Items.Add(any2)
            ~dulla^@204~ 1 As System.Xml.Schema.XmlSchemaAttri~dulla^@204~ stem.Xml.Schema.XmlSchemaAttribute
 ~dulla^@204~ tribute1.Name = "namespace"
        ~dulla^@204~ 1.FixedValue = ds.Namespace
        ~dulla^@204~ ibutes.Add(attribute1)
            D~dulla^@204~  As System.Xml.Schema.XmlSchemaAttrib~dulla^@204~ tem.Xml.Schema.XmlSchemaAttribute
  ~dulla^@204~ ribute2.Name = "tableTypeName"
     ~dulla^@204~ ute2.FixedValue = "SalesInfoDataTable~dulla^@204~   type.Attributes.Add(attribute2)
  ~dulla^@204~ e.Particle = sequence
            Re~dulla^@204~       End Function
    End Class
  ~dulla^@204~ em.CodeDom.Compiler.GeneratedCodeAttr~dulla^@204~ .Data.Design.TypedDataSetGenerator", ~dulla^@204~ _
    Partial Public Class SalesInfoRow
        Inherits System.Data.DataRow~dulla^@204~       Private tableSalesInfo As Sales~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Fri~dulla^@204~ yVal rb As System.Data.DataRowBuilder~dulla^@204~   MyBase.New(rb)
            Me.tabl~dulla^@204~ CType(Me.Table,SalesInfoDataTable)
 ~dulla^@204~ b
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Pu~dulla^@204~  PartNo() As String
            Get~dulla^@204~     Return CType(Me(Me.tableSalesInfo~dulla^@204~ ),String)
            End Get
     ~dulla^@204~                Me(Me.tableSalesInfo.P~dulla^@204~ = value
            End Set
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ Description() As String
            ~dulla^@204~         Try 
                    Ret~dulla^@204~ Me.tableSalesInfo.DescriptionColumn),~dulla^@204~             Catch e As System.Invalid~dulla^@204~ 
                    Throw New Syste~dulla^@204~ TypingException("The value for column~dulla^@204~ ' in table 'SalesInfo' is DBNull.", e~dulla^@204~       End Try
            End Get
 ~dulla^@204~ t
                Me(Me.tableSalesIn~dulla^@204~ nColumn) = value
            End Set~dulla^@204~  Property
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Property Quantity() As Integer
     ~dulla^@204~                Return CType(Me(Me.tab~dulla^@204~ uantityColumn),Integer)
            ~dulla^@204~         Set
                Me(Me.ta~dulla^@204~ QuantityColumn) = value
            ~dulla^@204~     End Property
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Property UnitPrice() As Decima~dulla^@204~   Get
                Try 
        ~dulla^@204~ eturn CType(Me(Me.tableSalesInfo.Unit~dulla^@204~ Decimal)
                Catch e As ~dulla^@204~ dCastException
                    T~dulla^@204~ em.Data.StrongTypingException("The va~dulla^@204~ n 'UnitPrice' in table 'SalesInfo' is~dulla^@204~ 
                End Try
          ~dulla^@204~           Set
                Me(Me.~dulla^@204~ o.UnitPriceColumn) = value
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Property Amount() As Decima~dulla^@204~   Get
                Try 
        ~dulla^@204~ eturn CType(Me(Me.tableSalesInfo.Amou~dulla^@204~ imal)
                Catch e As Sys~dulla^@204~ stException
                    Thro~dulla^@204~ Data.StrongTypingException("The value~dulla^@204~ Amount' in table 'SalesInfo' is DBNul~dulla^@204~             End Try
            End ~dulla^@204~     Set
                Me(Me.tableS~dulla^@204~ ntColumn) = value
            End Se~dulla^@204~ d Property
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute()>  _
 ~dulla^@204~  Property DateOfSale() As Date
     ~dulla^@204~                Try 
                ~dulla^@204~ ype(Me(Me.tableSalesInfo.DateOfSaleCo~dulla^@204~                 Catch e As System.Inv~dulla^@204~ tion
                    Throw New S~dulla^@204~ rongTypingException("The value for co~dulla^@204~ ale' in table 'SalesInfo' is DBNull."~dulla^@204~          End Try
            End Get~dulla^@204~  Set
                Me(Me.tableSale~dulla^@204~ aleColumn) = value
            End S~dulla^@204~ nd Property
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Property CashSalesInvoiceNo() As St~dulla^@204~      Get
                Try 
     ~dulla^@204~   Return CType(Me(Me.tableSalesInfo.C~dulla^@204~ ceNoColumn),String)
                ~dulla^@204~ stem.InvalidCastException
          ~dulla^@204~ ow New System.Data.StrongTypingExcept~dulla^@204~ e for column 'CashSalesInvoiceNo' in ~dulla^@204~ nfo' is DBNull.", e)
               ~dulla^@204~          End Get
            Set
  ~dulla^@204~  Me(Me.tableSalesInfo.CashSalesInvoic~dulla^@204~ value
            End Set
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Publi~dulla^@204~ editSalesInvoiceNo() As String
     ~dulla^@204~                Try 
                ~dulla^@204~ ype(Me(Me.tableSalesInfo.CreditSalesI~dulla^@204~ n),String)
                Catch e A~dulla^@204~ lidCastException
                   ~dulla^@204~ stem.Data.StrongTypingException("The ~dulla^@204~ umn 'CreditSalesInvoiceNo' in table '~dulla^@204~  DBNull.", e)
                End Tr~dulla^@204~   End Get
            Set
         ~dulla^@204~ tableSalesInfo.CreditSalesInvoiceNoCo~dulla^@204~ 
            End Set
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Fun~dulla^@204~ iptionNull() As Boolean
            ~dulla^@204~ ull(Me.tableSalesInfo.DescriptionColu~dulla^@204~ End Function
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic Sub SetDescriptionNull()
        ~dulla^@204~ leSalesInfo.DescriptionColumn) = Syst~dulla^@204~ Null
        End Sub
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Function IsUnitPriceNull(~dulla^@204~ 
            Return Me.IsNull(Me.tabl~dulla^@204~ itPriceColumn)
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute()>  _
        Public Sub SetUni~dulla^@204~ 
            Me(Me.tableSalesInfo.Uni~dulla^@204~  = System.Convert.DBNull
        End~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Public Funct~dulla^@204~ ull() As Boolean
            Return ~dulla^@204~ tableSalesInfo.AmountColumn)
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ ountNull()
            Me(Me.tableSa~dulla^@204~ tColumn) = System.Convert.DBNull
   ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ sDateOfSaleNull() As Boolean
       ~dulla^@204~ e.IsNull(Me.tableSalesInfo.DateOfSale~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Sub SetDateOfSaleNull()
     ~dulla^@204~ tableSalesInfo.DateOfSaleColumn) = Sy~dulla^@204~ DBNull
        End Sub
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Function IsCashSalesInv~dulla^@204~ As Boolean
            Return Me.IsN~dulla^@204~ alesInfo.CashSalesInvoiceNoColumn)
 ~dulla^@204~ nction
        
        <System.Dia~dulla^@204~ ggerNonUserCodeAttribute()>  _
     ~dulla^@204~  SetCashSalesInvoiceNoNull()
       ~dulla^@204~ bleSalesInfo.CashSalesInvoiceNoColumn~dulla^@204~ nvert.DBNull
        End Sub
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Function IsCredit~dulla^@204~ oNull() As Boolean
            Retur~dulla^@204~ e.tableSalesInfo.CreditSalesInvoiceNo~dulla^@204~     End Function
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Sub SetCreditSalesInvoiceNoNul~dulla^@204~     Me(Me.tableSalesInfo.CreditSalesI~dulla^@204~ n) = System.Convert.DBNull
        E~dulla^@204~ nd Class
    
    <System.CodeDom.C~dulla^@204~ atedCodeAttribute("System.Data.Design~dulla^@204~ Generator", "2.0.0.0")>  _
    Publi~dulla^@204~ InfoRowChangeEvent
        Inherits ~dulla^@204~ rgs
        
        Private eventR~dulla^@204~ foRow
        
        Private even~dulla^@204~ stem.Data.DataRowAction
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Sub New(ByVal row As Sa~dulla^@204~ yVal action As System.Data.DataRowAct~dulla^@204~      MyBase.New
            Me.event~dulla^@204~           Me.eventAction = action
  ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ Property Row() As SalesInfoRow
     ~dulla^@204~                Return Me.eventRow
  ~dulla^@204~  Get
        End Property
        
        <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public ReadOnly Pro~dulla^@204~ ) As System.Data.DataRowAction
     ~dulla^@204~                Return Me.eventAction~dulla^@204~ End Get
        End Property
    En~dulla^@204~ Class

Namespace SalesDataSetTableA~dulla^@204~ 
    <System.CodeDom.Compiler.Genera~dulla^@204~ ute("System.Data.Design.TypedDataSetG~dulla^@204~ .0.0.0"),  _
     System.ComponentMo~dulla^@204~ ategoryAttribute("code"),  _
     Sy~dulla^@204~ tModel.ToolboxItem(true),  _
     Sy~dulla^@204~ tModel.DataObjectAttribute(true),  _~dulla^@204~ ComponentModel.DesignerAttribute("Mic~dulla^@204~ gner.DataSource.Design.TableAdapterDe~dulla^@204~ soft.VSDesigner"& _ 
        ", Vers~dulla^@204~ Culture=neutral, PublicKeyToken=b03f5~dulla^@204~ ,  _
     System.ComponentModel.Desi~dulla^@204~ dAttribute("vs.data.TableAdapter")>  ~dulla^@204~ l Public Class SalesInfoTableAdapter~dulla^@204~ rits System.ComponentModel.Component~dulla^@204~       Private WithEvents _adapter As ~dulla^@204~ qlClient.SqlDataAdapter
        
  ~dulla^@204~  _connection As System.Data.SqlClient~dulla^@204~ n
        
        Private _command~dulla^@204~ As System.Data.SqlClient.SqlCommand
~dulla^@204~      Private _clearBeforeFill As Bool~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Sub Ne~dulla^@204~     MyBase.New
            Me.ClearB~dulla^@204~ rue
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Private ReadOnly Property Adapter~dulla^@204~ Data.SqlClient.SqlDataAdapter
      ~dulla^@204~               If (Me._adapter Is Noth~dulla^@204~                   Me.InitAdapter
   ~dulla^@204~ End If
                Return Me._ad~dulla^@204~       End Get
        End Property
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Friend Property Co~dulla^@204~  System.Data.SqlClient.SqlConnection~dulla^@204~ Get
                If (Me._connecti~dulla^@204~ ) Then
                    Me.InitCo~dulla^@204~              End If
                ~dulla^@204~ nnection
            End Get
      ~dulla^@204~               Me._connection = value~dulla^@204~     If (Not (Me.Adapter.InsertCommand~dulla^@204~  Then
                    Me.Adapter~dulla^@204~ d.Connection = value
               ~dulla^@204~             If (Not (Me.Adapter.Delet~dulla^@204~ Nothing) Then
                    Me~dulla^@204~ teCommand.Connection = value
       ~dulla^@204~ If
                If (Not (Me.Adapt~dulla^@204~ and) Is Nothing) Then
              ~dulla^@204~ ter.UpdateCommand.Connection = value~dulla^@204~     End If
                Dim i As ~dulla^@204~                 Do While (i < Me.Comm~dulla^@204~ .Length)
                    If (Not~dulla^@204~ ollection(i)) Is Nothing) Then
     ~dulla^@204~       CType(Me.CommandCollection(i),S~dulla^@204~ lClient.SqlCommand).Connection = valu~dulla^@204~           End If
                   ~dulla^@204~ 
                Loop
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ otected ReadOnly Property CommandColl~dulla^@204~ ystem.Data.SqlClient.SqlCommand()
  ~dulla^@204~ 
                If (Me._commandColl~dulla^@204~ hing) Then
                    Me.In~dulla^@204~ ection
                End If
     ~dulla^@204~ turn Me._commandCollection
         ~dulla^@204~        End Property
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Public Property ClearBeforeFill() ~dulla^@204~            Get
                Retur~dulla^@204~ foreFill
            End Get
      ~dulla^@204~               Me._clearBeforeFill = v~dulla^@204~      End Set
        End Property
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Private Sub InitAda~dulla^@204~        Me._adapter = New System.Data.~dulla^@204~ DataAdapter
            Dim tableMap~dulla^@204~ m.Data.Common.DataTableMapping = New ~dulla^@204~ ommon.DataTableMapping
            t~dulla^@204~ ourceTable = "Table"
            tab~dulla^@204~ aSetTable = "SalesInfo"
            ~dulla^@204~ ColumnMappings.Add("PartNo", "PartNo"~dulla^@204~   tableMapping.ColumnMappings.Add("De~dulla^@204~ Description")
            tableMappi~dulla^@204~ ings.Add("Quantity", "Quantity")
   ~dulla^@204~ eMapping.ColumnMappings.Add("UnitPric~dulla^@204~ e")
            tableMapping.ColumnM~dulla^@204~ Amount", "Amount")
            table~dulla^@204~ nMappings.Add("DateOfSale", "DateOfSa~dulla^@204~      tableMapping.ColumnMappings.Add(~dulla^@204~ oiceNo", "CashSalesInvoiceNo")
     ~dulla^@204~ apping.ColumnMappings.Add("CreditSale~dulla^@204~ "CreditSalesInvoiceNo")
            ~dulla^@204~ ableMappings.Add(tableMapping)
     ~dulla^@204~ apter.DeleteCommand = New System.Data~dulla^@204~ lCommand
            Me._adapter.Del~dulla^@204~ nnection = Me.Connection
           ~dulla^@204~ DeleteCommand.CommandText = "DELETE F~dulla^@204~ lesInfo] WHERE (([PartNo] = @Original~dulla^@204~ ([Descript"& _ 
                "ion~dulla^@204~ _Description) AND ([Quantity] = @Orig~dulla^@204~ ) AND ((@IsNul"& _ 
                ~dulla^@204~ = 1 AND [UnitPrice] IS NULL) OR ([Uni~dulla^@204~ iginal_UnitPrice))"& _ 
            ~dulla^@204~ IsNull_Amount = 1 AND [Amount] IS NUL~dulla^@204~ t] = @Original_Amount)"& _ 
        ~dulla^@204~ D ((@IsNull_DateOfSale = 1 AND [DateO~dulla^@204~ L) OR ([DateOfSale] = @Ori"& _ 
    ~dulla^@204~ ginal_DateOfSale)) AND ((@IsNull_Cash~dulla^@204~ o = 1 AND [CashSalesInvoiceNo]"& _ 
~dulla^@204~    " IS NULL) OR ([CashSalesInvoiceNo~dulla^@204~ _CashSalesInvoiceNo)) AND ((@IsNul"& ~dulla^@204~        "l_CreditSalesInvoiceNo = 1 AN~dulla^@204~ sInvoiceNo] IS NULL) OR ([CreditSales~dulla^@204~            "nvoiceNo] = @Original_Cre~dulla^@204~ ceNo)))"
            Me._adapter.Del~dulla^@204~ mmandType = System.Data.CommandType.T~dulla^@204~     Me._adapter.DeleteCommand.Paramet~dulla^@204~ ystem.Data.SqlClient.SqlParameter("@O~dulla^@204~ o", System.Data.SqlDbType.NVarChar, 0~dulla^@204~ .ParameterDirection.Input, 0, 0, "Par~dulla^@204~ Data.DataRowVersion.Original, false, ~dulla^@204~ "", ""))
            Me._adapter.Del~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@Original_Description", System.Dat~dulla^@204~ Char], 0, System.Data.ParameterDirect~dulla^@204~  0, "Description", System.Data.DataRo~dulla^@204~ inal, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.DeleteCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Origina~dulla^@204~ System.Data.SqlDbType.Int, 0, System.~dulla^@204~ rDirection.Input, 0, 0, "Quantity", S~dulla^@204~ taRowVersion.Original, false, Nothing~dulla^@204~ )
            Me._adapter.DeleteComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ull_UnitPrice", System.Data.SqlDbType~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ ", System.Data.DataRowVersion.Origina~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@Original_UnitPrice", Sys~dulla^@204~ bType.Money, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "UnitPrice", System.Data.Da~dulla^@204~ Original, false, Nothing, "", "", "")~dulla^@204~   Me._adapter.DeleteCommand.Parameter~dulla^@204~ tem.Data.SqlClient.SqlParameter("@IsN~dulla^@204~ System.Data.SqlDbType.Int, 0, System.~dulla^@204~ rDirection.Input, 0, 0, "Amount", Sys~dulla^@204~ RowVersion.Original, true, Nothing, "~dulla^@204~             Me._adapter.DeleteCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ al_Amount", System.Data.SqlDbType.Mon~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ stem.Data.DataRowVersion.Original, fa~dulla^@204~  "", "", ""))
            Me._adapte~dulla^@204~ nd.Parameters.Add(New System.Data.Sql~dulla^@204~ ameter("@IsNull_DateOfSale", System.D~dulla^@204~ .Int, 0, System.Data.ParameterDirecti~dulla^@204~ 0, "DateOfSale", System.Data.DataRowV~dulla^@204~ al, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Or~dulla^@204~ Sale", System.Data.SqlDbType.DateTime~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ System.Data.DataRowVersion.Original, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@IsNull_CashSalesInvoiceNo"~dulla^@204~ .SqlDbType.Int, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "CashSalesInvoiceNo", Sy~dulla^@204~ aRowVersion.Original, true, Nothing, ~dulla^@204~ 
            Me._adapter.DeleteComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ nal_CashSalesInvoiceNo", System.Data.~dulla^@204~ rChar, 0, System.Data.ParameterDirect~dulla^@204~  0, "CashSalesInvoiceNo", System.Data~dulla^@204~ on.Original, false, Nothing, "", "", ~dulla^@204~      Me._adapter.DeleteCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ SalesInvoiceNo", System.Data.SqlDbTyp~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ lesInvoiceNo", System.Data.DataRowVer~dulla^@204~ , true, Nothing, "", "", ""))
      ~dulla^@204~ pter.DeleteCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@Original_Cre~dulla^@204~ ceNo", System.Data.SqlDbType.NVarChar~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ voiceNo", System.Data.DataRowVersion.~dulla^@204~ se, Nothing, "", "", ""))
          ~dulla^@204~ .InsertCommand = New System.Data.SqlC~dulla^@204~ and
            Me._adapter.InsertCo~dulla^@204~ ion = Me.Connection
            Me._~dulla^@204~ tCommand.CommandText = "INSERT INTO [~dulla^@204~ fo] ([PartNo], [Description], [Quanti~dulla^@204~ ce], "& _ 
                "[Amount]~dulla^@204~ ], [CashSalesInvoiceNo], [CreditSales~dulla^@204~ ALUES (@P"& _ 
                "artN~dulla^@204~ on, @Quantity, @UnitPrice, @Amount, @~dulla^@204~ CashSalesInvo"& _ 
                "~dulla^@204~ tSalesInvoiceNo);"&Global.Microsoft.V~dulla^@204~ rW(13)&Global.Microsoft.VisualBasic.C~dulla^@204~ CT PartNo, Description, Quantity, Uni~dulla^@204~ 
                " Amount, DateOfSale~dulla^@204~ voiceNo, CreditSalesInvoiceNo FROM Sa~dulla^@204~  _ 
                "RE (PartNo = @P~dulla^@204~         Me._adapter.InsertCommand.Com~dulla^@204~ stem.Data.CommandType.Text
         ~dulla^@204~ r.InsertCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@PartNo", System~dulla^@204~ pe.NVarChar, 0, System.Data.Parameter~dulla^@204~ ut, 0, 0, "PartNo", System.Data.DataR~dulla^@204~ rent, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.InsertCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Descrip~dulla^@204~ .Data.SqlDbType.[Char], 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "Description", S~dulla^@204~ taRowVersion.Current, false, Nothing,~dulla^@204~ 
            Me._adapter.InsertComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ tity", System.Data.SqlDbType.Int, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Quant~dulla^@204~ Data.DataRowVersion.Current, false, N~dulla^@204~ ", ""))
            Me._adapter.Inse~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@UnitPrice", System.Data.SqlDbType.~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ e", System.Data.DataRowVersion.Curren~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@Amount", System.Data.Sq~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ Amount", System.Data.DataRowVersion.C~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ nsertCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@DateOfSale", Syste~dulla^@204~ ype.DateTime, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "DateOfSale", System.Data.~dulla^@204~ n.Current, false, Nothing, "", "", ""~dulla^@204~    Me._adapter.InsertCommand.Paramete~dulla^@204~ stem.Data.SqlClient.SqlParameter("@Ca~dulla^@204~ eNo", System.Data.SqlDbType.NVarChar,~dulla^@204~ ta.ParameterDirection.Input, 0, 0, "C~dulla^@204~ ceNo", System.Data.DataRowVersion.Cur~dulla^@204~ Nothing, "", "", ""))
            Me~dulla^@204~ ertCommand.Parameters.Add(New System.~dulla^@204~ t.SqlParameter("@CreditSalesInvoiceNo~dulla^@204~ a.SqlDbType.NVarChar, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "CreditSalesInvoic~dulla^@204~ Data.DataRowVersion.Current, false, N~dulla^@204~ ", ""))
            Me._adapter.Upda~dulla^@204~ ew System.Data.SqlClient.SqlCommand
~dulla^@204~ e._adapter.UpdateCommand.Connection =~dulla^@204~ n
            Me._adapter.UpdateComm~dulla^@204~ xt = "UPDATE [dbo].[SalesInfo] SET [P~dulla^@204~ tNo, [Description] = @Description, [Q~dulla^@204~           "uantity] = @Quantity, [Uni~dulla^@204~ itPrice, [Amount] = @Amount, [DateOfS~dulla^@204~               " = @DateOfSale, [CashS~dulla^@204~ ] = @CashSalesInvoiceNo, [CreditSales~dulla^@204~ 
                "o] = @CreditSalesI~dulla^@204~ E (([PartNo] = @Original_PartNo) AND ~dulla^@204~ & _ 
                "n] = @Original~dulla^@204~  AND ([Quantity] = @Original_Quantity~dulla^@204~ ll_"& _ 
                "UnitPrice ~dulla^@204~ Price] IS NULL) OR ([UnitPrice] = @Or~dulla^@204~ ice)) A"& _ 
                "ND ((@~dulla^@204~  = 1 AND [Amount] IS NULL) OR ([Amoun~dulla^@204~ l_Amount)) "& _ 
                "AN~dulla^@204~ ateOfSale = 1 AND [DateOfSale] IS NUL~dulla^@204~ fSale] = @Origi"& _ 
               ~dulla^@204~ ale)) AND ((@IsNull_CashSalesInvoiceN~dulla^@204~ shSalesInvoiceNo] I"& _ 
           ~dulla^@204~  OR ([CashSalesInvoiceNo] = @Original~dulla^@204~ oiceNo)) AND ((@IsNull_"& _ 
       ~dulla^@204~ ditSalesInvoiceNo = 1 AND [CreditSale~dulla^@204~ S NULL) OR ([CreditSalesInv"& _ 
   ~dulla^@204~ "oiceNo] = @Original_CreditSalesInvoi~dulla^@204~ bal.Microsoft.VisualBasic.ChrW(13)&Gl~dulla^@204~ t.VisualBasic.ChrW(10)&"SELECT PartNo~dulla^@204~ , Quanti"& _ 
                "ty, U~dulla^@204~ unt, DateOfSale, CashSalesInvoiceNo, ~dulla^@204~ voiceNo FROM"& _ 
                " ~dulla^@204~ RE (PartNo = @PartNo)"
            M~dulla^@204~ dateCommand.CommandType = System.Data~dulla^@204~ Text
            Me._adapter.UpdateC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ PartNo", System.Data.SqlDbType.NVarCh~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~ stem.Data.DataRowVersion.Current, fal~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@Description", System.Data.Sql~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ Description", System.Data.DataRowVers~dulla^@204~ false, Nothing, "", "", ""))
       ~dulla^@204~ ter.UpdateCommand.Parameters.Add(New ~dulla^@204~ qlClient.SqlParameter("@Quantity", Sy~dulla^@204~ DbType.Int, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "Quantity", System.Data.Data~dulla^@204~ rrent, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.UpdateCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@UnitPr~dulla^@204~ Data.SqlDbType.Money, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "UnitPrice", Syste~dulla^@204~ wVersion.Current, false, Nothing, "",~dulla^@204~           Me._adapter.UpdateCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~  System.Data.SqlDbType.Money, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "Amount", ~dulla^@204~ ataRowVersion.Current, false, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ eOfSale", System.Data.SqlDbType.DateT~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ ", System.Data.DataRowVersion.Current~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@CashSalesInvoiceNo", Sys~dulla^@204~ bType.NVarChar, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "CashSalesInvoiceNo", Sy~dulla^@204~ aRowVersion.Current, false, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ tSalesInvoiceNo", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirec~dulla^@204~ , 0, "CreditSalesInvoiceNo", System.D~dulla^@204~ rsion.Current, false, Nothing, "", ""~dulla^@204~        Me._adapter.UpdateCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ rtNo", System.Data.SqlDbType.NVarChar~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ em.Data.DataRowVersion.Original, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Original_Description", System.~dulla^@204~ e.[Char], 0, System.Data.ParameterDir~dulla^@204~  0, 0, "Description", System.Data.Dat~dulla^@204~ riginal, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.UpdateCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Orig~dulla^@204~ ", System.Data.SqlDbType.Int, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "Quantity"~dulla^@204~ .DataRowVersion.Original, false, Noth~dulla^@204~ ""))
            Me._adapter.UpdateC~dulla^@204~ ters.Add(New System.Data.SqlClient.Sq~dulla^@204~ IsNull_UnitPrice", System.Data.SqlDbT~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ ice", System.Data.DataRowVersion.Orig~dulla^@204~ othing, "", "", ""))
            Me.~dulla^@204~ teCommand.Parameters.Add(New System.D~dulla^@204~ .SqlParameter("@Original_UnitPrice", ~dulla^@204~ qlDbType.Money, 0, System.Data.Parame~dulla^@204~ Input, 0, 0, "UnitPrice", System.Data~dulla^@204~ on.Original, false, Nothing, "", "", ~dulla^@204~      Me._adapter.UpdateCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ ", System.Data.SqlDbType.Int, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "Amount", ~dulla^@204~ ataRowVersion.Original, true, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ ginal_Amount", System.Data.SqlDbType.~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@IsNull_DateOfSale", Syste~dulla^@204~ ype.Int, 0, System.Data.ParameterDire~dulla^@204~ 0, 0, "DateOfSale", System.Data.DataR~dulla^@204~ ginal, true, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.UpdateCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Origina~dulla^@204~ , System.Data.SqlDbType.DateTime, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "DateO~dulla^@204~ m.Data.DataRowVersion.Original, false~dulla^@204~ , "", ""))
            Me._adapter.U~dulla^@204~ Parameters.Add(New System.Data.SqlCli~dulla^@204~ ter("@IsNull_CashSalesInvoiceNo", Sys~dulla^@204~ bType.Int, 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "CashSalesInvoiceNo", System.~dulla^@204~ ersion.Original, true, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ ashSalesInvoiceNo", System.Data.SqlDb~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ CashSalesInvoiceNo", System.Data.Data~dulla^@204~ iginal, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.UpdateCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@IsNul~dulla^@204~ InvoiceNo", System.Data.SqlDbType.Int~dulla^@204~ ata.ParameterDirection.Input, 0, 0, "~dulla^@204~ voiceNo", System.Data.DataRowVersion.~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ UpdateCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@Original_CreditSa~dulla^@204~ , System.Data.SqlDbType.NVarChar, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "Credi~dulla^@204~ No", System.Data.DataRowVersion.Origi~dulla^@204~ othing, "", "", ""))
        End Sub~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute()>  _
        Private Sub Init~dulla^@204~ 
            Me._connection = New Sys~dulla^@204~ lient.SqlConnection
            Me._~dulla^@204~ nnectionString = Global.InventoryCont~dulla^@204~ MySettings.Default.PurchaseInfoConnec~dulla^@204~  End Sub
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ Sub InitCommandCollection()
        ~dulla^@204~ ndCollection = New System.Data.SqlCli~dulla^@204~ d(0) {}
            Me._commandColle~dulla^@204~ w System.Data.SqlClient.SqlCommand
 ~dulla^@204~ ._commandCollection(0).Connection = M~dulla^@204~ 
            Me._commandCollection(0)~dulla^@204~ = "SELECT PartNo, Description, Quanti~dulla^@204~ , Amount, DateOfSale, CashSalesInv"& ~dulla^@204~        "oiceNo, CreditSalesInvoiceNo ~dulla^@204~ sInfo"
            Me._commandCollec~dulla^@204~ ndType = System.Data.CommandType.Text~dulla^@204~  Sub
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute(),  _
       ~dulla^@204~ onentModel.Design.HelpKeywordAttribut~dulla^@204~ bleAdapter"),  _
         System.Com~dulla^@204~ ataObjectMethodAttribute(System.Compo~dulla^@204~ aObjectMethodType.Fill, true)>  _
  ~dulla^@204~ Overloads Overridable Function Fill(B~dulla^@204~ e As SalesDataSet.SalesInfoDataTable)~dulla^@204~             Me.Adapter.SelectCommand ~dulla^@204~ ollection(0)
            If (Me.Clea~dulla^@204~  true) Then
                dataTabl~dulla^@204~         End If
            Dim retur~dulla^@204~ eger = Me.Adapter.Fill(dataTable)
  ~dulla^@204~ urn returnValue
        End Function~dulla^@204~        <System.Diagnostics.DebuggerNo~dulla^@204~ ibute(),  _
         System.Componen~dulla^@204~ .HelpKeywordAttribute("vs.data.TableA~dulla^@204~ 
         System.ComponentModel.DataO~dulla^@204~ tribute(System.ComponentModel.DataObj~dulla^@204~ .[Select], true)>  _
        Public ~dulla^@204~ rridable Function GetData() As SalesD~dulla^@204~ nfoDataTable
            Me.Adapter.~dulla^@204~  = Me.CommandCollection(0)
         ~dulla^@204~ ble As SalesDataSet.SalesInfoDataTabl~dulla^@204~ DataSet.SalesInfoDataTable
         ~dulla^@204~ .Fill(dataTable)
            Return ~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~    System.ComponentModel.Design.HelpK~dulla^@204~ te("vs.data.TableAdapter")>  _
     ~dulla^@204~ rloads Overridable Function Update(By~dulla^@204~  As SalesDataSet.SalesInfoDataTable) ~dulla^@204~            Return Me.Adapter.Update(d~dulla^@204~       End Function
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~    System.ComponentModel.Design.HelpK~dulla^@204~ te("vs.data.TableAdapter")>  _
     ~dulla^@204~ rloads Overridable Function Update(By~dulla^@204~ s SalesDataSet) As Integer
         ~dulla^@204~ Adapter.Update(dataSet, "SalesInfo")~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute(),  _
   ~dulla^@204~ ComponentModel.Design.HelpKeywordAttr~dulla^@204~ a.TableAdapter")>  _
        Public ~dulla^@204~ rridable Function Update(ByVal dataRo~dulla^@204~ ata.DataRow) As Integer
            ~dulla^@204~ pter.Update(New System.Data.DataRow()~dulla^@204~         End Function
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~      System.ComponentModel.Design.Hel~dulla^@204~ bute("vs.data.TableAdapter")>  _
   ~dulla^@204~ verloads Overridable Function Update(~dulla^@204~ s() As System.Data.DataRow) As Intege~dulla^@204~   Return Me.Adapter.Update(dataRows)~dulla^@204~ Function
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute(),  _
   ~dulla^@204~ ComponentModel.Design.HelpKeywordAttr~dulla^@204~ a.TableAdapter"),  _
         System~dulla^@204~ el.DataObjectMethodAttribute(System.C~dulla^@204~ .DataObjectMethodType.Delete, true)> ~dulla^@204~ ublic Overloads Overridable Function ~dulla^@204~ Original_PartNo As String, ByVal Orig~dulla^@204~ ion As String, ByVal Original_Quantit~dulla^@204~  ByVal Original_UnitPrice As System.N~dulla^@204~ cimal), ByVal Original_Amount As Syst~dulla^@204~ f Decimal), ByVal Original_DateOfSale~dulla^@204~ llable(Of Date), ByVal Original_CashS~dulla^@204~  As String, ByVal Original_CreditSale~dulla^@204~  String) As Integer
            If (~dulla^@204~ No Is Nothing) Then
                Throw New System.ArgumentNullException("Or~dulla^@204~ ")
            Else
               ~dulla^@204~ eleteCommand.Parameters(0).Value = CT~dulla^@204~ PartNo,String)
            End If
 ~dulla^@204~  (Original_Description Is Nothing) Th~dulla^@204~        Me.Adapter.DeleteCommand.Param~dulla^@204~ e = System.DBNull.Value
            ~dulla^@204~          Me.Adapter.DeleteCommand.Par~dulla^@204~ lue = CType(Original_Description,Stri~dulla^@204~     End If
            Me.Adapter.De~dulla^@204~ arameters(2).Value = CType(Original_Q~dulla^@204~ er)
            If (Original_UnitPri~dulla^@204~  true) Then
                Me.Adapt~dulla^@204~ and.Parameters(3).Value = CType(0,Obj~dulla^@204~          Me.Adapter.DeleteCommand.Par~dulla^@204~ lue = CType(Original_UnitPrice.Value,~dulla^@204~          Else
                Me.Ada~dulla^@204~ mmand.Parameters(3).Value = CType(1,O~dulla^@204~            Me.Adapter.DeleteCommand.P~dulla^@204~ Value = System.DBNull.Value
        ~dulla^@204~            If (Original_Amount.HasVal~dulla^@204~ en
                Me.Adapter.Delete~dulla^@204~ eters(5).Value = CType(0,Object)
   ~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(6~dulla^@204~ pe(Original_Amount.Value,Decimal)
  ~dulla^@204~ e
                Me.Adapter.DeleteC~dulla^@204~ ters(5).Value = CType(1,Object)
    ~dulla^@204~ e.Adapter.DeleteCommand.Parameters(6)~dulla^@204~ em.DBNull.Value
            End If
~dulla^@204~ f (Original_DateOfSale.HasValue = tru~dulla^@204~             Me.Adapter.DeleteCommand.~dulla^@204~ .Value = CType(0,Object)
           ~dulla^@204~ er.DeleteCommand.Parameters(8).Value ~dulla^@204~ nal_DateOfSale.Value,Date)
         ~dulla^@204~             Me.Adapter.DeleteCommand.~dulla^@204~ .Value = CType(1,Object)
           ~dulla^@204~ er.DeleteCommand.Parameters(8).Value ~dulla^@204~ ll.Value
            End If
       ~dulla^@204~ inal_CashSalesInvoiceNo Is Nothing) T~dulla^@204~         Me.Adapter.DeleteCommand.Para~dulla^@204~ ue = CType(1,Object)
               ~dulla^@204~ eleteCommand.Parameters(10).Value = S~dulla^@204~ Value
            Else
            ~dulla^@204~ r.DeleteCommand.Parameters(9).Value =~dulla^@204~ ct)
                Me.Adapter.Delet~dulla^@204~ meters(10).Value = CType(Original_Cas~dulla^@204~ No,String)
            End If
     ~dulla^@204~ iginal_CreditSalesInvoiceNo Is Nothin~dulla^@204~             Me.Adapter.DeleteCommand.~dulla^@204~ ).Value = CType(1,Object)
          ~dulla^@204~ ter.DeleteCommand.Parameters(12).Valu~dulla^@204~ Null.Value
            Else
       ~dulla^@204~ dapter.DeleteCommand.Parameters(11).V~dulla^@204~ 0,Object)
                Me.Adapter~dulla^@204~ d.Parameters(12).Value = CType(Origin~dulla^@204~ sInvoiceNo,String)
            End I~dulla^@204~   Dim previousConnectionState As Syst~dulla^@204~ ctionState = Me.Adapter.DeleteCommand~dulla^@204~ tate
            If ((Me.Adapter.Del~dulla^@204~ nnection.State And System.Data.Connec~dulla^@204~ n)  _
                        <> Sys~dulla^@204~ ectionState.Open) Then
             ~dulla^@204~ .DeleteCommand.Connection.Open
     ~dulla^@204~ 
            Try 
                D~dulla^@204~ e As Integer = Me.Adapter.DeleteComma~dulla^@204~ Query
                Return returnV~dulla^@204~      Finally
                If (pre~dulla^@204~ onState = System.Data.ConnectionState~dulla^@204~ 
                    Me.Adapter.Dele~dulla^@204~ nection.Close
                End If~dulla^@204~  End Try
        End Function
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ ,  _
         System.ComponentModel.~dulla^@204~ ywordAttribute("vs.data.TableAdapter"~dulla^@204~    System.ComponentModel.DataObjectMe~dulla^@204~ (System.ComponentModel.DataObjectMeth~dulla^@204~ , true)>  _
        Public Overloads~dulla^@204~ Function Insert(ByVal PartNo As Strin~dulla^@204~ ription As String, ByVal Quantity As ~dulla^@204~ l UnitPrice As System.Nullable(Of Dec~dulla^@204~ Amount As System.Nullable(Of Decimal)~dulla^@204~ fSale As System.Nullable(Of Date), By~dulla^@204~ InvoiceNo As String, ByVal CreditSale~dulla^@204~  String) As Integer
            If (~dulla^@204~ hing) Then
                Throw New~dulla^@204~ entNullException("PartNo")
         ~dulla^@204~             Me.Adapter.InsertCommand.~dulla^@204~ .Value = CType(PartNo,String)
      ~dulla^@204~ 
            If (Description Is Nothi~dulla^@204~              Me.Adapter.InsertCommand~dulla^@204~ ).Value = System.DBNull.Value
      ~dulla^@204~                Me.Adapter.InsertComma~dulla^@204~ (1).Value = CType(Description,String)~dulla^@204~  End If
            Me.Adapter.Inser~dulla^@204~ meters(2).Value = CType(Quantity,Inte~dulla^@204~      If (UnitPrice.HasValue = true) T~dulla^@204~         Me.Adapter.InsertCommand.Para~dulla^@204~ ue = CType(UnitPrice.Value,Decimal)
~dulla^@204~ lse
                Me.Adapter.Inser~dulla^@204~ meters(3).Value = System.DBNull.Value~dulla^@204~  End If
            If (Amount.HasVa~dulla^@204~ hen
                Me.Adapter.Inser~dulla^@204~ meters(4).Value = CType(Amount.Value,~dulla^@204~          Else
                Me.Ada~dulla^@204~ mmand.Parameters(4).Value = System.DB~dulla^@204~            End If
            If (Da~dulla^@204~ alue = true) Then
                Me~dulla^@204~ rtCommand.Parameters(5).Value = CType~dulla^@204~ alue,Date)
            Else
       ~dulla^@204~ dapter.InsertCommand.Parameters(5).Va~dulla^@204~ DBNull.Value
            End If
   ~dulla^@204~ CashSalesInvoiceNo Is Nothing) Then
~dulla^@204~    Me.Adapter.InsertCommand.Parameter~dulla^@204~ System.DBNull.Value
            Else~dulla^@204~      Me.Adapter.InsertCommand.Paramet~dulla^@204~ = CType(CashSalesInvoiceNo,String)
 ~dulla^@204~ d If
            If (CreditSalesInvo~dulla^@204~ ing) Then
                Me.Adapter~dulla^@204~ d.Parameters(7).Value = System.DBNull~dulla^@204~        Else
                Me.Adapt~dulla^@204~ and.Parameters(7).Value = CType(Credi~dulla^@204~ No,String)
            End If
     ~dulla^@204~ eviousConnectionState As System.Data.~dulla^@204~ te = Me.Adapter.InsertCommand.Connect~dulla^@204~           If ((Me.Adapter.InsertComma~dulla^@204~ .State And System.Data.ConnectionStat~dulla^@204~                        <> System.Data~dulla^@204~ ate.Open) Then
                Me.Ad~dulla^@204~ ommand.Connection.Open
            E~dulla^@204~       Try 
                Dim retur~dulla^@204~ eger = Me.Adapter.InsertCommand.Execu~dulla^@204~                Return returnValue
  ~dulla^@204~ ally
                If (previousCon~dulla^@204~ = System.Data.ConnectionState.Closed)~dulla^@204~               Me.Adapter.InsertComman~dulla^@204~ Close
                End If
      ~dulla^@204~ 
        End Function
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~        System.ComponentModel.Design.H~dulla^@204~ ribute("vs.data.TableAdapter"),  _
 ~dulla^@204~ m.ComponentModel.DataObjectMethodAttr~dulla^@204~ ComponentModel.DataObjectMethodType.U~dulla^@204~   _
        Public Overloads Overrid~dulla^@204~  Update( _
                    ByVal~dulla^@204~ ring,  _
                    ByVal D~dulla^@204~  String,  _
                    ByVa~dulla^@204~  Integer,  _
                    ByV~dulla^@204~ As System.Nullable(Of Decimal),  _
 ~dulla^@204~       ByVal Amount As System.Nullable~dulla^@204~   _
                    ByVal DateOf~dulla^@204~ m.Nullable(Of Date),  _
            ~dulla^@204~  CashSalesInvoiceNo As String,  _
  ~dulla^@204~      ByVal CreditSalesInvoiceNo As St~dulla^@204~                  ByVal Original_PartN~dulla^@204~  _
                    ByVal Origina~dulla^@204~  As String,  _
                    B~dulla^@204~ _Quantity As Integer,  _
           ~dulla^@204~ l Original_UnitPrice As System.Nullab~dulla^@204~ ),  _
                    ByVal Orig~dulla^@204~ s System.Nullable(Of Decimal),  _
  ~dulla^@204~      ByVal Original_DateOfSale As Sys~dulla^@204~ Of Date),  _
                    ByV~dulla^@204~ ashSalesInvoiceNo As String,  _
    ~dulla^@204~    ByVal Original_CreditSalesInvoiceNo As String) As Integer
            If (P~dulla^@204~ ing) Then
                Throw New ~dulla^@204~ ntNullException("PartNo")
          ~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ Value = CType(PartNo,String)
       ~dulla^@204~             If (Description Is Nothin~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ .Value = System.DBNull.Value
       ~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 1).Value = CType(Description,String)~dulla^@204~ End If
            Me.Adapter.Update~dulla^@204~ eters(2).Value = CType(Quantity,Integ~dulla^@204~     If (UnitPrice.HasValue = true) Th~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ e = CType(UnitPrice.Value,Decimal)
 ~dulla^@204~ se
                Me.Adapter.Update~dulla^@204~ eters(3).Value = System.DBNull.Value~dulla^@204~ End If
            If (Amount.HasVal~dulla^@204~ en
                Me.Adapter.Update~dulla^@204~ eters(4).Value = CType(Amount.Value,D~dulla^@204~         Else
                Me.Adap~dulla^@204~ mand.Parameters(4).Value = System.DBN~dulla^@204~           End If
            If (Dat~dulla^@204~ lue = true) Then
                Me.~dulla^@204~ eCommand.Parameters(5).Value = CType(~dulla^@204~ lue,Date)
            Else
        ~dulla^@204~ apter.UpdateCommand.Parameters(5).Val~dulla^@204~ BNull.Value
            End If
    ~dulla^@204~ ashSalesInvoiceNo Is Nothing) Then
 ~dulla^@204~   Me.Adapter.UpdateCommand.Parameters~dulla^@204~ ystem.DBNull.Value
            Else~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~  CType(CashSalesInvoiceNo,String)
  ~dulla^@204~  If
            If (CreditSalesInvoi~dulla^@204~ ng) Then
                Me.Adapter.~dulla^@204~ .Parameters(7).Value = System.DBNull.~dulla^@204~       Else
                Me.Adapte~dulla^@204~ nd.Parameters(7).Value = CType(Credit~dulla^@204~ o,String)
            End If
      ~dulla^@204~ ginal_PartNo Is Nothing) Then
      ~dulla^@204~ ow New System.ArgumentNullException("~dulla^@204~ No")
            Else
             ~dulla^@204~ .UpdateCommand.Parameters(8).Value = ~dulla^@204~ l_PartNo,String)
            End If~dulla^@204~ If (Original_Description Is Nothing) ~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ lue = System.DBNull.Value
          ~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ Value = CType(Original_Description,St~dulla^@204~       End If
            Me.Adapter.~dulla^@204~ .Parameters(10).Value = CType(Origina~dulla^@204~ teger)
            If (Original_Unit~dulla^@204~ e = true) Then
                Me.Ad~dulla^@204~ ommand.Parameters(11).Value = CType(0~dulla^@204~              Me.Adapter.UpdateCommand~dulla^@204~ 2).Value = CType(Original_UnitPrice.V~dulla^@204~ 
            Else
                M~dulla^@204~ ateCommand.Parameters(11).Value = CTy~dulla^@204~ 
                Me.Adapter.UpdateCom~dulla^@204~ rs(12).Value = System.DBNull.Value
 ~dulla^@204~ d If
            If (Original_Amount~dulla^@204~ rue) Then
                Me.Adapter~dulla^@204~ d.Parameters(13).Value = CType(0,Obje~dulla^@204~         Me.Adapter.UpdateCommand.Para~dulla^@204~ lue = CType(Original_Amount.Value,Dec~dulla^@204~       Else
                Me.Adapte~dulla^@204~ nd.Parameters(13).Value = CType(1,Obj~dulla^@204~          Me.Adapter.UpdateCommand.Par~dulla^@204~ alue = System.DBNull.Value
         ~dulla^@204~           If (Original_DateOfSale.Has~dulla^@204~  Then
                Me.Adapter.Upd~dulla^@204~ rameters(15).Value = CType(0,Object)~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~ = CType(Original_DateOfSale.Value,Dat~dulla^@204~    Else
                Me.Adapter.U~dulla^@204~ Parameters(15).Value = CType(1,Object~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~ e = System.DBNull.Value
            ~dulla^@204~        If (Original_CashSalesInvoiceN~dulla^@204~  Then
                Me.Adapter.Upd~dulla^@204~ rameters(17).Value = CType(1,Object)~dulla^@204~     Me.Adapter.UpdateCommand.Paramete~dulla^@204~ = System.DBNull.Value
            El~dulla^@204~        Me.Adapter.UpdateCommand.Param~dulla^@204~ ue = CType(0,Object)
               ~dulla^@204~ pdateCommand.Parameters(18).Value = C~dulla^@204~ _CashSalesInvoiceNo,String)
        ~dulla^@204~            If (Original_CreditSalesIn~dulla^@204~ thing) Then
                Me.Adapt~dulla^@204~ and.Parameters(19).Value = CType(1,Ob~dulla^@204~           Me.Adapter.UpdateCommand.Pa~dulla^@204~ Value = System.DBNull.Value
        ~dulla^@204~              Me.Adapter.UpdateCommand~dulla^@204~ 9).Value = CType(0,Object)
         ~dulla^@204~ pter.UpdateCommand.Parameters(20).Val~dulla^@204~ iginal_CreditSalesInvoiceNo,String)
~dulla^@204~ nd If
            Dim previousConnec~dulla^@204~ System.Data.ConnectionState = Me.Adap~dulla^@204~ mand.Connection.State
            If~dulla^@204~ .UpdateCommand.Connection.State And S~dulla^@204~ nnectionState.Open)  _
             ~dulla^@204~  System.Data.ConnectionState.Open) Th~dulla^@204~        Me.Adapter.UpdateCommand.Conne~dulla^@204~            End If
            Try 
~dulla^@204~    Dim returnValue As Integer = Me.Ad~dulla^@204~ ommand.ExecuteNonQuery
             ~dulla^@204~ urnValue
            Finally
      ~dulla^@204~ (previousConnectionState = System.Dat~dulla^@204~ tate.Closed) Then
                  ~dulla^@204~ UpdateCommand.Connection.Close
     ~dulla^@204~ d If
            End Try
        End Function
    End Class
End Namespace
