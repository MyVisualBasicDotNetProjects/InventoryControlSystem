'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.312
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("PurchaseInfoDataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class PurchaseInfoDataSet
    Inherits System.Data.DataSet
    
    Private tablePurchaseInfo As PurchaseInfoDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PurchaseInfo")) Is Nothing) Then
                MyBase.Tables.Add(New PurchaseInfoDataTable(ds.Tables("PurchaseInfo")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PurchaseInfo() As PurchaseInfoDataTable
        Get
            Return Me.tablePurchaseInfo
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As PurchaseInfoDataSet = CType(MyBase.Clone,PurchaseInfoDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PurchaseInfo")) Is Nothing) Then
                MyBase.Tables.Add(New PurchaseInfoDataTable(ds.Tables("PurchaseInfo")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePurchaseInfo = CType(MyBase.Tables("PurchaseInfo"),PurchaseInfoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePurchaseInfo) Is Nothing) Then
   ~dulla^@204~ ~dulla^@204~ aseInfo.InitVars
            End If~dulla^@204~ If
    End Sub
    
    <System.Di~dulla^@204~ uggerNonUserCodeAttribute()>  _
    ~dulla^@204~ nitClass()
        Me.DataSetName = ~dulla^@204~ DataSet"
        Me.Prefix = ""
   ~dulla^@204~ pace = "http://tempuri.org/PurchaseIn~dulla^@204~ "
        Me.EnforceConstraints = tr~dulla^@204~ e.SchemaSerializationMode = System.Da~dulla^@204~ alizationMode.IncludeSchema
        ~dulla^@204~ aseInfo = New PurchaseInfoDataTable
~dulla^@204~ e.Tables.Add(Me.tablePurchaseInfo)
 ~dulla^@204~    
    <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
    Private Function S~dulla^@204~ ePurchaseInfo() As Boolean
        R~dulla^@204~     End Function
    
    <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ SchemaChanged(ByVal sender As Object,~dulla^@204~ ystem.ComponentModel.CollectionChange~dulla^@204~        If (e.Action = System.Componen~dulla^@204~ tionChangeAction.Remove) Then
      ~dulla^@204~ Vars
        End If
    End Sub
  ~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
    Public Shared Function GetTypedD~dulla^@204~ ByVal xs As System.Xml.Schema.XmlSche~dulla^@204~ tem.Xml.Schema.XmlSchemaComplexType
~dulla^@204~ s As PurchaseInfoDataSet = New Purcha~dulla^@204~ 
        Dim type As System.Xml.Sche~dulla^@204~ omplexType = New System.Xml.Schema.Xm~dulla^@204~ xType
        Dim sequence As System~dulla^@204~ mlSchemaSequence = New System.Xml.Sch~dulla^@204~ Sequence
        xs.Add(ds.GetSchema~dulla^@204~ 
        Dim any As System.Xml.Schem~dulla^@204~ y = New System.Xml.Schema.XmlSchemaAn~dulla^@204~ y.Namespace = ds.Namespace
        s~dulla^@204~ .Add(any)
        type.Particle = se~dulla^@204~    Return type
    End Function
   ~dulla^@204~  Delegate Sub PurchaseInfoRowChangeEv~dulla^@204~ Val sender As Object, ByVal e As Purc~dulla^@204~ angeEvent)
    
    <System.CodeDom~dulla^@204~ eratedCodeAttribute("System.Data.Desi~dulla^@204~ etGenerator", "2.0.0.0"),  _
     Sy~dulla^@204~ able(),  _
     System.Xml.Serializa~dulla^@204~ aProviderAttribute("GetTypedTableSche~dulla^@204~  Partial Public Class PurchaseInfoDat~dulla^@204~    Inherits System.Data.DataTable
  ~dulla^@204~ nts System.Collections.IEnumerable
 ~dulla^@204~     Private columnPartNo As System.Da~dulla^@204~ 
        
        Private columnDes~dulla^@204~ ystem.Data.DataColumn
        
    ~dulla^@204~ olumnPrice As System.Data.DataColumn~dulla^@204~       Private columnBrand As System.D~dulla^@204~ n
        
        Private columnOr~dulla^@204~ m.Data.DataColumn
        
        ~dulla^@204~ nNetWeight As System.Data.DataColumn~dulla^@204~       Private columnQuantity As Syste~dulla^@204~ lumn
        
        Private colum~dulla^@204~ stem.Data.DataColumn
        
     ~dulla^@204~ lumnSupplierID As System.Data.DataCol~dulla^@204~ 
        Private columnInvoiceNo As ~dulla^@204~ ataColumn
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Sub New()
            MyBase.New
  ~dulla^@204~ TableName = "PurchaseInfo"
         ~dulla^@204~ it
            Me.InitClass
       ~dulla^@204~ it
        End Sub
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Friend Sub New(ByVal table As Syst~dulla^@204~ able)
            MyBase.New
      ~dulla^@204~ eName = table.TableName
            ~dulla^@204~ eSensitive <> table.DataSet.CaseSensi~dulla^@204~                Me.CaseSensitive = tab~dulla^@204~ ive
            End If
            ~dulla^@204~ ale.ToString <> table.DataSet.Locale.~dulla^@204~ n
                Me.Locale = table.~dulla^@204~        End If
            If (table.~dulla^@204~ table.DataSet.Namespace) Then
      ~dulla^@204~ Namespace = table.Namespace
        ~dulla^@204~            Me.Prefix = table.Prefix
~dulla^@204~ e.MinimumCapacity = table.MinimumCapa~dulla^@204~  End Sub
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ d Sub New(ByVal info As System.Runtim~dulla^@204~ on.SerializationInfo, ByVal context A~dulla^@204~ ime.Serialization.StreamingContext)
~dulla^@204~ yBase.New(info, context)
           ~dulla^@204~ 
        End Sub
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public ReadOnly Property PartNoColumn~dulla^@204~ Data.DataColumn
            Get
   ~dulla^@204~ Return Me.columnPartNo
            E~dulla^@204~    End Property
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic ReadOnly Property DescriptionCo~dulla^@204~ tem.Data.DataColumn
            Get~dulla^@204~     Return Me.columnDescription
    ~dulla^@204~ et
        End Property
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public ReadOnly Property Pric~dulla^@204~ System.Data.DataColumn
            G~dulla^@204~        Return Me.columnPrice
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public ReadOnly Property BrandCo~dulla^@204~ tem.Data.DataColumn
            Get~dulla^@204~     Return Me.columnBrand
          ~dulla^@204~       End Property
        
       ~dulla^@204~ nostics.DebuggerNonUserCodeAttribute(~dulla^@204~   Public ReadOnly Property OriginColu~dulla^@204~ m.Data.DataColumn
            Get
 ~dulla^@204~   Return Me.columnOrigin
           ~dulla^@204~      End Property
        
        ~dulla^@204~ ostics.DebuggerNonUserCodeAttribute()~dulla^@204~  Public ReadOnly Property NetWeightCo~dulla^@204~ tem.Data.DataColumn
            Get~dulla^@204~     Return Me.columnNetWeight
      ~dulla^@204~ 
        End Property
        
   ~dulla^@204~ Diagnostics.DebuggerNonUserCodeAttrib~dulla^@204~       Public ReadOnly Property Quanti~dulla^@204~  System.Data.DataColumn
            ~dulla^@204~         Return Me.columnQuantity
   ~dulla^@204~ Get
        End Property
        
~dulla^@204~ em.Diagnostics.DebuggerNonUserCodeAtt~dulla^@204~ 
        Public ReadOnly Property Amo~dulla^@204~ s System.Data.DataColumn
           ~dulla^@204~          Return Me.columnAmount
    ~dulla^@204~ et
        End Property
        
 ~dulla^@204~ m.Diagnostics.DebuggerNonUserCodeAttr~dulla^@204~         Public ReadOnly Property Supp~dulla^@204~ ) As System.Data.DataColumn
        ~dulla^@204~             Return Me.columnSupplierI~dulla^@204~   End Get
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public ReadOnly Proper~dulla^@204~ olumn() As System.Data.DataColumn
  ~dulla^@204~ 
                Return Me.columnInv~dulla^@204~        End Get
        End Property~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute(),  _
         System.Component~dulla^@204~ le(false)>  _
        Public ReadOnl~dulla^@204~ unt() As Integer
            Get
  ~dulla^@204~  Return Me.Rows.Count
            En~dulla^@204~   End Property
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Default ReadOnly Property Item(B~dulla^@204~  Integer) As PurchaseInfoRow
       ~dulla^@204~              Return CType(Me.Rows(ind~dulla^@204~ nfoRow)
            End Get
       ~dulla^@204~ 
        
        Public Event Purc~dulla^@204~ anging As PurchaseInfoRowChangeEventH~dulla^@204~    
        Public Event PurchaseInf~dulla^@204~ s PurchaseInfoRowChangeEventHandler
~dulla^@204~      Public Event PurchaseInfoRowDele~dulla^@204~ aseInfoRowChangeEventHandler
       ~dulla^@204~ blic Event PurchaseInfoRowDeleted As ~dulla^@204~ owChangeEventHandler
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Overloads Sub AddPurchaseI~dulla^@204~ row As PurchaseInfoRow)
            ~dulla^@204~ ow)
        End Sub
        
     ~dulla^@204~ agnostics.DebuggerNonUserCodeAttribut~dulla^@204~     Public Overloads Function AddPurc~dulla^@204~ yVal PartNo As String, ByVal Descript~dulla^@204~ , ByVal Price As Decimal, ByVal Brand As String, ByVal Origin As String, ByVal ~dulla^@204~ String, ByVal Quantity As String, ByV~dulla^@204~ Decimal, ByVal SupplierID As String, ~dulla^@204~ No As String) As PurchaseInfoRow
   ~dulla^@204~ rowPurchaseInfoRow As PurchaseInfoRow~dulla^@204~ ewRow,PurchaseInfoRow)
            r~dulla^@204~ oRow.ItemArray = New Object() {PartNo~dulla^@204~ , Price, Brand, Origin, NetWeight, Qu~dulla^@204~ t, SupplierID, InvoiceNo}
          ~dulla^@204~ (rowPurchaseInfoRow)
            Ret~dulla^@204~ seInfoRow
        End Function
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Function FindBy~dulla^@204~ No(ByVal PartNo As String, ByVal Invo~dulla^@204~ ng) As PurchaseInfoRow
            R~dulla^@204~ e.Rows.Find(New Object() {PartNo, Inv~dulla^@204~ haseInfoRow)
        End Function
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public Overridable ~dulla^@204~ numerator() As System.Collections.IEn~dulla^@204~ ements System.Collections.IEnumerable~dulla^@204~ r
            Return Me.Rows.GetEnum~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Overrides Function Clone() As S~dulla^@204~ taTable
            Dim cln As Purch~dulla^@204~ ble = CType(MyBase.Clone,PurchaseInfo~dulla^@204~            cln.InitVars
            ~dulla^@204~        End Function
        
      ~dulla^@204~ gnostics.DebuggerNonUserCodeAttribute~dulla^@204~    Protected Overrides Function Creat~dulla^@204~ s System.Data.DataTable
            ~dulla^@204~ rchaseInfoDataTable
        End Func~dulla^@204~  
        <System.Diagnostics.Debugg~dulla^@204~ Attribute()>  _
        Friend Sub I~dulla^@204~           Me.columnPartNo = MyBase.Co~dulla^@204~ ")
            Me.columnDescription ~dulla^@204~ mns("Description")
            Me.co~dulla^@204~ yBase.Columns("Price")
            M~dulla^@204~  = MyBase.Columns("Brand")
         ~dulla^@204~ rigin = MyBase.Columns("Origin")
   ~dulla^@204~ olumnNetWeight = MyBase.Columns("NetW~dulla^@204~         Me.columnQuantity = MyBase.Co~dulla^@204~ ty")
            Me.columnAmount = M~dulla^@204~ ("Amount")
            Me.columnSupp~dulla^@204~ se.Columns("SupplierID")
           ~dulla^@204~ oiceNo = MyBase.Columns("InvoiceNo")~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ nitClass()
            Me.columnPart~dulla^@204~ em.Data.DataColumn("PartNo", GetType(~dulla^@204~ ing, System.Data.MappingType.Element)~dulla^@204~  MyBase.Columns.Add(Me.columnPartNo)~dulla^@204~ Me.columnDescription = New System.Dat~dulla^@204~ "Description", GetType(String), Nothi~dulla^@204~ ta.MappingType.Element)
            ~dulla^@204~ s.Add(Me.columnDescription)
        ~dulla^@204~ Price = New System.Data.DataColumn("P~dulla^@204~ e(Decimal), Nothing, System.Data.Mapp~dulla^@204~ nt)
            MyBase.Columns.Add(M~dulla^@204~ )
            Me.columnBrand = New S~dulla^@204~ taColumn("Brand", GetType(String), No~dulla^@204~ .Data.MappingType.Element)
         ~dulla^@204~ umns.Add(Me.columnBrand)
           ~dulla^@204~ gin = New System.Data.DataColumn("Ori~dulla^@204~ (String), Nothing, System.Data.Mappin~dulla^@204~ )
            MyBase.Columns.Add(Me.~dulla^@204~ 
            Me.columnNetWeight = Ne~dulla^@204~ .DataColumn("NetWeight", GetType(Stri~dulla^@204~  System.Data.MappingType.Element)
  ~dulla^@204~ ase.Columns.Add(Me.columnNetWeight)
~dulla^@204~ e.columnQuantity = New System.Data.Da~dulla^@204~ ntity", GetType(String), Nothing, Sys~dulla^@204~ ingType.Element)
            MyBase.~dulla^@204~ e.columnQuantity)
            Me.col~dulla^@204~ ew System.Data.DataColumn("Amount", G~dulla^@204~ l), Nothing, System.Data.MappingType.~dulla^@204~          MyBase.Columns.Add(Me.column~dulla^@204~         Me.columnSupplierID = New Sys~dulla^@204~ Column("SupplierID", GetType(String),~dulla^@204~ tem.Data.MappingType.Element)
      ~dulla^@204~ Columns.Add(Me.columnSupplierID)
   ~dulla^@204~ olumnInvoiceNo = New System.Data.Data~dulla^@204~ ceNo", GetType(String), Nothing, Syst~dulla^@204~ ngType.Element)
            MyBase.C~dulla^@204~ .columnInvoiceNo)
            Me.Con~dulla^@204~ New System.Data.UniqueConstraint("Con~dulla^@204~ w System.Data.DataColumn() {Me.column~dulla^@204~ lumnInvoiceNo}, true))
            M~dulla^@204~ o.AllowDBNull = false
            Me~dulla^@204~ .MaxLength = 20
            Me.colum~dulla^@204~ AllowDBNull = false
            Me.c~dulla^@204~ ion.MaxLength = 20
            Me.co~dulla^@204~ Length = 10
            Me.columnOri~dulla^@204~  = 10
            Me.columnNetWeight~dulla^@204~ 10
            Me.columnQuantity.All~dulla^@204~ lse
            Me.columnQuantity.Ma~dulla^@204~ 
            Me.columnAmount.AllowDBN~dulla^@204~             Me.columnSupplierID.Allow~dulla^@204~ e
            Me.columnSupplierID.Ma~dulla^@204~ 
            Me.columnInvoiceNo.Allow~dulla^@204~ e
            Me.columnInvoiceNo.Max~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Function NewPurchaseInfoRow() A~dulla^@204~ oRow
            Return CType(Me.New~dulla^@204~ nfoRow)
        End Function
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Protected Overrides Func~dulla^@204~ omBuilder(ByVal builder As System.Dat~dulla^@204~ der) As System.Data.DataRow
        ~dulla^@204~ w PurchaseInfoRow(builder)
        E~dulla^@204~         
        <System.Diagnostics~dulla^@204~ serCodeAttribute()>  _
        Prote~dulla^@204~ s Function GetRowType() As System.Typ~dulla^@204~   Return GetType(PurchaseInfoRow)
  ~dulla^@204~ ction
        
        <System.Diag~dulla^@204~ gerNonUserCodeAttribute()>  _
      ~dulla^@204~ verrides Sub OnRowChanged(ByVal e As ~dulla^@204~ ataRowChangeEventArgs)
            M~dulla^@204~ anged(e)
            If (Not (Me.Pur~dulla^@204~ hangedEvent) Is Nothing) Then
      ~dulla^@204~ seEvent PurchaseInfoRowChanged(Me, Ne~dulla^@204~ oRowChangeEvent(CType(e.Row,PurchaseI~dulla^@204~ tion))
            End If
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Protected ~dulla^@204~  OnRowChanging(ByVal e As System.Data~dulla^@204~ eEventArgs)
            MyBase.OnRow~dulla^@204~             If (Not (Me.PurchaseInfoR~dulla^@204~ nt) Is Nothing) Then
               ~dulla^@204~ urchaseInfoRowChanging(Me, New Purcha~dulla^@204~ geEvent(CType(e.Row,PurchaseInfoRow),~dulla^@204~             End If
        End Sub
~dulla^@204~      <System.Diagnostics.DebuggerNonU~dulla^@204~ ute()>  _
        Protected Override~dulla^@204~ leted(ByVal e As System.Data.DataRowC~dulla^@204~ s)
            MyBase.OnRowDeleted(e~dulla^@204~   If (Not (Me.PurchaseInfoRowDeletedE~dulla^@204~ ing) Then
                RaiseEvent~dulla^@204~ RowDeleted(Me, New PurchaseInfoRowCha~dulla^@204~ e(e.Row,PurchaseInfoRow), e.Action))~dulla^@204~ End If
        End Sub
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Protected Overrides Sub OnRowD~dulla^@204~  e As System.Data.DataRowChangeEventA~dulla^@204~      MyBase.OnRowDeleting(e)
       ~dulla^@204~ (Me.PurchaseInfoRowDeletingEvent) Is ~dulla^@204~ 
                RaiseEvent Purchase~dulla^@204~ ng(Me, New PurchaseInfoRowChangeEvent~dulla^@204~ PurchaseInfoRow), e.Action))
       ~dulla^@204~         End Sub
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute()> ~dulla^@204~ ublic Sub RemovePurchaseInfoRow(ByVal~dulla^@204~ aseInfoRow)
            Me.Rows.Remo~dulla^@204~     End Sub
        
        <Syste~dulla^@204~ .DebuggerNonUserCodeAttribute()>  _
~dulla^@204~ c Shared Function GetTypedTableSchema~dulla^@204~ System.Xml.Schema.XmlSchemaSet) As Sy~dulla^@204~ ma.XmlSchemaComplexType
            ~dulla^@204~ ystem.Xml.Schema.XmlSchemaComplexType~dulla^@204~ .Xml.Schema.XmlSchemaComplexType
   ~dulla^@204~ sequence As System.Xml.Schema.XmlSche~dulla^@204~ New System.Xml.Schema.XmlSchemaSequence
            Dim ds As PurchaseInfoData~dulla^@204~ chaseInfoDataSet
            xs.Add(~dulla^@204~ erializable)
            Dim any1 As~dulla^@204~ chema.XmlSchemaAny = New System.Xml.S~dulla^@204~ maAny
            any1.Namespace = "~dulla^@204~ .org/2001/XMLSchema"
            any~dulla^@204~  New Decimal(0)
            any1.Max~dulla^@204~ mal.MaxValue
            any1.Proces~dulla^@204~ ystem.Xml.Schema.XmlSchemaContentProc~dulla^@204~            sequence.Items.Add(any1)
~dulla^@204~ im any2 As System.Xml.Schema.XmlSchem~dulla^@204~ stem.Xml.Schema.XmlSchemaAny
       ~dulla^@204~ espace = "urn:schemas-microsoft-com:x~dulla^@204~ 1"
            any2.MinOccurs = New ~dulla^@204~            any2.ProcessContents = Sys~dulla^@204~ a.XmlSchemaContentProcessing.Lax
   ~dulla^@204~ ence.Items.Add(any2)
            Dim~dulla^@204~ s System.Xml.Schema.XmlSchemaAttribut~dulla^@204~ m.Xml.Schema.XmlSchemaAttribute
    ~dulla^@204~ bute1.Name = "namespace"
           ~dulla^@204~ ixedValue = ds.Namespace
           ~dulla^@204~ tes.Add(attribute1)
            Dim ~dulla^@204~  System.Xml.Schema.XmlSchemaAttribute~dulla^@204~ .Xml.Schema.XmlSchemaAttribute
     ~dulla^@204~ ute2.Name = "tableTypeName"
        ~dulla^@204~ 2.FixedValue = "PurchaseInfoDataTable~dulla^@204~   type.Attributes.Add(attribute2)
  ~dulla^@204~ e.Particle = sequence
            Re~dulla^@204~       End Function
    End Class
  ~dulla^@204~ em.CodeDom.Compiler.GeneratedCodeAttr~dulla^@204~ .Data.Design.TypedDataSetGenerator", ~dulla^@204~ _
    Partial Public Class PurchaseI~dulla^@204~    Inherits System.Data.DataRow
    ~dulla^@204~  Private tablePurchaseInfo As Purchas~dulla^@204~ e
        
        <System.Diagnost~dulla^@204~ onUserCodeAttribute()>  _
        Fr~dulla^@204~ ByVal rb As System.Data.DataRowBuilde~dulla^@204~    MyBase.New(rb)
            Me.tab~dulla^@204~ o = CType(Me.Table,PurchaseInfoDataTa~dulla^@204~  End Sub
        
        <System.D~dulla^@204~ buggerNonUserCodeAttribute()>  _
   ~dulla^@204~ roperty PartNo() As String
         ~dulla^@204~            Return CType(Me(Me.tablePu~dulla^@204~ rtNoColumn),String)
            End ~dulla^@204~     Set
                Me(Me.tableP~dulla^@204~ artNoColumn) = value
            End~dulla^@204~  End Property
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ lic Property Description() As String~dulla^@204~ Get
                Return CType(Me(~dulla^@204~ aseInfo.DescriptionColumn),String)
 ~dulla^@204~ d Get
            Set
             ~dulla^@204~ ePurchaseInfo.DescriptionColumn) = va~dulla^@204~     End Set
        End Property
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Public Property Pric~dulla^@204~ l
            Get
                T~dulla^@204~             Return CType(Me(Me.tableP~dulla^@204~ riceColumn),Decimal)
               ~dulla^@204~ ystem.InvalidCastException
         ~dulla^@204~ row New System.Data.StrongTypingExcep~dulla^@204~ ue for column 'Price' in table 'Purch~dulla^@204~ BNull.", e)
                End Try~dulla^@204~ End Get
            Set
           ~dulla^@204~ blePurchaseInfo.PriceColumn) = value~dulla^@204~ End Set
        End Property
      ~dulla^@204~ System.Diagnostics.DebuggerNonUserCod~dulla^@204~   _
        Public Property Brand() ~dulla^@204~           Get
                Try 
~dulla^@204~        Return CType(Me(Me.tablePurcha~dulla^@204~ olumn),String)
                Catch~dulla^@204~ InvalidCastException
               ~dulla^@204~ w System.Data.StrongTypingException("~dulla^@204~  column 'Brand' in table 'PurchaseInf~dulla^@204~ ", e)
                End Try
     ~dulla^@204~ t
            Set
                M~dulla^@204~ chaseInfo.BrandColumn) = value
     ~dulla^@204~ t
        End Property
        
  ~dulla^@204~ .Diagnostics.DebuggerNonUserCodeAttri~dulla^@204~        Public Property Origin() As St~dulla^@204~      Get
                Try 
     ~dulla^@204~   Return CType(Me(Me.tablePurchaseInf~dulla^@204~ n),String)
                Catch e A~dulla^@204~ lidCastException
                   ~dulla^@204~ stem.Data.StrongTypingException("The ~dulla^@204~ umn 'Origin' in table 'PurchaseInfo' ~dulla^@204~ e)
                End Try
        ~dulla^@204~             Set
                Me(M~dulla^@204~ seInfo.OriginColumn) = value
       ~dulla^@204~ 
        End Property
        
    ~dulla^@204~ iagnostics.DebuggerNonUserCodeAttribu~dulla^@204~      Public Property NetWeight() As S~dulla^@204~       Get
                Try 
    ~dulla^@204~    Return CType(Me(Me.tablePurchaseIn~dulla^@204~ olumn),String)
                Catch~dulla^@204~ InvalidCastException
               ~dulla^@204~ w System.Data.StrongTypingException("~dulla^@204~  column 'NetWeight' in table 'Purchas~dulla^@204~ ull.", e)
                End Try
 ~dulla^@204~ d Get
            Set
             ~dulla^@204~ ePurchaseInfo.NetWeightColumn) = valu~dulla^@204~   End Set
        End Property
    ~dulla^@204~  <System.Diagnostics.DebuggerNonUserC~dulla^@204~ )>  _
        Public Property Quanti~dulla^@204~ g
            Get
                R~dulla^@204~ e(Me.tablePurchaseInfo.QuantityColumn~dulla^@204~           End Get
            Set
 ~dulla^@204~   Me(Me.tablePurchaseInfo.QuantityCol~dulla^@204~ 
            End Set
        End Pro~dulla^@204~   
        <System.Diagnostics.Debug~dulla^@204~ eAttribute()>  _
        Public Prop~dulla^@204~  As Decimal
            Get
       ~dulla^@204~ rn CType(Me(Me.tablePurchaseInfo.Amou~dulla^@204~ imal)
            End Get
         ~dulla^@204~            Me(Me.tablePurchaseInfo.Am~dulla^@204~  value
            End Set
        ~dulla^@204~ 
        
        <System.Diagnostic~dulla^@204~ UserCodeAttribute()>  _
        Publ~dulla^@204~ upplierID() As String
            Ge~dulla^@204~       Return CType(Me(Me.tablePurchas~dulla^@204~ rIDColumn),String)
            End G~dulla^@204~    Set
                Me(Me.tablePu~dulla^@204~ pplierIDColumn) = value
            ~dulla^@204~     End Property
        
        <~dulla^@204~ stics.DebuggerNonUserCodeAttribute()>~dulla^@204~ Public Property InvoiceNo() As String~dulla^@204~  Get
                Return CType(Me~dulla^@204~ haseInfo.InvoiceNoColumn),String)
  ~dulla^@204~  Get
            Set
              ~dulla^@204~ PurchaseInfo.InvoiceNoColumn) = value~dulla^@204~  End Set
        End Property
     ~dulla^@204~ <System.Diagnostics.DebuggerNonUserCo~dulla^@204~ >  _
        Public Function IsPrice~dulla^@204~ lean
            Return Me.IsNull(Me~dulla^@204~ eInfo.PriceColumn)
        End Funct~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Sub Se~dulla^@204~ 
            Me(Me.tablePurchaseInfo.~dulla^@204~ = System.Convert.DBNull
        End ~dulla^@204~ 
        <System.Diagnostics.Debugge~dulla^@204~ ttribute()>  _
        Public Functi~dulla^@204~ l() As Boolean
            Return Me~dulla^@204~ blePurchaseInfo.BrandColumn)
       ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ andNull()
            Me(Me.tablePur~dulla^@204~ ndColumn) = System.Convert.DBNull
  ~dulla^@204~ 
        
        <System.Diagnosti~dulla^@204~ nUserCodeAttribute()>  _
        Pub~dulla^@204~ IsOriginNull() As Boolean
          ~dulla^@204~ sNull(Me.tablePurchaseInfo.OriginColu~dulla^@204~ End Function
        
        <Syst~dulla^@204~ s.DebuggerNonUserCodeAttribute()>  _~dulla^@204~ ic Sub SetOriginNull()
            M~dulla^@204~ chaseInfo.OriginColumn) = System.Conv~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic Function IsNetWeightNull() As Bo~dulla^@204~       Return Me.IsNull(Me.tablePurcha~dulla^@204~ ghtColumn)
        End Function
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Public Sub SetNetWeig~dulla^@204~          Me(Me.tablePurchaseInfo.NetW~dulla^@204~ = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Code~dulla^@204~ GeneratedCodeAttribute("System.Data.D~dulla^@204~ taSetGenerator", "2.0.0.0")>  _
    ~dulla^@204~ PurchaseInfoRowChangeEvent
        I~dulla^@204~ m.EventArgs
        
        Privat~dulla^@204~  PurchaseInfoRow
        
        P~dulla^@204~ ction As System.Data.DataRowAction
 ~dulla^@204~     <System.Diagnostics.DebuggerNonUs~dulla^@204~ te()>  _
        Public Sub New(ByVa~dulla^@204~ haseInfoRow, ByVal action As System.D~dulla^@204~ tion)
            MyBase.New
      ~dulla^@204~ tRow = row
            Me.eventActio~dulla^@204~        End Sub
        
        <Sy~dulla^@204~ ics.DebuggerNonUserCodeAttribute()>  ~dulla^@204~ blic ReadOnly Property Row() As Purch~dulla^@204~            Get
                Retur~dulla^@204~ 
            End Get
        End Pr~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute()>  _
        Public Rea~dulla^@204~ y Action() As System.Data.DataRowActi~dulla^@204~    Get
                Return Me.eve~dulla^@204~          End Get
        End Propert~dulla^@204~ ass
End Class

Namespace PurchaseI~dulla^@204~ leAdapters
    
    <System.CodeDom~dulla^@204~ eratedCodeAttribute("System.Data.Desi~dulla^@204~ etGenerator", "2.0.0.0"),  _
     Sy~dulla^@204~ tModel.DesignerCategoryAttribute("cod~dulla^@204~  System.ComponentModel.ToolboxItem(tr~dulla^@204~  System.ComponentModel.DataObjectAttr~dulla^@204~  _
     System.ComponentModel.Design~dulla^@204~ Microsoft.VSDesigner.DataSource.Desig~dulla^@204~ rDesigner, Microsoft.VSDesigner"& _ ~dulla^@204~ ersion=8.0.0.0, Culture=neutral, Publ~dulla^@204~ 3f5f7f11d50a3a"),  _
     System.Com~dulla^@204~ esign.HelpKeywordAttribute("vs.data.T~dulla^@204~ >  _
    Partial Public Class Purcha~dulla^@204~ apter
        Inherits System.Compon~dulla^@204~ onent
        
        Private With~dulla^@204~ er As System.Data.SqlClient.SqlDataAd~dulla^@204~   
        Private _connection As Sy~dulla^@204~ Client.SqlConnection
        
     ~dulla^@204~ ommandCollection() As System.Data.Sql~dulla^@204~ mand
        
        Private _clea~dulla^@204~ s Boolean
        
        <System.~dulla^@204~ ebuggerNonUserCodeAttribute()>  _
  ~dulla^@204~ Sub New()
            MyBase.New
  ~dulla^@204~ ClearBeforeFill = true
        End S~dulla^@204~ 
        <System.Diagnostics.Debugger~dulla^@204~ tribute()>  _
        Private ReadOn~dulla^@204~ dapter() As System.Data.SqlClient.Sql~dulla^@204~             Get
                If (~dulla^@204~ s Nothing) Then
                    ~dulla^@204~ r
                End If
          ~dulla^@204~ Me._adapter
            End Get
   ~dulla^@204~ erty
        
        <System.Diagn~dulla^@204~ erNonUserCodeAttribute()>  _
       ~dulla^@204~ rty Connection() As System.Data.SqlCl~dulla^@204~ ction
            Get
             ~dulla^@204~ nnection Is Nothing) Then
          ~dulla^@204~ InitConnection
                End I~dulla^@204~       Return Me._connection
        ~dulla^@204~             Set
                Me._~dulla^@204~ value
                If (Not (Me.Ad~dulla^@204~ ommand) Is Nothing) Then
           ~dulla^@204~ dapter.InsertCommand.Connection = val~dulla^@204~        End If
                If (No~dulla^@204~ .DeleteCommand) Is Nothing) Then
   ~dulla^@204~     Me.Adapter.DeleteCommand.Connecti~dulla^@204~                End If
              ~dulla^@204~ .Adapter.UpdateCommand) Is Nothing) T~dulla^@204~             Me.Adapter.UpdateCommand.~dulla^@204~ value
                End If
      ~dulla^@204~  i As Integer = 0
                Do~dulla^@204~ e.CommandCollection.Length)
        ~dulla^@204~ f (Not (Me.CommandCollection(i)) Is N~dulla^@204~ 
                        CType(Me.Com~dulla^@204~ n(i),System.Data.SqlClient.SqlCommand~dulla^@204~ = value
                    End If
~dulla^@204~        i = (i + 1)
                L~dulla^@204~     End Set
        End Property
  ~dulla^@204~    <System.Diagnostics.DebuggerNonUse~dulla^@204~ e()>  _
        Protected ReadOnly P~dulla^@204~ ndCollection() As System.Data.SqlClie~dulla^@204~ ()
            Get
                ~dulla^@204~ ndCollection Is Nothing) Then
      ~dulla^@204~  Me.InitCommandCollection
          ~dulla^@204~ 
                Return Me._commandCo~dulla^@204~          End Get
        End Propert~dulla^@204~         <System.Diagnostics.DebuggerN~dulla^@204~ ribute()>  _
        Public Property~dulla^@204~ ill() As Boolean
            Get
  ~dulla^@204~  Return Me._clearBeforeFill
        ~dulla^@204~             Set
                Me._~dulla^@204~ ll = value
            End Set
    ~dulla^@204~ rty
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ nitAdapter()
            Me._adapter~dulla^@204~ .Data.SqlClient.SqlDataAdapter
     ~dulla^@204~ bleMapping As System.Data.Common.Data~dulla^@204~ = New System.Data.Common.DataTableMap~dulla^@204~      tableMapping.SourceTable = "Tabl~dulla^@204~    tableMapping.DataSetTable = "Purch~dulla^@204~          tableMapping.ColumnMappings.~dulla^@204~  "PartNo")
            tableMapping.~dulla^@204~ s.Add("Description", "Description")
~dulla^@204~ ableMapping.ColumnMappings.Add("Price~dulla^@204~             tableMapping.ColumnMappin~dulla^@204~ ", "Brand")
            tableMapping~dulla^@204~ gs.Add("Origin", "Origin")
         ~dulla^@204~ ng.ColumnMappings.Add("NetWeight", "N~dulla^@204~            tableMapping.ColumnMapping~dulla^@204~ ty", "Quantity")
            tableMa~dulla^@204~ appings.Add("Amount", "Amount")
    ~dulla^@204~ Mapping.ColumnMappings.Add("SupplierI~dulla^@204~ ID")
            tableMapping.Column~dulla^@204~ "InvoiceNo", "InvoiceNo")
          ~dulla^@204~ .TableMappings.Add(tableMapping)
   ~dulla^@204~ adapter.DeleteCommand = New System.Da~dulla^@204~ SqlCommand
            Me._adapter.D~dulla^@204~ Connection = Me.Connection
         ~dulla^@204~ r.DeleteCommand.CommandText = "DELETE~dulla^@204~ PurchaseInfo] WHERE (([PartNo] = @Ori~dulla^@204~  AND ([Descr"& _ 
                "i~dulla^@204~ ginal_Description) AND ((@IsNull_Pric~dulla^@204~ ice] IS NULL) OR"& _ 
              ~dulla^@204~ = @Original_Price)) AND ((@IsNull_Bra~dulla^@204~ rand] IS NULL) OR (["& _ 
          ~dulla^@204~  = @Original_Brand)) AND ((@IsNull_Or~dulla^@204~ [Origin] IS NULL) OR ([O"& _ 
      ~dulla^@204~ gin] = @Original_Origin)) AND ((@IsNu~dulla^@204~ = 1 AND [NetWeight] IS NULL)"& _ 
  ~dulla^@204~  " OR ([NetWeight] = @Original_NetWei~dulla^@204~ uantity] = @Original_Quantity) A"& _ ~dulla^@204~      "ND ([Amount] = @Original_Amount~dulla^@204~ ierID] = @Original_SupplierID) AND ("~dulla^@204~          "[InvoiceNo] = @Original_Inv~dulla^@204~           Me._adapter.DeleteCommand.C~dulla^@204~ System.Data.CommandType.Text
       ~dulla^@204~ ter.DeleteCommand.Parameters.Add(New ~dulla^@204~ qlClient.SqlParameter("@Original_Part~dulla^@204~ ata.SqlDbType.NVarChar, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "PartNo", System~dulla^@204~ Version.Original, false, Nothing, "",~dulla^@204~           Me._adapter.DeleteCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~ _Description", System.Data.SqlDbType.~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~ tion", System.Data.DataRowVersion.Ori~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ leteCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@IsNull_Price", Syst~dulla^@204~ Type.Int, 0, System.Data.ParameterDir~dulla^@204~  0, 0, "Price", System.Data.DataRowVe~dulla^@204~ l, true, Nothing, "", "", ""))
     ~dulla^@204~ apter.DeleteCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@Original_Pr~dulla^@204~ Data.SqlDbType.Money, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "Price", System.Da~dulla^@204~ sion.Original, false, Nothing, "", ""~dulla^@204~        Me._adapter.DeleteCommand.Para~dulla^@204~ w System.Data.SqlClient.SqlParameter(~dulla^@204~ d", System.Data.SqlDbType.Int, 0, Sys~dulla^@204~ meterDirection.Input, 0, 0, "Brand", ~dulla^@204~ ataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.De~dulla^@204~ arameters.Add(New System.Data.SqlClie~dulla^@204~ er("@Original_Brand", System.Data.Sql~dulla^@204~ , 0, System.Data.ParameterDirection.I~dulla^@204~ Brand", System.Data.DataRowVersion.Or~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ eleteCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@IsNull_Origin", Sy~dulla^@204~ DbType.Int, 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "Origin", System.Data.DataRo~dulla^@204~ inal, true, Nothing, "", "", ""))
  ~dulla^@204~ _adapter.DeleteCommand.Parameters.Add~dulla^@204~ ata.SqlClient.SqlParameter("@Original~dulla^@204~ tem.Data.SqlDbType.[Char], 0, System.~dulla^@204~ rDirection.Input, 0, 0, "Origin", Sys~dulla^@204~ RowVersion.Original, false, Nothing, ~dulla^@204~ 
            Me._adapter.DeleteComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ l_NetWeight", System.Data.SqlDbType.I~dulla^@204~ .Data.ParameterDirection.Input, 0, 0,~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Original_NetWeight", Syste~dulla^@204~ ype.[Char], 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "NetWeight", System.Data.Dat~dulla^@204~ riginal, false, Nothing, "", "", ""))~dulla^@204~  Me._adapter.DeleteCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Orig~dulla^@204~ ", System.Data.SqlDbType.[Char], 0, S~dulla^@204~ rameterDirection.Input, 0, 0, "Quanti~dulla^@204~ ata.DataRowVersion.Original, false, N~dulla^@204~ ", ""))
            Me._adapter.Dele~dulla^@204~ ameters.Add(New System.Data.SqlClient~dulla^@204~ ("@Original_Amount", System.Data.SqlD~dulla^@204~ 0, System.Data.ParameterDirection.Inp~dulla^@204~ ount", System.Data.DataRowVersion.Ori~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ leteCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@Original_SupplierID~dulla^@204~ a.SqlDbType.NVarChar, 0, System.Data.~dulla^@204~ ction.Input, 0, 0, "SupplierID", Syst~dulla^@204~ owVersion.Original, false, Nothing, "~dulla^@204~             Me._adapter.DeleteCommand~dulla^@204~ dd(New System.Data.SqlClient.SqlParam~dulla^@204~ al_InvoiceNo", System.Data.SqlDbType.~dulla^@204~ System.Data.ParameterDirection.Input,~dulla^@204~ ceNo", System.Data.DataRowVersion.Ori~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ sertCommand = New System.Data.SqlClie~dulla^@204~ 
            Me._adapter.InsertComma~dulla^@204~  = Me.Connection
            Me._ada~dulla^@204~ mmand.CommandText = "INSERT INTO [dbo~dulla^@204~ fo] ([PartNo], [Description], [Price]~dulla^@204~ ri"& _ 
                "gin], [NetW~dulla^@204~ tity], [Amount], [SupplierID], [Invoi~dulla^@204~  (@Par"& _ 
                "tNo, @D~dulla^@204~ Price, @Brand, @Origin, @NetWeight, @~dulla^@204~ ount, @Sup"& _ 
                "pli~dulla^@204~ eNo);"&Global.Microsoft.VisualBasic.C~dulla^@204~ l.Microsoft.VisualBasic.ChrW(10)&"SEL~dulla^@204~ escription, Price, Brand, Origin, Net~dulla^@204~               "ht, Quantity, Amount, ~dulla^@204~ nvoiceNo FROM PurchaseInfo WHERE (Inv~dulla^@204~ 
                " @InvoiceNo) AND (~dulla^@204~ tNo)"
            Me._adapter.Insert~dulla^@204~ ndType = System.Data.CommandType.Text~dulla^@204~  Me._adapter.InsertCommand.Parameters~dulla^@204~ em.Data.SqlClient.SqlParameter("@Part~dulla^@204~ ata.SqlDbType.NVarChar, 0, System.Dat~dulla^@204~ rection.Input, 0, 0, "PartNo", System~dulla^@204~ Version.Current, false, Nothing, "", ~dulla^@204~          Me._adapter.InsertCommand.Pa~dulla^@204~ New System.Data.SqlClient.SqlParamete~dulla^@204~ on", System.Data.SqlDbType.[Char], 0,~dulla^@204~ ParameterDirection.Input, 0, 0, "Desc~dulla^@204~ tem.Data.DataRowVersion.Current, fals~dulla^@204~ ", "", ""))
            Me._adapter.~dulla^@204~ .Parameters.Add(New System.Data.SqlCl~dulla^@204~ eter("@Price", System.Data.SqlDbType.~dulla^@204~ tem.Data.ParameterDirection.Input, 0,~dulla^@204~ System.Data.DataRowVersion.Current, f~dulla^@204~ , "", "", ""))
            Me._adapt~dulla^@204~ and.Parameters.Add(New System.Data.Sq~dulla^@204~ rameter("@Brand", System.Data.SqlDbTy~dulla^@204~  System.Data.ParameterDirection.Input~dulla^@204~ d", System.Data.DataRowVersion.Curren~dulla^@204~ hing, "", "", ""))
            Me._a~dulla^@204~ Command.Parameters.Add(New System.Dat~dulla^@204~ qlParameter("@Origin", System.Data.Sq~dulla^@204~ ], 0, System.Data.ParameterDirection.~dulla^@204~ "Origin", System.Data.DataRowVersion.~dulla^@204~ e, Nothing, "", "", ""))
           ~dulla^@204~ InsertCommand.Parameters.Add(New Syst~dulla^@204~ ient.SqlParameter("@NetWeight", Syste~dulla^@204~ ype.[Char], 0, System.Data.ParameterD~dulla^@204~ t, 0, 0, "NetWeight", System.Data.Dat~dulla^@204~ urrent, false, Nothing, "", "", ""))~dulla^@204~ Me._adapter.InsertCommand.Parameters.~dulla^@204~ m.Data.SqlClient.SqlParameter("@Quant~dulla^@204~ Data.SqlDbType.[Char], 0, System.Data~dulla^@204~ ection.Input, 0, 0, "Quantity", Syste~dulla^@204~ wVersion.Current, false, Nothing, "",~dulla^@204~           Me._adapter.InsertCommand.P~dulla^@204~ (New System.Data.SqlClient.SqlParamet~dulla^@204~  System.Data.SqlDbType.Money, 0, Syst~dulla^@204~ eterDirection.Input, 0, 0, "Amount", ~dulla^@204~ ataRowVersion.Current, false, Nothing~dulla^@204~ )
            Me._adapter.InsertComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlPa~dulla^@204~ plierID", System.Data.SqlDbType.NVarC~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ ", System.Data.DataRowVersion.Current~dulla^@204~ ing, "", "", ""))
            Me._ad~dulla^@204~ ommand.Parameters.Add(New System.Data~dulla^@204~ lParameter("@InvoiceNo", System.Data.~dulla^@204~ rChar, 0, System.Data.ParameterDirect~dulla^@204~  0, "InvoiceNo", System.Data.DataRowV~dulla^@204~ t, false, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand = New System.Dat~dulla^@204~ qlCommand
            Me._adapter.Up~dulla^@204~ onnection = Me.Connection
          ~dulla^@204~ .UpdateCommand.CommandText = "UPDATE ~dulla^@204~ seInfo] SET [PartNo] = @PartNo, [Desc~dulla^@204~ escription,"& _ 
                " [~dulla^@204~ ce, [Brand] = @Brand, [Origin] = @Ori~dulla^@204~ ht] = @NetWeigh"& _ 
               ~dulla^@204~ y] = @Quantity, [Amount] = @Amount, [~dulla^@204~  @SupplierID, [Invo"& _ 
           ~dulla^@204~ = @InvoiceNo WHERE (([PartNo] = @Orig~dulla^@204~ AND ([Description] = @O"& _ 
       ~dulla^@204~ inal_Description) AND ((@IsNull_Price~dulla^@204~ ce] IS NULL) OR ([Price] = "& _ 
   ~dulla^@204~ "@Original_Price)) AND ((@IsNull_Bran~dulla^@204~ and] IS NULL) OR ([Brand] = @Or"& _ ~dulla^@204~     "iginal_Brand)) AND ((@IsNull_Ori~dulla^@204~ Origin] IS NULL) OR ([Origin] = @Or"&~dulla^@204~         "iginal_Origin)) AND ((@IsNul~dulla^@204~  1 AND [NetWeight] IS NULL) OR ([NetW~dulla^@204~             "ght] = @Original_NetWeig~dulla^@204~ antity] = @Original_Quantity) AND ([A~dulla^@204~                 " = @Original_Amount)~dulla^@204~ erID] = @Original_SupplierID) AND ([I~dulla^@204~ _ 
                "= @Original_Invo~dulla^@204~ bal.Microsoft.VisualBasic.ChrW(13)&Gl~dulla^@204~ t.VisualBasic.ChrW(10)&"SELECT PartNo~dulla^@204~ , Price, Brand, Origin, NetW"& _ 
  ~dulla^@204~  "eight, Quantity, Amount, SupplierID~dulla^@204~ ROM PurchaseInfo WHERE (InvoiceN"& _ ~dulla^@204~      "o = @InvoiceNo) AND (PartNo = @~dulla^@204~          Me._adapter.UpdateCommand.Co~dulla^@204~ ystem.Data.CommandType.Text
        ~dulla^@204~ er.UpdateCommand.Parameters.Add(New S~dulla^@204~ lClient.SqlParameter("@PartNo", Syste~dulla^@204~ ype.NVarChar, 0, System.Data.Paramete~dulla^@204~ put, 0, 0, "PartNo", System.Data.Data~dulla^@204~ rrent, false, Nothing, "", "", ""))
~dulla^@204~ e._adapter.UpdateCommand.Parameters.A~dulla^@204~ .Data.SqlClient.SqlParameter("@Descri~dulla^@204~ m.Data.SqlDbType.[Char], 0, System.Da~dulla^@204~ irection.Input, 0, 0, "Description", ~dulla^@204~ ataRowVersion.Current, false, Nothing~dulla^@204~ )
            Me._adapter.UpdateComm~dulla^@204~ s.Add(New System.Data.SqlClient.SqlParameter("@Price", System.Data.SqlDbType.Mo~dulla^@204~ m.Data.ParameterDirection.Input, 0, 0~dulla^@204~ stem.Data.DataRowVersion.Current, fal~dulla^@204~ "", "", ""))
            Me._adapter~dulla^@204~ d.Parameters.Add(New System.Data.SqlC~dulla^@204~ meter("@Brand", System.Data.SqlDbType~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ , System.Data.DataRowVersion.Current,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@Origin", System.Data.SqlD~dulla^@204~  0, System.Data.ParameterDirection.In~dulla^@204~ rigin", System.Data.DataRowVersion.Cu~dulla^@204~  Nothing, "", "", ""))
            M~dulla^@204~ dateCommand.Parameters.Add(New System~dulla^@204~ nt.SqlParameter("@NetWeight", System.~dulla^@204~ e.[Char], 0, System.Data.ParameterDir~dulla^@204~  0, 0, "NetWeight", System.Data.DataR~dulla^@204~ rent, false, Nothing, "", "", ""))
 ~dulla^@204~ ._adapter.UpdateCommand.Parameters.Ad~dulla^@204~ Data.SqlClient.SqlParameter("@Quantit~dulla^@204~ ta.SqlDbType.[Char], 0, System.Data.P~dulla^@204~ tion.Input, 0, 0, "Quantity", System.~dulla^@204~ ersion.Current, false, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ ystem.Data.SqlDbType.Money, 0, System~dulla^@204~ erDirection.Input, 0, 0, "Amount", Sy~dulla^@204~ aRowVersion.Current, false, Nothing, ~dulla^@204~ 
            Me._adapter.UpdateComman~dulla^@204~ Add(New System.Data.SqlClient.SqlPara~dulla^@204~ ierID", System.Data.SqlDbType.NVarCha~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~  System.Data.DataRowVersion.Current, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@InvoiceNo", System.Data.Sq~dulla^@204~ har, 0, System.Data.ParameterDirectio~dulla^@204~ , "InvoiceNo", System.Data.DataRowVer~dulla^@204~  false, Nothing, "", "", ""))
      ~dulla^@204~ pter.UpdateCommand.Parameters.Add(New~dulla^@204~ SqlClient.SqlParameter("@Original_Par~dulla^@204~ Data.SqlDbType.NVarChar, 0, System.Da~dulla^@204~ irection.Input, 0, 0, "PartNo", Syste~dulla^@204~ wVersion.Original, false, Nothing, ""~dulla^@204~            Me._adapter.UpdateCommand.~dulla^@204~ d(New System.Data.SqlClient.SqlParame~dulla^@204~ l_Description", System.Data.SqlDbType~dulla^@204~ ystem.Data.ParameterDirection.Input, ~dulla^@204~ ption", System.Data.DataRowVersion.Or~dulla^@204~ , Nothing, "", "", ""))
            ~dulla^@204~ pdateCommand.Parameters.Add(New Syste~dulla^@204~ ent.SqlParameter("@IsNull_Price", Sys~dulla^@204~ bType.Int, 0, System.Data.ParameterDi~dulla^@204~ , 0, 0, "Price", System.Data.DataRowV~dulla^@204~ al, true, Nothing, "", "", ""))
    ~dulla^@204~ dapter.UpdateCommand.Parameters.Add(N~dulla^@204~ a.SqlClient.SqlParameter("@Original_P~dulla^@204~ .Data.SqlDbType.Money, 0, System.Data~dulla^@204~ ection.Input, 0, 0, "Price", System.D~dulla^@204~ rsion.Original, false, Nothing, "", "~dulla^@204~         Me._adapter.UpdateCommand.Par~dulla^@204~ ew System.Data.SqlClient.SqlParameter~dulla^@204~ nd", System.Data.SqlDbType.Int, 0, Sy~dulla^@204~ ameterDirection.Input, 0, 0, "Brand",~dulla^@204~ DataRowVersion.Original, true, Nothin~dulla^@204~ ))
            Me._adapter.UpdateCom~dulla^@204~ rs.Add(New System.Data.SqlClient.SqlP~dulla^@204~ iginal_Brand", System.Data.SqlDbType.~dulla^@204~ stem.Data.ParameterDirection.Input, 0~dulla^@204~  System.Data.DataRowVersion.Original,~dulla^@204~ ng, "", "", ""))
            Me._ada~dulla^@204~ mmand.Parameters.Add(New System.Data.~dulla^@204~ Parameter("@IsNull_Origin", System.Da~dulla^@204~ Int, 0, System.Data.ParameterDirectio~dulla^@204~ , "Origin", System.Data.DataRowVersio~dulla^@204~ rue, Nothing, "", "", ""))
         ~dulla^@204~ r.UpdateCommand.Parameters.Add(New Sy~dulla^@204~ Client.SqlParameter("@Original_Origin~dulla^@204~ a.SqlDbType.[Char], 0, System.Data.Pa~dulla^@204~ ion.Input, 0, 0, "Origin", System.Dat~dulla^@204~ ion.Original, false, Nothing, "", "",~dulla^@204~       Me._adapter.UpdateCommand.Param~dulla^@204~  System.Data.SqlClient.SqlParameter("~dulla^@204~ ight", System.Data.SqlDbType.Int, 0, ~dulla^@204~ arameterDirection.Input, 0, 0, "NetWe~dulla^@204~ .Data.DataRowVersion.Original, true, ~dulla^@204~ "", ""))
            Me._adapter.Upd~dulla^@204~ rameters.Add(New System.Data.SqlClien~dulla^@204~ r("@Original_NetWeight", System.Data.~dulla^@204~ ar], 0, System.Data.ParameterDirectio~dulla^@204~ , "NetWeight", System.Data.DataRowVer~dulla^@204~ , false, Nothing, "", "", ""))
     ~dulla^@204~ apter.UpdateCommand.Parameters.Add(Ne~dulla^@204~ .SqlClient.SqlParameter("@Original_Qu~dulla^@204~ em.Data.SqlDbType.[Char], 0, System.D~dulla^@204~ Direction.Input, 0, 0, "Quantity", Sy~dulla^@204~ aRowVersion.Original, false, Nothing,~dulla^@204~ 
            Me._adapter.UpdateComma~dulla^@204~ .Add(New System.Data.SqlClient.SqlPar~dulla^@204~ inal_Amount", System.Data.SqlDbType.M~dulla^@204~ em.Data.ParameterDirection.Input, 0, ~dulla^@204~ System.Data.DataRowVersion.Original, ~dulla^@204~ g, "", "", ""))
            Me._adap~dulla^@204~ mand.Parameters.Add(New System.Data.S~dulla^@204~ arameter("@Original_SupplierID", Syst~dulla^@204~ Type.NVarChar, 0, System.Data.Paramet~dulla^@204~ nput, 0, 0, "SupplierID", System.Data~dulla^@204~ on.Original, false, Nothing, "", "", ~dulla^@204~      Me._adapter.UpdateCommand.Parame~dulla^@204~ System.Data.SqlClient.SqlParameter("@~dulla^@204~ iceNo", System.Data.SqlDbType.NVarCha~dulla^@204~ Data.ParameterDirection.Input, 0, 0, ~dulla^@204~ System.Data.DataRowVersion.Original, ~dulla^@204~ g, "", "", ""))
        End Sub
   ~dulla^@204~   <System.Diagnostics.DebuggerNonUser~dulla^@204~ ()>  _
        Private Sub InitConne~dulla^@204~         Me._connection = New System.D~dulla^@204~ .SqlConnection
            Me._conne~dulla^@204~ ionString = Global.InventoryControlSy~dulla^@204~ tings.Default.PurchaseInfoConnection~dulla^@204~ Sub
        
        <System.Diagno~dulla^@204~ rNonUserCodeAttribute()>  _
        ~dulla^@204~ nitCommandCollection()
            M~dulla^@204~ lection = New System.Data.SqlClient.S~dulla^@204~ {}
            Me._commandCollection~dulla^@204~ tem.Data.SqlClient.SqlCommand
      ~dulla^@204~ mandCollection(0).Connection = Me.Con~dulla^@204~         Me._commandCollection(0).Comm~dulla^@204~ LECT PartNo, Description, Price, Bran~dulla^@204~ tWeight, Quantity, Amount, Su"& _ 
 ~dulla^@204~   "pplierID, InvoiceNo FROM dbo.Purch~dulla^@204~          Me._commandCollection(0).Com~dulla^@204~ stem.Data.CommandType.Text
        E~dulla^@204~    
        <System.Diagnostics.Debu~dulla^@204~ deAttribute(),  _
         System.Co~dulla^@204~ Design.HelpKeywordAttribute("vs.data.~dulla^@204~ ),  _
         System.ComponentModel~dulla^@204~ thodAttribute(System.ComponentModel.D~dulla^@204~ odType.Fill, true)>  _
        Publi~dulla^@204~ verridable Function Fill(ByVal dataTa~dulla^@204~ seInfoDataSet.PurchaseInfoDataTable) ~dulla^@204~            Me.Adapter.SelectCommand =~dulla^@204~ llection(0)
            If (Me.Clear~dulla^@204~ true) Then
                dataTable~dulla^@204~        End If
            Dim return~dulla^@204~ ger = Me.Adapter.Fill(dataTable)
   ~dulla^@204~ rn returnValue
        End Function~dulla^@204~       <System.Diagnostics.DebuggerNon~dulla^@204~ bute(),  _
         System.Component~dulla^@204~ HelpKeywordAttribute("vs.data.TableAd~dulla^@204~          System.ComponentModel.DataOb~dulla^@204~ ribute(System.ComponentModel.DataObje~dulla^@204~ [Select], true)>  _
        Public O~dulla^@204~ ridable Function GetData() As Purchas~dulla^@204~ PurchaseInfoDataTable
            Me~dulla^@204~ ctCommand = Me.CommandCollection(0)
~dulla^@204~ im dataTable As PurchaseInfoDataSet.P~dulla^@204~ taTable = New PurchaseInfoDataSet.Pur~dulla^@204~ Table
            Me.Adapter.Fill(da~dulla^@204~          Return dataTable
        En~dulla^@204~        
        <System.Diagnostics.~dulla^@204~ erCodeAttribute(),  _
         Syste~dulla^@204~ del.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Ove~dulla^@204~ dable Function Update(ByVal dataTable~dulla^@204~ nfoDataSet.PurchaseInfoDataTable) As ~dulla^@204~         Return Me.Adapter.Update(data~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute(), ~dulla^@204~ System.ComponentModel.Design.HelpKeyw~dulla^@204~ "vs.data.TableAdapter")>  _
        ~dulla^@204~ ads Overridable Function Update(ByVal~dulla^@204~ urchaseInfoDataSet) As Integer
     ~dulla^@204~  Me.Adapter.Update(dataSet, "Purchase~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute(), ~dulla^@204~ System.ComponentModel.Design.HelpKeyw~dulla^@204~ "vs.data.TableAdapter")>  _
        ~dulla^@204~ ads Overridable Function Update(ByVal~dulla^@204~ ystem.Data.DataRow) As Integer
     ~dulla^@204~  Me.Adapter.Update(New System.Data.Da~dulla^@204~ Row})
        End Function
        ~dulla^@204~ stem.Diagnostics.DebuggerNonUserCodeA~dulla^@204~ _
         System.ComponentModel.Des~dulla^@204~ rdAttribute("vs.data.TableAdapter")> ~dulla^@204~ ublic Overloads Overridable Function ~dulla^@204~ dataRows() As System.Data.DataRow) As~dulla^@204~          Return Me.Adapter.Update(dat~dulla^@204~    End Function
        
        <S~dulla^@204~ tics.DebuggerNonUserCodeAttribute(), ~dulla^@204~ System.ComponentModel.Design.HelpKeyw~dulla^@204~ "vs.data.TableAdapter"),  _
        ~dulla^@204~ nentModel.DataObjectMethodAttribute(S~dulla^@204~ ntModel.DataObjectMethodType.Delete, ~dulla^@204~       Public Overloads Overridable Fu~dulla^@204~ (ByVal Original_PartNo As String, ByV~dulla^@204~ escription As String, ByVal Original_~dulla^@204~ em.Nullable(Of Decimal), ByVal Origin~dulla^@204~ tring, ByVal Original_Origin As Strin~dulla^@204~ inal_NetWeight As String, ByVal Origi~dulla^@204~ As String, ByVal Original_Amount As D~dulla^@204~  Original_SupplierID As String, ByVal~dulla^@204~ oiceNo As String) As Integer
       ~dulla^@204~ inal_PartNo Is Nothing) Then
       ~dulla^@204~ w New System.ArgumentNullException("O~dulla^@204~ o")
            Else
              ~dulla^@204~ DeleteCommand.Parameters(0).Value = C~dulla^@204~ _PartNo,String)
            End If
~dulla^@204~ f (Original_Description Is Nothing) T~dulla^@204~         Throw New System.ArgumentNull~dulla^@204~ iginal_Description")
            Els~dulla^@204~       Me.Adapter.DeleteCommand.Parame~dulla^@204~  = CType(Original_Description,String)~dulla^@204~  End If
            If (Original_Pri~dulla^@204~  true) Then
                Me.Adapt~dulla^@204~ and.Parameters(2).Value = CType(0,Obj~dulla^@204~          Me.Adapter.DeleteCommand.Par~dulla^@204~ lue = CType(Original_Price.Value,Deci~dulla^@204~      Else
                Me.Adapter~dulla^@204~ d.Parameters(2).Value = CType(1,Objec~dulla^@204~        Me.Adapter.DeleteCommand.Param~dulla^@204~ e = System.DBNull.Value
            ~dulla^@204~        If (Original_Brand Is Nothing)~dulla^@204~           Me.Adapter.DeleteCommand.Pa~dulla^@204~ alue = CType(1,Object)
             ~dulla^@204~ .DeleteCommand.Parameters(5).Value = ~dulla^@204~ .Value
            Else
           ~dulla^@204~ er.DeleteCommand.Parameters(4).Value ~dulla^@204~ ect)
                Me.Adapter.Dele~dulla^@204~ ameters(5).Value = CType(Original_Bra~dulla^@204~            End If
            If (Or~dulla^@204~  Is Nothing) Then
                Me~dulla^@204~ teCommand.Parameters(6).Value = CType~dulla^@204~                Me.Adapter.DeleteComma~dulla^@204~ (7).Value = System.DBNull.Value
    ~dulla^@204~ 
                Me.Adapter.DeleteCom~dulla^@204~ rs(6).Value = CType(0,Object)
      ~dulla^@204~ Adapter.DeleteCommand.Parameters(7).V~dulla^@204~ Original_Origin,String)
            ~dulla^@204~        If (Original_NetWeight Is Noth~dulla^@204~               Me.Adapter.DeleteComman~dulla^@204~ 8).Value = CType(1,Object)
         ~dulla^@204~ pter.DeleteCommand.Parameters(9).Valu~dulla^@204~ Null.Value
            Else
       ~dulla^@204~ dapter.DeleteCommand.Parameters(8).Va~dulla^@204~ ,Object)
                Me.Adapter.~dulla^@204~ .Parameters(9).Value = CType(Original~dulla^@204~ ring)
            End If
          ~dulla^@204~ l_Quantity Is Nothing) Then
        ~dulla^@204~  New System.ArgumentNullException("Or~dulla^@204~ ty")
            Else
             ~dulla^@204~ .DeleteCommand.Parameters(10).Value =~dulla^@204~ al_Quantity,String)
            End ~dulla^@204~    Me.Adapter.DeleteCommand.Parameter~dulla^@204~  CType(Original_Amount,Decimal)
    ~dulla^@204~ riginal_SupplierID Is Nothing) Then
~dulla^@204~    Throw New System.ArgumentNullExcep~dulla^@204~ l_SupplierID")
            Else
   ~dulla^@204~ Me.Adapter.DeleteCommand.Parameters(1~dulla^@204~ ype(Original_SupplierID,String)
    ~dulla^@204~ f
            If (Original_InvoiceNo~dulla^@204~ Then
                Throw New Syste~dulla^@204~ lException("Original_InvoiceNo")
   ~dulla^@204~ 
                Me.Adapter.DeleteCo~dulla^@204~ ers(13).Value = CType(Original_Invoic~dulla^@204~             End If
            Dim p~dulla^@204~ tionState As System.Data.ConnectionSt~dulla^@204~ ter.DeleteCommand.Connection.State
 ~dulla^@204~  ((Me.Adapter.DeleteCommand.Connectio~dulla^@204~ ystem.Data.ConnectionState.Open)  _
~dulla^@204~            <> System.Data.ConnectionS~dulla^@204~ en
                Me.Adapter.Delete~dulla^@204~ ction.Open
            End If
     ~dulla^@204~                 Dim returnValue As In~dulla^@204~ apter.DeleteCommand.ExecuteNonQuery
~dulla^@204~    Return returnValue
            Fi~dulla^@204~           If (previousConnectionState~dulla^@204~ a.ConnectionState.Closed) Then
     ~dulla^@204~   Me.Adapter.DeleteCommand.Connection~dulla^@204~            End If
            End Tr~dulla^@204~ d Function
        
        <System~dulla^@204~ DebuggerNonUserCodeAttribute(),  _
 ~dulla^@204~ m.ComponentModel.Design.HelpKeywordAt~dulla^@204~ ata.TableAdapter"),  _
         Syst~dulla^@204~ odel.DataObjectMethodAttribute(System~dulla^@204~ el.DataObjectMethodType.Insert, true)~dulla^@204~  Public Overloads Overridable Functio~dulla^@204~ l PartNo As String, ByVal Description~dulla^@204~ yVal Price As System.Nullable(Of Deci~dulla^@204~ rand As String, ByVal Origin As Strin~dulla^@204~ eight As String, ByVal Quantity As St~dulla^@204~ mount As Decimal, ByVal SupplierID As~dulla^@204~ l InvoiceNo As String) As Integer
  ~dulla^@204~ (PartNo Is Nothing) Then
           ~dulla^@204~ w System.ArgumentNullException("PartN~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(0).Value = CType(PartNo,S~dulla^@204~        End If
            If (Descri~dulla^@204~ ing) Then
                Throw New ~dulla^@204~ ntNullException("Description")
     ~dulla^@204~                 Me.Adapter.InsertComm~dulla^@204~ s(1).Value = CType(Description,String~dulla^@204~   End If
            If (Price.HasVa~dulla^@204~ hen
                Me.Adapter.Inser~dulla^@204~ meters(2).Value = CType(Price.Value,D~dulla^@204~         Else
                Me.Adap~dulla^@204~ mand.Parameters(2).Value = System.DBN~dulla^@204~           End If
            If (Bra~dulla^@204~ ) Then
                Me.Adapter.In~dulla^@204~ arameters(3).Value = System.DBNull.Va~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(3).Value = CType(Brand,St~dulla^@204~       End If
            If (Origin ~dulla^@204~ hen
                Me.Adapter.Inser~dulla^@204~ meters(4).Value = System.DBNull.Value~dulla^@204~  Else
                Me.Adapter.Ins~dulla^@204~ rameters(4).Value = CType(Origin,Stri~dulla^@204~     End If
            If (NetWeight~dulla^@204~ Then
                Me.Adapter.Inse~dulla^@204~ ameters(5).Value = System.DBNull.Valu~dulla^@204~   Else
                Me.Adapter.In~dulla^@204~ arameters(5).Value = CType(NetWeight,~dulla^@204~         End If
            If (Quant~dulla^@204~ g) Then
                Throw New Sy~dulla^@204~ NullException("Quantity")
          ~dulla^@204~            Me.Adapter.InsertCommand.P~dulla^@204~ Value = CType(Quantity,String)
            End If
            Me.Adapter.Inse~dulla^@204~ ameters(7).Value = CType(Amount,Decim~dulla^@204~     If (SupplierID Is Nothing) Then
~dulla^@204~    Throw New System.ArgumentNullExcep~dulla^@204~ rID")
            Else
            ~dulla^@204~ r.InsertCommand.Parameters(8).Value =~dulla^@204~ erID,String)
            End If
   ~dulla^@204~ InvoiceNo Is Nothing) Then
         ~dulla^@204~ New System.ArgumentNullException("Inv~dulla^@204~          Else
                Me.Ada~dulla^@204~ mmand.Parameters(9).Value = CType(Inv~dulla^@204~ )
            End If
            Di~dulla^@204~ nectionState As System.Data.Connectio~dulla^@204~ dapter.InsertCommand.Connection.State~dulla^@204~  If ((Me.Adapter.InsertCommand.Connec~dulla^@204~ d System.Data.ConnectionState.Open)  ~dulla^@204~               <> System.Data.Connecti~dulla^@204~  Then
                Me.Adapter.Ins~dulla^@204~ nnection.Open
            End If
  ~dulla^@204~  
                Dim returnValue As~dulla^@204~ .Adapter.InsertCommand.ExecuteNonQuer~dulla^@204~       Return returnValue
           ~dulla^@204~              If (previousConnectionSt~dulla^@204~ Data.ConnectionState.Closed) Then
  ~dulla^@204~      Me.Adapter.InsertCommand.Connect~dulla^@204~               End If
            End~dulla^@204~  End Function
        
        <Sys~dulla^@204~ cs.DebuggerNonUserCodeAttribute(),  _~dulla^@204~ stem.ComponentModel.Design.HelpKeywor~dulla^@204~ s.data.TableAdapter"),  _
         S~dulla^@204~ ntModel.DataObjectMethodAttribute(Sys~dulla^@204~ Model.DataObjectMethodType.Update, tr~dulla^@204~     Public Overloads Overridable Func~dulla^@204~ _
                    ByVal PartNo A~dulla^@204~ 
                    ByVal Descriptio~dulla^@204~  _
                    ByVal Price A~dulla^@204~ able(Of Decimal),  _
               ~dulla^@204~ and As String,  _
                  ~dulla^@204~ n As String,  _
                    ~dulla^@204~ ht As String,  _
                   ~dulla^@204~ ty As String,  _
                   ~dulla^@204~  As Decimal,  _
                    ~dulla^@204~ rID As String,  _
                  ~dulla^@204~ ceNo As String,  _
                 ~dulla^@204~ inal_PartNo As String,  _
          ~dulla^@204~ al Original_Description As String,  _~dulla^@204~          ByVal Original_Price As Syst~dulla^@204~ f Decimal),  _
                    B~dulla^@204~ _Brand As String,  _
               ~dulla^@204~ iginal_Origin As String,  _
        ~dulla^@204~ yVal Original_NetWeight As String,  _~dulla^@204~          ByVal Original_Quantity As S~dulla^@204~                   ByVal Original_Amou~dulla^@204~ ,  _
                    ByVal Origi~dulla^@204~ D As String,  _
                    ~dulla^@204~ l_InvoiceNo As String) As Integer
  ~dulla^@204~ (PartNo Is Nothing) Then
           ~dulla^@204~ w System.ArgumentNullException("PartN~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(0).Value = CType(PartNo,S~dulla^@204~        End If
            If (Descri~dulla^@204~ ing) Then
                Throw New ~dulla^@204~ ntNullException("Description")
     ~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(1).Value = CType(Description,String~dulla^@204~   End If
            If (Price.HasVa~dulla^@204~ hen
                Me.Adapter.Updat~dulla^@204~ meters(2).Value = CType(Price.Value,D~dulla^@204~         Else
                Me.Adap~dulla^@204~ mand.Parameters(2).Value = System.DBN~dulla^@204~           End If
            If (Bra~dulla^@204~ ) Then
                Me.Adapter.Up~dulla^@204~ arameters(3).Value = System.DBNull.Va~dulla^@204~     Else
                Me.Adapter.~dulla^@204~ .Parameters(3).Value = CType(Brand,St~dulla^@204~       End If
            If (Origin ~dulla^@204~ hen
                Me.Adapter.Updat~dulla^@204~ meters(4).Value = System.DBNull.Value~dulla^@204~  Else
                Me.Adapter.Upd~dulla^@204~ rameters(4).Value = CType(Origin,Stri~dulla^@204~     End If
            If (NetWeight~dulla^@204~ Then
                Me.Adapter.Upda~dulla^@204~ ameters(5).Value = System.DBNull.Valu~dulla^@204~   Else
                Me.Adapter.Up~dulla^@204~ arameters(5).Value = CType(NetWeight,~dulla^@204~         End If
            If (Quant~dulla^@204~ g) Then
                Throw New Sy~dulla^@204~ NullException("Quantity")
          ~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ Value = CType(Quantity,String)
     ~dulla^@204~ 
            Me.Adapter.UpdateComman~dulla^@204~ 7).Value = CType(Amount,Decimal)
   ~dulla^@204~ SupplierID Is Nothing) Then
        ~dulla^@204~  New System.ArgumentNullException("Su~dulla^@204~            Else
                Me.A~dulla^@204~ Command.Parameters(8).Value = CType(S~dulla^@204~ ing)
            End If
           ~dulla^@204~ o Is Nothing) Then
                T~dulla^@204~ em.ArgumentNullException("InvoiceNo")~dulla^@204~  Else
                Me.Adapter.Upd~dulla^@204~ rameters(9).Value = CType(InvoiceNo,S~dulla^@204~        End If
            If (Origin~dulla^@204~ Nothing) Then
                Throw ~dulla^@204~ gumentNullException("Original_PartNo"~dulla^@204~   Else
                Me.Adapter.Up~dulla^@204~ arameters(10).Value = CType(Original_~dulla^@204~ )
            End If
            If~dulla^@204~ scription Is Nothing) Then
         ~dulla^@204~ New System.ArgumentNullException("Ori~dulla^@204~ tion")
            Else
           ~dulla^@204~ er.UpdateCommand.Parameters(11).Value~dulla^@204~ inal_Description,String)
           ~dulla^@204~         If (Original_Price.HasValue =~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(12).Value = CType(0,Object)
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(13).~dulla^@204~ (Original_Price.Value,Decimal)
     ~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(12).Value = CType(1,Object)
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(13).~dulla^@204~ m.DBNull.Value
            End If
 ~dulla^@204~  (Original_Brand Is Nothing) Then
  ~dulla^@204~  Me.Adapter.UpdateCommand.Parameters(~dulla^@204~ Type(1,Object)
                Me.Ad~dulla^@204~ ommand.Parameters(15).Value = System.~dulla^@204~ 
            Else
                Me~dulla^@204~ teCommand.Parameters(14).Value = CTyp~dulla^@204~                 Me.Adapter.UpdateComm~dulla^@204~ s(15).Value = CType(Original_Brand,St~dulla^@204~       End If
            If (Origina~dulla^@204~ othing) Then
                Me.Adap~dulla^@204~ mand.Parameters(16).Value = CType(1,O~dulla^@204~            Me.Adapter.UpdateCommand.P~dulla^@204~ .Value = System.DBNull.Value
       ~dulla^@204~               Me.Adapter.UpdateComman~dulla^@204~ 16).Value = CType(0,Object)
        ~dulla^@204~ apter.UpdateCommand.Parameters(17).Va~dulla^@204~ riginal_Origin,String)
            E~dulla^@204~       If (Original_NetWeight Is Nothi~dulla^@204~              Me.Adapter.UpdateCommand~dulla^@204~ 8).Value = CType(1,Object)
         ~dulla^@204~ pter.UpdateCommand.Parameters(19).Val~dulla^@204~ BNull.Value
            Else
      ~dulla^@204~ Adapter.UpdateCommand.Parameters(18).~dulla^@204~ (0,Object)
                Me.Adapte~dulla^@204~ nd.Parameters(19).Value = CType(Origi~dulla^@204~ ,String)
            End If
       ~dulla^@204~ inal_Quantity Is Nothing) Then
     ~dulla^@204~ row New System.ArgumentNullException(~dulla^@204~ ntity")
            Else
          ~dulla^@204~ ter.UpdateCommand.Parameters(20).Valu~dulla^@204~ ginal_Quantity,String)
            E~dulla^@204~       Me.Adapter.UpdateCommand.Parame~dulla^@204~ e = CType(Original_Amount,Decimal)
 ~dulla^@204~  (Original_SupplierID Is Nothing) The~dulla^@204~       Throw New System.ArgumentNullEx~dulla^@204~ inal_SupplierID")
            Else
~dulla^@204~    Me.Adapter.UpdateCommand.Parameter~dulla^@204~  CType(Original_SupplierID,String)
 ~dulla^@204~ d If
            If (Original_Invoic~dulla^@204~ g) Then
                Throw New Sy~dulla^@204~ NullException("Original_InvoiceNo")
~dulla^@204~ lse
                Me.Adapter.Updat~dulla^@204~ meters(23).Value = CType(Original_InvoiceNo,String)
            End If
      ~dulla^@204~ viousConnectionState As System.Data.C~dulla^@204~ e = Me.Adapter.UpdateCommand.Connecti~dulla^@204~          If ((Me.Adapter.UpdateComman~dulla^@204~ State And System.Data.ConnectionState~dulla^@204~                       <> System.Data.~dulla^@204~ te.Open) Then
                Me.Ada~dulla^@204~ mmand.Connection.Open
            En~dulla^@204~      Try 
                Dim return~dulla^@204~ ger = Me.Adapter.UpdateCommand.Execut~dulla^@204~               Return returnValue
   ~dulla^@204~ lly
                If (previousConn~dulla^@204~  System.Data.ConnectionState.Closed) ~dulla^@204~              Me.Adapter.UpdateCommand~dulla^@204~ lose
                End If
       ~dulla^@204~ 
        End Function
    End Class
End Namespace
